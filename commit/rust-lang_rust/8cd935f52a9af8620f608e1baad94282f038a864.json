{"sha": "8cd935f52a9af8620f608e1baad94282f038a864", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDkzNWY1MmE5YWY4NjIwZjYwOGUxYmFhZDk0MjgyZjAzOGE4NjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-27T20:45:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-30T07:43:39Z"}, "message": "Upgrade LLVM\n\nThis upgrade brings commit by @eddyb to help optimizations of virtual calls in\na few places (https://github.com/llvm-mirror/llvm/commit/6d2bd95) as well as a\ncommit by @c-a to *greatly* improve the runtime of the optimization passes\n(https://github.com/rust-lang/llvm/pull/3).\n\nNice work to these guys!", "tree": {"sha": "37c3a6ba8a08532e4d23c1d6987af072d98d1b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c3a6ba8a08532e4d23c1d6987af072d98d1b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd935f52a9af8620f608e1baad94282f038a864", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd935f52a9af8620f608e1baad94282f038a864", "html_url": "https://github.com/rust-lang/rust/commit/8cd935f52a9af8620f608e1baad94282f038a864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd935f52a9af8620f608e1baad94282f038a864/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d7812da841ddedf6c765eebb655be9866956ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d7812da841ddedf6c765eebb655be9866956ce", "html_url": "https://github.com/rust-lang/rust/commit/d6d7812da841ddedf6c765eebb655be9866956ce"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "b771e3923ce4561ba0c101cd3538a2a0b49dbf68", "filename": "configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -916,6 +916,10 @@ do\n         LLVM_OPTS=\"$LLVM_OPTS --disable-terminfo\"\n         # Try to have LLVM pull in as few dependencies as possible (#9397)\n         LLVM_OPTS=\"$LLVM_OPTS --disable-zlib --disable-libffi\"\n+        # LLVM says it needs a \"new\" clang/gcc, but we seem to get by ok with\n+        # older versions on the bots. Get by for a little longer by asking it to\n+        # not do version detection\n+        LLVM_OPTS=\"$LLVM_OPTS --disable-compiler-version-checks\"\n \n         # Use win32 native thread/lock apis instead of pthread wrapper.\n         # (llvm's configure tries to find pthread first, so we have to disable it explicitly.)"}, {"sha": "c7d5789aebc737e29b21eb13df38c8526e187145", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -1762,6 +1762,8 @@ pub mod llvm {\n         pub fn LLVMRustArchiveReadSection(AR: ArchiveRef, name: *c_char,\n                                           out_len: *mut size_t) -> *c_char;\n         pub fn LLVMRustDestroyArchive(AR: ArchiveRef);\n+\n+        pub fn LLVMRustSetDLLExportStorageClass(V: ValueRef);\n     }\n }\n "}, {"sha": "2e3217aa469ddde98bbbe8f91aafdf776498ec80", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -2531,12 +2531,12 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n             llvm::LLVMAddGlobal(llmod, maptype.to_ref(), buf)\n         }\n     });\n+    lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n+\n     // On windows we'd like to export the toplevel cratemap\n     // such that we can find it from libstd.\n     if targ_cfg.os == OsWin32 && is_top {\n-        lib::llvm::SetLinkage(map, lib::llvm::DLLExportLinkage);\n-    } else {\n-        lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n+        unsafe { llvm::LLVMRustSetDLLExportStorageClass(map) }\n     }\n \n     return (sym_name, map);"}, {"sha": "e1dabb48f0f898d1a808b3de3a26f5ee3735c7dd", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -1 +1 @@\n-Subproject commit 535989a92ce1f6f6488c94a2c8f4ed438349f162\n+Subproject commit e1dabb48f0f898d1a808b3de3a26f5ee3735c7dd"}, {"sha": "c5a75762fcc60ba3476812ae20a227cbf5aa7439", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -185,7 +185,7 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR,\n   std::string ErrorInfo;\n   raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_Binary);\n   formatted_raw_ostream FOS(OS);\n-  PM->add(createPrintModulePass(&FOS));\n+  PM->add(createPrintModulePass(FOS));\n   PM->run(*unwrap(M));\n }\n "}, {"sha": "9b077e2254ebebb4639c80fa28170dd96069a3aa", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -537,15 +537,15 @@ extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n     MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n-    std::string Err;\n-    Module *Src = llvm::getLazyBitcodeModule(buf, Dst->getContext(), &Err);\n-    if (Src == NULL) {\n-        LLVMRustError = Err.c_str();\n+    ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(buf, Dst->getContext());\n+    if (!Src) {\n+        LLVMRustError = Src.getError().message().c_str();\n         delete buf;\n         return false;\n     }\n \n-    if (Linker::LinkModules(Dst, Src, Linker::DestroySource, &Err)) {\n+    std::string Err;\n+    if (Linker::LinkModules(Dst, *Src, Linker::DestroySource, &Err)) {\n         LLVMRustError = Err.c_str();\n         return false;\n     }\n@@ -570,8 +570,8 @@ LLVMRustOpenArchive(char *path) {\n \n extern \"C\" const char*\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {\n-    for (Archive::child_iterator child = ar->begin_children(),\n-                                   end = ar->end_children();\n+    for (Archive::child_iterator child = ar->child_begin(),\n+                                   end = ar->child_end();\n          child != end; ++child) {\n         StringRef sect_name;\n         error_code err = child->getName(sect_name);\n@@ -589,3 +589,9 @@ extern \"C\" void\n LLVMRustDestroyArchive(Archive *ar) {\n     delete ar;\n }\n+\n+extern \"C\" void\n+LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n+    GlobalValue *V = unwrap<GlobalValue>(Value);\n+    V->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n+}"}, {"sha": "5b16a89b69f1b47b730b1f742b48733d93de6063", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2014-01-22\n+2014-01-27"}, {"sha": "e45a910fc8cab8bc5167be75cb7679a3db38bd1f", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/8cd935f52a9af8620f608e1baad94282f038a864/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=8cd935f52a9af8620f608e1baad94282f038a864", "patch": "@@ -16,14 +16,12 @@\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n-#include \"llvm/Analysis/Verifier.h\"\n+#include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/Analysis/Passes.h\"\n #include \"llvm/Analysis/Lint.h\"\n #include \"llvm/ADT/ArrayRef.h\"\n #include \"llvm/ADT/Triple.h\"\n #include \"llvm/ADT/DenseSet.h\"\n-#include \"llvm/Assembly/Parser.h\"\n-#include \"llvm/Assembly/PrintModulePass.h\"\n #include \"llvm/Support/CommandLine.h\"\n #include \"llvm/Support/FormattedStream.h\"\n #include \"llvm/Support/Timer.h\""}]}