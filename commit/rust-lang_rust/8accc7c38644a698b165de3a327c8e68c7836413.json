{"sha": "8accc7c38644a698b165de3a327c8e68c7836413", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhY2NjN2MzODY0NGE2OThiMTY1ZGUzYTMyN2M4ZTY4Yzc4MzY0MTM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-10-31T10:40:57Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-11-19T04:24:35Z"}, "message": "rustc: middle: simplify primitive type declaration in ty.", "tree": {"sha": "baf1a7eb4feac7e89a3854865db3a417928c0813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf1a7eb4feac7e89a3854865db3a417928c0813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8accc7c38644a698b165de3a327c8e68c7836413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8accc7c38644a698b165de3a327c8e68c7836413", "html_url": "https://github.com/rust-lang/rust/commit/8accc7c38644a698b165de3a327c8e68c7836413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8accc7c38644a698b165de3a327c8e68c7836413/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7aa7fa76b2293c9948d9211d31eec7fd53d9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7aa7fa76b2293c9948d9211d31eec7fd53d9af", "html_url": "https://github.com/rust-lang/rust/commit/9f7aa7fa76b2293c9948d9211d31eec7fd53d9af"}], "stats": {"total": 116, "additions": 38, "deletions": 78}, "files": [{"sha": "bf4260c46314b449d3ba383aa4036d9b872bd828", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 38, "deletions": 78, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8accc7c38644a698b165de3a327c8e68c7836413/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8accc7c38644a698b165de3a327c8e68c7836413/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8accc7c38644a698b165de3a327c8e68c7836413", "patch": "@@ -1011,41 +1011,52 @@ pub enum BoundRegion {\n     BrEnv\n }\n \n-mod primitives {\n-    use super::TyS;\n-\n-    use syntax::ast;\n+#[inline]\n+pub fn mk_prim_t<'tcx>(primitive: &'tcx TyS<'static>) -> Ty<'tcx> {\n+    // FIXME(#17596) Ty<'tcx> is incorrectly invariant w.r.t 'tcx.\n+    unsafe { &*(primitive as *const _ as *const TyS<'tcx>) }\n+}\n \n-    macro_rules! def_prim_ty(\n-        ($name:ident, $sty:expr) => (\n-            pub static $name: TyS<'static> = TyS {\n+// Do not change these from static to const, interning types requires\n+// the primitives to have a significant address.\n+macro_rules! def_prim_tys(\n+    ($($name:ident -> $sty:expr;)*) => (\n+        $(#[inline] pub fn $name<'tcx>() -> Ty<'tcx> {\n+            static PRIM_TY: TyS<'static> = TyS {\n                 sty: $sty,\n-                flags: super::NO_TYPE_FLAGS,\n+                flags: NO_TYPE_FLAGS,\n                 region_depth: 0,\n             };\n-        )\n+            mk_prim_t(&PRIM_TY)\n+        })*\n     )\n+)\n+\n+def_prim_tys!{\n+    mk_bool ->  ty_bool;\n+    mk_char ->  ty_char;\n+    mk_int ->   ty_int(ast::TyI);\n+    mk_i8 ->    ty_int(ast::TyI8);\n+    mk_i16 ->   ty_int(ast::TyI16);\n+    mk_i32 ->   ty_int(ast::TyI32);\n+    mk_i64 ->   ty_int(ast::TyI64);\n+    mk_uint ->  ty_uint(ast::TyU);\n+    mk_u8 ->    ty_uint(ast::TyU8);\n+    mk_u16 ->   ty_uint(ast::TyU16);\n+    mk_u32 ->   ty_uint(ast::TyU32);\n+    mk_u64 ->   ty_uint(ast::TyU64);\n+    mk_f32 ->   ty_float(ast::TyF32);\n+    mk_f64 ->   ty_float(ast::TyF64);\n+}\n \n-    def_prim_ty!(TY_BOOL,   super::ty_bool)\n-    def_prim_ty!(TY_CHAR,   super::ty_char)\n-    def_prim_ty!(TY_INT,    super::ty_int(ast::TyI))\n-    def_prim_ty!(TY_I8,     super::ty_int(ast::TyI8))\n-    def_prim_ty!(TY_I16,    super::ty_int(ast::TyI16))\n-    def_prim_ty!(TY_I32,    super::ty_int(ast::TyI32))\n-    def_prim_ty!(TY_I64,    super::ty_int(ast::TyI64))\n-    def_prim_ty!(TY_UINT,   super::ty_uint(ast::TyU))\n-    def_prim_ty!(TY_U8,     super::ty_uint(ast::TyU8))\n-    def_prim_ty!(TY_U16,    super::ty_uint(ast::TyU16))\n-    def_prim_ty!(TY_U32,    super::ty_uint(ast::TyU32))\n-    def_prim_ty!(TY_U64,    super::ty_uint(ast::TyU64))\n-    def_prim_ty!(TY_F32,    super::ty_float(ast::TyF32))\n-    def_prim_ty!(TY_F64,    super::ty_float(ast::TyF64))\n-\n-    pub static TY_ERR: TyS<'static> = TyS {\n-        sty: super::ty_err,\n-        flags: super::HAS_TY_ERR,\n+#[inline]\n+pub fn mk_err<'tcx>() -> Ty<'tcx> {\n+    static TY_ERR: TyS<'static> = TyS {\n+        sty: ty_err,\n+        flags: HAS_TY_ERR,\n         region_depth: 0,\n     };\n+    mk_prim_t(&TY_ERR)\n }\n \n // NB: If you change this, you'll probably want to change the corresponding\n@@ -1973,54 +1984,6 @@ impl FlagComputation {\n     }\n }\n \n-#[inline]\n-pub fn mk_prim_t<'tcx>(primitive: &'tcx TyS<'static>) -> Ty<'tcx> {\n-    // FIXME(#17596) Ty<'tcx> is incorrectly invariant w.r.t 'tcx.\n-    unsafe { &*(primitive as *const _ as *const TyS<'tcx>) }\n-}\n-\n-#[inline]\n-pub fn mk_err<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_ERR) }\n-\n-#[inline]\n-pub fn mk_bool<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_BOOL) }\n-\n-#[inline]\n-pub fn mk_int<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_INT) }\n-\n-#[inline]\n-pub fn mk_i8<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_I8) }\n-\n-#[inline]\n-pub fn mk_i16<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_I16) }\n-\n-#[inline]\n-pub fn mk_i32<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_I32) }\n-\n-#[inline]\n-pub fn mk_i64<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_I64) }\n-\n-#[inline]\n-pub fn mk_f32<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_F32) }\n-\n-#[inline]\n-pub fn mk_f64<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_F64) }\n-\n-#[inline]\n-pub fn mk_uint<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_UINT) }\n-\n-#[inline]\n-pub fn mk_u8<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_U8) }\n-\n-#[inline]\n-pub fn mk_u16<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_U16) }\n-\n-#[inline]\n-pub fn mk_u32<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_U32) }\n-\n-#[inline]\n-pub fn mk_u64<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_U64) }\n-\n pub fn mk_mach_int<'tcx>(tm: ast::IntTy) -> Ty<'tcx> {\n     match tm {\n         ast::TyI    => mk_int(),\n@@ -2048,9 +2011,6 @@ pub fn mk_mach_float<'tcx>(tm: ast::FloatTy) -> Ty<'tcx> {\n     }\n }\n \n-#[inline]\n-pub fn mk_char<'tcx>() -> Ty<'tcx> { mk_prim_t(&primitives::TY_CHAR) }\n-\n pub fn mk_str<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> {\n     mk_t(cx, ty_str)\n }"}]}