{"sha": "2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "node_id": "C_kwDOAAsO6NoAKDJlNDcyNzFjYjhkYjBkMTljNTkzMGNhNzI0ZWNkYmIzYmUzNDYzYWE", "commit": {"author": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2022-04-24T12:42:30Z"}, "committer": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2022-04-24T16:33:07Z"}, "message": "only show a simple description in E0133 span label", "tree": {"sha": "ad46812ee4e20ab172d3c125a8f8f1d49bc1692c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad46812ee4e20ab172d3c125a8f8f1d49bc1692c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRVsF4dMy9m92mNijsIqrtPgMP6xgUCYmV7wwAKCRAIqrtPgMP6\nxhD1AQCW2uOXwBSPveEVY54UNtx+/MuMJcwUBuMOdQ72V5wJvQEA19cEW5Qf94sE\nchSCco5cnWbUKQ29a2kf6nPX1tZL3gk=\n=sdhn\n-----END PGP SIGNATURE-----", "payload": "tree ad46812ee4e20ab172d3c125a8f8f1d49bc1692c\nparent 8b8f6653cfd54525714f02efe7af0a0f830e185c\nauthor Emil Gardstr\u00f6m <emil.gardstrom@gmail.com> 1650804150 +0200\ncommitter Emil Gardstr\u00f6m <emil.gardstrom@gmail.com> 1650817987 +0200\n\nonly show a simple description in E0133 span label\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "html_url": "https://github.com/rust-lang/rust/commit/2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/comments", "author": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8f6653cfd54525714f02efe7af0a0f830e185c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8f6653cfd54525714f02efe7af0a0f830e185c", "html_url": "https://github.com/rust-lang/rust/commit/8b8f6653cfd54525714f02efe7af0a0f830e185c"}], "stats": {"total": 213, "additions": 126, "deletions": 87}, "files": [{"sha": "e1e63dd48ba2b684186bbc0e793fb086ecb9db5e", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -44,62 +44,83 @@ pub enum UnsafetyViolationDetails {\n }\n \n impl UnsafetyViolationDetails {\n+    pub fn simple_description(&self) -> &'static str {\n+        use UnsafetyViolationDetails::*;\n+\n+        match self {\n+            CallToUnsafeFunction(..) => \"call to unsafe function\",\n+            UseOfInlineAssembly => \"use of inline assembly\",\n+            InitializingTypeWith => \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+            CastOfPointerToInt => \"cast of pointer to int\",\n+            UseOfMutableStatic => \"use of mutable static\",\n+            UseOfExternStatic => \"use of extern static\",\n+            DerefOfRawPointer => \"dereference of raw pointer\",\n+            AssignToDroppingUnionField => \"assignment to union field that might need dropping\",\n+            AccessToUnionField => \"access to union field\",\n+            MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n+            BorrowOfLayoutConstrainedField => {\n+                \"borrow of layout constrained field with interior mutability\"\n+            }\n+            CallToFunctionWith(..) => \"call to function with `#[target_feature]`\",\n+        }\n+    }\n+\n     pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n         use UnsafetyViolationDetails::*;\n         match self {\n             CallToUnsafeFunction(did) => (\n                 if let Some(did) = did {\n                     Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n                 } else {\n-                    Cow::Borrowed(\"call to unsafe function\")\n+                    Cow::Borrowed(self.simple_description())\n                 },\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                Cow::Borrowed(\"use of inline assembly\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                Cow::Borrowed(\"initializing type with `rustc_layout_scalar_valid_range` attr\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n             CastOfPointerToInt => (\n-                Cow::Borrowed(\"cast of pointer to int\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"casting pointers to integers in constants\",\n             ),\n             UseOfMutableStatic => (\n-                Cow::Borrowed(\"use of mutable static\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                Cow::Borrowed(\"use of extern static\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                Cow::Borrowed(\"dereference of raw pointer\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                Cow::Borrowed(\"assignment to union field that might need dropping\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                Cow::Borrowed(\"access to union field\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                Cow::Borrowed(\"mutation of layout constrained field\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                Cow::Borrowed(\"borrow of layout constrained field with interior mutability\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),"}, {"sha": "a841cce23dee994af0a520b202c6f34c98903888", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                             \"{} is unsafe and requires unsafe block (error E0133)\",\n                             description,\n                         ))\n-                        .span_label(span, description)\n+                        .span_label(span, kind.simple_description())\n                         .note(note)\n                         .emit();\n                     },\n@@ -110,7 +110,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                     description,\n                     fn_sugg,\n                 )\n-                .span_label(span, description)\n+                .span_label(span, kind.simple_description())\n                 .note(note)\n                 .emit();\n             }\n@@ -546,57 +546,75 @@ enum UnsafeOpKind {\n use UnsafeOpKind::*;\n \n impl UnsafeOpKind {\n+    pub fn simple_description(&self) -> &'static str {\n+        match self {\n+            CallToUnsafeFunction(..) => \"call to unsafe function\",\n+            UseOfInlineAssembly => \"use of inline assembly\",\n+            InitializingTypeWith => \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+            UseOfMutableStatic => \"use of mutable static\",\n+            UseOfExternStatic => \"use of extern static\",\n+            DerefOfRawPointer => \"dereference of raw pointer\",\n+            AssignToDroppingUnionField => \"assignment to union field that might need dropping\",\n+            AccessToUnionField => \"access to union field\",\n+            MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n+            BorrowOfLayoutConstrainedField => {\n+                \"borrow of layout constrained field with interior mutability\"\n+            }\n+            CallToFunctionWith(..) => \"call to function with `#[target_feature]`\",\n+        }\n+    }\n+\n     pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n         match self {\n             CallToUnsafeFunction(did) => (\n                 if let Some(did) = did {\n                     Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n                 } else {\n-                    Cow::Borrowed(\"call to unsafe function\")\n+                    Cow::Borrowed(self.simple_description())\n                 },\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                Cow::Borrowed(\"use of inline assembly\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                Cow::Borrowed(\"initializing type with `rustc_layout_scalar_valid_range` attr\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n             UseOfMutableStatic => (\n-                Cow::Borrowed(\"use of mutable static\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                Cow::Borrowed(\"use of extern static\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                Cow::Borrowed(\"dereference of raw pointer\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                Cow::Borrowed(\"assignment to union field that might need dropping\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                Cow::Borrowed(\"access to union field\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                Cow::Borrowed(\"mutation of layout constrained field\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                Cow::Borrowed(\"borrow of layout constrained field with interior mutability\"),\n+                Cow::Borrowed(self.simple_description()),\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),"}, {"sha": "34093eb29eb5de94e9621b816b4b9052d8190b3e", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -598,7 +598,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     description,\n                     unsafe_fn_msg,\n                 )\n-                .span_label(source_info.span, description)\n+                .span_label(source_info.span, details.simple_description())\n                 .note(note)\n                 .emit();\n             }"}, {"sha": "a12839539227b1d4d363088eee4dbef9b8a98a7e", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,31 +2,31 @@ error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe funct\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n-   |     ^^^^^^ call to unsafe function `S::f`\n+   |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n    |\n LL |     S::f();\n-   |     ^^^^^^ call to unsafe function `S::f`\n+   |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "9de23a8fada262c8f862e950c5c3e04d42bcc5be", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,15 +2,15 @@ error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe funct\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n-   |     ^^^^^^ call to unsafe function `S::f`\n+   |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "c6d2c2d466af286af6d6ad255faee84b86ee7d26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `std::pin::Pin::<P>::new_unchecked` is uns\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::pin::Pin::<P>::new_unchecked`\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "8c516e8900c27b27ed4285899b29c87caaea8cbb", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `Pin::<P>::new_unchecked` is unsafe and re\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `Pin::<P>::new_unchecked`\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "ad73058e1afa6305157e89367772709482cb1b74", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,15 +2,15 @@ error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe functi\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n-   |                 ^^^^^ call to unsafe function `foo`\n+   |                 ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n LL |     foo();\n-   |     ^^^^^ call to unsafe function `foo`\n+   |     ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "b313f06539ff7f5153e15c00956c7dbc96f08fb7", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe functi\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n-   |                 ^^^^^ call to unsafe function `foo`\n+   |                 ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "f1d7aba2aa3b68a01a296aaf12b78fb742dde4dd", "filename": "src/test/ui/error-codes/E0133.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "f1d7aba2aa3b68a01a296aaf12b78fb742dde4dd", "filename": "src/test/ui/error-codes/E0133.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "00ba0f7a6a3e07ccec84d86c46611e0976c2e848", "filename": "src/test/ui/foreign-unsafe-fn-called.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();\n-   |     ^^^^^^^^^^^^ call to unsafe function `test::free`\n+   |     ^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "00ba0f7a6a3e07ccec84d86c46611e0976c2e848", "filename": "src/test/ui/foreign-unsafe-fn-called.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();\n-   |     ^^^^^^^^^^^^ call to unsafe function `test::free`\n+   |     ^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "47bc2e1a6e91e8f63914ddf4253d8369970673a6", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,23 +2,23 @@ error[E0133]: call to unsafe function `std::intrinsics::unchecked_add` is unsafe\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::intrinsics::unchecked_add`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `std::intrinsics::unchecked_sub` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::intrinsics::unchecked_sub`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `std::intrinsics::unchecked_mul` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::intrinsics::unchecked_mul`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "5c3728ccdf84317cc9761ba22dfcb08f04402c0a", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.thir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,23 +2,23 @@ error[E0133]: call to unsafe function `unchecked_add` is unsafe and requires uns\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `unchecked_add`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unchecked_sub` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `unchecked_sub`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unchecked_mul` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `unchecked_mul`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "e3562810b3aa8f754424ee778615b3c09a7efd34", "filename": "src/test/ui/issues/issue-28776.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires u\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::ptr::write`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "e3562810b3aa8f754424ee778615b3c09a7efd34", "filename": "src/test/ui/issues/issue-28776.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires u\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::ptr::write`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "4d8acac61d9edc4817f5383de8e9ad355da3f388", "filename": "src/test/ui/issues/issue-3080.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe fu\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();\n-   |     ^^^^^^^^^^^^ call to unsafe function `X::with`\n+   |     ^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "4d8acac61d9edc4817f5383de8e9ad355da3f388", "filename": "src/test/ui/issues/issue-3080.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe fu\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();\n-   |     ^^^^^^^^^^^^ call to unsafe function `X::with`\n+   |     ^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "4ec993edc6656c4222793affb09029901bba8415", "filename": "src/test/ui/issues/issue-5844.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `issue_5844_aux::rand` is unsafe and requi\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `issue_5844_aux::rand`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "310a2b593fe853c253b3a9653e5a404097d103d4", "filename": "src/test/ui/issues/issue-5844.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `rand` is unsafe and requires unsafe funct\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `rand`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "6743f0802a0f5dac16da4efbe81aeb1d4fa39056", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,79 +2,79 @@ error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and req\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();\n-   |                  ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |                  ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n "}, {"sha": "6743f0802a0f5dac16da4efbe81aeb1d4fa39056", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,79 +2,79 @@ error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and req\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();\n-   |                  ^^^^^^ call to function `sse2` with `#[target_feature]`\n+   |                  ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n "}, {"sha": "699735977afce565f45654f16ac710d464c404d8", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,15 +2,15 @@ error[E0133]: call to unsafe function `std::thread::__FastLocalKeyInner::<T>::ge\n   --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::thread::__FastLocalKeyInner::<T>::get`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe and requires unsafe function or block\n   --> $DIR/issue-43733.rs:24:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::thread::LocalKey::<T>::new`\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "1ad3cc6881803d337e145c75cf81c2dbdb7e438a", "filename": "src/test/ui/threads-sendsync/issue-43733.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,15 +2,15 @@ error[E0133]: call to unsafe function `__FastLocalKeyInner::<T>::get` is unsafe\n   --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `__FastLocalKeyInner::<T>::get`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `LocalKey::<T>::new` is unsafe and requires unsafe function or block\n   --> $DIR/issue-43733.rs:24:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `LocalKey::<T>::new`\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "214501084b35fd24a3c823bd69fdc3b7a453aa64", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -117,15 +117,15 @@ error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function `unsf`\n+   |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();\n-   |         ^^^^^^ call to unsafe function `unsf`\n+   |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "706a62c272e652a121cff350c86390c5967cd344", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error: call to unsafe function `unsf` is unsafe and requires unsafe block (error\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function `unsf`\n+   |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n@@ -43,7 +43,7 @@ error: call to unsafe function `unsf` is unsafe and requires unsafe block (error\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function `unsf`\n+   |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n@@ -105,15 +105,15 @@ error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function `unsf`\n+   |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();\n-   |         ^^^^^^ call to unsafe function `unsf`\n+   |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "1a77adf4459d08f1e9dbcc3b56ba920a6d4a47d6", "filename": "src/test/ui/unsafe/unsafe-const-fn.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe func\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n-   |                  ^^^^^^^^^^^^^ call to unsafe function `dummy`\n+   |                  ^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "1a77adf4459d08f1e9dbcc3b56ba920a6d4a47d6", "filename": "src/test/ui/unsafe/unsafe-const-fn.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe func\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n-   |                  ^^^^^^^^^^^^^ call to unsafe function `dummy`\n+   |                  ^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "206dbd90a7521e55cbfd7e85cd8cc6b373caa66a", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "206dbd90a7521e55cbfd7e85cd8cc6b373caa66a", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "e81dd3b2b4186e83fc7cf56da3d8996b56dfd928", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "e81dd3b2b4186e83fc7cf56da3d8996b56dfd928", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e47271cb8db0d19c5930ca724ecdbb3be3463aa/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr?ref=2e47271cb8db0d19c5930ca724ecdbb3be3463aa", "patch": "@@ -2,7 +2,7 @@ error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();\n-   |     ^^^ call to unsafe function `f`\n+   |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}]}