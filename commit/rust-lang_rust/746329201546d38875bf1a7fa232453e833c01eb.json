{"sha": "746329201546d38875bf1a7fa232453e833c01eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjMyOTIwMTU0NmQzODg3NWJmMWE3ZmEyMzI0NTNlODMzYzAxZWI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-12T03:17:13Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-12T03:18:39Z"}, "message": "Add docs on performance", "tree": {"sha": "b210588196cd067be4a90ed2da3c1feea4dcee97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b210588196cd067be4a90ed2da3c1feea4dcee97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/746329201546d38875bf1a7fa232453e833c01eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/746329201546d38875bf1a7fa232453e833c01eb", "html_url": "https://github.com/rust-lang/rust/commit/746329201546d38875bf1a7fa232453e833c01eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/746329201546d38875bf1a7fa232453e833c01eb/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588786a788a5606dd3f4b4769ecd2e0c26a3ad20", "url": "https://api.github.com/repos/rust-lang/rust/commits/588786a788a5606dd3f4b4769ecd2e0c26a3ad20", "html_url": "https://github.com/rust-lang/rust/commit/588786a788a5606dd3f4b4769ecd2e0c26a3ad20"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "5540891c646d581fcd8f20eb8554c2e03cd902bc", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/746329201546d38875bf1a7fa232453e833c01eb/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/746329201546d38875bf1a7fa232453e833c01eb/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=746329201546d38875bf1a7fa232453e833c01eb", "patch": "@@ -953,6 +953,19 @@ pub trait Read {\n /// use [`Read::read_to_string`] you have to remember to check whether the read\n /// succeeded because otherwise your buffer will be empty or only partially full.)\n ///\n+/// # Performance\n+///\n+/// The downside of this function's increased ease of use and type safety is\n+/// that it gives you less control over performance. For example, you can't\n+/// pre-allocate memory like you can using [`String::with_capacity`] and\n+/// [`Read::read_to_string`]. Also, you can't re-use the buffer if an error\n+/// occurs while reading.\n+///\n+/// In many cases, this function's performance will be adequate and the ease of use\n+/// and type safety tradeoffs will be worth it. However, there are cases where you\n+/// need more control over performance, and in those cases you should definitely use\n+/// [`Read::read_to_string`] directly.\n+///\n /// # Errors\n ///\n /// This function forces you to handle errors because the output (the `String`)"}]}