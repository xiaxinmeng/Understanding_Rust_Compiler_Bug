{"sha": "8afe59893a7b3586b29b0bb697eba69e1a2b5593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmU1OTg5M2E3YjM1ODZiMjliMGJiNjk3ZWJhNjllMWEyYjU1OTM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu.dantras@huawei.com", "date": "2021-01-20T17:06:29Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-01-27T22:47:56Z"}, "message": "Add big-endian support for AArch64 va_arg", "tree": {"sha": "20c86497a81c3ae339092f1afb9ced77f5fa14c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c86497a81c3ae339092f1afb9ced77f5fa14c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afe59893a7b3586b29b0bb697eba69e1a2b5593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afe59893a7b3586b29b0bb697eba69e1a2b5593", "html_url": "https://github.com/rust-lang/rust/commit/8afe59893a7b3586b29b0bb697eba69e1a2b5593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afe59893a7b3586b29b0bb697eba69e1a2b5593/comments", "author": null, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f8f6281817d430e20726128b739d3c6708561c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8f6281817d430e20726128b739d3c6708561c", "html_url": "https://github.com/rust-lang/rust/commit/a2f8f6281817d430e20726128b739d3c6708561c"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "39d08fbee3b7fbc01a72522aef5d18d308f5a871", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8afe59893a7b3586b29b0bb697eba69e1a2b5593/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afe59893a7b3586b29b0bb697eba69e1a2b5593/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=8afe59893a7b3586b29b0bb697eba69e1a2b5593", "patch": "@@ -105,7 +105,6 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert_eq!(bx.tcx().sess.target.endian, Endian::Little);\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n@@ -144,9 +143,14 @@ fn emit_aapcs_va_arg(\n     let top = in_reg.load(top, bx.tcx().data_layout.pointer_align.abi);\n \n     // reg_value = *(@top + reg_off_v);\n-    let top = in_reg.gep(top, &[reg_off_v]);\n-    let top = in_reg.bitcast(top, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n-    let reg_value = in_reg.load(top, layout.align.abi);\n+    let mut reg_addr = in_reg.gep(top, &[reg_off_v]);\n+    if bx.tcx().sess.target.endian == Endian::Big && layout.size.bytes() != slot_size {\n+        // On big-endian systems the value is right-aligned in its slot.\n+        let offset = bx.const_i32((slot_size - layout.size.bytes()) as i32);\n+        reg_addr = in_reg.gep(reg_addr, &[offset]);\n+    }\n+    let reg_addr = in_reg.bitcast(reg_addr, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n+    let reg_value = in_reg.load(reg_addr, layout.align.abi);\n     in_reg.br(&end.llbb());\n \n     // On Stack block"}]}