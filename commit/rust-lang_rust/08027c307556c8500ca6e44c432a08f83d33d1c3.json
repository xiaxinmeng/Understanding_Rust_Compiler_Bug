{"sha": "08027c307556c8500ca6e44c432a08f83d33d1c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MDI3YzMwNzU1NmM4NTAwY2E2ZTQ0YzQzMmEwOGY4M2QzM2QxYzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-15T00:08:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-15T00:09:30Z"}, "message": "Cleanups", "tree": {"sha": "885d5729e6223132f571e12688fc3f2c20c4ab55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/885d5729e6223132f571e12688fc3f2c20c4ab55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08027c307556c8500ca6e44c432a08f83d33d1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08027c307556c8500ca6e44c432a08f83d33d1c3", "html_url": "https://github.com/rust-lang/rust/commit/08027c307556c8500ca6e44c432a08f83d33d1c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08027c307556c8500ca6e44c432a08f83d33d1c3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "html_url": "https://github.com/rust-lang/rust/commit/f1a5c489fd0e5b0b29f6c6f2537baed379fee460"}], "stats": {"total": 160, "additions": 75, "deletions": 85}, "files": [{"sha": "041e38a9ff4ca4d40fc64972bf3e15fa1784d02d", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08027c307556c8500ca6e44c432a08f83d33d1c3/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08027c307556c8500ca6e44c432a08f83d33d1c3/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=08027c307556c8500ca6e44c432a08f83d33d1c3", "patch": "@@ -13,8 +13,7 @@ use cargo_metadata::Message;\n use crossbeam_channel::{never, select, unbounded, Receiver, RecvError, Sender};\n \n pub use cargo_metadata::diagnostic::{\n-    Applicability, Diagnostic, DiagnosticLevel, DiagnosticSpan,\n-    DiagnosticSpanMacroExpansion,\n+    Applicability, Diagnostic, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion,\n };\n \n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "eabf4908ff165494dbf8174e512eaf284dedcb64", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 74, "deletions": 83, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/08027c307556c8500ca6e44c432a08f83d33d1c3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08027c307556c8500ca6e44c432a08f83d33d1c3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=08027c307556c8500ca6e44c432a08f83d33d1c3", "patch": "@@ -2,8 +2,7 @@\n //! `cargo check` json format to the LSP diagnostic format.\n use std::{\n     collections::HashMap,\n-    fmt::Write,\n-    path::{Component, Path, PathBuf, Prefix},\n+    path::{Component, Path, Prefix},\n     str::FromStr,\n };\n \n@@ -12,17 +11,21 @@ use lsp_types::{\n     Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n };\n use ra_flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n+use stdx::format_to;\n+\n+use crate::Result;\n \n /// Converts a Rust level string to a LSP severity\n fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n-    match val {\n-        DiagnosticLevel::Ice => Some(DiagnosticSeverity::Error),\n-        DiagnosticLevel::Error => Some(DiagnosticSeverity::Error),\n-        DiagnosticLevel::Warning => Some(DiagnosticSeverity::Warning),\n-        DiagnosticLevel::Note => Some(DiagnosticSeverity::Information),\n-        DiagnosticLevel::Help => Some(DiagnosticSeverity::Hint),\n-        DiagnosticLevel::Unknown => None,\n-    }\n+    let res = match val {\n+        DiagnosticLevel::Ice => DiagnosticSeverity::Error,\n+        DiagnosticLevel::Error => DiagnosticSeverity::Error,\n+        DiagnosticLevel::Warning => DiagnosticSeverity::Warning,\n+        DiagnosticLevel::Note => DiagnosticSeverity::Information,\n+        DiagnosticLevel::Help => DiagnosticSeverity::Hint,\n+        DiagnosticLevel::Unknown => return None,\n+    };\n+    Some(res)\n }\n \n /// Check whether a file name is from macro invocation\n@@ -33,7 +36,7 @@ fn is_from_macro(file_name: &str) -> bool {\n /// Converts a Rust macro span to a LSP location recursively\n fn map_macro_span_to_location(\n     span_macro: &DiagnosticSpanMacroExpansion,\n-    workspace_root: &PathBuf,\n+    workspace_root: &Path,\n ) -> Option<Location> {\n     if !is_from_macro(&span_macro.span.file_name) {\n         return Some(map_span_to_location(&span_macro.span, workspace_root));\n@@ -47,7 +50,7 @@ fn map_macro_span_to_location(\n }\n \n /// Converts a Rust span to a LSP location, resolving macro expansion site if neccesary\n-fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Location {\n+fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &Path) -> Location {\n     if span.expansion.is_some() {\n         let expansion = span.expansion.as_ref().unwrap();\n         if let Some(macro_range) = map_macro_span_to_location(&expansion, workspace_root) {\n@@ -59,11 +62,12 @@ fn map_span_to_location(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Loca\n }\n \n /// Converts a Rust span to a LSP location\n-fn map_span_to_location_naive(span: &DiagnosticSpan, workspace_root: &PathBuf) -> Location {\n-    let mut file_name = workspace_root.clone();\n+fn map_span_to_location_naive(span: &DiagnosticSpan, workspace_root: &Path) -> Location {\n+    let mut file_name = workspace_root.to_path_buf();\n     file_name.push(&span.file_name);\n     let uri = url_from_path_with_drive_lowercasing(file_name).unwrap();\n \n+    // FIXME: this doesn't handle UTF16 offsets correctly\n     let range = Range::new(\n         Position::new(span.line_start as u64 - 1, span.column_start as u64 - 1),\n         Position::new(span.line_end as u64 - 1, span.column_end as u64 - 1),\n@@ -77,39 +81,30 @@ fn map_span_to_location_naive(span: &DiagnosticSpan, workspace_root: &PathBuf) -\n /// If the span is unlabelled this will return `None`.\n fn map_secondary_span_to_related(\n     span: &DiagnosticSpan,\n-    workspace_root: &PathBuf,\n+    workspace_root: &Path,\n ) -> Option<DiagnosticRelatedInformation> {\n-    if let Some(label) = &span.label {\n-        let location = map_span_to_location(span, workspace_root);\n-        Some(DiagnosticRelatedInformation { location, message: label.clone() })\n-    } else {\n-        // Nothing to label this with\n-        None\n-    }\n+    let message = span.label.clone()?;\n+    let location = map_span_to_location(span, workspace_root);\n+    Some(DiagnosticRelatedInformation { location, message })\n }\n \n /// Determines if diagnostic is related to unused code\n fn is_unused_or_unnecessary(rd: &ra_flycheck::Diagnostic) -> bool {\n-    if let Some(code) = &rd.code {\n-        match code.code.as_str() {\n+    match &rd.code {\n+        Some(code) => match code.code.as_str() {\n             \"dead_code\" | \"unknown_lints\" | \"unreachable_code\" | \"unused_attributes\"\n             | \"unused_imports\" | \"unused_macros\" | \"unused_variables\" => true,\n             _ => false,\n-        }\n-    } else {\n-        false\n+        },\n+        None => false,\n     }\n }\n \n /// Determines if diagnostic is related to deprecated code\n-fn is_deprecated(rd: &RustDiagnostic) -> bool {\n-    if let Some(code) = &rd.code {\n-        match code.code.as_str() {\n-            \"deprecated\" => true,\n-            _ => false,\n-        }\n-    } else {\n-        false\n+fn is_deprecated(rd: &ra_flycheck::Diagnostic) -> bool {\n+    match &rd.code {\n+        Some(code) => code.code.as_str() == \"deprecated\",\n+        None => false,\n     }\n }\n \n@@ -121,7 +116,7 @@ enum MappedRustChildDiagnostic {\n \n fn map_rust_child_diagnostic(\n     rd: &ra_flycheck::Diagnostic,\n-    workspace_root: &PathBuf,\n+    workspace_root: &Path,\n ) -> MappedRustChildDiagnostic {\n     let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n     if spans.is_empty() {\n@@ -142,7 +137,12 @@ fn map_rust_child_diagnostic(\n         }\n     }\n \n-    if !edit_map.is_empty() {\n+    if edit_map.is_empty() {\n+        MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n+            location: map_span_to_location(spans[0], workspace_root),\n+            message: rd.message.clone(),\n+        })\n+    } else {\n         MappedRustChildDiagnostic::SuggestedFix(CodeAction {\n             title: rd.message.clone(),\n             kind: Some(\"quickfix\".to_string()),\n@@ -151,11 +151,6 @@ fn map_rust_child_diagnostic(\n             command: None,\n             is_preferred: None,\n         })\n-    } else {\n-        MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n-            location: map_span_to_location(spans[0], workspace_root),\n-            message: rd.message.clone(),\n-        })\n     }\n }\n \n@@ -178,11 +173,11 @@ pub(crate) struct MappedRustDiagnostic {\n /// If the diagnostic has no primary span this will return `None`\n pub(crate) fn map_rust_diagnostic_to_lsp(\n     rd: &ra_flycheck::Diagnostic,\n-    workspace_root: &PathBuf,\n+    workspace_root: &Path,\n ) -> Vec<MappedRustDiagnostic> {\n     let primary_spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n     if primary_spans.is_empty() {\n-        return vec![];\n+        return Vec::new();\n     }\n \n     let severity = map_level_to_severity(rd.level);\n@@ -199,8 +194,8 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     }\n \n     let mut needs_primary_span_label = true;\n-    let mut related_information = vec![];\n-    let mut tags = vec![];\n+    let mut related_information = Vec::new();\n+    let mut tags = Vec::new();\n \n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n         let related = map_secondary_span_to_related(secondary_span, workspace_root);\n@@ -209,15 +204,15 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         }\n     }\n \n-    let mut fixes = vec![];\n+    let mut fixes = Vec::new();\n     let mut message = rd.message.clone();\n     for child in &rd.children {\n         let child = map_rust_child_diagnostic(&child, workspace_root);\n         match child {\n             MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n             MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action),\n             MappedRustChildDiagnostic::MessageLine(message_line) => {\n-                write!(&mut message, \"\\n{}\", message_line).unwrap();\n+                format_to!(message, \"\\n{}\", message_line);\n \n                 // These secondary messages usually duplicate the content of the\n                 // primary span label.\n@@ -242,7 +237,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n             let mut message = message.clone();\n             if needs_primary_span_label {\n                 if let Some(primary_span_label) = &primary_span.label {\n-                    write!(&mut message, \"\\n{}\", primary_span_label).unwrap();\n+                    format_to!(message, \"\\n{}\", primary_span_label);\n                 }\n             }\n \n@@ -262,12 +257,12 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 code: code.clone().map(NumberOrString::String),\n                 source: Some(source.clone()),\n                 message,\n-                related_information: if !related_information.is_empty() {\n-                    Some(related_information.clone())\n-                } else {\n+                related_information: if related_information.is_empty() {\n                     None\n+                } else {\n+                    Some(related_information.clone())\n                 },\n-                tags: if !tags.is_empty() { Some(tags.clone()) } else { None },\n+                tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n             };\n \n             MappedRustDiagnostic { location, diagnostic, fixes: fixes.clone() }\n@@ -279,21 +274,16 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n /// This will only happen when processing windows paths.\n ///\n /// When processing non-windows path, this is essentially the same as `Url::from_file_path`.\n-pub fn url_from_path_with_drive_lowercasing(\n-    path: impl AsRef<Path>,\n-) -> Result<Url, Box<dyn std::error::Error + Send + Sync>> {\n+pub fn url_from_path_with_drive_lowercasing(path: impl AsRef<Path>) -> Result<Url> {\n     let component_has_windows_drive = path.as_ref().components().any(|comp| {\n         if let Component::Prefix(c) = comp {\n-            match c.kind() {\n-                Prefix::Disk(_) | Prefix::VerbatimDisk(_) => return true,\n-                _ => return false,\n-            }\n+            return matches!(c.kind(), Prefix::Disk(_) | Prefix::VerbatimDisk(_));\n         }\n         false\n     });\n \n     // VSCode expects drive letters to be lowercased, where rust will uppercase the drive letters.\n-    if component_has_windows_drive {\n+    let res = if component_has_windows_drive {\n         let url_original = Url::from_file_path(&path)\n             .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?;\n \n@@ -308,11 +298,12 @@ pub fn url_from_path_with_drive_lowercasing(\n         let joined = drive_partition[1].to_ascii_lowercase() + \":\" + drive_partition[0];\n         let url = Url::from_str(&joined).expect(\"This came from a valid `Url`\");\n \n-        Ok(url)\n+        url\n     } else {\n-        Ok(Url::from_file_path(&path)\n-            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?)\n-    }\n+        Url::from_file_path(&path)\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?\n+    };\n+    Ok(res)\n }\n \n #[cfg(test)]\n@@ -337,8 +328,8 @@ mod tests {\n     }\n \n     #[cfg(not(windows))]\n-    fn parse_diagnostic(val: &str) -> cargo_metadata::diagnostic::Diagnostic {\n-        serde_json::from_str::<cargo_metadata::diagnostic::Diagnostic>(val).unwrap()\n+    fn parse_diagnostic(val: &str) -> ra_flycheck::Diagnostic {\n+        serde_json::from_str::<ra_flycheck::Diagnostic>(val).unwrap()\n     }\n \n     #[test]\n@@ -390,8 +381,8 @@ mod tests {\n             \"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -473,8 +464,8 @@ mod tests {\n     }\"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -598,8 +589,8 @@ mod tests {\n     }\"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -719,8 +710,8 @@ mod tests {\n     }\"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -763,8 +754,8 @@ mod tests {\n     }\"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1035,8 +1026,8 @@ mod tests {\n     }\"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1265,8 +1256,8 @@ mod tests {\n             \"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n \n@@ -1399,8 +1390,8 @@ mod tests {\n             \"##,\n         );\n \n-        let workspace_root = PathBuf::from(\"/test/\");\n-        let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root);\n+        let workspace_root = Path::new(\"/test/\");\n+        let diag = map_rust_diagnostic_to_lsp(&diag, workspace_root);\n         insta::assert_debug_snapshot!(diag);\n     }\n }"}]}