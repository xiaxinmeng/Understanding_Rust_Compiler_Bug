{"sha": "cb5533cff21a1e7b929d96142ead825de25b2cbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTUzM2NmZjIxYTFlN2I5MjlkOTYxNDJlYWQ4MjVkZTI1YjJjYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T12:42:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T12:43:16Z"}, "message": "remove some functions that were only used by Miri", "tree": {"sha": "b8c9a78537169a23f19e671b95b50efb6cdd3c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8c9a78537169a23f19e671b95b50efb6cdd3c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5533cff21a1e7b929d96142ead825de25b2cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5533cff21a1e7b929d96142ead825de25b2cbc", "html_url": "https://github.com/rust-lang/rust/commit/cb5533cff21a1e7b929d96142ead825de25b2cbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5533cff21a1e7b929d96142ead825de25b2cbc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec", "html_url": "https://github.com/rust-lang/rust/commit/44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec"}], "stats": {"total": 98, "additions": 0, "deletions": 98}, "files": [{"sha": "fae05cb0a37dbea05aacd30d8928d5e087a68ed5", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb5533cff21a1e7b929d96142ead825de25b2cbc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5533cff21a1e7b929d96142ead825de25b2cbc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=cb5533cff21a1e7b929d96142ead825de25b2cbc", "patch": "@@ -276,29 +276,6 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n /// Reading and writing.\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n-    /// Reads bytes until a `0` is encountered. Will error if the end of the allocation is reached\n-    /// before a `0` is found.\n-    ///\n-    /// Most likely, you want to call `Memory::read_c_str` instead of this method.\n-    pub fn read_c_str(\n-        &self,\n-        cx: &impl HasDataLayout,\n-        ptr: Pointer<Tag>,\n-    ) -> InterpResult<'tcx, &[u8]> {\n-        let offset = ptr.offset.bytes_usize();\n-        Ok(match self.bytes[offset..].iter().position(|&c| c == 0) {\n-            Some(size) => {\n-                let size_with_null = Size::from_bytes(size) + Size::from_bytes(1);\n-                // Go through `get_bytes` for checks and AllocationExtra hooks.\n-                // We read the null, so we include it in the request, but we want it removed\n-                // from the result, so we do subslicing.\n-                &self.get_bytes(cx, ptr, size_with_null)?[..size]\n-            }\n-            // This includes the case where `offset` is out-of-bounds to begin with.\n-            None => throw_ub!(UnterminatedCString(ptr.erase_tag())),\n-        })\n-    }\n-\n     /// Validates that `ptr.offset` and `ptr.offset + size` do not point to the middle of a\n     /// relocation. If `allow_uninit_and_ptr` is `false`, also enforces that the memory in the\n     /// given range contains neither relocations nor uninitialized bytes."}, {"sha": "4030b3175fc8350eea680a4b8723c46dbe1195ee", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/cb5533cff21a1e7b929d96142ead825de25b2cbc/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5533cff21a1e7b929d96142ead825de25b2cbc/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=cb5533cff21a1e7b929d96142ead825de25b2cbc", "patch": "@@ -804,41 +804,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw(ptr.alloc_id)?.get_bytes(self, ptr, size)\n     }\n \n-    /// Reads a 0-terminated sequence of bytes from memory. Returns them as a slice.\n-    ///\n-    /// Performs appropriate bounds checks.\n-    pub fn read_c_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, &[u8]> {\n-        let ptr = self.force_ptr(ptr)?; // We need to read at least 1 byte, so we *need* a ptr.\n-        self.get_raw(ptr.alloc_id)?.read_c_str(self, ptr)\n-    }\n-\n-    /// Reads a 0x0000-terminated u16-sequence from memory. Returns them as a Vec<u16>.\n-    /// Terminator 0x0000 is not included in the returned Vec<u16>.\n-    ///\n-    /// Performs appropriate bounds checks.\n-    pub fn read_wide_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, Vec<u16>> {\n-        let size_2bytes = Size::from_bytes(2);\n-        let align_2bytes = Align::from_bytes(2).unwrap();\n-        // We need to read at least 2 bytes, so we *need* a ptr.\n-        let mut ptr = self.force_ptr(ptr)?;\n-        let allocation = self.get_raw(ptr.alloc_id)?;\n-        let mut u16_seq = Vec::new();\n-\n-        loop {\n-            ptr = self\n-                .check_ptr_access(ptr.into(), size_2bytes, align_2bytes)?\n-                .expect(\"cannot be a ZST\");\n-            let single_u16 = allocation.read_scalar(self, ptr, size_2bytes)?.to_u16()?;\n-            if single_u16 != 0x0000 {\n-                u16_seq.push(single_u16);\n-                ptr = ptr.offset(size_2bytes, self)?;\n-            } else {\n-                break;\n-            }\n-        }\n-        Ok(u16_seq)\n-    }\n-\n     /// Writes the given stream of bytes into memory.\n     ///\n     /// Performs appropriate bounds checks.\n@@ -866,46 +831,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n     }\n \n-    /// Writes the given stream of u16s into memory.\n-    ///\n-    /// Performs appropriate bounds checks.\n-    pub fn write_u16s(\n-        &mut self,\n-        ptr: Scalar<M::PointerTag>,\n-        src: impl IntoIterator<Item = u16>,\n-    ) -> InterpResult<'tcx> {\n-        let mut src = src.into_iter();\n-        let (lower, upper) = src.size_hint();\n-        let len = upper.expect(\"can only write bounded iterators\");\n-        assert_eq!(lower, len, \"can only write iterators with a precise length\");\n-\n-        let size = Size::from_bytes(lower);\n-        let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(2).unwrap())? {\n-            Some(ptr) => ptr,\n-            None => {\n-                // zero-sized access\n-                assert_matches!(\n-                    src.next(),\n-                    None,\n-                    \"iterator said it was empty but returned an element\"\n-                );\n-                return Ok(());\n-            }\n-        };\n-        let tcx = self.tcx;\n-        let allocation = self.get_raw_mut(ptr.alloc_id)?;\n-\n-        for idx in 0..len {\n-            let val = Scalar::from_u16(\n-                src.next().expect(\"iterator was shorter than it said it would be\"),\n-            );\n-            let offset_ptr = ptr.offset(Size::from_bytes(idx) * 2, &tcx)?; // `Size` multiplication\n-            allocation.write_scalar(&tcx, offset_ptr, val.into(), Size::from_bytes(2))?;\n-        }\n-        assert_matches!(src.next(), None, \"iterator was longer than it said it would be\");\n-        Ok(())\n-    }\n-\n     /// Expects the caller to have checked bounds and alignment.\n     pub fn copy(\n         &mut self,"}]}