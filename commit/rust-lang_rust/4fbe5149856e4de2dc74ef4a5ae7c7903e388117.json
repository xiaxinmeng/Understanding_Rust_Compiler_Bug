{"sha": "4fbe5149856e4de2dc74ef4a5ae7c7903e388117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYmU1MTQ5ODU2ZTRkZTJkYzc0ZWY0YTVhZTdjNzkwM2UzODgxMTc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T03:13:51Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T03:13:51Z"}, "message": "Fix the span for ! returns", "tree": {"sha": "ecee57a4ad8afed586ef5c9565b167312c163741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecee57a4ad8afed586ef5c9565b167312c163741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fbe5149856e4de2dc74ef4a5ae7c7903e388117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbe5149856e4de2dc74ef4a5ae7c7903e388117", "html_url": "https://github.com/rust-lang/rust/commit/4fbe5149856e4de2dc74ef4a5ae7c7903e388117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fbe5149856e4de2dc74ef4a5ae7c7903e388117/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc4d566b432d48933e27dd65a973c936b564d6e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc4d566b432d48933e27dd65a973c936b564d6e9", "html_url": "https://github.com/rust-lang/rust/commit/fc4d566b432d48933e27dd65a973c936b564d6e9"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "b6650b6f944201a476ae8317b2a115136a6bad1c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fbe5149856e4de2dc74ef4a5ae7c7903e388117/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbe5149856e4de2dc74ef4a5ae7c7903e388117/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4fbe5149856e4de2dc74ef4a5ae7c7903e388117", "patch": "@@ -1263,7 +1263,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_ret_ty(&mut self) -> PResult<FunctionRetTy> {\n         if try!(self.eat(&token::RArrow) ){\n             if try!(self.eat(&token::Not) ){\n-                Ok(NoReturn(self.span))\n+                Ok(NoReturn(self.last_span))\n             } else {\n                 Ok(Return(try!(self.parse_ty_nopanic())))\n             }"}]}