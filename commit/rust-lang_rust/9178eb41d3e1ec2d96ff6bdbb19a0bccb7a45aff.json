{"sha": "9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNzhlYjQxZDNlMWVjMmQ5NmZmNmJkYmIxOWEwYmNjYjdhNDVhZmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-03T20:24:24Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-19T17:41:10Z"}, "message": "Handle trait objects", "tree": {"sha": "fefc262c0482b27084e7698be7f6952e046b1065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fefc262c0482b27084e7698be7f6952e046b1065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff", "html_url": "https://github.com/rust-lang/rust/commit/9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "122886842e74467e24935793f79d7443eb509e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/122886842e74467e24935793f79d7443eb509e35", "html_url": "https://github.com/rust-lang/rust/commit/122886842e74467e24935793f79d7443eb509e35"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "3bb35b8e4e10e9d00e63b48a1652adbeb1c702e0", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9178eb41d3e1ec2d96ff6bdbb19a0bccb7a45aff", "patch": "@@ -65,13 +65,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             true\n         } else {\n             match t.sty {\n-                ty::Adt(def, _) => check_must_use(cx, def.did, s.span, \"\"),\n+                ty::Adt(def, _) => check_must_use(cx, def.did, s.span, \"\", \"\"),\n                 ty::Opaque(def, _) => {\n                     let mut must_use = false;\n                     for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n-                            if check_must_use(cx, trait_ref.def_id, s.span, \"implementer of \") {\n+                            if check_must_use(cx, trait_ref.def_id, s.span, \"implementer of \", \"\") {\n+                                must_use = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    must_use\n+                }\n+                ty::Dynamic(binder, _) => {\n+                    let mut must_use = false;\n+                    for predicate in binder.skip_binder().iter() {\n+                        if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+                            if check_must_use(cx, trait_ref.def_id, s.span, \"\", \" trait object\") {\n                                 must_use = true;\n                                 break;\n                             }\n@@ -107,7 +119,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n         if let Some(def) = maybe_def {\n             let def_id = def.def_id();\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \", \"\");\n         } else if type_permits_lack_of_use {\n             // We don't warn about unused unit or uninhabited types.\n             // (See https://github.com/rust-lang/rust/issues/43806 for details.)\n@@ -161,11 +173,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n \n-        fn check_must_use(cx: &LateContext, def_id: DefId, sp: Span, describe_path: &str) -> bool {\n+        fn check_must_use(\n+            cx: &LateContext,\n+            def_id: DefId,\n+            sp: Span,\n+            descr_pre_path: &str,\n+            descr_post_path: &str,\n+        ) -> bool {\n             for attr in cx.tcx.get_attrs(def_id).iter() {\n                 if attr.check_name(\"must_use\") {\n-                    let msg = format!(\"unused {}`{}` that must be used\",\n-                                          describe_path, cx.tcx.item_path_str(def_id));\n+                    let msg = format!(\"unused {}`{}`{} that must be used\",\n+                        descr_pre_path, descr_post_path, cx.tcx.item_path_str(def_id));\n                     let mut err = cx.struct_span_lint(UNUSED_MUST_USE, sp, &msg);\n                     // check for #[must_use = \"...\"]\n                     if let Some(note) = attr.value_str() {"}]}