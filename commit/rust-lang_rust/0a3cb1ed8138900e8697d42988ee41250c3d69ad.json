{"sha": "0a3cb1ed8138900e8697d42988ee41250c3d69ad", "node_id": "C_kwDOAAsO6NoAKDBhM2NiMWVkODEzODkwMGU4Njk3ZDQyOTg4ZWU0MTI1MGMzZDY5YWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-15T00:40:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-15T00:40:44Z"}, "message": "Rollup merge of #104381 - mejrs:none_error, r=compiler-errors\n\nRemove dead NoneError diagnostic handling\n\n`NoneError` was removed some time ago, so this was dead code.", "tree": {"sha": "3241dfb2a10a25e40833d93816a60ea018c1c3f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3241dfb2a10a25e40833d93816a60ea018c1c3f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3cb1ed8138900e8697d42988ee41250c3d69ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcuAMCRBK7hj4Ov3rIwAAk3kIAHaCXjhzoZIckWXQtDpuTEEs\ndEAFDpDhAcVmczFyy3hK1kg+Szopymbbk6g2304GFI1oRfrKZjuxll+my9Dp87jX\nwTa3cKyYf46t0h2H03QhD6XsuckIw3mXCnBk6EqV8a8IxEI7XDvHiPvuVTl1tHW6\nVmhk+/dfLk+hG1sEZcmsMRCFlYMHwcRENtOo20gQUwNoV6142jQlMr/ssF+tps/o\nr/UraEAFO8L8rdS5cBXWMRm8YkazpeoDwkOlbjqWtE/OBxWBTNAOTO+IIt9p2UKx\n4FaqRT5q2M6NAPsus5h7x0FofRzj/IzAG+AIUdzPKODjxyBwnYFcikQ6TStZ0kY=\n=U1+J\n-----END PGP SIGNATURE-----\n", "payload": "tree 3241dfb2a10a25e40833d93816a60ea018c1c3f7\nparent 2eee3a6d5ea02cc3ca79c98af48d8139e37c6bd9\nparent 25acee5494db43bd010c7a2615fae71ce905afe7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668472844 +0100\ncommitter GitHub <noreply@github.com> 1668472844 +0100\n\nRollup merge of #104381 - mejrs:none_error, r=compiler-errors\n\nRemove dead NoneError diagnostic handling\n\n`NoneError` was removed some time ago, so this was dead code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cb1ed8138900e8697d42988ee41250c3d69ad", "html_url": "https://github.com/rust-lang/rust/commit/0a3cb1ed8138900e8697d42988ee41250c3d69ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cb1ed8138900e8697d42988ee41250c3d69ad/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eee3a6d5ea02cc3ca79c98af48d8139e37c6bd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eee3a6d5ea02cc3ca79c98af48d8139e37c6bd9", "html_url": "https://github.com/rust-lang/rust/commit/2eee3a6d5ea02cc3ca79c98af48d8139e37c6bd9"}, {"sha": "25acee5494db43bd010c7a2615fae71ce905afe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25acee5494db43bd010c7a2615fae71ce905afe7", "html_url": "https://github.com/rust-lang/rust/commit/25acee5494db43bd010c7a2615fae71ce905afe7"}], "stats": {"total": 44, "additions": 8, "deletions": 36}, "files": [{"sha": "c35bb0cc475d79e411f389327ffaa8d2e6c0dcb1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a3cb1ed8138900e8697d42988ee41250c3d69ad/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3cb1ed8138900e8697d42988ee41250c3d69ad/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0a3cb1ed8138900e8697d42988ee41250c3d69ad", "patch": "@@ -1035,7 +1035,6 @@ symbols! {\n         non_exhaustive,\n         non_exhaustive_omitted_patterns_lint,\n         non_modrs_mods,\n-        none_error,\n         nontemporal_store,\n         noop_method_borrow,\n         noop_method_clone,"}, {"sha": "41b252a82651cb7799e318baa346c03af1401b64", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0a3cb1ed8138900e8697d42988ee41250c3d69ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3cb1ed8138900e8697d42988ee41250c3d69ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0a3cb1ed8138900e8697d42988ee41250c3d69ad", "patch": "@@ -650,41 +650,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 ))\n                         );\n \n-                        if is_try_conversion {\n-                            let none_error = self\n-                                .tcx\n-                                .get_diagnostic_item(sym::none_error)\n-                                .map(|def_id| tcx.type_of(def_id));\n-                            let should_convert_option_to_result =\n-                                Some(trait_ref.skip_binder().substs.type_at(1)) == none_error;\n-                            let should_convert_result_to_option =\n-                                Some(trait_ref.self_ty().skip_binder()) == none_error;\n-                            if should_convert_option_to_result {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    \"consider converting the `Option<T>` into a `Result<T, _>` \\\n-                                     using `Option::ok_or` or `Option::ok_or_else`\",\n-                                    \".ok_or_else(|| /* error value */)\",\n-                                    Applicability::HasPlaceholders,\n-                                );\n-                            } else if should_convert_result_to_option {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    \"consider converting the `Result<T, _>` into an `Option<T>` \\\n-                                     using `Result::ok`\",\n-                                    \".ok()\",\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            if let Some(ret_span) = self.return_type_span(&obligation) {\n-                                err.span_label(\n-                                    ret_span,\n-                                    &format!(\n-                                        \"expected `{}` because of this\",\n-                                        trait_ref.skip_binder().self_ty()\n-                                    ),\n-                                );\n-                            }\n+                        if is_try_conversion && let Some(ret_span) = self.return_type_span(&obligation) {\n+                            err.span_label(\n+                                ret_span,\n+                                &format!(\n+                                    \"expected `{}` because of this\",\n+                                    trait_ref.skip_binder().self_ty()\n+                                ),\n+                            );\n                         }\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().tuple_trait() {"}]}