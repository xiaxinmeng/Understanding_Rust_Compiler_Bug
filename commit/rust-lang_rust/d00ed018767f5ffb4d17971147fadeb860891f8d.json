{"sha": "d00ed018767f5ffb4d17971147fadeb860891f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMGVkMDE4NzY3ZjVmZmI0ZDE3OTcxMTQ3ZmFkZWI4NjA4OTFmOGQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-19T20:49:45Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-19T20:50:55Z"}, "message": "Only create `OnDiskCache` in incremental compilation mode\n\nThis lets us skip doing useless work when we're not in incremental\ncompilation mode.", "tree": {"sha": "5bd12b809f73fc7df149b8fe87b1d061224f9390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd12b809f73fc7df149b8fe87b1d061224f9390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d00ed018767f5ffb4d17971147fadeb860891f8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+22rAACgkQtAh+UQ6Y\nsWRAiw//cyo/a3rcZLEKGSvj+re5BjfusX0QDO/Owa2MCNIMf7FY3++GGRU8ABNx\nVl8Za0S2RZZaTv0OFCMsY1KDiwOWCQnKi5SgPEg5YFkaxGnFTUqufIhkmLnn9KxS\nBayQuobNwpcVLGxoflqXv0N8tFkZYTZIgCUJE3oLCBJb9wa1zAwh2oS39J3dmhYK\ngpGRm8Fs32dy6q2GajL7hPZJhygyUPxKGox10WtNLNDnzY8eRk8ZW88Hm2Kw3L3V\nrnhroOODulbYIbNqZWGoCdPBFxj3GmZzcVXqGnum8qYsel3IYgJHZenpkrQzAPub\nzNlQQ/vP9vdWHiXH77C8YKhvyPA4jdX+KrQwmKC7wVqY8fcFQ4JOhCLpUAmI04GQ\n+kiMNcNtUbwkd80RDY1waASZvPbi1I1u+ipeuWjPlau/ISHcRhuK3DfhdwSBvxmy\n/pdtg5ywnonOaCGUE4+WKVxZ6sjarKpoCjS+p9qFzc0mvtDDDl6hwXl2dT1jJT4B\n50f1I2BU75OMxyaytzfg29PPbkOkJ1gZN0X/rSqtfP3Z/gJuJk33G+e5uHbBpEx3\niUGw4D38yWq9n5HUGrg1FsnN1fqurSHLdiGQEh/ay1Bt61l5qE5IWkrS2HarThmG\nkrglAx4mzjscekfiB7RwHHX/Wstf/f87JcGMUBg1nJ9wI5T1po4=\n=NGSl\n-----END PGP SIGNATURE-----", "payload": "tree 5bd12b809f73fc7df149b8fe87b1d061224f9390\nparent fe982319aa0aa5bbfc2795791a753832292bd2ba\nauthor Aaron Hill <aa1ronham@gmail.com> 1605818985 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1605819055 -0500\n\nOnly create `OnDiskCache` in incremental compilation mode\n\nThis lets us skip doing useless work when we're not in incremental\ncompilation mode.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d00ed018767f5ffb4d17971147fadeb860891f8d", "html_url": "https://github.com/rust-lang/rust/commit/d00ed018767f5ffb4d17971147fadeb860891f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d00ed018767f5ffb4d17971147fadeb860891f8d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe982319aa0aa5bbfc2795791a753832292bd2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe982319aa0aa5bbfc2795791a753832292bd2ba", "html_url": "https://github.com/rust-lang/rust/commit/fe982319aa0aa5bbfc2795791a753832292bd2ba"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "201f381f88940a124a0b20f469b021b4c50fec16", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=d00ed018767f5ffb4d17971147fadeb860891f8d", "patch": "@@ -199,9 +199,14 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     }))\n }\n \n-pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n+/// Attempts to load the query result cache from disk\n+///\n+/// If we are not in incremental compilation mode, returns `None`.\n+/// Otherwise, tries to load the query result cache from disk,\n+/// creating an empty cache if it could not be loaded.\n+pub fn load_query_result_cache(sess: &Session) -> Option<OnDiskCache<'_>> {\n     if sess.opts.incremental.is_none() {\n-        return OnDiskCache::new_empty(sess.source_map());\n+        return None;\n     }\n \n     let _prof_timer = sess.prof.generic_activity(\"incr_comp_load_query_result_cache\");\n@@ -211,7 +216,9 @@ pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n         &query_cache_path(sess),\n         sess.is_nightly_build(),\n     ) {\n-        LoadResult::Ok { data: (bytes, start_pos) } => OnDiskCache::new(sess, bytes, start_pos),\n-        _ => OnDiskCache::new_empty(sess.source_map()),\n+        LoadResult::Ok { data: (bytes, start_pos) } => {\n+            Some(OnDiskCache::new(sess, bytes, start_pos))\n+        }\n+        _ => Some(OnDiskCache::new_empty(sess.source_map())),\n     }\n }"}, {"sha": "12990ae2d94a5c18abe1adae784407df87d2698e", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=d00ed018767f5ffb4d17971147fadeb860891f8d", "patch": "@@ -353,7 +353,7 @@ fn add_query_description_impl(\n                     tcx: TyCtxt<'tcx>,\n                     id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n-                    tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n+                    tcx.queries.on_disk_cache.as_ref().and_then(|c| c.try_load_query_result(tcx, id))\n                 }\n             }\n         };"}, {"sha": "a85b66b65daacc76e26bff806f5d3cb4df06979e", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=d00ed018767f5ffb4d17971147fadeb860891f8d", "patch": "@@ -164,19 +164,27 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     }\n \n     fn load_diagnostics(&self, prev_dep_node_index: SerializedDepNodeIndex) -> Vec<Diagnostic> {\n-        self.queries.on_disk_cache.load_diagnostics(*self, prev_dep_node_index)\n+        self.queries\n+            .on_disk_cache\n+            .as_ref()\n+            .map(|c| c.load_diagnostics(*self, prev_dep_node_index))\n+            .unwrap_or_default()\n     }\n \n     fn store_diagnostics(&self, dep_node_index: DepNodeIndex, diagnostics: ThinVec<Diagnostic>) {\n-        self.queries.on_disk_cache.store_diagnostics(dep_node_index, diagnostics)\n+        if let Some(c) = self.queries.on_disk_cache.as_ref() {\n+            c.store_diagnostics(dep_node_index, diagnostics)\n+        }\n     }\n \n     fn store_diagnostics_for_anon_node(\n         &self,\n         dep_node_index: DepNodeIndex,\n         diagnostics: ThinVec<Diagnostic>,\n     ) {\n-        self.queries.on_disk_cache.store_diagnostics_for_anon_node(dep_node_index, diagnostics)\n+        if let Some(c) = self.queries.on_disk_cache.as_ref() {\n+            c.store_diagnostics_for_anon_node(dep_node_index, diagnostics)\n+        }\n     }\n \n     fn profiler(&self) -> &SelfProfilerRef {"}, {"sha": "175b108dd24d497c3de724c8cdf9127041d134eb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d00ed018767f5ffb4d17971147fadeb860891f8d", "patch": "@@ -130,8 +130,8 @@ rustc_queries! {\n             storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n             load_cached(tcx, id) {\n-                let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n-                                                        .try_load_query_result(tcx, id);\n+                let generics: Option<ty::Generics> = tcx.queries.on_disk_cache.as_ref()\n+                                                        .and_then(|c| c.try_load_query_result(tcx, id));\n                 generics\n             }\n         }\n@@ -688,8 +688,8 @@ rustc_queries! {\n             cache_on_disk_if { true }\n             load_cached(tcx, id) {\n                 let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n-                    .queries.on_disk_cache\n-                    .try_load_query_result(tcx, id);\n+                    .queries.on_disk_cache.as_ref()\n+                    .and_then(|c| c.try_load_query_result(tcx, id));\n \n                 typeck_results.map(|x| &*tcx.arena.alloc(x))\n             }"}, {"sha": "82acca403db67fd0ebe41adeb7a15aed7184729b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d00ed018767f5ffb4d17971147fadeb860891f8d", "patch": "@@ -1094,7 +1094,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         krate: &'tcx hir::Crate<'tcx>,\n         definitions: &'tcx Definitions,\n         dep_graph: DepGraph,\n-        on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n+        on_disk_query_result_cache: Option<query::OnDiskCache<'tcx>>,\n         crate_name: &str,\n         output_filenames: &OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n@@ -1343,7 +1343,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         E: ty::codec::OpaqueEncoder,\n     {\n-        self.queries.on_disk_cache.serialize(self, encoder)\n+        self.queries.on_disk_cache.as_ref().map(|c| c.serialize(self, encoder)).unwrap_or(Ok(()))\n     }\n \n     /// If `true`, we should use the MIR-based borrowck, but also"}, {"sha": "9e97ed2fb29269f6df560e0e921f85c4ed377094", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00ed018767f5ffb4d17971147fadeb860891f8d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=d00ed018767f5ffb4d17971147fadeb860891f8d", "patch": "@@ -507,10 +507,11 @@ macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Queries<$tcx> {\n-            /// This provides access to the incrimental comilation on-disk cache for query results.\n+            /// This provides access to the incremental comilation on-disk cache for query results.\n             /// Do not access this directly. It is only meant to be used by\n             /// `DepGraph::try_mark_green()` and the query infrastructure.\n-            pub(crate) on_disk_cache: OnDiskCache<'tcx>,\n+            /// This is `None` if we are not incremental compilation mode\n+            pub(crate) on_disk_cache: Option<OnDiskCache<'tcx>>,\n \n             providers: IndexVec<CrateNum, Providers>,\n             fallback_extern_providers: Box<Providers>,\n@@ -526,7 +527,7 @@ macro_rules! define_queries_struct {\n             pub(crate) fn new(\n                 providers: IndexVec<CrateNum, Providers>,\n                 fallback_extern_providers: Providers,\n-                on_disk_cache: OnDiskCache<'tcx>,\n+                on_disk_cache: Option<OnDiskCache<'tcx>>,\n             ) -> Self {\n                 Queries {\n                     providers,"}]}