{"sha": "15b4e280049a2b495635027ebfcb3b6930fbc12a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YjRlMjgwMDQ5YTJiNDk1NjM1MDI3ZWJmY2IzYjY5MzBmYmMxMmE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-21T21:05:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T21:05:43Z"}, "message": "Add from_bitmask (#136)\n\n* Add from_bitmask\r\n* Add mips workaround", "tree": {"sha": "cb6d38b90c600e0faf9ff5083b378858d20552b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6d38b90c600e0faf9ff5083b378858d20552b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b4e280049a2b495635027ebfcb3b6930fbc12a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0P8nCRBK7hj4Ov3rIwAAfGkIABk73d+NhvPOPcVdTE/oOW9M\nmrzlAR2SA/XUwB1jHXQcEWTRVtBIILPSVAMan3BroRjbFeaE8yXNQ41JIW5CuWB5\nBknugo16L4DWYouKST8uwrR0N0qzSPCSJFGZIjOYPItMRTAphZKZTxKd2g8zfega\nDZsXS0BTSWYYyLZc+ELUJFwK6H6JvjcucZvbCbioYEDhMqt8C8Sgw6tvjlVsghI6\np9GF99REzKZnpmfqsPcBNV82NyZvIiBfDS+0XdTge4/+oUdqox5BcPWWKHoZp5dh\nVfPjfGRm02mT4UI+CY2bsn0NHB4l532p57NLYsgmq/TYADpZV4CtnVdp0K6xqg4=\n=GiMs\n-----END PGP SIGNATURE-----\n", "payload": "tree cb6d38b90c600e0faf9ff5083b378858d20552b0\nparent 57e67c905fe9fb3d45a1714d25baa5dfc143299c\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1624309543 -0400\ncommitter GitHub <noreply@github.com> 1624309543 -0700\n\nAdd from_bitmask (#136)\n\n* Add from_bitmask\r\n* Add mips workaround"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b4e280049a2b495635027ebfcb3b6930fbc12a", "html_url": "https://github.com/rust-lang/rust/commit/15b4e280049a2b495635027ebfcb3b6930fbc12a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b4e280049a2b495635027ebfcb3b6930fbc12a/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e67c905fe9fb3d45a1714d25baa5dfc143299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e67c905fe9fb3d45a1714d25baa5dfc143299c", "html_url": "https://github.com/rust-lang/rust/commit/57e67c905fe9fb3d45a1714d25baa5dfc143299c"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "fab136d2b2412fb5baeb8e4c8b72aae20dc97ec7", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=15b4e280049a2b495635027ebfcb3b6930fbc12a", "patch": "@@ -100,6 +100,15 @@ impl<T: Mask, const LANES: usize> BitMask<T, LANES> {\n         unsafe { core::mem::transmute_copy(&self.0) }\n     }\n \n+    #[inline]\n+    pub fn from_bitmask<U: Mask>(bitmask: U::BitMask) -> Self {\n+        assert_eq!(\n+            core::mem::size_of::<T::BitMask>(),\n+            core::mem::size_of::<U::BitMask>()\n+        );\n+        unsafe { core::mem::transmute_copy(&bitmask) }\n+    }\n+\n     #[inline]\n     pub fn any(self) -> bool {\n         self != Self::splat(false)"}, {"sha": "7d98333ef6071e91cbb17be1fbaf3e76663ea5b5", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=15b4e280049a2b495635027ebfcb3b6930fbc12a", "patch": "@@ -126,6 +126,30 @@ macro_rules! define_mask {\n                     bitmask\n                 }\n             }\n+\n+            #[inline]\n+            pub fn from_bitmask<U: crate::Mask>(mut bitmask: U::BitMask) -> Self {\n+                unsafe {\n+                    // There is a bug where LLVM appears to implement this operation with the wrong\n+                    // bit order.\n+                    // TODO fix this in a better way\n+                    if cfg!(any(target_arch = \"mips\", target_arch = \"mips64\")) {\n+                        for x in bitmask.as_mut() {\n+                            *x = x.reverse_bits();\n+                        }\n+                    }\n+\n+                    // TODO remove the transmute when rustc is more flexible\n+                    assert_eq!(core::mem::size_of::<U::IntBitMask>(), core::mem::size_of::<U::BitMask>());\n+                    let bitmask: U::IntBitMask = core::mem::transmute_copy(&bitmask);\n+\n+                    Self::from_int_unchecked(crate::intrinsics::simd_select_bitmask(\n+                        bitmask,\n+                        Self::splat(true).to_int(),\n+                        Self::splat(false).to_int(),\n+                    ))\n+                }\n+            }\n         }\n \n         impl<T: Mask, const LANES: usize> core::convert::From<$name<T, LANES>> for crate::$type<LANES>"}, {"sha": "1d6b2e45224a6808596199e8d7081f294cf18dfe", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=15b4e280049a2b495635027ebfcb3b6930fbc12a", "patch": "@@ -178,6 +178,11 @@ macro_rules! define_opaque_mask {\n             pub fn to_bitmask(self) -> <Self as Mask>::BitMask {\n                 self.0.to_bitmask::<Self>()\n             }\n+\n+            /// Convert a bitmask to a mask.\n+            pub fn from_bitmask(bitmask: <Self as Mask>::BitMask) -> Self {\n+                Self(<$inner_ty>::from_bitmask::<Self>(bitmask))\n+            }\n         }\n \n         // vector/array conversion"}, {"sha": "32dea49729f04c4602a80ba9b5fa06997ec4eef5", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b4e280049a2b495635027ebfcb3b6930fbc12a/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=15b4e280049a2b495635027ebfcb3b6930fbc12a", "patch": "@@ -67,13 +67,15 @@ macro_rules! test_mask_api {\n             }\n \n             #[test]\n-            fn to_bitmask() {\n+            fn roundtrip_bitmask_conversion() {\n                 let values = [\n                     true, false, false, true, false, false, true, false,\n                     true, true, false, false, false, false, false, true,\n                 ];\n                 let mask = core_simd::$name::<16>::from_array(values);\n-                assert_eq!(mask.to_bitmask(), [0b01001001, 0b10000011]);\n+                let bitmask = mask.to_bitmask();\n+                assert_eq!(bitmask, [0b01001001, 0b10000011]);\n+                assert_eq!(core_simd::$name::<16>::from_bitmask(bitmask), mask);\n             }\n         }\n     }"}]}