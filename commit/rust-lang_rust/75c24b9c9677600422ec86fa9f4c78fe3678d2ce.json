{"sha": "75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzI0YjljOTY3NzYwMDQyMmVjODZmYTlmNGM3OGZlMzY3OGQyY2U=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-19T10:54:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T10:54:13Z"}, "message": "Merge pull request #758 from bjorn3/object_write\n\nAdd object::write as alternative object file writer", "tree": {"sha": "96d68bf3cc1daeddfb54e0e09068cc7c7180750f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d68bf3cc1daeddfb54e0e09068cc7c7180750f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqutWCRBK7hj4Ov3rIwAAdHIIAJPI2N8kR6v/XC4chAW0DJzF\noqkmLKAlGb2Io64mckXeVbGYnGLqSu4WltDt7FgyP3p1FhmIH6eHABC7krPMZbq9\nDbC21gjgxO3jJWKBx22mjRUy6PR9gHCdaAmIJFFlvjcVPFIVwABMwjwbZU4OwKx9\nu98KWjxmtUmvrsA+Md44tNEuf9LVPrqq8glkdQLFdIULeDDZUJbgcwVuiuDULlLi\n0zXvW+5knqydgZXZXlGB2m85N5DzHbT+giGkMeMr2UEhKsjVqGQGKozV4DdEpBMC\nf3EDlzPlWK6SigQmuYqdfM0VxOorTeZgMaJJnRw++W91PLwSCqtS0JSEj1VivRc=\n=Fjul\n-----END PGP SIGNATURE-----\n", "payload": "tree 96d68bf3cc1daeddfb54e0e09068cc7c7180750f\nparent 8243a370d21a6d7b69c8d7fc11d2f2fc3e939297\nparent 1901571d864941ca42cdb62165a4cb0c58afe5ec\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1571482453 +0200\ncommitter GitHub <noreply@github.com> 1571482453 +0200\n\nMerge pull request #758 from bjorn3/object_write\n\nAdd object::write as alternative object file writer"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "html_url": "https://github.com/rust-lang/rust/commit/75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8243a370d21a6d7b69c8d7fc11d2f2fc3e939297", "url": "https://api.github.com/repos/rust-lang/rust/commits/8243a370d21a6d7b69c8d7fc11d2f2fc3e939297", "html_url": "https://github.com/rust-lang/rust/commit/8243a370d21a6d7b69c8d7fc11d2f2fc3e939297"}, {"sha": "1901571d864941ca42cdb62165a4cb0c58afe5ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1901571d864941ca42cdb62165a4cb0c58afe5ec", "html_url": "https://github.com/rust-lang/rust/commit/1901571d864941ca42cdb62165a4cb0c58afe5ec"}], "stats": {"total": 402, "additions": 307, "deletions": 95}, "files": [{"sha": "765739785568e8038a056c925f15b8527835f250", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -21,3 +21,6 @@ env:\n     - RUST_BACKTRACE=1\n     # Reduce amount of benchmark runs as they are slow.\n     - COMPILE_RUNS=2 RUN_RUNS=2\n+  jobs:\n+    - \"CG_CLIF_COMPILE_FLAGS=\"\n+    - \"CG_CLIF_COMPILE_FLAGS='--features backend_object'\""}, {"sha": "d67181bd56284466b05c1c1ad3f48fa3b1c6cc54", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -155,6 +155,17 @@ dependencies = [\n  \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cranelift-object\"\n+version = \"0.46.1\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#387593d6c94d291e614c08d7a03f77b40efa451d\"\n+dependencies = [\n+ \"cranelift-codegen 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"object 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.46.1\"\n@@ -332,8 +343,10 @@ name = \"object\"\n version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"goblin 0.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scroll 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -411,6 +424,7 @@ dependencies = [\n  \"cranelift 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-faerie 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-object 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-simplejit 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"faerie 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gimli 0.19.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -594,6 +608,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cranelift-frontend 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-native 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n+\"checksum cranelift-object 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-simplejit 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n \"checksum errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2a071601ed01b988f896ab14b95e67335d1eeb50190932a1320f7fe3cadc84e\""}, {"sha": "86347a006d7d928003befdd3456b45870dfd8af5", "filename": "Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -9,11 +9,15 @@ edition = \"2018\"\n [lib]\n crate-type = [\"dylib\"]\n \n+[features]\n+backend_object = [\"object/write\", \"cranelift-object\"]\n+\n [dependencies]\n # These have to be in sync with each other\n cranelift = { git = \"https://github.com/CraneStation/cranelift.git\" }\n cranelift-module = { git = \"https://github.com/CraneStation/cranelift.git\" }\n cranelift-faerie = { git = \"https://github.com/CraneStation/cranelift.git\" }\n+cranelift-object = { git = \"https://github.com/CraneStation/cranelift.git\", optional = true }\n target-lexicon = \"0.8.1\"\n faerie = \"0.11.0\"\n \n@@ -36,6 +40,7 @@ features = [\"compression\", \"read\", \"std\"] # We don't need WASM support\n #cranelift-module = { path = \"../cranelift/cranelift-module\" }\n #cranelift-simplejit = { path = \"../cranelift/cranelift-simplejit\" }\n #cranelift-faerie = { path = \"../cranelift/cranelift-faerie\" }\n+#cranelift-object = { path = \"../cranelift/cranelift-object\" }\n \n #[patch.crates-io]\n #gimli = { path = \"../\" }"}, {"sha": "ccb95624badf246759f8827e3fc099fd1e306594", "filename": "src/backend.rs", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -0,0 +1,222 @@\n+use std::collections::HashMap;\n+\n+use rustc::session::Session;\n+\n+use cranelift_module::{FuncId, Module};\n+\n+use faerie::*;\n+#[cfg(feature = \"backend_object\")]\n+use object::{SectionKind, RelocationKind, RelocationEncoding};\n+#[cfg(feature = \"backend_object\")]\n+use object::write::*;\n+use cranelift_faerie::{FaerieBackend, FaerieBuilder, FaerieProduct, FaerieTrapCollection};\n+\n+#[cfg(feature = \"backend_object\")]\n+use cranelift_object::*;\n+\n+use gimli::SectionId;\n+\n+use crate::debuginfo::{DebugReloc, DebugRelocName};\n+\n+pub trait WriteMetadata {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool);\n+}\n+\n+impl WriteMetadata for faerie::Artifact {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool) {\n+        self\n+            .declare(\".rustc\", faerie::Decl::section(faerie::SectionKind::Data))\n+            .unwrap();\n+        self\n+            .define_with_symbols(\".rustc\", data, {\n+                let mut map = std::collections::BTreeMap::new();\n+                // FIXME implement faerie elf backend section custom symbols\n+                // For MachO this is necessary to prevent the linker from throwing away the .rustc section,\n+                // but for ELF it isn't.\n+                if is_like_osx {\n+                    map.insert(\n+                        symbol_name,\n+                        0,\n+                    );\n+                }\n+                map\n+            })\n+            .unwrap();\n+    }\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+impl WriteMetadata for object::write::Object {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, _is_like_osx: bool) {\n+        let segment = self.segment_name(object::write::StandardSegment::Data).to_vec();\n+        let section_id = self.add_section(segment, b\".rustc\".to_vec(), object::SectionKind::Data);\n+        let offset = self.append_section_data(section_id, &data, 1);\n+        // For MachO and probably PE this is necessary to prevent the linker from throwing away the\n+        // .rustc section. For ELF this isn't necessary, but it also doesn't harm.\n+        self.add_symbol(object::write::Symbol {\n+            name: symbol_name.into_bytes(),\n+            value: offset,\n+            size: data.len() as u64,\n+            kind: object::SymbolKind::Data,\n+            scope: object::SymbolScope::Dynamic,\n+            weak: false,\n+            section: Some(section_id),\n+        });\n+    }\n+}\n+\n+pub trait WriteDebugInfo {\n+    type SectionId;\n+\n+    fn add_debug_section(&mut self, name: SectionId, data: Vec<u8>) -> Self::SectionId;\n+    fn add_debug_reloc(\n+        &mut self,\n+        section_map: &HashMap<SectionId, Self::SectionId>,\n+        symbol_map: &indexmap::IndexMap<FuncId, String>,\n+        from: &Self::SectionId,\n+        reloc: &DebugReloc,\n+    );\n+}\n+\n+impl WriteDebugInfo for FaerieProduct {\n+    type SectionId = SectionId;\n+\n+    fn add_debug_section(&mut self, id: SectionId, data: Vec<u8>) -> SectionId {\n+        self.artifact.declare_with(id.name(), Decl::section(faerie::SectionKind::Debug), data).unwrap();\n+        id\n+    }\n+\n+    fn add_debug_reloc(\n+        &mut self,\n+        _section_map: &HashMap<SectionId, Self::SectionId>,\n+        symbol_map: &indexmap::IndexMap<FuncId, String>,\n+        from: &Self::SectionId,\n+        reloc: &DebugReloc,\n+    ) {\n+        self\n+            .artifact\n+            .link_with(\n+                faerie::Link {\n+                    from: from.name(),\n+                    to: match reloc.name {\n+                        DebugRelocName::Section(id) => id.name(),\n+                        DebugRelocName::Symbol(index) => &symbol_map.get_index(index).unwrap().1,\n+                    },\n+                    at: u64::from(reloc.offset),\n+                },\n+                faerie::Reloc::Debug {\n+                    size: reloc.size,\n+                    addend: reloc.addend as i32,\n+                },\n+            )\n+            .expect(\"faerie relocation error\");\n+    }\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+impl WriteDebugInfo for ObjectProduct {\n+    type SectionId = (object::write::SectionId, object::write::SymbolId);\n+\n+    fn add_debug_section(\n+        &mut self,\n+        id: SectionId,\n+        data: Vec<u8>,\n+    ) -> (object::write::SectionId, object::write::SymbolId) {\n+        let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n+        let name = id.name().as_bytes().to_vec();\n+        let section_id = self.object.add_section(segment, name, SectionKind::Debug);\n+        self.object.section_mut(section_id).set_data(data, 1);\n+        let symbol_id = self.object.section_symbol(section_id);\n+        (section_id, symbol_id)\n+    }\n+\n+    fn add_debug_reloc(\n+        &mut self,\n+        section_map: &HashMap<SectionId, Self::SectionId>,\n+        symbol_map: &indexmap::IndexMap<FuncId, String>,\n+        from: &Self::SectionId,\n+        reloc: &DebugReloc,\n+    ) {\n+        let symbol = match reloc.name {\n+            DebugRelocName::Section(id) => section_map.get(&id).unwrap().1,\n+            DebugRelocName::Symbol(id) => {\n+                self.function_symbol(*symbol_map.get_index(id).unwrap().0)\n+            }\n+        };\n+        self.object.add_relocation(from.0, Relocation {\n+            offset: u64::from(reloc.offset),\n+            symbol,\n+            kind: RelocationKind::Absolute,\n+            encoding: RelocationEncoding::Generic,\n+            size: reloc.size * 8,\n+            addend: reloc.addend,\n+        }).unwrap();\n+    }\n+}\n+\n+pub trait Emit {\n+    fn emit(self) -> Vec<u8>;\n+}\n+\n+impl Emit for FaerieProduct {\n+    fn emit(self) -> Vec<u8> {\n+        self.artifact.emit().unwrap()\n+    }\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+impl Emit for ObjectProduct {\n+    fn emit(self) -> Vec<u8> {\n+        self.object.write().unwrap()\n+    }\n+}\n+\n+#[cfg(not(feature = \"backend_object\"))]\n+pub fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Artifact)) -> Vec<u8> {\n+    let mut metadata_artifact = faerie::Artifact::new(\n+        crate::build_isa(sess, true).triple().clone(),\n+        name.to_string(),\n+    );\n+    f(&mut metadata_artifact);\n+    metadata_artifact.emit().unwrap()\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+pub fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n+    let triple = crate::build_isa(sess, true).triple().clone();\n+    let mut metadata_object =\n+        object::write::Object::new(triple.binary_format, triple.architecture);\n+    metadata_object.add_file_symbol(name.as_bytes().to_vec());\n+    f(&mut metadata_object);\n+    metadata_object.write().unwrap()\n+}\n+\n+pub type Backend = impl cranelift_module::Backend<Product: Emit + WriteDebugInfo>;\n+\n+#[cfg(not(feature = \"backend_object\"))]\n+pub fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+    let module: Module<FaerieBackend> = Module::new(\n+        FaerieBuilder::new(\n+            crate::build_isa(sess, true),\n+            name + \".o\",\n+            FaerieTrapCollection::Disabled,\n+            cranelift_module::default_libcall_names(),\n+        )\n+        .unwrap(),\n+    );\n+    module\n+}\n+\n+#[cfg(feature = \"backend_object\")]\n+pub fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+    let module: Module<ObjectBackend> = Module::new(\n+        ObjectBuilder::new(\n+            crate::build_isa(sess, true),\n+            name + \".o\",\n+            ObjectTrapCollection::Disabled,\n+            cranelift_module::default_libcall_names(),\n+        )\n+        .unwrap(),\n+    );\n+    module\n+}"}, {"sha": "ef32dafb2efc5adfc73f1246ac65d5077757ea9a", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -17,7 +17,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut debug_context = cx\n         .debug_context\n         .as_mut()\n-        .map(|debug_context| FunctionDebugContext::new(tcx, debug_context, mir, &name, &sig));\n+        .map(|debug_context| FunctionDebugContext::new(tcx, debug_context, mir, func_id, &name, &sig));\n \n     // Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);"}, {"sha": "762fa8668bfbadf5cb146a3c2450bd98b5200ed8", "filename": "src/debuginfo.rs", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -1,5 +1,7 @@\n use crate::prelude::*;\n \n+use crate::backend::WriteDebugInfo;\n+\n use std::marker::PhantomData;\n \n use syntax::source_map::FileName;\n@@ -10,8 +12,6 @@ use gimli::write::{\n };\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, SectionId};\n \n-use faerie::*;\n-\n fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     use rustc::ty::layout::Endian;\n \n@@ -56,31 +56,22 @@ fn line_program_add_file(\n }\n \n #[derive(Clone)]\n-struct DebugReloc {\n-    offset: u32,\n-    size: u8,\n-    name: DebugRelocName,\n-    addend: i64,\n+pub struct DebugReloc {\n+    pub offset: u32,\n+    pub size: u8,\n+    pub name: DebugRelocName,\n+    pub addend: i64,\n }\n \n #[derive(Clone)]\n-enum DebugRelocName {\n+pub enum DebugRelocName {\n     Section(SectionId),\n     Symbol(usize),\n }\n \n-impl DebugReloc {\n-    fn name<'a>(&self, ctx: &'a DebugContext) -> &'a str {\n-        match self.name {\n-            DebugRelocName::Section(id) => id.name(),\n-            DebugRelocName::Symbol(index) => ctx.symbols.get_index(index).unwrap(),\n-        }\n-    }\n-}\n-\n pub struct DebugContext<'tcx> {\n     endian: RunTimeEndian,\n-    symbols: indexmap::IndexSet<String>,\n+    symbols: indexmap::IndexMap<FuncId, String>,\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n@@ -142,7 +133,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n         DebugContext {\n             endian: target_endian(tcx),\n-            symbols: indexmap::IndexSet::new(),\n+            symbols: indexmap::IndexMap::new(),\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n@@ -177,7 +168,7 @@ impl<'tcx> DebugContext<'tcx> {\n         );\n     }\n \n-    pub fn emit(&mut self, artifact: &mut Artifact) {\n+    pub fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n         let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n         let root = self.dwarf.unit.root();\n         let root = self.dwarf.unit.get_mut(root);\n@@ -189,34 +180,20 @@ impl<'tcx> DebugContext<'tcx> {\n         let mut sections = Sections::new(WriterRelocate::new(self));\n         self.dwarf.write(&mut sections).unwrap();\n \n+        let mut section_map = HashMap::new();\n         let _: Result<()> = sections.for_each_mut(|id, section| {\n             if !section.writer.slice().is_empty() {\n-                artifact\n-                    .declare_with(\n-                        id.name(),\n-                        Decl::section(SectionKind::Debug),\n-                        section.writer.take(),\n-                    )\n-                    .unwrap();\n+                let section_id = product.add_debug_section(id, section.writer.take());\n+                section_map.insert(id, section_id);\n             }\n             Ok(())\n         });\n \n         let _: Result<()> = sections.for_each(|id, section| {\n-            for reloc in &section.relocs {\n-                artifact\n-                    .link_with(\n-                        faerie::Link {\n-                            from: id.name(),\n-                            to: reloc.name(self),\n-                            at: u64::from(reloc.offset),\n-                        },\n-                        faerie::Reloc::Debug {\n-                            size: reloc.size,\n-                            addend: reloc.addend as i32,\n-                        },\n-                    )\n-                    .expect(\"faerie relocation error\");\n+            if let Some(section_id) = section_map.get(&id) {\n+                for reloc in &section.relocs {\n+                    product.add_debug_reloc(&section_map, &self.symbols, section_id, reloc);\n+                }\n             }\n             Ok(())\n         });\n@@ -235,10 +212,11 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         debug_context: &'a mut DebugContext<'tcx>,\n         mir: &Body,\n+        func_id: FuncId,\n         name: &str,\n         _sig: &Signature,\n     ) -> Self {\n-        let (symbol, _) = debug_context.symbols.insert_full(name.to_string());\n+        let (symbol, _) = debug_context.symbols.insert_full(func_id, name.to_string());\n \n         // FIXME: add to appropriate scope intead of root\n         let scope = debug_context.dwarf.unit.root();"}, {"sha": "215ae071c3f662df90cc4963823d2ea5b2365829", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -8,10 +8,10 @@ use rustc::session::config::{DebugInfo, OutputType};\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::CrateInfo;\n \n-use cranelift_faerie::*;\n-\n use crate::prelude::*;\n \n+use crate::backend::{Emit, WriteDebugInfo};\n+\n pub fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n@@ -147,59 +147,57 @@ fn run_aot(\n     need_metadata_module: bool,\n ) -> Box<CodegenResults> {\n     let new_module = |name: String| {\n-        let module: Module<FaerieBackend> = Module::new(\n-            FaerieBuilder::new(\n-                crate::build_isa(tcx.sess, true),\n-                name + \".o\",\n-                FaerieTrapCollection::Disabled,\n-                cranelift_module::default_libcall_names(),\n-            )\n-            .unwrap(),\n-        );\n+        let module = crate::backend::make_module(tcx.sess, name);\n         assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n         module\n     };\n \n-    let emit_module = |kind: ModuleKind,\n-                       mut module: Module<FaerieBackend>,\n-                       debug: Option<DebugContext>| {\n+    fn emit_module<B: Backend>(\n+        tcx: TyCtxt<'_>,\n+        name: String,\n+        kind: ModuleKind,\n+        mut module: Module<B>,\n+        debug: Option<DebugContext>,\n+    ) -> CompiledModule\n+        where B::Product: Emit + WriteDebugInfo,\n+    {\n             module.finalize_definitions();\n-            let mut artifact = module.finish().artifact;\n+            let mut product = module.finish();\n \n             if let Some(mut debug) = debug {\n-                debug.emit(&mut artifact);\n+                debug.emit(&mut product);\n             }\n \n             let tmp_file = tcx\n                 .output_filenames(LOCAL_CRATE)\n-                .temp_path(OutputType::Object, Some(&artifact.name));\n-            let obj = artifact.emit().unwrap();\n+                .temp_path(OutputType::Object, Some(&name));\n+            let obj = product.emit();\n             std::fs::write(&tmp_file, obj).unwrap();\n             CompiledModule {\n-                name: artifact.name,\n+                name,\n                 kind,\n                 object: Some(tmp_file),\n                 bytecode: None,\n                 bytecode_compressed: None,\n             }\n         };\n \n-    let mut faerie_module = new_module(\"some_file\".to_string());\n+    let mut module = new_module(\"some_file\".to_string());\n \n     let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n         // macOS debuginfo doesn't work yet (see #303)\n         && !tcx.sess.target.target.options.is_like_osx\n     {\n         let debug = DebugContext::new(\n             tcx,\n-            faerie_module.target_config().pointer_type().bytes() as u8,\n+            module.target_config().pointer_type().bytes() as u8,\n         );\n         Some(debug)\n     } else {\n         None\n     };\n \n-    codegen_cgus(tcx, &mut faerie_module, &mut debug);\n+    codegen_cgus(tcx, &mut module, &mut debug);\n \n     tcx.sess.abort_if_errors();\n \n@@ -221,17 +219,14 @@ fn run_aot(\n                 .as_str()\n                 .to_string();\n \n-            let mut metadata_artifact = faerie::Artifact::new(\n-                crate::build_isa(tcx.sess, true).triple().clone(),\n-                metadata_cgu_name.clone(),\n-            );\n-            crate::metadata::write_metadata(tcx, &mut metadata_artifact);\n-\n             let tmp_file = tcx\n                 .output_filenames(LOCAL_CRATE)\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n-            let obj = metadata_artifact.emit().unwrap();\n+            let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n+                crate::metadata::write_metadata(tcx, object);\n+            });\n+\n             std::fs::write(&tmp_file, obj).unwrap();\n \n             (metadata_cgu_name, tmp_file)\n@@ -251,12 +246,16 @@ fn run_aot(\n     Box::new(CodegenResults {\n         crate_name: tcx.crate_name(LOCAL_CRATE),\n         modules: vec![emit_module(\n+            tcx,\n+            \"some_file\".to_string(),\n             ModuleKind::Regular,\n-            faerie_module,\n+            module,\n             debug,\n         )],\n         allocator_module: if created_alloc_shim {\n             Some(emit_module(\n+                tcx,\n+                \"allocator_shim\".to_string(),\n                 ModuleKind::Allocator,\n                 allocator_module,\n                 None,"}, {"sha": "169397f14a5753d3962ce8c51f94b01c52554af0", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, never_type, decl_macro)]\n+#![feature(rustc_private, never_type, decl_macro, type_alias_impl_trait, associated_type_bounds)]\n #![allow(intra_doc_link_resolution_failure)]\n \n extern crate flate2;\n@@ -35,6 +35,7 @@ mod allocator;\n mod analyze;\n mod archive;\n mod base;\n+mod backend;\n mod cast;\n mod codegen_i128;\n mod common;"}, {"sha": "f15e1682d13d35ee06c02795663eb6b76fb42257", "filename": "src/metadata.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -9,6 +9,8 @@ use rustc_data_structures::owning_ref::{self, OwningRef};\n use rustc_data_structures::rustc_erase_owner;\n use rustc_target::spec::Target;\n \n+use crate::backend::WriteMetadata;\n+\n pub struct CraneliftMetadataLoader;\n \n impl MetadataLoader for CraneliftMetadataLoader {\n@@ -51,7 +53,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n }\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub fn write_metadata(tcx: TyCtxt<'_>, artifact: &mut faerie::Artifact) -> EncodedMetadata {\n+pub fn write_metadata<P: WriteMetadata>(tcx: TyCtxt<'_>, product: &mut P) -> EncodedMetadata {\n     use flate2::write::DeflateEncoder;\n     use flate2::Compression;\n     use std::io::Write;\n@@ -95,24 +97,11 @@ pub fn write_metadata(tcx: TyCtxt<'_>, artifact: &mut faerie::Artifact) -> Encod\n         .write_all(&metadata.raw_data)\n         .unwrap();\n \n-    artifact\n-        .declare(\".rustc\", faerie::Decl::section(faerie::SectionKind::Data))\n-        .unwrap();\n-    artifact\n-        .define_with_symbols(\".rustc\", compressed, {\n-            let mut map = std::collections::BTreeMap::new();\n-            // FIXME implement faerie elf backend section custom symbols\n-            // For MachO this is necessary to prevent the linker from throwing away the .rustc section,\n-            // but for ELF it isn't.\n-            if tcx.sess.target.target.options.is_like_osx {\n-                map.insert(\n-                    rustc::middle::exported_symbols::metadata_symbol_name(tcx),\n-                    0,\n-                );\n-            }\n-            map\n-        })\n-        .unwrap();\n+    product.add_rustc_section(\n+        rustc::middle::exported_symbols::metadata_symbol_name(tcx),\n+        compressed,\n+        tcx.sess.target.target.options.is_like_osx,\n+    );\n \n     metadata\n }"}, {"sha": "773b7c296d42937e4e14ece8302585c23a92bf0e", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/75c24b9c9677600422ec86fa9f4c78fe3678d2ce/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=75c24b9c9677600422ec86fa9f4c78fe3678d2ce", "patch": "@@ -4,10 +4,10 @@ set -e\n \n if [[ \"$1\" == \"--release\" ]]; then\n     export CHANNEL='release'\n-    cargo build --release\n+    cargo build --release $CG_CLIF_COMPILE_FLAGS\n else\n     export CHANNEL='debug'\n-    cargo build\n+    cargo build $CG_CLIF_COMPILE_FLAGS\n fi\n \n source config.sh"}]}