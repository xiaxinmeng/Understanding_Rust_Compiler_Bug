{"sha": "bcc8b05d5cf792d44b854a0097e9654021ad3177", "node_id": "C_kwDOAAsO6NoAKGJjYzhiMDVkNWNmNzkyZDQ0Yjg1NGEwMDk3ZTk2NTQwMjFhZDMxNzc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-23T10:25:51Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-23T10:35:21Z"}, "message": "Make `output_filenames` a real query", "tree": {"sha": "c680b8fa18cac9899c1ebd4c6a0718762e3c78eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c680b8fa18cac9899c1ebd4c6a0718762e3c78eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc8b05d5cf792d44b854a0097e9654021ad3177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc8b05d5cf792d44b854a0097e9654021ad3177", "html_url": "https://github.com/rust-lang/rust/commit/bcc8b05d5cf792d44b854a0097e9654021ad3177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc8b05d5cf792d44b854a0097e9654021ad3177/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abee6137f70c8293078c03919fda68f0a5b9ca1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abee6137f70c8293078c03919fda68f0a5b9ca1d", "html_url": "https://github.com/rust-lang/rust/commit/abee6137f70c8293078c03919fda68f0a5b9ca1d"}], "stats": {"total": 120, "additions": 92, "deletions": 28}, "files": [{"sha": "d00a68471bb773d3ea03798ba094389535b2c4f6", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -333,6 +333,8 @@ fn run_compiler(\n                 return early_exit();\n             }\n \n+            queries.global_ctxt()?.enter(|tcx| tcx.output_filenames(()));\n+\n             if sess.opts.output_types.contains_key(&OutputType::DepInfo)\n                 && sess.opts.output_types.len() == 1\n             {"}, {"sha": "37b381c534ea065c3a41e6ef3c4b2dd8d43ee225", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n-use rustc_hir::def_id::StableCrateId;\n+use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n@@ -47,7 +47,7 @@ use std::marker::PhantomPinned;\n use std::path::{Path, PathBuf};\n use std::pin::Pin;\n use std::rc::Rc;\n-use std::sync::LazyLock;\n+use std::sync::{Arc, LazyLock};\n use std::{env, fs, iter};\n \n pub fn parse<'a>(sess: &'a Session) -> PResult<'a, ast::Crate> {\n@@ -660,13 +660,11 @@ fn write_out_deps(\n     }\n }\n \n-pub fn prepare_outputs(\n-    sess: &Session,\n-    krate: &ast::Crate,\n-    cstore: &CrateStoreDyn,\n-    crate_name: Symbol,\n-) -> Result<OutputFilenames> {\n+fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n+    let sess = tcx.sess;\n     let _timer = sess.timer(\"prepare_outputs\");\n+    let (_, krate) = &*tcx.resolver_for_lowering(()).borrow();\n+    let crate_name = tcx.crate_name(LOCAL_CRATE);\n \n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n     let outputs = util::build_output_filenames(&krate.attrs, sess);\n@@ -678,45 +676,41 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = sess.io.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n-                return Err(reported);\n+                sess.emit_fatal(InputFileWouldBeOverWritten { path: input_path });\n             }\n             if let Some(ref dir_path) = output_conflicts_with_dir(&output_paths) {\n-                let reported =\n-                    sess.emit_err(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n-                return Err(reported);\n+                sess.emit_fatal(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n             }\n         }\n     }\n \n     if let Some(ref dir) = sess.io.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            let reported = sess.emit_err(TempsDirError);\n-            return Err(reported);\n+            sess.emit_fatal(TempsDirError);\n         }\n     }\n \n-    write_out_deps(sess, cstore, &outputs, &output_paths);\n+    write_out_deps(sess, tcx.cstore_untracked(), &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;\n \n     if !only_dep_info {\n         if let Some(ref dir) = sess.io.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                let reported = sess.emit_err(OutDirError);\n-                return Err(reported);\n+                sess.emit_fatal(OutDirError);\n             }\n         }\n     }\n \n-    Ok(outputs)\n+    outputs.into()\n }\n \n pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     providers.hir_crate = rustc_ast_lowering::lower_to_hir;\n+    providers.output_filenames = output_filenames;\n     proc_macro_decls::provide(providers);\n     rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);"}, {"sha": "96cd3b06321ea94d406ed8142abd6f043a6707f7", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -235,14 +235,6 @@ impl<'tcx> Queries<'tcx> {\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n                 );\n                 feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n-\n-                let outputs = passes::prepare_outputs(\n-                    self.session(),\n-                    &krate,\n-                    &*untracked.cstore,\n-                    crate_name,\n-                )?;\n-                feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n                 feed.features_query(tcx.sess.features_untracked());\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);"}, {"sha": "b1da8d634ea0063694270e9aa3ec5161d8970c88", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -1862,9 +1862,10 @@ rustc_queries! {\n     ///\n     /// This query returns an `&Arc` because codegen backends need the value even after the `TyCtxt`\n     /// has been destroyed.\n-    query output_filenames(_: ()) -> &'tcx Arc<OutputFilenames> {\n+    query output_filenames(_: ()) -> Arc<OutputFilenames> {\n         feedable\n         desc { \"getting output filenames\" }\n+        arena_cache\n     }\n \n     /// Do not call this query directly: invoke `normalize` instead."}, {"sha": "03b03eb147def024bb61991d7e82a82b6d7de7f0", "filename": "tests/run-make/overwrite-input/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2FMakefile?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1,13 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) main.rs -o main.rs 2> $(TMPDIR)/file.stderr || echo \"failed successfully\"\n+\t$(RUSTC) main.rs -o . 2> $(TMPDIR)/folder.stderr || echo \"failed successfully\"\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/file.stderr file.stderr\n+\tcp \"$(TMPDIR)\"/folder.stderr folder.stderr\n+else\n+\t$(DIFF) file.stderr \"$(TMPDIR)\"/file.stderr\n+\t$(DIFF) folder.stderr \"$(TMPDIR)\"/folder.stderr\n+endif"}, {"sha": "9936962b4ee37fd2c5551222e2fec8c0c37d449b", "filename": "tests/run-make/overwrite-input/file.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Ffile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Ffile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Ffile.stderr?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: the input file \"main.rs\" would be overwritten by the generated executable\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "81b1e7367c75a3bd2373c40201fd9f52319cc8a6", "filename": "tests/run-make/overwrite-input/folder.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Ffolder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Ffolder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Ffolder.stderr?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: the generated executable for the input file \"main.rs\" conflicts with the existing directory \".\"\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/run-make/overwrite-input/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Fmain.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "9936962b4ee37fd2c5551222e2fec8c0c37d449b", "filename": "tests/run-make/overwrite-input/main.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Frun-make%2Foverwrite-input%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Foverwrite-input%2Fmain.stderr?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: the input file \"main.rs\" would be overwritten by the generated executable\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "9c0aa01357217294e70c38958be09ae0b411920c", "filename": "tests/ui/io-checks/inaccessbile-temp-dir.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1,39 @@\n+// Issue #66530: We would ICE if someone compiled with `-o /dev/null`,\n+// because we would try to generate auxiliary files in `/dev/` (which\n+// at least the OS X file system rejects).\n+//\n+// An attempt to `-o` into a directory we cannot write into should indeed\n+// be an error; but not an ICE.\n+//\n+// However, some folks run tests as root, which can write `/dev/` and end\n+// up clobbering `/dev/null`. Instead we'll use a non-existent path, which\n+// also used to ICE, but even root can't magically write there.\n+\n+// compile-flags: -Z temps-dir=/does-not-exist/output\n+\n+// The error-pattern check occurs *before* normalization, and the error patterns\n+// are wildly different between build environments. So this is a cop-out (and we\n+// rely on the checking of the normalized stderr output as our actual\n+// \"verification\" of the diagnostic).\n+\n+// error-pattern: error\n+\n+// On Mac OS X, we get an error like the below\n+// normalize-stderr-test \"failed to write bytecode to /does-not-exist/output.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /does-not-exist/\"\n+\n+// On Linux, we get an error like the below\n+// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /does-not-exist/\"\n+\n+// ignore-windows - this is a unix-specific test\n+// ignore-emscripten - the file-system issues do not replicate here\n+// ignore-wasm - the file-system issues do not replicate here\n+// ignore-arm - the file-system issues do not replicate here, at least on armhf-gnu\n+\n+#![crate_type = \"lib\"]\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n+pub mod task {\n+    pub mod __internal {\n+        use crate::task::Waker;\n+    }\n+    pub use core::task::Waker;\n+}"}, {"sha": "2fc5f93ef791a11ed06c38dfc7f3bbf7034de4ba", "filename": "tests/ui/io-checks/inaccessbile-temp-dir.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "patch": "@@ -0,0 +1,4 @@\n+error: failed to find or create the directory specified by `--temps-dir`\n+\n+error: aborting due to previous error\n+"}, {"sha": "134e7d420e3eafbed771ce5976b37f8f98ed591e", "filename": "tests/ui/io-checks/non-ice-error-on-worker-io-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "previous_filename": "tests/ui/non-ice-error-on-worker-io-fail.rs"}, {"sha": "edadecf273a7b20e3a5e55d7727910d2449a3907", "filename": "tests/ui/io-checks/non-ice-error-on-worker-io-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcc8b05d5cf792d44b854a0097e9654021ad3177/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr?ref=bcc8b05d5cf792d44b854a0097e9654021ad3177", "previous_filename": "tests/ui/non-ice-error-on-worker-io-fail.stderr"}]}