{"sha": "11faf2e12a31eb94e837862b193e7d7dbff8a496", "node_id": "C_kwDOAAsO6NoAKDExZmFmMmUxMmEzMWViOTRlODM3ODYyYjE5M2U3ZDdkYmZmOGE0OTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-25T08:48:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T08:48:27Z"}, "message": "Rollup merge of #95953 - JakobDegen:repeat-leak, r=oli-obk\n\nModify MIR building to drop repeat expressions with length zero\n\nCloses #74836 .\n\nPreviously, when a user wrote `[foo; 0]` we used to simply leak `foo`. The goal is to fix that. This PR changes MIR building to make `[foo; 0]` equivalent to `{ drop(foo); [] }` in all cases. Of course, this is a breaking change (see below). A crater run did not indicate any regressions though, and given that the previous behavior was almost definitely not what any user wanted, it seems unlikely that anyone was relying on this.\n\nNote that const generics are in general unaffected by this. Inserting the extra `drop` is only meaningful/necessary when `foo` is of a non-`Copy` type, and array repeat expressions with const generic repetition count must always be `Copy`.\n\nBesides the obvious change to behavior associated with the additional drop, there are three categories of examples where this also changes observable behavior. In all of these cases, the new behavior is consistent with what you would get by replacing `[foo; 0]` with `{ drop(foo); [] }`. As such, none of these give the user new powers to express more things.\n\n**No longer allowed in const (breaking)**:\n\n```rust\nconst _: [String; 0] = [String::new(); 0];\n```\n\nThis compiles on stable today. Because we now introduce the drop of `String`, this no longer compiles as `String` may not be dropped in a const context.\n\n**Reduced dataflow (non-breaking)**:\n\n```rust\nlet mut x: i32 = 0;\nlet r = &x;\nlet a = [r; 0];\nx = 5;\nlet _b = a;\n```\n\nBorrowck rejects this code on stable because it believes there is dataflow between `a` and `r`, and so the lifetime of `r` has to extend to the last statement. This change removes the dataflow and the above code is allowed to compile.\n\n**More const promotion (non-breaking)**:\n\n```rust\nlet _v: &'static [String; 0] = &[String::new(); 0];\n```\n\nThis does not compile today because `String` having drop glue keeps it from being const promoted (despite that drop glue never being executed). After this change, this is allowed to compile.\n\n### Alternatives\n\nA previous attempt at this tried to reduce breakage by various tricks. This is still a possibility, but given that crater showed no regressions it seems unclear why we would want to introduce this complexity.\n\nDisallowing `[foo; 0]` completely is also an option, but obviously this is more of a breaking change. I do not know how often this is actually used though.\n\nr? `@oli-obk`", "tree": {"sha": "39a9bb1eb12125ee66e39339ab274d86fb651e72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a9bb1eb12125ee66e39339ab274d86fb651e72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11faf2e12a31eb94e837862b193e7d7dbff8a496", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJije1bCRBK7hj4Ov3rIwAApOAIABioO3P+d30pMSFjYdla+lbl\ndKuYXr0p9C851c/MfvhJwVEcWj0+PK2Ev8fYQZSYt9zkg8X3LpFBFPlu/htFWG/H\nmfhrqVK40HexWtkEpJdmUTpvz+xa989yT7EEWTquxcFBAmRY7FPA3rHH7QDaEHVs\nE/oe8dLTrQUjpqcZ3HBufSqFiLz+hzvnuwQQhdf7t/if3k1HP0p8Ceqar1LD3ev+\nIghv8fIKvs2/i/3y70o8utJJgvP9P+zWGkqndfuTwTYokWOvkK9nOhVvo2gj5TRC\neECSj8SKP9fVppvzd0S9h6hZkAzNjDfctCy5//Ei3U8AyQHVfav5kWk/kxJn8rM=\n=zTQB\n-----END PGP SIGNATURE-----\n", "payload": "tree 39a9bb1eb12125ee66e39339ab274d86fb651e72\nparent cbdce423201f1b155c46f3ec690a644cf3b4ba53\nparent 0f65bcd9204c7d4753f1747cd3559f0bc4d8150a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653468507 +0200\ncommitter GitHub <noreply@github.com> 1653468507 +0200\n\nRollup merge of #95953 - JakobDegen:repeat-leak, r=oli-obk\n\nModify MIR building to drop repeat expressions with length zero\n\nCloses #74836 .\n\nPreviously, when a user wrote `[foo; 0]` we used to simply leak `foo`. The goal is to fix that. This PR changes MIR building to make `[foo; 0]` equivalent to `{ drop(foo); [] }` in all cases. Of course, this is a breaking change (see below). A crater run did not indicate any regressions though, and given that the previous behavior was almost definitely not what any user wanted, it seems unlikely that anyone was relying on this.\n\nNote that const generics are in general unaffected by this. Inserting the extra `drop` is only meaningful/necessary when `foo` is of a non-`Copy` type, and array repeat expressions with const generic repetition count must always be `Copy`.\n\nBesides the obvious change to behavior associated with the additional drop, there are three categories of examples where this also changes observable behavior. In all of these cases, the new behavior is consistent with what you would get by replacing `[foo; 0]` with `{ drop(foo); [] }`. As such, none of these give the user new powers to express more things.\n\n**No longer allowed in const (breaking)**:\n\n```rust\nconst _: [String; 0] = [String::new(); 0];\n```\n\nThis compiles on stable today. Because we now introduce the drop of `String`, this no longer compiles as `String` may not be dropped in a const context.\n\n**Reduced dataflow (non-breaking)**:\n\n```rust\nlet mut x: i32 = 0;\nlet r = &x;\nlet a = [r; 0];\nx = 5;\nlet _b = a;\n```\n\nBorrowck rejects this code on stable because it believes there is dataflow between `a` and `r`, and so the lifetime of `r` has to extend to the last statement. This change removes the dataflow and the above code is allowed to compile.\n\n**More const promotion (non-breaking)**:\n\n```rust\nlet _v: &'static [String; 0] = &[String::new(); 0];\n```\n\nThis does not compile today because `String` having drop glue keeps it from being const promoted (despite that drop glue never being executed). After this change, this is allowed to compile.\n\n### Alternatives\n\nA previous attempt at this tried to reduce breakage by various tricks. This is still a possibility, but given that crater showed no regressions it seems unclear why we would want to introduce this complexity.\n\nDisallowing `[foo; 0]` completely is also an option, but obviously this is more of a breaking change. I do not know how often this is actually used though.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11faf2e12a31eb94e837862b193e7d7dbff8a496", "html_url": "https://github.com/rust-lang/rust/commit/11faf2e12a31eb94e837862b193e7d7dbff8a496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11faf2e12a31eb94e837862b193e7d7dbff8a496/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbdce423201f1b155c46f3ec690a644cf3b4ba53", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdce423201f1b155c46f3ec690a644cf3b4ba53", "html_url": "https://github.com/rust-lang/rust/commit/cbdce423201f1b155c46f3ec690a644cf3b4ba53"}, {"sha": "0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a", "html_url": "https://github.com/rust-lang/rust/commit/0f65bcd9204c7d4753f1747cd3559f0bc4d8150a"}], "stats": {"total": 215, "additions": 210, "deletions": 5}, "files": [{"sha": "0a0c7659b086dc926c05cea97b564c23b31b762b", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11faf2e12a31eb94e837862b193e7d7dbff8a496/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11faf2e12a31eb94e837862b193e7d7dbff8a496/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=11faf2e12a31eb94e837862b193e7d7dbff8a496", "patch": "@@ -52,11 +52,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 })\n             }\n             ExprKind::Repeat { value, count } => {\n-                let value_operand = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[value], None, NeedsTemporary::No)\n-                );\n-                block.and(Rvalue::Repeat(value_operand, count))\n+                if Some(0) == count.try_eval_usize(this.tcx, this.param_env) {\n+                    this.build_zero_repeat(block, value, scope, source_info)\n+                } else {\n+                    let value_operand = unpack!(\n+                        block = this.as_operand(\n+                            block,\n+                            scope,\n+                            &this.thir[value],\n+                            None,\n+                            NeedsTemporary::No\n+                        )\n+                    );\n+                    block.and(Rvalue::Repeat(value_operand, count))\n+                }\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n@@ -516,6 +525,37 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    fn build_zero_repeat(\n+        &mut self,\n+        mut block: BasicBlock,\n+        value: ExprId,\n+        scope: Option<region::Scope>,\n+        outer_source_info: SourceInfo,\n+    ) -> BlockAnd<Rvalue<'tcx>> {\n+        let this = self;\n+        let value = &this.thir[value];\n+        let elem_ty = value.ty;\n+        if let Some(Category::Constant) = Category::of(&value.kind) {\n+            // Repeating a const does nothing\n+        } else {\n+            // For a non-const, we may need to generate an appropriate `Drop`\n+            let value_operand =\n+                unpack!(block = this.as_operand(block, scope, value, None, NeedsTemporary::No));\n+            if let Operand::Move(to_drop) = value_operand {\n+                let success = this.cfg.start_new_block();\n+                this.cfg.terminate(\n+                    block,\n+                    outer_source_info,\n+                    TerminatorKind::Drop { place: to_drop, target: success, unwind: None },\n+                );\n+                this.diverge_from(block);\n+                block = success;\n+            }\n+            this.record_operands_moved(&[value_operand]);\n+        }\n+        block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(elem_ty)), Vec::new()))\n+    }\n+\n     fn limit_capture_mutability(\n         &mut self,\n         upvar_span: Span,"}, {"sha": "a5f8a5847c2703eee2f802af4962f1c031fb87c6", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11faf2e12a31eb94e837862b193e7d7dbff8a496/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11faf2e12a31eb94e837862b193e7d7dbff8a496/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=11faf2e12a31eb94e837862b193e7d7dbff8a496", "patch": "@@ -1033,6 +1033,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.block_data(start).terminator().kind,\n                 TerminatorKind::Assert { .. }\n                     | TerminatorKind::Call { .. }\n+                    | TerminatorKind::Drop { .. }\n                     | TerminatorKind::DropAndReplace { .. }\n                     | TerminatorKind::FalseUnwind { .. }\n                     | TerminatorKind::InlineAsm { .. }"}, {"sha": "2e7855328ecbffa90e83ef9aaf333a38312b2ccb", "filename": "src/test/ui/drop/repeat-drop-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11faf2e12a31eb94e837862b193e7d7dbff8a496/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11faf2e12a31eb94e837862b193e7d7dbff8a496/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs?ref=11faf2e12a31eb94e837862b193e7d7dbff8a496", "patch": "@@ -0,0 +1,15 @@\n+fn borrowck_catch() {\n+    let foo = String::new();\n+    let _bar = foo;\n+    let _baz = [foo; 0]; //~ ERROR use of moved value: `foo` [E0382]\n+}\n+\n+const _: [String; 0] = [String::new(); 0];\n+//~^ ERROR destructors cannot be evaluated at compile-time [E0493]\n+\n+fn must_be_init() {\n+    let x: u8;\n+    let _ = [x; 0]; //~ ERROR: use of possibly-uninitialized variable: `x`\n+}\n+\n+fn main() {}"}, {"sha": "cdc58180c37b40847bc0c6fbdbf496c0da5310fe", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/11faf2e12a31eb94e837862b193e7d7dbff8a496/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11faf2e12a31eb94e837862b193e7d7dbff8a496/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=11faf2e12a31eb94e837862b193e7d7dbff8a496", "patch": "@@ -0,0 +1,29 @@\n+error[E0382]: use of moved value: `foo`\n+  --> $DIR/repeat-drop-2.rs:4:17\n+   |\n+LL |     let foo = String::new();\n+   |         --- move occurs because `foo` has type `String`, which does not implement the `Copy` trait\n+LL |     let _bar = foo;\n+   |                --- value moved here\n+LL |     let _baz = [foo; 0];\n+   |                 ^^^ value used here after move\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/repeat-drop-2.rs:7:25\n+   |\n+LL | const _: [String; 0] = [String::new(); 0];\n+   |                        -^^^^^^^^^^^^^----\n+   |                        ||\n+   |                        |constants cannot evaluate destructors\n+   |                        value is dropped here\n+\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/repeat-drop-2.rs:12:14\n+   |\n+LL |     let _ = [x; 0];\n+   |              ^ use of possibly-uninitialized `x`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0381, E0382, E0493.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "03e832adb3b3b610612f12a2398f70913269078f", "filename": "src/test/ui/drop/repeat-drop.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/11faf2e12a31eb94e837862b193e7d7dbff8a496/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11faf2e12a31eb94e837862b193e7d7dbff8a496/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop.rs?ref=11faf2e12a31eb94e837862b193e7d7dbff8a496", "patch": "@@ -0,0 +1,120 @@\n+// run-pass\n+// ignore-wasm32-bare no unwinding panic\n+// ignore-avr no unwinding panic\n+// ignore-nvptx64 no unwinding panic\n+\n+static mut CHECK: usize = 0;\n+\n+struct DropChecker(usize);\n+\n+impl Drop for DropChecker {\n+    fn drop(&mut self) {\n+        unsafe {\n+            if CHECK != self.0 - 1 {\n+                panic!(\"Found {}, should have found {}\", CHECK, self.0 - 1);\n+            }\n+            CHECK = self.0;\n+        }\n+    }\n+}\n+\n+macro_rules! check_drops {\n+    ($l:literal) => {\n+        unsafe { assert_eq!(CHECK, $l) }\n+    };\n+}\n+\n+struct DropPanic;\n+\n+impl Drop for DropPanic {\n+    fn drop(&mut self) {\n+        panic!()\n+    }\n+}\n+\n+fn value_zero() {\n+    unsafe { CHECK = 0 };\n+    let foo = DropChecker(1);\n+    let v: [DropChecker; 0] = [foo; 0];\n+    check_drops!(1);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+fn value_one() {\n+    unsafe { CHECK = 0 };\n+    let foo = DropChecker(1);\n+    let v: [DropChecker; 1] = [foo; 1];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+const DROP_CHECKER: DropChecker = DropChecker(1);\n+\n+fn const_zero() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; 0] = [DROP_CHECKER; 0];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(0);\n+}\n+\n+fn const_one() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; 1] = [DROP_CHECKER; 1];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+fn const_generic_zero<const N: usize>() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; N] = [DROP_CHECKER; N];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(0);\n+}\n+\n+fn const_generic_one<const N: usize>() {\n+    unsafe { CHECK = 0 };\n+    let v: [DropChecker; N] = [DROP_CHECKER; N];\n+    check_drops!(0);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+// Make sure that things are allowed to promote as expected\n+\n+fn allow_promote() {\n+    unsafe { CHECK = 0 };\n+    let foo = DropChecker(1);\n+    let v: &'static [DropChecker; 0] = &[foo; 0];\n+    check_drops!(1);\n+    std::mem::drop(v);\n+    check_drops!(1);\n+}\n+\n+// Verify that unwinding in the drop causes the right things to drop in the right order\n+fn on_unwind() {\n+    unsafe { CHECK = 0 };\n+    std::panic::catch_unwind(|| {\n+        let panic = DropPanic;\n+        let _local = DropChecker(2);\n+        let _v = (DropChecker(1), [panic; 0]);\n+        std::process::abort();\n+    })\n+    .unwrap_err();\n+    check_drops!(2);\n+}\n+\n+fn main() {\n+    value_zero();\n+    value_one();\n+    const_zero();\n+    const_one();\n+    const_generic_zero::<0>();\n+    const_generic_one::<1>();\n+    allow_promote();\n+    on_unwind();\n+}"}]}