{"sha": "b17e6680d668d136e643976c4079c7b1cac1b6b4", "node_id": "C_kwDOAAsO6NoAKGIxN2U2NjgwZDY2OGQxMzZlNjQzOTc2YzQwNzljN2IxY2FjMWI2YjQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-24T09:17:51Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-28T08:39:55Z"}, "message": "Move const trait bounds checks to MIR constck\n\nFixes #109543. When checking paths in HIR typeck, we don't want to check\nfor const predicates since all we want might just be a function pointer.\nTherefore we move this to MIR constck and check that bounds are met\nduring MIR constck.", "tree": {"sha": "c08029cdf9c2042474cac25244ffd654f143273b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08029cdf9c2042474cac25244ffd654f143273b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17e6680d668d136e643976c4079c7b1cac1b6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17e6680d668d136e643976c4079c7b1cac1b6b4", "html_url": "https://github.com/rust-lang/rust/commit/b17e6680d668d136e643976c4079c7b1cac1b6b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17e6680d668d136e643976c4079c7b1cac1b6b4/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc064b341be231403d181402a786cce7f1c73f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc064b341be231403d181402a786cce7f1c73f1", "html_url": "https://github.com/rust-lang/rust/commit/cbc064b341be231403d181402a786cce7f1c73f1"}], "stats": {"total": 737, "additions": 426, "deletions": 311}, "files": [{"sha": "d6110a050f2dc58fdd19a792d6d7731845b26a84", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -722,6 +722,32 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n                 };\n \n+                // Check that all trait bounds that are marked as `~const` can be satisfied.\n+                //\n+                // Typeck only does a \"non-const\" check since it operates on HIR and cannot distinguish\n+                // which path expressions are getting called on and which path expressions are only used\n+                // as function pointers. This is required for correctness.\n+                let infcx = tcx.infer_ctxt().build();\n+                let ocx = ObligationCtxt::new(&infcx);\n+\n+                let predicates = tcx.predicates_of(callee).instantiate(tcx, substs);\n+                let cause = ObligationCause::new(\n+                    terminator.source_info.span,\n+                    self.body.source.def_id().expect_local(),\n+                    ObligationCauseCode::ItemObligation(callee),\n+                );\n+                let normalized_predicates = ocx.normalize(&cause, param_env, predicates);\n+                ocx.register_obligations(traits::predicates_for_generics(\n+                    |_, _| cause.clone(),\n+                    self.param_env,\n+                    normalized_predicates,\n+                ));\n+\n+                let errors = ocx.select_all_or_error();\n+                if !errors.is_empty() {\n+                    infcx.err_ctxt().report_fulfillment_errors(&errors);\n+                }\n+\n                 // Attempting to call a trait method?\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n@@ -749,31 +775,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         selcx.select(&obligation)\n                     };\n \n-                    // do a well-formedness check on the trait method being called. This is because typeck only does a\n-                    // \"non-const\" check. This is required for correctness here.\n-                    {\n-                        let infcx = tcx.infer_ctxt().build();\n-                        let ocx = ObligationCtxt::new(&infcx);\n-\n-                        let predicates = tcx.predicates_of(callee).instantiate(tcx, substs);\n-                        let cause = ObligationCause::new(\n-                            terminator.source_info.span,\n-                            self.body.source.def_id().expect_local(),\n-                            ObligationCauseCode::ItemObligation(callee),\n-                        );\n-                        let normalized_predicates = ocx.normalize(&cause, param_env, predicates);\n-                        ocx.register_obligations(traits::predicates_for_generics(\n-                            |_, _| cause.clone(),\n-                            self.param_env,\n-                            normalized_predicates,\n-                        ));\n-\n-                        let errors = ocx.select_all_or_error();\n-                        if !errors.is_empty() {\n-                            infcx.err_ctxt().report_fulfillment_errors(&errors);\n-                        }\n-                    }\n-\n                     match implsrc {\n                         Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => {\n                             debug!("}, {"sha": "50fc48f68a4706eac3d8f46d8ed0b67f7ecc5e6f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1416,41 +1416,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let param_env = self.param_env;\n \n-        let remap = match self.tcx.def_kind(def_id) {\n-            // Associated consts have `Self: ~const Trait` bounds that should be satisfiable when\n-            // `Self: Trait` is satisfied because it does not matter whether the impl is `const`.\n-            // Therefore we have to remap the param env here to be non-const.\n-            hir::def::DefKind::AssocConst => true,\n-            hir::def::DefKind::AssocFn\n-                if self.tcx.def_kind(self.tcx.parent(def_id)) == hir::def::DefKind::Trait =>\n-            {\n-                // N.B.: All callsites to this function involve checking a path expression.\n-                //\n-                // When instantiating a trait method as a function item, it does not actually matter whether\n-                // the trait is `const` or not, or whether `where T: ~const Tr` needs to be satisfied as\n-                // `const`. If we were to introduce instantiating trait methods as `const fn`s, we would\n-                // check that after this, either via a bound `where F: ~const FnOnce` or when coercing to a\n-                // `const fn` pointer.\n-                //\n-                // FIXME(fee1-dead) FIXME(const_trait_impl): update this doc when trait methods can satisfy\n-                // `~const FnOnce` or can be coerced to `const fn` pointer.\n-                true\n-            }\n-            _ => false,\n-        };\n         let bounds = self.instantiate_bounds(span, def_id, &substs);\n \n-        for mut obligation in traits::predicates_for_generics(\n+        for obligation in traits::predicates_for_generics(\n             |idx, predicate_span| {\n                 traits::ObligationCause::new(span, self.body_id, code(idx, predicate_span))\n             },\n             param_env,\n             bounds,\n         ) {\n-            if remap {\n-                obligation = obligation.without_const(self.tcx);\n-            }\n-            self.register_predicate(obligation);\n+            // N.B. We are remapping all predicates to non-const since we don't know if we just\n+            // want them as function pointers or we are calling them from a const-context. The\n+            // actual checking will occur in `rustc_const_eval::transform::check_consts`.\n+            self.register_predicate(obligation.without_const(self.tcx));\n         }\n     }\n "}, {"sha": "a0083a0c6291f8fd3df6dce0062213c93cbfd069", "filename": "tests/ui/const-generics/issue-93647.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconst-generics%2Fissue-93647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconst-generics%2Fissue-93647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-93647.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,6 +1,7 @@\n struct X<const N: usize = {\n     (||1usize)()\n     //~^ ERROR cannot call non-const closure\n+    //~| ERROR the trait bound\n }>;\n \n fn main() {}"}, {"sha": "20a6af5c54943a69096dddbdab911c248a8129d1", "filename": "tests/ui/const-generics/issue-93647.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,3 +1,17 @@\n+error[E0277]: the trait bound `[closure@$DIR/issue-93647.rs:2:6: 2:8]: Fn<()>` is not satisfied\n+  --> $DIR/issue-93647.rs:2:5\n+   |\n+LL |     (||1usize)()\n+   |     ^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-93647.rs:2:6: 2:8]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-93647.rs:2:6: 2:8]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-93647.rs:2:6: 2:8]`, but that implementation is not `const`\n+  --> $DIR/issue-93647.rs:2:5\n+   |\n+LL |     (||1usize)()\n+   |     ^^^^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-93647.rs:2:6: 2:8]` in a closure with no arguments: `|| { /* code */ }`\n+\n error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-93647.rs:2:5\n    |\n@@ -8,6 +22,7 @@ LL |     (||1usize)()\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "fef4914fad553f0873b0c077ca603c3f35eaece3", "filename": "tests/ui/consts/const-block-const-bound.stderr", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-block-const-bound.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,44 +1,30 @@\n error[E0277]: can't drop `UnconstDrop` in const contexts\n-  --> $DIR/const-block-const-bound.rs:20:11\n+  --> $DIR/const-block-const-bound.rs:20:9\n    |\n LL |         f(UnconstDrop);\n-   |         - ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `UnconstDrop`\n-   |         |\n-   |         required by a bound introduced by this call\n+   |         ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `UnconstDrop`\n    |\n    = note: the trait bound `UnconstDrop: ~const Destruct` is not satisfied\n-note: required by a bound in `f`\n-  --> $DIR/const-block-const-bound.rs:6:15\n-   |\n-LL | const fn f<T: ~const Destruct>(x: T) {}\n-   |               ^^^^^^^^^^^^^^^ required by this bound in `f`\n help: consider borrowing here\n    |\n-LL |         f(&UnconstDrop);\n-   |           +\n-LL |         f(&mut UnconstDrop);\n-   |           ++++\n+LL |         &f(UnconstDrop);\n+   |         +\n+LL |         &mut f(UnconstDrop);\n+   |         ++++\n \n error[E0277]: can't drop `NonDrop` in const contexts\n-  --> $DIR/const-block-const-bound.rs:22:11\n+  --> $DIR/const-block-const-bound.rs:22:9\n    |\n LL |         f(NonDrop);\n-   |         - ^^^^^^^ the trait `~const Destruct` is not implemented for `NonDrop`\n-   |         |\n-   |         required by a bound introduced by this call\n+   |         ^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonDrop`\n    |\n    = note: the trait bound `NonDrop: ~const Destruct` is not satisfied\n-note: required by a bound in `f`\n-  --> $DIR/const-block-const-bound.rs:6:15\n-   |\n-LL | const fn f<T: ~const Destruct>(x: T) {}\n-   |               ^^^^^^^^^^^^^^^ required by this bound in `f`\n help: consider borrowing here\n    |\n-LL |         f(&NonDrop);\n-   |           +\n-LL |         f(&mut NonDrop);\n-   |           ++++\n+LL |         &f(NonDrop);\n+   |         +\n+LL |         &mut f(NonDrop);\n+   |         ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "17acb2d9d17d1dba110328c4e7102390ff097746", "filename": "tests/ui/consts/invalid-inline-const-in-match-arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -5,5 +5,6 @@ fn main() {\n     match () {\n         const { (|| {})() } => {}\n         //~^ ERROR cannot call non-const closure in constants\n+        //~| ERROR the trait bound\n     }\n }"}, {"sha": "ac174849f06a1a1bbc694849e983b75c41a5d0fa", "filename": "tests/ui/consts/invalid-inline-const-in-match-arm.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,3 +1,17 @@\n+error[E0277]: the trait bound `[closure@$DIR/invalid-inline-const-in-match-arm.rs:6:18: 6:20]: Fn<()>` is not satisfied\n+  --> $DIR/invalid-inline-const-in-match-arm.rs:6:17\n+   |\n+LL |         const { (|| {})() } => {}\n+   |                 ^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/invalid-inline-const-in-match-arm.rs:6:18: 6:20]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/invalid-inline-const-in-match-arm.rs:6:18: 6:20]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/invalid-inline-const-in-match-arm.rs:6:18: 6:20]`, but that implementation is not `const`\n+  --> $DIR/invalid-inline-const-in-match-arm.rs:6:17\n+   |\n+LL |         const { (|| {})() } => {}\n+   |                 ^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/invalid-inline-const-in-match-arm.rs:6:18: 6:20]` in a closure with no arguments: `|| { /* code */ }`\n+\n error[E0015]: cannot call non-const closure in constants\n   --> $DIR/invalid-inline-const-in-match-arm.rs:6:17\n    |\n@@ -8,6 +22,7 @@ LL |         const { (|| {})() } => {}\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "e45c009d69f2043dd59124c537ef9b216a03269c", "filename": "tests/ui/consts/issue-28113.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-28113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-28113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-28113.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -3,6 +3,7 @@\n const X: u8 =\n     || -> u8 { 5 }()\n     //~^ ERROR cannot call non-const closure\n+    //~| ERROR the trait bound\n ;\n \n fn main() {}"}, {"sha": "e177a3585c46a802457ef0f7f46c54ec7a66b6bd", "filename": "tests/ui/consts/issue-28113.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-28113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-28113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-28113.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,3 +1,17 @@\n+error[E0277]: the trait bound `[closure@$DIR/issue-28113.rs:4:5: 4:13]: Fn<()>` is not satisfied\n+  --> $DIR/issue-28113.rs:4:5\n+   |\n+LL |     || -> u8 { 5 }()\n+   |     ^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-28113.rs:4:5: 4:13]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-28113.rs:4:5: 4:13]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-28113.rs:4:5: 4:13]`, but that implementation is not `const`\n+  --> $DIR/issue-28113.rs:4:5\n+   |\n+LL |     || -> u8 { 5 }()\n+   |     ^^^^^^^^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-28113.rs:4:5: 4:13]` in a closure with no arguments: `|| { /* code */ }`\n+\n error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-28113.rs:4:5\n    |\n@@ -8,6 +22,7 @@ LL |     || -> u8 { 5 }()\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "00875c4b58233ca9a658cb059c324b57a6e78f2b", "filename": "tests/ui/consts/issue-56164.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,5 +1,6 @@\n const fn foo() { (||{})() }\n //~^ ERROR cannot call non-const closure\n+//~| ERROR the trait bound\n \n const fn bad(input: fn()) {\n     input()"}, {"sha": "003f847446336d90d25d1984473990574d15f44b", "filename": "tests/ui/consts/issue-56164.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,3 +1,17 @@\n+error[E0277]: the trait bound `[closure@$DIR/issue-56164.rs:1:19: 1:21]: Fn<()>` is not satisfied\n+  --> $DIR/issue-56164.rs:1:18\n+   |\n+LL | const fn foo() { (||{})() }\n+   |                  ^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-56164.rs:1:19: 1:21]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-56164.rs:1:19: 1:21]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-56164.rs:1:19: 1:21]`, but that implementation is not `const`\n+  --> $DIR/issue-56164.rs:1:18\n+   |\n+LL | const fn foo() { (||{})() }\n+   |                  ^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-56164.rs:1:19: 1:21]` in a closure with no arguments: `|| { /* code */ }`\n+\n error[E0015]: cannot call non-const closure in constant functions\n   --> $DIR/issue-56164.rs:1:18\n    |\n@@ -9,7 +23,7 @@ LL | const fn foo() { (||{})() }\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: function pointer calls are not allowed in constant functions\n-  --> $DIR/issue-56164.rs:5:5\n+  --> $DIR/issue-56164.rs:6:5\n    |\n LL |     input()\n    |     ^^^^^^^\n@@ -26,6 +40,7 @@ note: erroneous constant used\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "a88e0cc6017d3d8ecb30785828ddccb8639e4e89", "filename": "tests/ui/consts/issue-68542-closure-in-array-len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -4,6 +4,7 @@\n \n struct Bug {\n     a: [(); (|| { 0 })()] //~ ERROR cannot call non-const closure\n+    //~^ ERROR the trait bound\n }\n \n fn main() {}"}, {"sha": "ace62f09d0500a00a02d10d08a888fced786d910", "filename": "tests/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,3 +1,17 @@\n+error[E0277]: the trait bound `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]: Fn<()>` is not satisfied\n+  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n+   |\n+LL |     a: [(); (|| { 0 })()]\n+   |             ^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`, but that implementation is not `const`\n+  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n+   |\n+LL |     a: [(); (|| { 0 })()]\n+   |             ^^^^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]` in a closure with no arguments: `|| { /* code */ }`\n+\n error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n    |\n@@ -8,6 +22,7 @@ LL |     a: [(); (|| { 0 })()]\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "4669d7c1a35d602d7777acb19c971f8ff00e4740", "filename": "tests/ui/never_type/issue-52443.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fnever_type%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fnever_type%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -11,4 +11,5 @@ fn main() {\n     //~| ERROR cannot convert\n     //~| ERROR mutable references\n     //~| ERROR cannot call\n+    //~| ERROR the trait bound\n }"}, {"sha": "1233bdc5d1f8cad052b636376cb5284f7a7812dc", "filename": "tests/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -58,6 +58,19 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0277]: the trait bound `RangeFrom<usize>: Iterator` is not satisfied\n+  --> $DIR/issue-52443.rs:9:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |                     ^^^^^^^^ `RangeFrom<usize>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `RangeFrom<usize>`\n+note: the trait `Iterator` is implemented for `RangeFrom<usize>`, but that implementation is not `const`\n+  --> $DIR/issue-52443.rs:9:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |                     ^^^^^^^^\n+\n error[E0015]: cannot call non-const fn `<RangeFrom<usize> as Iterator>::next` in constants\n   --> $DIR/issue-52443.rs:9:21\n    |\n@@ -67,7 +80,7 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 7 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0015, E0308, E0658.\n+Some errors have detailed explanations: E0015, E0277, E0308, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "a28d6ce05a7d45196982a2594df197b5fed5321d", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,21 +1,14 @@\n error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n-  --> $DIR/call-generic-method-nonconst.rs:23:34\n+  --> $DIR/call-generic-method-nonconst.rs:23:22\n    |\n LL | pub const EQ: bool = equals_self(&S);\n-   |                      ----------- ^^ the trait `~const Foo` is not implemented for `S`\n-   |                      |\n-   |                      required by a bound introduced by this call\n+   |                      ^^^^^^^^^^^^^^^ the trait `~const Foo` is not implemented for `S`\n    |\n note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-nonconst.rs:23:34\n+  --> $DIR/call-generic-method-nonconst.rs:23:22\n    |\n LL | pub const EQ: bool = equals_self(&S);\n-   |                                  ^^\n-note: required by a bound in `equals_self`\n-  --> $DIR/call-generic-method-nonconst.rs:16:25\n-   |\n-LL | const fn equals_self<T: ~const Foo>(t: &T) -> bool {\n-   |                         ^^^^^^^^^^ required by this bound in `equals_self`\n+   |                      ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ffc24ec6e92072e0a0485bd88d9d3b7534e0aac3", "filename": "tests/ui/rfc-2632-const-trait-impl/const-closure-trait-method-fail.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,22 +1,15 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied in `fn(()) -> i32 {<() as Tr>::a}`\n-  --> $DIR/const-closure-trait-method-fail.rs:16:42\n+  --> $DIR/const-closure-trait-method-fail.rs:16:23\n    |\n LL | const _: () = assert!(need_const_closure(Tr::a) == 42);\n-   |                       ------------------ ^^^^^ within `fn(()) -> i32 {<() as Tr>::a}`, the trait `~const Tr` is not implemented for `()`\n-   |                       |\n-   |                       required by a bound introduced by this call\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ within `fn(()) -> i32 {<() as Tr>::a}`, the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/const-closure-trait-method-fail.rs:16:42\n+  --> $DIR/const-closure-trait-method-fail.rs:16:23\n    |\n LL | const _: () = assert!(need_const_closure(Tr::a) == 42);\n-   |                                          ^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `fn(()) -> i32 {<() as Tr>::a}`\n-note: required by a bound in `need_const_closure`\n-  --> $DIR/const-closure-trait-method-fail.rs:12:32\n-   |\n-LL | const fn need_const_closure<T: ~const FnOnce(()) -> i32>(x: T) -> i32 {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `need_const_closure`\n \n error: aborting due to previous error\n "}, {"sha": "dd35501faecf157f66cb4ae1d00d376d97f90762", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.precise.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.precise.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -0,0 +1,50 @@\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail-2.rs:31:23\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail-2.rs:31:23\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail-2.rs:21:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail-2.rs:31:64\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail-2.rs:31:64\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail-2.rs:21:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail-2.rs:37:9\n+   |\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail-2.rs:35:1\n+   |\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "8d7212dfe70c8ff963f9ce2352690839aa9f8e5a", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -0,0 +1,44 @@\n+// revisions: stock precise\n+#![feature(const_trait_impl)]\n+#![feature(const_mut_refs)]\n+#![cfg_attr(precise, feature(const_precise_live_drops))]\n+\n+use std::marker::{Destruct, PhantomData};\n+\n+struct NonTrivialDrop;\n+\n+impl Drop for NonTrivialDrop {\n+    fn drop(&mut self) {\n+        println!(\"Non trivial drop\");\n+    }\n+}\n+\n+#[const_trait]\n+trait A { fn a() { } }\n+\n+impl A for NonTrivialDrop {}\n+\n+struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+\n+impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n+    fn drop(&mut self) {\n+        T::a();\n+    }\n+}\n+\n+const fn check<T: ~const Destruct>(_: T) {}\n+\n+const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+//~^ ERROR the trait bound\n+//~| ERROR the trait bound\n+\n+struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+\n+impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+//~^ ERROR `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+    fn drop(&mut self) {\n+        T::a();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dd35501faecf157f66cb4ae1d00d376d97f90762", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.stock.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stock.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -0,0 +1,50 @@\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail-2.rs:31:23\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail-2.rs:31:23\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail-2.rs:21:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail-2.rs:31:64\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail-2.rs:31:64\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(ConstDropImplWithBounds(PhantomData));\n+   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail-2.rs:21:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail-2.rs:37:9\n+   |\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail-2.rs:35:1\n+   |\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "40caada51d740daec099103350959f171a8e6c69", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 39, "deletions": 80, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,99 +1,58 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:44:5\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n ...\n-LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n    |\n-   = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n-   |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-help: consider borrowing here\n+note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |     &NonTrivialDrop,\n-   |     +\n-LL |     &mut NonTrivialDrop,\n-   |     ++++\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^\n+...\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n+   = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n ...\n-LL |     ConstImplWithDropGlue(NonTrivialDrop),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |     ConstImplWithDropGlue(NonTrivialDrop),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^\n+...\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:16:8\n    |\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n-   |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-\n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail.rs:48:47\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ----------------------------------------- ^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n-   |     |\n-   |     required by a bound introduced by this call\n-   |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:48:47\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |                                               ^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n-\n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail.rs:48:5\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n-   |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:48:5\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n-\n-error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n-  --> $DIR/const-drop-fail.rs:55:9\n-   |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n-   |         ^^^^^^^^\n-   |\n-note: the implementor must specify the same requirement\n-  --> $DIR/const-drop-fail.rs:53:1\n-   |\n-LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0367.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c4bdb9ef5e569aada4b277f00df0ecf46debbfac", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -19,44 +19,19 @@ impl const Drop for ConstImplWithDropGlue {\n     fn drop(&mut self) {}\n }\n \n-#[const_trait]\n-trait A { fn a() { } }\n-\n-impl A for NonTrivialDrop {}\n-\n-struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-\n-impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-    fn drop(&mut self) {\n-        T::a();\n-    }\n-}\n-\n const fn check<T: ~const Destruct>(_: T) {}\n \n macro_rules! check_all {\n     ($($exp:expr),*$(,)?) => {$(\n         const _: () = check($exp);\n+        //~^ ERROR can't drop\n+        //~| ERROR can't drop\n     )*};\n }\n \n check_all! {\n     NonTrivialDrop,\n-    //~^ ERROR can't drop\n     ConstImplWithDropGlue(NonTrivialDrop),\n-    //~^ ERROR can't drop\n-    ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-    //~^ ERROR the trait bound\n-    //~| ERROR the trait bound\n-}\n-\n-struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n-\n-impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n-//~^ ERROR `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n-    fn drop(&mut self) {\n-        T::a();\n-    }\n }\n \n fn main() {}"}, {"sha": "40caada51d740daec099103350959f171a8e6c69", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 39, "deletions": 80, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,99 +1,58 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:44:5\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n ...\n-LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n    |\n-   = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n-   |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-help: consider borrowing here\n+note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |     &NonTrivialDrop,\n-   |     +\n-LL |     &mut NonTrivialDrop,\n-   |     ++++\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^\n+...\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n+   = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n ...\n-LL |     ConstImplWithDropGlue(NonTrivialDrop),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:26:23\n    |\n-LL |     ConstImplWithDropGlue(NonTrivialDrop),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |           const _: () = check($exp);\n+   |                         ^^^^^^^^^^^\n+...\n+LL | / check_all! {\n+LL | |     NonTrivialDrop,\n+LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n+LL | | }\n+   | |_- in this macro invocation\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:16:8\n    |\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n-   |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-\n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail.rs:48:47\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ----------------------------------------- ^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n-   |     |\n-   |     required by a bound introduced by this call\n-   |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:48:47\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |                                               ^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n-\n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail.rs:48:5\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n-   |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:48:5\n-   |\n-LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail.rs:27:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n-\n-error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n-  --> $DIR/const-drop-fail.rs:55:9\n-   |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n-   |         ^^^^^^^^\n-   |\n-note: the implementor must specify the same requirement\n-  --> $DIR/const-drop-fail.rs:53:1\n-   |\n-LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0367.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ed6699f37242029fbdcca9f87ee4ed7a040274c5", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -9,5 +9,6 @@ impl Default for A {\n #[derive_const(Default)]\n pub struct S(A);\n //~^ cannot call non-const fn\n+//~| the trait bound\n \n fn main() {}"}, {"sha": "6b6c578bff8ae66bd082efa3d47d1fcf60f55ea0", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,3 +1,24 @@\n+error[E0277]: the trait bound `A: Default` is not satisfied\n+  --> $DIR/derive-const-non-const-type.rs:10:14\n+   |\n+LL | #[derive_const(Default)]\n+   |                ------- in this derive macro expansion\n+LL | pub struct S(A);\n+   |              ^ the trait `~const Default` is not implemented for `A`\n+   |\n+note: the trait `Default` is implemented for `A`, but that implementation is not `const`\n+  --> $DIR/derive-const-non-const-type.rs:10:14\n+   |\n+LL | #[derive_const(Default)]\n+   |                ------- in this derive macro expansion\n+LL | pub struct S(A);\n+   |              ^\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `A` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n+\n error[E0015]: cannot call non-const fn `<A as Default>::default` in constant functions\n   --> $DIR/derive-const-non-const-type.rs:10:14\n    |\n@@ -10,6 +31,7 @@ LL | pub struct S(A);\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "26644f72c4e55615b7ad557f05bc431c0ae94a61", "filename": "tests/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -1,19 +1,14 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:9\n    |\n LL |         foo::<()>();\n-   |               ^^ the trait `~const Tr` is not implemented for `()`\n+   |         ^^^^^^^^^^^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:9\n    |\n LL |         foo::<()>();\n-   |               ^^\n-note: required by a bound in `foo`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n-   |\n-LL | const fn foo<T>() where T: ~const Tr {}\n-   |                            ^^^^^^^^^ required by this bound in `foo`\n+   |         ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "60790e297466101c4e3e141c16ed8884ae049bc9", "filename": "tests/ui/rfc-2632-const-trait-impl/function-pointer-does-not-require-const.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Ffunction-pointer-does-not-require-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e6680d668d136e643976c4079c7b1cac1b6b4/tests%2Fui%2Frfc-2632-const-trait-impl%2Ffunction-pointer-does-not-require-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Ffunction-pointer-does-not-require-const.rs?ref=b17e6680d668d136e643976c4079c7b1cac1b6b4", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+pub trait Test {}\n+\n+impl Test for () {}\n+\n+pub const fn test<T: ~const Test>() {}\n+\n+pub const fn min_by_i32() -> fn() {\n+    test::<()>\n+}\n+\n+fn main() {}"}]}