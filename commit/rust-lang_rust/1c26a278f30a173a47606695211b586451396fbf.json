{"sha": "1c26a278f30a173a47606695211b586451396fbf", "node_id": "C_kwDOAAsO6NoAKDFjMjZhMjc4ZjMwYTE3M2E0NzYwNjY5NTIxMWI1ODY0NTEzOTZmYmY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-25T18:28:04Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-25T18:28:04Z"}, "message": "Split diagnostic details out into a separate function and fluent files", "tree": {"sha": "ea8f8629af6defc611d61091bfeb884839529d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8f8629af6defc611d61091bfeb884839529d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c26a278f30a173a47606695211b586451396fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c26a278f30a173a47606695211b586451396fbf", "html_url": "https://github.com/rust-lang/rust/commit/1c26a278f30a173a47606695211b586451396fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c26a278f30a173a47606695211b586451396fbf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8286ea5a4977a5bca5d75ce25f30e1afbbb95e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/8286ea5a4977a5bca5d75ce25f30e1afbbb95e31", "html_url": "https://github.com/rust-lang/rust/commit/8286ea5a4977a5bca5d75ce25f30e1afbbb95e31"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "7ac44312695d9aac94ac0f20648763a9e229b564", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=1c26a278f30a173a47606695211b586451396fbf", "patch": "@@ -137,3 +137,12 @@ hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(l\n hir_analysis_missing_parentheses_in_range = can't call method `{$method_name}` on type `{$ty_str}`\n \n hir_analysis_add_missing_parentheses_in_range = you must surround the range in parentheses to call its `{$func_name}` function\n+\n+hir_analysis_const_impl_for_non_const_trait =\n+    const `impl` for trait `{$trait_name}` which is not marked with `#[const_trait]`\n+    .suggestion = mark `{$trait_name}` as const\n+    .note = marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+    .adding = adding a non-const method body in the future would be a breaking change\n+\n+hir_analysis_const_bound_for_non_const_trait =\n+    ~const can only be applied to `#[const_trait]` traits"}, {"sha": "6baf98449775da892321c3a68134e0038a11709b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=1c26a278f30a173a47606695211b586451396fbf", "patch": "@@ -539,10 +539,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(ty::BoundConstness::ConstIfConst) = constness\n             && generics.has_self && !tcx.has_attr(def_id, sym::const_trait)\n         {\n-            tcx.sess.span_err(\n-                span,\n-                \"~const can only be applied to `#[const_trait]` traits\",\n-            );\n+            tcx.sess.emit_err(crate::errors::ConstBoundForNonConstTrait { span } );\n         }\n \n         (substs, arg_count)"}, {"sha": "e261bb07f954541a4bd85390fe3b0d10c06ecedf", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=1c26a278f30a173a47606695211b586451396fbf", "patch": "@@ -1294,34 +1294,38 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n                 &icx,\n                 ast_trait_ref,\n                 selfty,\n-                match impl_.constness {\n-                    hir::Constness::Const => {\n-                        if let Some(trait_def_id) = ast_trait_ref.trait_def_id() && !tcx.has_attr(trait_def_id, sym::const_trait) {\n-                            let trait_name = tcx.item_name(trait_def_id);\n-                            let mut err = tcx.sess.struct_span_err(\n-                                ast_trait_ref.path.span,\n-                                &format!(\"const `impl` for trait `{trait_name}` which is not marked with `#[const_trait]`\"),\n-                            );\n-                            if trait_def_id.is_local() {\n-                                let sp = tcx.def_span(trait_def_id).shrink_to_lo();\n-                                err.span_suggestion(sp, &format!(\"mark `{trait_name}` as const\"), \"#[const_trait]\", rustc_errors::Applicability::MachineApplicable);\n-                            }\n-                            err.note(\"marking a trait with `#[const_trait]` ensures all default method bodies are `const`\");\n-                            err.note(\"adding a non-const method body in the future would be a breaking change\");\n-                            err.emit();\n-                            ty::BoundConstness::NotConst\n-                        } else {\n-                            ty::BoundConstness::ConstIfConst\n-                        }\n-                    },\n-                    hir::Constness::NotConst => ty::BoundConstness::NotConst,\n-                },\n+                check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n             )\n         }),\n         _ => bug!(),\n     }\n }\n \n+fn check_impl_constness(\n+    tcx: TyCtxt<'_>,\n+    constness: hir::Constness,\n+    ast_trait_ref: &hir::TraitRef<'_>,\n+) -> ty::BoundConstness {\n+    match constness {\n+        hir::Constness::Const => {\n+            if let Some(trait_def_id) = ast_trait_ref.trait_def_id() && !tcx.has_attr(trait_def_id, sym::const_trait) {\n+                let trait_name = tcx.item_name(trait_def_id).to_string();\n+                tcx.sess.emit_err(errors::ConstImplForNonConstTrait {\n+                    trait_ref_span: ast_trait_ref.path.span,\n+                    trait_name,\n+                    local_trait_span: trait_def_id.as_local().map(|_| tcx.def_span(trait_def_id).shrink_to_lo()),\n+                    marking: (),\n+                    adding: (),\n+                });\n+                ty::BoundConstness::NotConst\n+            } else {\n+                ty::BoundConstness::ConstIfConst\n+            }\n+        },\n+        hir::Constness::NotConst => ty::BoundConstness::NotConst,\n+    }\n+}\n+\n fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(def_id.expect_local());"}, {"sha": "bd0c1f5dd109860884c610498e1e8d0d9129814a", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c26a278f30a173a47606695211b586451396fbf/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=1c26a278f30a173a47606695211b586451396fbf", "patch": "@@ -249,3 +249,24 @@ pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_const_impl_for_non_const_trait)]\n+pub struct ConstImplForNonConstTrait {\n+    #[primary_span]\n+    pub trait_ref_span: Span,\n+    pub trait_name: String,\n+    #[suggestion(applicability = \"machine-applicable\", code = \"#[const_trait]\")]\n+    pub local_trait_span: Option<Span>,\n+    #[note]\n+    pub marking: (),\n+    #[note(adding)]\n+    pub adding: (),\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_const_bound_for_non_const_trait)]\n+pub struct ConstBoundForNonConstTrait {\n+    #[primary_span]\n+    pub span: Span,\n+}"}]}