{"sha": "471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "node_id": "C_kwDOAAsO6NoAKDQ3MWZhMDVmZWYwYjA5ZTA0MzBhODBlM2Q3ZjIwNWVmMTlmYzRhODY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-15T19:31:28Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-15T22:03:27Z"}, "message": "Make #[cfg(bootstrap)] not error in proc macros on later stages\n\nAs was discovered in https://github.com/rust-lang/rust/pull/93628#issuecomment-1154697627 ,\nadding #[cfg(bootstrap)] to a rust-internal proc macro crate\nwould yield an unexpected cfg name error, at least on later\nstages wher the bootstrap cfg arg wasn't set.\n\nrustc already passes arguments to mark bootstrap as expected,\nhowever the means of delivery through the RUSTFLAGS env var\nis unable to reach proc macro crates, as described\nin the issue linked in the code this commit touches.\n\nThis wouldn't be an issue for cfg args that get passed through\nRUSTFLAGS, as they would never become *active* either, so\nany usage of one of these flags in a proc macro's code would\nlegitimately yield a lint warning. But since dc302587e2cf5105a3a864319d7e7bcb434bba20,\nrust takes extra measures to pass --cfg=bootstrap even in\nproc macros, by passing it via the wrapper. Thus, we need\nto send the flags to mark bootstrap as expected also from the\nwrapper, so that #[cfg(bootstrap)] also works from proc macros.\n\nI want to thank Urgau and jplatte for helping me find the cause of this. \u2764\ufe0f", "tree": {"sha": "d04efcd01ddc0925b6d943908f97edb757c17d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04efcd01ddc0925b6d943908f97edb757c17d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "html_url": "https://github.com/rust-lang/rust/commit/471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/471fa05fef0b09e0430a80e3d7f205ef19fc4a86/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bdec3c8abdc48e46715d7b14b764af28da1cee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdec3c8abdc48e46715d7b14b764af28da1cee3", "html_url": "https://github.com/rust-lang/rust/commit/3bdec3c8abdc48e46715d7b14b764af28da1cee3"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "40a3cc6d12cac0b30ebda5d17b0d1a3b91b28404", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/471fa05fef0b09e0430a80e3d7f205ef19fc4a86/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471fa05fef0b09e0430a80e3d7f205ef19fc4a86/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=471fa05fef0b09e0430a80e3d7f205ef19fc4a86", "patch": "@@ -127,12 +127,18 @@ fn main() {\n             }\n         }\n \n+        // Cargo doesn't pass RUSTFLAGS to proc_macros:\n+        // https://github.com/rust-lang/cargo/issues/4423\n+        // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n+        // We also declare that the flag is expected, which is mainly needed for\n+        // later stages so that they don't warn about #[cfg(bootstrap)],\n+        // but enabling it for stage 0 too lets any warnings, if they occur,\n+        // occur more early on, e.g. about #[cfg(bootstrap = \"foo\")].\n         if stage == \"0\" {\n-            // Cargo doesn't pass RUSTFLAGS to proc_macros:\n-            // https://github.com/rust-lang/cargo/issues/4423\n-            // Set `--cfg=bootstrap` explicitly instead.\n             cmd.arg(\"--cfg=bootstrap\");\n         }\n+        cmd.arg(\"-Zunstable-options\");\n+        cmd.arg(\"--check-cfg=values(bootstrap)\");\n     }\n \n     if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {"}]}