{"sha": "c32f525f73b90dc30a6d6ff943cc716e43e84d73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMmY1MjVmNzNiOTBkYzMwYTZkNmZmOTQzY2M3MTZlNDNlODRkNzM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-21T13:36:41Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-21T13:37:14Z"}, "message": "Make the pretty-printer output paren-free and case-free code\n\nWe should probably do another pretty-printing pass soon.", "tree": {"sha": "fd056282e03f00ad88c224d545e351e43a9d76bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd056282e03f00ad88c224d545e351e43a9d76bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32f525f73b90dc30a6d6ff943cc716e43e84d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32f525f73b90dc30a6d6ff943cc716e43e84d73", "html_url": "https://github.com/rust-lang/rust/commit/c32f525f73b90dc30a6d6ff943cc716e43e84d73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32f525f73b90dc30a6d6ff943cc716e43e84d73/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45748a3be4275258ada5ca23b09c6b2f0122ca3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/45748a3be4275258ada5ca23b09c6b2f0122ca3f", "html_url": "https://github.com/rust-lang/rust/commit/45748a3be4275258ada5ca23b09c6b2f0122ca3f"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "1fbbe7c624d21c776b50e7b3c5cd33df539803ac", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c32f525f73b90dc30a6d6ff943cc716e43e84d73/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32f525f73b90dc30a6d6ff943cc716e43e84d73/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=c32f525f73b90dc30a6d6ff943cc716e43e84d73", "patch": "@@ -69,6 +69,7 @@ fn rust_printer(ioivec::writer writer) -> ps {\n }\n \n const uint indent_unit = 4u;\n+const uint alt_indent_unit = 2u;\n \n const uint default_columns = 78u;\n \n@@ -165,12 +166,14 @@ fn bopen(&ps s) {\n \n }\n \n-fn bclose(&ps s, codemap::span span) {\n+fn bclose_(&ps s, codemap::span span, uint indented) {\n     maybe_print_comment(s, span.hi);\n-    break_offset(s.s, 1u, -(indent_unit as int));\n+    break_offset(s.s, 1u, -(indented as int));\n     word(s.s, \"}\");\n     end(s); // close the outer-box\n-\n+}\n+fn bclose(&ps s, codemap::span span) {\n+    bclose_(s, span, indent_unit);\n }\n \n fn hardbreak_if_not_bol(&ps s) {\n@@ -572,10 +575,11 @@ fn print_stmt(&ps s, &ast::stmt st) {\n }\n \n fn print_block(&ps s, &ast::block blk) {\n-    print_possibly_embedded_block(s, blk, false);\n+    print_possibly_embedded_block(s, blk, false, indent_unit);\n }\n \n-fn print_possibly_embedded_block(&ps s, &ast::block blk, bool embedded) {\n+fn print_possibly_embedded_block(&ps s, &ast::block blk, bool embedded,\n+                                 uint indented) {\n     maybe_print_comment(s, blk.span.lo);\n     auto ann_node = node_block(s, blk);\n     s.ann.pre(ann_node);\n@@ -593,7 +597,7 @@ fn print_possibly_embedded_block(&ps s, &ast::block blk, bool embedded) {\n         }\n         case (_) { }\n     }\n-    bclose(s, blk.span);\n+    bclose_(s, blk.span, indented);\n     s.ann.post(ann_node);\n }\n \n@@ -603,9 +607,7 @@ fn print_if(&ps s, &@ast::expr test, &ast::block block,\n     if (chk) {\n         word_nbsp(s, \"check\");\n     }\n-    popen(s);\n     print_expr(s, test);\n-    pclose(s);\n     space(s.s);\n     print_block(s, block);\n     fn do_else(&ps s, option::t[@ast::expr] els) {\n@@ -658,7 +660,7 @@ fn print_mac(&ps s, &ast::mac m) {\n             word(s.s, \">\");\n         }\n         case (ast::mac_embed_block(?blk)) {\n-            print_possibly_embedded_block(s, blk, true);\n+            print_possibly_embedded_block(s, blk, true, indent_unit);\n         }\n         case (ast::mac_ellipsis) {\n             word(s.s, \"...\");\n@@ -788,9 +790,7 @@ fn print_expr(&ps s, &@ast::expr expr) {\n         }\n         case (ast::expr_while(?test, ?block)) {\n             head(s, \"while\");\n-            popen(s);\n             print_expr(s, test);\n-            pclose(s);\n             space(s.s);\n             print_block(s, block);\n         }\n@@ -822,30 +822,30 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_block(s, block);\n             space(s.s);\n             word_space(s, \"while\");\n-            popen(s);\n             print_expr(s, expr);\n-            pclose(s);\n         }\n         case (ast::expr_alt(?expr, ?arms)) {\n-            head(s, \"alt\");\n-            popen(s);\n+            cbox(s, alt_indent_unit);\n+            ibox(s, 4u);\n+            word_nbsp(s, \"alt\");\n             print_expr(s, expr);\n-            pclose(s);\n             space(s.s);\n             bopen(s);\n             for (ast::arm arm in arms) {\n                 space(s.s);\n-                head(s, \"case\");\n+                cbox(s, alt_indent_unit);\n+                ibox(s, 0u);\n                 auto first = true;\n                 for (@ast::pat p in arm.pats) {\n                     if (first) { first = false; }\n                     else { space(s.s); word_space(s, \"|\"); }\n                     print_pat(s, p);\n                 }\n                 space(s.s);\n-                print_block(s, arm.block);\n+                print_possibly_embedded_block(s, arm.block, false,\n+                                              alt_indent_unit);\n             }\n-            bclose(s, expr.span);\n+            bclose_(s, expr.span, alt_indent_unit);\n         }\n         case (ast::expr_fn(?f)) {\n             head(s, proto_to_str(f.proto));"}]}