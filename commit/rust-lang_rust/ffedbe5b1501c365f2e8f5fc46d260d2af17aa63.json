{"sha": "ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZWRiZTViMTUwMWMzNjVmMmU4ZjVmYzQ2ZDI2MGQyYWYxN2FhNjM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-10-10T04:16:58Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-10-10T04:22:36Z"}, "message": "Add rounding functions", "tree": {"sha": "d579bc2f0f3ad89134d1b92621e3af37f35b88cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d579bc2f0f3ad89134d1b92621e3af37f35b88cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "html_url": "https://github.com/rust-lang/rust/commit/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48729010ec4a4d9e386c7edf3f7f11d9ec72b763", "url": "https://api.github.com/repos/rust-lang/rust/commits/48729010ec4a4d9e386c7edf3f7f11d9ec72b763", "html_url": "https://github.com/rust-lang/rust/commit/48729010ec4a4d9e386c7edf3f7f11d9ec72b763"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "cea39e6f3f3d9774cfb3b99f391b323ad95ba5e5", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "patch": "@@ -1,5 +1,5 @@\n #![no_std]\n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, link_llvm_intrinsics, simd_ffi)]\n #![warn(missing_docs)]\n //! Portable SIMD module.\n \n@@ -56,3 +56,5 @@ mod vectors_mask128;\n pub use vectors_mask128::*;\n mod vectors_masksize;\n pub use vectors_masksize::*;\n+\n+mod round;"}, {"sha": "43285cdd3f7ff3aca47404a1af0f67cbbbada254", "filename": "crates/core_simd/src/round.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffedbe5b1501c365f2e8f5fc46d260d2af17aa63/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=ffedbe5b1501c365f2e8f5fc46d260d2af17aa63", "patch": "@@ -0,0 +1,124 @@\n+macro_rules! implement {\n+    {\n+        impl $type:ident {\n+            floor = $floor_intrinsic:literal,\n+            ceil = $ceil_intrinsic:literal,\n+            round = $round_intrinsic:literal,\n+            trunc = $trunc_intrinsic:literal,\n+        }\n+    } => {\n+        mod $type {\n+            #[allow(improper_ctypes)]\n+            extern \"C\" {\n+                #[link_name = $floor_intrinsic]\n+                fn floor_intrinsic(x: crate::$type) -> crate::$type;\n+                #[link_name = $ceil_intrinsic]\n+                fn ceil_intrinsic(x: crate::$type) -> crate::$type;\n+                #[link_name = $round_intrinsic]\n+                fn round_intrinsic(x: crate::$type) -> crate::$type;\n+                #[link_name = $trunc_intrinsic]\n+                fn trunc_intrinsic(x: crate::$type) -> crate::$type;\n+            }\n+\n+            impl crate::$type {\n+                /// Returns the largest integer less than or equal to each lane.\n+                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+                #[inline]\n+                pub fn floor(self) -> Self {\n+                    unsafe { floor_intrinsic(self) }\n+                }\n+\n+                /// Returns the smallest integer greater than or equal to each lane.\n+                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+                #[inline]\n+                pub fn ceil(self) -> Self {\n+                    unsafe { ceil_intrinsic(self) }\n+                }\n+\n+                /// Returns the nearest integer to each lane. Round half-way cases away from 0.0.\n+                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+                #[inline]\n+                pub fn round(self) -> Self {\n+                    unsafe { round_intrinsic(self) }\n+                }\n+\n+                /// Returns the integer part of each lane.\n+                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+                #[inline]\n+                pub fn trunc(self) -> Self {\n+                    unsafe { trunc_intrinsic(self) }\n+                }\n+\n+                /// Returns the fractional part of each lane.\n+                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+                #[inline]\n+                pub fn fract(self) -> Self {\n+                    self - self.trunc()\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+implement! {\n+    impl f32x2 {\n+        floor = \"llvm.floor.v2f32\",\n+        ceil = \"llvm.ceil.v2f32\",\n+        round = \"llvm.round.v2f32\",\n+        trunc = \"llvm.trunc.v2f32\",\n+    }\n+}\n+\n+implement! {\n+    impl f32x4 {\n+        floor = \"llvm.floor.v4f32\",\n+        ceil = \"llvm.ceil.v4f32\",\n+        round = \"llvm.round.v4f32\",\n+        trunc = \"llvm.trunc.v4f32\",\n+    }\n+}\n+\n+implement! {\n+    impl f32x8 {\n+        floor = \"llvm.floor.v8f32\",\n+        ceil = \"llvm.ceil.v8f32\",\n+        round = \"llvm.round.v8f32\",\n+        trunc = \"llvm.trunc.v8f32\",\n+    }\n+}\n+\n+implement! {\n+    impl f32x16 {\n+        floor = \"llvm.floor.v16f32\",\n+        ceil = \"llvm.ceil.v16f32\",\n+        round = \"llvm.round.v16f32\",\n+        trunc = \"llvm.trunc.v16f32\",\n+    }\n+}\n+\n+implement! {\n+    impl f64x2 {\n+        floor = \"llvm.floor.v2f64\",\n+        ceil = \"llvm.ceil.v2f64\",\n+        round = \"llvm.round.v2f64\",\n+        trunc = \"llvm.trunc.v2f64\",\n+    }\n+}\n+\n+implement! {\n+    impl f64x4 {\n+        floor = \"llvm.floor.v4f64\",\n+        ceil = \"llvm.ceil.v4f64\",\n+        round = \"llvm.round.v4f64\",\n+        trunc = \"llvm.trunc.v4f64\",\n+    }\n+}\n+\n+implement! {\n+    impl f64x8 {\n+        floor = \"llvm.floor.v8f64\",\n+        ceil = \"llvm.ceil.v8f64\",\n+        round = \"llvm.round.v8f64\",\n+        trunc = \"llvm.trunc.v8f64\",\n+    }\n+}"}]}