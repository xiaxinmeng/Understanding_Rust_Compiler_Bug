{"sha": "f03eb96f39dd616d8213cadf337b9d0b0984a687", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwM2ViOTZmMzlkZDYxNmQ4MjEzY2FkZjMzN2I5ZDBiMDk4NGE2ODc=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-16T10:01:41Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-18T18:10:36Z"}, "message": "rustc: Warn when int or uint is used in a native type decl\n\nIssue #1403", "tree": {"sha": "385ac1e80f698c4a5901d699ce1c6ce3971b9868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385ac1e80f698c4a5901d699ce1c6ce3971b9868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03eb96f39dd616d8213cadf337b9d0b0984a687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03eb96f39dd616d8213cadf337b9d0b0984a687", "html_url": "https://github.com/rust-lang/rust/commit/f03eb96f39dd616d8213cadf337b9d0b0984a687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03eb96f39dd616d8213cadf337b9d0b0984a687/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6c94e321d9afbb72952f771ec4ba0b37a3de18", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6c94e321d9afbb72952f771ec4ba0b37a3de18", "html_url": "https://github.com/rust-lang/rust/commit/ba6c94e321d9afbb72952f771ec4ba0b37a3de18"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7c8e21464c4cc3528a6b71f727bd733fceda0354", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f03eb96f39dd616d8213cadf337b9d0b0984a687/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03eb96f39dd616d8213cadf337b9d0b0984a687/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f03eb96f39dd616d8213cadf337b9d0b0984a687", "patch": "@@ -2680,6 +2680,25 @@ fn check_method(ccx: @crate_ctxt, method: @ast::method) {\n     check_fn(ccx, ast::proto_bare, method.decl, method.body, method.id, none);\n }\n \n+fn check_native_fn(ccx: @crate_ctxt, decl: ast::fn_decl) {\n+    let tys = vec::map(decl.inputs) {|a| a.ty };\n+    for ty in (tys + [decl.output]) {\n+        alt ty.node {\n+          ast::ty_int(ast::ty_i.) {\n+            ccx.tcx.sess.span_warn(\n+                ty.span, \"found rust type `int` in native module, while \" +\n+                         \"ctypes::c_int or ctypes::long should be used\");\n+          }\n+          ast::ty_uint(ast::ty_u.) {\n+            ccx.tcx.sess.span_warn(\n+                ty.span, \"found rust type `uint` in native module, while \" +\n+                         \"ctypes::c_uint or ctypes::ulong should be used\");\n+          }\n+          _ { }\n+        }\n+    }\n+}\n+\n fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     alt it.node {\n       ast::item_const(_, e) { check_const(ccx, it.span, e, it.id); }\n@@ -2690,6 +2709,16 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n       ast::item_res(decl, tps, body, dtor_id, _) {\n         check_fn(ccx, ast::proto_bare, decl, body, dtor_id, none);\n       }\n+      ast::item_native_mod(nmod) {\n+        for ni in nmod.items {\n+            alt ni.node {\n+              ast::native_item_fn(decl, tps) {\n+                check_native_fn(ccx, decl);\n+              }\n+              _ { }\n+            }\n+        }\n+      }\n       ast::item_impl(tps, _, ty, ms) {\n         ccx.self_infos += [self_impl(ast_ty_to_ty(ccx.tcx, m_check, ty))];\n         for m in ms { check_method(ccx, m); }"}, {"sha": "82836a37ea2154663bf5bda2f756509a50efb2e8", "filename": "src/test/compile-fail/warn-native-int-types.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f03eb96f39dd616d8213cadf337b9d0b0984a687/src%2Ftest%2Fcompile-fail%2Fwarn-native-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03eb96f39dd616d8213cadf337b9d0b0984a687/src%2Ftest%2Fcompile-fail%2Fwarn-native-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-native-int-types.rs?ref=f03eb96f39dd616d8213cadf337b9d0b0984a687", "patch": "@@ -0,0 +1,9 @@\n+//error-pattern:ctypes::c_int or ctypes::long should be used\n+native mod xx {\n+  fn strlen(str: *u8) -> uint;\n+  fn foo(x: int, y: uint);\n+}\n+\n+fn main() {\n+  \"let compile fail to verify warning message\" = 999;\n+}"}]}