{"sha": "d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "node_id": "C_kwDOAAsO6NoAKGQ2ZGM5MTI0YjdiODE0YzJjNWMzNWFhNjI5NWVhNWU1NDA3MWRhYWM", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-13T02:34:43Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-13T02:34:43Z"}, "message": "Extract shared logic into a new function", "tree": {"sha": "9601b439790697cdfc2237d1acad5d78943c4e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9601b439790697cdfc2237d1acad5d78943c4e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "html_url": "https://github.com/rust-lang/rust/commit/d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6dc9124b7b814c2c5c35aa6295ea5e54071daac/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2830cb204fd7a8204cb5b00b6f77f3693da6950", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2830cb204fd7a8204cb5b00b6f77f3693da6950", "html_url": "https://github.com/rust-lang/rust/commit/d2830cb204fd7a8204cb5b00b6f77f3693da6950"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "3bb1f51650abd5c846acad632a7e649099f4559f", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d6dc9124b7b814c2c5c35aa6295ea5e54071daac/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dc9124b7b814c2c5c35aa6295ea5e54071daac/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "patch": "@@ -132,6 +132,18 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n     fn unsafe_op_in_unsafe_fn_allowed(&self) -> bool {\n         self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, self.hir_context).0 == Level::Allow\n     }\n+\n+    /// Handle closures/generators/inline-consts, which is unsafecked with their parent body.\n+    fn visit_inner_body(&mut self, def: ty::WithOptConstParam<LocalDefId>) {\n+        if let Ok((inner_thir, expr)) = self.tcx.thir_body(def) {\n+            let inner_thir = &inner_thir.borrow();\n+            let hir_context = self.tcx.hir().local_def_id_to_hir_id(def.did);\n+            let mut inner_visitor = UnsafetyVisitor { thir: inner_thir, hir_context, ..*self };\n+            inner_visitor.visit_expr(&inner_thir[expr]);\n+            // Unsafe blocks can be used in the inner body, make sure to take it into account\n+            self.safety_context = inner_visitor.safety_context;\n+        }\n+    }\n }\n \n // Searches for accesses to layout constrained fields.\n@@ -408,29 +420,11 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 } else {\n                     ty::WithOptConstParam::unknown(closure_id)\n                 };\n-                if let Ok((closure_thir, expr)) = self.tcx.thir_body(closure_def) {\n-                    let closure_thir = &closure_thir.borrow();\n-                    let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n-                    let mut closure_visitor =\n-                        UnsafetyVisitor { thir: closure_thir, hir_context, ..*self };\n-                    closure_visitor.visit_expr(&closure_thir[expr]);\n-                    // Unsafe blocks can be used in closures, make sure to take it into account\n-                    self.safety_context = closure_visitor.safety_context;\n-                }\n+                self.visit_inner_body(closure_def);\n             }\n             ExprKind::ConstBlock { did, substs: _ } => {\n                 let def_id = did.expect_local();\n-                if let Ok((inner_thir, expr)) =\n-                    self.tcx.thir_body(ty::WithOptConstParam::unknown(def_id))\n-                {\n-                    let inner_thir = &inner_thir.borrow();\n-                    let hir_context = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    let mut inner_visitor =\n-                        UnsafetyVisitor { thir: inner_thir, hir_context, ..*self };\n-                    inner_visitor.visit_expr(&inner_thir[expr]);\n-                    // Unsafe blocks can be used in inline consts, make sure to take it into account\n-                    self.safety_context = inner_visitor.safety_context;\n-                }\n+                self.visit_inner_body(ty::WithOptConstParam::unknown(def_id));\n             }\n             ExprKind::Field { lhs, .. } => {\n                 let lhs = &self.thir[lhs];"}]}