{"sha": "5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "node_id": "C_kwDOAAsO6NoAKDVjYjNlN2E0MWI4OWI1NjEyY2VmZTljNjg4ZjBmZmRmZjE4ZDRkZjQ", "commit": {"author": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-03T18:44:21Z"}, "committer": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-03T19:59:17Z"}, "message": "Added fixup for match statements w/ missing parts\n\nPasses tests", "tree": {"sha": "5850f0fc2d81e5d00bf47a6c25f026232a447e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5850f0fc2d81e5d00bf47a6c25f026232a447e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "html_url": "https://github.com/rust-lang/rust/commit/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4/comments", "author": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4904b2bdf8797f14fff3b585d18207161126acce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4904b2bdf8797f14fff3b585d18207161126acce", "html_url": "https://github.com/rust-lang/rust/commit/4904b2bdf8797f14fff3b585d18207161126acce"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "c875b23b2dcd35de19e744af82cb7d53b7ccbd03", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 110, "deletions": 1, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "patch": "@@ -67,7 +67,6 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n             preorder.skip_subtree();\n             continue;\n         }\n-\n         // In some other situations, we can fix things by just appending some tokens.\n         let end_range = TextRange::empty(node.text_range().end());\n         match_ast! {\n@@ -195,6 +194,69 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                 },\n                 // FIXME: foo::\n                 // FIXME: for, match etc.\n+                ast::MatchExpr(it) => {\n+                    if it.expr().is_none() {\n+                        let match_token = match it.match_token() {\n+                            Some(t) => t,\n+                            None => continue\n+                        };\n+                        append.insert(match_token.into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::IDENT,\n+                                text: \"__ra_fixup\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID\n+                            },\n+                        ]);\n+                    }\n+                    if it.match_arm_list().is_none() {\n+                        // No match arms\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::UNDERSCORE,\n+                                text: \"_\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::EQ,\n+                                text: \"=\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_ANGLE,\n+                                text: \">\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n                 _ => (),\n             }\n         }\n@@ -287,6 +349,53 @@ mod tests {\n         assert_eq!(tt.to_string(), original_as_tt.to_string());\n     }\n \n+\n+    #[test]\n+    fn match_no_expr_no_arms() {\n+        check(\n+            r#\"\n+fn foo() {\n+    match\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {match __ra_fixup {_ => {}}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn match_expr_no_arms() {\n+        check(\n+            r#\"\n+fn foo() {\n+    match x {\n+\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {match x {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn match_no_expr() {\n+        check(\n+            r#\"\n+fn foo() {\n+    match {\n+        _ => {}\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {match __ra_fixup {_ => {}}}\n+\"#]],\n+        )\n+    }\n+\n     #[test]\n     fn incomplete_field_expr_1() {\n         check("}]}