{"sha": "9f9e50540581881a3c3a7304eaa2577afda59048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOWU1MDU0MDU4MTg4MWEzYzNhNzMwNGVhYTI1NzdhZmRhNTkwNDg=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T02:36:45Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T19:37:53Z"}, "message": "Tweak new terminfo logical operator support", "tree": {"sha": "8ed7dd1111d3d4af6c78d277464cc82c48498615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed7dd1111d3d4af6c78d277464cc82c48498615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9e50540581881a3c3a7304eaa2577afda59048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e50540581881a3c3a7304eaa2577afda59048", "html_url": "https://github.com/rust-lang/rust/commit/9f9e50540581881a3c3a7304eaa2577afda59048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e50540581881a3c3a7304eaa2577afda59048/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821a962febc3261e97e31174dcb8cf142678bb4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/821a962febc3261e97e31174dcb8cf142678bb4b", "html_url": "https://github.com/rust-lang/rust/commit/821a962febc3261e97e31174dcb8cf142678bb4b"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "4c6aea9ea43108ee54bb3cd520689d9015aabf4e", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f9e50540581881a3c3a7304eaa2577afda59048/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9e50540581881a3c3a7304eaa2577afda59048/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=9f9e50540581881a3c3a7304eaa2577afda59048", "patch": "@@ -68,7 +68,6 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n \n     while i < cap.len() {\n         cur = cap[i] as char;\n-        debug!(\"current char: %c\", cur);\n         let mut old_state = state;\n         match state {\n             Nothing => {\n@@ -134,43 +133,29 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                         (_, _) => return Err(~\"non-numbers on stack with |\")\n                     },\n                     'A' => match (stack.pop(), stack.pop()) {\n-                        (Number(x), Number(y)) => {\n-                            if x == 1 && y == 1 {\n-                                stack.push(Number(1));\n-                            } else {\n-                                stack.push(Number(0));\n-                            }\n-                        },\n-                        (_, _) => return Err(~\"non-numbers on stack with logical and\")\n+                        (Number(0), Number(_)) => stack.push(Number(0)),\n+                        (Number(_), Number(0)) => stack.push(Number(0)),\n+                        (Number(_), Number(_)) => stack.push(Number(1)),\n+                        _ => return Err(~\"non-numbers on stack with logical and\")\n                     },\n                     'O' => match (stack.pop(), stack.pop()) {\n-                        (Number(x), Number(y)) => {\n-                            if x == 1 && y == 1 {\n-                                stack.push(Number(1));\n-                            } else {\n-                                stack.push(Number(0));\n-                            }\n-                        },\n-                        (_, _) => return Err(~\"non-numbers on stack with logical or\")\n+                        (Number(0), Number(0)) => stack.push(Number(0)),\n+                        (Number(_), Number(_)) => stack.push(Number(1)),\n+                        _ => return Err(~\"non-numbers on stack with logical or\")\n                     },\n                     '!' => match stack.pop() {\n-                        Number(x) => {\n-                            if x == 1 {\n-                                stack.push(Number(0))\n-                            } else {\n-                                stack.push(Number(1))\n-                            }\n-                        },\n+                        Number(0) => stack.push(Number(1)),\n+                        Number(_) => stack.push(Number(0)),\n                         _ => return Err(~\"non-number on stack with logical not\")\n                     },\n                     '~' => match stack.pop() {\n                         Number(x) => stack.push(Number(!x)),\n                         _         => return Err(~\"non-number on stack with %~\")\n                     },\n                     'i' => match (copy params[0], copy params[1]) {\n-                        (Number(x), Number(y)) => {\n-                            params[0] = Number(x + 1);\n-                            params[1] = Number(y + 1);\n+                        (Number(ref mut x), Number(ref mut y)) => {\n+                            *x += 1;\n+                            *y += 1;\n                         },\n                         (_, _) => return Err(~\"first two params not numbers with %i\")\n                     },"}]}