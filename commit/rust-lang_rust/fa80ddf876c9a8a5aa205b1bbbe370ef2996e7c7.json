{"sha": "fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODBkZGY4NzZjOWE4YTVhYTIwNWIxYmJiZTM3MGVmMjk5NmU3Yzc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-04T05:57:55Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-05T03:49:16Z"}, "message": "Reorder impl items based on its kind\n\nThe ordering is defined as follows:\n\ntype < cosnt < macro < method\n\nItems that are same kind will not be reordered: that is, the item\nthat an user has put first comes first.", "tree": {"sha": "a7aa932778dc7ea9bda359181eccd66135e54848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7aa932778dc7ea9bda359181eccd66135e54848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "html_url": "https://github.com/rust-lang/rust/commit/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f5a05a6a7e786692dcc6862cb396c1a8803b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f5a05a6a7e786692dcc6862cb396c1a8803b98", "html_url": "https://github.com/rust-lang/rust/commit/94f5a05a6a7e786692dcc6862cb396c1a8803b98"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "940cd245523c7d1ebbb06c0fb6cc94a1321da56c", "filename": "src/items.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fa80ddf876c9a8a5aa205b1bbbe370ef2996e7c7", "patch": "@@ -11,7 +11,7 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use std::borrow::Cow;\n-use std::cmp::min;\n+use std::cmp::{min, Ordering};\n \n use config::lists::*;\n use regex::Regex;\n@@ -660,12 +660,55 @@ pub fn format_impl(\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_context(context);\n-            visitor.block_indent = offset.block_only().block_indent(context.config);\n+            let item_indent = offset.block_only().block_indent(context.config);\n+            visitor.block_indent = item_indent;\n             visitor.last_pos = item.span.lo() + BytePos(open_pos as u32);\n \n             visitor.visit_attrs(&item.attrs, ast::AttrStyle::Inner);\n-            for item in items {\n-                visitor.visit_impl_item(item);\n+            if context.config.reorder_impl_items() {\n+                // Create visitor for each items, then reorder them.\n+                let mut buffer = vec![];\n+                for item in items {\n+                    visitor.visit_impl_item(item);\n+                    buffer.push((visitor.buffer.clone(), item.clone()));\n+                    visitor.buffer.clear();\n+                }\n+                // type -> const -> macro -> method\n+                use ast::ImplItemKind::*;\n+                fn need_empty_line(a: &ast::ImplItemKind, b: &ast::ImplItemKind) -> bool {\n+                    match (a, b) {\n+                        (Type(..), Type(..)) | (Const(..), Const(..)) => false,\n+                        _ => true,\n+                    }\n+                }\n+\n+                buffer.sort_by(|(_, a), (_, b)| match (&a.node, &b.node) {\n+                    (Type(..), _) => Ordering::Less,\n+                    (_, Type(..)) => Ordering::Greater,\n+                    (Const(..), _) => Ordering::Less,\n+                    (_, Const(..)) => Ordering::Greater,\n+                    (Macro(..), _) => Ordering::Less,\n+                    (_, Macro(..)) => Ordering::Greater,\n+                    _ => Ordering::Less,\n+                });\n+                let mut prev_kind = None;\n+                for (buf, item) in buffer {\n+                    // Make sure that there are at least a single empty line between\n+                    // different impl items.\n+                    if prev_kind\n+                        .as_ref()\n+                        .map_or(false, |prev_kind| need_empty_line(prev_kind, &item.node))\n+                    {\n+                        visitor.push_str(\"\\n\");\n+                    }\n+                    visitor.push_str(&item_indent.to_string_with_newline(context.config));\n+                    visitor.push_str(buf.trim());\n+                    prev_kind = Some(item.node.clone());\n+                }\n+            } else {\n+                for item in items {\n+                    visitor.visit_impl_item(item);\n+                }\n             }\n \n             visitor.format_missing(item.span.hi() - BytePos(1));"}]}