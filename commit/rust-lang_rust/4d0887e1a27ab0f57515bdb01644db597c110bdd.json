{"sha": "4d0887e1a27ab0f57515bdb01644db597c110bdd", "node_id": "C_kwDOAAsO6NoAKDRkMDg4N2UxYTI3YWIwZjU3NTE1YmRiMDE2NDRkYjU5N2MxMTBiZGQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-02T17:42:45Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-02T17:42:55Z"}, "message": "correctly recurse when expanding anon consts", "tree": {"sha": "36c9834a3bd07d35d264ef847acbbdb565a06d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c9834a3bd07d35d264ef847acbbdb565a06d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d0887e1a27ab0f57515bdb01644db597c110bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0887e1a27ab0f57515bdb01644db597c110bdd", "html_url": "https://github.com/rust-lang/rust/commit/4d0887e1a27ab0f57515bdb01644db597c110bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d0887e1a27ab0f57515bdb01644db597c110bdd/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d795a6e6e19d56b235d1dbd4f5941404cf5918c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d795a6e6e19d56b235d1dbd4f5941404cf5918c", "html_url": "https://github.com/rust-lang/rust/commit/9d795a6e6e19d56b235d1dbd4f5941404cf5918c"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "bfb740ab3560b7a9acd76349ab41abecab2394b6", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d0887e1a27ab0f57515bdb01644db597c110bdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0887e1a27ab0f57515bdb01644db597c110bdd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=4d0887e1a27ab0f57515bdb01644db597c110bdd", "patch": "@@ -63,7 +63,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);\n-                            bac.subst(self.tcx, substs)\n+                            let bac = bac.subst(self.tcx, substs);\n+                            return bac.fold_with(self);\n                         }\n                         Ok(None) => c,\n                     },"}, {"sha": "18a99398622cacbe5b57b46a9cb84d76a7c3a097", "filename": "tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d0887e1a27ab0f57515bdb01644db597c110bdd/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0887e1a27ab0f57515bdb01644db597c110bdd/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs?ref=4d0887e1a27ab0f57515bdb01644db597c110bdd", "patch": "@@ -2,28 +2,30 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_parens, unused_braces)]\n \n-fn zero_init<const N: usize>() -> Substs1<{ (N) }>\n+fn zero_init<const N: usize>() -> Substs1<{{ N }}>\n where\n-    [u8; { (N) }]: ,\n+    [u8; {{ N }}]: ,\n {\n-    Substs1([0; { (N) }])\n+    Substs1([0; {{ N }}])\n }\n \n-struct Substs1<const N: usize>([u8; { (N) }])\n+struct Substs1<const N: usize>([u8; {{ N }}])\n where\n-    [(); { (N) }]: ;\n+    [(); {{ N }}]: ;\n \n-fn substs2<const M: usize>() -> Substs1<{ (M) }> {\n-    zero_init::<{ (M) }>()\n+fn substs2<const M: usize>() -> Substs1<{{ M }}> {\n+    zero_init::<{{ M }}>()\n }\n \n-fn substs3<const L: usize>() -> Substs1<{ (L) }> {\n-    substs2::<{ (L) }>()\n+fn substs3<const L: usize>() -> Substs1<{{ L }}> {\n+    substs2::<{{ L }}>()\n }\n \n fn main() {\n     assert_eq!(substs3::<2>().0, [0; 2]);\n }\n \n-// Test that the implicit ``{ (L) }`` bound on ``substs3`` satisfies the\n-// ``{ (N) }`` bound on ``Substs1``\n+// Test that the implicit ``{{ L }}`` bound on ``substs3`` satisfies the\n+// ``{{ N }}`` bound on ``Substs1``\n+// FIXME(generic_const_exprs): come up with a less brittle test for this using assoc consts\n+// once normalization is implemented for them."}]}