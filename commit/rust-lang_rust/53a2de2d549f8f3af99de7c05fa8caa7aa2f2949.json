{"sha": "53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYTJkZTJkNTQ5ZjhmM2FmOTlkZTdjMDVmYThjYWE3YWEyZjI5NDk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-14T14:10:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T14:10:08Z"}, "message": "Rollup merge of #56695 - varkor:let-exhaustive-range, r=estebank\n\nFix irrefutable matches on integer ranges\n\nFixes https://github.com/rust-lang/rust/issues/56659.", "tree": {"sha": "bf765d0617f328f14106f943ca0c90125dc1fd3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf765d0617f328f14106f943ca0c90125dc1fd3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcE7nACRBK7hj4Ov3rIwAAdHIIAKvqHrIGPY0ks81iotdW0daq\nGyHPBrxvO4N0vzBjHRkitmfxciUZ4o6eOEMo7t/YZotceQoncYWT5zFFTFABhr1Y\n4KrxeDWAJYaeRITNZtBIV2vj6SYXM/YFzMzxqB6x++haM9I0bnD2UM59DzubEh2N\nOPnUpeCpbhnCP+ySUAkI+ETYv6feC8/7JIOOV2/s9FWLOKGfMSf+dDmFaF0zYtLa\nxeYUKAcMkwvQ0WSyVDpix8dgz72Z/ZrpYDeAlCwHnJRBiMlmztbRJ6au8ZEC0m5D\n1xOVEdEhm1u8orrLAEmmLlYU43uicIc5Vwv5Vf1s8VOmaVUY6LN7qUfRbvFN40g=\n=jdkQ\n-----END PGP SIGNATURE-----\n", "payload": "tree bf765d0617f328f14106f943ca0c90125dc1fd3b\nparent 35fe8c92e9b8e9d3f3b4745a6deab71d79aee4e3\nparent 510a9fffa2a03d7f4f589f3d43115f68506a657e\nauthor kennytm <kennytm@gmail.com> 1544796608 +0800\ncommitter GitHub <noreply@github.com> 1544796608 +0800\n\nRollup merge of #56695 - varkor:let-exhaustive-range, r=estebank\n\nFix irrefutable matches on integer ranges\n\nFixes https://github.com/rust-lang/rust/issues/56659.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "html_url": "https://github.com/rust-lang/rust/commit/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35fe8c92e9b8e9d3f3b4745a6deab71d79aee4e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/35fe8c92e9b8e9d3f3b4745a6deab71d79aee4e3", "html_url": "https://github.com/rust-lang/rust/commit/35fe8c92e9b8e9d3f3b4745a6deab71d79aee4e3"}, {"sha": "510a9fffa2a03d7f4f589f3d43115f68506a657e", "url": "https://api.github.com/repos/rust-lang/rust/commits/510a9fffa2a03d7f4f589f3d43115f68506a657e", "html_url": "https://github.com/rust-lang/rust/commit/510a9fffa2a03d7f4f589f3d43115f68506a657e"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "328b330f762dc14135cb9c4aad51f402f672fbcf", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "patch": "@@ -26,6 +26,10 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::matches::{Ascription, Binding, MatchPair, Candidate};\n use hair::*;\n use rustc::mir::*;\n+use rustc::ty;\n+use rustc::ty::layout::{Integer, IntegerExt, Size};\n+use syntax::attr::{SignedInt, UnsignedInt};\n+use rustc::hir::RangeEnd;\n \n use std::mem;\n \n@@ -62,6 +66,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                  match_pair: MatchPair<'pat, 'tcx>,\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<(), MatchPair<'pat, 'tcx>> {\n+        let tcx = self.hir.tcx();\n         match *match_pair.pattern.kind {\n             PatternKind::AscribeUserType { ref subpattern, ref user_ty, user_ty_span } => {\n                 candidate.ascriptions.push(Ascription {\n@@ -104,7 +109,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatternKind::Range { .. } => {\n+            PatternKind::Range { lo, hi, ty, end } => {\n+                let range = match ty.sty {\n+                    ty::Char => {\n+                        Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32)))\n+                    }\n+                    ty::Int(ity) => {\n+                        // FIXME(49937): refactor these bit manipulations into interpret.\n+                        let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n+                        let min = 1u128 << (size.bits() - 1);\n+                        let max = (1u128 << (size.bits() - 1)) - 1;\n+                        Some((min, max, size))\n+                    }\n+                    ty::Uint(uty) => {\n+                        // FIXME(49937): refactor these bit manipulations into interpret.\n+                        let size = Integer::from_attr(&tcx, UnsignedInt(uty)).size();\n+                        let max = !0u128 >> (128 - size.bits());\n+                        Some((0, max, size))\n+                    }\n+                    _ => None,\n+                };\n+                if let Some((min, max, sz)) = range {\n+                    if let (Some(lo), Some(hi)) = (lo.val.try_to_bits(sz), hi.val.try_to_bits(sz)) {\n+                        if lo <= min && (hi > max || hi == max && end == RangeEnd::Included) {\n+                            // Irrefutable pattern match.\n+                            return Ok(());\n+                        }\n+                    }\n+                }\n                 Err(match_pair)\n             }\n "}, {"sha": "ff065882d96e291407dab5eb429d67dc3e8959d5", "filename": "src/test/ui/pattern/irrefutable-exhaustive-integer-binding.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949/src%2Ftest%2Fui%2Fpattern%2Firrefutable-exhaustive-integer-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949/src%2Ftest%2Fui%2Fpattern%2Firrefutable-exhaustive-integer-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Firrefutable-exhaustive-integer-binding.rs?ref=53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+fn main() {\n+    let -2147483648..=2147483647 = 1;\n+    let 0..=255 = 0u8;\n+    let -128..=127 = 0i8;\n+    let '\\u{0000}'..='\\u{10FFFF}' = 'v';\n+}"}]}