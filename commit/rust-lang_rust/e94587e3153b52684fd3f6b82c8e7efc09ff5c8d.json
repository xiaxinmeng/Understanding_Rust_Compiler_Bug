{"sha": "e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDU4N2UzMTUzYjUyNjg0ZmQzZjZiODJjOGU3ZWZjMDlmZjVjOGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T18:41:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T18:52:06Z"}, "message": "fix assists", "tree": {"sha": "6d268b721027a5350928a6c5a0ec227b5fde8ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d268b721027a5350928a6c5a0ec227b5fde8ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "html_url": "https://github.com/rust-lang/rust/commit/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3f291195b580580be7ce5622f54ebca75fb9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3f291195b580580be7ce5622f54ebca75fb9f0", "html_url": "https://github.com/rust-lang/rust/commit/5e3f291195b580580be7ce5622f54ebca75fb9f0"}], "stats": {"total": 153, "additions": 92, "deletions": 61}, "files": [{"sha": "0484786625dcd754bcf1290936fdc33fb393cb15", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "patch": "@@ -274,7 +274,7 @@ impl AstBuilder<ast::Block> {\n \n impl AstBuilder<ast::Expr> {\n     fn from_text(text: &str) -> ast::Expr {\n-        ast_node_from_file_text(&format!(\"fn f() {{ {}; }}\", text))\n+        ast_node_from_file_text(&format!(\"const C: () = {};\", text))\n     }\n \n     pub fn unit() -> ast::Expr {"}, {"sha": "470ffe120c623756555d163850c50f19ad8628a1", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "patch": "@@ -3,7 +3,8 @@ use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n-        BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR, WHITESPACE,\n+        BLOCK_EXPR, BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n+        WHITESPACE,\n     },\n     SyntaxNode, TextUnit,\n };\n@@ -80,10 +81,12 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n /// In general that's true for any expression, but in some cases that would produce invalid code.\n fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n     match node.kind() {\n-        PATH_EXPR => None,\n+        PATH_EXPR | LOOP_EXPR => None,\n         BREAK_EXPR => ast::BreakExpr::cast(node).and_then(|e| e.expr()),\n         RETURN_EXPR => ast::ReturnExpr::cast(node).and_then(|e| e.expr()),\n-        LOOP_EXPR => ast::ReturnExpr::cast(node).and_then(|e| e.expr()),\n+        BLOCK_EXPR => {\n+            ast::BlockExpr::cast(node).filter(|it| it.is_standalone()).map(ast::Expr::from)\n+        }\n         _ => ast::Expr::cast(node),\n     }\n }"}, {"sha": "9147597091d3f5856f420440fb21bd1d75489979", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 49, "deletions": 42, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "patch": "@@ -116,9 +116,10 @@ SOURCE_FILE@[0; 11)\n       L_PAREN@[6; 7) \"(\"\r\n       R_PAREN@[7; 8) \")\"\r\n     WHITESPACE@[8; 9) \" \"\r\n-    BLOCK@[9; 11)\r\n-      L_CURLY@[9; 10) \"{\"\r\n-      R_CURLY@[10; 11) \"}\"\r\n+    BLOCK_EXPR@[9; 11)\r\n+      BLOCK@[9; 11)\r\n+        L_CURLY@[9; 10) \"{\"\r\n+        R_CURLY@[10; 11) \"}\"\r\n \"#\r\n             .trim()\r\n         );\r\n@@ -148,26 +149,27 @@ SOURCE_FILE@[0; 60)\n       L_PAREN@[7; 8) \"(\"\r\n       R_PAREN@[8; 9) \")\"\r\n     WHITESPACE@[9; 10) \" \"\r\n-    BLOCK@[10; 60)\r\n-      L_CURLY@[10; 11) \"{\"\r\n-      WHITESPACE@[11; 16) \"\\n    \"\r\n-      EXPR_STMT@[16; 58)\r\n-        MACRO_CALL@[16; 57)\r\n-          PATH@[16; 22)\r\n-            PATH_SEGMENT@[16; 22)\r\n-              NAME_REF@[16; 22)\r\n-                IDENT@[16; 22) \"assert\"\r\n-          EXCL@[22; 23) \"!\"\r\n-          TOKEN_TREE@[23; 57)\r\n-            L_PAREN@[23; 24) \"(\"\r\n-            STRING@[24; 52) \"\\\"\\n    fn foo() {\\n     ...\"\r\n-            COMMA@[52; 53) \",\"\r\n-            WHITESPACE@[53; 54) \" \"\r\n-            STRING@[54; 56) \"\\\"\\\"\"\r\n-            R_PAREN@[56; 57) \")\"\r\n-        SEMI@[57; 58) \";\"\r\n-      WHITESPACE@[58; 59) \"\\n\"\r\n-      R_CURLY@[59; 60) \"}\"\r\n+    BLOCK_EXPR@[10; 60)\r\n+      BLOCK@[10; 60)\r\n+        L_CURLY@[10; 11) \"{\"\r\n+        WHITESPACE@[11; 16) \"\\n    \"\r\n+        EXPR_STMT@[16; 58)\r\n+          MACRO_CALL@[16; 57)\r\n+            PATH@[16; 22)\r\n+              PATH_SEGMENT@[16; 22)\r\n+                NAME_REF@[16; 22)\r\n+                  IDENT@[16; 22) \"assert\"\r\n+            EXCL@[22; 23) \"!\"\r\n+            TOKEN_TREE@[23; 57)\r\n+              L_PAREN@[23; 24) \"(\"\r\n+              STRING@[24; 52) \"\\\"\\n    fn foo() {\\n     ...\"\r\n+              COMMA@[52; 53) \",\"\r\n+              WHITESPACE@[53; 54) \" \"\r\n+              STRING@[54; 56) \"\\\"\\\"\"\r\n+              R_PAREN@[56; 57) \")\"\r\n+          SEMI@[57; 58) \";\"\r\n+        WHITESPACE@[58; 59) \"\\n\"\r\n+        R_CURLY@[59; 60) \"}\"\r\n \"#\r\n             .trim()\r\n         );\r\n@@ -190,9 +192,10 @@ FN_DEF@[0; 11)\n     L_PAREN@[6; 7) \"(\"\r\n     R_PAREN@[7; 8) \")\"\r\n   WHITESPACE@[8; 9) \" \"\r\n-  BLOCK@[9; 11)\r\n-    L_CURLY@[9; 10) \"{\"\r\n-    R_CURLY@[10; 11) \"}\"\r\n+  BLOCK_EXPR@[9; 11)\r\n+    BLOCK@[9; 11)\r\n+      L_CURLY@[9; 10) \"{\"\r\n+      R_CURLY@[10; 11) \"}\"\r\n \"#\r\n             .trim()\r\n         );\r\n@@ -258,10 +261,11 @@ SOURCE_FILE@[0; 12)\n       L_PAREN@[6; 7) \"(\"\r\n       R_PAREN@[7; 8) \")\"\r\n     WHITESPACE@[8; 9) \" \"\r\n-    BLOCK@[9; 12)\r\n-      L_CURLY@[9; 10) \"{\"\r\n-      WHITESPACE@[10; 11) \"\\n\"\r\n-      R_CURLY@[11; 12) \"}\"\r\n+    BLOCK_EXPR@[9; 12)\r\n+      BLOCK@[9; 12)\r\n+        L_CURLY@[9; 10) \"{\"\r\n+        WHITESPACE@[10; 11) \"\\n\"\r\n+        R_CURLY@[11; 12) \"}\"\r\n \"#\r\n             .trim()\r\n         );\r\n@@ -292,10 +296,11 @@ SOURCE_FILE@[0; 12)\n       L_PAREN@[6; 7) \"(\"\r\n       R_PAREN@[7; 8) \")\"\r\n     WHITESPACE@[8; 9) \" \"\r\n-    BLOCK@[9; 12)\r\n-      L_CURLY@[9; 10) \"{\"\r\n-      WHITESPACE@[10; 11) \"\\n\"\r\n-      R_CURLY@[11; 12) \"}\"\r\n+    BLOCK_EXPR@[9; 12)\r\n+      BLOCK@[9; 12)\r\n+        L_CURLY@[9; 10) \"{\"\r\n+        WHITESPACE@[10; 11) \"\\n\"\r\n+        R_CURLY@[11; 12) \"}\"\r\n \"#\r\n             .trim()\r\n         );\r\n@@ -325,10 +330,11 @@ SOURCE_FILE@[0; 25)\n       L_PAREN@[6; 7) \"(\"\r\n       R_PAREN@[7; 8) \")\"\r\n     WHITESPACE@[8; 9) \" \"\r\n-    BLOCK@[9; 12)\r\n-      L_CURLY@[9; 10) \"{\"\r\n-      WHITESPACE@[10; 11) \"\\n\"\r\n-      R_CURLY@[11; 12) \"}\"\r\n+    BLOCK_EXPR@[9; 12)\r\n+      BLOCK@[9; 12)\r\n+        L_CURLY@[9; 10) \"{\"\r\n+        WHITESPACE@[10; 11) \"\\n\"\r\n+        R_CURLY@[11; 12) \"}\"\r\n   WHITESPACE@[12; 13) \"\\n\"\r\n   FN_DEF@[13; 25)\r\n     FN_KW@[13; 15) \"fn\"\r\n@@ -339,10 +345,11 @@ SOURCE_FILE@[0; 25)\n       L_PAREN@[19; 20) \"(\"\r\n       R_PAREN@[20; 21) \")\"\r\n     WHITESPACE@[21; 22) \" \"\r\n-    BLOCK@[22; 25)\r\n-      L_CURLY@[22; 23) \"{\"\r\n-      WHITESPACE@[23; 24) \"\\n\"\r\n-      R_CURLY@[24; 25) \"}\"\r\n+    BLOCK_EXPR@[22; 25)\r\n+      BLOCK@[22; 25)\r\n+        L_CURLY@[22; 23) \"{\"\r\n+        WHITESPACE@[23; 24) \"\\n\"\r\n+        R_CURLY@[24; 25) \"}\"\r\n \"#\r\n             .trim()\r\n         );\r"}, {"sha": "034ea639b3f7316c7f402fe477509517af2f7e60", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "patch": "@@ -678,21 +678,22 @@ fn test_expr_order() {\n     PARAM_LIST@[5; 7)\n       L_PAREN@[5; 6) \"(\"\n       R_PAREN@[6; 7) \")\"\n-    BLOCK@[7; 15)\n-      L_CURLY@[7; 8) \"{\"\n-      EXPR_STMT@[8; 14)\n-        BIN_EXPR@[8; 13)\n-          BIN_EXPR@[8; 11)\n-            LITERAL@[8; 9)\n-              INT_NUMBER@[8; 9) \"1\"\n-            PLUS@[9; 10) \"+\"\n-            LITERAL@[10; 11)\n-              INT_NUMBER@[10; 11) \"1\"\n-          STAR@[11; 12) \"*\"\n-          LITERAL@[12; 13)\n-            INT_NUMBER@[12; 13) \"2\"\n-        SEMI@[13; 14) \";\"\n-      R_CURLY@[14; 15) \"}\"\"#,\n+    BLOCK_EXPR@[7; 15)\n+      BLOCK@[7; 15)\n+        L_CURLY@[7; 8) \"{\"\n+        EXPR_STMT@[8; 14)\n+          BIN_EXPR@[8; 13)\n+            BIN_EXPR@[8; 11)\n+              LITERAL@[8; 9)\n+                INT_NUMBER@[8; 9) \"1\"\n+              PLUS@[9; 10) \"+\"\n+              LITERAL@[10; 11)\n+                INT_NUMBER@[10; 11) \"1\"\n+            STAR@[11; 12) \"*\"\n+            LITERAL@[12; 13)\n+              INT_NUMBER@[12; 13) \"2\"\n+          SEMI@[13; 14) \";\"\n+        R_CURLY@[14; 15) \"}\"\"#,\n     );\n }\n "}, {"sha": "25dbd0bed6deeab2f1b60f172051f70d3d863f43", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94587e3153b52684fd3f6b82c8e7efc09ff5c8d/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=e94587e3153b52684fd3f6b82c8e7efc09ff5c8d", "patch": "@@ -289,6 +289,26 @@ impl ast::Literal {\n     }\n }\n \n+impl ast::BlockExpr {\n+    /// false if the block is an intrinsic part of the syntax and can't be\n+    /// replaced with arbitrary expression.\n+    ///\n+    /// ```not_rust\n+    /// fn foo() { not_stand_alone }\n+    /// const FOO: () = { stand_alone };\n+    /// ```\n+    pub fn is_standalone(&self) -> bool {\n+        let kind = match self.syntax().parent() {\n+            None => return true,\n+            Some(it) => it.kind(),\n+        };\n+        match kind {\n+            FN_DEF | MATCH_ARM | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n+            _ => true,\n+        }\n+    }\n+}\n+\n #[test]\n fn test_literal_with_attr() {\n     let parse = ast::SourceFile::parse(r#\"const _: &str = { #[attr] \"Hello\" };\"#);"}]}