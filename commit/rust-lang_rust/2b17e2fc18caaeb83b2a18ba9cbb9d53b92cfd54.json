{"sha": "2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTdlMmZjMThjYWFlYjgzYjJhMThiYTljYmI5ZDUzYjkyY2ZkNTQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T17:44:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:11Z"}, "message": "docstring/comment fixes", "tree": {"sha": "4b38c4392ca9f904af9962747540dd15fd18ff13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b38c4392ca9f904af9962747540dd15fd18ff13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54", "html_url": "https://github.com/rust-lang/rust/commit/2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df183e7abd3c4d24b6b989474fd5d855bbf9c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df183e7abd3c4d24b6b989474fd5d855bbf9c11", "html_url": "https://github.com/rust-lang/rust/commit/3df183e7abd3c4d24b6b989474fd5d855bbf9c11"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "81e5aa1792802fafd42375b707ec20757f9e7f1b", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=2b17e2fc18caaeb83b2a18ba9cbb9d53b92cfd54", "patch": "@@ -36,7 +36,7 @@ use core::prelude::*;\n //   * intersection: &\n //   * difference: -\n //   * symmetric difference: ^\n-// These would be convenient since the methods will work like `each`\n+// These would be convenient since the methods work like `each`\n \n pub struct TreeMap<K: Ord, V> {\n     priv root: Option<~TreeNode<K, V>>,\n@@ -163,7 +163,7 @@ pub struct TreeMapIterator<K: Ord, V> {\n impl <K: Ord, V> TreeMapIterator<K, V> {\n     /// Advance the iterator to the next node (in order) and return a\n     /// tuple with a reference to the key and value. If there are no\n-    /// more nodes, return None.\n+    /// more nodes, return `None`.\n     fn next(&mut self) -> Option<(&self/K, &self/V)> {\n         while self.stack.is_not_empty() || self.node.is_some() {\n             match *self.node {"}]}