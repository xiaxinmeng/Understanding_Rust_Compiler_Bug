{"sha": "4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb", "node_id": "C_kwDOAAsO6NoAKDRkM2ZhYWU1Y2QzNGNjM2EzNGE3YzAxZmIyZjIyYzY4ZTA5MmUwZWI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-19T04:19:10Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-19T04:19:44Z"}, "message": "Eliminate left and right cursors in favor of ring buffer", "tree": {"sha": "bbd6a5d4d9aaad49e1247a01ddca5a9233948714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd6a5d4d9aaad49e1247a01ddca5a9233948714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHnkWAACgkQ+boUO5X/\nbYL8Zg//XfaRZoOFbnY7OcZYpgSU2TuNHTCGdPJ8uN/w2ybTVtUz6gBD++nnl4pw\na1CAONjs74dN2tOBgJDCTOQDLNosMhanhLgVda7HYSIsoEYZ4tQeMgldgaQuu/8h\nD8yFTs+U4n3j0bsl7ujBJhXx2YfzcN6RoR0ZPWGd3Qewc1azeM0jJAv6AXq9WTfu\nGYX7puJDSgQruICJkVvhplXx7I6IeqrnpJV6jhSIkc2GAlVNcp5LiNReHrY0+lAc\nlID/H7Ho5hdlppFuKaAo/c5ipC6V9RG7jyeQpIjCb9Pcehd0DxmqRbz/YKieqzAL\nIIdAXSABZVBkU0jXHlQQXbRsrZ5KFfA7UJaFAs6R5gWD2LmewFh5S8vaQW7IYzzR\n9eQbfU+taHCt4F++9yr7MQz/OiSg4m3q6Qv7wJSmjsGLt/ZS+ibzrFGlvZ5PG31j\n+6zav4m9MxWycMrXK3l6d30RCo1YG6qokmAMEXwd9WAnJWtkgU5xC87NISFZ1VXS\n7bonS31soVoabKCc7z9w5C1JLiQ0xw1/2h7JUpWCyf+3HWxbFIsQdyisW4pcHaLY\nXCfT/i99yI+gfiKw8TuScOQlyY4sFz4/LpsOR21p9p/92j1fNJr8g+WCDzOx0Vpx\n4rDDjavgIlTqFgkHV7eZTiOLnF/kt+enjTGCU9mya8KL/ZjYh74=\n=du9d\n-----END PGP SIGNATURE-----", "payload": "tree bbd6a5d4d9aaad49e1247a01ddca5a9233948714\nparent cc66a7ff20d0c8626661fe6f53daab265537425f\nauthor David Tolnay <dtolnay@gmail.com> 1642565950 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642565984 -0800\n\nEliminate left and right cursors in favor of ring buffer\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb", "html_url": "https://github.com/rust-lang/rust/commit/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc66a7ff20d0c8626661fe6f53daab265537425f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc66a7ff20d0c8626661fe6f53daab265537425f", "html_url": "https://github.com/rust-lang/rust/commit/cc66a7ff20d0c8626661fe6f53daab265537425f"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "bdd70148d85a0d483f638aa7184a0a9c1530aaf4", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb", "patch": "@@ -206,10 +206,6 @@ pub struct Printer {\n     margin: isize,\n     /// Number of spaces left on line\n     space: isize,\n-    /// Index of left side of input stream\n-    left: usize,\n-    /// Index of right side of input stream\n-    right: usize,\n     /// Ring-buffer of tokens and calculated sizes\n     buf: RingBuffer<BufEntry>,\n     /// Running size of stream \"...left\"\n@@ -245,8 +241,6 @@ impl Printer {\n             out: String::new(),\n             margin: linewidth as isize,\n             space: linewidth as isize,\n-            left: 0,\n-            right: 0,\n             buf: RingBuffer::new(),\n             left_total: 0,\n             right_total: 0,\n@@ -281,45 +275,38 @@ impl Printer {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.right = self.left;\n             self.buf.clear();\n-        } else {\n-            self.right += 1;\n         }\n-        self.buf.push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n-        self.scan_stack.push_front(self.right);\n+        let right = self.buf.push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n+        self.scan_stack.push_front(right);\n     }\n \n     fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n             self.print_end();\n         } else {\n-            self.right += 1;\n-            self.buf.push(BufEntry { token: Token::End, size: -1 });\n-            self.scan_stack.push_front(self.right);\n+            let right = self.buf.push(BufEntry { token: Token::End, size: -1 });\n+            self.scan_stack.push_front(right);\n         }\n     }\n \n     fn scan_break(&mut self, b: BreakToken) {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.right = self.left;\n             self.buf.clear();\n         } else {\n             self.check_stack(0);\n-            self.right += 1;\n         }\n-        self.buf.push(BufEntry { token: Token::Break(b), size: -self.right_total });\n-        self.scan_stack.push_front(self.right);\n+        let right = self.buf.push(BufEntry { token: Token::Break(b), size: -self.right_total });\n+        self.scan_stack.push_front(right);\n         self.right_total += b.blank_space;\n     }\n \n     fn scan_string(&mut self, s: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n             self.print_string(&s);\n         } else {\n-            self.right += 1;\n             let len = s.len() as isize;\n             self.buf.push(BufEntry { token: Token::String(s), size: len });\n             self.right_total += len;\n@@ -329,22 +316,22 @@ impl Printer {\n \n     fn check_stream(&mut self) {\n         while self.right_total - self.left_total > self.space {\n-            if self.scan_stack.back() == Some(&self.left) {\n+            if *self.scan_stack.back().unwrap() == self.buf.index_of_first() {\n                 self.scan_stack.pop_back().unwrap();\n-                self.buf[self.left].size = SIZE_INFINITY;\n+                self.buf.first_mut().unwrap().size = SIZE_INFINITY;\n             }\n             self.advance_left();\n-            if self.left == self.right {\n+            if self.buf.is_empty() {\n                 break;\n             }\n         }\n     }\n \n     fn advance_left(&mut self) {\n-        let mut left_size = self.buf[self.left].size;\n+        let mut left_size = self.buf.first().unwrap().size;\n \n         while left_size >= 0 {\n-            let left = self.buf[self.left].token.clone();\n+            let left = self.buf.first().unwrap().token.clone();\n \n             let len = match left {\n                 Token::Break(b) => b.blank_space,\n@@ -360,14 +347,12 @@ impl Printer {\n \n             self.left_total += len;\n \n-            if self.left == self.right {\n+            self.buf.advance_left();\n+            if self.buf.is_empty() {\n                 break;\n             }\n \n-            self.buf.advance_left();\n-            self.left += 1;\n-\n-            left_size = self.buf[self.left].size;\n+            left_size = self.buf.first().unwrap().size;\n         }\n     }\n "}, {"sha": "d20142eb591fe65e3b24c731eb7467bf8d80b1ff", "filename": "compiler/rustc_ast_pretty/src/pp/ring.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs?ref=4d3faae5cd34cc3a34a7c01fb2f22c68e092e0eb", "patch": "@@ -22,8 +22,14 @@ impl<T> RingBuffer<T> {\n         RingBuffer { data: VecDeque::new(), offset: 0 }\n     }\n \n-    pub fn push(&mut self, value: T) {\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    pub fn push(&mut self, value: T) -> usize {\n+        let index = self.offset + self.data.len();\n         self.data.push_back(value);\n+        index\n     }\n \n     pub fn advance_left(&mut self) {\n@@ -35,6 +41,18 @@ impl<T> RingBuffer<T> {\n         self.data.clear();\n     }\n \n+    pub fn index_of_first(&self) -> usize {\n+        self.offset\n+    }\n+\n+    pub fn first(&self) -> Option<&T> {\n+        self.data.front()\n+    }\n+\n+    pub fn first_mut(&mut self) -> Option<&mut T> {\n+        self.data.front_mut()\n+    }\n+\n     pub fn last(&self) -> Option<&T> {\n         self.data.back()\n     }"}]}