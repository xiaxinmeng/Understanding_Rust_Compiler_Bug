{"sha": "fe87aec7b61c7cf4c62162f257655507c4fd9422", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlODdhZWM3YjYxYzdjZjRjNjIxNjJmMjU3NjU1NTA3YzRmZDk0MjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T12:57:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T12:57:20Z"}, "message": "Replace roots with include/exclude directories", "tree": {"sha": "206457914800ffbf1559f92855af36e7366eb688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206457914800ffbf1559f92855af36e7366eb688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe87aec7b61c7cf4c62162f257655507c4fd9422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe87aec7b61c7cf4c62162f257655507c4fd9422", "html_url": "https://github.com/rust-lang/rust/commit/fe87aec7b61c7cf4c62162f257655507c4fd9422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe87aec7b61c7cf4c62162f257655507c4fd9422/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a2bc5e3cd86876eef6f3a96bef188f88e85114", "url": "https://api.github.com/repos/rust-lang/rust/commits/39a2bc5e3cd86876eef6f3a96bef188f88e85114", "html_url": "https://github.com/rust-lang/rust/commit/39a2bc5e3cd86876eef6f3a96bef188f88e85114"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "05f2e7b7a36a148c4b6e53b88db39701bdf3fca1", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fe87aec7b61c7cf4c62162f257655507c4fd9422/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe87aec7b61c7cf4c62162f257655507c4fd9422/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=fe87aec7b61c7cf4c62162f257655507c4fd9422", "patch": "@@ -7,7 +7,6 @@ mod sysroot;\n use std::{\n     fs::{self, read_dir, ReadDir},\n     io,\n-    path::Path,\n     process::{Command, Output},\n };\n \n@@ -35,7 +34,7 @@ pub enum ProjectWorkspace {\n /// `PackageRoot` describes a package root folder.\n /// Which may be an external dependency, or a member of\n /// the current workspace.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Eq, PartialEq, Hash)]\n pub struct PackageRoot {\n     /// Is a member of the current workspace\n     pub is_member: bool,\n@@ -178,14 +177,16 @@ impl ProjectWorkspace {\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n             ProjectWorkspace::Json { project } => project\n-                .roots\n+                .crates\n                 .iter()\n-                .map(|r| {\n-                    let path = r.path.clone();\n-                    let include = vec![path];\n-                    PackageRoot { is_member: true, include, exclude: Vec::new() }\n+                .map(|krate| PackageRoot {\n+                    is_member: krate.is_workspace_member,\n+                    include: krate.include.clone(),\n+                    exclude: krate.exclude.clone(),\n                 })\n-                .collect(),\n+                .collect::<FxHashSet<_>>()\n+                .into_iter()\n+                .collect::<Vec<_>>(),\n             ProjectWorkspace::Cargo { cargo, sysroot } => cargo\n                 .packages()\n                 .map(|pkg| {\n@@ -505,18 +506,6 @@ impl ProjectWorkspace {\n         }\n         crate_graph\n     }\n-\n-    pub fn workspace_root_for(&self, path: &Path) -> Option<&AbsPath> {\n-        match self {\n-            ProjectWorkspace::Cargo { cargo, .. } => {\n-                Some(cargo.workspace_root()).filter(|root| path.starts_with(root))\n-            }\n-            ProjectWorkspace::Json { project: ProjectJson { roots, .. }, .. } => roots\n-                .iter()\n-                .find(|root| path.starts_with(&root.path))\n-                .map(|root| root.path.as_path()),\n-        }\n-    }\n }\n \n fn get_rustc_cfg_options(target: Option<&str>) -> CfgOptions {"}, {"sha": "e0052ac6d9598d12a9f22250800e258c36629be7", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fe87aec7b61c7cf4c62162f257655507c4fd9422/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe87aec7b61c7cf4c62162f257655507c4fd9422/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=fe87aec7b61c7cf4c62162f257655507c4fd9422", "patch": "@@ -12,17 +12,9 @@ use stdx::split_delim;\n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n-    pub(crate) roots: Vec<Root>,\n     pub(crate) crates: Vec<Crate>,\n }\n \n-/// A root points to the directory which contains Rust crates. rust-analyzer watches all files in\n-/// all roots. Roots might be nested.\n-#[derive(Clone, Debug, Eq, PartialEq)]\n-pub struct Root {\n-    pub(crate) path: AbsPathBuf,\n-}\n-\n /// A crate points to the root module of a crate and lists the dependencies of the crate. This is\n /// useful in creating the crate graph.\n #[derive(Clone, Debug, Eq, PartialEq)]\n@@ -35,12 +27,13 @@ pub struct Crate {\n     pub(crate) out_dir: Option<AbsPathBuf>,\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n     pub(crate) is_workspace_member: bool,\n+    pub(crate) include: Vec<AbsPathBuf>,\n+    pub(crate) exclude: Vec<AbsPathBuf>,\n }\n \n impl ProjectJson {\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n-            roots: data.roots.into_iter().map(|path| Root { path: base.join(path) }).collect(),\n             crates: data\n                 .crates\n                 .into_iter()\n@@ -50,8 +43,19 @@ impl ProjectJson {\n                             && !crate_data.root_module.starts_with(\"..\")\n                             || crate_data.root_module.starts_with(base)\n                     });\n+                    let root_module = base.join(crate_data.root_module);\n+                    let (include, exclude) = match crate_data.source {\n+                        Some(src) => {\n+                            let absolutize = |dirs: Vec<PathBuf>| {\n+                                dirs.into_iter().map(|it| base.join(it)).collect::<Vec<_>>()\n+                            };\n+                            (absolutize(src.include_dirs), absolutize(src.exclude_dirs))\n+                        }\n+                        None => (vec![root_module.parent().unwrap().to_path_buf()], Vec::new()),\n+                    };\n+\n                     Crate {\n-                        root_module: base.join(crate_data.root_module),\n+                        root_module,\n                         edition: crate_data.edition.into(),\n                         deps: crate_data\n                             .deps\n@@ -79,6 +83,8 @@ impl ProjectJson {\n                             .proc_macro_dylib_path\n                             .map(|it| base.join(it)),\n                         is_workspace_member,\n+                        include,\n+                        exclude,\n                     }\n                 })\n                 .collect::<Vec<_>>(),\n@@ -88,7 +94,6 @@ impl ProjectJson {\n \n #[derive(Deserialize)]\n pub struct ProjectJsonData {\n-    roots: Vec<PathBuf>,\n     crates: Vec<CrateData>,\n }\n \n@@ -103,6 +108,7 @@ struct CrateData {\n     out_dir: Option<PathBuf>,\n     proc_macro_dylib_path: Option<PathBuf>,\n     is_workspace_member: Option<bool>,\n+    source: Option<CrateSource>,\n }\n \n #[derive(Deserialize)]\n@@ -132,6 +138,12 @@ struct DepData {\n     name: CrateName,\n }\n \n+#[derive(Deserialize)]\n+struct CrateSource {\n+    include_dirs: Vec<PathBuf>,\n+    exclude_dirs: Vec<PathBuf>,\n+}\n+\n fn deserialize_crate_name<'de, D>(de: D) -> Result<CrateName, D::Error>\n where\n     D: de::Deserializer<'de>,"}]}