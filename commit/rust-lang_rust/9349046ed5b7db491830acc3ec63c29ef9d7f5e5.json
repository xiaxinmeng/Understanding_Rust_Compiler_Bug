{"sha": "9349046ed5b7db491830acc3ec63c29ef9d7f5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDkwNDZlZDViN2RiNDkxODMwYWNjM2VjNjNjMjllZjlkN2Y1ZTU=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-18T12:00:07Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-18T14:05:15Z"}, "message": "review comment: use newtype to deduplicate logic", "tree": {"sha": "ce311a48de67abd242c67666d833913901eb3df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce311a48de67abd242c67666d833913901eb3df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9349046ed5b7db491830acc3ec63c29ef9d7f5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9349046ed5b7db491830acc3ec63c29ef9d7f5e5", "html_url": "https://github.com/rust-lang/rust/commit/9349046ed5b7db491830acc3ec63c29ef9d7f5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9349046ed5b7db491830acc3ec63c29ef9d7f5e5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97", "html_url": "https://github.com/rust-lang/rust/commit/12a776b41d4ed9bd645cfd7bfb4eb3f95ffabd97"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "a602a58e517125ed32ef43c1e61387f35e812fa0", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 70, "deletions": 32, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9349046ed5b7db491830acc3ec63c29ef9d7f5e5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9349046ed5b7db491830acc3ec63c29ef9d7f5e5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9349046ed5b7db491830acc3ec63c29ef9d7f5e5", "patch": "@@ -2073,47 +2073,85 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         continue;\n                     }\n                 });\n-                let span_unnamed_borrow = |span: Span| {\n-                    let lo = span.lo() + BytePos(1);\n-                    span.with_lo(lo).with_hi(lo)\n-                };\n-                let span_underscore_borrow = |span: Span| {\n-                    let lo = span.lo() + BytePos(1);\n-                    let hi = lo + BytePos(2);\n-                    span.with_lo(lo).with_hi(hi)\n-                };\n-                let unnamed_borrow =\n-                    |snippet: &str| snippet.starts_with('&') && !snippet.starts_with(\"&'\");\n+\n+                struct Lifetime(Span, String);\n+                impl Lifetime {\n+                    fn is_unnamed(&self) -> bool {\n+                        self.1.starts_with('&') && !self.1.starts_with(\"&'\")\n+                    }\n+                    fn is_underscore(&self) -> bool {\n+                        self.1.starts_with(\"&'_ \")\n+                    }\n+                    fn is_named(&self) -> bool {\n+                        self.1.starts_with(\"&'\")\n+                    }\n+                    fn suggestion(&self, sugg: String) -> Option<(Span, String)> {\n+                        Some(\n+                            match (\n+                                self.is_unnamed(),\n+                                self.is_underscore(),\n+                                self.is_named(),\n+                                sugg.starts_with(\"&\"),\n+                            ) {\n+                                (true, _, _, false) => (self.span_unnamed_borrow(), sugg),\n+                                (true, _, _, true) => {\n+                                    (self.span_unnamed_borrow(), sugg[1..].to_string())\n+                                }\n+                                (_, true, _, false) => {\n+                                    (self.span_underscore_borrow(), sugg.trim().to_string())\n+                                }\n+                                (_, true, _, true) => {\n+                                    (self.span_underscore_borrow(), sugg[1..].trim().to_string())\n+                                }\n+                                (_, _, true, false) => {\n+                                    (self.span_named_borrow(), sugg.trim().to_string())\n+                                }\n+                                (_, _, true, true) => {\n+                                    (self.span_named_borrow(), sugg[1..].trim().to_string())\n+                                }\n+                                _ => return None,\n+                            },\n+                        )\n+                    }\n+                    fn span_unnamed_borrow(&self) -> Span {\n+                        let lo = self.0.lo() + BytePos(1);\n+                        self.0.with_lo(lo).with_hi(lo)\n+                    }\n+                    fn span_named_borrow(&self) -> Span {\n+                        let lo = self.0.lo() + BytePos(1);\n+                        self.0.with_lo(lo)\n+                    }\n+                    fn span_underscore_borrow(&self) -> Span {\n+                        let lo = self.0.lo() + BytePos(1);\n+                        let hi = lo + BytePos(2);\n+                        self.0.with_lo(lo).with_hi(hi)\n+                    }\n+                }\n+\n                 for param in params {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n-                        if unnamed_borrow(&snippet) {\n-                            let span = span_unnamed_borrow(param.span);\n-                            introduce_suggestion.push((span, \"'a \".to_string()));\n-                        } else if snippet.starts_with(\"&'_ \") {\n-                            let span = span_underscore_borrow(param.span);\n-                            introduce_suggestion.push((span, \"'a\".to_string()));\n+                        if let Some((span, sugg)) =\n+                            Lifetime(param.span, snippet).suggestion(\"'a \".to_string())\n+                        {\n+                            introduce_suggestion.push((span, sugg));\n                         }\n                     }\n                 }\n                 for (span, sugg) in spans_with_counts.iter().copied().zip(suggs.iter()).filter_map(\n-                    |((span, _), sugg)| match sugg {\n-                        Some(sugg) => Some((span, sugg)),\n+                    |((span, _), sugg)| match &sugg {\n+                        Some(sugg) => Some((span, sugg.to_string())),\n                         _ => None,\n                     },\n                 ) {\n-                    match self.tcx.sess.source_map().span_to_snippet(span) {\n-                        Ok(snippet) if unnamed_borrow(&snippet) && sugg.starts_with(\"&\") => {\n-                            let span = span_unnamed_borrow(span);\n-                            introduce_suggestion.push((span, sugg[1..].to_string()));\n-                        }\n-                        Ok(snippet) if snippet.starts_with(\"&'_ \") && sugg.starts_with(\"&\") => {\n-                            let span = span_underscore_borrow(span);\n-                            introduce_suggestion.push((span, sugg[1..].to_string()));\n-                        }\n-                        _ => {\n-                            introduce_suggestion.push((span, sugg.to_string()));\n-                        }\n-                    }\n+                    let (span, sugg) = self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(span)\n+                        .ok()\n+                        .and_then(|snippet| Lifetime(span, snippet).suggestion(sugg.clone()))\n+                        .unwrap_or((span, sugg));\n+                    introduce_suggestion.push((span, sugg.to_string()));\n                 }\n                 err.multipart_suggestion_with_style(\n                     &msg,"}]}