{"sha": "8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjN2M4ZmIyMTI4ZjFhNTA5MjZmNTA3YmJkYWU4ZjE4YmNjMzVmZjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:23Z"}, "message": "Rollup merge of #48338 - estebank:match-missing-comma, r=petrochenkov\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "20ba502eaa34ab419f36f6639e2c0e3afd3c252f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20ba502eaa34ab419f36f6639e2c0e3afd3c252f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqaOjMACgkQO79NPi73\nn5iOkQ//WeGljcWh1JlHT2csDQxbYMbxySPHcE5s0KEb6RsnOQgopgb97OaF8RPx\nQWKM5SkLn9Y2lEVRQfqegmrQLP3o2JMKBlcfLCZHl79MxbCjbBFNwmFxVNzRYFWD\nelHBT3yIbYslK/Af4QwLtvCVnYy8m6KSjpHMK7hxhe1RD83vQfZN9lMFM2XwMiiZ\nlk/Y6qcGDG8IMk+/wUxXy3bVBd6zq2NLe7nrkjUhNAxyP/pJRn9LqvYTd0nCchlf\nZ/m/PBBO1b+vgV1f/RJC1d+HnPQajKwZbTan29r0GCRsrUN4Aap83afTd1pJA8Qq\niCj68pZ8pRL6qSZutM7aMxEK5NwH0PajYVq2DD8Gp6Lx71fqu5EaiIl8keSihkfb\njZFY83DBjp7QGI0IQ6dHbxDYe7DgFI+s9BgSP4dZFh4NLFGqJjrCHDxkFTD8rERs\nHu+nZ6EoSDK1dZgrJpyaZ1vY4sJG1Emoj0LAgwe8UTqYQVQFfPE5mUMDZ4gXcvEU\nxPtpcXvZp7y/seXKontxz4a55RMjx8TLCBxegyhP4gwnhXqpsEVeg3be+eF7cbK7\nN1MeeZhAS0ohfA0ab5+q9RSHYStWAVsHO0OK19xj2xzsFtTIWhZUSLjUcziMrq4i\nV5qn08yTEMG3ARsvx5JqUft/POWIAYMmnHahPiwj2MqnxdKSTH0=\n=zArf\n-----END PGP SIGNATURE-----", "payload": "tree 20ba502eaa34ab419f36f6639e2c0e3afd3c252f\nparent 8bf026df5b44eab313aa8c4ac2d185af8e9dcd41\nparent 24be75d420bf316cb09c179781d6c1c63636fbc1\nauthor Manish Goregaokar <manishsmail@gmail.com> 1520056883 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1520056883 -0800\n\nRollup merge of #48338 - estebank:match-missing-comma, r=petrochenkov\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "html_url": "https://github.com/rust-lang/rust/commit/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41", "html_url": "https://github.com/rust-lang/rust/commit/8bf026df5b44eab313aa8c4ac2d185af8e9dcd41"}, {"sha": "24be75d420bf316cb09c179781d6c1c63636fbc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/24be75d420bf316cb09c179781d6c1c63636fbc1", "html_url": "https://github.com/rust-lang/rust/commit/24be75d420bf316cb09c179781d6c1c63636fbc1"}], "stats": {"total": 226, "additions": 189, "deletions": 37}, "files": [{"sha": "92584f5b51946151c4ebb36ffc2510b9b1d462a3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 121, "deletions": 31, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -652,9 +652,11 @@ impl<'a> Parser<'a> {\n             } else {\n                 let token_str = Parser::token_to_string(t);\n                 let this_token_str = self.this_token_to_string();\n-                Err(self.fatal(&format!(\"expected `{}`, found `{}`\",\n-                                   token_str,\n-                                   this_token_str)))\n+                let mut err = self.fatal(&format!(\"expected `{}`, found `{}`\",\n+                                                  token_str,\n+                                                  this_token_str));\n+                err.span_label(self.span, format!(\"expected `{}`\", token_str));\n+                Err(err)\n             }\n         } else {\n             self.expect_one_of(unsafe { slice::from_raw_parts(t, 1) }, &[])\n@@ -1172,7 +1174,7 @@ impl<'a> Parser<'a> {\n                                      sep: SeqSep,\n                                      f: F)\n                                      -> PResult<'a, Vec<T>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n+        F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n         self.expect(bra)?;\n         let result = self.parse_seq_to_before_end(ket, sep, f)?;\n@@ -1190,7 +1192,7 @@ impl<'a> Parser<'a> {\n                            sep: SeqSep,\n                            f: F)\n                            -> PResult<'a, Spanned<Vec<T>>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n+        F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n         let lo = self.span;\n         self.expect(bra)?;\n@@ -1485,7 +1487,10 @@ impl<'a> Parser<'a> {\n                 }\n                 _ => {\n                     let token_str = self.this_token_to_string();\n-                    return Err(self.fatal(&format!(\"expected `;` or `{{`, found `{}`\", token_str)));\n+                    let mut err = self.fatal(&format!(\"expected `;` or `{{`, found `{}`\",\n+                                                      token_str));\n+                    err.span_label(self.span, \"expected `;` or `{`\");\n+                    return Err(err);\n                 }\n             };\n             (ident, ast::TraitItemKind::Method(sig, body), generics)\n@@ -2216,7 +2221,12 @@ impl<'a> Parser<'a> {\n                 TokenTree::Delimited(_, delimited) => Ok((delim, delimited.stream().into())),\n                 _ => unreachable!(),\n             },\n-            _ => Err(self.fatal(\"expected open delimiter\")),\n+            _ => {\n+                let msg = \"expected open delimiter\";\n+                let mut err = self.fatal(msg);\n+                err.span_label(self.span, msg);\n+                Err(err)\n+            }\n         }\n     }\n \n@@ -2349,7 +2359,10 @@ impl<'a> Parser<'a> {\n                     if self.eat_keyword(keywords::Loop) {\n                         return self.parse_loop_expr(Some(label), lo, attrs)\n                     }\n-                    return Err(self.fatal(\"expected `while`, `for`, or `loop` after a label\"))\n+                    let msg = \"expected `while`, `for`, or `loop` after a label\";\n+                    let mut err = self.fatal(msg);\n+                    err.span_label(self.span, msg);\n+                    return Err(err);\n                 }\n                 if self.eat_keyword(keywords::Loop) {\n                     let lo = self.prev_span;\n@@ -2408,6 +2421,7 @@ impl<'a> Parser<'a> {\n                     // Catch this syntax error here, instead of in `parse_ident`, so\n                     // that we can explicitly mention that let is not to be used as an expression\n                     let mut db = self.fatal(\"expected expression, found statement (`let`)\");\n+                    db.span_label(self.span, \"expected expression\");\n                     db.note(\"variable declaration using `let` is a statement\");\n                     return Err(db);\n                 } else if self.token.is_path_start() {\n@@ -2443,7 +2457,9 @@ impl<'a> Parser<'a> {\n                             self.cancel(&mut err);\n                             let msg = format!(\"expected expression, found {}\",\n                                               self.this_token_descr());\n-                            return Err(self.fatal(&msg));\n+                            let mut err = self.fatal(&msg);\n+                            err.span_label(self.span, \"expected expression\");\n+                            return Err(err);\n                         }\n                     }\n                 }\n@@ -2733,7 +2749,9 @@ impl<'a> Parser<'a> {\n                              self.look_ahead(1, |t| t.is_ident()) => {\n                 self.bump();\n                 let name = match self.token { token::Ident(ident) => ident, _ => unreachable!() };\n-                self.fatal(&format!(\"unknown macro variable `{}`\", name)).emit();\n+                let mut err = self.fatal(&format!(\"unknown macro variable `{}`\", name));\n+                err.span_label(self.span, \"unknown macro variable\");\n+                err.emit();\n                 return\n             }\n             token::Interpolated(ref nt) => {\n@@ -3212,7 +3230,13 @@ impl<'a> Parser<'a> {\n             err.span_label(sp, \"expected if condition here\");\n             return Err(err)\n         }\n-        let thn = self.parse_block()?;\n+        let not_block = self.token != token::OpenDelim(token::Brace);\n+        let thn = self.parse_block().map_err(|mut err| {\n+            if not_block {\n+                err.span_label(lo, \"this `if` statement has a condition, but no block\");\n+            }\n+            err\n+        })?;\n         let mut els: Option<P<Expr>> = None;\n         let mut hi = thn.span;\n         if self.eat_keyword(keywords::Else) {\n@@ -3404,14 +3428,52 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n+        let arrow_span = self.span;\n         self.expect(&token::FatArrow)?;\n-        let expr = self.parse_expr_res(Restrictions::STMT_EXPR, None)?;\n+        let arm_start_span = self.span;\n+\n+        let expr = self.parse_expr_res(Restrictions::STMT_EXPR, None)\n+            .map_err(|mut err| {\n+                err.span_label(arrow_span, \"while parsing the `match` arm starting here\");\n+                err\n+            })?;\n \n         let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)\n             && self.token != token::CloseDelim(token::Brace);\n \n         if require_comma {\n-            self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)])?;\n+            let cm = self.sess.codemap();\n+            self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)])\n+                .map_err(|mut err| {\n+                    match (cm.span_to_lines(expr.span), cm.span_to_lines(arm_start_span)) {\n+                        (Ok(ref expr_lines), Ok(ref arm_start_lines))\n+                        if arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n+                            && expr_lines.lines.len() == 2\n+                            && self.token == token::FatArrow => {\n+                            // We check wether there's any trailing code in the parse span, if there\n+                            // isn't, we very likely have the following:\n+                            //\n+                            // X |     &Y => \"y\"\n+                            //   |        --    - missing comma\n+                            //   |        |\n+                            //   |        arrow_span\n+                            // X |     &X => \"x\"\n+                            //   |      - ^^ self.span\n+                            //   |      |\n+                            //   |      parsed until here as `\"y\" & X`\n+                            err.span_suggestion_short(\n+                                cm.next_point(arm_start_span),\n+                                \"missing a comma here to end this `match` arm\",\n+                                \",\".to_owned()\n+                            );\n+                        }\n+                        _ => {\n+                            err.span_label(arrow_span,\n+                                           \"while parsing the `match` arm starting here\");\n+                        }\n+                    }\n+                    err\n+                })?;\n         } else {\n             self.eat(&token::Comma);\n         }\n@@ -3609,8 +3671,9 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 if self.token != token::CloseDelim(token::Brace) {\n                     let token_str = self.this_token_to_string();\n-                    return Err(self.fatal(&format!(\"expected `{}`, found `{}`\", \"}\",\n-                                       token_str)))\n+                    let mut err = self.fatal(&format!(\"expected `{}`, found `{}`\", \"}\", token_str));\n+                    err.span_label(self.span, \"expected `}`\");\n+                    return Err(err);\n                 }\n                 etc = true;\n                 break;\n@@ -3721,7 +3784,10 @@ impl<'a> Parser<'a> {\n                 self.expect_and()?;\n                 let mutbl = self.parse_mutability();\n                 if let token::Lifetime(ident) = self.token {\n-                    return Err(self.fatal(&format!(\"unexpected lifetime `{}` in pattern\", ident)));\n+                    let mut err = self.fatal(&format!(\"unexpected lifetime `{}` in pattern\",\n+                                                      ident));\n+                    err.span_label(self.span, \"unexpected lifetime\");\n+                    return Err(err);\n                 }\n                 let subpat = self.parse_pat()?;\n                 pat = PatKind::Ref(subpat, mutbl);\n@@ -3806,7 +3872,10 @@ impl<'a> Parser<'a> {\n                     }\n                     token::OpenDelim(token::Brace) => {\n                         if qself.is_some() {\n-                            return Err(self.fatal(\"unexpected `{` after qualified path\"));\n+                            let msg = \"unexpected `{` after qualified path\";\n+                            let mut err = self.fatal(msg);\n+                            err.span_label(self.span, msg);\n+                            return Err(err);\n                         }\n                         // Parse struct pattern\n                         self.bump();\n@@ -3820,7 +3889,10 @@ impl<'a> Parser<'a> {\n                     }\n                     token::OpenDelim(token::Paren) => {\n                         if qself.is_some() {\n-                            return Err(self.fatal(\"unexpected `(` after qualified path\"));\n+                            let msg = \"unexpected `(` after qualified path\";\n+                            let mut err = self.fatal(msg);\n+                            err.span_label(self.span, msg);\n+                            return Err(err);\n                         }\n                         // Parse tuple struct or enum pattern\n                         let (fields, ddpos, _) = self.parse_parenthesized_pat_list()?;\n@@ -3850,7 +3922,9 @@ impl<'a> Parser<'a> {\n                     Err(mut err) => {\n                         self.cancel(&mut err);\n                         let msg = format!(\"expected pattern, found {}\", self.this_token_descr());\n-                        return Err(self.fatal(&msg));\n+                        let mut err = self.fatal(&msg);\n+                        err.span_label(self.span, \"expected pattern\");\n+                        return Err(err);\n                     }\n                 }\n             }\n@@ -4250,9 +4324,11 @@ impl<'a> Parser<'a> {\n                         \"\"\n                     };\n                     let tok_str = self.this_token_to_string();\n-                    return Err(self.fatal(&format!(\"expected {}`(` or `{{`, found `{}`\",\n-                                       ident_str,\n-                                       tok_str)))\n+                    let mut err = self.fatal(&format!(\"expected {}`(` or `{{`, found `{}`\",\n+                                                      ident_str,\n+                                                      tok_str));\n+                    err.span_label(self.span, format!(\"expected {}`(` or `{{`\", ident_str));\n+                    return Err(err)\n                 },\n             };\n \n@@ -5559,8 +5635,12 @@ impl<'a> Parser<'a> {\n             body\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where`, `{{`, `(`, or `;` after struct \\\n-                                            name, found `{}`\", token_str)))\n+            let mut err = self.fatal(&format!(\n+                \"expected `where`, `{{`, `(`, or `;` after struct name, found `{}`\",\n+                token_str\n+            ));\n+            err.span_label(self.span, \"expected `where`, `{`, `(`, or `;` after struct name\");\n+            return Err(err);\n         };\n \n         Ok((class_name, ItemKind::Struct(vdata, generics), None))\n@@ -5579,8 +5659,10 @@ impl<'a> Parser<'a> {\n             VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where` or `{{` after union \\\n-                                            name, found `{}`\", token_str)))\n+            let mut err = self.fatal(&format!(\n+                \"expected `where` or `{{` after union name, found `{}`\", token_str));\n+            err.span_label(self.span, \"expected `where` or `{` after union name\");\n+            return Err(err);\n         };\n \n         Ok((class_name, ItemKind::Union(vdata, generics), None))\n@@ -5627,9 +5709,10 @@ impl<'a> Parser<'a> {\n             self.eat(&token::CloseDelim(token::Brace));\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where`, or `{{` after struct \\\n-                                name, found `{}`\",\n-                                token_str)));\n+            let mut err = self.fatal(&format!(\n+                    \"expected `where`, or `{{` after struct name, found `{}`\", token_str));\n+            err.span_label(self.span, \"expected `where`, or `{` after struct name\");\n+            return Err(err);\n         }\n \n         Ok(fields)\n@@ -5802,9 +5885,11 @@ impl<'a> Parser<'a> {\n         if !self.eat(term) {\n             let token_str = self.this_token_to_string();\n             let mut err = self.fatal(&format!(\"expected item, found `{}`\", token_str));\n-            let msg = \"consider removing this semicolon\";\n             if token_str == \";\" {\n+                let msg = \"consider removing this semicolon\";\n                 err.span_suggestion_short(self.span, msg, \"\".to_string());\n+            } else {\n+                err.span_label(self.span, \"expected item\");\n             }\n             return Err(err);\n         }\n@@ -6961,7 +7046,12 @@ impl<'a> Parser<'a> {\n                 self.expect_no_suffix(sp, \"string literal\", suf);\n                 Ok((s, style))\n             }\n-            _ =>  Err(self.fatal(\"expected string literal\"))\n+            _ => {\n+                let msg = \"expected string literal\";\n+                let mut err = self.fatal(msg);\n+                err.span_label(self.span, msg);\n+                Err(err)\n+            }\n         }\n     }\n }"}, {"sha": "a9db5214e6a2eabdc1c8a326373890bb6ef662f1", "filename": "src/test/ui/cross-file-errors/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -2,7 +2,7 @@ error: expected expression, found `_`\n   --> $DIR/underscore.rs:18:9\n    |\n LL |         _\n-   |         ^\n+   |         ^ expected expression\n    | \n   ::: $DIR/main.rs:15:5\n    |"}, {"sha": "e576393500fea734315dbed1f9a1a314a4896b3d", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -19,7 +19,7 @@ error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:20:17\n    |\n LL |     fn xxx() { ### } //~ ERROR missing\n-   |                 ^\n+   |                 ^ expected `[`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:20:21"}, {"sha": "ce3de3b302dd3678e52d41dec61fddeb660cb66c", "filename": "src/test/ui/if-without-block.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fif-without-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fif-without-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-without-block.rs?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let n = 1;\n+    if 5 == {\n+    //~^ NOTE this `if` statement has a condition, but no block\n+        println!(\"five\");\n+    }\n+}\n+//~^ ERROR expected `{`, found `}`"}, {"sha": "bc8e7310ce37198eed4f852a03ef3ede5d01c3dc", "filename": "src/test/ui/if-without-block.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fif-without-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fif-without-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-without-block.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -0,0 +1,11 @@\n+error: expected `{`, found `}`\n+  --> $DIR/if-without-block.rs:17:1\n+   |\n+LL |     if 5 == {\n+   |     -- this `if` statement has a condition, but no block\n+...\n+LL | }\n+   | ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4dc6bbe4d656c36aa7973dffc0468013c3f7ac0c", "filename": "src/test/ui/macro-context.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-context.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -38,7 +38,7 @@ error: expected expression, found reserved keyword `typeof`\n   --> $DIR/macro-context.rs:13:17\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n-   |                 ^^^^^^\n+   |                 ^^^^^^ expected expression\n ...\n LL |     m!();\n    |     ----- in this macro invocation"}, {"sha": "a48eff890b331448750f525310b98f1341d2e44e", "filename": "src/test/ui/missing-block-hint.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fmissing-block-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fmissing-block-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-block-hint.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -2,11 +2,15 @@ error: expected `{`, found `=>`\n   --> $DIR/missing-block-hint.rs:13:18\n    |\n LL |         if (foo) => {} //~ ERROR expected `{`, found `=>`\n-   |                  ^^\n+   |         --       ^^\n+   |         |\n+   |         this `if` statement has a condition, but no block\n \n error: expected `{`, found `bar`\n   --> $DIR/missing-block-hint.rs:17:13\n    |\n+LL |         if (foo)\n+   |         -- this `if` statement has a condition, but no block\n LL |             bar; //~ ERROR expected `{`, found `bar`\n    |             ^^^-\n    |             |"}, {"sha": "c6d32c6726ea576e13b881b552f52267adc5b05c", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -26,7 +26,7 @@ error: expected expression, found `;`\n   --> $DIR/token-error-correct.rs:14:13\n    |\n LL |     foo(bar(;\n-   |             ^\n+   |             ^ expected expression\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6f86cdea3cf5e867806e81fedab1cc537e70d867", "filename": "src/test/ui/suggestions/missing-comma-in-match.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match &Some(3) {\n+        &None => 1\n+        &Some(2) => { 3 }\n+        //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n+        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator here\n+        _ => 2\n+    };\n+}"}, {"sha": "b71a50b66318e6abbd9e9e521472aac4fd30f66a", "filename": "src/test/ui/suggestions/missing-comma-in-match.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n+  --> $DIR/missing-comma-in-match.rs:14:18\n+   |\n+LL |         &None => 1\n+   |                   - help: missing a comma here to end this `match` arm\n+LL |         &Some(2) => { 3 }\n+   |                  ^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+\n+error: aborting due to previous error\n+"}, {"sha": "26816ca0ca22ab6c149f3dc6bbf33f7d28584d83", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=8c7c8fb2128f1a50926f507bbdae8f18bcc35ff6", "patch": "@@ -20,7 +20,7 @@ error: expected expression, found `)`\n   --> $DIR/issue-10636-2.rs:18:1\n    |\n LL | } //~ ERROR: incorrect close delimiter\n-   | ^\n+   | ^ expected expression\n \n error[E0601]: main function not found\n "}]}