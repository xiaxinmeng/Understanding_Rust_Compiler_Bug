{"sha": "45d0b5f0b9bbcf97bc985fd26d64564273b7547a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZDBiNWYwYjliYmNmOTdiYzk4NWZkMjZkNjQ1NjQyNzNiNzU0N2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-14T23:02:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-14T23:02:59Z"}, "message": "rustc: Reword field/method-not-found error message to mention the possibility that a field wasn't found", "tree": {"sha": "b17312be5a278bb498db034923c0f52383428f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17312be5a278bb498db034923c0f52383428f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45d0b5f0b9bbcf97bc985fd26d64564273b7547a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45d0b5f0b9bbcf97bc985fd26d64564273b7547a", "html_url": "https://github.com/rust-lang/rust/commit/45d0b5f0b9bbcf97bc985fd26d64564273b7547a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45d0b5f0b9bbcf97bc985fd26d64564273b7547a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ed4f4bc4c53b2f660ab8f174d25d7118f9dae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ed4f4bc4c53b2f660ab8f174d25d7118f9dae0", "html_url": "https://github.com/rust-lang/rust/commit/83ed4f4bc4c53b2f660ab8f174d25d7118f9dae0"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "457fb644d461eabc1ef0ac7bfc9d03d82d5a5976", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45d0b5f0b9bbcf97bc985fd26d64564273b7547a/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d0b5f0b9bbcf97bc985fd26d64564273b7547a/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=45d0b5f0b9bbcf97bc985fd26d64564273b7547a", "patch": "@@ -2755,7 +2755,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n               none {\n                 let t_err = resolve_type_vars_if_possible(fcx, expr_t);\n                 let msg = #fmt[\"attempted access of field %s on type %s, but \\\n-                                no method implementation was found\",\n+                                no field or method with that name was found\",\n                                field, ty_to_str(tcx, t_err)];\n                 tcx.sess.span_err(expr.span, msg);\n                 // NB: Adding a bogus type to allow typechecking to continue"}]}