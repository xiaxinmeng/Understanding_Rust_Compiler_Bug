{"sha": "2f517ce6f28b5d638cce4c1eccdbe63255b11420", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNTE3Y2U2ZjI4YjVkNjM4Y2NlNGMxZWNjZGJlNjMyNTViMTE0MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-28T16:44:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-28T16:44:29Z"}, "message": "Auto merge of #73838 - Manishearth:rollup-jj57e84, r=Manishearth\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #73577 (Add partition_point)\n - #73757 (Const prop: erase all block-only locals at the end of every block)\n - #73774 (Make liveness more precise for assignments to fields)\n - #73795 (Add some `const_compare_raw_pointers`-related regression tests)\n - #73800 (Forward Hash::write_iN to Hash::write_uN)\n - #73813 (Rename two `Resolver` traits)\n - #73817 (Rename clashing_extern_decl to clashing_extern_declarations.)\n - #73826 (Fix docstring typo)\n - #73833 (Remove GlobalCtxt::enter_local)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "32d461aeb5d988a76a319c6cec6c1d663c282446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32d461aeb5d988a76a319c6cec6c1d663c282446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f517ce6f28b5d638cce4c1eccdbe63255b11420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f517ce6f28b5d638cce4c1eccdbe63255b11420", "html_url": "https://github.com/rust-lang/rust/commit/2f517ce6f28b5d638cce4c1eccdbe63255b11420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f517ce6f28b5d638cce4c1eccdbe63255b11420/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25687caa2e4e35b31c29e28998710670e9d54ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/25687caa2e4e35b31c29e28998710670e9d54ee9", "html_url": "https://github.com/rust-lang/rust/commit/25687caa2e4e35b31c29e28998710670e9d54ee9"}, {"sha": "117b734ad6af4f646d47256c97d3e0cc95e6ab90", "url": "https://api.github.com/repos/rust-lang/rust/commits/117b734ad6af4f646d47256c97d3e0cc95e6ab90", "html_url": "https://github.com/rust-lang/rust/commit/117b734ad6af4f646d47256c97d3e0cc95e6ab90"}], "stats": {"total": 685, "additions": 526, "deletions": 159}, "files": [{"sha": "6abe19dc155d1d96bedc14946942f6604dacff51", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -333,31 +333,31 @@ pub trait Hasher {\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i16(&mut self, i: i16) {\n-        self.write(&i.to_ne_bytes())\n+        self.write_u16(i as u16)\n     }\n     /// Writes a single `i32` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i32(&mut self, i: i32) {\n-        self.write(&i.to_ne_bytes())\n+        self.write_u32(i as u32)\n     }\n     /// Writes a single `i64` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i64(&mut self, i: i64) {\n-        self.write(&i.to_ne_bytes())\n+        self.write_u64(i as u64)\n     }\n     /// Writes a single `i128` into this hasher.\n     #[inline]\n     #[stable(feature = \"i128\", since = \"1.26.0\")]\n     fn write_i128(&mut self, i: i128) {\n-        self.write(&i.to_ne_bytes())\n+        self.write_u128(i as u128)\n     }\n     /// Writes a single `isize` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_isize(&mut self, i: isize) {\n-        self.write(&i.to_ne_bytes())\n+        self.write_usize(i as usize)\n     }\n }\n "}, {"sha": "15466ce94a82e08d3be57fb878e099c3518f7f45", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -279,9 +279,9 @@ pub mod primitive;\n // crate uses the this crate as its libcore.\n #[path = \"../stdarch/crates/core_arch/src/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n-// FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_decl is\n+// FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n-#[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n+#[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n mod core_arch;\n "}, {"sha": "6a50cdbc1d9fb78b5ec9379afe980e6069b38e69", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -2663,6 +2663,60 @@ impl<T> [T] {\n     {\n         self.iter().is_sorted_by_key(f)\n     }\n+\n+    /// Returns the index of the partition point according to the given predicate\n+    /// (the index of the first element of the second partition).\n+    ///\n+    /// The slice is assumed to be partitioned according to the given predicate.\n+    /// This means that all elements for which the predicate returns true are at the start of the slice\n+    /// and all elements for which the predicate returns false are at the end.\n+    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// (all odd numbers are at the start, all even at the end).\n+    ///\n+    /// If this slice is not partitioned, the returned result is unspecified and meaningless,\n+    /// as this method performs a kind of binary search.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(partition_point)]\n+    ///\n+    /// let v = [1, 2, 3, 3, 5, 6, 7];\n+    /// let i = v.partition_point(|&x| x < 5);\n+    ///\n+    /// assert_eq!(i, 4);\n+    /// assert!(v[..i].iter().all(|&x| x < 5));\n+    /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n+    /// ```\n+    #[unstable(feature = \"partition_point\", reason = \"new API\", issue = \"73831\")]\n+    pub fn partition_point<P>(&self, mut pred: P) -> usize\n+    where\n+        P: FnMut(&T) -> bool,\n+    {\n+        let mut left = 0;\n+        let mut right = self.len();\n+\n+        while left != right {\n+            let mid = left + (right - left) / 2;\n+            // SAFETY:\n+            // When left < right, left <= mid < right.\n+            // Therefore left always increases and right always decreases,\n+            // and eigher of them is selected.\n+            // In both cases left <= right is satisfied.\n+            // Therefore if left < right in a step,\n+            // left <= right is satisfied in the next step.\n+            // Therefore as long as left != right, 0 <= left < right <= len is satisfied\n+            // and if this case 0 <= mid < len is satisfied too.\n+            let value = unsafe { self.get_unchecked(mid) };\n+            if pred(value) {\n+                left = mid + 1;\n+            } else {\n+                right = mid;\n+            }\n+        }\n+\n+        left\n+    }\n }\n \n #[lang = \"slice_u8\"]"}, {"sha": "524c38a7ab4c1f1a0a2bdca82bc791823d38ac9d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -44,6 +44,7 @@\n #![feature(const_forget)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_next_if)]\n+#![feature(partition_point)]\n \n extern crate test;\n "}, {"sha": "fba73be92be09b527971a4e410dbf302106ce498", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -81,6 +81,46 @@ fn test_binary_search_implementation_details() {\n     assert_eq!(b.binary_search(&3), Ok(8));\n }\n \n+#[test]\n+fn test_partition_point() {\n+    let b: [i32; 0] = [];\n+    assert_eq!(b.partition_point(|&x| x < 5), 0);\n+\n+    let b = [4];\n+    assert_eq!(b.partition_point(|&x| x < 3), 0);\n+    assert_eq!(b.partition_point(|&x| x < 4), 0);\n+    assert_eq!(b.partition_point(|&x| x < 5), 1);\n+\n+    let b = [1, 2, 4, 6, 8, 9];\n+    assert_eq!(b.partition_point(|&x| x < 5), 3);\n+    assert_eq!(b.partition_point(|&x| x < 6), 3);\n+    assert_eq!(b.partition_point(|&x| x < 7), 4);\n+    assert_eq!(b.partition_point(|&x| x < 8), 4);\n+\n+    let b = [1, 2, 4, 5, 6, 8];\n+    assert_eq!(b.partition_point(|&x| x < 9), 6);\n+\n+    let b = [1, 2, 4, 6, 7, 8, 9];\n+    assert_eq!(b.partition_point(|&x| x < 6), 3);\n+    assert_eq!(b.partition_point(|&x| x < 5), 3);\n+    assert_eq!(b.partition_point(|&x| x < 8), 5);\n+\n+    let b = [1, 2, 4, 5, 6, 8, 9];\n+    assert_eq!(b.partition_point(|&x| x < 7), 5);\n+    assert_eq!(b.partition_point(|&x| x < 0), 0);\n+\n+    let b = [1, 3, 3, 3, 7];\n+    assert_eq!(b.partition_point(|&x| x < 0), 0);\n+    assert_eq!(b.partition_point(|&x| x < 1), 0);\n+    assert_eq!(b.partition_point(|&x| x < 2), 1);\n+    assert_eq!(b.partition_point(|&x| x < 3), 1);\n+    assert_eq!(b.partition_point(|&x| x < 4), 4);\n+    assert_eq!(b.partition_point(|&x| x < 5), 4);\n+    assert_eq!(b.partition_point(|&x| x < 6), 4);\n+    assert_eq!(b.partition_point(|&x| x < 7), 4);\n+    assert_eq!(b.partition_point(|&x| x < 8), 5);\n+}\n+\n #[test]\n fn test_iterator_nth() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "bc0980f041b942df466067e7901429feaada3053", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -91,7 +91,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes.\n     sess: &'a Session,\n \n-    resolver: &'a mut dyn Resolver,\n+    resolver: &'a mut dyn ResolverAstLowering,\n \n     /// HACK(Centril): there is a cyclic dependency between the parser and lowering\n     /// if we don't have this function pointer. To avoid that dependency so that\n@@ -172,7 +172,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n }\n \n-pub trait Resolver {\n+pub trait ResolverAstLowering {\n     fn def_key(&mut self, id: DefId) -> DefKey;\n \n     fn item_generics_num_lifetimes(&self, def: DefId, sess: &Session) -> usize;\n@@ -299,7 +299,7 @@ impl<'a> ImplTraitContext<'_, 'a> {\n pub fn lower_crate<'a, 'hir>(\n     sess: &'a Session,\n     krate: &'a Crate,\n-    resolver: &'a mut dyn Resolver,\n+    resolver: &'a mut dyn ResolverAstLowering,\n     nt_to_tokenstream: NtToTokenstream,\n     arena: &'hir Arena<'hir>,\n ) -> hir::Crate<'hir> {"}, {"sha": "173a823dc7d524c75b2a6b5ffa04397dd35f2913", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -15,7 +15,7 @@ extern crate proc_macro;\n \n use crate::deriving::*;\n \n-use rustc_expand::base::{MacroExpanderFn, Resolver, SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Ident};\n@@ -45,7 +45,7 @@ pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n \n-pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n+pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand, edition: Edition) {\n     let mut register = |name, kind| {\n         resolver.register_builtin_macro(\n             Ident::with_dummy_span(name),"}, {"sha": "7cc9c1f76631e1b80290bd9659489af32dc5c433", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::expand::is_proc_macro_attr;\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust;\n-use rustc_expand::base::{ExtCtxt, Resolver};\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::AstPass;\n@@ -52,7 +52,7 @@ struct CollectProcMacros<'a> {\n \n pub fn inject(\n     sess: &ParseSess,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     mut krate: ast::Crate,\n     is_proc_macro_crate: bool,\n     has_proc_macro_decls: bool,"}, {"sha": "671ff8ce54f0e9fda51711ea693f4b27cefbadc3", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::ptr::P;\n use rustc_ast::{ast, attr};\n-use rustc_expand::base::{ExtCtxt, Resolver};\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::ExpansionConfig;\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n@@ -10,7 +10,7 @@ use rustc_span::DUMMY_SP;\n \n pub fn inject(\n     mut krate: ast::Crate,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     sess: &ParseSess,\n     alt_std_name: Option<Symbol>,\n ) -> (ast::Crate, Option<Symbol>) {"}, {"sha": "da8bf2b8b5169990a2c989684ea5090b936793fc", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::attr;\n use rustc_ast::entry::{self, EntryPointType};\n use rustc_ast::mut_visit::{ExpectOne, *};\n use rustc_ast::ptr::P;\n-use rustc_expand::base::{ExtCtxt, Resolver};\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n@@ -37,7 +37,7 @@ struct TestCtxt<'a> {\n // existing main functions, and synthesizing a main test harness\n pub fn inject(\n     sess: &ParseSess,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     should_test: bool,\n     krate: &mut ast::Crate,\n     span_diagnostic: &rustc_errors::Handler,\n@@ -192,7 +192,7 @@ impl MutVisitor for EntryPointCleaner {\n /// Crawl over the crate, inserting test reexports and the test main function\n fn generate_test_harness(\n     sess: &ParseSess,\n-    resolver: &mut dyn Resolver,\n+    resolver: &mut dyn ResolverExpand,\n     reexport_test_harness_main: Option<Symbol>,\n     krate: &mut ast::Crate,\n     features: &Features,"}, {"sha": "757eee8bb46e1a2593793da6d37c08753a15dde5", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -889,7 +889,7 @@ pub enum InvocationRes {\n /// Error type that denotes indeterminacy.\n pub struct Indeterminate;\n \n-pub trait Resolver {\n+pub trait ResolverExpand {\n     fn next_node_id(&mut self) -> NodeId;\n \n     fn resolve_dollar_crates(&mut self);\n@@ -946,7 +946,7 @@ pub struct ExtCtxt<'a> {\n     pub ecfg: expand::ExpansionConfig<'a>,\n     pub reduced_recursion_limit: Option<Limit>,\n     pub root_path: PathBuf,\n-    pub resolver: &'a mut dyn Resolver,\n+    pub resolver: &'a mut dyn ResolverExpand,\n     pub current_expansion: ExpansionData,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n     /// Called directly after having parsed an external `mod foo;` in expansion.\n@@ -957,7 +957,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn new(\n         parse_sess: &'a ParseSess,\n         ecfg: expand::ExpansionConfig<'a>,\n-        resolver: &'a mut dyn Resolver,\n+        resolver: &'a mut dyn ResolverExpand,\n         extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {"}, {"sha": "76ac61c067280a901b03133513c871ab57f063f5", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -570,7 +570,7 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n /// Necessary because we can't write the following bound:\n /// `F: for<'b, 'tcx> where 'tcx FnOnce(InferCtxt<'b, 'tcx>)`.\n pub struct InferCtxtBuilder<'tcx> {\n-    global_tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n@@ -580,7 +580,7 @@ pub trait TyCtxtInferExt<'tcx> {\n \n impl TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n     fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n-        InferCtxtBuilder { global_tcx: self, fresh_tables: None }\n+        InferCtxtBuilder { tcx: self, fresh_tables: None }\n     }\n }\n \n@@ -616,24 +616,22 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {\n-        let InferCtxtBuilder { global_tcx, ref fresh_tables } = *self;\n+        let InferCtxtBuilder { tcx, ref fresh_tables } = *self;\n         let in_progress_tables = fresh_tables.as_ref();\n-        global_tcx.enter_local(|tcx| {\n-            f(InferCtxt {\n-                tcx,\n-                in_progress_tables,\n-                inner: RefCell::new(InferCtxtInner::new()),\n-                lexical_region_resolutions: RefCell::new(None),\n-                selection_cache: Default::default(),\n-                evaluation_cache: Default::default(),\n-                reported_trait_errors: Default::default(),\n-                reported_closure_mismatch: Default::default(),\n-                tainted_by_errors_flag: Cell::new(false),\n-                err_count_on_creation: tcx.sess.err_count(),\n-                in_snapshot: Cell::new(false),\n-                skip_leak_check: Cell::new(false),\n-                universe: Cell::new(ty::UniverseIndex::ROOT),\n-            })\n+        f(InferCtxt {\n+            tcx,\n+            in_progress_tables,\n+            inner: RefCell::new(InferCtxtInner::new()),\n+            lexical_region_resolutions: RefCell::new(None),\n+            selection_cache: Default::default(),\n+            evaluation_cache: Default::default(),\n+            reported_trait_errors: Default::default(),\n+            reported_closure_mismatch: Default::default(),\n+            tainted_by_errors_flag: Cell::new(false),\n+            err_count_on_creation: tcx.sess.err_count(),\n+            in_snapshot: Cell::new(false),\n+            skip_leak_check: Cell::new(false),\n+            universe: Cell::new(ty::UniverseIndex::ROOT),\n         })\n     }\n }"}, {"sha": "36d2954ac6ef779a31abcb1e1d8fe6ed796ed4d1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -2055,12 +2055,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n }\n \n declare_lint! {\n-    pub CLASHING_EXTERN_DECL,\n+    pub CLASHING_EXTERN_DECLARATIONS,\n     Warn,\n     \"detects when an extern fn has been declared with the same name but different types\"\n }\n \n-pub struct ClashingExternDecl {\n+pub struct ClashingExternDeclarations {\n     seen_decls: FxHashMap<Symbol, HirId>,\n }\n \n@@ -2083,9 +2083,9 @@ impl SymbolName {\n     }\n }\n \n-impl ClashingExternDecl {\n+impl ClashingExternDeclarations {\n     crate fn new() -> Self {\n-        ClashingExternDecl { seen_decls: FxHashMap::default() }\n+        ClashingExternDeclarations { seen_decls: FxHashMap::default() }\n     }\n     /// Insert a new foreign item into the seen set. If a symbol with the same name already exists\n     /// for the item, return its HirId without updating the set.\n@@ -2211,18 +2211,18 @@ impl ClashingExternDecl {\n     }\n }\n \n-impl_lint_pass!(ClashingExternDecl => [CLASHING_EXTERN_DECL]);\n+impl_lint_pass!(ClashingExternDeclarations => [CLASHING_EXTERN_DECLARATIONS]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDecl {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDeclarations {\n     fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, this_fi: &hir::ForeignItem<'_>) {\n-        trace!(\"ClashingExternDecl: check_foreign_item: {:?}\", this_fi);\n+        trace!(\"ClashingExternDeclarations: check_foreign_item: {:?}\", this_fi);\n         if let ForeignItemKind::Fn(..) = this_fi.kind {\n             let tcx = *&cx.tcx;\n             if let Some(existing_hid) = self.insert(tcx, this_fi) {\n                 let existing_decl_ty = tcx.type_of(tcx.hir().local_def_id(existing_hid));\n                 let this_decl_ty = tcx.type_of(tcx.hir().local_def_id(this_fi.hir_id));\n                 debug!(\n-                    \"ClashingExternDecl: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n+                    \"ClashingExternDeclarations: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n                     existing_hid, existing_decl_ty, this_fi.hir_id, this_decl_ty\n                 );\n                 // Check that the declarations match.\n@@ -2239,7 +2239,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDecl {\n                         };\n                     // Finally, emit the diagnostic.\n                     tcx.struct_span_lint_hir(\n-                        CLASHING_EXTERN_DECL,\n+                        CLASHING_EXTERN_DECLARATIONS,\n                         this_fi.hir_id,\n                         get_relevant_span(this_fi),\n                         |lint| {"}, {"sha": "4da98d201593b1dbf6715dba90076c2907e51086", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -155,7 +155,7 @@ macro_rules! late_lint_passes {\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n                 ArrayIntoIter: ArrayIntoIter,\n-                ClashingExternDecl: ClashingExternDecl::new(),\n+                ClashingExternDeclarations: ClashingExternDeclarations::new(),\n             ]\n         );\n     };"}, {"sha": "e2f601371b1eeab9a07941bab20fe4ea72ffe076", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1560,28 +1560,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> GlobalCtxt<'tcx> {\n-    /// Calls the closure with a local `TyCtxt` using the given arena.\n-    /// `interners` is a slot passed so we can create a CtxtInterners\n-    /// with the same lifetime as `arena`.\n-    pub fn enter_local<F, R>(&'tcx self, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let tcx = TyCtxt { gcx: self };\n-        ty::tls::with_related_context(tcx, |icx| {\n-            let new_icx = ty::tls::ImplicitCtxt {\n-                tcx,\n-                query: icx.query,\n-                diagnostics: icx.diagnostics,\n-                layout_depth: icx.layout_depth,\n-                task_deps: icx.task_deps,\n-            };\n-            ty::tls::enter_context(&new_icx, |_| f(tcx))\n-        })\n-    }\n-}\n-\n /// A trait implemented for all `X<'a>` types that can be safely and\n /// efficiently converted to `X<'tcx>` as long as they are part of the\n /// provided `TyCtxt<'tcx>`.\n@@ -1818,11 +1796,11 @@ pub mod tls {\n         with_context_opt(|opt_context| f(opt_context.expect(\"no ImplicitCtxt stored in tls\")))\n     }\n \n-    /// Allows access to the current `ImplicitCtxt` whose tcx field has the same global\n-    /// interner as the tcx argument passed in. This means the closure is given an `ImplicitCtxt`\n-    /// with the same `'tcx` lifetime as the `TyCtxt` passed in.\n-    /// This will panic if you pass it a `TyCtxt` which has a different global interner from\n-    /// the current `ImplicitCtxt`'s `tcx` field.\n+    /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument\n+    /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime\n+    /// as the `TyCtxt` passed in.\n+    /// This will panic if you pass it a `TyCtxt` which is different from the current\n+    /// `ImplicitCtxt`'s `tcx` field.\n     #[inline]\n     pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R\n     where"}, {"sha": "784b0bd9293e25f8b65072d726059ce503fa9f99", "filename": "src/librustc_mir/dataflow/impls/liveness.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -92,7 +92,27 @@ impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {\n+    fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {\n+        let mir::Place { projection, local } = *place;\n+\n+        // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n+        // place with one of the `Projection` variants of `PlaceContext`.\n+        self.visit_projection(local, projection, context, location);\n+\n+        match DefUse::for_place(context) {\n+            // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a use.\n+            Some(_) if place.is_indirect() => self.0.gen(local),\n+\n+            Some(DefUse::Def) if projection.is_empty() => self.0.kill(local),\n+            Some(DefUse::Use) => self.0.gen(local),\n+            _ => {}\n+        }\n+    }\n+\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+        // Because we do not call `super_place` above, `visit_local` is only called for locals that\n+        // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n+        // of the return place in a `Return` terminator or the index in an `Index` projection.\n         match DefUse::for_place(context) {\n             Some(DefUse::Def) => self.0.kill(local),\n             Some(DefUse::Use) => self.0.gen(local),\n@@ -126,19 +146,22 @@ impl DefUse {\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::Drop\n-                | MutatingUseContext::Projection\n                 | MutatingUseContext::Retag,\n             )\n             | PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::AddressOf\n                 | NonMutatingUseContext::Copy\n                 | NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::Move\n-                | NonMutatingUseContext::Projection\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::UniqueBorrow,\n             ) => Some(DefUse::Use),\n+\n+            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => {\n+                unreachable!(\"A projection could be a def or a use and must be handled separately\")\n+            }\n         }\n     }\n }"}, {"sha": "602876e3de1686e97ce6bb1513e05ba6492c3a85", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -132,6 +132,10 @@ pub enum LocalValue<Tag = ()> {\n }\n \n impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n+    /// Read the local's value or error if the local is not yet live or not live anymore.\n+    ///\n+    /// Note: This may only be invoked from the `Machine::access_local` hook and not from\n+    /// anywhere else. You may be invalidating machine invariants if you do!\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n@@ -144,6 +148,9 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n \n     /// Overwrite the local.  If the local can be overwritten in place, return a reference\n     /// to do so; otherwise return the `MemPlace` to consult instead.\n+    ///\n+    /// Note: This may only be invoked from the `Machine::access_local_mut` hook and not from\n+    /// anywhere else. You may be invalidating machine invariants if you do!\n     pub fn access_mut(\n         &mut self,\n     ) -> InterpResult<'tcx, Result<&mut LocalValue<Tag>, MemPlace<Tag>>> {"}, {"sha": "ec1c93c81657ee2e733c7306239d072f580be88d", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -11,7 +11,7 @@ use rustc_span::def_id::DefId;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n-    Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar,\n+    LocalValue, MemPlace, Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -192,6 +192,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ) -> InterpResult<'tcx>;\n \n     /// Called to read the specified `local` from the `frame`.\n+    /// Since reading a ZST is not actually accessing memory or locals, this is never invoked\n+    /// for ZST reads.\n     #[inline]\n     fn access_local(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n@@ -201,6 +203,21 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         frame.locals[local].access()\n     }\n \n+    /// Called to write the specified `local` from the `frame`.\n+    /// Since writing a ZST is not actually accessing memory or locals, this is never invoked\n+    /// for ZST reads.\n+    #[inline]\n+    fn access_local_mut<'a>(\n+        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n+        frame: usize,\n+        local: mir::Local,\n+    ) -> InterpResult<'tcx, Result<&'a mut LocalValue<Self::PointerTag>, MemPlace<Self::PointerTag>>>\n+    where\n+        'tcx: 'mir,\n+    {\n+        ecx.stack_mut()[frame].locals[local].access_mut()\n+    }\n+\n     /// Called before a basic block terminator is executed.\n     /// You can use this to detect endlessly running programs.\n     #[inline]"}, {"sha": "b02b5219ba1a4f95c718983d27f127e942b26a42", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -432,7 +432,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         })\n     }\n \n-    /// This is used by [priroda](https://github.com/oli-obk/priroda) to get an OpTy from a local\n+    /// Read from a local. Will not actually access the local if reading from a ZST.\n+    /// Will not access memory, instead an indirect `Operand` is returned.\n+    ///\n+    /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an\n+    /// OpTy from a local\n     pub fn access_local(\n         &self,\n         frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,"}, {"sha": "3868150c6bd288f71cb2f076b60a0f356c4de628", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -741,7 +741,7 @@ where\n         // but not factored as a separate function.\n         let mplace = match dest.place {\n             Place::Local { frame, local } => {\n-                match self.stack_mut()[frame].locals[local].access_mut()? {\n+                match M::access_local_mut(self, frame, local)? {\n                     Ok(local) => {\n                         // Local can be updated in-place.\n                         *local = LocalValue::Live(Operand::Immediate(src));\n@@ -974,7 +974,7 @@ where\n     ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, Option<Size>)> {\n         let (mplace, size) = match place.place {\n             Place::Local { frame, local } => {\n-                match self.stack_mut()[frame].locals[local].access_mut()? {\n+                match M::access_local_mut(self, frame, local)? {\n                     Ok(&mut local_val) => {\n                         // We need to make an allocation.\n \n@@ -998,7 +998,7 @@ where\n                         }\n                         // Now we can call `access_mut` again, asserting it goes well,\n                         // and actually overwrite things.\n-                        *self.stack_mut()[frame].locals[local].access_mut().unwrap().unwrap() =\n+                        *M::access_local_mut(self, frame, local).unwrap().unwrap() =\n                             LocalValue::Live(Operand::Indirect(mplace));\n                         (mplace, Some(size))\n                     }"}, {"sha": "841f1c2b647f6ff24c002bb1bd11710ed85ab124", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -4,6 +4,7 @@\n use std::cell::Cell;\n \n use rustc_ast::ast::Mutability;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n@@ -28,7 +29,7 @@ use rustc_trait_selection::traits;\n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx, LocalState,\n-    LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n+    LocalValue, MemPlace, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n     ScalarMaybeUninit, StackPopCleanup,\n };\n use crate::transform::{MirPass, MirSource};\n@@ -151,11 +152,19 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n struct ConstPropMachine<'mir, 'tcx> {\n     /// The virtual call stack.\n     stack: Vec<Frame<'mir, 'tcx, (), ()>>,\n+    /// `OnlyInsideOwnBlock` locals that were written in the current block get erased at the end.\n+    written_only_inside_own_block_locals: FxHashSet<Local>,\n+    /// Locals that need to be cleared after every block terminates.\n+    only_propagate_inside_block_locals: BitSet<Local>,\n }\n \n impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n-    fn new() -> Self {\n-        Self { stack: Vec::new() }\n+    fn new(only_propagate_inside_block_locals: BitSet<Local>) -> Self {\n+        Self {\n+            stack: Vec::new(),\n+            written_only_inside_own_block_locals: Default::default(),\n+            only_propagate_inside_block_locals,\n+        }\n     }\n }\n \n@@ -227,6 +236,18 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         l.access()\n     }\n \n+    fn access_local_mut<'a>(\n+        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n+        frame: usize,\n+        local: Local,\n+    ) -> InterpResult<'tcx, Result<&'a mut LocalValue<Self::PointerTag>, MemPlace<Self::PointerTag>>>\n+    {\n+        if frame == 0 && ecx.machine.only_propagate_inside_block_locals.contains(local) {\n+            ecx.machine.written_only_inside_own_block_locals.insert(local);\n+        }\n+        ecx.machine.stack[frame].locals[local].access_mut()\n+    }\n+\n     fn before_access_global(\n         _memory_extra: &(),\n         _alloc_id: AllocId,\n@@ -274,8 +295,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n-    // Locals we need to forget at the end of the current block\n-    locals_of_current_block: BitSet<Local>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -313,8 +332,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let param_env = tcx.param_env(def_id).with_reveal_all();\n \n         let span = tcx.def_span(def_id);\n-        let mut ecx = InterpCx::new(tcx, span, param_env, ConstPropMachine::new(), ());\n         let can_const_prop = CanConstProp::check(body);\n+        let mut only_propagate_inside_block_locals = BitSet::new_empty(can_const_prop.len());\n+        for (l, mode) in can_const_prop.iter_enumerated() {\n+            if *mode == ConstPropMode::OnlyInsideOwnBlock {\n+                only_propagate_inside_block_locals.insert(l);\n+            }\n+        }\n+        let mut ecx = InterpCx::new(\n+            tcx,\n+            span,\n+            param_env,\n+            ConstPropMachine::new(only_propagate_inside_block_locals),\n+            (),\n+        );\n \n         let ret = ecx\n             .layout_of(body.return_ty().subst(tcx, substs))\n@@ -345,7 +376,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n             source_info: None,\n-            locals_of_current_block: BitSet::new_empty(body.local_decls.len()),\n         }\n     }\n \n@@ -900,7 +930,6 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                                 Will remove it from const-prop after block is finished. Local: {:?}\",\n                                 place.local\n                             );\n-                            self.locals_of_current_block.insert(place.local);\n                         }\n                         ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n                             trace!(\"can't propagate into {:?}\", place);\n@@ -1089,10 +1118,27 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n         }\n-        // We remove all Locals which are restricted in propagation to their containing blocks.\n-        for local in self.locals_of_current_block.iter() {\n+\n+        // We remove all Locals which are restricted in propagation to their containing blocks and\n+        // which were modified in the current block.\n+        // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`\n+        let mut locals = std::mem::take(&mut self.ecx.machine.written_only_inside_own_block_locals);\n+        for &local in locals.iter() {\n             Self::remove_const(&mut self.ecx, local);\n         }\n-        self.locals_of_current_block.clear();\n+        locals.clear();\n+        // Put it back so we reuse the heap of the storage\n+        self.ecx.machine.written_only_inside_own_block_locals = locals;\n+        if cfg!(debug_assertions) {\n+            // Ensure we are correctly erasing locals with the non-debug-assert logic.\n+            for local in self.ecx.machine.only_propagate_inside_block_locals.iter() {\n+                assert!(\n+                    self.get_const(local.into()).is_none()\n+                        || self\n+                            .layout_of(self.local_decls[local].ty)\n+                            .map_or(true, |layout| layout.is_zst())\n+                )\n+            }\n+        }\n     }\n }"}, {"sha": "a92d451dfd006e2298c2a5e69a04f990ac44d6cc", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -19,7 +19,7 @@ use rustc_ast::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind,\n use rustc_ast::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};"}, {"sha": "1f36e1ed83de70b0abd11fbe70a399e4ad159a13", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -29,7 +29,7 @@ use crate::Resolver;\n use rustc_ast::ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::visit::{self, Visitor};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n use rustc_middle::ty;"}, {"sha": "c25a20210e0263a87d74fd5c75ffcb74969b4d37", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::ast::*;\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, FnKind};\n use rustc_ast::walk_list;\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions::*;"}, {"sha": "ded0ee8a9669963cef357414c8913b15855fc24d", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -12,7 +12,7 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n use rustc_ast::ast::NodeId;\n use rustc_ast::unwrap_or;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};"}, {"sha": "84ba9094ea16fedee6add5c9d39d4445fcc535ff", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{unwrap_or, walk_list};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};"}, {"sha": "dccaf76723a58188bb68ae8c3da0087b4466b331", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -27,7 +27,7 @@ use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::unwrap_or;\n use rustc_ast::visit::{self, Visitor};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;"}, {"sha": "3976e501c169feb0f46574bf1b19c53f70d5f1df", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -7,12 +7,11 @@ use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc_ast::ast::{self, NodeId};\n-use rustc_ast_lowering::Resolver as ResolverAstLowering;\n+use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_expand::base::SyntaxExtension;\n-use rustc_expand::base::{self, Indeterminate, InvocationRes};\n+use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n@@ -141,7 +140,7 @@ crate fn registered_attrs_and_tools(\n     (registered_attrs, registered_tools)\n }\n \n-impl<'a> base::Resolver for Resolver<'a> {\n+impl<'a> ResolverExpand for Resolver<'a> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n     }"}, {"sha": "b4c91cced43bfd407e3a40c8dc209746012c4ae1", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -400,7 +400,7 @@ impl<R: Seek> Seek for BufReader<R> {\n /// in memory, like a `Vec<u8>`.\n ///\n /// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n-/// dropping will attempt to flush the the contents of the buffer, any errors\n+/// dropping will attempt to flush the contents of the buffer, any errors\n /// that happen in the process of dropping will be ignored. Calling [`flush`]\n /// ensures that the buffer is empty and thus dropping will not even attempt\n /// file operations."}, {"sha": "773fab36be22127a7b62a367a7c98e3d4636e78d", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -205,15 +205,15 @@ mod imp {\n         #[cfg(target_arch = \"aarch64\")]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel) -> NsId;\n-            #[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n+            #[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, i: libc::c_ulong) -> NsId;\n         }\n \n         #[cfg(not(target_arch = \"aarch64\"))]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel, ...) -> NsId;\n-            #[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n+            #[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }"}, {"sha": "c32bd2847f8378a4e404e24a6a9073f507631ac5", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,33 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Test(*const usize);\n+\n+type PassArg = ();\n+\n+unsafe extern \"C\" fn pass(args: PassArg) {\n+    println!(\"Hello, world!\");\n+}\n+\n+impl Test {\n+    pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+        //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        self.0 = Self::trampiline::<Args, IDX, FN> as _\n+    }\n+\n+    unsafe extern \"C\" fn trampiline<\n+        Args: Sized,\n+        const IDX: usize,\n+        const FN: unsafe extern \"C\" fn(Args),\n+        //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    >(\n+        args: Args,\n+    ) {\n+        FN(args)\n+    }\n+}\n+\n+fn main() {\n+    let x = Test();\n+    x.call_me::<PassArg, 30, pass>()\n+}"}, {"sha": "6bb776fcfc0170e329f2dabad32566f362434a72", "filename": "src/test/ui/const-generics/issues/issue-71381.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,14 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71381.rs:13:61\n+   |\n+LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71381.rs:21:19\n+   |\n+LL |         const FN: unsafe extern \"C\" fn(Args),\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e0cf9812d95ec8bd324d87dc0d004a9a0bc6fef3", "filename": "src/test/ui/const-generics/issues/issue-71382.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,24 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Test();\n+\n+fn pass() {\n+    println!(\"Hello, world!\");\n+}\n+\n+impl Test {\n+    pub fn call_me(&self) {\n+        self.test::<pass>();\n+    }\n+\n+    fn test<const FN: fn()>(&self) {\n+        //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        FN();\n+    }\n+}\n+\n+fn main() {\n+    let x = Test();\n+    x.call_me()\n+}"}, {"sha": "1652b0bdfa879f16cab1f5441ec8273701d36b55", "filename": "src/test/ui/const-generics/issues/issue-71382.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71382.rs:15:23\n+   |\n+LL |     fn test<const FN: fn()>(&self) {\n+   |                       ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "64a049e743fafab50624253100b58617750687c1", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn func<A, const F: fn(inner: A)>(outer: A) {\n+    //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    F(outer);\n+}\n+\n+fn main() {}"}, {"sha": "9a7bf1c0a8841e660aabc24dd8476d38d153142f", "filename": "src/test/ui/const-generics/issues/issue-71611.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71611.rs:4:21\n+   |\n+LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n+   |                     ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e977af8deb719ea1a53a8c2a091bca161f51913b", "filename": "src/test/ui/const-generics/issues/issue-72352.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,21 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+use std::ffi::{CStr, CString};\n+\n+unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n+    //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    F(CStr::from_ptr(ptr))\n+}\n+\n+fn safely_do_the_thing(s: &CStr) -> usize {\n+    s.to_bytes().len()\n+}\n+\n+fn main() {\n+    let baguette = CString::new(\"baguette\").unwrap();\n+    let ptr = baguette.as_ptr();\n+    println!(\"{}\", unsafe {\n+        unsafely_do_the_thing::<safely_do_the_thing>(ptr)\n+    });\n+}"}, {"sha": "bc48da103936bcdd56584de65ebc72d40523a64a", "filename": "src/test/ui/const-generics/issues/issue-72352.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-72352.rs:6:42\n+   |\n+LL | unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n+   |                                          ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9f8a3a82624446cc259bf3b237f28c22917ce553", "filename": "src/test/ui/issues/issue-1866.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n-#![warn(clashing_extern_decl)]\n+#![warn(clashing_extern_declarations)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5edae48a10f23b8435d2de75d5bd953db3c0a02c", "filename": "src/test/ui/issues/issue-1866.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-1866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-1866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -10,8 +10,8 @@ LL |             pub fn rust_task_is_unwinding(rt: *const rust_task) -> bool;\n note: the lint level is defined here\n   --> $DIR/issue-1866.rs:4:9\n    |\n-LL | #![warn(clashing_extern_decl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clashing_extern_declarations)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(*const usize) -> bool`\n               found `unsafe extern \"C\" fn(*const bool) -> bool`\n "}, {"sha": "d9be27250cdeafacab6898a83925d9adf735400e", "filename": "src/test/ui/issues/issue-5791.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n-#![warn(clashing_extern_decl)]\n+#![warn(clashing_extern_declarations)]\n // pretty-expanded FIXME #23616\n \n extern {"}, {"sha": "cf60e609deb318e241757cbb885dd5175eac89f8", "filename": "src/test/ui/issues/issue-5791.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -12,8 +12,8 @@ LL | |     fn malloc2(len: i32, foo: i32) -> *const u8;\n note: the lint level is defined here\n   --> $DIR/issue-5791.rs:3:9\n    |\n-LL | #![warn(clashing_extern_decl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clashing_extern_declarations)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(i32) -> *const u8`\n               found `unsafe extern \"C\" fn(i32, i32) -> *const u8`\n "}, {"sha": "544614100ba28f28e39cae85702286ea574ecbb3", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,17 +1,17 @@\n // check-pass\n // aux-build:external_extern_fn.rs\n #![crate_type = \"lib\"]\n-#![warn(clashing_extern_decl)]\n+#![warn(clashing_extern_declarations)]\n \n extern crate external_extern_fn;\n \n-extern {\n+extern \"C\" {\n     fn clash(x: u8);\n     fn no_clash(x: u8);\n }\n \n fn redeclared_different_signature() {\n-    extern {\n+    extern \"C\" {\n         fn clash(x: u64); //~ WARN `clash` redeclared with a different signature\n     }\n \n@@ -22,20 +22,20 @@ fn redeclared_different_signature() {\n }\n \n fn redeclared_same_signature() {\n-    extern {\n+    extern \"C\" {\n         fn no_clash(x: u8);\n     }\n     unsafe {\n         no_clash(123);\n     }\n }\n \n-extern {\n+extern \"C\" {\n     fn extern_fn(x: u64);\n }\n \n fn extern_clash() {\n-    extern {\n+    extern \"C\" {\n         fn extern_fn(x: u32); //~ WARN `extern_fn` redeclared with a different signature\n     }\n     unsafe {\n@@ -49,7 +49,7 @@ fn extern_no_clash() {\n         crate::extern_fn(123);\n     }\n }\n-extern {\n+extern \"C\" {\n     fn some_other_new_name(x: i16);\n \n     #[link_name = \"extern_link_name\"]\n@@ -60,7 +60,7 @@ extern {\n }\n \n fn link_name_clash() {\n-    extern {\n+    extern \"C\" {\n         fn extern_link_name(x: u32);\n         //~^ WARN `extern_link_name` redeclared with a different signature\n \n@@ -75,85 +75,112 @@ fn link_name_clash() {\n }\n \n mod a {\n-    extern {\n+    extern \"C\" {\n         fn different_mod(x: u8);\n     }\n }\n mod b {\n-    extern {\n+    extern \"C\" {\n         fn different_mod(x: u64); //~ WARN `different_mod` redeclared with a different signature\n     }\n }\n \n-extern {\n+extern \"C\" {\n     fn variadic_decl(x: u8, ...);\n }\n \n fn variadic_clash() {\n-    extern {\n+    extern \"C\" {\n         fn variadic_decl(x: u8); //~ WARN `variadic_decl` redeclared with a different signature\n     }\n }\n \n #[no_mangle]\n-fn no_mangle_name(x: u8) { }\n+fn no_mangle_name(x: u8) {}\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"unique_link_name\"]\n     fn link_name_specified(x: u8);\n }\n \n fn tricky_no_clash() {\n-    extern {\n+    extern \"C\" {\n         // Shouldn't warn, because the declaration above actually declares a different symbol (and\n         // Rust's name resolution rules around shadowing will handle this gracefully).\n         fn link_name_specified() -> u32;\n \n         // The case of a no_mangle name colliding with an extern decl (see #28179) is related but\n-        // shouldn't be reported by ClashingExternDecl, because this is an example of unmangled\n-        // name clash causing bad behaviour in functions with a defined body.\n+        // shouldn't be reported by ClashingExternDeclarations, because this is an example of\n+        // unmangled name clash causing bad behaviour in functions with a defined body.\n         fn no_mangle_name() -> u32;\n     }\n }\n \n mod banana {\n     mod one {\n-        #[repr(C)] struct Banana { weight: u32, length: u16 }\n-        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+        #[repr(C)]\n+        struct Banana {\n+            weight: u32,\n+            length: u16,\n+        }\n+        extern \"C\" {\n+            fn weigh_banana(count: *const Banana) -> u64;\n+        }\n     }\n \n     mod two {\n-        #[repr(C)] struct Banana { weight: u32, length: u16 } // note: distinct type\n-        // This should not trigger the lint because two::Banana is structurally equivalent to\n-        // one::Banana.\n-        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+        #[repr(C)]\n+        struct Banana {\n+            weight: u32,\n+            length: u16,\n+        } // note: distinct type\n+        extern \"C\" {\n+          // This should not trigger the lint because two::Banana is structurally equivalent to\n+          // one::Banana.\n+            fn weigh_banana(count: *const Banana) -> u64;\n+        }\n     }\n \n     mod three {\n         // This _should_ trigger the lint, because repr(packed) should generate a struct that has a\n         // different layout.\n-        #[repr(packed)] struct Banana { weight: u32, length: u16 }\n+        #[repr(packed)]\n+        struct Banana {\n+            weight: u32,\n+            length: u16,\n+        }\n         #[allow(improper_ctypes)]\n-        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n-        //~^ WARN `weigh_banana` redeclared with a different signature\n+        extern \"C\" {\n+            fn weigh_banana(count: *const Banana) -> u64;\n+            //~^ WARN `weigh_banana` redeclared with a different signature\n+        }\n     }\n }\n \n mod sameish_members {\n     mod a {\n         #[repr(C)]\n-        struct Point { x: i16, y: i16 }\n+        struct Point {\n+            x: i16,\n+            y: i16,\n+        }\n \n-        extern \"C\" { fn draw_point(p: Point); }\n+        extern \"C\" {\n+            fn draw_point(p: Point);\n+        }\n     }\n     mod b {\n         #[repr(C)]\n-        struct Point { coordinates: [i16; 2] }\n+        struct Point {\n+            coordinates: [i16; 2],\n+        }\n \n         // It's possible we are overconservative for this case, as accessing the elements of the\n         // coordinates array might end up correctly accessing `.x` and `.y`. However, this may not\n         // always be the case, for every architecture and situation. This is also a really odd\n         // thing to do anyway.\n-        extern \"C\" { fn draw_point(p: Point); } //~ WARN `draw_point` redeclared with a different\n+        extern \"C\" {\n+            fn draw_point(p: Point); //~ WARN `draw_point` redeclared with a different\n+        }\n     }\n }"}, {"sha": "96e51ab5a3ec7057e0a5450d23d5c0c1c7736a44", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -10,8 +10,8 @@ LL |         fn clash(x: u64);\n note: the lint level is defined here\n   --> $DIR/clashing-extern-fn.rs:4:9\n    |\n-LL | #![warn(clashing_extern_decl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clashing_extern_declarations)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(u8)`\n               found `unsafe extern \"C\" fn(u64)`\n \n@@ -94,25 +94,25 @@ LL |         fn variadic_decl(x: u8);\n               found `unsafe extern \"C\" fn(u8)`\n \n warning: `weigh_banana` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:137:22\n+  --> $DIR/clashing-extern-fn.rs:154:13\n    |\n-LL |         extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n-   |                      --------------------------------------------- `weigh_banana` previously declared here\n+LL |             fn weigh_banana(count: *const Banana) -> u64;\n+   |             --------------------------------------------- `weigh_banana` previously declared here\n ...\n-LL |         extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn weigh_banana(count: *const Banana) -> u64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n    = note: expected `unsafe extern \"C\" fn(*const banana::one::Banana) -> u64`\n               found `unsafe extern \"C\" fn(*const banana::three::Banana) -> u64`\n \n warning: `draw_point` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:157:22\n+  --> $DIR/clashing-extern-fn.rs:183:13\n    |\n-LL |         extern \"C\" { fn draw_point(p: Point); }\n-   |                      ------------------------ `draw_point` previously declared here\n+LL |             fn draw_point(p: Point);\n+   |             ------------------------ `draw_point` previously declared here\n ...\n-LL |         extern \"C\" { fn draw_point(p: Point); }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn draw_point(p: Point);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n    = note: expected `unsafe extern \"C\" fn(sameish_members::a::Point)`\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`"}, {"sha": "fe3c392ccf1001eff9b73779b9e909ed95fa617b", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n-#![allow(clashing_extern_decl)]\n+#![allow(clashing_extern_declarations)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "486f31b635dca079dd45cf862dec5aa00607b843", "filename": "src/test/ui/mir-dataflow/liveness-projection.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,32 @@\n+#![feature(core_intrinsics, rustc_attrs)]\n+\n+use std::intrinsics::rustc_peek;\n+\n+#[rustc_mir(rustc_peek_liveness, stop_after_dataflow)]\n+fn foo() {\n+    {\n+        let mut x: (i32, i32) = (42, 0);\n+\n+        // Assignment to a projection does not cause `x` to become live\n+        unsafe { rustc_peek(x); } //~ ERROR bit not set\n+        x.1 = 42;\n+\n+        x = (0, 42);\n+\n+        // ...but a read from a projection does.\n+        unsafe { rustc_peek(x); }\n+        println!(\"{}\", x.1);\n+    }\n+\n+    {\n+        let mut x = 42;\n+\n+        // Derefs are treated like a read of a local even if they are on the LHS of an assignment.\n+        let p = &mut x;\n+        unsafe { rustc_peek(&p); }\n+        *p = 24;\n+        unsafe { rustc_peek(&p); } //~ ERROR bit not set\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f9480c880908adeddfe3945cc96e563ae03b4c1e", "filename": "src/test/ui/mir-dataflow/liveness-projection.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.stderr?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -0,0 +1,16 @@\n+error: rustc_peek: bit not set\n+  --> $DIR/liveness-projection.rs:11:18\n+   |\n+LL |         unsafe { rustc_peek(x); }\n+   |                  ^^^^^^^^^^^^^\n+\n+error: rustc_peek: bit not set\n+  --> $DIR/liveness-projection.rs:28:18\n+   |\n+LL |         unsafe { rustc_peek(&p); }\n+   |                  ^^^^^^^^^^^^^^\n+\n+error: stop_after_dataflow ended compilation\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8f5d7f4f7f8fd966a2eb93b521671be2aa0c1a74", "filename": "src/test/ui/parser/extern-abi-from-mac-literal-frag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f517ce6f28b5d638cce4c1eccdbe63255b11420/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs?ref=2f517ce6f28b5d638cce4c1eccdbe63255b11420", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clashing_extern_decl)]\n+#![allow(clashing_extern_declarations)]\n // check-pass\n \n // In this test we check that the parser accepts an ABI string when it"}]}