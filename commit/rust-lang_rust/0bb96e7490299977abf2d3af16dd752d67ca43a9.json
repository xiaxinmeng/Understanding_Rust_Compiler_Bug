{"sha": "0bb96e7490299977abf2d3af16dd752d67ca43a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjk2ZTc0OTAyOTk5NzdhYmYyZDNhZjE2ZGQ3NTJkNjdjYTQzYTk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-16T19:16:32Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-16T19:16:32Z"}, "message": "Avoid creating `&mut`s in Windows ReentrantMutex.", "tree": {"sha": "551315baea16843003cdfbe7f2f32b0afda263e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/551315baea16843003cdfbe7f2f32b0afda263e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb96e7490299977abf2d3af16dd752d67ca43a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb96e7490299977abf2d3af16dd752d67ca43a9", "html_url": "https://github.com/rust-lang/rust/commit/0bb96e7490299977abf2d3af16dd752d67ca43a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb96e7490299977abf2d3af16dd752d67ca43a9/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fadc603ab3fba157dfa7001fd9122692f40746a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fadc603ab3fba157dfa7001fd9122692f40746a", "html_url": "https://github.com/rust-lang/rust/commit/3fadc603ab3fba157dfa7001fd9122692f40746a"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "9ffe0d68c3aeb6865fd72ca471c8158a9e424cfa", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bb96e7490299977abf2d3af16dd752d67ca43a9/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb96e7490299977abf2d3af16dd752d67ca43a9/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0bb96e7490299977abf2d3af16dd752d67ca43a9", "patch": "@@ -315,6 +315,7 @@\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![feature(unsafe_cell_raw_get)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]"}, {"sha": "1e09b95c8728587555719f98df1cd9884e307c0e", "filename": "library/std/src/sys/windows/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bb96e7490299977abf2d3af16dd752d67ca43a9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb96e7490299977abf2d3af16dd752d67ca43a9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs?ref=0bb96e7490299977abf2d3af16dd752d67ca43a9", "patch": "@@ -148,35 +148,35 @@ fn kind() -> Kind {\n }\n \n pub struct ReentrantMutex {\n-    inner: UnsafeCell<MaybeUninit<c::CRITICAL_SECTION>>,\n+    inner: MaybeUninit<UnsafeCell<c::CRITICAL_SECTION>>,\n }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n     pub const fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: UnsafeCell::new(MaybeUninit::uninit()) }\n+        ReentrantMutex { inner: MaybeUninit::uninit() }\n     }\n \n     pub unsafe fn init(&self) {\n-        c::InitializeCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n+        c::InitializeCriticalSection(UnsafeCell::raw_get(self.inner.as_ptr()));\n     }\n \n     pub unsafe fn lock(&self) {\n-        c::EnterCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n+        c::EnterCriticalSection(UnsafeCell::raw_get(self.inner.as_ptr()));\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        c::TryEnterCriticalSection((&mut *self.inner.get()).as_mut_ptr()) != 0\n+        c::TryEnterCriticalSection(UnsafeCell::raw_get(self.inner.as_ptr())) != 0\n     }\n \n     pub unsafe fn unlock(&self) {\n-        c::LeaveCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n+        c::LeaveCriticalSection(UnsafeCell::raw_get(self.inner.as_ptr()));\n     }\n \n     pub unsafe fn destroy(&self) {\n-        c::DeleteCriticalSection((&mut *self.inner.get()).as_mut_ptr());\n+        c::DeleteCriticalSection(UnsafeCell::raw_get(self.inner.as_ptr()));\n     }\n }"}]}