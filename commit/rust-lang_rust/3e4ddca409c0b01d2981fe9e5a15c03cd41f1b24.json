{"sha": "3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNGRkY2E0MDljMGIwMWQyOTgxZmU5ZTVhMTVjMDNjZDQxZjFiMjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-05T11:55:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-05T11:55:27Z"}, "message": "Rustup to rustc 1.47.0-nightly (f9d422ea7 2020-08-04)", "tree": {"sha": "c2c87873ae0b8aa83cd49ff160eb9b9ce1b85d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2c87873ae0b8aa83cd49ff160eb9b9ce1b85d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "html_url": "https://github.com/rust-lang/rust/commit/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cdec787bb651777c76ace211b73738eb1b8ce2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdec787bb651777c76ace211b73738eb1b8ce2f", "html_url": "https://github.com/rust-lang/rust/commit/0cdec787bb651777c76ace211b73738eb1b8ce2f"}], "stats": {"total": 190, "additions": 63, "deletions": 127}, "files": [{"sha": "53d5364b554cbcbf918d322f05052636860aadd4", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 62, "deletions": 29, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "patch": "@@ -1,5 +1,27 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n+[[package]]\n+name = \"addr2line\"\n+version = \"0.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"gimli\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"alloc\"\n version = \"0.0.0\"\n@@ -23,32 +45,6 @@ version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \n-[[package]]\n-name = \"backtrace\"\n-version = \"0.3.50\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"46254cf2fdcdf1badb5934448c1bcbe046a56537b3987d96c51a7afc5d03f293\"\n-dependencies = [\n- \"backtrace-sys\",\n- \"cfg-if\",\n- \"compiler_builtins\",\n- \"libc\",\n- \"rustc-demangle\",\n- \"rustc-std-workspace-core\",\n-]\n-\n-[[package]]\n-name = \"backtrace-sys\"\n-version = \"0.1.37\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\n-dependencies = [\n- \"cc\",\n- \"compiler_builtins\",\n- \"libc\",\n- \"rustc-std-workspace-core\",\n-]\n-\n [[package]]\n name = \"cc\"\n version = \"1.0.58\"\n@@ -110,6 +106,17 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"gimli\"\n+version = \"0.22.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"hashbrown\"\n version = \"0.6.3\"\n@@ -135,13 +142,36 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.73\"\n+version = \"0.2.74\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bd7d4bd64732af4bf3a67f367c27df8520ad7e230c5817b8ff485864d80242b9\"\n+checksum = \"a2f02823cf78b754822df5f7f268fb59822e7296276d3e069d8e8cb26a14bd10\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"miniz_oxide\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"be0f75932c1f6cfae3c04000e40114adf955636e19040f9c0a2c380702aa1c7f\"\n+dependencies = [\n+ \"adler\",\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"object\"\n+version = \"0.20.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"panic_abort\"\n version = \"0.0.0\"\n@@ -206,8 +236,8 @@ dependencies = [\n name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n+ \"addr2line\",\n  \"alloc\",\n- \"backtrace\",\n  \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n@@ -216,8 +246,11 @@ dependencies = [\n  \"hashbrown\",\n  \"hermit-abi\",\n  \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n  \"panic_abort\",\n  \"panic_unwind\",\n+ \"rustc-demangle\",\n  \"unwind\",\n  \"wasi\",\n ]"}, {"sha": "e80a584e981a007552561e81a3e15c1c32525798", "filename": "build_sysroot/alloc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/build_sysroot%2Falloc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/build_sysroot%2Falloc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Falloc_system%2Flib.rs?ref=3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "patch": "@@ -72,102 +72,6 @@ use core::intrinsics;\n /// independently of the standard library\u2019s global allocator.\n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n pub struct System;\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-unsafe impl AllocRef for System {\n-    #[inline]\n-    fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<MemoryBlock, AllocErr> {\n-        unsafe {\n-            let size = layout.size();\n-            if size == 0 {\n-                Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })\n-            } else {\n-                let raw_ptr = match init {\n-                    AllocInit::Uninitialized => GlobalAlloc::alloc(self, layout),\n-                    AllocInit::Zeroed => GlobalAlloc::alloc_zeroed(self, layout),\n-                };\n-                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n-                Ok(MemoryBlock { ptr, size })\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n-        if layout.size() != 0 {\n-            GlobalAlloc::dealloc(self, ptr.as_ptr(), layout)\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn grow(\n-        &mut self,\n-        ptr: NonNull<u8>,\n-        layout: Layout,\n-        new_size: usize,\n-        placement: ReallocPlacement,\n-        init: AllocInit,\n-    ) -> Result<MemoryBlock, AllocErr> {\n-        let size = layout.size();\n-        debug_assert!(\n-            new_size >= size,\n-            \"`new_size` must be greater than or equal to `memory.size()`\"\n-        );\n-\n-        if size == new_size {\n-            return Ok(MemoryBlock { ptr, size });\n-        }\n-\n-        match placement {\n-            ReallocPlacement::InPlace => Err(AllocErr),\n-            ReallocPlacement::MayMove if layout.size() == 0 => {\n-                let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n-                self.alloc(new_layout, init)\n-            }\n-            ReallocPlacement::MayMove => {\n-                // `realloc` probably checks for `new_size > size` or something similar.\n-                intrinsics::assume(new_size > size);\n-                let ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size);\n-                let memory =\n-                    MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size };\n-                init.init_offset(memory, size);\n-                Ok(memory)\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn shrink(\n-        &mut self,\n-        ptr: NonNull<u8>,\n-        layout: Layout,\n-        new_size: usize,\n-        placement: ReallocPlacement,\n-    ) -> Result<MemoryBlock, AllocErr> {\n-        let size = layout.size();\n-        debug_assert!(\n-            new_size <= size,\n-            \"`new_size` must be smaller than or equal to `memory.size()`\"\n-        );\n-\n-        if size == new_size {\n-            return Ok(MemoryBlock { ptr, size });\n-        }\n-\n-        match placement {\n-            ReallocPlacement::InPlace => Err(AllocErr),\n-            ReallocPlacement::MayMove if new_size == 0 => {\n-                self.dealloc(ptr, layout);\n-                Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })\n-            }\n-            ReallocPlacement::MayMove => {\n-                // `realloc` probably checks for `new_size < size` or something similar.\n-                intrinsics::assume(new_size < size);\n-                let ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size);\n-                Ok(MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size })\n-            }\n-        }\n-    }\n-}\n #[cfg(any(windows, unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n mod realloc_fallback {\n     use core::alloc::{GlobalAlloc, Layout};"}, {"sha": "d16b27f6dbd57d3796e928e121633a15da34d33b", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "patch": "@@ -1 +1 @@\n-nightly-2020-07-30\n+nightly-2020-08-05"}, {"sha": "d389248c0125ac437cd5d81996431cdaaec69762", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3e4ddca409c0b01d2981fe9e5a15c03cd41f1b24", "patch": "@@ -1,5 +1,4 @@\n #![feature(rustc_private, decl_macro, type_alias_impl_trait, associated_type_bounds, never_type)]\n-#![allow(intra_doc_link_resolution_failure)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n "}]}