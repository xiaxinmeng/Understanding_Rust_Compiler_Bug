{"sha": "f9121e87a662568d42cc481f87d81ed4df38cc0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MTIxZTg3YTY2MjU2OGQ0MmNjNDgxZjg3ZDgxZWQ0ZGYzOGNjMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-15T13:51:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-15T13:51:30Z"}, "message": "Auto merge of #32250 - durka:derive-31574, r=alexcrichton\n\nderive: use intrinsics::unreachable over unreachable!()\n\nderive: use intrinsics::unreachable over unreachable!()\n\nFixes #31574.\n\nSpawned from #32139.\n\nr? @alexcrichton", "tree": {"sha": "2944cd21fb6c26ad15849ed2360457449967a377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2944cd21fb6c26ad15849ed2360457449967a377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9121e87a662568d42cc481f87d81ed4df38cc0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9121e87a662568d42cc481f87d81ed4df38cc0d", "html_url": "https://github.com/rust-lang/rust/commit/f9121e87a662568d42cc481f87d81ed4df38cc0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9121e87a662568d42cc481f87d81ed4df38cc0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "483fc715c6ea7cdd15d41d79df9def97401cd699", "url": "https://api.github.com/repos/rust-lang/rust/commits/483fc715c6ea7cdd15d41d79df9def97401cd699", "html_url": "https://github.com/rust-lang/rust/commit/483fc715c6ea7cdd15d41d79df9def97401cd699"}, {"sha": "a09a41928ff9a9188453013d3c8efce19626e08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09a41928ff9a9188453013d3c8efce19626e08d", "html_url": "https://github.com/rust-lang/rust/commit/a09a41928ff9a9188453013d3c8efce19626e08d"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "84bd9f43102beef810f324fa81097d54531c4a59", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9121e87a662568d42cc481f87d81ed4df38cc0d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9121e87a662568d42cc481f87d81ed4df38cc0d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f9121e87a662568d42cc481f87d81ed4df38cc0d", "patch": "@@ -381,6 +381,22 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n     visitor.types\n }\n \n+/// Replacement for expr_unreachable which generates intrinsics::unreachable()\n+/// instead of unreachable!()\n+fn expr_unreachable_intrinsic(cx: &ExtCtxt, sp: Span) -> P<Expr> {\n+    let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n+    let call = cx.expr_call_global(\n+        sp, path, vec![]);\n+    let unreachable = cx.expr_block(P(ast::Block {\n+        stmts: vec![],\n+        expr: Some(call),\n+        id: ast::DUMMY_NODE_ID,\n+        rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n+        span: sp }));\n+\n+    unreachable\n+}\n+\n impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n@@ -1299,16 +1315,7 @@ impl<'a> MethodDef<'a> {\n             //Since we know that all the arguments will match if we reach the match expression we\n             //add the unreachable intrinsics as the result of the catch all which should help llvm\n             //in optimizing it\n-            let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n-            let call = cx.expr_call_global(\n-                sp, path, vec![]);\n-            let unreachable = cx.expr_block(P(ast::Block {\n-                stmts: vec![],\n-                expr: Some(call),\n-                id: ast::DUMMY_NODE_ID,\n-                rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-                span: sp }));\n-            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], unreachable));\n+            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], expr_unreachable_intrinsic(cx, sp)));\n \n             // Final wrinkle: the self_args are expressions that deref\n             // down to desired l-values, but we cannot actually deref\n@@ -1384,7 +1391,7 @@ impl<'a> MethodDef<'a> {\n             // derive Debug on such a type could here generate code\n             // that needs the feature gate enabled.)\n \n-            cx.expr_unreachable(sp)\n+            expr_unreachable_intrinsic(cx, sp)\n         }\n         else {\n "}, {"sha": "f083e10bfdb3262554bc098d30eb9edb5a26dfad", "filename": "src/test/auxiliary/derive-no-std.rs", "status": "renamed", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9121e87a662568d42cc481f87d81ed4df38cc0d/src%2Ftest%2Fauxiliary%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9121e87a662568d42cc481f87d81ed4df38cc0d/src%2Ftest%2Fauxiliary%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fderive-no-std.rs?ref=f9121e87a662568d42cc481f87d81ed4df38cc0d", "patch": "@@ -8,32 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand, collections, rustc_private)]\n-#![no_std]\n+// no-prefer-dynamic\n \n-extern crate rand;\n-extern crate serialize as rustc_serialize;\n-extern crate collections;\n+#![crate_type = \"rlib\"]\n+#![no_std]\n \n // Issue #16803\n \n #[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n          Debug, Default, Copy)]\n-struct Foo {\n-    x: u32,\n+pub struct Foo {\n+    pub x: u32,\n }\n \n #[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n          Debug, Copy)]\n-enum Bar {\n+pub enum Bar {\n     Qux,\n     Quux(u32),\n }\n \n-enum Baz { A=0, B=5, }\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Copy)]\n+pub enum Void {}\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Copy)]\n+pub struct Empty;\n+#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord,\n+         Debug, Copy)]\n+pub struct AlsoEmpty {}\n \n-fn main() {\n-    Foo { x: 0 };\n-    Bar::Quux(3);\n-    Baz::A;\n-}", "previous_filename": "src/test/run-pass-fulldeps/derive-no-std.rs"}, {"sha": "0cbe4f4ebd0edc42bc59d8fb9bbb53b71e1b02ae", "filename": "src/test/run-pass/derive-no-std.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9121e87a662568d42cc481f87d81ed4df38cc0d/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9121e87a662568d42cc481f87d81ed4df38cc0d/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=f9121e87a662568d42cc481f87d81ed4df38cc0d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:derive-no-std.rs\n+\n+extern crate derive_no_std;\n+use derive_no_std::*;\n+\n+fn main() {\n+    let f = Foo { x: 0 };\n+    assert_eq!(f.clone(), Foo::default());\n+\n+    assert!(Bar::Qux < Bar::Quux(42));\n+}\n+"}]}