{"sha": "d6d9aa20031be1179eec2158ea9c6017989cfae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZDlhYTIwMDMxYmUxMTc5ZWVjMjE1OGVhOWM2MDE3OTg5Y2ZhZTk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-22T09:15:22Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-22T09:15:22Z"}, "message": "Change macro stack monitor test to func ptr based", "tree": {"sha": "6630cf85e659c1139c87f5866455882254ed4e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6630cf85e659c1139c87f5866455882254ed4e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d9aa20031be1179eec2158ea9c6017989cfae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d9aa20031be1179eec2158ea9c6017989cfae9", "html_url": "https://github.com/rust-lang/rust/commit/d6d9aa20031be1179eec2158ea9c6017989cfae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d9aa20031be1179eec2158ea9c6017989cfae9/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b177813f3bef708636ec4be271e376b111c36a59", "url": "https://api.github.com/repos/rust-lang/rust/commits/b177813f3bef708636ec4be271e376b111c36a59", "html_url": "https://github.com/rust-lang/rust/commit/b177813f3bef708636ec4be271e376b111c36a59"}], "stats": {"total": 65, "additions": 25, "deletions": 40}, "files": [{"sha": "4590a5184b176730be5b73b468810a96c78a4963", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d6d9aa20031be1179eec2158ea9c6017989cfae9/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d9aa20031be1179eec2158ea9c6017989cfae9/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=d6d9aa20031be1179eec2158ea9c6017989cfae9", "patch": "@@ -42,25 +42,21 @@ pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> C\n         unresolved_imports: Vec::new(),\n         unexpanded_macros: Vec::new(),\n         global_macro_scope: FxHashMap::default(),\n-        macro_stack_monitor: SimpleMacroStackMonitor::default(),\n+        macro_stack_monitor: MacroStackMonitor::default(),\n     };\n     collector.collect();\n     collector.finish()\n }\n \n-trait MacroStackMonitor {\n-    fn increase(&mut self, macro_def_id: MacroDefId);\n-    fn decrease(&mut self, macro_def_id: MacroDefId);\n-\n-    fn is_poison(&self, macro_def_id: MacroDefId) -> bool;\n-}\n-\n #[derive(Default)]\n-struct SimpleMacroStackMonitor {\n+struct MacroStackMonitor {\n     counts: FxHashMap<MacroDefId, u32>,\n+\n+    /// Mainly use for test\n+    validator: Option<Box<dyn Fn(u32) -> bool>>,\n }\n \n-impl MacroStackMonitor for SimpleMacroStackMonitor {\n+impl MacroStackMonitor {\n     fn increase(&mut self, macro_def_id: MacroDefId) {\n         *self.counts.entry(macro_def_id).or_default() += 1;\n     }\n@@ -70,12 +66,18 @@ impl MacroStackMonitor for SimpleMacroStackMonitor {\n     }\n \n     fn is_poison(&self, macro_def_id: MacroDefId) -> bool {\n-        *self.counts.get(&macro_def_id).unwrap_or(&0) > 100\n+        let cur = *self.counts.get(&macro_def_id).unwrap_or(&0);\n+\n+        if let Some(validator) = &self.validator {\n+            validator(cur)\n+        } else {\n+            cur > 100\n+        }\n     }\n }\n \n /// Walks the tree of module recursively\n-struct DefCollector<DB, M> {\n+struct DefCollector<DB> {\n     db: DB,\n     def_map: CrateDefMap,\n     glob_imports: FxHashMap<CrateModuleId, Vec<(CrateModuleId, raw::ImportId)>>,\n@@ -85,13 +87,12 @@ struct DefCollector<DB, M> {\n \n     /// Some macro use `$tt:tt which mean we have to handle the macro perfectly\n     /// To prevent stackoverflow, we add a deep counter here for prevent that.\n-    macro_stack_monitor: M,\n+    macro_stack_monitor: MacroStackMonitor,\n }\n \n-impl<'a, DB, M> DefCollector<&'a DB, M>\n+impl<'a, DB> DefCollector<&'a DB>\n where\n     DB: DefDatabase,\n-    M: MacroStackMonitor,\n {\n     fn collect(&mut self) {\n         let crate_graph = self.db.crate_graph();\n@@ -393,10 +394,9 @@ struct ModCollector<'a, D> {\n     raw_items: &'a raw::RawItems,\n }\n \n-impl<DB, M> ModCollector<'_, &'_ mut DefCollector<&'_ DB, M>>\n+impl<DB> ModCollector<'_, &'_ mut DefCollector<&'_ DB>>\n where\n     DB: DefDatabase,\n-    M: MacroStackMonitor,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n         for item in items {\n@@ -578,31 +578,10 @@ mod tests {\n     use super::*;\n     use rustc_hash::FxHashSet;\n \n-    struct LimitedMacroStackMonitor {\n-        count: u32,\n-        limit: u32,\n-        poison_limit: u32,\n-    }\n-\n-    impl MacroStackMonitor for LimitedMacroStackMonitor {\n-        fn increase(&mut self, _: MacroDefId) {\n-            self.count += 1;\n-            assert!(self.count < self.limit);\n-        }\n-\n-        fn decrease(&mut self, _: MacroDefId) {\n-            self.count -= 1;\n-        }\n-\n-        fn is_poison(&self, _: MacroDefId) -> bool {\n-            self.count >= self.poison_limit\n-        }\n-    }\n-\n     fn do_collect_defs(\n         db: &impl DefDatabase,\n         def_map: CrateDefMap,\n-        monitor: impl MacroStackMonitor,\n+        monitor: MacroStackMonitor,\n     ) -> CrateDefMap {\n         let mut collector = DefCollector {\n             db,\n@@ -639,7 +618,13 @@ mod tests {\n             }\n         };\n \n-        do_collect_defs(&db, def_map, LimitedMacroStackMonitor { count: 0, limit, poison_limit })\n+        let mut monitor = MacroStackMonitor::default();\n+        monitor.validator = Some(Box::new(move |count| {\n+            assert!(count < limit);\n+            count >= poison_limit\n+        }));\n+\n+        do_collect_defs(&db, def_map, monitor)\n     }\n \n     #[test]"}]}