{"sha": "0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "node_id": "C_kwDOAAsO6NoAKDBhMzVkYjVlMGQwZjg1NWVjOTcwNjI4MGNlZjIxZmRjOGExZjZjZTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T17:29:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T17:29:22Z"}, "message": "Fallible<_> -> Result<_, NoSolution>", "tree": {"sha": "11695cb4c0f1e43bfdaf544899ac64a57fc227c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11695cb4c0f1e43bfdaf544899ac64a57fc227c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "html_url": "https://github.com/rust-lang/rust/commit/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91525a43243e088abb34fca3d43fd8588b8667e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/91525a43243e088abb34fca3d43fd8588b8667e0", "html_url": "https://github.com/rust-lang/rust/commit/91525a43243e088abb34fca3d43fd8588b8667e0"}], "stats": {"total": 108, "additions": 55, "deletions": 53}, "files": [{"sha": "51a84ce6cadeac2914e5f5745362639dfbab5338", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -27,6 +27,7 @@ use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::*;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{SubstsRef, UserSubsts};\n@@ -42,7 +43,7 @@ use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n-use rustc_trait_selection::traits::query::Fallible;\n+\n use rustc_trait_selection::traits::PredicateObligation;\n \n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n@@ -1133,7 +1134,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         sup: Ty<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n-    ) -> Fallible<()> {\n+    ) -> Result<(), NoSolution> {\n         // Use this order of parameters because the sup type is usually the\n         // \"expected\" type in diagnostics.\n         self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)\n@@ -1146,7 +1147,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         found: Ty<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n-    ) -> Fallible<()> {\n+    ) -> Result<(), NoSolution> {\n         self.relate_types(expected, ty::Variance::Invariant, found, locations, category)\n     }\n \n@@ -1158,7 +1159,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         user_ty: &UserTypeProjection,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n-    ) -> Fallible<()> {\n+    ) -> Result<(), NoSolution> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n         trace!(?annotated_type);\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);"}, {"sha": "8c4bfb2c6e0d30721edb6459c35c95292bcb6cb8", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -3,11 +3,11 @@ use rustc_infer::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n-use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         b: Ty<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n-    ) -> Fallible<()> {\n+    ) -> Result<(), NoSolution> {\n         TypeRelating::new(\n             self.infcx,\n             NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::relate(a, b)),\n@@ -48,7 +48,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         b: ty::SubstsRef<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n-    ) -> Fallible<()> {\n+    ) -> Result<(), NoSolution> {\n         TypeRelating::new(\n             self.infcx,\n             NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::other()),"}, {"sha": "88256c819f4d4a0976fa77aafb047b2b92e9f033", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -15,7 +15,7 @@ use crate::infer::canonical::{\n use crate::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::{DefineOpaqueTypes, InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n-use crate::traits::query::{Fallible, NoSolution};\n+use crate::traits::query::NoSolution;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use crate::traits::{PredicateObligations, TraitEngine, TraitEngineExt};\n use rustc_data_structures::captures::Captures;\n@@ -57,7 +57,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, T>>\n+    ) -> Result<CanonicalQueryResponse<'tcx, T>, NoSolution>\n     where\n         T: Debug + TypeFoldable<TyCtxt<'tcx>>,\n         Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,"}, {"sha": "eae5a280e114d0a9aa953b6a7212a6ca58ffdbd0", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -95,8 +95,6 @@ pub type CanonicalTypeOpNormalizeGoal<'tcx, T> =\n #[derive(Copy, Clone, Debug, HashStable, PartialEq, Eq)]\n pub struct NoSolution;\n \n-pub type Fallible<T> = Result<T, NoSolution>;\n-\n impl<'tcx> From<TypeError<'tcx>> for NoSolution {\n     fn from(_: TypeError<'tcx>) -> NoSolution {\n         NoSolution"}, {"sha": "312bd38178fdda3e18587a6a68aa879b711e6ee0", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalQueryResponse, QueryResponse};\n-use rustc_middle::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_middle::ty::{GenericArg, ToPredicate};\n use rustc_span::DUMMY_SP;\n@@ -82,8 +82,8 @@ pub trait InferCtxtBuilderExt<'tcx> {\n     fn enter_canonical_trait_query<K, R>(\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n-        operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Fallible<R>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, R>>\n+        operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Result<R, NoSolution>,\n+    ) -> Result<CanonicalQueryResponse<'tcx, R>, NoSolution>\n     where\n         K: TypeFoldable<TyCtxt<'tcx>>,\n         R: Debug + TypeFoldable<TyCtxt<'tcx>>,\n@@ -110,8 +110,8 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n     fn enter_canonical_trait_query<K, R>(\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n-        operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Fallible<R>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, R>>\n+        operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Result<R, NoSolution>,\n+    ) -> Result<CanonicalQueryResponse<'tcx, R>, NoSolution>\n     where\n         K: TypeFoldable<TyCtxt<'tcx>>,\n         R: Debug + TypeFoldable<TyCtxt<'tcx>>,"}, {"sha": "2c5ffd664fe1de46269a8afd006d48c94c255a6a", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -14,11 +14,11 @@ use rustc_infer::infer::canonical::{\n };\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{DefineOpaqueTypes, InferCtxt, InferOk};\n-use rustc_infer::traits::query::Fallible;\n use rustc_infer::traits::{\n     FulfillmentError, Obligation, ObligationCause, PredicateObligation, TraitEngineExt as _,\n };\n use rustc_middle::arena::ArenaAllocatable;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::TypeFoldable;\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, T>>\n+    ) -> Result<CanonicalQueryResponse<'tcx, T>, NoSolution>\n     where\n         T: Debug + TypeFoldable<TyCtxt<'tcx>>,\n         Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,"}, {"sha": "c61f5454ec52e4f31f09ba865cd7ae50d909e391", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n-use crate::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::AscribeUserType;\n@@ -17,7 +17,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_ascribe_user_type(canonicalized)\n     }\n }"}, {"sha": "6d8d2103f39040a9a68c037b42a57e6a603af4e6", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,10 +1,10 @@\n use crate::infer::canonical::query_response;\n use crate::infer::InferCtxt;\n use crate::traits::query::type_op::TypeOpOutput;\n-use crate::traits::query::Fallible;\n use crate::traits::ObligationCtxt;\n use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::region_constraints::RegionConstraintData;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n \n@@ -18,15 +18,15 @@ pub struct CustomTypeOp<F> {\n impl<F> CustomTypeOp<F> {\n     pub fn new<'tcx, R>(closure: F, description: &'static str) -> Self\n     where\n-        F: FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n+        F: FnOnce(&ObligationCtxt<'_, 'tcx>) -> Result<R, NoSolution>,\n     {\n         CustomTypeOp { closure, description }\n     }\n }\n \n impl<'tcx, F, R: fmt::Debug> super::TypeOp<'tcx> for CustomTypeOp<F>\n where\n-    F: FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n+    F: FnOnce(&ObligationCtxt<'_, 'tcx>) -> Result<R, NoSolution>,\n {\n     type Output = R;\n     /// We can't do any custom error reporting for `CustomTypeOp`, so\n@@ -59,7 +59,7 @@ impl<F> fmt::Debug for CustomTypeOp<F> {\n /// constraints that result, creating query-region-constraints.\n pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     infcx: &InferCtxt<'tcx>,\n-    op: impl FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n+    op: impl FnOnce(&ObligationCtxt<'_, 'tcx>) -> Result<R, NoSolution>,\n     name: &'static str,\n     span: Span,\n ) -> Result<(TypeOpOutput<'tcx, Op>, RegionConstraintData<'tcx>), ErrorGuaranteed> {"}, {"sha": "40f8ecfd4ce101b7cf54bfff0e63cbfb7f90d0bd", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n-use crate::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::Eq;\n@@ -17,7 +17,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_eq(canonicalized)\n     }\n }"}, {"sha": "26f0d554d350851f4d4e432745686c139de829f7", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n-use crate::traits::query::Fallible;\n use rustc_infer::traits::query::OutlivesBound;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n@@ -28,7 +28,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self::QueryResponse>, NoSolution> {\n         // FIXME this `unchecked_map` is only necessary because the\n         // query is defined as taking a `ParamEnvAnd<Ty>`; it should\n         // take an `ImpliedOutlivesBounds` instead"}, {"sha": "642326598480426e18a6faea247b19b4eb5a56dd", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -2,11 +2,11 @@ use crate::infer::canonical::{\n     Canonical, CanonicalQueryResponse, OriginalQueryValues, QueryRegionConstraints,\n };\n use crate::infer::{InferCtxt, InferOk};\n-use crate::traits::query::Fallible;\n use crate::traits::ObligationCause;\n use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::canonical::Certainty;\n use rustc_infer::traits::PredicateObligations;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use rustc_span::Span;\n@@ -79,18 +79,21 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<TyCtxt<'tcx>> + 't\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>>;\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self::QueryResponse>, NoSolution>;\n \n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'tcx>,\n         output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,\n-    ) -> Fallible<(\n-        Self::QueryResponse,\n-        Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,\n-        PredicateObligations<'tcx>,\n-        Certainty,\n-    )> {\n+    ) -> Result<\n+        (\n+            Self::QueryResponse,\n+            Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,\n+            PredicateObligations<'tcx>,\n+            Certainty,\n+        ),\n+        NoSolution,\n+    > {\n         if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {\n             return Ok((result, None, vec![], Certainty::Proven));\n         }"}, {"sha": "776c74fdfae4b9c96ac9b3397f72fb59e31c6a5c", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/normalize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n-use crate::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt, TypeVisitableExt};\n use std::fmt;\n@@ -19,7 +19,7 @@ where\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self::QueryResponse>, NoSolution> {\n         T::type_op_method(tcx, canonicalized)\n     }\n }\n@@ -28,14 +28,14 @@ pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<TyCtxt<'tcx>> + Lift<'tc\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>>;\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self>, NoSolution>;\n }\n \n impl<'tcx> Normalizable<'tcx> for Ty<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self>, NoSolution> {\n         tcx.type_op_normalize_ty(canonicalized)\n     }\n }\n@@ -44,7 +44,7 @@ impl<'tcx> Normalizable<'tcx> for ty::Predicate<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self>, NoSolution> {\n         tcx.type_op_normalize_predicate(canonicalized)\n     }\n }\n@@ -53,7 +53,7 @@ impl<'tcx> Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self>, NoSolution> {\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n }\n@@ -62,7 +62,7 @@ impl<'tcx> Normalizable<'tcx> for ty::FnSig<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self>, NoSolution> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n }"}, {"sha": "7ce09bbdb7af366ee3acb78aae5718e29a4df847", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::dropck_outlives::{trivial_dropck_outlives, DropckOutlivesResult};\n-use crate::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n@@ -27,7 +27,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, Self::QueryResponse>, NoSolution> {\n         // Subtle: note that we are not invoking\n         // `infcx.at(...).dropck_outlives(...)` here, but rather the\n         // underlying `dropck_outlives` query. This same underlying"}, {"sha": "7c02f363960d7aca560b7b0f6e1069a03ac5a9a2", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n-use crate::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::ProvePredicate;\n@@ -33,7 +33,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n }"}, {"sha": "2f2b931afcff4beb461bb075498c29ec5e20e430", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n-use crate::traits::query::Fallible;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::Subtype;\n@@ -14,7 +14,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n+    ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_subtype(canonicalized)\n     }\n }"}, {"sha": "49cbf9efa749379643d7ab5757e8be40f665d8b1", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n-use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n+use rustc_trait_selection::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc_trait_selection::traits::wf;\n use rustc_trait_selection::traits::ObligationCtxt;\n use smallvec::{smallvec, SmallVec};\n@@ -37,7 +37,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n     ocx: &ObligationCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n-) -> Fallible<Vec<OutlivesBound<'tcx>>> {\n+) -> Result<Vec<OutlivesBound<'tcx>>, NoSolution> {\n     let tcx = ocx.infcx.tcx;\n \n     // Sometimes when we ask what it takes for T: WF, we get back that"}, {"sha": "faf985169deff14e6b8e31a199c27cc9959f68ba", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=0a35db5e0d0f855ec9706280cef21fdc8a1f6ce5", "patch": "@@ -2,6 +2,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::query::Providers;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::{DefiningAnchor, ObligationCauseCode};\n use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{ParamEnvAnd, Predicate};\n@@ -15,7 +16,6 @@ use rustc_trait_selection::traits::query::type_op::eq::Eq;\n use rustc_trait_selection::traits::query::type_op::normalize::Normalize;\n use rustc_trait_selection::traits::query::type_op::prove_predicate::ProvePredicate;\n use rustc_trait_selection::traits::query::type_op::subtype::Subtype;\n-use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{Normalized, Obligation, ObligationCause, ObligationCtxt};\n use std::fmt;\n \n@@ -160,7 +160,7 @@ fn type_op_eq<'tcx>(\n fn type_op_normalize<'tcx, T>(\n     ocx: &ObligationCtxt<'_, 'tcx>,\n     key: ParamEnvAnd<'tcx, Normalize<T>>,\n-) -> Fallible<T>\n+) -> Result<T, NoSolution>\n where\n     T: fmt::Debug + TypeFoldable<TyCtxt<'tcx>> + Lift<'tcx>,\n {"}]}