{"sha": "b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MGJiODAwYTViNWUwMWI2Y2I0ZGUxMDMzMGZkNWI2MWQ2Y2QwZGI=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-12T14:26:43Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-12T14:26:43Z"}, "message": "Merge branch 'master' into add-disable-diagnostics", "tree": {"sha": "adb19b05996e8a2829f5a6eb0ed7017404aaf7da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb19b05996e8a2829f5a6eb0ed7017404aaf7da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "html_url": "https://github.com/rust-lang/rust/commit/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f736d4a13bdf5af2cdd6a4832a41470431a70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f736d4a13bdf5af2cdd6a4832a41470431a70b", "html_url": "https://github.com/rust-lang/rust/commit/13f736d4a13bdf5af2cdd6a4832a41470431a70b"}, {"sha": "6be5ab02008b442c85c201968b97f24f13c4692e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be5ab02008b442c85c201968b97f24f13c4692e", "html_url": "https://github.com/rust-lang/rust/commit/6be5ab02008b442c85c201968b97f24f13c4692e"}], "stats": {"total": 3189, "additions": 1907, "deletions": 1282}, "files": [{"sha": "f46fb8fecc2b23a9ae4499b8982dcf63eb47b553", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -16,20 +16,6 @@ env:\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:\n-  # rust-audit:\n-  #   name: Audit Rust vulnerabilities\n-  #   runs-on: ubuntu-latest\n-  #   steps:\n-  #   - name: Checkout repository\n-  #     uses: actions/checkout@v2\n-\n-  #   - uses: actions-rs/install@v0.1\n-  #     with:\n-  #       crate: cargo-audit\n-  #       use-tool-cache: true\n-\n-  #   - run: cargo audit\n-\n   rust:\n     name: Rust\n     runs-on: ${{ matrix.os }}\n@@ -88,11 +74,14 @@ jobs:\n       if: matrix.os == 'windows-latest'\n       run: Remove-Item ./target/debug/xtask.exe, ./target/debug/deps/xtask.exe\n \n-  # Weird target to catch non-portable code\n-  rust-power:\n-    name: Rust Power\n+  # Weird targets to catch non-portable code\n+  rust-cross:\n+    name: Rust Cross\n     runs-on: ubuntu-latest\n \n+    env:\n+      targets: \"powerpc-unknown-linux-gnu x86_64-unknown-linux-musl\"\n+\n     steps:\n     - name: Checkout repository\n       uses: actions/checkout@v2\n@@ -103,7 +92,9 @@ jobs:\n         toolchain: stable\n         profile: minimal\n         override: true\n-        target: 'powerpc-unknown-linux-gnu'\n+\n+    - name: Install Rust targets\n+      run: rustup target add ${{ env.targets }}\n \n     - name: Cache cargo directories\n       uses: actions/cache@v2\n@@ -114,7 +105,10 @@ jobs:\n         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n \n     - name: Check\n-      run: cargo check --target=powerpc-unknown-linux-gnu --all-targets\n+      run: |\n+        for target in ${{ env.targets }}; do\n+          cargo check --target=$target --all-targets\n+        done\n \n   typescript:\n     name: TypeScript"}, {"sha": "26588916254f082c22aebdb5e6b879333c8f2561", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -125,9 +125,9 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.19.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"654c611946ba2629c5028cb7708687af975faf2c29d731824cb294c873df4697\"\n+checksum = \"c1df0dbb57d74b4acd20f20fa66ab2acd09776b79eaeb9d8f947b2f3e01c40bf\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -137,19 +137,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.19.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0a5341fbc654ca886b73b804a36aebf0e621057ccc1a68e9815b5b39b3ac9ae8\"\n+checksum = \"44361a25dbdb1dc428f56ad7a3c21ba9ca12f3225c26a47919ff6fcb10a583d4\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-recursive\"\n-version = \"0.19.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4484807b155b5a411e6135d330295f9ba5042e2920b8712c6574ca6ea91e9ee5\"\n+checksum = \"dd89556b98de156d5eaf21077d297cd2198628f10f2df140798ea3a5dd84bc86\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -160,9 +160,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.19.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"281f82facd2538997fbe52132b1941ed213d266748215c31d15f62a8664429ad\"\n+checksum = \"a886da37a0dc457057d86f78f026f7a09c6d8088aa13f4f4127fdb8dc80119a3\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -418,9 +418,9 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.8.1\"\n+version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"34f595585f103464d8d2f6e9864682d74c1601fed5e07d62b1c9058dba8246fb\"\n+checksum = \"e91b62f79061a0bc2e046024cb7ba44b08419ed238ecbd9adbd787434b9e8c25\"\n dependencies = [\n  \"autocfg\",\n ]\n@@ -465,9 +465,9 @@ dependencies = [\n \n [[package]]\n name = \"indexmap\"\n-version = \"1.5.0\"\n+version = \"1.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b88cd59ee5f71fea89a62248fc8f387d44400cefe05ef548466d61ced9029a7\"\n+checksum = \"86b45e59b16c76b11bf9738fd5d38879d3bd28ad292d7b313608becb17ae2df9\"\n dependencies = [\n  \"autocfg\",\n  \"hashbrown\",\n@@ -852,9 +852,9 @@ dependencies = [\n \n [[package]]\n name = \"perf-event-open-sys\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"95db63e37862bc1b842135d2234ef9418f222cc660c6752f45e7cf9ddfb97f96\"\n+checksum = \"83e7183862f36d10263d0a1ccaef50fef734ade948bf026afd1bd97355c78273\"\n dependencies = [\n  \"libc\",\n ]\n@@ -871,9 +871,9 @@ dependencies = [\n \n [[package]]\n name = \"pico-args\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1b1eee8b1f4966c8343d7ca0f5a8452cd35d5610a2e0efbe2a68cae44bef2046\"\n+checksum = \"28b9b4df73455c861d7cbf8be42f01d3b373ed7f02e378d55fa84eafc6f638b1\"\n \n [[package]]\n name = \"plain\"\n@@ -1694,9 +1694,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-tree\"\n-version = \"0.1.4\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"37ee7f0f53ed2093971a698db799ef56a2dfd89b32e3aeb5165f0e637a02be04\"\n+checksum = \"e1a3dc4774db3a6b2d66a4f8d8de670e874ec3ed55615860c994927419b32c5f\"\n dependencies = [\n  \"ansi_term\",\n  \"atty\","}, {"sha": "bd83895f78251f2ecac9cba72a3fd64e46ce31dd", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -74,7 +74,7 @@ impl fmt::Display for Position {\n impl Expect {\n     pub fn assert_eq(&self, actual: &str) {\n         let trimmed = self.trimmed();\n-        if &trimmed == actual {\n+        if trimmed == actual {\n             return;\n         }\n         Runtime::fail_expect(self, &trimmed, actual);"}, {"sha": "31e14246de872732dba169e83a8cce5eac0e7673", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,4 +1,4 @@\n-//! cargo_check provides the functionality needed to run `cargo check` or\n+//! Flycheck provides the functionality needed to run `cargo check` or\n //! another compatible command (f.x. clippy) in a background thread and provide\n //! LSP diagnostics based on the output of the command.\n \n@@ -147,6 +147,12 @@ impl FlycheckActor {\n                     // avoid busy-waiting.\n                     let cargo_handle = self.cargo_handle.take().unwrap();\n                     let res = cargo_handle.join();\n+                    if res.is_err() {\n+                        log::error!(\n+                            \"Flycheck failed to run the following command: {:?}\",\n+                            self.check_command()\n+                        )\n+                    }\n                     self.send(Message::Progress(Progress::DidFinish(res)));\n                 }\n                 Event::CheckEvent(Some(message)) => match message {\n@@ -253,7 +259,7 @@ impl CargoHandle {\n             return Err(io::Error::new(\n                 io::ErrorKind::Other,\n                 format!(\n-                    \"Cargo watcher failed,the command produced no valid metadata (exit code: {:?})\",\n+                    \"Cargo watcher failed, the command produced no valid metadata (exit code: {:?})\",\n                     exit_status\n                 ),\n             ));"}, {"sha": "07c978378a6900d887155f0cd01d38325da28d2f", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -51,7 +51,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n             // The actual list of trait type parameters may be longer than the one\n-            // used in the `impl` block due to trailing default type parametrs.\n+            // used in the `impl` block due to trailing default type parameters.\n             // For that case we extend the `substs` with an empty iterator so we\n             // can still hit those trailing values and check if they actually have\n             // a default type. If they do, go for that type from `hir` to `ast` so"}, {"sha": "ebdf00e676c7b63d5eee14221065c626861609cd", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,10 +1,10 @@\n+use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode},\n     Direction, SmolStr,\n     SyntaxKind::{IDENT, WHITESPACE},\n     TextRange, TextSize,\n };\n-use stdx::SepBy;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -61,9 +61,9 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             .filter(|t| t != trait_token.text())\n             .collect::<Vec<SmolStr>>();\n         let has_more_derives = !new_attr_input.is_empty();\n-        let new_attr_input = new_attr_input.iter().sep_by(\", \").surround_with(\"(\", \")\").to_string();\n \n         if has_more_derives {\n+            let new_attr_input = format!(\"({})\", new_attr_input.iter().format(\", \"));\n             builder.replace(input.syntax().text_range(), new_attr_input);\n         } else {\n             let attr_range = attr.syntax().text_range();"}, {"sha": "537322a72c3426e7a55843a8ced2851c8a04e791", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let name_ref = ast::NameRef::cast(ident.parent())?;\n     let def = match classify_name_ref(&ctx.sema, &name_ref)? {\n         NameRefClass::Definition(def) => def,\n-        NameRefClass::FieldShorthand { .. } => return None,\n+        NameRefClass::ExternCrate(_) | NameRefClass::FieldShorthand { .. } => return None,\n     };\n     let fun = match def {\n         Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,"}, {"sha": "3ac4aed7d2937256fbc347cf51cbc511c5e99aa8", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -4,7 +4,7 @@ use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKin\n \n // Assist: apply_demorgan\n //\n-// Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws).\n+// Apply https://en.wikipedia.org/wiki/De_Morgan%27s_laws[De Morgan's law].\n // This transforms expressions of the form `!l || !r` into `!(l && r)`.\n // This also works with `&&`. This assist can only be applied with the cursor\n // on either `||` or `&&`, with both operands being a negation of some kind."}, {"sha": "a19dbf33f6bc85cfc129fd8f4f5789c2f621f9bf", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -121,7 +121,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n             Some(cap) => match current_visibility {\n                 Some(current_visibility) => builder.replace_snippet(\n                     cap,\n-                    dbg!(current_visibility.syntax()).text_range(),\n+                    current_visibility.syntax().text_range(),\n                     format!(\"$0{}\", missing_visibility),\n                 ),\n                 None => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),"}, {"sha": "7162dc184868c9b1e48664479e1a5cc506b587a7", "filename": "crates/ra_assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,5 +1,6 @@\n+use itertools::Itertools;\n use ra_syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner};\n-use stdx::{format_to, SepBy};\n+use stdx::format_to;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -50,7 +51,7 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n                     .filter_map(|it| it.name())\n                     .map(|it| it.text().clone());\n \n-                let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n+                let generic_params = lifetime_params.chain(type_params).format(\", \");\n                 format_to!(buf, \"<{}>\", generic_params)\n             }\n             match ctx.config.snippet_cap {"}, {"sha": "32dfed274adc1262975f3ab6669495a0e6851701", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,9 +1,10 @@\n use hir::Adt;\n+use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n     T,\n };\n-use stdx::{format_to, SepBy};\n+use stdx::format_to;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -52,8 +53,8 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         let params = field_list\n             .fields()\n             .filter_map(|f| Some(format!(\"{}: {}\", f.name()?.syntax(), f.ty()?.syntax())))\n-            .sep_by(\", \");\n-        let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n+            .format(\", \");\n+        let fields = field_list.fields().filter_map(|f| f.name()).format(\", \");\n \n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n@@ -102,7 +103,7 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n             .map(|it| it.text().clone());\n         let type_params =\n             type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n-        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).sep_by(\", \"))\n+        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).format(\", \"))\n     }\n \n     format_to!(buf, \" {{\\n{}\\n}}\\n\", code);"}, {"sha": "890996a68d9bd347f2da0c092c287c1d418b13e5", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -66,13 +66,13 @@ pub struct GroupLabel(pub String);\n \n #[derive(Debug, Clone)]\n pub struct Assist {\n-    pub id: AssistId,\n+    id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n-    pub label: String,\n-    pub group: Option<GroupLabel>,\n+    label: String,\n+    group: Option<GroupLabel>,\n     /// Target ranges are used to sort assists: the smaller the target range,\n     /// the more specific assist is, and so it should be sorted first.\n-    pub target: TextRange,\n+    target: TextRange,\n }\n \n #[derive(Debug, Clone)]\n@@ -120,10 +120,25 @@ impl Assist {\n         group: Option<GroupLabel>,\n         target: TextRange,\n     ) -> Assist {\n-        // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n         Assist { id, label, group, target }\n     }\n+\n+    pub fn id(&self) -> AssistId {\n+        self.id\n+    }\n+\n+    pub fn label(&self) -> String {\n+        self.label.clone()\n+    }\n+\n+    pub fn group(&self) -> Option<GroupLabel> {\n+        self.group.clone()\n+    }\n+\n+    pub fn target(&self) -> TextRange {\n+        self.target\n+    }\n }\n \n mod handlers {"}, {"sha": "e738364220d6dc8160c669b26fcafd9756105892", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_\n \n // FIXME: instead of having a separate function here, maybe use\n // `extract_ranges` and mark the target as `<target> </target>` in the\n-// fixuture?\n+// fixture?\n pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n     check(assist, ra_fixture, ExpectedResult::Target(target));\n }"}, {"sha": "0de6fdf3fb8a548dbf9f76f8dc157190e200f7a2", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -257,7 +257,7 @@ pub use prelude::*;\n             .find(|dep| &dep.name.to_string() == std_crate)?\n             .krate;\n \n-        let mut module = std_crate.root_module(db)?;\n+        let mut module = std_crate.root_module(db);\n         for segment in path {\n             module = module.children(db).find_map(|child| {\n                 let name = child.name(db)?;"}, {"sha": "0007d7fa881a1fdf95a8de92b5d0c7eca4c04d10", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -4,6 +4,7 @@ use std::{iter, sync::Arc};\n use arrayvec::ArrayVec;\n use either::Either;\n use hir_def::{\n+    adt::ReprKind,\n     adt::StructKind,\n     adt::VariantData,\n     builtin_type::BuiltinType,\n@@ -83,9 +84,9 @@ impl Crate {\n             .collect()\n     }\n \n-    pub fn root_module(self, db: &dyn HirDatabase) -> Option<Module> {\n+    pub fn root_module(self, db: &dyn HirDatabase) -> Module {\n         let module_id = db.crate_def_map(self.id).root;\n-        Some(Module::new(self, module_id))\n+        Module::new(self, module_id)\n     }\n \n     pub fn root_file(self, db: &dyn HirDatabase) -> FileId {\n@@ -431,6 +432,10 @@ impl Struct {\n         Type::from_def(db, self.id.lookup(db.upcast()).container.module(db.upcast()).krate, self.id)\n     }\n \n+    pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprKind> {\n+        db.struct_data(self.id).repr.clone()\n+    }\n+\n     fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {\n         db.struct_data(self.id).variant_data.clone()\n     }\n@@ -1253,6 +1258,19 @@ impl Type {\n         )\n     }\n \n+    pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n+        let adt_id = match self.ty.value {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_id), .. }) => adt_id,\n+            _ => return false,\n+        };\n+\n+        let adt = adt_id.into();\n+        match adt {\n+            Adt::Struct(s) => matches!(s.repr(db), Some(ReprKind::Packed)),\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_raw_ptr(&self) -> bool {\n         matches!(&self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }))\n     }"}, {"sha": "363164b9b4a68bc98c5afb5e1b465a6b1ac64785", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,8 +1,6 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::UnresolvedModule;\n-pub use hir_expand::diagnostics::{\n-    AstDiagnostic, Diagnostic, DiagnosticSink, DiagnosticSinkBuilder,\n-};\n+pub use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticSinkBuilder};\n pub use hir_ty::diagnostics::{\n     MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,\n };"}, {"sha": "34b02c5365f95ffa258dac6930b720764becfe81", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -49,7 +49,7 @@ pub use hir_def::{\n     docs::Documentation,\n     nameres::ModuleSource,\n     path::{ModPath, Path, PathKind},\n-    type_ref::Mutability,\n+    type_ref::{Mutability, TypeRef},\n };\n pub use hir_expand::{\n     hygiene::Hygiene, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc,"}, {"sha": "36b688ccb697c2e0b218f0930e8df0e72d9e9085", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 124, "deletions": 14, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{diagnostics::AstDiagnostic, hygiene::Hygiene, ExpansionInfo};\n+use hir_expand::{hygiene::Hygiene, name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n@@ -24,8 +24,9 @@ use crate::{\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, resolve_hir_path_qualifier, SourceAnalyzer},\n-    AssocItem, Callable, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module,\n-    ModuleDef, Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    AssocItem, Callable, Crate, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef,\n+    Module, ModuleDef, Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, TypeRef,\n+    VariantDef,\n };\n use resolver::TypeNs;\n \n@@ -109,13 +110,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.parse(file_id)\n     }\n \n-    pub fn ast<T: AstDiagnostic + Diagnostic>(&self, d: &T) -> <T as AstDiagnostic>::AST {\n-        let file_id = d.source().file_id;\n-        let root = self.db.parse_or_expand(file_id).unwrap();\n-        self.imp.cache(root, file_id);\n-        d.ast(self.db.upcast())\n-    }\n-\n     pub fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n         self.imp.expand(macro_call)\n     }\n@@ -145,8 +139,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.original_range(node)\n     }\n \n-    pub fn diagnostics_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n-        self.imp.diagnostics_range(diagnostics)\n+    pub fn diagnostics_display_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        self.imp.diagnostics_display_range(diagnostics)\n     }\n \n     pub fn ancestors_with_macros(&self, node: SyntaxNode) -> impl Iterator<Item = SyntaxNode> + '_ {\n@@ -228,6 +222,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n+    pub fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n+        self.imp.resolve_extern_crate(extern_crate)\n+    }\n+\n     pub fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantDef> {\n         self.imp.resolve_variant(record_lit).map(VariantDef::from)\n     }\n@@ -275,6 +273,18 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     pub fn assert_contains_node(&self, node: &SyntaxNode) {\n         self.imp.assert_contains_node(node)\n     }\n+\n+    pub fn is_unsafe_method_call(&self, method_call_expr: ast::MethodCallExpr) -> bool {\n+        self.imp.is_unsafe_method_call(method_call_expr)\n+    }\n+\n+    pub fn is_unsafe_ref_expr(&self, ref_expr: &ast::RefExpr) -> bool {\n+        self.imp.is_unsafe_ref_expr(ref_expr)\n+    }\n+\n+    pub fn is_unsafe_ident_pat(&self, ident_pat: &ast::IdentPat) -> bool {\n+        self.imp.is_unsafe_ident_pat(ident_pat)\n+    }\n }\n \n impl<'db> SemanticsImpl<'db> {\n@@ -372,10 +382,11 @@ impl<'db> SemanticsImpl<'db> {\n         original_range(self.db, node.as_ref())\n     }\n \n-    fn diagnostics_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n-        let src = diagnostics.source();\n+    fn diagnostics_display_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        let src = diagnostics.display_source();\n         let root = self.db.parse_or_expand(src.file_id).unwrap();\n         let node = src.value.to_node(&root);\n+        self.cache(root, src.file_id);\n         original_range(self.db, src.with_value(&node))\n     }\n \n@@ -443,6 +454,17 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n+        let krate = self.scope(extern_crate.syntax()).krate()?;\n+        krate.dependencies(self.db).into_iter().find_map(|dep| {\n+            if dep.name == extern_crate.name_ref()?.as_name() {\n+                Some(dep.krate)\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n     fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {\n         self.analyze(record_lit.syntax()).resolve_variant(self.db, record_lit)\n     }\n@@ -559,6 +581,90 @@ impl<'db> SemanticsImpl<'db> {\n         });\n         InFile::new(file_id, node)\n     }\n+\n+    pub fn is_unsafe_method_call(&self, method_call_expr: ast::MethodCallExpr) -> bool {\n+        method_call_expr\n+            .expr()\n+            .and_then(|expr| {\n+                let field_expr = if let ast::Expr::FieldExpr(field_expr) = expr {\n+                    field_expr\n+                } else {\n+                    return None;\n+                };\n+                let ty = self.type_of_expr(&field_expr.expr()?)?;\n+                if !ty.is_packed(self.db) {\n+                    return None;\n+                }\n+\n+                let func = self.resolve_method_call(&method_call_expr).map(Function::from)?;\n+                let is_unsafe = func.has_self_param(self.db)\n+                    && matches!(func.params(self.db).first(), Some(TypeRef::Reference(..)));\n+                Some(is_unsafe)\n+            })\n+            .unwrap_or(false)\n+    }\n+\n+    pub fn is_unsafe_ref_expr(&self, ref_expr: &ast::RefExpr) -> bool {\n+        ref_expr\n+            .expr()\n+            .and_then(|expr| {\n+                let field_expr = match expr {\n+                    ast::Expr::FieldExpr(field_expr) => field_expr,\n+                    _ => return None,\n+                };\n+                let expr = field_expr.expr()?;\n+                self.type_of_expr(&expr)\n+            })\n+            // Binding a reference to a packed type is possibly unsafe.\n+            .map(|ty| ty.is_packed(self.db))\n+            .unwrap_or(false)\n+\n+        // FIXME This needs layout computation to be correct. It will highlight\n+        // more than it should with the current implementation.\n+    }\n+\n+    pub fn is_unsafe_ident_pat(&self, ident_pat: &ast::IdentPat) -> bool {\n+        if !ident_pat.ref_token().is_some() {\n+            return false;\n+        }\n+\n+        ident_pat\n+            .syntax()\n+            .parent()\n+            .and_then(|parent| {\n+                // `IdentPat` can live under `RecordPat` directly under `RecordPatField` or\n+                // `RecordPatFieldList`. `RecordPatField` also lives under `RecordPatFieldList`,\n+                // so this tries to lookup the `IdentPat` anywhere along that structure to the\n+                // `RecordPat` so we can get the containing type.\n+                let record_pat = ast::RecordPatField::cast(parent.clone())\n+                    .and_then(|record_pat| record_pat.syntax().parent())\n+                    .or_else(|| Some(parent.clone()))\n+                    .and_then(|parent| {\n+                        ast::RecordPatFieldList::cast(parent)?\n+                            .syntax()\n+                            .parent()\n+                            .and_then(ast::RecordPat::cast)\n+                    });\n+\n+                // If this doesn't match a `RecordPat`, fallback to a `LetStmt` to see if\n+                // this is initialized from a `FieldExpr`.\n+                if let Some(record_pat) = record_pat {\n+                    self.type_of_pat(&ast::Pat::RecordPat(record_pat))\n+                } else if let Some(let_stmt) = ast::LetStmt::cast(parent) {\n+                    let field_expr = match let_stmt.initializer()? {\n+                        ast::Expr::FieldExpr(field_expr) => field_expr,\n+                        _ => return None,\n+                    };\n+\n+                    self.type_of_expr(&field_expr.expr()?)\n+                } else {\n+                    None\n+                }\n+            })\n+            // Binding a reference to a packed type is possibly unsafe.\n+            .map(|ty| ty.is_packed(self.db))\n+            .unwrap_or(false)\n+    }\n }\n \n pub trait ToDef: AstNode + Clone {\n@@ -612,6 +718,10 @@ impl<'a> SemanticsScope<'a> {\n         Some(Module { id: self.resolver.module()? })\n     }\n \n+    pub fn krate(&self) -> Option<Crate> {\n+        Some(Crate { id: self.resolver.krate()? })\n+    }\n+\n     /// Note: `FxHashSet<TraitId>` should be treated as an opaque type, passed into `Type\n     // FIXME: rename to visible_traits to not repeat scope?\n     pub fn traits_in_scope(&self) -> FxHashSet<TraitId> {"}, {"sha": "d3d62debfdddf3bec8f94f6ef543e65e3efdfaee", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -265,8 +265,7 @@ impl SourceAnalyzer {\n         }\n \n         // This must be a normal source file rather than macro file.\n-        let hir_path =\n-            crate::Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;\n+        let hir_path = Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we\n         // trying to resolve foo::bar.\n@@ -451,7 +450,7 @@ fn adjust(\n pub(crate) fn resolve_hir_path(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n-    path: &crate::Path,\n+    path: &Path,\n ) -> Option<PathResolution> {\n     let types =\n         resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n@@ -512,7 +511,7 @@ pub(crate) fn resolve_hir_path(\n pub(crate) fn resolve_hir_path_qualifier(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n-    path: &crate::Path,\n+    path: &Path,\n ) -> Option<PathResolution> {\n     let items = resolver\n         .resolve_module_path_in_items(db.upcast(), path.mod_path())"}, {"sha": "35c3a9140257b4c0067722b1255f96cdfa244756", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -9,11 +9,12 @@ use hir_expand::{\n };\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, VisibilityOwner};\n+use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n \n use crate::{\n     body::{CfgExpander, LowerCtx},\n     db::DefDatabase,\n-    item_tree::{Field, Fields, ItemTree},\n+    item_tree::{AttrOwner, Field, Fields, ItemTree, ModItem},\n     src::HasChildSource,\n     src::HasSource,\n     trace::Trace,\n@@ -29,6 +30,7 @@ use ra_cfg::CfgOptions;\n pub struct StructData {\n     pub name: Name,\n     pub variant_data: Arc<VariantData>,\n+    pub repr: Option<ReprKind>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -58,26 +60,58 @@ pub struct FieldData {\n     pub visibility: RawVisibility,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ReprKind {\n+    Packed,\n+    Other,\n+}\n+\n+fn repr_from_value(item_tree: &ItemTree, of: AttrOwner) -> Option<ReprKind> {\n+    item_tree.attrs(of).by_key(\"repr\").tt_values().find_map(parse_repr_tt)\n+}\n+\n+fn parse_repr_tt(tt: &Subtree) -> Option<ReprKind> {\n+    match tt.delimiter {\n+        Some(Delimiter { kind: DelimiterKind::Parenthesis, .. }) => {}\n+        _ => return None,\n+    }\n+\n+    let mut it = tt.token_trees.iter();\n+    match it.next()? {\n+        TokenTree::Leaf(Leaf::Ident(ident)) if ident.text == \"packed\" => Some(ReprKind::Packed),\n+        _ => Some(ReprKind::Other),\n+    }\n+}\n+\n impl StructData {\n     pub(crate) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let item_tree = db.item_tree(loc.id.file_id);\n+        let repr = repr_from_value(&item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n         let strukt = &item_tree[loc.id.value];\n         let variant_data = lower_fields(&item_tree, &cfg_options, &strukt.fields);\n-\n-        Arc::new(StructData { name: strukt.name.clone(), variant_data: Arc::new(variant_data) })\n+        Arc::new(StructData {\n+            name: strukt.name.clone(),\n+            variant_data: Arc::new(variant_data),\n+            repr,\n+        })\n     }\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let item_tree = db.item_tree(loc.id.file_id);\n+        let repr = repr_from_value(&item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n         let union = &item_tree[loc.id.value];\n         let variant_data = lower_fields(&item_tree, &cfg_options, &union.fields);\n \n-        Arc::new(StructData { name: union.name.clone(), variant_data: Arc::new(variant_data) })\n+        Arc::new(StructData {\n+            name: union.name.clone(),\n+            variant_data: Arc::new(variant_data),\n+            repr,\n+        })\n     }\n }\n "}, {"sha": "5b7f05bf41666b0320062197bba267192c78fed9", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -21,7 +21,7 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.decl.clone().into())\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {"}, {"sha": "a618934c9a79fe955f4faf72c46a078edce98f91", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -16,36 +16,21 @@\n \n use std::{any::Any, fmt};\n \n-use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n+use ra_syntax::SyntaxNodePtr;\n \n-use crate::{db::AstDatabase, InFile};\n+use crate::InFile;\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn name(&self) -> &'static str;\n     fn message(&self) -> String;\n-    fn source(&self) -> InFile<SyntaxNodePtr>;\n+    /// Used in highlighting and related purposes\n+    fn display_source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n     fn is_experimental(&self) -> bool {\n         false\n     }\n }\n \n-pub trait AstDiagnostic {\n-    type AST;\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST;\n-}\n-\n-impl dyn Diagnostic {\n-    pub fn syntax_node(&self, db: &impl AstDatabase) -> SyntaxNode {\n-        let node = db.parse_or_expand(self.source().file_id).unwrap();\n-        self.source().value.to_node(&node)\n-    }\n-\n-    pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n-        self.as_any().downcast_ref()\n-    }\n-}\n-\n pub struct DiagnosticSink<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n     filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n@@ -90,7 +75,7 @@ impl<'a> DiagnosticSinkBuilder<'a> {\n     }\n \n     pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> Self {\n-        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n+        let cb = move |diag: &dyn Diagnostic| match diag.as_any().downcast_ref::<D>() {\n             Some(d) => {\n                 cb(d);\n                 Ok(())"}, {"sha": "aefe47bd32acc819d310bd05e910dac0fc54f9c5", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -17,7 +17,7 @@ pub struct Hygiene {\n     // This is what `$crate` expands to\n     def_crate: Option<CrateId>,\n \n-    // Indiciate this is a local inner macro\n+    // Indicate this is a local inner macro\n     local_inner: bool,\n }\n "}, {"sha": "8bb735fc62544452ff37dc1f604b7b364a4003eb", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -44,7 +44,8 @@ mod test_db;\n /// containing the call plus the offset of the macro call in the file. Note that\n /// this is a recursive definition! However, the size_of of `HirFileId` is\n /// finite (because everything bottoms out at the real `FileId`) and small\n-/// (`MacroCallId` uses the location interner).\n+/// (`MacroCallId` uses the location interning. You can check details here:\n+/// https://en.wikipedia.org/wiki/String_interning).\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct HirFileId(HirFileIdRepr);\n "}, {"sha": "83397d5793b4814bdceb49f67a2ef4da82ea641b", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -28,9 +28,9 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve = { version = \"0.19.0\" }\n-chalk-ir = { version = \"0.19.0\" }\n-chalk-recursive = { version = \"0.19.0\" }\n+chalk-solve = { version = \"0.21.0\" }\n+chalk-ir = { version = \"0.21.0\" }\n+chalk-recursive = { version = \"0.21.0\" }\n \n [dev-dependencies]\n expect = { path = \"../expect\" }"}, {"sha": "45e31033eaf725c2cf44d3075d503dec74c3f3a1", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 82, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -6,10 +6,10 @@ mod unsafe_check;\n use std::any::Any;\n \n use hir_def::DefWithBodyId;\n-use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n-use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n+use hir_expand::diagnostics::{Diagnostic, DiagnosticSink};\n+use hir_expand::{name::Name, HirFileId, InFile};\n use ra_prof::profile;\n-use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n+use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n use crate::db::HirDatabase;\n@@ -41,7 +41,7 @@ impl Diagnostic for NoSuchField {\n         \"no such field\".to_string()\n     }\n \n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.field.clone().into())\n     }\n \n@@ -50,20 +50,11 @@ impl Diagnostic for NoSuchField {\n     }\n }\n \n-impl AstDiagnostic for NoSuchField {\n-    type AST = ast::RecordExprField;\n-\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::RecordExprField::cast(node).unwrap()\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::RecordExprFieldList>,\n+    pub field_list_parent: AstPtr<ast::RecordExpr>,\n+    pub field_list_parent_path: Option<AstPtr<ast::Path>>,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -78,28 +69,28 @@ impl Diagnostic for MissingFields {\n         }\n         buf\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field_list.clone().into() }\n+\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile {\n+            file_id: self.file,\n+            value: self\n+                .field_list_parent_path\n+                .clone()\n+                .map(SyntaxNodePtr::from)\n+                .unwrap_or_else(|| self.field_list_parent.clone().into()),\n+        }\n     }\n+\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n }\n \n-impl AstDiagnostic for MissingFields {\n-    type AST = ast::RecordExprFieldList;\n-\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::RecordExprFieldList::cast(node).unwrap()\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MissingPatFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::RecordPatFieldList>,\n+    pub field_list_parent: AstPtr<ast::RecordPat>,\n+    pub field_list_parent_path: Option<AstPtr<ast::Path>>,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -114,8 +105,15 @@ impl Diagnostic for MissingPatFields {\n         }\n         buf\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field_list.clone().into() }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile {\n+            file_id: self.file,\n+            value: self\n+                .field_list_parent_path\n+                .clone()\n+                .map(SyntaxNodePtr::from)\n+                .unwrap_or_else(|| self.field_list_parent.clone().into()),\n+        }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -136,7 +134,7 @@ impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -157,24 +155,14 @@ impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n }\n \n-impl AstDiagnostic for MissingOkInTailExpr {\n-    type AST = ast::Expr;\n-\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::Expr::cast(node).unwrap()\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct BreakOutsideOfLoop {\n     pub file: HirFileId,\n@@ -188,24 +176,14 @@ impl Diagnostic for BreakOutsideOfLoop {\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n }\n \n-impl AstDiagnostic for BreakOutsideOfLoop {\n-    type AST = ast::Expr;\n-\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::Expr::cast(node).unwrap()\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MissingUnsafe {\n     pub file: HirFileId,\n@@ -219,24 +197,14 @@ impl Diagnostic for MissingUnsafe {\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n }\n \n-impl AstDiagnostic for MissingUnsafe {\n-    type AST = ast::Expr;\n-\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::Expr::cast(node).unwrap()\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MismatchedArgCount {\n     pub file: HirFileId,\n@@ -253,7 +221,7 @@ impl Diagnostic for MismatchedArgCount {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };\n         format!(\"Expected {} argument{}, found {}\", self.expected, s, self.found)\n     }\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.call_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -264,19 +232,13 @@ impl Diagnostic for MismatchedArgCount {\n     }\n }\n \n-impl AstDiagnostic for MismatchedArgCount {\n-    type AST = ast::CallExpr;\n-    fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.source().file_id).unwrap();\n-        let node = self.source().value.to_node(&root);\n-        ast::CallExpr::cast(node).unwrap()\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId};\n-    use hir_expand::diagnostics::{Diagnostic, DiagnosticSinkBuilder};\n+    use hir_expand::{\n+        db::AstDatabase,\n+        diagnostics::{Diagnostic, DiagnosticSinkBuilder},\n+    };\n     use ra_db::{fixture::WithFixture, FileId, SourceDatabase, SourceDatabaseExt};\n     use ra_syntax::{TextRange, TextSize};\n     use rustc_hash::FxHashMap;\n@@ -321,9 +283,11 @@ mod tests {\n \n         let mut actual: FxHashMap<FileId, Vec<(TextRange, String)>> = FxHashMap::default();\n         db.diagnostics(|d| {\n-            // FXIME: macros...\n-            let file_id = d.source().file_id.original_file(&db);\n-            let range = d.syntax_node(&db).text_range();\n+            let src = d.display_source();\n+            let root = db.parse_or_expand(src.file_id).unwrap();\n+            // FIXME: macros...\n+            let file_id = src.file_id.original_file(&db);\n+            let range = src.value.to_node(&root).text_range();\n             let message = d.message().to_owned();\n             actual.entry(file_id).or_default().push((range, message));\n         });\n@@ -351,8 +315,8 @@ struct S { foo: i32, bar: () }\n impl S {\n     fn new() -> S {\n         S {\n-        //^... Missing structure fields:\n-        //|    - bar\n+      //^ Missing structure fields:\n+      //|    - bar\n             foo: 92,\n             baz: 62,\n           //^^^^^^^ no such field\n@@ -473,8 +437,8 @@ impl Foo {\n struct S { foo: i32, bar: () }\n fn baz(s: S) {\n     let S { foo: _ } = s;\n-        //^^^^^^^^^^ Missing structure fields:\n-        //         | - bar\n+      //^ Missing structure fields:\n+      //| - bar\n }\n \"#,\n         );"}, {"sha": "51adcecafaea5aca418cb8de5d26b7813a69bc03", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -100,16 +100,17 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             let root = source_ptr.file_syntax(db.upcast());\n-            if let ast::Expr::RecordExpr(record_lit) = &source_ptr.value.to_node(&root) {\n-                if let Some(field_list) = record_lit.record_expr_field_list() {\n+            if let ast::Expr::RecordExpr(record_expr) = &source_ptr.value.to_node(&root) {\n+                if let Some(_) = record_expr.record_expr_field_list() {\n                     let variant_data = variant_data(db.upcast(), variant_def);\n                     let missed_fields = missed_fields\n                         .into_iter()\n                         .map(|idx| variant_data.fields()[idx].name.clone())\n                         .collect();\n                     self.sink.push(MissingFields {\n                         file: source_ptr.file_id,\n-                        field_list: AstPtr::new(&field_list),\n+                        field_list_parent: AstPtr::new(&record_expr),\n+                        field_list_parent_path: record_expr.path().map(|path| AstPtr::new(&path)),\n                         missed_fields,\n                     })\n                 }\n@@ -131,15 +132,18 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             if let Some(expr) = source_ptr.value.as_ref().left() {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n-                    if let Some(field_list) = record_pat.record_pat_field_list() {\n+                    if let Some(_) = record_pat.record_pat_field_list() {\n                         let variant_data = variant_data(db.upcast(), variant_def);\n                         let missed_fields = missed_fields\n                             .into_iter()\n                             .map(|idx| variant_data.fields()[idx].name.clone())\n                             .collect();\n                         self.sink.push(MissingPatFields {\n                             file: source_ptr.file_id,\n-                            field_list: AstPtr::new(&field_list),\n+                            field_list_parent: AstPtr::new(&record_pat),\n+                            field_list_parent_path: record_pat\n+                                .path()\n+                                .map(|path| AstPtr::new(&path)),\n                             missed_fields,\n                         })\n                     }"}, {"sha": "deca244dbbab5956f098401070a81aa398f9eb81", "filename": "crates/ra_hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1161,15 +1161,15 @@ fn main() {\n         //^ Missing match arm\n     match a {\n         Either::A { } => (),\n-                //^^^ Missing structure fields:\n-                //  | - foo\n+      //^^^^^^^^^ Missing structure fields:\n+      //        | - foo\n         Either::B => (),\n     }\n     match a {\n         //^ Missing match arm\n         Either::A { } => (),\n-    }           //^^^ Missing structure fields:\n-                //  | - foo\n+    } //^^^^^^^^^ Missing structure fields:\n+      //        | - foo\n \n     match a {\n         Either::A { foo: true } => (),"}, {"sha": "61ffbf5d1519111c71ed52f6637252dbcc26f342", "filename": "crates/ra_hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -6,6 +6,7 @@ use std::sync::Arc;\n use hir_def::{\n     body::Body,\n     expr::{Expr, ExprId, UnaryOp},\n+    resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n     DefWithBodyId,\n };\n use hir_expand::diagnostics::DiagnosticSink;\n@@ -70,7 +71,7 @@ pub fn unsafe_expressions(\n ) -> Vec<UnsafeExpr> {\n     let mut unsafe_exprs = vec![];\n     let body = db.body(def);\n-    walk_unsafe(&mut unsafe_exprs, db, infer, &body, body.body_expr, false);\n+    walk_unsafe(&mut unsafe_exprs, db, infer, def, &body, body.body_expr, false);\n \n     unsafe_exprs\n }\n@@ -79,6 +80,7 @@ fn walk_unsafe(\n     unsafe_exprs: &mut Vec<UnsafeExpr>,\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n+    def: DefWithBodyId,\n     body: &Body,\n     current: ExprId,\n     inside_unsafe_block: bool,\n@@ -97,6 +99,15 @@ fn walk_unsafe(\n                 }\n             }\n         }\n+        Expr::Path(path) => {\n+            let resolver = resolver_for_expr(db.upcast(), def, current);\n+            let value_or_partial = resolver.resolve_path_in_value_ns(db.upcast(), path.mod_path());\n+            if let Some(ResolveValueResult::ValueNs(ValueNs::StaticId(id))) = value_or_partial {\n+                if db.static_data(id).mutable {\n+                    unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                }\n+            }\n+        }\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n@@ -112,13 +123,13 @@ fn walk_unsafe(\n             }\n         }\n         Expr::Unsafe { body: child } => {\n-            return walk_unsafe(unsafe_exprs, db, infer, body, *child, true);\n+            return walk_unsafe(unsafe_exprs, db, infer, def, body, *child, true);\n         }\n         _ => {}\n     }\n \n     expr.walk_child_exprs(|child| {\n-        walk_unsafe(unsafe_exprs, db, infer, body, child, inside_unsafe_block);\n+        walk_unsafe(unsafe_exprs, db, infer, def, body, child, inside_unsafe_block);\n     });\n }\n \n@@ -167,6 +178,27 @@ fn main() {\n         HasUnsafe.unsafe_fn();\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_static_mut() {\n+        check_diagnostics(\n+            r#\"\n+struct Ty {\n+    a: u8,\n+}\n+\n+static mut static_mut: Ty = Ty { a: 0 };\n+\n+fn main() {\n+    let x = static_mut.a;\n+          //^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+    unsafe {\n+        let x = static_mut.a;\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "3d12039a6d20bdd9db858dbfd3293cb8a98eadbb", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -440,6 +440,12 @@ impl<'a> InferenceContext<'a> {\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 forbid_unresolved_segments((ty, Some(strukt.into())), unresolved)\n             }\n+            TypeNs::AdtId(AdtId::UnionId(u)) => {\n+                let substs = Ty::substs_from_path(&ctx, path, u.into(), true);\n+                let ty = self.db.ty(u.into());\n+                let ty = self.insert_type_vars(ty.subst(&substs));\n+                forbid_unresolved_segments((ty, Some(u.into())), unresolved)\n+            }\n             TypeNs::EnumVariantId(var) => {\n                 let substs = Ty::substs_from_path(&ctx, path, var.into(), true);\n                 let ty = self.db.ty(var.parent.into());\n@@ -490,10 +496,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME potentially resolve assoc type\n                 (Ty::Unknown, None)\n             }\n-            TypeNs::AdtId(AdtId::EnumId(_))\n-            | TypeNs::AdtId(AdtId::UnionId(_))\n-            | TypeNs::BuiltinType(_)\n-            | TypeNs::TraitId(_) => {\n+            TypeNs::AdtId(AdtId::EnumId(_)) | TypeNs::BuiltinType(_) | TypeNs::TraitId(_) => {\n                 // FIXME diagnostic\n                 (Ty::Unknown, None)\n             }"}, {"sha": "7638f167b5b6d6878c81add1abb49c990d601992", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -518,6 +518,7 @@ impl Ty {\n         let (segment, generic_def) = match resolved {\n             ValueTyDefId::FunctionId(it) => (last, Some(it.into())),\n             ValueTyDefId::StructId(it) => (last, Some(it.into())),\n+            ValueTyDefId::UnionId(it) => (last, Some(it.into())),\n             ValueTyDefId::ConstId(it) => (last, Some(it.into())),\n             ValueTyDefId::StaticId(_) => (last, None),\n             ValueTyDefId::EnumVariantId(var) => {\n@@ -1148,11 +1149,12 @@ impl_from!(BuiltinType, AdtId(StructId, EnumId, UnionId), TypeAliasId for TyDefI\n pub enum ValueTyDefId {\n     FunctionId(FunctionId),\n     StructId(StructId),\n+    UnionId(UnionId),\n     EnumVariantId(EnumVariantId),\n     ConstId(ConstId),\n     StaticId(StaticId),\n }\n-impl_from!(FunctionId, StructId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n+impl_from!(FunctionId, StructId, UnionId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n \n /// Build the declared type of an item. This depends on the namespace; e.g. for\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and\n@@ -1179,6 +1181,7 @@ pub(crate) fn value_ty_query(db: &dyn HirDatabase, def: ValueTyDefId) -> Binders\n     match def {\n         ValueTyDefId::FunctionId(it) => type_for_fn(db, it),\n         ValueTyDefId::StructId(it) => type_for_struct_constructor(db, it),\n+        ValueTyDefId::UnionId(it) => type_for_adt(db, it.into()),\n         ValueTyDefId::EnumVariantId(it) => type_for_enum_variant_constructor(db, it),\n         ValueTyDefId::ConstId(it) => type_for_const(db, it),\n         ValueTyDefId::StaticId(it) => type_for_static(db, it),"}, {"sha": "5a7cf9455b5e739d1033830c5296266e43067d8f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -334,16 +334,44 @@ fn infer_union() {\n             bar: f32,\n         }\n \n+        fn test() {\n+            let u = MyUnion { foo: 0 };\n+            unsafe { baz(u); }\n+            let u = MyUnion { bar: 0.0 };\n+            unsafe { baz(u); }\n+        }\n+\n         unsafe fn baz(u: MyUnion) {\n             let inner = u.foo;\n+            let inner = u.bar;\n         }\n         \"#,\n         expect![[r#\"\n-            61..62 'u': MyUnion\n-            73..99 '{     ...foo; }': ()\n-            83..88 'inner': u32\n-            91..92 'u': MyUnion\n-            91..96 'u.foo': u32\n+            57..172 '{     ...); } }': ()\n+            67..68 'u': MyUnion\n+            71..89 'MyUnio...o: 0 }': MyUnion\n+            86..87 '0': u32\n+            95..113 'unsafe...(u); }': ()\n+            102..113 '{ baz(u); }': ()\n+            104..107 'baz': fn baz(MyUnion)\n+            104..110 'baz(u)': ()\n+            108..109 'u': MyUnion\n+            122..123 'u': MyUnion\n+            126..146 'MyUnio... 0.0 }': MyUnion\n+            141..144 '0.0': f32\n+            152..170 'unsafe...(u); }': ()\n+            159..170 '{ baz(u); }': ()\n+            161..164 'baz': fn baz(MyUnion)\n+            161..167 'baz(u)': ()\n+            165..166 'u': MyUnion\n+            188..189 'u': MyUnion\n+            200..249 '{     ...bar; }': ()\n+            210..215 'inner': u32\n+            218..219 'u': MyUnion\n+            218..223 'u.foo': u32\n+            233..238 'inner': f32\n+            241..242 'u': MyUnion\n+            241..246 'u.bar': f32\n         \"#]],\n     );\n }"}, {"sha": "4368e4eec8422274135bdbd68f62bd8e3d9f5d92", "filename": "crates/ra_ide/src/completion/complete_snippet.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -36,7 +36,7 @@ pub(super) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n     snippet(\n         ctx,\n         cap,\n-        \"Test module\",\n+        \"tmod (Test module)\",\n         \"\\\n #[cfg(test)]\n mod tests {\n@@ -54,7 +54,7 @@ mod tests {\n     snippet(\n         ctx,\n         cap,\n-        \"Test function\",\n+        \"tfn (Test function)\",\n         \"\\\n #[test]\n fn ${1:feature}() {\n@@ -106,10 +106,10 @@ mod tests {\n }\n \"#,\n             expect![[r#\"\n-                sn Test function\n-                sn Test module\n                 sn macro_rules\n                 sn pub(crate)\n+                sn tfn (Test function)\n+                sn tmod (Test module)\n             \"#]],\n         )\n     }"}, {"sha": "4aa761148d80aa868cd66a1a88635819c3f9cce4", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -27,7 +27,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) scope: SemanticsScope<'a>,\n     pub(super) db: &'a RootDatabase,\n     pub(super) config: &'a CompletionConfig,\n-    pub(super) offset: TextSize,\n+    pub(super) position: FilePosition,\n     /// The token before the cursor, in the original file.\n     pub(super) original_token: SyntaxToken,\n     /// The token before the cursor, in the macro-expanded file.\n@@ -117,7 +117,7 @@ impl<'a> CompletionContext<'a> {\n             config,\n             original_token,\n             token,\n-            offset: position.offset,\n+            position,\n             krate,\n             expected_type: None,\n             name_ref_syntax: None,\n@@ -209,7 +209,7 @@ impl<'a> CompletionContext<'a> {\n             mark::hit!(completes_if_prefix_is_keyword);\n             self.original_token.text_range()\n         } else {\n-            TextRange::empty(self.offset)\n+            TextRange::empty(self.position.offset)\n         }\n     }\n \n@@ -379,8 +379,8 @@ impl<'a> CompletionContext<'a> {\n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n             self.has_type_args = segment.generic_arg_list().is_some();\n \n-            #[allow(deprecated)]\n-            if let Some(path) = hir::Path::from_ast(path.clone()) {\n+            let hygiene = hir::Hygiene::new(self.db, self.position.file_id.into());\n+            if let Some(path) = hir::Path::from_src(path.clone(), &hygiene) {\n                 if let Some(path_prefix) = path.qualifier() {\n                     self.path_prefix = Some(path_prefix);\n                     return;"}, {"sha": "59f1b14246f0dc8f55ac6f7edbe3ab191a07eb4c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -2,8 +2,8 @@\n //! It also handles scoring (sorting) completions.\n \n use hir::{Docs, HasAttrs, HasSource, HirDisplay, ModPath, ScopeDef, StructKind, Type};\n+use itertools::Itertools;\n use ra_syntax::ast::NameOwner;\n-use stdx::SepBy;\n use test_utils::mark;\n \n use crate::{\n@@ -289,16 +289,16 @@ impl Completions {\n             .map(|field| (field.name(ctx.db), field.signature_ty(ctx.db)));\n         let variant_kind = variant.kind(ctx.db);\n         let detail = match variant_kind {\n-            StructKind::Tuple | StructKind::Unit => detail_types\n-                .map(|(_, t)| t.display(ctx.db).to_string())\n-                .sep_by(\", \")\n-                .surround_with(\"(\", \")\")\n-                .to_string(),\n-            StructKind::Record => detail_types\n-                .map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string()))\n-                .sep_by(\", \")\n-                .surround_with(\"{ \", \" }\")\n-                .to_string(),\n+            StructKind::Tuple | StructKind::Unit => format!(\n+                \"({})\",\n+                detail_types.map(|(_, t)| t.display(ctx.db).to_string()).format(\", \")\n+            ),\n+            StructKind::Record => format!(\n+                \"{{ {} }}\",\n+                detail_types\n+                    .map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string()))\n+                    .format(\", \")\n+            ),\n         };\n         let mut res = CompletionItem::new(\n             CompletionKind::Reference,\n@@ -412,11 +412,10 @@ impl Builder {\n             self = self.trigger_call_info();\n             let snippet = match (ctx.config.add_call_argument_snippets, params) {\n                 (true, Params::Named(params)) => {\n-                    let function_params_snippet = params\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name))\n-                        .sep_by(\", \");\n+                    let function_params_snippet =\n+                        params.iter().enumerate().format_with(\", \", |(index, param_name), f| {\n+                            f(&format_args!(\"${{{}:{}}}\", index + 1, param_name))\n+                        });\n                     format!(\"{}({})$0\", name, function_params_snippet)\n                 }\n                 _ => {"}, {"sha": "79dbb0865cf15bfe3f6b64633c9ecff3bcac89b8", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 156, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -6,22 +6,21 @@\n \n use std::cell::RefCell;\n \n-use hir::{\n-    diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSinkBuilder},\n-    HasSource, HirDisplay, Semantics, VariantDef,\n-};\n+use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n-    algo,\n-    ast::{self, edit::IndentLevel, make, AstNode},\n+    ast::{self, AstNode},\n     SyntaxNode, TextRange, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{AnalysisConfig, Diagnostic, FileId, FileSystemEdit, Fix, SourceFileEdit};\n+use crate::{AnalysisConfig, Diagnostic, FileId, Fix, SourceFileEdit};\n+\n+mod diagnostics_with_fix;\n+use diagnostics_with_fix::DiagnosticWithFix;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n@@ -56,77 +55,16 @@ pub(crate) fn diagnostics(\n     let res = RefCell::new(res);\n     let mut sink_builder = DiagnosticSinkBuilder::new()\n         .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n-            let original_file = d.source().file_id.original_file(db);\n-            let fix = Fix::new(\n-                \"Create module\",\n-                FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }\n-                    .into(),\n-            );\n-            res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name().into()),\n-                range: sema.diagnostics_range(d).range,\n-                message: d.message(),\n-                severity: Severity::Error,\n-                fix: Some(fix),\n-            })\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n-            // Note that although we could add a diagnostics to\n-            // fill the missing tuple field, e.g :\n-            // `struct A(usize);`\n-            // `let a = A { 0: () }`\n-            // but it is uncommon usage and it should not be encouraged.\n-            let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n-                None\n-            } else {\n-                let mut field_list = d.ast(db);\n-                for f in d.missed_fields.iter() {\n-                    let field = make::record_expr_field(\n-                        make::name_ref(&f.to_string()),\n-                        Some(make::expr_unit()),\n-                    );\n-                    field_list = field_list.append_field(&field);\n-                }\n-\n-                let edit = {\n-                    let mut builder = TextEditBuilder::default();\n-                    algo::diff(&d.ast(db).syntax(), &field_list.syntax())\n-                        .into_text_edit(&mut builder);\n-                    builder.finish()\n-                };\n-                Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n-            };\n-\n-            res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name().into()),\n-                range: sema.diagnostics_range(d).range,\n-                message: d.message(),\n-                severity: Severity::Error,\n-                fix,\n-            })\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n-            let node = d.ast(db);\n-            let replacement = format!(\"Ok({})\", node.syntax());\n-            let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-            let source_change = SourceFileEdit { file_id, edit }.into();\n-            let fix = Fix::new(\"Wrap with ok\", source_change);\n-            res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name().into()),\n-                range: sema.diagnostics_range(d).range,\n-                message: d.message(),\n-                severity: Severity::Error,\n-                fix: Some(fix),\n-            })\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n-            res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name().into()),\n-                range: sema.diagnostics_range(d).range,\n-                message: d.message(),\n-                severity: Severity::Error,\n-                fix: missing_struct_field_fix(&sema, file_id, d),\n-            })\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !diag.is_experimental() || enable_experimental);\n@@ -144,7 +82,7 @@ pub(crate) fn diagnostics(\n             res.borrow_mut().push(Diagnostic {\n                 name: Some(d.name().into()),\n                 message: d.message(),\n-                range: sema.diagnostics_range(d).range,\n+                range: sema.diagnostics_display_range(d).range,\n                 severity: Severity::Error,\n                 fix: None,\n             })\n@@ -157,77 +95,13 @@ pub(crate) fn diagnostics(\n     res.into_inner()\n }\n \n-fn missing_struct_field_fix(\n-    sema: &Semantics<RootDatabase>,\n-    usage_file_id: FileId,\n-    d: &hir::diagnostics::NoSuchField,\n-) -> Option<Fix> {\n-    let record_expr = sema.ast(d);\n-\n-    let record_lit = ast::RecordExpr::cast(record_expr.syntax().parent()?.parent()?)?;\n-    let def_id = sema.resolve_variant(record_lit)?;\n-    let module;\n-    let def_file_id;\n-    let record_fields = match VariantDef::from(def_id) {\n-        VariantDef::Struct(s) => {\n-            module = s.module(sema.db);\n-            let source = s.source(sema.db);\n-            def_file_id = source.file_id;\n-            let fields = source.value.field_list()?;\n-            record_field_list(fields)?\n-        }\n-        VariantDef::Union(u) => {\n-            module = u.module(sema.db);\n-            let source = u.source(sema.db);\n-            def_file_id = source.file_id;\n-            source.value.record_field_list()?\n-        }\n-        VariantDef::EnumVariant(e) => {\n-            module = e.module(sema.db);\n-            let source = e.source(sema.db);\n-            def_file_id = source.file_id;\n-            let fields = source.value.field_list()?;\n-            record_field_list(fields)?\n-        }\n-    };\n-    let def_file_id = def_file_id.original_file(sema.db);\n-\n-    let new_field_type = sema.type_of_expr(&record_expr.expr()?)?;\n-    if new_field_type.is_unknown() {\n-        return None;\n-    }\n-    let new_field = make::record_field(\n-        record_expr.field_name()?,\n-        make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n-    );\n-\n-    let last_field = record_fields.fields().last()?;\n-    let last_field_syntax = last_field.syntax();\n-    let indent = IndentLevel::from_node(last_field_syntax);\n-\n-    let mut new_field = new_field.to_string();\n-    if usage_file_id != def_file_id {\n-        new_field = format!(\"pub(crate) {}\", new_field);\n-    }\n-    new_field = format!(\"\\n{}{}\", indent, new_field);\n-\n-    let needs_comma = !last_field_syntax.to_string().ends_with(',');\n-    if needs_comma {\n-        new_field = format!(\",{}\", new_field);\n-    }\n-\n-    let source_change = SourceFileEdit {\n-        file_id: def_file_id,\n-        edit: TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n-    };\n-    let fix = Fix::new(\"Create field\", source_change.into());\n-    return Some(fix);\n-\n-    fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n-        match field_def_list {\n-            ast::FieldList::RecordFieldList(it) => Some(it),\n-            ast::FieldList::TupleFieldList(_) => None,\n-        }\n+fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n+    Diagnostic {\n+        name: Some(d.name().into()),\n+        range: sema.diagnostics_display_range(d).range,\n+        message: d.message(),\n+        severity: Severity::Error,\n+        fix: d.fix(&sema),\n     }\n }\n \n@@ -238,25 +112,26 @@ fn check_unnecessary_braces_in_use_statement(\n ) -> Option<()> {\n     let use_tree_list = ast::UseTreeList::cast(node.clone())?;\n     if let Some((single_use_tree,)) = use_tree_list.use_trees().collect_tuple() {\n-        let range = use_tree_list.syntax().text_range();\n+        let use_range = use_tree_list.syntax().text_range();\n         let edit =\n             text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(&single_use_tree)\n                 .unwrap_or_else(|| {\n                     let to_replace = single_use_tree.syntax().text().to_string();\n                     let mut edit_builder = TextEditBuilder::default();\n-                    edit_builder.delete(range);\n-                    edit_builder.insert(range.start(), to_replace);\n+                    edit_builder.delete(use_range);\n+                    edit_builder.insert(use_range.start(), to_replace);\n                     edit_builder.finish()\n                 });\n \n         acc.push(Diagnostic {\n             name: None,\n-            range,\n+            range: use_range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n             fix: Some(Fix::new(\n                 \"Remove unnecessary braces\",\n                 SourceFileEdit { file_id, edit }.into(),\n+                use_range,\n             )),\n         });\n     }\n@@ -271,8 +146,7 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n     if single_use_tree.path()?.segment()?.syntax().first_child_or_token()?.kind() == T![self] {\n         let start = use_tree_list_node.prev_sibling_or_token()?.text_range().start();\n         let end = use_tree_list_node.text_range().end();\n-        let range = TextRange::new(start, end);\n-        return Some(TextEdit::delete(range));\n+        return Some(TextEdit::delete(TextRange::new(start, end)));\n     }\n     None\n }\n@@ -295,14 +169,16 @@ fn check_struct_shorthand_initialization(\n                 edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n                 let edit = edit_builder.finish();\n \n+                let field_range = record_field.syntax().text_range();\n                 acc.push(Diagnostic {\n                     name: None,\n-                    range: record_field.syntax().text_range(),\n+                    range: field_range,\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n                     fix: Some(Fix::new(\n                         \"Use struct shorthand initialization\",\n                         SourceFileEdit { file_id, edit }.into(),\n+                        field_range,\n                     )),\n                 });\n             }\n@@ -326,7 +202,7 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n     ///  * a diagnostic is produced\n-    ///  * this diagnostic touches the input cursor position\n+    ///  * this diagnostic fix trigger range touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n     fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);\n@@ -344,10 +220,10 @@ mod tests {\n \n         assert_eq_text!(&after, &actual);\n         assert!(\n-            diagnostic.range.start() <= file_position.offset\n-                && diagnostic.range.end() >= file_position.offset,\n-            \"diagnostic range {:?} does not touch cursor position {:?}\",\n-            diagnostic.range,\n+            fix.fix_trigger_range.start() <= file_position.offset\n+                && fix.fix_trigger_range.end() >= file_position.offset,\n+            \"diagnostic fix range {:?} does not touch cursor position {:?}\",\n+            fix.fix_trigger_range,\n             file_position.offset\n         );\n     }\n@@ -712,6 +588,7 @@ fn test_fn() {\n                                     ],\n                                     is_snippet: false,\n                                 },\n+                                fix_trigger_range: 0..8,\n                             },\n                         ),\n                     },"}, {"sha": "f7c73773f3ac9cecdfaf111243df64f3cae09b58", "filename": "crates/ra_ide/src/diagnostics/diagnostics_with_fix.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics%2Fdiagnostics_with_fix.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,171 @@\n+//! Provides a way to attach fixes to the diagnostics.\n+//! The same module also has all curret custom fixes for the diagnostics implemented.\n+use crate::Fix;\n+use ast::{edit::IndentLevel, make};\n+use hir::{\n+    db::AstDatabase,\n+    diagnostics::{Diagnostic, MissingFields, MissingOkInTailExpr, NoSuchField, UnresolvedModule},\n+    HasSource, HirDisplay, Semantics, VariantDef,\n+};\n+use ra_db::FileId;\n+use ra_ide_db::{\n+    source_change::{FileSystemEdit, SourceFileEdit},\n+    RootDatabase,\n+};\n+use ra_syntax::{algo, ast, AstNode};\n+use ra_text_edit::{TextEdit, TextEditBuilder};\n+\n+/// A [Diagnostic] that potentially has a fix available.\n+///\n+/// [Diagnostic]: hir::diagnostics::Diagnostic\n+pub trait DiagnosticWithFix: Diagnostic {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix>;\n+}\n+\n+impl DiagnosticWithFix for UnresolvedModule {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let root = sema.db.parse_or_expand(self.file)?;\n+        let unresolved_module = self.decl.to_node(&root);\n+        Some(Fix::new(\n+            \"Create module\",\n+            FileSystemEdit::CreateFile {\n+                anchor: self.file.original_file(sema.db),\n+                dst: self.candidate.clone(),\n+            }\n+            .into(),\n+            unresolved_module.syntax().text_range(),\n+        ))\n+    }\n+}\n+\n+impl DiagnosticWithFix for NoSuchField {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let root = sema.db.parse_or_expand(self.file)?;\n+        missing_record_expr_field_fix(\n+            &sema,\n+            self.file.original_file(sema.db),\n+            &self.field.to_node(&root),\n+        )\n+    }\n+}\n+\n+impl DiagnosticWithFix for MissingFields {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        // Note that although we could add a diagnostics to\n+        // fill the missing tuple field, e.g :\n+        // `struct A(usize);`\n+        // `let a = A { 0: () }`\n+        // but it is uncommon usage and it should not be encouraged.\n+        if self.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n+            return None;\n+        }\n+\n+        let root = sema.db.parse_or_expand(self.file)?;\n+        let old_field_list = self.field_list_parent.to_node(&root).record_expr_field_list()?;\n+        let mut new_field_list = old_field_list.clone();\n+        for f in self.missed_fields.iter() {\n+            let field =\n+                make::record_expr_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+            new_field_list = new_field_list.append_field(&field);\n+        }\n+\n+        let edit = {\n+            let mut builder = TextEditBuilder::default();\n+            algo::diff(&old_field_list.syntax(), &new_field_list.syntax())\n+                .into_text_edit(&mut builder);\n+            builder.finish()\n+        };\n+        Some(Fix::new(\n+            \"Fill struct fields\",\n+            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into(),\n+            sema.original_range(&old_field_list.syntax()).range,\n+        ))\n+    }\n+}\n+\n+impl DiagnosticWithFix for MissingOkInTailExpr {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let root = sema.db.parse_or_expand(self.file)?;\n+        let tail_expr = self.expr.to_node(&root);\n+        let tail_expr_range = tail_expr.syntax().text_range();\n+        let edit = TextEdit::replace(tail_expr_range, format!(\"Ok({})\", tail_expr.syntax()));\n+        let source_change =\n+            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+        Some(Fix::new(\"Wrap with ok\", source_change, tail_expr_range))\n+    }\n+}\n+\n+fn missing_record_expr_field_fix(\n+    sema: &Semantics<RootDatabase>,\n+    usage_file_id: FileId,\n+    record_expr_field: &ast::RecordExprField,\n+) -> Option<Fix> {\n+    let record_lit = ast::RecordExpr::cast(record_expr_field.syntax().parent()?.parent()?)?;\n+    let def_id = sema.resolve_variant(record_lit)?;\n+    let module;\n+    let def_file_id;\n+    let record_fields = match VariantDef::from(def_id) {\n+        VariantDef::Struct(s) => {\n+            module = s.module(sema.db);\n+            let source = s.source(sema.db);\n+            def_file_id = source.file_id;\n+            let fields = source.value.field_list()?;\n+            record_field_list(fields)?\n+        }\n+        VariantDef::Union(u) => {\n+            module = u.module(sema.db);\n+            let source = u.source(sema.db);\n+            def_file_id = source.file_id;\n+            source.value.record_field_list()?\n+        }\n+        VariantDef::EnumVariant(e) => {\n+            module = e.module(sema.db);\n+            let source = e.source(sema.db);\n+            def_file_id = source.file_id;\n+            let fields = source.value.field_list()?;\n+            record_field_list(fields)?\n+        }\n+    };\n+    let def_file_id = def_file_id.original_file(sema.db);\n+\n+    let new_field_type = sema.type_of_expr(&record_expr_field.expr()?)?;\n+    if new_field_type.is_unknown() {\n+        return None;\n+    }\n+    let new_field = make::record_field(\n+        record_expr_field.field_name()?,\n+        make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n+    );\n+\n+    let last_field = record_fields.fields().last()?;\n+    let last_field_syntax = last_field.syntax();\n+    let indent = IndentLevel::from_node(last_field_syntax);\n+\n+    let mut new_field = new_field.to_string();\n+    if usage_file_id != def_file_id {\n+        new_field = format!(\"pub(crate) {}\", new_field);\n+    }\n+    new_field = format!(\"\\n{}{}\", indent, new_field);\n+\n+    let needs_comma = !last_field_syntax.to_string().ends_with(',');\n+    if needs_comma {\n+        new_field = format!(\",{}\", new_field);\n+    }\n+\n+    let source_change = SourceFileEdit {\n+        file_id: def_file_id,\n+        edit: TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n+    };\n+    return Some(Fix::new(\n+        \"Create field\",\n+        source_change.into(),\n+        record_expr_field.syntax().text_range(),\n+    ));\n+\n+    fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n+        match field_def_list {\n+            ast::FieldList::RecordFieldList(it) => Some(it),\n+            ast::FieldList::TupleFieldList(_) => None,\n+        }\n+    }\n+}"}, {"sha": "010c34705c7db718633e7a2d97b41aa753abf132", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -47,6 +47,12 @@ impl ShortLabel for ast::Module {\n     }\n }\n \n+impl ShortLabel for ast::SourceFile {\n+    fn short_label(&self) -> Option<String> {\n+        None\n+    }\n+}\n+\n impl ShortLabel for ast::TypeAlias {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"type \")\n@@ -55,7 +61,11 @@ impl ShortLabel for ast::TypeAlias {\n \n impl ShortLabel for ast::Const {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ty(self, self.ty(), \"const \")\n+        let mut new_buf = short_label_from_ty(self, self.ty(), \"const \")?;\n+        if let Some(expr) = self.body() {\n+            format_to!(new_buf, \" = {}\", expr.syntax());\n+        }\n+        Some(new_buf)\n     }\n }\n "}, {"sha": "45389fd23fedc2e38b201b233390593c8f82ad89", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ra_ide_db::{\n-    defs::{classify_name, classify_name_ref, NameClass},\n+    defs::{classify_name, classify_name_ref},\n     symbol_index, RootDatabase,\n };\n use ra_syntax::{\n@@ -40,10 +40,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = match classify_name(&sema, &name)? {\n-                    NameClass::Definition(def) | NameClass::ConstReference(def) => def,\n-                    NameClass::FieldShorthand { local: _, field } => field,\n-                };\n+                let def = classify_name(&sema, &name)?.definition(sema.db);\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },\n@@ -86,8 +83,7 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     let name_kind = classify_name_ref(sema, name_ref);\n     if let Some(def) = name_kind {\n-        let def = def.definition();\n-\n+        let def = def.definition(sema.db);\n         return match def.try_to_nav(sema.db) {\n             Some(nav) => ReferenceResult::Exact(nav),\n             None => ReferenceResult::Approximate(Vec::new()),\n@@ -133,6 +129,32 @@ mod tests {\n         assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n     }\n \n+    #[test]\n+    fn goto_def_for_extern_crate() {\n+        check(\n+            r#\"\n+            //- /main.rs\n+            extern crate std<|>;\n+            //- /std/lib.rs\n+            // empty\n+            //^ file\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn goto_def_for_renamed_extern_crate() {\n+        check(\n+            r#\"\n+            //- /main.rs\n+            extern crate std as abc<|>;\n+            //- /std/lib.rs\n+            // empty\n+            //^ file\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn goto_def_in_items() {\n         check("}, {"sha": "f66f62bfb5e97ec40527fa75208b301a092905a9", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 81, "deletions": 7, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -85,8 +85,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let node = token.parent();\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition()),\n-            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition()),\n+            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition(sema.db)),\n             _ => None,\n         }\n     };\n@@ -304,7 +304,10 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n                     let docs = Documentation::from_ast(&it).map(Into::into);\n                     hover_markup(docs, it.short_label(), mod_path)\n                 }\n-                _ => None,\n+                ModuleSource::SourceFile(it) => {\n+                    let docs = Documentation::from_ast(&it).map(Into::into);\n+                    hover_markup(docs, it.short_label(), mod_path)\n+                }\n             },\n             ModuleDef::Function(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it, mod_path),\n@@ -508,6 +511,37 @@ fn main() { }\n         );\n     }\n \n+    #[test]\n+    fn hover_shows_fn_doc() {\n+        check(\n+            r#\"\n+/// # Example\n+/// ```\n+/// # use std::path::Path;\n+/// #\n+/// foo(Path::new(\"hello, world!\"))\n+/// ```\n+pub fn foo<|>(_: &Path) {}\n+\n+fn main() { }\n+\"#,\n+            expect![[r#\"\n+                *foo*\n+                ```rust\n+                pub fn foo(_: &Path)\n+                ```\n+                ___\n+\n+                # Example\n+                ```\n+                # use std::path::Path;\n+                #\n+                foo(Path::new(\"hello, world!\"))\n+                ```\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_shows_struct_field_info() {\n         // Hovering over the field when instantiating\n@@ -556,16 +590,16 @@ fn main() {\n     #[test]\n     fn hover_const_static() {\n         check(\n-            r#\"const foo<|>: u32 = 0;\"#,\n+            r#\"const foo<|>: u32 = 123;\"#,\n             expect![[r#\"\n                 *foo*\n                 ```rust\n-                const foo: u32\n+                const foo: u32 = 123\n                 ```\n             \"#]],\n         );\n         check(\n-            r#\"static foo<|>: u32 = 0;\"#,\n+            r#\"static foo<|>: u32 = 456;\"#,\n             expect![[r#\"\n                 *foo*\n                 ```rust\n@@ -800,7 +834,7 @@ fn main() {\n             expect![[r#\"\n                 *C*\n                 ```rust\n-                const C: u32\n+                const C: u32 = 1\n                 ```\n             \"#]],\n         )\n@@ -1106,6 +1140,46 @@ fn bar() { fo<|>o(); }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_extern_crate() {\n+        check(\n+            r#\"\n+//- /main.rs\n+extern crate st<|>d;\n+//- /std/lib.rs\n+//! Standard library for this test\n+//!\n+//! Printed?\n+//! abc123\n+            \"#,\n+            expect![[r#\"\n+            *std*\n+            Standard library for this test\n+\n+            Printed?\n+            abc123\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+//- /main.rs\n+extern crate std as ab<|>c;\n+//- /std/lib.rs\n+//! Standard library for this test\n+//!\n+//! Printed?\n+//! abc123\n+            \"#,\n+            expect![[r#\"\n+            *abc*\n+            Standard library for this test\n+\n+            Printed?\n+            abc123\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_mod_with_same_name_as_function() {\n         check("}, {"sha": "2cbd7e4f087c3dc168a5d9f46076afb73a1172f7", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -119,13 +119,19 @@ pub struct Diagnostic {\n pub struct Fix {\n     pub label: String,\n     pub source_change: SourceChange,\n+    /// Allows to trigger the fix only when the caret is in the range given\n+    pub fix_trigger_range: TextRange,\n }\n \n impl Fix {\n-    pub fn new(label: impl Into<String>, source_change: SourceChange) -> Self {\n+    pub fn new(\n+        label: impl Into<String>,\n+        source_change: SourceChange,\n+        fix_trigger_range: TextRange,\n+    ) -> Self {\n         let label = label.into();\n         assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n-        Self { label, source_change }\n+        Self { label, source_change, fix_trigger_range }\n     }\n }\n "}, {"sha": "453985de3e3b28379117431302a7e2f5ef8e2f2e", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -130,13 +130,13 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?.definition();\n+        let def = classify_name(sema, &name)?.definition(sema.db);\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }\n     let name_ref =\n         sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = classify_name_ref(sema, &name_ref)?.definition();\n+    let def = classify_name_ref(sema, &name_ref)?.definition(sema.db);\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, def))\n }"}, {"sha": "8be862fd6e1d74de334703742a355b0de1befa8b", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -21,8 +21,8 @@ use ra_ssr::{MatchFinder, SsrError, SsrRule};\n // replacement occurs. For example if our replacement template is `foo::Bar` and we match some\n // code in the `foo` module, we'll insert just `Bar`.\n //\n-// Method calls should generally be written in UFCS form. e.g. `foo::Bar::baz($s, $a)` will match\n-// `$s.baz($a)`, provided the method call `baz` resolves to the method `foo::Bar::baz`.\n+// Inherent method calls should generally be written in UFCS form. e.g. `foo::Bar::baz($s, $a)` will\n+// match `$s.baz($a)`, provided the method call `baz` resolves to the method `foo::Bar::baz`.\n //\n // The scope of the search / replace will be restricted to the current selection if any, otherwise\n // it will apply to the whole workspace."}, {"sha": "c10e15db8b6e5fb68ef720a84e15bb75ac83d50e", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 123, "deletions": 25, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics};\n+use hir::{Name, Semantics, VariantDef};\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -455,6 +455,18 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n+fn is_possibly_unsafe(name_ref: &ast::NameRef) -> bool {\n+    name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(|parent| {\n+            ast::FieldExpr::cast(parent.clone())\n+                .map(|_| true)\n+                .or_else(|| ast::RecordPatField::cast(parent).map(|_| true))\n+        })\n+        .unwrap_or(false)\n+}\n+\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -483,11 +495,21 @@ fn highlight_element(\n             };\n \n             match name_kind {\n+                Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_name(db, def) | HighlightModifier::Definition\n+                    highlight_name(sema, db, def, None, false) | HighlightModifier::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_name(sema, db, def, None, false),\n+                Some(NameClass::FieldShorthand { field, .. }) => {\n+                    let mut h = HighlightTag::Field.into();\n+                    if let Definition::Field(field) = field {\n+                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                            h |= HighlightModifier::Unsafe;\n+                        }\n+                    }\n+\n+                    h\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n-                Some(NameClass::FieldShorthand { .. }) => HighlightTag::Field.into(),\n                 None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n             }\n         }\n@@ -498,8 +520,10 @@ fn highlight_element(\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n+            let possibly_unsafe = is_possibly_unsafe(&name_ref);\n             match classify_name_ref(sema, &name_ref) {\n                 Some(name_kind) => match name_kind {\n+                    NameRefClass::ExternCrate(_) => HighlightTag::Module.into(),\n                     NameRefClass::Definition(def) => {\n                         if let Definition::Local(local) = &def {\n                             if let Some(name) = local.name(db) {\n@@ -508,11 +532,13 @@ fn highlight_element(\n                                 binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                             }\n                         };\n-                        highlight_name(db, def)\n+                        highlight_name(sema, db, def, Some(name_ref), possibly_unsafe)\n                     }\n                     NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                 },\n-                None if syntactic_name_ref_highlighting => highlight_name_ref_by_syntax(name_ref),\n+                None if syntactic_name_ref_highlighting => {\n+                    highlight_name_ref_by_syntax(name_ref, sema)\n+                }\n                 None => HighlightTag::UnresolvedReference.into(),\n             }\n         }\n@@ -540,9 +566,20 @@ fn highlight_element(\n             }\n         }\n         p if p.is_punct() => match p {\n-            T![::] | T![->] | T![=>] | T![&] | T![..] | T![=] | T![@] => {\n-                HighlightTag::Operator.into()\n+            T![&] => {\n+                let h = HighlightTag::Operator.into();\n+                let is_unsafe = element\n+                    .parent()\n+                    .and_then(ast::RefExpr::cast)\n+                    .map(|ref_expr| sema.is_unsafe_ref_expr(&ref_expr))\n+                    .unwrap_or(false);\n+                if is_unsafe {\n+                    h | HighlightModifier::Unsafe\n+                } else {\n+                    h\n+                }\n             }\n+            T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] => HighlightTag::Operator.into(),\n             T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n                 HighlightTag::Macro.into()\n             }\n@@ -623,6 +660,18 @@ fn highlight_element(\n                         HighlightTag::SelfKeyword.into()\n                     }\n                 }\n+                T![ref] => element\n+                    .parent()\n+                    .and_then(ast::IdentPat::cast)\n+                    .and_then(|ident_pat| {\n+                        if sema.is_unsafe_ident_pat(&ident_pat) {\n+                            Some(HighlightModifier::Unsafe)\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                    .map(|modifier| h | modifier)\n+                    .unwrap_or(h),\n                 _ => h,\n             }\n         }\n@@ -652,16 +701,40 @@ fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     }\n }\n \n-fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n+fn highlight_name(\n+    sema: &Semantics<RootDatabase>,\n+    db: &RootDatabase,\n+    def: Definition,\n+    name_ref: Option<ast::NameRef>,\n+    possibly_unsafe: bool,\n+) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::Field(_) => HighlightTag::Field,\n+        Definition::Field(field) => {\n+            let mut h = HighlightTag::Field.into();\n+            if possibly_unsafe {\n+                if let VariantDef::Union(_) = field.parent_def(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+            }\n+\n+            return h;\n+        }\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {\n                 let mut h = HighlightTag::Function.into();\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n+                } else {\n+                    let is_unsafe = name_ref\n+                        .and_then(|name_ref| name_ref.syntax().parent())\n+                        .and_then(ast::MethodCallExpr::cast)\n+                        .map(|method_call_expr| sema.is_unsafe_method_call(method_call_expr))\n+                        .unwrap_or(false);\n+                    if is_unsafe {\n+                        h |= HighlightModifier::Unsafe;\n+                    }\n                 }\n                 return h;\n             }\n@@ -677,6 +750,7 @@ fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n                 let mut h = Highlight::new(HighlightTag::Static);\n                 if s.is_mut(db) {\n                     h |= HighlightModifier::Mutable;\n+                    h |= HighlightModifier::Unsafe;\n                 }\n                 return h;\n             }\n@@ -724,17 +798,44 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     tag.into()\n }\n \n-fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n+fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabase>) -> Highlight {\n     let default = HighlightTag::UnresolvedReference;\n \n     let parent = match name.syntax().parent() {\n         Some(it) => it,\n         _ => return default.into(),\n     };\n \n-    let tag = match parent.kind() {\n-        METHOD_CALL_EXPR => HighlightTag::Function,\n-        FIELD_EXPR => HighlightTag::Field,\n+    match parent.kind() {\n+        METHOD_CALL_EXPR => {\n+            let mut h = Highlight::new(HighlightTag::Function);\n+            let is_unsafe = ast::MethodCallExpr::cast(parent)\n+                .map(|method_call_expr| sema.is_unsafe_method_call(method_call_expr))\n+                .unwrap_or(false);\n+            if is_unsafe {\n+                h |= HighlightModifier::Unsafe;\n+            }\n+\n+            h\n+        }\n+        FIELD_EXPR => {\n+            let h = HighlightTag::Field;\n+            let is_union = ast::FieldExpr::cast(parent)\n+                .and_then(|field_expr| {\n+                    let field = sema.resolve_field(&field_expr)?;\n+                    Some(if let VariantDef::Union(_) = field.parent_def(sema.db) {\n+                        true\n+                    } else {\n+                        false\n+                    })\n+                })\n+                .unwrap_or(false);\n+            if is_union {\n+                h | HighlightModifier::Unsafe\n+            } else {\n+                h.into()\n+            }\n+        }\n         PATH_SEGMENT => {\n             let path = match parent.parent().and_then(ast::Path::cast) {\n                 Some(it) => it,\n@@ -758,18 +859,15 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n             };\n \n             match parent.kind() {\n-                CALL_EXPR => HighlightTag::Function,\n-                _ => {\n-                    if name.text().chars().next().unwrap_or_default().is_uppercase() {\n-                        HighlightTag::Struct\n-                    } else {\n-                        HighlightTag::Constant\n-                    }\n+                CALL_EXPR => HighlightTag::Function.into(),\n+                _ => if name.text().chars().next().unwrap_or_default().is_uppercase() {\n+                    HighlightTag::Struct.into()\n+                } else {\n+                    HighlightTag::Constant\n                 }\n+                .into(),\n             }\n         }\n-        _ => default,\n-    };\n-\n-    tag.into()\n+        _ => default.into(),\n+    }\n }"}, {"sha": "6046643ef1ed1a3788e4cb64fc5b5197ba2b4bcf", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -4,8 +4,8 @@ use std::{collections::BTreeMap, convert::TryFrom};\n \n use ast::{HasQuotes, HasStringValue};\n use hir::Semantics;\n+use itertools::Itertools;\n use ra_syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n-use stdx::SepBy;\n \n use crate::{\n     call_info::ActiveParameter, Analysis, Highlight, HighlightModifier, HighlightTag,\n@@ -129,8 +129,7 @@ pub(super) fn extract_doc_comments(\n \n             line[pos..].to_owned()\n         })\n-        .sep_by(\"\\n\")\n-        .to_string();\n+        .join(\"\\n\");\n \n     if doctest.is_empty() {\n         return None;"}, {"sha": "a8087635a878e3801ef95d0396eadc9d4040be2a", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -275,19 +275,64 @@ fn test_unsafe_highlighting() {\n         r#\"\n unsafe fn unsafe_fn() {}\n \n+union Union {\n+    a: u32,\n+    b: f32,\n+}\n+\n struct HasUnsafeFn;\n \n impl HasUnsafeFn {\n     unsafe fn unsafe_method(&self) {}\n }\n \n+struct TypeForStaticMut {\n+    a: u8\n+}\n+\n+static mut global_mut: TypeForStaticMut = TypeForStaticMut { a: 0 };\n+\n+#[repr(packed)]\n+struct Packed {\n+    a: u16,\n+}\n+\n+trait DoTheAutoref {\n+    fn calls_autoref(&self);\n+}\n+\n+impl DoTheAutoref for u16 {\n+    fn calls_autoref(&self) {}\n+}\n+\n fn main() {\n-    let x = &5 as *const usize;\n+    let x = &5 as *const _ as *const usize;\n+    let u = Union { b: 0 };\n     unsafe {\n+        // unsafe fn and method calls\n         unsafe_fn();\n+        let b = u.b;\n+        match u {\n+            Union { b: 0 } => (),\n+            Union { a } => (),\n+        }\n         HasUnsafeFn.unsafe_method();\n-        let y = *(x);\n-        let z = -x;\n+\n+        // unsafe deref\n+        let y = *x;\n+\n+        // unsafe access to a static mut\n+        let a = global_mut.a;\n+\n+        // unsafe ref of packed fields\n+        let packed = Packed { a: 0 };\n+        let a = &packed.a;\n+        let ref a = packed.a;\n+        let Packed { ref a } = packed;\n+        let Packed { a: ref _a } = packed;\n+\n+        // unsafe auto ref of packed field\n+        packed.a.calls_autoref();\n     }\n }\n \"#\n@@ -373,6 +418,23 @@ macro_rules! noop {\n     );\n }\n \n+#[test]\n+fn test_extern_crate() {\n+    check_highlighting(\n+        r#\"\n+        //- /main.rs\n+        extern crate std;\n+        extern crate alloc as abc;\n+        //- /std/lib.rs\n+        pub struct S;\n+        //- /alloc/lib.rs\n+        pub struct A\n+        \"#,\n+        expect_file![\"crates/ra_ide/test_data/highlight_extern_crate.html\"],\n+        false,\n+    );\n+}\n+\n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML."}, {"sha": "800d894c7693d2a4649dfe9c691219c6833e4d01", "filename": "crates/ra_ide/test_data/highlight_extern_crate.html", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_extern_crate.html?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,40 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">std</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"punctuation\">;</span>\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "552fea668923f1f9fd9e9a17973d7575885bb90b", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -37,18 +37,63 @@\n </style>\n <pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">union</span> <span class=\"union declaration\">Union</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u32</span><span class=\"punctuation\">,</span>\n+    <span class=\"field declaration\">b</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">f32</span><span class=\"punctuation\">,</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u8</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"punctuation\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+\n+<span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"function attribute\">repr</span><span class=\"punctuation\">(</span><span class=\"attribute\">packed</span><span class=\"punctuation\">)</span><span class=\"attribute\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"punctuation\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u16</span><span class=\"punctuation\">,</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"punctuation\">_</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n+        <span class=\"comment\">// unsafe fn and method calls</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"field unsafe\">b</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"punctuation\">{</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+        <span class=\"punctuation\">}</span>\n         <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe deref</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe access to a static mut</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"static mutable unsafe\">global_mut</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe ref of packed fields</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">packed</span> <span class=\"operator\">=</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">&</span><span class=\"variable\">packed</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"keyword unsafe\">ref</span> <span class=\"field\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">_a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n+\n+        <span class=\"comment\">// unsafe auto ref of packed field</span>\n+        <span class=\"variable\">packed</span><span class=\"punctuation\">.</span><span class=\"field\">a</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "8e0160eee5b47dd945c106d23d47e4933f4e8b53", "filename": "crates/ra_ide/test_data/highlighting.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -64,7 +64,7 @@\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"punctuation\">,</span> <span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"punctuation\">{</span>\n     <span class=\"function\">foo</span><span class=\"operator\">::</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"punctuation\">,</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n@@ -97,7 +97,7 @@\n     <span class=\"punctuation\">}</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n         <span class=\"variable mutable\">vec</span><span class=\"punctuation\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"punctuation\">(</span><span class=\"numeric_literal\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"static mutable\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">;</span>\n+        <span class=\"static mutable unsafe\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span>\n \n     <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"punctuation\">{</span>"}, {"sha": "9bb95277d0da3e29765c4d2e350fe5ebcbf3f94a", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n-    Semantics, TypeParam, Visibility,\n+    db::HirDatabase, Crate, Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef,\n+    Name, PathResolution, Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n use ra_syntax::{\n@@ -80,6 +80,7 @@ impl Definition {\n \n #[derive(Debug)]\n pub enum NameClass {\n+    ExternCrate(Crate),\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`\n     ConstReference(Definition),\n@@ -90,16 +91,18 @@ pub enum NameClass {\n }\n \n impl NameClass {\n-    pub fn into_definition(self) -> Option<Definition> {\n-        match self {\n-            NameClass::Definition(it) => Some(it),\n-            NameClass::ConstReference(_) => None,\n-            NameClass::FieldShorthand { local, field: _ } => Some(Definition::Local(local)),\n-        }\n+    pub fn into_definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n+        Some(match self {\n+            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n+            NameClass::Definition(it) => it,\n+            NameClass::ConstReference(_) => return None,\n+            NameClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n+        })\n     }\n \n-    pub fn definition(self) -> Definition {\n+    pub fn definition(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n+            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n             NameClass::FieldShorthand { local: _, field } => field,\n         }\n@@ -120,32 +123,37 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n     match_ast! {\n         match parent {\n             ast::Rename(it) => {\n-                let use_tree = it.syntax().parent().and_then(ast::UseTree::cast)?;\n-                let path = use_tree.path()?;\n-                let path_segment = path.segment()?;\n-                let name_ref_class = path_segment\n-                    .name_ref()\n-                    // The rename might be from a `self` token, so fallback to the name higher\n-                    // in the use tree.\n-                    .or_else(||{\n-                        if path_segment.self_token().is_none() {\n-                            return None;\n-                        }\n+                if let Some(use_tree) = it.syntax().parent().and_then(ast::UseTree::cast) {\n+                    let path = use_tree.path()?;\n+                    let path_segment = path.segment()?;\n+                    let name_ref_class = path_segment\n+                        .name_ref()\n+                        // The rename might be from a `self` token, so fallback to the name higher\n+                        // in the use tree.\n+                        .or_else(||{\n+                            if path_segment.self_token().is_none() {\n+                                return None;\n+                            }\n \n-                        let use_tree = use_tree\n-                            .syntax()\n-                            .parent()\n-                            .as_ref()\n-                            // Skip over UseTreeList\n-                            .and_then(SyntaxNode::parent)\n-                            .and_then(ast::UseTree::cast)?;\n-                        let path = use_tree.path()?;\n-                        let path_segment = path.segment()?;\n-                        path_segment.name_ref()\n-                    })\n-                    .and_then(|name_ref| classify_name_ref(sema, &name_ref))?;\n+                            let use_tree = use_tree\n+                                .syntax()\n+                                .parent()\n+                                .as_ref()\n+                                // Skip over UseTreeList\n+                                .and_then(SyntaxNode::parent)\n+                                .and_then(ast::UseTree::cast)?;\n+                            let path = use_tree.path()?;\n+                            let path_segment = path.segment()?;\n+                            path_segment.name_ref()\n+                        })\n+                        .and_then(|name_ref| classify_name_ref(sema, &name_ref))?;\n \n-                Some(NameClass::Definition(name_ref_class.definition()))\n+                    Some(NameClass::Definition(name_ref_class.definition(sema.db)))\n+                } else {\n+                    let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n+                    let resolved = sema.resolve_extern_crate(&extern_crate)?;\n+                    Some(NameClass::ExternCrate(resolved))\n+                }\n             },\n             ast::IdentPat(it) => {\n                 let local = sema.to_def(&it)?;\n@@ -220,13 +228,15 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n \n #[derive(Debug)]\n pub enum NameRefClass {\n+    ExternCrate(Crate),\n     Definition(Definition),\n     FieldShorthand { local: Local, field: Definition },\n }\n \n impl NameRefClass {\n-    pub fn definition(self) -> Definition {\n+    pub fn definition(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n+            NameRefClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n         }\n@@ -307,9 +317,15 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n-    let resolved = sema.resolve_path(&path)?;\n-    Some(NameRefClass::Definition(resolved.into()))\n+    if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n+        if let Some(resolved) = sema.resolve_path(&path) {\n+            return Some(NameRefClass::Definition(resolved.into()));\n+        }\n+    }\n+\n+    let extern_crate = ast::ExternCrate::cast(parent)?;\n+    let resolved = sema.resolve_extern_crate(&extern_crate)?;\n+    Some(NameRefClass::ExternCrate(resolved))\n }\n \n impl From<PathResolution> for Definition {"}, {"sha": "9e040973b3b3c6adbcc73ba31969140108f2e35a", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -61,5 +61,5 @@ fn get_name_definition<'a>(\n         candidate_node\n     };\n     let name = ast::Name::cast(candidate_name_node)?;\n-    classify_name(sema, &name)?.into_definition()\n+    classify_name(sema, &name)?.into_definition(sema.db)\n }"}, {"sha": "933a3a3b5e3d178f47425f7d1d86342f9354e749", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -276,7 +276,7 @@ impl<'a> TtIter<'a> {\n         Ok(tt::Subtree {\n             delimiter: None,\n             token_trees: vec![\n-                tt::Leaf::Punct(punct.clone()).into(),\n+                tt::Leaf::Punct(*punct).into(),\n                 tt::Leaf::Ident(ident.clone()).into(),\n             ],\n         }"}, {"sha": "88468bc9716e0f6087ce0ae29b520de68c798642", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -110,7 +110,7 @@ pub(crate) mod fragments {\n     }\n \n     pub(crate) fn item(p: &mut Parser) {\n-        items::item_or_macro(p, true, items::ItemFlavor::Mod)\n+        items::item_or_macro(p, true)\n     }\n \n     pub(crate) fn macro_items(p: &mut Parser) {"}, {"sha": "3291e3f1469d76cf759658fb643cc2d7a15cafca", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -73,7 +73,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n \n     // test block_items\n     // fn a() { fn b() {} }\n-    let m = match items::maybe_item(p, m, items::ItemFlavor::Mod) {\n+    let m = match items::maybe_item(p, m) {\n         Ok(()) => return,\n         Err(m) => m,\n     };\n@@ -509,7 +509,6 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n //     x.1i32;\n //     x.0x01;\n // }\n-#[allow(clippy::if_same_then_else)]\n fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);"}, {"sha": "d091b0fbb291ace3ffe44a9a038127d1ecfb89bd", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 26, "deletions": 86, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -22,24 +22,19 @@ use super::*;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n     while !(stop_on_r_curly && p.at(T!['}']) || p.at(EOF)) {\n-        item_or_macro(p, stop_on_r_curly, ItemFlavor::Mod)\n+        item_or_macro(p, stop_on_r_curly)\n     }\n }\n \n-pub(super) enum ItemFlavor {\n-    Mod,\n-    Trait,\n-}\n-\n pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n     FN_KW, STRUCT_KW, ENUM_KW, IMPL_KW, TRAIT_KW, CONST_KW, STATIC_KW, LET_KW, MOD_KW, PUB_KW,\n     CRATE_KW, USE_KW, MACRO_KW\n ];\n \n-pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemFlavor) {\n+pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n     let m = p.start();\n     attributes::outer_attributes(p);\n-    let m = match maybe_item(p, m, flavor) {\n+    let m = match maybe_item(p, m) {\n         Ok(()) => {\n             if p.at(T![;]) {\n                 p.err_and_bump(\n@@ -76,7 +71,7 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n     }\n }\n \n-pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Result<(), Marker> {\n+pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     // test_err pub_expr\n     // fn foo() { pub 92; }\n     let has_visibility = opt_visibility(p);\n@@ -114,118 +109,63 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         has_mods = true;\n     }\n \n-    if p.at(IDENT)\n-        && p.at_contextual_kw(\"default\")\n-        && (match p.nth(1) {\n-            T![impl] => true,\n+    // test default_item\n+    // default impl T for Foo {}\n+    if p.at(IDENT) && p.at_contextual_kw(\"default\") {\n+        match p.nth(1) {\n+            T![fn] | T![type] | T![const] | T![impl] => {\n+                p.bump_remap(T![default]);\n+                has_mods = true;\n+            }\n             T![unsafe] => {\n-                // test default_unsafe_impl\n-                // default unsafe impl Foo {}\n-\n-                // test default_unsafe_fn\n-                // impl T for Foo {\n+                // test default_unsafe_item\n+                // default unsafe impl T for Foo {\n                 //     default unsafe fn foo() {}\n                 // }\n-                if p.nth(2) == T![impl] || p.nth(2) == T![fn] {\n+                if matches!(p.nth(2), T![impl] | T![fn]) {\n                     p.bump_remap(T![default]);\n                     p.bump(T![unsafe]);\n                     has_mods = true;\n                 }\n-                false\n             }\n-            T![fn] | T![type] | T![const] => {\n-                if let ItemFlavor::Mod = flavor {\n-                    true\n-                } else {\n-                    false\n-                }\n-            }\n-            _ => false,\n-        })\n-    {\n-        p.bump_remap(T![default]);\n-        has_mods = true;\n+            _ => (),\n+        }\n     }\n+\n+    // test existential_type\n+    // existential type Foo: Fn() -> usize;\n     if p.at(IDENT) && p.at_contextual_kw(\"existential\") && p.nth(1) == T![type] {\n         p.bump_remap(T![existential]);\n         has_mods = true;\n     }\n \n     // items\n     match p.current() {\n-        // test async_fn\n-        // async fn foo() {}\n-\n-        // test extern_fn\n-        // extern fn foo() {}\n-\n-        // test const_fn\n-        // const fn foo() {}\n-\n-        // test const_unsafe_fn\n-        // const unsafe fn foo() {}\n-\n-        // test unsafe_extern_fn\n-        // unsafe extern \"C\" fn foo() {}\n-\n-        // test unsafe_fn\n-        // unsafe fn foo() {}\n-\n-        // test combined_fns\n-        // async unsafe fn foo() {}\n-        // const unsafe fn bar() {}\n-\n-        // test_err wrong_order_fns\n-        // unsafe async fn foo() {}\n-        // unsafe const fn bar() {}\n+        // test fn\n+        // fn foo() {}\n         T![fn] => {\n             fn_def(p);\n             m.complete(p, FN);\n         }\n \n-        // test unsafe_trait\n-        // unsafe trait T {}\n-\n-        // test auto_trait\n-        // auto trait T {}\n-\n-        // test unsafe_auto_trait\n-        // unsafe auto trait T {}\n+        // test trait\n+        // trait T {}\n         T![trait] => {\n             traits::trait_def(p);\n             m.complete(p, TRAIT);\n         }\n \n-        // test unsafe_impl\n-        // unsafe impl Foo {}\n-\n-        // test default_impl\n-        // default impl Foo {}\n-\n-        // test_err default_fn_type\n-        // trait T {\n-        //     default type T = Bar;\n-        //     default fn foo() {}\n-        // }\n-\n-        // test default_fn_type\n-        // impl T for Foo {\n-        //     default type T = Bar;\n-        //     default fn foo() {}\n-        // }\n         T![const] => {\n             consts::const_def(p, m);\n         }\n \n-        // test unsafe_default_impl\n-        // unsafe default impl Foo {}\n+        // test impl\n+        // impl T for S {}\n         T![impl] => {\n             traits::impl_def(p);\n             m.complete(p, IMPL);\n         }\n \n-        // test existential_type\n-        // existential type Foo: Fn() -> usize;\n         T![type] => {\n             type_def(p, m);\n         }"}, {"sha": "751ce65f2dc99dee7da126a0db2da3648b51f07e", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn trait_item_list(p: &mut Parser) {\n             error_block(p, \"expected an item\");\n             continue;\n         }\n-        item_or_macro(p, true, ItemFlavor::Trait);\n+        item_or_macro(p, true);\n     }\n     p.expect(T!['}']);\n     m.complete(p, ASSOC_ITEM_LIST);\n@@ -104,7 +104,7 @@ pub(crate) fn impl_item_list(p: &mut Parser) {\n             error_block(p, \"expected an item\");\n             continue;\n         }\n-        item_or_macro(p, true, ItemFlavor::Mod);\n+        item_or_macro(p, true);\n     }\n     p.expect(T!['}']);\n     m.complete(p, ASSOC_ITEM_LIST);"}, {"sha": "d2487acc3b9c4b6d449db01cc1599e384c3c2060", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -269,8 +269,8 @@ impl Marker {\n     pub(crate) fn complete(mut self, p: &mut Parser, kind: SyntaxKind) -> CompletedMarker {\n         self.bomb.defuse();\n         let idx = self.pos as usize;\n-        match p.events[idx] {\n-            Event::Start { kind: ref mut slot, .. } => {\n+        match &mut p.events[idx] {\n+            Event::Start { kind: slot, .. } => {\n                 *slot = kind;\n             }\n             _ => unreachable!(),\n@@ -320,8 +320,8 @@ impl CompletedMarker {\n     pub(crate) fn precede(self, p: &mut Parser) -> Marker {\n         let new_pos = p.start();\n         let idx = self.start_pos as usize;\n-        match p.events[idx] {\n-            Event::Start { ref mut forward_parent, .. } => {\n+        match &mut p.events[idx] {\n+            Event::Start { forward_parent, .. } => {\n                 *forward_parent = Some(new_pos.pos - self.start_pos);\n             }\n             _ => unreachable!(),\n@@ -333,12 +333,12 @@ impl CompletedMarker {\n     pub(crate) fn undo_completion(self, p: &mut Parser) -> Marker {\n         let start_idx = self.start_pos as usize;\n         let finish_idx = self.finish_pos as usize;\n-        match p.events[start_idx] {\n-            Event::Start { ref mut kind, forward_parent: None } => *kind = TOMBSTONE,\n+        match &mut p.events[start_idx] {\n+            Event::Start { kind, forward_parent: None } => *kind = TOMBSTONE,\n             _ => unreachable!(),\n         }\n-        match p.events[finish_idx] {\n-            ref mut slot @ Event::Finish => *slot = Event::tombstone(),\n+        match &mut p.events[finish_idx] {\n+            slot @ Event::Finish => *slot = Event::tombstone(),\n             _ => unreachable!(),\n         }\n         Marker::new(self.start_pos)"}, {"sha": "37dd3f496566d539abd58af086ad0242217048c7", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -90,7 +90,7 @@ impl ProcMacroProcessSrv {\n             }\n             Some(it) => it,\n         };\n-        sender.send(Task { req: req.into(), result_tx }).unwrap();\n+        sender.send(Task { req, result_tx }).unwrap();\n         let res = result_rx\n             .recv()\n             .map_err(|_| ra_tt::ExpansionError::Unknown(\"Proc macro thread is closed.\".into()))?;"}, {"sha": "83390212ae0bbc81691430c2a332d2eecdd9725e", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -24,7 +24,7 @@ impl std::ops::Sub for MemoryUsage {\n impl MemoryUsage {\n     pub fn current() -> MemoryUsage {\n         cfg_if! {\n-            if #[cfg(target_os = \"linux\")] {\n+            if #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))] {\n                 // Note: This is incredibly slow.\n                 let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n                 MemoryUsage { allocated: Bytes(alloc) }"}, {"sha": "d53bd46c77fc5f2a1b7a930592eb6a70039c909e", "filename": "crates/ra_ssr/src/resolving.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fresolving.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -5,7 +5,7 @@ use crate::{parsing, SsrError};\n use parsing::Placeholder;\n use ra_db::FilePosition;\n use ra_syntax::{ast, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken};\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use rustc_hash::FxHashMap;\n use test_utils::mark;\n \n pub(crate) struct ResolutionScope<'db> {\n@@ -124,8 +124,10 @@ impl Resolver<'_, '_> {\n                     .resolution_scope\n                     .resolve_path(&path)\n                     .ok_or_else(|| error!(\"Failed to resolve path `{}`\", node.text()))?;\n-                resolved_paths.insert(node, ResolvedPath { resolution, depth });\n-                return Ok(());\n+                if self.ok_to_use_path_resolution(&resolution) {\n+                    resolved_paths.insert(node, ResolvedPath { resolution, depth });\n+                    return Ok(());\n+                }\n             }\n         }\n         for node in node.children() {\n@@ -149,6 +151,27 @@ impl Resolver<'_, '_> {\n         }\n         false\n     }\n+\n+    fn ok_to_use_path_resolution(&self, resolution: &hir::PathResolution) -> bool {\n+        match resolution {\n+            hir::PathResolution::AssocItem(hir::AssocItem::Function(function)) => {\n+                if function.has_self_param(self.resolution_scope.scope.db) {\n+                    // If we don't use this path resolution, then we won't be able to match method\n+                    // calls. e.g. `Foo::bar($s)` should match `x.bar()`.\n+                    true\n+                } else {\n+                    mark::hit!(replace_associated_trait_default_function_call);\n+                    false\n+                }\n+            }\n+            hir::PathResolution::AssocItem(_) => {\n+                // Not a function. Could be a constant or an associated type.\n+                mark::hit!(replace_associated_trait_constant);\n+                false\n+            }\n+            _ => true,\n+        }\n+    }\n }\n \n impl<'db> ResolutionScope<'db> {\n@@ -195,7 +218,7 @@ impl<'db> ResolutionScope<'db> {\n             adt.ty(self.scope.db).iterate_path_candidates(\n                 self.scope.db,\n                 self.scope.module()?.krate(),\n-                &FxHashSet::default(),\n+                &self.scope.traits_in_scope(),\n                 Some(hir_path.segments().last()?.name),\n                 |_ty, assoc_item| Some(hir::PathResolution::AssocItem(assoc_item)),\n             )"}, {"sha": "7d4d470c0eda1889121fd733bc9d1ab5e6441fde", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -549,6 +549,70 @@ fn replace_associated_function_call() {\n     );\n }\n \n+#[test]\n+fn replace_associated_trait_default_function_call() {\n+    mark::check!(replace_associated_trait_default_function_call);\n+    assert_ssr_transform(\n+        \"Bar2::foo() ==>> Bar2::foo2()\",\n+        r#\"\n+            trait Foo { fn foo() {} }\n+            pub struct Bar {}\n+            impl Foo for Bar {}\n+            pub struct Bar2 {}\n+            impl Foo for Bar2 {}\n+            impl Bar2 { fn foo2() {} }\n+            fn main() {\n+                Bar::foo();\n+                Bar2::foo();\n+            }\n+        \"#,\n+        expect![[r#\"\n+            trait Foo { fn foo() {} }\n+            pub struct Bar {}\n+            impl Foo for Bar {}\n+            pub struct Bar2 {}\n+            impl Foo for Bar2 {}\n+            impl Bar2 { fn foo2() {} }\n+            fn main() {\n+                Bar::foo();\n+                Bar2::foo2();\n+            }\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn replace_associated_trait_constant() {\n+    mark::check!(replace_associated_trait_constant);\n+    assert_ssr_transform(\n+        \"Bar2::VALUE ==>> Bar2::VALUE_2222\",\n+        r#\"\n+            trait Foo { const VALUE: i32; const VALUE_2222: i32; }\n+            pub struct Bar {}\n+            impl Foo for Bar { const VALUE: i32 = 1;  const VALUE_2222: i32 = 2; }\n+            pub struct Bar2 {}\n+            impl Foo for Bar2 { const VALUE: i32 = 1;  const VALUE_2222: i32 = 2; }\n+            impl Bar2 { fn foo2() {} }\n+            fn main() {\n+                Bar::VALUE;\n+                Bar2::VALUE;\n+            }\n+            \"#,\n+        expect![[r#\"\n+            trait Foo { const VALUE: i32; const VALUE_2222: i32; }\n+            pub struct Bar {}\n+            impl Foo for Bar { const VALUE: i32 = 1;  const VALUE_2222: i32 = 2; }\n+            pub struct Bar2 {}\n+            impl Foo for Bar2 { const VALUE: i32 = 1;  const VALUE_2222: i32 = 2; }\n+            impl Bar2 { fn foo2() {} }\n+            fn main() {\n+                Bar::VALUE;\n+                Bar2::VALUE_2222;\n+            }\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn replace_path_in_different_contexts() {\n     // Note the <|> inside module a::b which marks the point where the rule is interpreted. We"}, {"sha": "0bdc22d953fcabd696949cdd42d392eef493d554", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,7 +1,7 @@\n //! Various traits that are implemented by ast nodes.\n //!\n //! The implementations are usually trivial, and live in generated.rs\n-use stdx::SepBy;\n+use itertools::Itertools;\n \n use crate::{\n     ast::{self, support, AstChildren, AstNode, AstToken},\n@@ -119,8 +119,7 @@ impl CommentIter {\n                 // of a line in markdown.\n                 line[pos..end].to_owned()\n             })\n-            .sep_by(\"\\n\")\n-            .to_string();\n+            .join(\"\\n\");\n \n         if has_comments {\n             Some(docs)"}, {"sha": "51ad2a846fadef0e193f9d85719c729cb4fd116f", "filename": "crates/ra_syntax/test_data/parser/err/0043_default_const.rast", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,40 +0,0 @@\n-SOURCE_FILE@0..39\n-  TRAIT@0..38\n-    TRAIT_KW@0..5 \"trait\"\n-    WHITESPACE@5..6 \" \"\n-    NAME@6..7\n-      IDENT@6..7 \"T\"\n-    WHITESPACE@7..8 \" \"\n-    ASSOC_ITEM_LIST@8..38\n-      L_CURLY@8..9 \"{\"\n-      WHITESPACE@9..12 \"\\n  \"\n-      MACRO_CALL@12..19\n-        PATH@12..19\n-          PATH_SEGMENT@12..19\n-            NAME_REF@12..19\n-              IDENT@12..19 \"default\"\n-      WHITESPACE@19..20 \" \"\n-      CONST@20..36\n-        CONST_KW@20..25 \"const\"\n-        WHITESPACE@25..26 \" \"\n-        NAME@26..27\n-          IDENT@26..27 \"f\"\n-        COLON@27..28 \":\"\n-        WHITESPACE@28..29 \" \"\n-        PATH_TYPE@29..31\n-          PATH@29..31\n-            PATH_SEGMENT@29..31\n-              NAME_REF@29..31\n-                IDENT@29..31 \"u8\"\n-        WHITESPACE@31..32 \" \"\n-        EQ@32..33 \"=\"\n-        WHITESPACE@33..34 \" \"\n-        LITERAL@34..35\n-          INT_NUMBER@34..35 \"0\"\n-        SEMICOLON@35..36 \";\"\n-      WHITESPACE@36..37 \"\\n\"\n-      R_CURLY@37..38 \"}\"\n-  WHITESPACE@38..39 \"\\n\"\n-error 19..19: expected BANG\n-error 19..19: expected `{`, `[`, `(`\n-error 19..19: expected SEMICOLON"}, {"sha": "80f15474a5d0dcc39ba6dd4ccee087b96edbf172", "filename": "crates/ra_syntax/test_data/parser/err/0043_default_const.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,3 +0,0 @@\n-trait T {\n-  default const f: u8 = 0;\n-}"}, {"sha": "df29017e7f2352a7a0e87eea22bb21333a136af7", "filename": "crates/ra_syntax/test_data/parser/err/0043_weird_blocks.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "previous_filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rast"}, {"sha": "8fa324c1a14f7d3040014041387ca6f296863503", "filename": "crates/ra_syntax/test_data/parser/err/0043_weird_blocks.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "previous_filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rs"}, {"sha": "a6e6552a99e44eaaa95a9140dee417b5ccdcc512", "filename": "crates/ra_syntax/test_data/parser/err/0045_item_modifiers.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "previous_filename": "crates/ra_syntax/test_data/parser/inline/err/0010_wrong_order_fns.rast"}, {"sha": "731e58013bd87ce4eb651d49acb1c7900d9fde79", "filename": "crates/ra_syntax/test_data/parser/err/0045_item_modifiers.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "previous_filename": "crates/ra_syntax/test_data/parser/inline/err/0010_wrong_order_fns.rs"}, {"sha": "acd72094b95a27e10b855df56ea19453fcbfeda7", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rast", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,58 +0,0 @@\n-SOURCE_FILE@0..62\n-  TRAIT@0..61\n-    TRAIT_KW@0..5 \"trait\"\n-    WHITESPACE@5..6 \" \"\n-    NAME@6..7\n-      IDENT@6..7 \"T\"\n-    WHITESPACE@7..8 \" \"\n-    ASSOC_ITEM_LIST@8..61\n-      L_CURLY@8..9 \"{\"\n-      WHITESPACE@9..14 \"\\n    \"\n-      MACRO_CALL@14..21\n-        PATH@14..21\n-          PATH_SEGMENT@14..21\n-            NAME_REF@14..21\n-              IDENT@14..21 \"default\"\n-      WHITESPACE@21..22 \" \"\n-      TYPE_ALIAS@22..35\n-        TYPE_KW@22..26 \"type\"\n-        WHITESPACE@26..27 \" \"\n-        NAME@27..28\n-          IDENT@27..28 \"T\"\n-        WHITESPACE@28..29 \" \"\n-        EQ@29..30 \"=\"\n-        WHITESPACE@30..31 \" \"\n-        PATH_TYPE@31..34\n-          PATH@31..34\n-            PATH_SEGMENT@31..34\n-              NAME_REF@31..34\n-                IDENT@31..34 \"Bar\"\n-        SEMICOLON@34..35 \";\"\n-      WHITESPACE@35..40 \"\\n    \"\n-      MACRO_CALL@40..47\n-        PATH@40..47\n-          PATH_SEGMENT@40..47\n-            NAME_REF@40..47\n-              IDENT@40..47 \"default\"\n-      WHITESPACE@47..48 \" \"\n-      FN@48..59\n-        FN_KW@48..50 \"fn\"\n-        WHITESPACE@50..51 \" \"\n-        NAME@51..54\n-          IDENT@51..54 \"foo\"\n-        PARAM_LIST@54..56\n-          L_PAREN@54..55 \"(\"\n-          R_PAREN@55..56 \")\"\n-        WHITESPACE@56..57 \" \"\n-        BLOCK_EXPR@57..59\n-          L_CURLY@57..58 \"{\"\n-          R_CURLY@58..59 \"}\"\n-      WHITESPACE@59..60 \"\\n\"\n-      R_CURLY@60..61 \"}\"\n-  WHITESPACE@61..62 \"\\n\"\n-error 21..21: expected BANG\n-error 21..21: expected `{`, `[`, `(`\n-error 21..21: expected SEMICOLON\n-error 47..47: expected BANG\n-error 47..47: expected `{`, `[`, `(`\n-error 47..47: expected SEMICOLON"}, {"sha": "15ba8f4a85e4453298c3a60cb35535f106b572a1", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,4 +0,0 @@\n-trait T {\n-    default type T = Bar;\n-    default fn foo() {}\n-}"}, {"sha": "625ab4c2d9f6ac80b06ad841948a708b200457c5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0016_unsafe_trait.rast", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,13 +0,0 @@\n-SOURCE_FILE@0..18\n-  TRAIT@0..17\n-    UNSAFE_KW@0..6 \"unsafe\"\n-    WHITESPACE@6..7 \" \"\n-    TRAIT_KW@7..12 \"trait\"\n-    WHITESPACE@12..13 \" \"\n-    NAME@13..14\n-      IDENT@13..14 \"T\"\n-    WHITESPACE@14..15 \" \"\n-    ASSOC_ITEM_LIST@15..17\n-      L_CURLY@15..16 \"{\"\n-      R_CURLY@16..17 \"}\"\n-  WHITESPACE@17..18 \"\\n\""}, {"sha": "04e021550d88d4f6c75a1654127197b6fca1ed84", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0016_unsafe_trait.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0016_unsafe_trait.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-unsafe trait T {}"}, {"sha": "293b1d64c7ec6b3926b654f9f3691ca2b504174e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0036_unsafe_extern_fn.rast", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,21 +0,0 @@\n-SOURCE_FILE@0..30\n-  FN@0..29\n-    UNSAFE_KW@0..6 \"unsafe\"\n-    WHITESPACE@6..7 \" \"\n-    ABI@7..17\n-      EXTERN_KW@7..13 \"extern\"\n-      WHITESPACE@13..14 \" \"\n-      STRING@14..17 \"\\\"C\\\"\"\n-    WHITESPACE@17..18 \" \"\n-    FN_KW@18..20 \"fn\"\n-    WHITESPACE@20..21 \" \"\n-    NAME@21..24\n-      IDENT@21..24 \"foo\"\n-    PARAM_LIST@24..26\n-      L_PAREN@24..25 \"(\"\n-      R_PAREN@25..26 \")\"\n-    WHITESPACE@26..27 \" \"\n-    BLOCK_EXPR@27..29\n-      L_CURLY@27..28 \"{\"\n-      R_CURLY@28..29 \"}\"\n-  WHITESPACE@29..30 \"\\n\""}, {"sha": "1295c2cd22bf5ee8ade672bd4c9df78814a18bcf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0036_unsafe_extern_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0036_unsafe_extern_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-unsafe extern \"C\" fn foo() {}"}, {"sha": "d6dfa83b709bfc5e1d605cf845b11a6b3bb33212", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0047_unsafe_default_impl.rast", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,18 +0,0 @@\n-SOURCE_FILE@0..27\n-  IMPL@0..26\n-    UNSAFE_KW@0..6 \"unsafe\"\n-    WHITESPACE@6..7 \" \"\n-    DEFAULT_KW@7..14 \"default\"\n-    WHITESPACE@14..15 \" \"\n-    IMPL_KW@15..19 \"impl\"\n-    WHITESPACE@19..20 \" \"\n-    PATH_TYPE@20..23\n-      PATH@20..23\n-        PATH_SEGMENT@20..23\n-          NAME_REF@20..23\n-            IDENT@20..23 \"Foo\"\n-    WHITESPACE@23..24 \" \"\n-    ASSOC_ITEM_LIST@24..26\n-      L_CURLY@24..25 \"{\"\n-      R_CURLY@25..26 \"}\"\n-  WHITESPACE@26..27 \"\\n\""}, {"sha": "9cd6c57bd89975906e2ee92d871694049450f2b3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0047_unsafe_default_impl.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-unsafe default impl Foo {}"}, {"sha": "97548a5eebcbd5041ca6c15086154d7fab4c1060", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0057_const_fn.rast", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,16 +0,0 @@\n-SOURCE_FILE@0..18\n-  FN@0..17\n-    CONST_KW@0..5 \"const\"\n-    WHITESPACE@5..6 \" \"\n-    FN_KW@6..8 \"fn\"\n-    WHITESPACE@8..9 \" \"\n-    NAME@9..12\n-      IDENT@9..12 \"foo\"\n-    PARAM_LIST@12..14\n-      L_PAREN@12..13 \"(\"\n-      R_PAREN@13..14 \")\"\n-    WHITESPACE@14..15 \" \"\n-    BLOCK_EXPR@15..17\n-      L_CURLY@15..16 \"{\"\n-      R_CURLY@16..17 \"}\"\n-  WHITESPACE@17..18 \"\\n\""}, {"sha": "8c84d9cd7c420e056585ae9b00586f820835f432", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0057_const_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0057_const_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-const fn foo() {}"}, {"sha": "43c09affedf2f73d0caa7c595fb8cc6874c41020", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0087_unsafe_impl.rast", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,16 +0,0 @@\n-SOURCE_FILE@0..19\n-  IMPL@0..18\n-    UNSAFE_KW@0..6 \"unsafe\"\n-    WHITESPACE@6..7 \" \"\n-    IMPL_KW@7..11 \"impl\"\n-    WHITESPACE@11..12 \" \"\n-    PATH_TYPE@12..15\n-      PATH@12..15\n-        PATH_SEGMENT@12..15\n-          NAME_REF@12..15\n-            IDENT@12..15 \"Foo\"\n-    WHITESPACE@15..16 \" \"\n-    ASSOC_ITEM_LIST@16..18\n-      L_CURLY@16..17 \"{\"\n-      R_CURLY@17..18 \"}\"\n-  WHITESPACE@18..19 \"\\n\""}, {"sha": "41055f41d965443e7c5f28ea7535a4a6bb436a22", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0087_unsafe_impl.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-unsafe impl Foo {}"}, {"sha": "405b6a259f97fa9775f7beda238c37c7df8e60c8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0089_extern_fn.rast", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,17 +0,0 @@\n-SOURCE_FILE@0..19\n-  FN@0..18\n-    ABI@0..6\n-      EXTERN_KW@0..6 \"extern\"\n-    WHITESPACE@6..7 \" \"\n-    FN_KW@7..9 \"fn\"\n-    WHITESPACE@9..10 \" \"\n-    NAME@10..13\n-      IDENT@10..13 \"foo\"\n-    PARAM_LIST@13..15\n-      L_PAREN@13..14 \"(\"\n-      R_PAREN@14..15 \")\"\n-    WHITESPACE@15..16 \" \"\n-    BLOCK_EXPR@16..18\n-      L_CURLY@16..17 \"{\"\n-      R_CURLY@17..18 \"}\"\n-  WHITESPACE@18..19 \"\\n\""}, {"sha": "394a049f0f9c0adb98579200222a0f71f65e40c9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0089_extern_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0089_extern_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-extern fn foo() {}"}, {"sha": "0cac9ac431fd5fe797e58b9b9757d8710979ae05", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0091_auto_trait.rast", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,13 +0,0 @@\n-SOURCE_FILE@0..16\n-  TRAIT@0..15\n-    AUTO_KW@0..4 \"auto\"\n-    WHITESPACE@4..5 \" \"\n-    TRAIT_KW@5..10 \"trait\"\n-    WHITESPACE@10..11 \" \"\n-    NAME@11..12\n-      IDENT@11..12 \"T\"\n-    WHITESPACE@12..13 \" \"\n-    ASSOC_ITEM_LIST@13..15\n-      L_CURLY@13..14 \"{\"\n-      R_CURLY@14..15 \"}\"\n-  WHITESPACE@15..16 \"\\n\""}, {"sha": "72adf603519a69df900245e786c86cd94e4cfe78", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0091_auto_trait.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0091_auto_trait.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-auto trait T {}"}, {"sha": "0ef11c6825e925f5e5d65eb1407107da4048f4fd", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0094_unsafe_auto_trait.rast", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,15 +0,0 @@\n-SOURCE_FILE@0..23\n-  TRAIT@0..22\n-    UNSAFE_KW@0..6 \"unsafe\"\n-    WHITESPACE@6..7 \" \"\n-    AUTO_KW@7..11 \"auto\"\n-    WHITESPACE@11..12 \" \"\n-    TRAIT_KW@12..17 \"trait\"\n-    WHITESPACE@17..18 \" \"\n-    NAME@18..19\n-      IDENT@18..19 \"T\"\n-    WHITESPACE@19..20 \" \"\n-    ASSOC_ITEM_LIST@20..22\n-      L_CURLY@20..21 \"{\"\n-      R_CURLY@21..22 \"}\"\n-  WHITESPACE@22..23 \"\\n\""}, {"sha": "03d29f3241db2ba7b0f34d5ca7c8ded348f0d92d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0094_unsafe_auto_trait.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0094_unsafe_auto_trait.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-unsafe auto trait T {}"}, {"sha": "0a1b21d6e6865d30c38d6f5c5c960dbd5228981b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0097_default_impl.rast", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,16 +0,0 @@\n-SOURCE_FILE@0..20\n-  IMPL@0..19\n-    DEFAULT_KW@0..7 \"default\"\n-    WHITESPACE@7..8 \" \"\n-    IMPL_KW@8..12 \"impl\"\n-    WHITESPACE@12..13 \" \"\n-    PATH_TYPE@13..16\n-      PATH@13..16\n-        PATH_SEGMENT@13..16\n-          NAME_REF@13..16\n-            IDENT@13..16 \"Foo\"\n-    WHITESPACE@16..17 \" \"\n-    ASSOC_ITEM_LIST@17..19\n-      L_CURLY@17..18 \"{\"\n-      R_CURLY@18..19 \"}\"\n-  WHITESPACE@19..20 \"\\n\""}, {"sha": "ef6aa84a295f5638ed53a7876407d0c84213c0ff", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0097_default_impl.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-default impl Foo {}"}, {"sha": "32a77ba490e6ce31ccabac110ac0c980f50dca78", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0098_const_unsafe_fn.rast", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,18 +0,0 @@\n-SOURCE_FILE@0..25\n-  FN@0..24\n-    CONST_KW@0..5 \"const\"\n-    WHITESPACE@5..6 \" \"\n-    UNSAFE_KW@6..12 \"unsafe\"\n-    WHITESPACE@12..13 \" \"\n-    FN_KW@13..15 \"fn\"\n-    WHITESPACE@15..16 \" \"\n-    NAME@16..19\n-      IDENT@16..19 \"foo\"\n-    PARAM_LIST@19..21\n-      L_PAREN@19..20 \"(\"\n-      R_PAREN@20..21 \")\"\n-    WHITESPACE@21..22 \" \"\n-    BLOCK_EXPR@22..24\n-      L_CURLY@22..23 \"{\"\n-      R_CURLY@23..24 \"}\"\n-  WHITESPACE@24..25 \"\\n\""}, {"sha": "31a1e435f555a5ccdc6581b17c778848e6b5a8a7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0098_const_unsafe_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0098_const_unsafe_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-const unsafe fn foo() {}"}, {"sha": "73c94e5d43aac3367b03133fb178fa00135b717d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0101_unsafe_fn.rast", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,16 +0,0 @@\n-SOURCE_FILE@0..19\n-  FN@0..18\n-    UNSAFE_KW@0..6 \"unsafe\"\n-    WHITESPACE@6..7 \" \"\n-    FN_KW@7..9 \"fn\"\n-    WHITESPACE@9..10 \" \"\n-    NAME@10..13\n-      IDENT@10..13 \"foo\"\n-    PARAM_LIST@13..15\n-      L_PAREN@13..14 \"(\"\n-      R_PAREN@14..15 \")\"\n-    WHITESPACE@15..16 \" \"\n-    BLOCK_EXPR@16..18\n-      L_CURLY@16..17 \"{\"\n-      R_CURLY@17..18 \"}\"\n-  WHITESPACE@18..19 \"\\n\""}, {"sha": "33cfc4cd7a6c1f2610768fc7b9e95e0239de9bd8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0101_unsafe_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0101_unsafe_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-unsafe fn foo() {}"}, {"sha": "a7df188bd636eb0634fd30bff8af332581bf3f26", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0124_async_fn.rast", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,16 +0,0 @@\n-SOURCE_FILE@0..18\n-  FN@0..17\n-    ASYNC_KW@0..5 \"async\"\n-    WHITESPACE@5..6 \" \"\n-    FN_KW@6..8 \"fn\"\n-    WHITESPACE@8..9 \" \"\n-    NAME@9..12\n-      IDENT@9..12 \"foo\"\n-    PARAM_LIST@12..14\n-      L_PAREN@12..13 \"(\"\n-      R_PAREN@13..14 \")\"\n-    WHITESPACE@14..15 \" \"\n-    BLOCK_EXPR@15..17\n-      L_CURLY@15..16 \"{\"\n-      R_CURLY@16..17 \"}\"\n-  WHITESPACE@17..18 \"\\n\""}, {"sha": "f4adcb62b3b828b2ed2972ab2e40e63b402e4850", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0124_async_fn.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0124_async_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-async fn foo() {}"}, {"sha": "98a20f36d6247a6a153f5f660e4c2c461eeeabdc", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0128_combined_fns.rast", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,35 +0,0 @@\n-SOURCE_FILE@0..50\n-  FN@0..24\n-    ASYNC_KW@0..5 \"async\"\n-    WHITESPACE@5..6 \" \"\n-    UNSAFE_KW@6..12 \"unsafe\"\n-    WHITESPACE@12..13 \" \"\n-    FN_KW@13..15 \"fn\"\n-    WHITESPACE@15..16 \" \"\n-    NAME@16..19\n-      IDENT@16..19 \"foo\"\n-    PARAM_LIST@19..21\n-      L_PAREN@19..20 \"(\"\n-      R_PAREN@20..21 \")\"\n-    WHITESPACE@21..22 \" \"\n-    BLOCK_EXPR@22..24\n-      L_CURLY@22..23 \"{\"\n-      R_CURLY@23..24 \"}\"\n-  WHITESPACE@24..25 \"\\n\"\n-  FN@25..49\n-    CONST_KW@25..30 \"const\"\n-    WHITESPACE@30..31 \" \"\n-    UNSAFE_KW@31..37 \"unsafe\"\n-    WHITESPACE@37..38 \" \"\n-    FN_KW@38..40 \"fn\"\n-    WHITESPACE@40..41 \" \"\n-    NAME@41..44\n-      IDENT@41..44 \"bar\"\n-    PARAM_LIST@44..46\n-      L_PAREN@44..45 \"(\"\n-      R_PAREN@45..46 \")\"\n-    WHITESPACE@46..47 \" \"\n-    BLOCK_EXPR@47..49\n-      L_CURLY@47..48 \"{\"\n-      R_CURLY@48..49 \"}\"\n-  WHITESPACE@49..50 \"\\n\""}, {"sha": "12628714532d41149bfad1228747d9c8727d4576", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0128_combined_fns.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0128_combined_fns.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,2 +0,0 @@\n-async unsafe fn foo() {}\n-const unsafe fn bar() {}"}, {"sha": "b8d26a53a5d24b34d47dc3b866e002b256f88edf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.rast", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,55 +0,0 @@\n-SOURCE_FILE@0..69\n-  IMPL@0..68\n-    IMPL_KW@0..4 \"impl\"\n-    WHITESPACE@4..5 \" \"\n-    PATH_TYPE@5..6\n-      PATH@5..6\n-        PATH_SEGMENT@5..6\n-          NAME_REF@5..6\n-            IDENT@5..6 \"T\"\n-    WHITESPACE@6..7 \" \"\n-    FOR_KW@7..10 \"for\"\n-    WHITESPACE@10..11 \" \"\n-    PATH_TYPE@11..14\n-      PATH@11..14\n-        PATH_SEGMENT@11..14\n-          NAME_REF@11..14\n-            IDENT@11..14 \"Foo\"\n-    WHITESPACE@14..15 \" \"\n-    ASSOC_ITEM_LIST@15..68\n-      L_CURLY@15..16 \"{\"\n-      WHITESPACE@16..21 \"\\n    \"\n-      TYPE_ALIAS@21..42\n-        DEFAULT_KW@21..28 \"default\"\n-        WHITESPACE@28..29 \" \"\n-        TYPE_KW@29..33 \"type\"\n-        WHITESPACE@33..34 \" \"\n-        NAME@34..35\n-          IDENT@34..35 \"T\"\n-        WHITESPACE@35..36 \" \"\n-        EQ@36..37 \"=\"\n-        WHITESPACE@37..38 \" \"\n-        PATH_TYPE@38..41\n-          PATH@38..41\n-            PATH_SEGMENT@38..41\n-              NAME_REF@38..41\n-                IDENT@38..41 \"Bar\"\n-        SEMICOLON@41..42 \";\"\n-      WHITESPACE@42..47 \"\\n    \"\n-      FN@47..66\n-        DEFAULT_KW@47..54 \"default\"\n-        WHITESPACE@54..55 \" \"\n-        FN_KW@55..57 \"fn\"\n-        WHITESPACE@57..58 \" \"\n-        NAME@58..61\n-          IDENT@58..61 \"foo\"\n-        PARAM_LIST@61..63\n-          L_PAREN@61..62 \"(\"\n-          R_PAREN@62..63 \")\"\n-        WHITESPACE@63..64 \" \"\n-        BLOCK_EXPR@64..66\n-          L_CURLY@64..65 \"{\"\n-          R_CURLY@65..66 \"}\"\n-      WHITESPACE@66..67 \"\\n\"\n-      R_CURLY@67..68 \"}\"\n-  WHITESPACE@68..69 \"\\n\""}, {"sha": "8f5d6111399c92e5372f418883b2abc907340136", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,4 +0,0 @@\n-impl T for Foo {\n-    default type T = Bar;\n-    default fn foo() {}\n-}"}, {"sha": "23c4269b30607ff58bdb996a926ed2b9efc784f1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0151_fn.rast", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_fn.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,14 @@\n+SOURCE_FILE@0..12\n+  FN@0..11\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..6\n+      IDENT@3..6 \"foo\"\n+    PARAM_LIST@6..8\n+      L_PAREN@6..7 \"(\"\n+      R_PAREN@7..8 \")\"\n+    WHITESPACE@8..9 \" \"\n+    BLOCK_EXPR@9..11\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n+  WHITESPACE@11..12 \"\\n\""}, {"sha": "8f3b7ef112a0f4951016967f520b9399c02f902d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0151_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_fn.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1 @@\n+fn foo() {}"}, {"sha": "7968cf9ffa07e0dece536cc5d15902230d395194", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0152_impl.rast", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,22 @@\n+SOURCE_FILE@0..16\n+  IMPL@0..15\n+    IMPL_KW@0..4 \"impl\"\n+    WHITESPACE@4..5 \" \"\n+    PATH_TYPE@5..6\n+      PATH@5..6\n+        PATH_SEGMENT@5..6\n+          NAME_REF@5..6\n+            IDENT@5..6 \"T\"\n+    WHITESPACE@6..7 \" \"\n+    FOR_KW@7..10 \"for\"\n+    WHITESPACE@10..11 \" \"\n+    PATH_TYPE@11..12\n+      PATH@11..12\n+        PATH_SEGMENT@11..12\n+          NAME_REF@11..12\n+            IDENT@11..12 \"S\"\n+    WHITESPACE@12..13 \" \"\n+    ASSOC_ITEM_LIST@13..15\n+      L_CURLY@13..14 \"{\"\n+      R_CURLY@14..15 \"}\"\n+  WHITESPACE@15..16 \"\\n\""}, {"sha": "a1a550d8a6076d350e7fa99ed646213734c43ade", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0152_impl.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1 @@\n+impl T for S {}"}, {"sha": "9881e5048c87e7bf18cab1bbb58a6aa058aa8ea3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0153_trait.rast", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,11 @@\n+SOURCE_FILE@0..11\n+  TRAIT@0..10\n+    TRAIT_KW@0..5 \"trait\"\n+    WHITESPACE@5..6 \" \"\n+    NAME@6..7\n+      IDENT@6..7 \"T\"\n+    WHITESPACE@7..8 \" \"\n+    ASSOC_ITEM_LIST@8..10\n+      L_CURLY@8..9 \"{\"\n+      R_CURLY@9..10 \"}\"\n+  WHITESPACE@10..11 \"\\n\""}, {"sha": "8d183dbb5d3fedb9abf11ef3a5c7bc304507d4e7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0153_trait.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1 @@\n+trait T {}"}, {"sha": "1269621dc2da6f0af8302485d70337de7bbaf510", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_fn.rast", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,40 +0,0 @@\n-SOURCE_FILE@0..50\n-  IMPL@0..49\n-    IMPL_KW@0..4 \"impl\"\n-    WHITESPACE@4..5 \" \"\n-    PATH_TYPE@5..6\n-      PATH@5..6\n-        PATH_SEGMENT@5..6\n-          NAME_REF@5..6\n-            IDENT@5..6 \"T\"\n-    WHITESPACE@6..7 \" \"\n-    FOR_KW@7..10 \"for\"\n-    WHITESPACE@10..11 \" \"\n-    PATH_TYPE@11..14\n-      PATH@11..14\n-        PATH_SEGMENT@11..14\n-          NAME_REF@11..14\n-            IDENT@11..14 \"Foo\"\n-    WHITESPACE@14..15 \" \"\n-    ASSOC_ITEM_LIST@15..49\n-      L_CURLY@15..16 \"{\"\n-      WHITESPACE@16..21 \"\\n    \"\n-      FN@21..47\n-        DEFAULT_KW@21..28 \"default\"\n-        WHITESPACE@28..29 \" \"\n-        UNSAFE_KW@29..35 \"unsafe\"\n-        WHITESPACE@35..36 \" \"\n-        FN_KW@36..38 \"fn\"\n-        WHITESPACE@38..39 \" \"\n-        NAME@39..42\n-          IDENT@39..42 \"foo\"\n-        PARAM_LIST@42..44\n-          L_PAREN@42..43 \"(\"\n-          R_PAREN@43..44 \")\"\n-        WHITESPACE@44..45 \" \"\n-        BLOCK_EXPR@45..47\n-          L_CURLY@45..46 \"{\"\n-          R_CURLY@46..47 \"}\"\n-      WHITESPACE@47..48 \"\\n\"\n-      R_CURLY@48..49 \"}\"\n-  WHITESPACE@49..50 \"\\n\""}, {"sha": "6bfe925af256ce68c45edbc9213be5967ade7f64", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_impl.rast", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,18 +0,0 @@\n-SOURCE_FILE@0..27\n-  IMPL@0..26\n-    DEFAULT_KW@0..7 \"default\"\n-    WHITESPACE@7..8 \" \"\n-    UNSAFE_KW@8..14 \"unsafe\"\n-    WHITESPACE@14..15 \" \"\n-    IMPL_KW@15..19 \"impl\"\n-    WHITESPACE@19..20 \" \"\n-    PATH_TYPE@20..23\n-      PATH@20..23\n-        PATH_SEGMENT@20..23\n-          NAME_REF@20..23\n-            IDENT@20..23 \"Foo\"\n-    WHITESPACE@23..24 \" \"\n-    ASSOC_ITEM_LIST@24..26\n-      L_CURLY@24..25 \"{\"\n-      R_CURLY@25..26 \"}\"\n-  WHITESPACE@26..27 \"\\n\""}, {"sha": "ba0998ff4d997263ff4cb8a00a5620c61144c888", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_impl.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_impl.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1 +0,0 @@\n-default unsafe impl Foo {}"}, {"sha": "f2e2014605a8265d2b0c982e3cd0ed8036a8c24a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_item.rast", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_item.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,44 @@\n+SOURCE_FILE@0..65\n+  IMPL@0..64\n+    DEFAULT_KW@0..7 \"default\"\n+    WHITESPACE@7..8 \" \"\n+    UNSAFE_KW@8..14 \"unsafe\"\n+    WHITESPACE@14..15 \" \"\n+    IMPL_KW@15..19 \"impl\"\n+    WHITESPACE@19..20 \" \"\n+    PATH_TYPE@20..21\n+      PATH@20..21\n+        PATH_SEGMENT@20..21\n+          NAME_REF@20..21\n+            IDENT@20..21 \"T\"\n+    WHITESPACE@21..22 \" \"\n+    FOR_KW@22..25 \"for\"\n+    WHITESPACE@25..26 \" \"\n+    PATH_TYPE@26..29\n+      PATH@26..29\n+        PATH_SEGMENT@26..29\n+          NAME_REF@26..29\n+            IDENT@26..29 \"Foo\"\n+    WHITESPACE@29..30 \" \"\n+    ASSOC_ITEM_LIST@30..64\n+      L_CURLY@30..31 \"{\"\n+      WHITESPACE@31..36 \"\\n    \"\n+      FN@36..62\n+        DEFAULT_KW@36..43 \"default\"\n+        WHITESPACE@43..44 \" \"\n+        UNSAFE_KW@44..50 \"unsafe\"\n+        WHITESPACE@50..51 \" \"\n+        FN_KW@51..53 \"fn\"\n+        WHITESPACE@53..54 \" \"\n+        NAME@54..57\n+          IDENT@54..57 \"foo\"\n+        PARAM_LIST@57..59\n+          L_PAREN@57..58 \"(\"\n+          R_PAREN@58..59 \")\"\n+        WHITESPACE@59..60 \" \"\n+        BLOCK_EXPR@60..62\n+          L_CURLY@60..61 \"{\"\n+          R_CURLY@61..62 \"}\"\n+      WHITESPACE@62..63 \"\\n\"\n+      R_CURLY@63..64 \"}\"\n+  WHITESPACE@64..65 \"\\n\""}, {"sha": "96340f84ab30d9d9445aef91dfd72367f436f8a6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_item.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0163_default_unsafe_item.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,3 +1,3 @@\n-impl T for Foo {\n+default unsafe impl T for Foo {\n     default unsafe fn foo() {}\n }", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0163_default_unsafe_fn.rs"}, {"sha": "9282772f34d6dd1e8dfa33760aece1bfd1fde130", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0164_default_item.rast", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_default_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_default_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_default_item.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,24 @@\n+SOURCE_FILE@0..26\n+  IMPL@0..25\n+    DEFAULT_KW@0..7 \"default\"\n+    WHITESPACE@7..8 \" \"\n+    IMPL_KW@8..12 \"impl\"\n+    WHITESPACE@12..13 \" \"\n+    PATH_TYPE@13..14\n+      PATH@13..14\n+        PATH_SEGMENT@13..14\n+          NAME_REF@13..14\n+            IDENT@13..14 \"T\"\n+    WHITESPACE@14..15 \" \"\n+    FOR_KW@15..18 \"for\"\n+    WHITESPACE@18..19 \" \"\n+    PATH_TYPE@19..22\n+      PATH@19..22\n+        PATH_SEGMENT@19..22\n+          NAME_REF@19..22\n+            IDENT@19..22 \"Foo\"\n+    WHITESPACE@22..23 \" \"\n+    ASSOC_ITEM_LIST@23..25\n+      L_CURLY@23..24 \"{\"\n+      R_CURLY@24..25 \"}\"\n+  WHITESPACE@25..26 \"\\n\""}, {"sha": "a6836cbd577c65254a9f940aebd316b239c60896", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0164_default_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_default_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_default_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_default_item.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1 @@\n+default impl T for Foo {}"}, {"sha": "5524efaafedd4ed9730a96a35219d4e60eef507f", "filename": "crates/ra_syntax/test_data/parser/ok/0021_extern_fn.rast", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,56 +0,0 @@\n-SOURCE_FILE@0..71\n-  FN@0..19\n-    ABI@0..6\n-      EXTERN_KW@0..6 \"extern\"\n-    WHITESPACE@6..7 \" \"\n-    FN_KW@7..9 \"fn\"\n-    WHITESPACE@9..10 \" \"\n-    NAME@10..13\n-      IDENT@10..13 \"foo\"\n-    PARAM_LIST@13..15\n-      L_PAREN@13..14 \"(\"\n-      R_PAREN@14..15 \")\"\n-    WHITESPACE@15..16 \" \"\n-    BLOCK_EXPR@16..19\n-      L_CURLY@16..17 \"{\"\n-      WHITESPACE@17..18 \"\\n\"\n-      R_CURLY@18..19 \"}\"\n-  WHITESPACE@19..21 \"\\n\\n\"\n-  FN@21..44\n-    ABI@21..31\n-      EXTERN_KW@21..27 \"extern\"\n-      WHITESPACE@27..28 \" \"\n-      STRING@28..31 \"\\\"C\\\"\"\n-    WHITESPACE@31..32 \" \"\n-    FN_KW@32..34 \"fn\"\n-    WHITESPACE@34..35 \" \"\n-    NAME@35..38\n-      IDENT@35..38 \"bar\"\n-    PARAM_LIST@38..40\n-      L_PAREN@38..39 \"(\"\n-      R_PAREN@39..40 \")\"\n-    WHITESPACE@40..41 \" \"\n-    BLOCK_EXPR@41..44\n-      L_CURLY@41..42 \"{\"\n-      WHITESPACE@42..43 \"\\n\"\n-      R_CURLY@43..44 \"}\"\n-  WHITESPACE@44..46 \"\\n\\n\"\n-  FN@46..70\n-    ABI@46..57\n-      EXTERN_KW@46..52 \"extern\"\n-      WHITESPACE@52..53 \" \"\n-      RAW_STRING@53..57 \"r\\\"D\\\"\"\n-    WHITESPACE@57..58 \" \"\n-    FN_KW@58..60 \"fn\"\n-    WHITESPACE@60..61 \" \"\n-    NAME@61..64\n-      IDENT@61..64 \"baz\"\n-    PARAM_LIST@64..66\n-      L_PAREN@64..65 \"(\"\n-      R_PAREN@65..66 \")\"\n-    WHITESPACE@66..67 \" \"\n-    BLOCK_EXPR@67..70\n-      L_CURLY@67..68 \"{\"\n-      WHITESPACE@68..69 \"\\n\"\n-      R_CURLY@69..70 \"}\"\n-  WHITESPACE@70..71 \"\\n\""}, {"sha": "e929eef74141376db35856f23771584413595cff", "filename": "crates/ra_syntax/test_data/parser/ok/0021_extern_fn.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0021_extern_fn.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,8 +0,0 @@\n-extern fn foo() {\n-}\n-\n-extern \"C\" fn bar() {\n-}\n-\n-extern r\"D\" fn baz() {\n-}"}, {"sha": "6246a31a664d5fee2efaf1a2ebdd0e898a4098db", "filename": "crates/ra_syntax/test_data/parser/ok/0066_default_const.rast", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,44 +0,0 @@\n-SOURCE_FILE@0..46\n-  IMPL@0..45\n-    IMPL_KW@0..4 \"impl\"\n-    WHITESPACE@4..5 \" \"\n-    PATH_TYPE@5..6\n-      PATH@5..6\n-        PATH_SEGMENT@5..6\n-          NAME_REF@5..6\n-            IDENT@5..6 \"T\"\n-    WHITESPACE@6..7 \" \"\n-    FOR_KW@7..10 \"for\"\n-    WHITESPACE@10..11 \" \"\n-    PATH_TYPE@11..14\n-      PATH@11..14\n-        PATH_SEGMENT@11..14\n-          NAME_REF@11..14\n-            IDENT@11..14 \"Foo\"\n-    WHITESPACE@14..15 \" \"\n-    ASSOC_ITEM_LIST@15..45\n-      L_CURLY@15..16 \"{\"\n-      WHITESPACE@16..19 \"\\n  \"\n-      CONST@19..43\n-        DEFAULT_KW@19..26 \"default\"\n-        WHITESPACE@26..27 \" \"\n-        CONST_KW@27..32 \"const\"\n-        WHITESPACE@32..33 \" \"\n-        NAME@33..34\n-          IDENT@33..34 \"f\"\n-        COLON@34..35 \":\"\n-        WHITESPACE@35..36 \" \"\n-        PATH_TYPE@36..38\n-          PATH@36..38\n-            PATH_SEGMENT@36..38\n-              NAME_REF@36..38\n-                IDENT@36..38 \"u8\"\n-        WHITESPACE@38..39 \" \"\n-        EQ@39..40 \"=\"\n-        WHITESPACE@40..41 \" \"\n-        LITERAL@41..42\n-          INT_NUMBER@41..42 \"0\"\n-        SEMICOLON@42..43 \";\"\n-      WHITESPACE@43..44 \"\\n\"\n-      R_CURLY@44..45 \"}\"\n-  WHITESPACE@45..46 \"\\n\""}, {"sha": "dfb3b92dca7969fc598249b48aa500a0c00444f5", "filename": "crates/ra_syntax/test_data/parser/ok/0066_default_const.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f736d4a13bdf5af2cdd6a4832a41470431a70b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rs?ref=13f736d4a13bdf5af2cdd6a4832a41470431a70b", "patch": "@@ -1,3 +0,0 @@\n-impl T for Foo {\n-  default const f: u8 = 0;\n-}"}, {"sha": "e9b57ec3b3f0c33154cb3f75e430ab8de9a6d728", "filename": "crates/ra_syntax/test_data/parser/ok/0066_default_modifier.rast", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_modifier.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_modifier.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_modifier.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,218 @@\n+SOURCE_FILE@0..294\n+  TRAIT@0..113\n+    TRAIT_KW@0..5 \"trait\"\n+    WHITESPACE@5..6 \" \"\n+    NAME@6..7\n+      IDENT@6..7 \"T\"\n+    WHITESPACE@7..8 \" \"\n+    ASSOC_ITEM_LIST@8..113\n+      L_CURLY@8..9 \"{\"\n+      WHITESPACE@9..12 \"\\n  \"\n+      TYPE_ALIAS@12..33\n+        DEFAULT_KW@12..19 \"default\"\n+        WHITESPACE@19..20 \" \"\n+        TYPE_KW@20..24 \"type\"\n+        WHITESPACE@24..25 \" \"\n+        NAME@25..26\n+          IDENT@25..26 \"T\"\n+        WHITESPACE@26..27 \" \"\n+        EQ@27..28 \"=\"\n+        WHITESPACE@28..29 \" \"\n+        PATH_TYPE@29..32\n+          PATH@29..32\n+            PATH_SEGMENT@29..32\n+              NAME_REF@29..32\n+                IDENT@29..32 \"Bar\"\n+        SEMICOLON@32..33 \";\"\n+      WHITESPACE@33..36 \"\\n  \"\n+      CONST@36..60\n+        DEFAULT_KW@36..43 \"default\"\n+        WHITESPACE@43..44 \" \"\n+        CONST_KW@44..49 \"const\"\n+        WHITESPACE@49..50 \" \"\n+        NAME@50..51\n+          IDENT@50..51 \"f\"\n+        COLON@51..52 \":\"\n+        WHITESPACE@52..53 \" \"\n+        PATH_TYPE@53..55\n+          PATH@53..55\n+            PATH_SEGMENT@53..55\n+              NAME_REF@53..55\n+                IDENT@53..55 \"u8\"\n+        WHITESPACE@55..56 \" \"\n+        EQ@56..57 \"=\"\n+        WHITESPACE@57..58 \" \"\n+        LITERAL@58..59\n+          INT_NUMBER@58..59 \"0\"\n+        SEMICOLON@59..60 \";\"\n+      WHITESPACE@60..63 \"\\n  \"\n+      FN@63..82\n+        DEFAULT_KW@63..70 \"default\"\n+        WHITESPACE@70..71 \" \"\n+        FN_KW@71..73 \"fn\"\n+        WHITESPACE@73..74 \" \"\n+        NAME@74..77\n+          IDENT@74..77 \"foo\"\n+        PARAM_LIST@77..79\n+          L_PAREN@77..78 \"(\"\n+          R_PAREN@78..79 \")\"\n+        WHITESPACE@79..80 \" \"\n+        BLOCK_EXPR@80..82\n+          L_CURLY@80..81 \"{\"\n+          R_CURLY@81..82 \"}\"\n+      WHITESPACE@82..85 \"\\n  \"\n+      FN@85..111\n+        DEFAULT_KW@85..92 \"default\"\n+        WHITESPACE@92..93 \" \"\n+        UNSAFE_KW@93..99 \"unsafe\"\n+        WHITESPACE@99..100 \" \"\n+        FN_KW@100..102 \"fn\"\n+        WHITESPACE@102..103 \" \"\n+        NAME@103..106\n+          IDENT@103..106 \"bar\"\n+        PARAM_LIST@106..108\n+          L_PAREN@106..107 \"(\"\n+          R_PAREN@107..108 \")\"\n+        WHITESPACE@108..109 \" \"\n+        BLOCK_EXPR@109..111\n+          L_CURLY@109..110 \"{\"\n+          R_CURLY@110..111 \"}\"\n+      WHITESPACE@111..112 \"\\n\"\n+      R_CURLY@112..113 \"}\"\n+  WHITESPACE@113..115 \"\\n\\n\"\n+  IMPL@115..235\n+    IMPL_KW@115..119 \"impl\"\n+    WHITESPACE@119..120 \" \"\n+    PATH_TYPE@120..121\n+      PATH@120..121\n+        PATH_SEGMENT@120..121\n+          NAME_REF@120..121\n+            IDENT@120..121 \"T\"\n+    WHITESPACE@121..122 \" \"\n+    FOR_KW@122..125 \"for\"\n+    WHITESPACE@125..126 \" \"\n+    PATH_TYPE@126..129\n+      PATH@126..129\n+        PATH_SEGMENT@126..129\n+          NAME_REF@126..129\n+            IDENT@126..129 \"Foo\"\n+    WHITESPACE@129..130 \" \"\n+    ASSOC_ITEM_LIST@130..235\n+      L_CURLY@130..131 \"{\"\n+      WHITESPACE@131..134 \"\\n  \"\n+      TYPE_ALIAS@134..155\n+        DEFAULT_KW@134..141 \"default\"\n+        WHITESPACE@141..142 \" \"\n+        TYPE_KW@142..146 \"type\"\n+        WHITESPACE@146..147 \" \"\n+        NAME@147..148\n+          IDENT@147..148 \"T\"\n+        WHITESPACE@148..149 \" \"\n+        EQ@149..150 \"=\"\n+        WHITESPACE@150..151 \" \"\n+        PATH_TYPE@151..154\n+          PATH@151..154\n+            PATH_SEGMENT@151..154\n+              NAME_REF@151..154\n+                IDENT@151..154 \"Bar\"\n+        SEMICOLON@154..155 \";\"\n+      WHITESPACE@155..158 \"\\n  \"\n+      CONST@158..182\n+        DEFAULT_KW@158..165 \"default\"\n+        WHITESPACE@165..166 \" \"\n+        CONST_KW@166..171 \"const\"\n+        WHITESPACE@171..172 \" \"\n+        NAME@172..173\n+          IDENT@172..173 \"f\"\n+        COLON@173..174 \":\"\n+        WHITESPACE@174..175 \" \"\n+        PATH_TYPE@175..177\n+          PATH@175..177\n+            PATH_SEGMENT@175..177\n+              NAME_REF@175..177\n+                IDENT@175..177 \"u8\"\n+        WHITESPACE@177..178 \" \"\n+        EQ@178..179 \"=\"\n+        WHITESPACE@179..180 \" \"\n+        LITERAL@180..181\n+          INT_NUMBER@180..181 \"0\"\n+        SEMICOLON@181..182 \";\"\n+      WHITESPACE@182..185 \"\\n  \"\n+      FN@185..204\n+        DEFAULT_KW@185..192 \"default\"\n+        WHITESPACE@192..193 \" \"\n+        FN_KW@193..195 \"fn\"\n+        WHITESPACE@195..196 \" \"\n+        NAME@196..199\n+          IDENT@196..199 \"foo\"\n+        PARAM_LIST@199..201\n+          L_PAREN@199..200 \"(\"\n+          R_PAREN@200..201 \")\"\n+        WHITESPACE@201..202 \" \"\n+        BLOCK_EXPR@202..204\n+          L_CURLY@202..203 \"{\"\n+          R_CURLY@203..204 \"}\"\n+      WHITESPACE@204..207 \"\\n  \"\n+      FN@207..233\n+        DEFAULT_KW@207..214 \"default\"\n+        WHITESPACE@214..215 \" \"\n+        UNSAFE_KW@215..221 \"unsafe\"\n+        WHITESPACE@221..222 \" \"\n+        FN_KW@222..224 \"fn\"\n+        WHITESPACE@224..225 \" \"\n+        NAME@225..228\n+          IDENT@225..228 \"bar\"\n+        PARAM_LIST@228..230\n+          L_PAREN@228..229 \"(\"\n+          R_PAREN@229..230 \")\"\n+        WHITESPACE@230..231 \" \"\n+        BLOCK_EXPR@231..233\n+          L_CURLY@231..232 \"{\"\n+          R_CURLY@232..233 \"}\"\n+      WHITESPACE@233..234 \"\\n\"\n+      R_CURLY@234..235 \"}\"\n+  WHITESPACE@235..237 \"\\n\\n\"\n+  IMPL@237..261\n+    DEFAULT_KW@237..244 \"default\"\n+    WHITESPACE@244..245 \" \"\n+    IMPL_KW@245..249 \"impl\"\n+    WHITESPACE@249..250 \" \"\n+    PATH_TYPE@250..251\n+      PATH@250..251\n+        PATH_SEGMENT@250..251\n+          NAME_REF@250..251\n+            IDENT@250..251 \"T\"\n+    WHITESPACE@251..252 \" \"\n+    FOR_KW@252..255 \"for\"\n+    WHITESPACE@255..256 \" \"\n+    TUPLE_TYPE@256..258\n+      L_PAREN@256..257 \"(\"\n+      R_PAREN@257..258 \")\"\n+    WHITESPACE@258..259 \" \"\n+    ASSOC_ITEM_LIST@259..261\n+      L_CURLY@259..260 \"{\"\n+      R_CURLY@260..261 \"}\"\n+  WHITESPACE@261..262 \"\\n\"\n+  IMPL@262..293\n+    DEFAULT_KW@262..269 \"default\"\n+    WHITESPACE@269..270 \" \"\n+    UNSAFE_KW@270..276 \"unsafe\"\n+    WHITESPACE@276..277 \" \"\n+    IMPL_KW@277..281 \"impl\"\n+    WHITESPACE@281..282 \" \"\n+    PATH_TYPE@282..283\n+      PATH@282..283\n+        PATH_SEGMENT@282..283\n+          NAME_REF@282..283\n+            IDENT@282..283 \"T\"\n+    WHITESPACE@283..284 \" \"\n+    FOR_KW@284..287 \"for\"\n+    WHITESPACE@287..288 \" \"\n+    TUPLE_TYPE@288..290\n+      L_PAREN@288..289 \"(\"\n+      R_PAREN@289..290 \")\"\n+    WHITESPACE@290..291 \" \"\n+    ASSOC_ITEM_LIST@291..293\n+      L_CURLY@291..292 \"{\"\n+      R_CURLY@292..293 \"}\"\n+  WHITESPACE@293..294 \"\\n\""}, {"sha": "e443e3495e3af091761a19651d11e75b85fa2b17", "filename": "crates/ra_syntax/test_data/parser/ok/0066_default_modifier.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_modifier.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,16 @@\n+trait T {\n+  default type T = Bar;\n+  default const f: u8 = 0;\n+  default fn foo() {}\n+  default unsafe fn bar() {}\n+}\n+\n+impl T for Foo {\n+  default type T = Bar;\n+  default const f: u8 = 0;\n+  default fn foo() {}\n+  default unsafe fn bar() {}\n+}\n+\n+default impl T for () {}\n+default unsafe impl T for () {}"}, {"sha": "50a6d8ee9a641f1483f6faa709335df1ed93ff3f", "filename": "crates/ra_syntax/test_data/parser/ok/0068_item_modifiers.rast", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0068_item_modifiers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0068_item_modifiers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0068_item_modifiers.rast?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,218 @@\n+SOURCE_FILE@0..304\n+  FN@0..17\n+    ASYNC_KW@0..5 \"async\"\n+    WHITESPACE@5..6 \" \"\n+    FN_KW@6..8 \"fn\"\n+    WHITESPACE@8..9 \" \"\n+    NAME@9..12\n+      IDENT@9..12 \"foo\"\n+    PARAM_LIST@12..14\n+      L_PAREN@12..13 \"(\"\n+      R_PAREN@13..14 \")\"\n+    WHITESPACE@14..15 \" \"\n+    BLOCK_EXPR@15..17\n+      L_CURLY@15..16 \"{\"\n+      R_CURLY@16..17 \"}\"\n+  WHITESPACE@17..18 \"\\n\"\n+  FN@18..36\n+    ABI@18..24\n+      EXTERN_KW@18..24 \"extern\"\n+    WHITESPACE@24..25 \" \"\n+    FN_KW@25..27 \"fn\"\n+    WHITESPACE@27..28 \" \"\n+    NAME@28..31\n+      IDENT@28..31 \"foo\"\n+    PARAM_LIST@31..33\n+      L_PAREN@31..32 \"(\"\n+      R_PAREN@32..33 \")\"\n+    WHITESPACE@33..34 \" \"\n+    BLOCK_EXPR@34..36\n+      L_CURLY@34..35 \"{\"\n+      R_CURLY@35..36 \"}\"\n+  WHITESPACE@36..37 \"\\n\"\n+  FN@37..54\n+    CONST_KW@37..42 \"const\"\n+    WHITESPACE@42..43 \" \"\n+    FN_KW@43..45 \"fn\"\n+    WHITESPACE@45..46 \" \"\n+    NAME@46..49\n+      IDENT@46..49 \"foo\"\n+    PARAM_LIST@49..51\n+      L_PAREN@49..50 \"(\"\n+      R_PAREN@50..51 \")\"\n+    WHITESPACE@51..52 \" \"\n+    BLOCK_EXPR@52..54\n+      L_CURLY@52..53 \"{\"\n+      R_CURLY@53..54 \"}\"\n+  WHITESPACE@54..55 \"\\n\"\n+  FN@55..79\n+    CONST_KW@55..60 \"const\"\n+    WHITESPACE@60..61 \" \"\n+    UNSAFE_KW@61..67 \"unsafe\"\n+    WHITESPACE@67..68 \" \"\n+    FN_KW@68..70 \"fn\"\n+    WHITESPACE@70..71 \" \"\n+    NAME@71..74\n+      IDENT@71..74 \"foo\"\n+    PARAM_LIST@74..76\n+      L_PAREN@74..75 \"(\"\n+      R_PAREN@75..76 \")\"\n+    WHITESPACE@76..77 \" \"\n+    BLOCK_EXPR@77..79\n+      L_CURLY@77..78 \"{\"\n+      R_CURLY@78..79 \"}\"\n+  WHITESPACE@79..80 \"\\n\"\n+  FN@80..109\n+    UNSAFE_KW@80..86 \"unsafe\"\n+    WHITESPACE@86..87 \" \"\n+    ABI@87..97\n+      EXTERN_KW@87..93 \"extern\"\n+      WHITESPACE@93..94 \" \"\n+      STRING@94..97 \"\\\"C\\\"\"\n+    WHITESPACE@97..98 \" \"\n+    FN_KW@98..100 \"fn\"\n+    WHITESPACE@100..101 \" \"\n+    NAME@101..104\n+      IDENT@101..104 \"foo\"\n+    PARAM_LIST@104..106\n+      L_PAREN@104..105 \"(\"\n+      R_PAREN@105..106 \")\"\n+    WHITESPACE@106..107 \" \"\n+    BLOCK_EXPR@107..109\n+      L_CURLY@107..108 \"{\"\n+      R_CURLY@108..109 \"}\"\n+  WHITESPACE@109..110 \"\\n\"\n+  FN@110..128\n+    UNSAFE_KW@110..116 \"unsafe\"\n+    WHITESPACE@116..117 \" \"\n+    FN_KW@117..119 \"fn\"\n+    WHITESPACE@119..120 \" \"\n+    NAME@120..123\n+      IDENT@120..123 \"foo\"\n+    PARAM_LIST@123..125\n+      L_PAREN@123..124 \"(\"\n+      R_PAREN@124..125 \")\"\n+    WHITESPACE@125..126 \" \"\n+    BLOCK_EXPR@126..128\n+      L_CURLY@126..127 \"{\"\n+      R_CURLY@127..128 \"}\"\n+  WHITESPACE@128..129 \"\\n\"\n+  FN@129..153\n+    ASYNC_KW@129..134 \"async\"\n+    WHITESPACE@134..135 \" \"\n+    UNSAFE_KW@135..141 \"unsafe\"\n+    WHITESPACE@141..142 \" \"\n+    FN_KW@142..144 \"fn\"\n+    WHITESPACE@144..145 \" \"\n+    NAME@145..148\n+      IDENT@145..148 \"foo\"\n+    PARAM_LIST@148..150\n+      L_PAREN@148..149 \"(\"\n+      R_PAREN@149..150 \")\"\n+    WHITESPACE@150..151 \" \"\n+    BLOCK_EXPR@151..153\n+      L_CURLY@151..152 \"{\"\n+      R_CURLY@152..153 \"}\"\n+  WHITESPACE@153..154 \"\\n\"\n+  FN@154..178\n+    CONST_KW@154..159 \"const\"\n+    WHITESPACE@159..160 \" \"\n+    UNSAFE_KW@160..166 \"unsafe\"\n+    WHITESPACE@166..167 \" \"\n+    FN_KW@167..169 \"fn\"\n+    WHITESPACE@169..170 \" \"\n+    NAME@170..173\n+      IDENT@170..173 \"bar\"\n+    PARAM_LIST@173..175\n+      L_PAREN@173..174 \"(\"\n+      R_PAREN@174..175 \")\"\n+    WHITESPACE@175..176 \" \"\n+    BLOCK_EXPR@176..178\n+      L_CURLY@176..177 \"{\"\n+      R_CURLY@177..178 \"}\"\n+  WHITESPACE@178..180 \"\\n\\n\"\n+  TRAIT@180..197\n+    UNSAFE_KW@180..186 \"unsafe\"\n+    WHITESPACE@186..187 \" \"\n+    TRAIT_KW@187..192 \"trait\"\n+    WHITESPACE@192..193 \" \"\n+    NAME@193..194\n+      IDENT@193..194 \"T\"\n+    WHITESPACE@194..195 \" \"\n+    ASSOC_ITEM_LIST@195..197\n+      L_CURLY@195..196 \"{\"\n+      R_CURLY@196..197 \"}\"\n+  WHITESPACE@197..198 \"\\n\"\n+  TRAIT@198..213\n+    AUTO_KW@198..202 \"auto\"\n+    WHITESPACE@202..203 \" \"\n+    TRAIT_KW@203..208 \"trait\"\n+    WHITESPACE@208..209 \" \"\n+    NAME@209..210\n+      IDENT@209..210 \"T\"\n+    WHITESPACE@210..211 \" \"\n+    ASSOC_ITEM_LIST@211..213\n+      L_CURLY@211..212 \"{\"\n+      R_CURLY@212..213 \"}\"\n+  WHITESPACE@213..214 \"\\n\"\n+  TRAIT@214..236\n+    UNSAFE_KW@214..220 \"unsafe\"\n+    WHITESPACE@220..221 \" \"\n+    AUTO_KW@221..225 \"auto\"\n+    WHITESPACE@225..226 \" \"\n+    TRAIT_KW@226..231 \"trait\"\n+    WHITESPACE@231..232 \" \"\n+    NAME@232..233\n+      IDENT@232..233 \"T\"\n+    WHITESPACE@233..234 \" \"\n+    ASSOC_ITEM_LIST@234..236\n+      L_CURLY@234..235 \"{\"\n+      R_CURLY@235..236 \"}\"\n+  WHITESPACE@236..238 \"\\n\\n\"\n+  IMPL@238..256\n+    UNSAFE_KW@238..244 \"unsafe\"\n+    WHITESPACE@244..245 \" \"\n+    IMPL_KW@245..249 \"impl\"\n+    WHITESPACE@249..250 \" \"\n+    PATH_TYPE@250..253\n+      PATH@250..253\n+        PATH_SEGMENT@250..253\n+          NAME_REF@250..253\n+            IDENT@250..253 \"Foo\"\n+    WHITESPACE@253..254 \" \"\n+    ASSOC_ITEM_LIST@254..256\n+      L_CURLY@254..255 \"{\"\n+      R_CURLY@255..256 \"}\"\n+  WHITESPACE@256..257 \"\\n\"\n+  IMPL@257..276\n+    DEFAULT_KW@257..264 \"default\"\n+    WHITESPACE@264..265 \" \"\n+    IMPL_KW@265..269 \"impl\"\n+    WHITESPACE@269..270 \" \"\n+    PATH_TYPE@270..273\n+      PATH@270..273\n+        PATH_SEGMENT@270..273\n+          NAME_REF@270..273\n+            IDENT@270..273 \"Foo\"\n+    WHITESPACE@273..274 \" \"\n+    ASSOC_ITEM_LIST@274..276\n+      L_CURLY@274..275 \"{\"\n+      R_CURLY@275..276 \"}\"\n+  WHITESPACE@276..277 \"\\n\"\n+  IMPL@277..303\n+    UNSAFE_KW@277..283 \"unsafe\"\n+    WHITESPACE@283..284 \" \"\n+    DEFAULT_KW@284..291 \"default\"\n+    WHITESPACE@291..292 \" \"\n+    IMPL_KW@292..296 \"impl\"\n+    WHITESPACE@296..297 \" \"\n+    PATH_TYPE@297..300\n+      PATH@297..300\n+        PATH_SEGMENT@297..300\n+          NAME_REF@297..300\n+            IDENT@297..300 \"Foo\"\n+    WHITESPACE@300..301 \" \"\n+    ASSOC_ITEM_LIST@301..303\n+      L_CURLY@301..302 \"{\"\n+      R_CURLY@302..303 \"}\"\n+  WHITESPACE@303..304 \"\\n\""}, {"sha": "8d697c04b9572f7e6395e46f3e58f4b2cd2281aa", "filename": "crates/ra_syntax/test_data/parser/ok/0068_item_modifiers.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0068_item_modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0068_item_modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0068_item_modifiers.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -0,0 +1,16 @@\n+async fn foo() {}\n+extern fn foo() {}\n+const fn foo() {}\n+const unsafe fn foo() {}\n+unsafe extern \"C\" fn foo() {}\n+unsafe fn foo() {}\n+async unsafe fn foo() {}\n+const unsafe fn bar() {}\n+\n+unsafe trait T {}\n+auto trait T {}\n+unsafe auto trait T {}\n+\n+unsafe impl Foo {}\n+default impl Foo {}\n+unsafe default impl Foo {}"}, {"sha": "d68791cf1fdff30445f33ea9be9e9266aeb1462f", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -76,10 +76,6 @@ impl TextEdit {\n         self.indels.iter()\n     }\n \n-    pub fn into_iter(self) -> vec::IntoIter<Indel> {\n-        self.indels.into_iter()\n-    }\n-\n     pub fn apply(&self, text: &mut String) {\n         match self.len() {\n             0 => return,\n@@ -141,6 +137,15 @@ impl TextEdit {\n     }\n }\n \n+impl IntoIterator for TextEdit {\n+    type Item = Indel;\n+    type IntoIter = vec::IntoIter<Self::Item>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.indels.into_iter()\n+    }\n+}\n+\n impl TextEditBuilder {\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n         self.indels.push(Indel::replace(range, replace_with))"}, {"sha": "20c3f5eabfb8dfe54e2e6e75ff3f51882239c737", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -107,7 +107,7 @@ fn print_debug_subtree(f: &mut fmt::Formatter<'_>, subtree: &Subtree, level: usi\n         for (idx, child) in subtree.token_trees.iter().enumerate() {\n             print_debug_token(f, child, level + 1)?;\n             if idx != subtree.token_trees.len() - 1 {\n-                writeln!(f, \"\")?;\n+                writeln!(f)?;\n             }\n         }\n     }"}, {"sha": "0d386841e52350b53fd2d1a94856ade2b781ba31", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -72,7 +72,7 @@ impl AnalysisStatsCmd {\n             shuffle(&mut rng, &mut krates);\n         }\n         for krate in krates {\n-            let module = krate.root_module(db).expect(\"crate without root module\");\n+            let module = krate.root_module(db);\n             let file_id = module.definition_source(db).file_id;\n             let file_id = file_id.original_file(db);\n             let source_root = db.file_source_root(file_id);"}, {"sha": "f17fc5dfe907134c03e53f452c2182e7bceb5fe4", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -28,7 +28,7 @@ pub fn diagnostics(\n     let mut work = Vec::new();\n     let krates = Crate::all(db);\n     for krate in krates {\n-        let module = krate.root_module(db).expect(\"crate without root module\");\n+        let module = krate.root_module(db);\n         let file_id = module.definition_source(db).file_id;\n         let file_id = file_id.original_file(db);\n         let source_root = db.file_source_root(file_id);"}, {"sha": "f9f045f131e5c04f36e45da22002ce775bd01611", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -73,6 +73,7 @@ pub(crate) struct GlobalState {\n     pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n+    pub(crate) shutdown_requested: bool,\n     pub(crate) status: Status,\n     pub(crate) source_root_config: SourceRootConfig,\n     pub(crate) proc_macro_client: ProcMacroClient,\n@@ -124,6 +125,7 @@ impl GlobalState {\n             mem_docs: FxHashMap::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n+            shutdown_requested: false,\n             status: Status::default(),\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: ProcMacroClient::dummy(),"}, {"sha": "785dd2a2678a38c31b20f7f1141f65a83b35b9bb", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -773,12 +773,11 @@ fn handle_fixes(\n \n     let diagnostics = snap.analysis.diagnostics(file_id, snap.config.experimental_diagnostics)?;\n \n-    let fixes_from_diagnostics = diagnostics\n+    for fix in diagnostics\n         .into_iter()\n-        .filter_map(|d| Some((d.range, d.fix?)))\n-        .filter(|(diag_range, _fix)| diag_range.intersect(range).is_some())\n-        .map(|(_range, fix)| fix);\n-    for fix in fixes_from_diagnostics {\n+        .filter_map(|d| d.fix)\n+        .filter(|fix| fix.fix_trigger_range.intersect(range).is_some())\n+    {\n         let title = fix.label;\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;\n         let action = lsp_ext::CodeAction {\n@@ -864,7 +863,7 @@ pub(crate) fn handle_resolve_code_action(\n     let (id_string, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n-    assert!(assist.assist.id.0 == id_string);\n+    assert!(assist.assist.id().0 == id_string);\n     Ok(to_proto::resolved_code_action(&snap, assist.clone())?.edit)\n }\n \n@@ -892,7 +891,7 @@ pub(crate) fn handle_code_lens(\n             }\n \n             let action = runnable.action();\n-            let range = to_proto::range(&line_index, runnable.nav.focus_or_full_range());\n+            let range = to_proto::range(&line_index, runnable.nav.full_range);\n             let r = to_proto::runnable(&snap, file_id, runnable)?;\n             if snap.config.lens.run {\n                 let lens = CodeLens {"}, {"sha": "e6cf46df23ea668b3258bde9c3d6ed478c01242a", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -47,7 +47,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n         SetThreadPriority(thread, thread_priority_above_normal);\n     }\n \n-    GlobalState::new(connection.sender.clone(), config).run(connection.receiver)\n+    GlobalState::new(connection.sender, config).run(connection.receiver)\n }\n \n enum Event {\n@@ -337,11 +337,34 @@ impl GlobalState {\n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n         self.register_request(&req, request_received);\n \n+        if self.shutdown_requested {\n+            self.respond(Response::new_err(\n+                req.id,\n+                lsp_server::ErrorCode::InvalidRequest as i32,\n+                \"Shutdown already requested.\".to_owned(),\n+            ));\n+\n+            return Ok(());\n+        }\n+\n+        if self.status == Status::Loading && req.method != \"shutdown\" {\n+            self.respond(lsp_server::Response::new_err(\n+                req.id,\n+                // FIXME: i32 should impl From<ErrorCode> (from() guarantees lossless conversion)\n+                lsp_server::ErrorCode::ContentModified as i32,\n+                \"Rust Analyzer is still loading...\".to_owned(),\n+            ));\n+            return Ok(());\n+        }\n+\n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.fetch_workspaces()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n             .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n-            .on_sync::<lsp_types::request::Shutdown>(|_, ()| Ok(()))?\n+            .on_sync::<lsp_types::request::Shutdown>(|s, ()| {\n+                s.shutdown_requested = true;\n+                Ok(())\n+            })?\n             .on_sync::<lsp_types::request::SelectionRangeRequest>(|s, p| {\n                 handlers::handle_selection_range(s.snapshot(), p)\n             })?"}, {"sha": "62fda8a1f20cffd0e23a65726d2bcc36cc2f2dcb", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -704,10 +704,10 @@ pub(crate) fn unresolved_code_action(\n     index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n-        title: assist.label,\n-        id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n-        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(code_action_kind(assist.id.1)),\n+        title: assist.label(),\n+        id: Some(format!(\"{}:{}\", assist.id().0.to_owned(), index.to_string())),\n+        group: assist.group().filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n+        kind: Some(code_action_kind(assist.id().1)),\n         edit: None,\n         is_preferred: None,\n     };\n@@ -755,7 +755,8 @@ pub(crate) fn runnable(\n }\n \n pub(crate) fn markup_content(markup: Markup) -> lsp_types::MarkupContent {\n-    lsp_types::MarkupContent { kind: lsp_types::MarkupKind::Markdown, value: markup.into() }\n+    let value = crate::markdown::format_docs(markup.as_str());\n+    lsp_types::MarkupContent { kind: lsp_types::MarkupKind::Markdown, value }\n }\n \n #[cfg(test)]"}, {"sha": "3c5027fe570613787d2e9eb531ab83f11c95267d", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -1,5 +1,5 @@\n //! Missing batteries for standard libraries.\n-use std::{cell::Cell, fmt, time::Instant};\n+use std::time::Instant;\n \n mod macros;\n \n@@ -8,69 +8,6 @@ pub fn is_ci() -> bool {\n     option_env!(\"CI\").is_some()\n }\n \n-pub trait SepBy: Sized {\n-    /// Returns an `impl fmt::Display`, which joins elements via a separator.\n-    fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self>;\n-}\n-\n-impl<I> SepBy for I\n-where\n-    I: Iterator,\n-    I::Item: fmt::Display,\n-{\n-    fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self> {\n-        SepByBuilder::new(sep, self)\n-    }\n-}\n-\n-pub struct SepByBuilder<'a, I> {\n-    sep: &'a str,\n-    prefix: &'a str,\n-    suffix: &'a str,\n-    iter: Cell<Option<I>>,\n-}\n-\n-impl<'a, I> SepByBuilder<'a, I> {\n-    fn new(sep: &'a str, iter: I) -> SepByBuilder<'a, I> {\n-        SepByBuilder { sep, prefix: \"\", suffix: \"\", iter: Cell::new(Some(iter)) }\n-    }\n-\n-    pub fn prefix(mut self, prefix: &'a str) -> Self {\n-        self.prefix = prefix;\n-        self\n-    }\n-\n-    pub fn suffix(mut self, suffix: &'a str) -> Self {\n-        self.suffix = suffix;\n-        self\n-    }\n-\n-    /// Set both suffix and prefix.\n-    pub fn surround_with(self, prefix: &'a str, suffix: &'a str) -> Self {\n-        self.prefix(prefix).suffix(suffix)\n-    }\n-}\n-\n-impl<I> fmt::Display for SepByBuilder<'_, I>\n-where\n-    I: Iterator,\n-    I::Item: fmt::Display,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(self.prefix)?;\n-        let mut first = true;\n-        for item in self.iter.take().unwrap() {\n-            if !first {\n-                f.write_str(self.sep)?;\n-            }\n-            first = false;\n-            fmt::Display::fmt(&item, f)?;\n-        }\n-        f.write_str(self.suffix)?;\n-        Ok(())\n-    }\n-}\n-\n #[must_use]\n pub fn timeit(label: &'static str) -> impl Drop {\n     struct Guard {"}, {"sha": "51cf716b3dfe7c57733c0d3a2a90ead5d2bcc46a", "filename": "docs/dev/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -256,9 +256,9 @@ Release steps:\n    * checkout the `release` branch\n    * reset it to `upstream/nightly`\n    * push it to `upstream`. This triggers GitHub Actions which:\n-    ** runs `cargo xtask dist` to package binaries and VS Code extension\n-    ** makes a GitHub release\n-    ** pushes VS Code extension to the marketplace\n+     * runs `cargo xtask dist` to package binaries and VS Code extension\n+     * makes a GitHub release\n+     * pushes VS Code extension to the marketplace\n    * create new changelog in `rust-analyzer.github.io`\n    * create `rust-analyzer.github.io/git.log` file with the log of merge commits since last release\n 2. While the release is in progress, fill-in the changelog using `git.log`"}, {"sha": "f1bcdc4aff86279d0a020e34826f11d53649c955", "filename": "docs/dev/syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/docs%2Fdev%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/docs%2Fdev%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fsyntax.md?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -74,7 +74,7 @@ Points of note:\n * The original text can be recovered by concatenating the texts of all tokens in order.\n * Accessing a child of particular type (for example, parameter list of a function) generally involves linerary traversing the children, looking for a specific `kind`.\n * Modifying the tree is roughly `O(depth)`.\n-  We don't make special efforts to guarantree that the depth is not liner, but, in practice, syntax trees are branchy and shallow.\n+  We don't make special efforts to guarantee that the depth is not linear, but, in practice, syntax trees are branchy and shallow.\n * If mandatory (grammar wise) node is missing from the input, it's just missing from the tree.\n * If an extra erroneous input is present, it is wrapped into a node with `ERROR` kind, and treated just like any other node.\n * Parser errors are not a part of syntax tree."}, {"sha": "d186d1474e26390584e6f406344eda57a5322a48", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -607,7 +607,7 @@\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"description\": \"List of warnings warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n+                    \"description\": \"List of warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n                     \"default\": []\n                 },\n                 \"rust-analyzer.analysis.disabledDiagnostics\": {"}, {"sha": "f5db55b8cc34c9e597455aed4590268fa7b2adb0", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -4,7 +4,7 @@ import * as ra from '../src/lsp_ext';\n import * as Is from 'vscode-languageclient/lib/utils/is';\n \n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n-import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n+import { SemanticTokensFeature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n import { assert } from './util';\n \n function renderCommand(cmd: ra.CommandLink) {\n@@ -44,12 +44,6 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel,\n         middleware: {\n-            // Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576\n-            async provideDocumentSemanticTokens(document: vscode.TextDocument, token: vscode.CancellationToken, next: DocumentSemanticsTokensSignature) {\n-                const res = await next(document, token);\n-                if (res === undefined) throw new Error('busy');\n-                return res;\n-            },\n             async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n                 return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n                     (result) => {\n@@ -135,7 +129,7 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                 );\n             }\n \n-        } as any\n+        }\n     };\n \n     const client = new lc.LanguageClient("}, {"sha": "49d2d1c6fbe878e07ed71600fbaff81ac914060f", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -64,7 +64,8 @@ export async function sendRequestWithRetry<TParam, TRet>(\n     param: TParam,\n     token?: vscode.CancellationToken,\n ): Promise<TRet> {\n-    for (const delay of [2, 4, 6, 8, 10, null]) {\n+    // The sequence is `10 * (2 ** (2 * n))` where n is 1, 2, 3...\n+    for (const delay of [40, 160, 640, 2560, 10240, null]) {\n         try {\n             return await (token\n                 ? client.sendRequest(reqType, param, token)\n@@ -84,8 +85,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n                 log.warn(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n-\n-            await sleep(10 * (1 << delay));\n+            await sleep(delay);\n         }\n     }\n     throw 'unreachable';"}, {"sha": "4ff72865e8560e454535139d0f20c4653aa80658", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=b50bb800a5b5e01b6cb4de10330fd5b61d6cd0db", "patch": "@@ -44,11 +44,26 @@ fn rust_files_are_tidy() {\n         let text = fs2::read_to_string(&path).unwrap();\n         check_todo(&path, &text);\n         check_trailing_ws(&path, &text);\n+        deny_clippy(&path, &text);\n         tidy_docs.visit(&path, &text);\n     }\n     tidy_docs.finish();\n }\n \n+fn deny_clippy(path: &PathBuf, text: &String) {\n+    if text.contains(\"[\\u{61}llow(clippy\") {\n+        panic!(\n+            \"\\n\\nallowing lints is forbidden: {}.\n+rust-analyzer intentionally doesn't check clippy on CI.\n+You can allow lint globally via `xtask clippy`.\n+See https://github.com/rust-lang/rust-clippy/issues/5537 for discussion.\n+\n+\",\n+            path.display()\n+        )\n+    }\n+}\n+\n #[test]\n fn check_licenses() {\n     let expected = \""}]}