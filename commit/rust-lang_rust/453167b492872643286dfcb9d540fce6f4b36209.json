{"sha": "453167b492872643286dfcb9d540fce6f4b36209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MzE2N2I0OTI4NzI2NDMyODZkZmNiOWQ1NDBmY2U2ZjRiMzYyMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T21:22:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T21:25:33Z"}, "message": "Modernise item completion tests", "tree": {"sha": "4fadf535bcb63a7d2777207efb648ff2ac0d384b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fadf535bcb63a7d2777207efb648ff2ac0d384b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/453167b492872643286dfcb9d540fce6f4b36209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/453167b492872643286dfcb9d540fce6f4b36209", "html_url": "https://github.com/rust-lang/rust/commit/453167b492872643286dfcb9d540fce6f4b36209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/453167b492872643286dfcb9d540fce6f4b36209/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfe0070dda16096c17c992ddb6c2d37b8ff4c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfe0070dda16096c17c992ddb6c2d37b8ff4c39", "html_url": "https://github.com/rust-lang/rust/commit/4cfe0070dda16096c17c992ddb6c2d37b8ff4c39"}], "stats": {"total": 464, "additions": 199, "deletions": 265}, "files": [{"sha": "a610fd6d167204e9e7c31b331a984499df1bd2c7", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 199, "deletions": 265, "changes": 464, "blob_url": "https://github.com/rust-lang/rust/blob/453167b492872643286dfcb9d540fce6f4b36209/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453167b492872643286dfcb9d540fce6f4b36209/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=453167b492872643286dfcb9d540fce6f4b36209", "patch": "@@ -227,330 +227,264 @@ fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use crate::completion::{\n+        test_utils::{check_edit, completion_list},\n+        CompletionKind,\n+    };\n \n-    fn complete(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Magic)\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn name_ref_function_type_const() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                type TestType;\n-                const TEST_CONST: u16;\n-                fn test();\n-            }\n-\n-            struct T1;\n+        check(\n+            r#\"\n+trait Test {\n+    type TestType;\n+    const TEST_CONST: u16;\n+    fn test();\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                t<|>\n-            }\n-            \",\n+impl Test for T {\n+    t<|>\n+}\n+\"#,\n+            expect![[\"\n+ct const TEST_CONST: u16 = \\n\\\n+fn fn test()\n+ta type TestType = \\n\\\n+            \"]],\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"const TEST_CONST: u16 = \",\n-                source_range: 112..113,\n-                delete: 112..113,\n-                insert: \"const TEST_CONST: u16 = \",\n-                kind: Const,\n-                lookup: \"TEST_CONST\",\n-            },\n-            CompletionItem {\n-                label: \"fn test()\",\n-                source_range: 112..113,\n-                delete: 112..113,\n-                insert: \"fn test() {\\n    $0\\n}\",\n-                kind: Function,\n-                lookup: \"test\",\n-            },\n-            CompletionItem {\n-                label: \"type TestType = \",\n-                source_range: 112..113,\n-                delete: 112..113,\n-                insert: \"type TestType = \",\n-                kind: TypeAlias,\n-                lookup: \"TestType\",\n-            },\n-        ]\n-        \"###);\n     }\n \n     #[test]\n     fn no_nested_fn_completions() {\n-        let completions = complete(\n+        check(\n             r\"\n-            trait Test {\n-                fn test();\n-                fn test2();\n-            }\n-\n-            struct T1;\n+trait Test {\n+    fn test();\n+    fn test2();\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                fn test() {\n-                    t<|>\n-                }\n-            }\n-            \",\n+impl Test for T {\n+    fn test() {\n+        t<|>\n+    }\n+}\n+\",\n+            expect![[\"\"]],\n         );\n-        assert_debug_snapshot!(completions, @r###\"[]\"###);\n     }\n \n     #[test]\n     fn name_ref_single_function() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn test();\n-            }\n+        check_edit(\n+            \"test\",\n+            r#\"\n+trait Test {\n+    fn test();\n+}\n+struct T;\n \n-            struct T1;\n+impl Test for T {\n+    t<|>\n+}\n+\"#,\n+            r#\"\n+trait Test {\n+    fn test();\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                t<|>\n-            }\n-            \",\n+impl Test for T {\n+    fn test() {\n+    $0\n+}\n+}\n+\"#,\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"fn test()\",\n-                source_range: 66..67,\n-                delete: 66..67,\n-                insert: \"fn test() {\\n    $0\\n}\",\n-                kind: Function,\n-                lookup: \"test\",\n-            },\n-        ]\n-        \"###);\n     }\n \n     #[test]\n     fn single_function() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn foo();\n-            }\n+        check_edit(\n+            \"test\",\n+            r#\"\n+trait Test {\n+    fn test();\n+}\n+struct T;\n \n-            struct T1;\n+impl Test for T {\n+    fn t<|>\n+}\n+\"#,\n+            r#\"\n+trait Test {\n+    fn test();\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                fn f<|>\n-            }\n-            \",\n+impl Test for T {\n+    fn test() {\n+    $0\n+}\n+}\n+\"#,\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"fn foo()\",\n-                source_range: 68..69,\n-                delete: 65..69,\n-                insert: \"fn foo() {\\n    $0\\n}\",\n-                kind: Function,\n-                lookup: \"foo\",\n-            },\n-        ]\n-        \"###);\n     }\n \n     #[test]\n     fn hide_implemented_fn() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn foo();\n-                fn foo_bar();\n-            }\n-\n-            struct T1;\n-\n-            impl Test for T1 {\n-                fn foo() {}\n-\n-                fn f<|>\n-            }\n-            \",\n-        );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"fn foo_bar()\",\n-                source_range: 103..104,\n-                delete: 100..104,\n-                insert: \"fn foo_bar() {\\n    $0\\n}\",\n-                kind: Function,\n-                lookup: \"foo_bar\",\n-            },\n-        ]\n-        \"###);\n-    }\n-\n-    #[test]\n-    fn completes_only_on_top_level() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn foo();\n-\n-                fn foo_bar();\n-            }\n-\n-            struct T1;\n+        check(\n+            r#\"\n+trait Test {\n+    fn foo();\n+    fn foo_bar();\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                fn foo() {\n-                    <|>\n-                }\n-            }\n-            \",\n+impl Test for T {\n+    fn foo() {}\n+    fn f<|>\n+}\n+\"#,\n+            expect![[r#\"\n+                fn fn foo_bar()\n+            \"#]],\n         );\n-        assert_debug_snapshot!(completions, @r###\"[]\"###);\n     }\n \n     #[test]\n     fn generic_fn() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn foo<T>();\n-            }\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+trait Test {\n+    fn foo<T>();\n+}\n+struct T;\n \n-            struct T1;\n+impl Test for T {\n+    fn f<|>\n+}\n+\"#,\n+            r#\"\n+trait Test {\n+    fn foo<T>();\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                fn f<|>\n-            }\n-            \",\n+impl Test for T {\n+    fn foo<T>() {\n+    $0\n+}\n+}\n+\"#,\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"fn foo()\",\n-                source_range: 71..72,\n-                delete: 68..72,\n-                insert: \"fn foo<T>() {\\n    $0\\n}\",\n-                kind: Function,\n-                lookup: \"foo\",\n-            },\n-        ]\n-        \"###);\n-    }\n-\n-    #[test]\n-    fn generic_constrait_fn() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn foo<T>() where T: Into<String>;\n-            }\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+trait Test {\n+    fn foo<T>() where T: Into<String>;\n+}\n+struct T;\n \n-            struct T1;\n+impl Test for T {\n+    fn f<|>\n+}\n+\"#,\n+            r#\"\n+trait Test {\n+    fn foo<T>() where T: Into<String>;\n+}\n+struct T;\n \n-            impl Test for T1 {\n-                fn f<|>\n-            }\n-            \",\n+impl Test for T {\n+    fn foo<T>()\n+where T: Into<String> {\n+    $0\n+}\n+}\n+\"#,\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"fn foo()\",\n-                source_range: 93..94,\n-                delete: 90..94,\n-                insert: \"fn foo<T>()\\nwhere T: Into<String> {\\n    $0\\n}\",\n-                kind: Function,\n-                lookup: \"foo\",\n-            },\n-        ]\n-        \"###);\n     }\n \n     #[test]\n     fn associated_type() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                type SomeType;\n-            }\n+        check_edit(\n+            \"SomeType\",\n+            r#\"\n+trait Test {\n+    type SomeType;\n+}\n \n-            impl Test for () {\n-                type S<|>\n-            }\n-            \",\n+impl Test for () {\n+    type S<|>\n+}\n+\"#,\n+            \"\n+trait Test {\n+    type SomeType;\n+}\n+\n+impl Test for () {\n+    type SomeType = \\n\\\n+}\n+\",\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"type SomeType = \",\n-                source_range: 63..64,\n-                delete: 58..64,\n-                insert: \"type SomeType = \",\n-                kind: TypeAlias,\n-                lookup: \"SomeType\",\n-            },\n-        ]\n-        \"###);\n     }\n \n     #[test]\n     fn associated_const() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                const SOME_CONST: u16;\n-            }\n+        check_edit(\n+            \"SOME_CONST\",\n+            r#\"\n+trait Test {\n+    const SOME_CONST: u16;\n+}\n \n-            impl Test for () {\n-                const S<|>\n-            }\n-            \",\n+impl Test for () {\n+    const S<|>\n+}\n+\"#,\n+            \"\n+trait Test {\n+    const SOME_CONST: u16;\n+}\n+\n+impl Test for () {\n+    const SOME_CONST: u16 = \\n\\\n+}\n+\",\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"const SOME_CONST: u16 = \",\n-                source_range: 72..73,\n-                delete: 66..73,\n-                insert: \"const SOME_CONST: u16 = \",\n-                kind: Const,\n-                lookup: \"SOME_CONST\",\n-            },\n-        ]\n-        \"###);\n-    }\n \n-    #[test]\n-    fn associated_const_with_default() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                const SOME_CONST: u16 = 42;\n-            }\n+        check_edit(\n+            \"SOME_CONST\",\n+            r#\"\n+trait Test {\n+    const SOME_CONST: u16 = 92;\n+}\n \n-            impl Test for () {\n-                const S<|>\n-            }\n-            \",\n+impl Test for () {\n+    const S<|>\n+}\n+\"#,\n+            \"\n+trait Test {\n+    const SOME_CONST: u16 = 92;\n+}\n+\n+impl Test for () {\n+    const SOME_CONST: u16 = \\n\\\n+}\n+\",\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"const SOME_CONST: u16 = \",\n-                source_range: 77..78,\n-                delete: 71..78,\n-                insert: \"const SOME_CONST: u16 = \",\n-                kind: Const,\n-                lookup: \"SOME_CONST\",\n-            },\n-        ]\n-        \"###);\n     }\n }"}]}