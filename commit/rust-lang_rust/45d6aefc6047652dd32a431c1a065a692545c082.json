{"sha": "45d6aefc6047652dd32a431c1a065a692545c082", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZDZhZWZjNjA0NzY1MmRkMzJhNDMxYzFhMDY1YTY5MjU0NWMwODI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T21:44:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T21:44:55Z"}, "message": "Rollup merge of #73227 - camelid:multiple-asm-options, r=Amanieu\n\nAllow multiple `asm!` options groups and report an error on duplicate options\n\nFixes #73193\n\nCc @joshtriplett @Amanieu\n\n- [x] Allow multiple options\n- [x] Update existing test\n- [x] Add new tests\n- [x] Check for duplicate options\n- [x] Add duplicate options tests\n- [x] Finalize suggestion format for duplicate options error", "tree": {"sha": "992934ce30cd074fdd59f96e15212d134e777474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992934ce30cd074fdd59f96e15212d134e777474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45d6aefc6047652dd32a431c1a065a692545c082", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7oNXCRBK7hj4Ov3rIwAAdHIIABmNO+vekXMig7J24/LpEQ0n\nRFD9UDL2cDSqkHK4SrWVKUvO0LvtTOhsG12ZJ9aNnKNHFitVdOum9eGVZU14aJi2\ns1iQZOWgrZMTt4lLQR4H1MqY8Tcd26GJiI/1FsleoReoGCMBAjIP7rxZtVGHsaxQ\nHypAtG4LY0UtkSQfgvSrXRdesLy77eCLMN51kKp/56Ky8I9ck9bAMo17Aso96SzL\nCm5uImnqFbFTANvyHnaYsHQymTPQjY3gEUC7BH8BqRvitMXDXnkS9ngIuckAwwiO\nh+TBcEdjberJQ1fHJlTdUk1iovyr1sx9dy7QPQ/CjMakEoT5zpAt5sw74NVn1yM=\n=mj0p\n-----END PGP SIGNATURE-----\n", "payload": "tree 992934ce30cd074fdd59f96e15212d134e777474\nparent c47550f9e405d5817e69eb8d42995c63b60bbd8b\nparent c31785a4ed13f1a1bab752ea3c1177f7256e4f11\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592689495 -0700\ncommitter GitHub <noreply@github.com> 1592689495 -0700\n\nRollup merge of #73227 - camelid:multiple-asm-options, r=Amanieu\n\nAllow multiple `asm!` options groups and report an error on duplicate options\n\nFixes #73193\n\nCc @joshtriplett @Amanieu\n\n- [x] Allow multiple options\n- [x] Update existing test\n- [x] Add new tests\n- [x] Check for duplicate options\n- [x] Add duplicate options tests\n- [x] Finalize suggestion format for duplicate options error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45d6aefc6047652dd32a431c1a065a692545c082", "html_url": "https://github.com/rust-lang/rust/commit/45d6aefc6047652dd32a431c1a065a692545c082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45d6aefc6047652dd32a431c1a065a692545c082/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c47550f9e405d5817e69eb8d42995c63b60bbd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c47550f9e405d5817e69eb8d42995c63b60bbd8b", "html_url": "https://github.com/rust-lang/rust/commit/c47550f9e405d5817e69eb8d42995c63b60bbd8b"}, {"sha": "c31785a4ed13f1a1bab752ea3c1177f7256e4f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31785a4ed13f1a1bab752ea3c1177f7256e4f11", "html_url": "https://github.com/rust-lang/rust/commit/c31785a4ed13f1a1bab752ea3c1177f7256e4f11"}], "stats": {"total": 303, "additions": 236, "deletions": 67}, "files": [{"sha": "52f86aa7e06b97f1b62a57213ce00a0c585cfaa7", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 63, "deletions": 26, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -16,7 +16,7 @@ struct AsmArgs {\n     named_args: FxHashMap<Symbol, usize>,\n     reg_args: FxHashSet<usize>,\n     options: ast::InlineAsmOptions,\n-    options_span: Option<Span>,\n+    options_spans: Vec<Span>,\n }\n \n fn parse_args<'a>(\n@@ -59,7 +59,7 @@ fn parse_args<'a>(\n         named_args: FxHashMap::default(),\n         reg_args: FxHashSet::default(),\n         options: ast::InlineAsmOptions::empty(),\n-        options_span: None,\n+        options_spans: vec![],\n     };\n \n     let mut allow_templates = true;\n@@ -174,9 +174,9 @@ fn parse_args<'a>(\n \n         // Validate the order of named, positional & explicit register operands and options. We do\n         // this at the end once we have the full span of the argument available.\n-        if let Some(options_span) = args.options_span {\n+        if !args.options_spans.is_empty() {\n             ecx.struct_span_err(span, \"arguments are not allowed after options\")\n-                .span_label(options_span, \"previous options\")\n+                .span_labels(args.options_spans.clone(), \"previous options\")\n                 .span_label(span, \"argument\")\n                 .emit();\n         }\n@@ -227,23 +227,23 @@ fn parse_args<'a>(\n     if args.options.contains(ast::InlineAsmOptions::NOMEM)\n         && args.options.contains(ast::InlineAsmOptions::READONLY)\n     {\n-        let span = args.options_span.unwrap();\n-        ecx.struct_span_err(span, \"the `nomem` and `readonly` options are mutually exclusive\")\n+        let spans = args.options_spans.clone();\n+        ecx.struct_span_err(spans, \"the `nomem` and `readonly` options are mutually exclusive\")\n             .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && args.options.contains(ast::InlineAsmOptions::NORETURN)\n     {\n-        let span = args.options_span.unwrap();\n-        ecx.struct_span_err(span, \"the `pure` and `noreturn` options are mutually exclusive\")\n+        let spans = args.options_spans.clone();\n+        ecx.struct_span_err(spans, \"the `pure` and `noreturn` options are mutually exclusive\")\n             .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && !args.options.intersects(ast::InlineAsmOptions::NOMEM | ast::InlineAsmOptions::READONLY)\n     {\n-        let span = args.options_span.unwrap();\n+        let spans = args.options_spans.clone();\n         ecx.struct_span_err(\n-            span,\n+            spans,\n             \"the `pure` option must be combined with either `nomem` or `readonly`\",\n         )\n         .emit();\n@@ -267,7 +267,7 @@ fn parse_args<'a>(\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE) && !have_real_output {\n         ecx.struct_span_err(\n-            args.options_span.unwrap(),\n+            args.options_spans.clone(),\n             \"asm with `pure` option must have at least one output\",\n         )\n         .emit();\n@@ -283,27 +283,71 @@ fn parse_args<'a>(\n     Ok(args)\n }\n \n+/// Report a duplicate option error.\n+///\n+/// This function must be called immediately after the option token is parsed.\n+/// Otherwise, the suggestion will be incorrect.\n+fn err_duplicate_option<'a>(p: &mut Parser<'a>, symbol: Symbol, span: Span) {\n+    let mut err = p\n+        .sess\n+        .span_diagnostic\n+        .struct_span_err(span, &format!(\"the `{}` option was already provided\", symbol));\n+    err.span_label(span, \"this option was already provided\");\n+\n+    // Tool-only output\n+    let mut full_span = span;\n+    if p.token.kind == token::Comma {\n+        full_span = full_span.to(p.token.span);\n+    }\n+    err.tool_only_span_suggestion(\n+        full_span,\n+        \"remove this option\",\n+        String::new(),\n+        Applicability::MachineApplicable,\n+    );\n+\n+    err.emit();\n+}\n+\n+/// Try to set the provided option in the provided `AsmArgs`.\n+/// If it is already set, report a duplicate option error.\n+///\n+/// This function must be called immediately after the option token is parsed.\n+/// Otherwise, the error will not point to the correct spot.\n+fn try_set_option<'a>(\n+    p: &mut Parser<'a>,\n+    args: &mut AsmArgs,\n+    symbol: Symbol,\n+    option: ast::InlineAsmOptions,\n+) {\n+    if !args.options.contains(option) {\n+        args.options |= option;\n+    } else {\n+        err_duplicate_option(p, symbol, p.prev_token.span);\n+    }\n+}\n+\n fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), DiagnosticBuilder<'a>> {\n     let span_start = p.prev_token.span;\n \n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n \n     while !p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n         if p.eat(&token::Ident(sym::pure, false)) {\n-            args.options |= ast::InlineAsmOptions::PURE;\n+            try_set_option(p, args, sym::pure, ast::InlineAsmOptions::PURE);\n         } else if p.eat(&token::Ident(sym::nomem, false)) {\n-            args.options |= ast::InlineAsmOptions::NOMEM;\n+            try_set_option(p, args, sym::nomem, ast::InlineAsmOptions::NOMEM);\n         } else if p.eat(&token::Ident(sym::readonly, false)) {\n-            args.options |= ast::InlineAsmOptions::READONLY;\n+            try_set_option(p, args, sym::readonly, ast::InlineAsmOptions::READONLY);\n         } else if p.eat(&token::Ident(sym::preserves_flags, false)) {\n-            args.options |= ast::InlineAsmOptions::PRESERVES_FLAGS;\n+            try_set_option(p, args, sym::preserves_flags, ast::InlineAsmOptions::PRESERVES_FLAGS);\n         } else if p.eat(&token::Ident(sym::noreturn, false)) {\n-            args.options |= ast::InlineAsmOptions::NORETURN;\n+            try_set_option(p, args, sym::noreturn, ast::InlineAsmOptions::NORETURN);\n         } else if p.eat(&token::Ident(sym::nostack, false)) {\n-            args.options |= ast::InlineAsmOptions::NOSTACK;\n+            try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n         } else {\n             p.expect(&token::Ident(sym::att_syntax, false))?;\n-            args.options |= ast::InlineAsmOptions::ATT_SYNTAX;\n+            try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n         }\n \n         // Allow trailing commas\n@@ -314,14 +358,7 @@ fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), Diagn\n     }\n \n     let new_span = span_start.to(p.prev_token.span);\n-    if let Some(options_span) = args.options_span {\n-        p.struct_span_err(new_span, \"asm options cannot be specified multiple times\")\n-            .span_label(options_span, \"previously here\")\n-            .span_label(new_span, \"duplicate options\")\n-            .emit();\n-    } else {\n-        args.options_span = Some(new_span);\n-    }\n+    args.options_spans.push(new_span);\n \n     Ok(())\n }"}, {"sha": "c702742bf1a6369df09476451ce615b5d88c839a", "filename": "src/test/codegen/asm-multiple-options.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-multiple-options.rs?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -0,0 +1,53 @@\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm)]\n+\n+// CHECK-LABEL: @pure\n+// CHECK-NOT: asm\n+// CHECK: ret void\n+#[no_mangle]\n+pub unsafe fn pure(x: i32) {\n+    let y: i32;\n+    asm!(\"\", out(\"ax\") y, in(\"bx\") x, options(pure), options(nomem));\n+}\n+\n+pub static mut VAR: i32 = 0;\n+pub static mut DUMMY_OUTPUT: i32 = 0;\n+\n+// CHECK-LABEL: @readonly\n+// CHECK: call i32 asm\n+// CHECK: ret i32 1\n+#[no_mangle]\n+pub unsafe fn readonly() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure), options(readonly));\n+    VAR\n+}\n+\n+// CHECK-LABEL: @nomem\n+// CHECK-NOT: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn nomem() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure), options(nomem));\n+    VAR = 2;\n+    VAR\n+}\n+\n+// CHECK-LABEL: @not_nomem\n+// CHECK: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn not_nomem() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure), options(readonly));\n+    VAR = 2;\n+    VAR\n+}"}, {"sha": "f4672a50fd0f44838eb3ae48a08f75ec5316ec27", "filename": "src/test/ui/asm/duplicate-options.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.fixed?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -0,0 +1,26 @@\n+// only-x86_64\n+// run-rustfix\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", options(nomem, ));\n+        //~^ ERROR the `nomem` option was already provided\n+        asm!(\"\", options(att_syntax, ));\n+        //~^ ERROR the `att_syntax` option was already provided\n+        asm!(\"\", options(nostack, att_syntax), options());\n+        //~^ ERROR the `nostack` option was already provided\n+        asm!(\"\", options(nostack, ), options(), options());\n+        //~^ ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        asm!(\n+            \"\",\n+            options(nomem, noreturn),\n+            options(att_syntax, ), //~ ERROR the `noreturn` option was already provided\n+            options( nostack), //~ ERROR the `nomem` option was already provided\n+            options(), //~ ERROR the `noreturn` option was already provided\n+        );\n+    }\n+}"}, {"sha": "80292d7521a9a4f7f812495003241d8bbb34d32a", "filename": "src/test/ui/asm/duplicate-options.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.rs?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -0,0 +1,26 @@\n+// only-x86_64\n+// run-rustfix\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", options(nomem, nomem));\n+        //~^ ERROR the `nomem` option was already provided\n+        asm!(\"\", options(att_syntax, att_syntax));\n+        //~^ ERROR the `att_syntax` option was already provided\n+        asm!(\"\", options(nostack, att_syntax), options(nostack));\n+        //~^ ERROR the `nostack` option was already provided\n+        asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+        //~^ ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        asm!(\n+            \"\",\n+            options(nomem, noreturn),\n+            options(att_syntax, noreturn), //~ ERROR the `noreturn` option was already provided\n+            options(nomem, nostack), //~ ERROR the `nomem` option was already provided\n+            options(noreturn), //~ ERROR the `noreturn` option was already provided\n+        );\n+    }\n+}"}, {"sha": "cd8d743e031a5e7046ce7b4987a245a6c21ae150", "filename": "src/test/ui/asm/duplicate-options.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fduplicate-options.stderr?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -0,0 +1,56 @@\n+error: the `nomem` option was already provided\n+  --> $DIR/duplicate-options.rs:8:33\n+   |\n+LL |         asm!(\"\", options(nomem, nomem));\n+   |                                 ^^^^^ this option was already provided\n+\n+error: the `att_syntax` option was already provided\n+  --> $DIR/duplicate-options.rs:10:38\n+   |\n+LL |         asm!(\"\", options(att_syntax, att_syntax));\n+   |                                      ^^^^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:12:56\n+   |\n+LL |         asm!(\"\", options(nostack, att_syntax), options(nostack));\n+   |                                                        ^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:14:35\n+   |\n+LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+   |                                   ^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:14:53\n+   |\n+LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+   |                                                     ^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:14:71\n+   |\n+LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+   |                                                                       ^^^^^^^ this option was already provided\n+\n+error: the `noreturn` option was already provided\n+  --> $DIR/duplicate-options.rs:21:33\n+   |\n+LL |             options(att_syntax, noreturn),\n+   |                                 ^^^^^^^^ this option was already provided\n+\n+error: the `nomem` option was already provided\n+  --> $DIR/duplicate-options.rs:22:21\n+   |\n+LL |             options(nomem, nostack),\n+   |                     ^^^^^ this option was already provided\n+\n+error: the `noreturn` option was already provided\n+  --> $DIR/duplicate-options.rs:23:21\n+   |\n+LL |             options(noreturn),\n+   |                     ^^^^^^^^ this option was already provided\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "538a3fde8fdeb6fb525b1a62b8e15e89e1e1e33f", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -34,11 +34,6 @@ fn main() {\n         //~^ ERROR expected one of\n         asm!(\"\", options(nomem, foo));\n         //~^ ERROR expected one of\n-        asm!(\"\", options(), options());\n-        //~^ ERROR asm options cannot be specified multiple times\n-        asm!(\"\", options(), options(), options());\n-        //~^ ERROR asm options cannot be specified multiple times\n-        //~^^ ERROR asm options cannot be specified multiple times\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR arguments are not allowed after options\n         asm!(\"{a}\", a = const foo, a = const bar);"}, {"sha": "dfbfc0abe3472db706d42858d0227692a90337d4", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45d6aefc6047652dd32a431c1a065a692545c082/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=45d6aefc6047652dd32a431c1a065a692545c082", "patch": "@@ -82,111 +82,87 @@ error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `prese\n LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 8 possible tokens\n \n-error: asm options cannot be specified multiple times\n-  --> $DIR/parse-error.rs:37:29\n-   |\n-LL |         asm!(\"\", options(), options());\n-   |                  ---------  ^^^^^^^^^ duplicate options\n-   |                  |\n-   |                  previously here\n-\n-error: asm options cannot be specified multiple times\n-  --> $DIR/parse-error.rs:39:29\n-   |\n-LL |         asm!(\"\", options(), options(), options());\n-   |                  ---------  ^^^^^^^^^ duplicate options\n-   |                  |\n-   |                  previously here\n-\n-error: asm options cannot be specified multiple times\n-  --> $DIR/parse-error.rs:39:40\n-   |\n-LL |         asm!(\"\", options(), options(), options());\n-   |                  ---------             ^^^^^^^^^ duplicate options\n-   |                  |\n-   |                  previously here\n-\n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:42:31\n+  --> $DIR/parse-error.rs:37:31\n    |\n LL |         asm!(\"{}\", options(), const foo);\n    |                    ---------  ^^^^^^^^^ argument\n    |                    |\n    |                    previous options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:44:36\n+  --> $DIR/parse-error.rs:39:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:44:36\n+  --> $DIR/parse-error.rs:39:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:47:18\n+  --> $DIR/parse-error.rs:42:18\n    |\n LL |         asm!(\"\", a = in(\"eax\") foo);\n    |                  ^^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:49:36\n+  --> $DIR/parse-error.rs:44:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:51:36\n+  --> $DIR/parse-error.rs:46:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:53:36\n+  --> $DIR/parse-error.rs:48:36\n    |\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                     -------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:55:29\n+  --> $DIR/parse-error.rs:50:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 8 possible tokens\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:57:33\n+  --> $DIR/parse-error.rs:52:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 8 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:59:14\n+  --> $DIR/parse-error.rs:54:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:61:21\n+  --> $DIR/parse-error.rs:56:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 25 previous errors\n "}]}