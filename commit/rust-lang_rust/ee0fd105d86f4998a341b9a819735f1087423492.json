{"sha": "ee0fd105d86f4998a341b9a819735f1087423492", "node_id": "C_kwDOAAsO6NoAKGVlMGZkMTA1ZDg2ZjQ5OThhMzQxYjlhODE5NzM1ZjEwODc0MjM0OTI", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-12T09:52:32Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:23Z"}, "message": "Point at return type when it introduces `'static` obligation", "tree": {"sha": "9715be7f48e25a6c5e36637d09a1175995e161f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9715be7f48e25a6c5e36637d09a1175995e161f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0fd105d86f4998a341b9a819735f1087423492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0fd105d86f4998a341b9a819735f1087423492", "html_url": "https://github.com/rust-lang/rust/commit/ee0fd105d86f4998a341b9a819735f1087423492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0fd105d86f4998a341b9a819735f1087423492/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "html_url": "https://github.com/rust-lang/rust/commit/09dbf37213a5462c08e5e62e931aabc2fb3b92e4"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "34015b97e3c40ca62a5ac1fedfb51f91a4e86f99", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -181,6 +181,26 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         if let SubregionOrigin::RelateParamBound(_, _, Some(bound)) = sub_origin {\n             err.span_note(*bound, \"`'static` lifetime requirement introduced by this bound\");\n         }\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = sub_origin {\n+            if let ObligationCauseCode::BlockTailExpression(hir_id) = &cause.code {\n+                let parent_id = tcx.hir().get_parent_item(*hir_id);\n+                if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(parent_id) {\n+                    let mut span: MultiSpan = fn_decl.output.span().into();\n+                    span.push_span_label(\n+                        fn_decl.output.span(),\n+                        \"requirement introduced by this return type\".to_string(),\n+                    );\n+                    span.push_span_label(\n+                        cause.span,\n+                        \"because of this returned expression\".to_string(),\n+                    );\n+                    err.span_note(\n+                        span,\n+                        \"`'static` lifetime requirement introduced by the return type\",\n+                    );\n+                }\n+            }\n+        }\n \n         let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n "}, {"sha": "49264ae2505b9d8899d4563b9e84ac6c47e3cc22", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -6,6 +6,15 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n ...\n LL |     bar(foo, x)\n    |         ^^^  - ...is captured and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/project-fn-ret-invariant.rs:45:32\n+   |\n+LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n+   |                                ^^^^^^^^^^^^^ requirement introduced by this return type\n+...\n+LL |     bar(foo, x)\n+   |     ----------- because of this returned expression\n \n error: aborting due to previous error\n "}, {"sha": "d0d9ed8923d55a708dd9a87b545d2820dd04b55a", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -140,6 +140,13 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:14:24\n+   |\n+LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                        ^^^^^^^^^^^^^^   ----------- because of this returned expression\n+   |                        |\n+   |                        requirement introduced by this return type\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -153,6 +160,13 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:16:33\n+   |\n+LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                                 ^^^^^^^^^^^^^^   ----------- because of this returned expression\n+   |                                 |\n+   |                                 requirement introduced by this return type\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n@@ -166,6 +180,13 @@ LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:24\n+   |\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^   ----------- because of this returned expression\n+   |                        |\n+   |                        requirement introduced by this return type\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -181,6 +202,13 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:20:33\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^   ----------- because of this returned expression\n+   |                                 |\n+   |                                 requirement introduced by this return type\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }"}, {"sha": "c882e3c9d069313c4d271b18afff550e383cfe34", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -7,6 +7,14 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n LL |     ss.r\n    |     ^^^^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/object-lifetime-default-from-box-error.rs:14:33\n+   |\n+LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n+   |                                 ^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+...\n+LL |     ss.r\n+   |     ---- because of this returned expression\n help: to declare that the trait object captures data from argument `ss`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {"}, {"sha": "45a3c801a3889fcf863a66ea914dc7b877ff4173", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -23,6 +23,13 @@ LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n LL |     Box::new(v)\n    |              ^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/region-object-lifetime-in-coercion.rs:12:19\n+   |\n+LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     Box::new(v)\n+   |     ----------- because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n@@ -41,6 +48,14 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n LL |     Box::new(v)\n    |              ^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/region-object-lifetime-in-coercion.rs:16:19\n+   |\n+LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n+   |                   ^^^^^^^^^^^^ requirement introduced by this return type\n+...\n+LL |     Box::new(v)\n+   |     ----------- because of this returned expression\n help: to declare that the trait object captures data from argument `v`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {"}, {"sha": "a924fbc5bf7fe190116059222e7d6db03258e80f", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -6,6 +6,13 @@ LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-close-object-into-object-2.rs:8:48\n+   |\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n+   |                                                ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {"}, {"sha": "969222068eeab1da7266e8303b4afb1afd650fde", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -6,6 +6,13 @@ LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-close-object-into-object-4.rs:8:40\n+   |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {"}, {"sha": "3bbbf00d5e73254014729f66a7a3a7e9bdd9325f", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -7,6 +7,14 @@ LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n    |              ^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-proc-bound-capture.rs:7:30\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     // This is illegal, because the region bound on `proc` is 'static.\n+LL |     Box::new(move || { *x })\n+   |     ------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {"}, {"sha": "c06943c0874531d536e552354aadc8ef9dbd3e57", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -46,6 +46,14 @@ note: ...and is required to live as long as `'static` here\n    |\n LL |     y.get_b() // ERROR\n    |     ^^^^^^^^^\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:26:40\n+   |\n+LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+...\n+LL |     y.get_b() // ERROR\n+   |     --------- because of this returned expression\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/type-checking-test-4.rs:33:5\n@@ -54,6 +62,14 @@ LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                       ------------ this data with lifetime `'a`...\n LL |     <_ as Bar>::get_b(x) // ERROR\n    |     ^^^^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:32:40\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     -------------------- because of this returned expression\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/type-checking-test-4.rs:38:15\n@@ -62,6 +78,14 @@ LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                       ------------ this data with lifetime `'a`...\n LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n    |     ----------^^------------- ...is captured and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:37:40\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ---------------------------- because of this returned expression\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/type-checking-test-4.rs:43:27\n@@ -84,6 +108,14 @@ note: ...and is required to live as long as `'static` here\n    |\n LL |     z.get_b() // ERROR\n    |     ^^^^^^^^^\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:42:40\n+   |\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+...\n+LL |     z.get_b() // ERROR\n+   |     --------- because of this returned expression\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3fed7ba6c495b18018f6a008d23b713bcf2d3159", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0fd105d86f4998a341b9a819735f1087423492/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=ee0fd105d86f4998a341b9a819735f1087423492", "patch": "@@ -9,6 +9,14 @@ LL |     Box::new(items.iter())\n    |              |\n    |              ...is captured and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/dyn-trait-underscore.rs:6:25\n+   |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL |     Box::new(items.iter())\n+   |     ---------------------- because of this returned expression\n help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}]}