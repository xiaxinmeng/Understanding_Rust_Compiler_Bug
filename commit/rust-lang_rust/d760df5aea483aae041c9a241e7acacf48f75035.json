{"sha": "d760df5aea483aae041c9a241e7acacf48f75035", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjBkZjVhZWE0ODNhYWUwNDFjOWEyNDFlN2FjYWNmNDhmNzUwMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-25T08:06:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-25T08:06:06Z"}, "message": "Auto merge of #63874 - spastorino:places-drive-by-cleanups, r=Centril\n\nPlaces drive by cleanups\n\nSmall fixes of things meanwhile I was doing the box part of Place 2.0, based on @centril reviews.", "tree": {"sha": "c0603f6587332849ebbcdbffe57b7f7917bc81d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0603f6587332849ebbcdbffe57b7f7917bc81d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d760df5aea483aae041c9a241e7acacf48f75035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d760df5aea483aae041c9a241e7acacf48f75035", "html_url": "https://github.com/rust-lang/rust/commit/d760df5aea483aae041c9a241e7acacf48f75035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d760df5aea483aae041c9a241e7acacf48f75035/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783469ca09005d135c3204a55069707d1cd705a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/783469ca09005d135c3204a55069707d1cd705a9", "html_url": "https://github.com/rust-lang/rust/commit/783469ca09005d135c3204a55069707d1cd705a9"}, {"sha": "53f47347941de87dff536f3875f0a62a7fda4459", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f47347941de87dff536f3875f0a62a7fda4459", "html_url": "https://github.com/rust-lang/rust/commit/53f47347941de87dff536f3875f0a62a7fda4459"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "654d3d780fcb25e2600909511e2dc1dee37e8ce9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d760df5aea483aae041c9a241e7acacf48f75035", "patch": "@@ -1555,7 +1555,7 @@ pub struct Statement<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(Statement<'_>, 56);\n \n-impl<'tcx> Statement<'tcx> {\n+impl Statement<'_> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n     /// invalidating statement indices in `Location`s.\n     pub fn make_nop(&mut self) {\n@@ -1677,7 +1677,7 @@ pub struct InlineAsm<'tcx> {\n     pub inputs: Box<[(Span, Operand<'tcx>)]>,\n }\n \n-impl<'tcx> Debug for Statement<'tcx> {\n+impl Debug for Statement<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::StatementKind::*;\n         match self.kind {\n@@ -2047,7 +2047,7 @@ impl<'p, 'tcx> Iterator for ProjectionsIter<'p, 'tcx> {\n \n impl<'p, 'tcx> FusedIterator for ProjectionsIter<'p, 'tcx> {}\n \n-impl<'tcx> Debug for Place<'tcx> {\n+impl Debug for Place<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         self.iterate(|_place_base, place_projections| {\n             // FIXME: remove this collect once we have migrated to slices"}, {"sha": "24420cb4d7e91d2d88f2200e84baf64de40c6394", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d760df5aea483aae041c9a241e7acacf48f75035", "patch": "@@ -724,10 +724,6 @@ macro_rules! make_mir_visitor {\n                 }\n \n                 match & $($mutability)? proj.elem {\n-                    ProjectionElem::Deref => {\n-                    }\n-                    ProjectionElem::Subslice { from: _, to: _ } => {\n-                    }\n                     ProjectionElem::Field(_field, ty) => {\n                         self.visit_ty(ty, TyContext::Location(location));\n                     }\n@@ -738,11 +734,12 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n+                    ProjectionElem::Deref |\n+                    ProjectionElem::Subslice { from: _, to: _ } |\n                     ProjectionElem::ConstantIndex { offset: _,\n                                                     min_length: _,\n-                                                    from_end: _ } => {\n-                    }\n-                    ProjectionElem::Downcast(_name, _variant_index) => {\n+                                                    from_end: _ } |\n+                    ProjectionElem::Downcast(_, _) => {\n                     }\n                 }\n             }"}, {"sha": "4c6be23de28be5746f0bfef3ae0fae88c26c2a43", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=d760df5aea483aae041c9a241e7acacf48f75035", "patch": "@@ -136,7 +136,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                 }\n                 PrefixSet::All => {\n                     // all prefixes: just blindly enqueue the base\n-                    // of the projection\n+                    // of the projection.\n                     self.next = Some(PlaceRef {\n                         base: cursor.base,\n                         projection: &proj.base,"}, {"sha": "e5a19572170a7053856a8e5e04e2cc113cefbc22", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760df5aea483aae041c9a241e7acacf48f75035/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=d760df5aea483aae041c9a241e7acacf48f75035", "patch": "@@ -240,7 +240,7 @@ impl MovePathLookup {\n     // alternative will *not* create a MovePath on the fly for an\n     // unknown place, but will rather return the nearest available\n     // parent.\n-    pub fn find(&self, place_ref: PlaceRef<'cx, 'tcx>) -> LookupResult {\n+    pub fn find(&self, place_ref: PlaceRef<'_, '_>) -> LookupResult {\n         place_ref.iterate(|place_base, place_projection| {\n             let mut result = match place_base {\n                 PlaceBase::Local(local) => self.locals[*local],"}]}