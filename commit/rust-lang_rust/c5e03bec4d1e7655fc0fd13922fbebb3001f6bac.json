{"sha": "c5e03bec4d1e7655fc0fd13922fbebb3001f6bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZTAzYmVjNGQxZTc2NTVmYzBmZDEzOTIyZmJlYmIzMDAxZjZiYWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-27T17:40:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-27T17:40:41Z"}, "message": "rustdoc: Don't emit redirect pages for variants/fields\n\nIt's just a waste of disk space and it can be done just as well in JS.", "tree": {"sha": "9f86089aa268315fc1b8ce6aae820e465808678b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f86089aa268315fc1b8ce6aae820e465808678b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac", "html_url": "https://github.com/rust-lang/rust/commit/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e7f12dafc2e24c9f072d68ff6c4929a28b5c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e7f12dafc2e24c9f072d68ff6c4929a28b5c8c", "html_url": "https://github.com/rust-lang/rust/commit/10e7f12dafc2e24c9f072d68ff6c4929a28b5c8c"}], "stats": {"total": 101, "additions": 45, "deletions": 56}, "files": [{"sha": "717aeaa1fd346ab9883520016b21ac233f643859", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 11, "deletions": 49, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c5e03bec4d1e7655fc0fd13922fbebb3001f6bac", "patch": "@@ -248,7 +248,9 @@ impl<'self> DocFolder for Cache {\n         match item.name {\n             Some(ref s) => {\n                 let parent = match item.inner {\n-                    clean::TyMethodItem(*) | clean::VariantItem(*) => {\n+                    clean::TyMethodItem(*) |\n+                    clean::StructFieldItem(*) |\n+                    clean::VariantItem(*) => {\n                         Some((Some(*self.parent_stack.last()),\n                               self.stack.slice_to(self.stack.len() - 1)))\n \n@@ -299,7 +301,7 @@ impl<'self> DocFolder for Cache {\n \n         // Maintain the parent stack\n         let parent_pushed = match item.inner {\n-            clean::TraitItem(*) | clean::EnumItem(*) => {\n+            clean::TraitItem(*) | clean::EnumItem(*) | clean::StructItem(*) => {\n                 self.parent_stack.push(item.id); true\n             }\n             clean::ImplItem(ref i) => {\n@@ -510,28 +512,6 @@ impl Context {\n                 let dst = self.dst.push(item_path(&item));\n                 let writer = dst.open_writer(io::CreateOrTruncate);\n                 render(writer.unwrap(), self, &item, true);\n-\n-                // recurse if necessary\n-                let name = item.name.get_ref().clone();\n-                match item.inner {\n-                    clean::EnumItem(e) => {\n-                        let mut it = e.variants.move_iter();\n-                        do self.recurse(name) |this| {\n-                            for item in it {\n-                                f(this, item);\n-                            }\n-                        }\n-                    }\n-                    clean::StructItem(s) => {\n-                        let mut it = s.fields.move_iter();\n-                        do self.recurse(name) |this| {\n-                            for item in it {\n-                                f(this, item);\n-                            }\n-                        }\n-                    }\n-                    _ => {}\n-                }\n             }\n \n             _ => {}\n@@ -613,9 +593,6 @@ impl<'self> fmt::Default for Item<'self> {\n             clean::StructItem(ref s) => item_struct(fmt.buf, it.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt.buf, it.item, e),\n             clean::TypedefItem(ref t) => item_typedef(fmt.buf, it.item, t),\n-            clean::VariantItem(*) => item_variant(fmt.buf, it.cx, it.item),\n-            clean::StructFieldItem(*) => item_struct_field(fmt.buf, it.cx,\n-                                                           it.item),\n             _ => {}\n         }\n     }\n@@ -862,7 +839,8 @@ fn item_trait(w: &mut io::Writer, it: &clean::Item, t: &clean::Trait) {\n     document(w, it);\n \n     fn meth(w: &mut io::Writer, m: &clean::TraitMethod) {\n-        write!(w, \"<h3 id='fn.{}' class='method'><code>\",\n+        write!(w, \"<h3 id='{}.{}' class='method'><code>\",\n+               shortty(m.item()),\n                *m.item().name.get_ref());\n         render_method(w, m.item(), false);\n         write!(w, \"</code></h3>\");\n@@ -923,13 +901,15 @@ fn render_method(w: &mut io::Writer, meth: &clean::Item, withlink: bool) {\n            g: &clean::Generics, selfty: &clean::SelfTy, d: &clean::FnDecl,\n            withlink: bool) {\n         write!(w, \"{}fn {withlink, select,\n-                            true{<a href='\\\\#fn.{name}' class='fnname'>{name}</a>}\n+                            true{<a href='\\\\#{ty}.{name}'\n+                                    class='fnname'>{name}</a>}\n                             other{<span class='fnname'>{name}</span>}\n                         }{generics}{decl}\",\n                match purity {\n                    ast::unsafe_fn => \"unsafe \",\n                    _ => \"\",\n                },\n+               ty = shortty(it),\n                name = it.name.get_ref().as_slice(),\n                generics = *g,\n                decl = Method(selfty, d),\n@@ -1014,7 +994,7 @@ fn render_struct(w: &mut io::Writer, it: &clean::Item,\n             for field in fields.iter() {\n                 match field.inner {\n                     clean::StructFieldItem(ref ty) => {\n-                        write!(w, \"    {}<a name='field.{name}'>{name}</a>: \\\n+                        write!(w, \"    {}<a name='structfield.{name}'>{name}</a>: \\\n                                    {},\\n{}\",\n                                VisSpace(field.visibility),\n                                ty.type_,\n@@ -1089,7 +1069,7 @@ fn render_impl(w: &mut io::Writer, i: &clean::Impl) {\n     write!(w, \"{}</code></h3>\", i.for_);\n     write!(w, \"<div class='methods'>\");\n     for meth in i.methods.iter() {\n-        write!(w, \"<h4 id='fn.{}' class='method'><code>\",\n+        write!(w, \"<h4 id='method.{}' class='method'><code>\",\n                *meth.name.get_ref());\n         render_method(w, meth, false);\n         write!(w, \"</code></h4>\\n\");\n@@ -1196,21 +1176,3 @@ fn build_sidebar(m: &clean::Module) -> HashMap<~str, ~[~str]> {\n     }\n     return map;\n }\n-\n-fn item_variant(w: &mut io::Writer, cx: &Context, it: &clean::Item) {\n-    write!(w, \"<DOCTYPE html><html><head>\\\n-                <meta http-equiv='refresh' content='0; \\\n-                      url=../enum.{}.html\\\\#variant.{}'>\\\n-               </head><body></body></html>\",\n-           *cx.current.last(),\n-           it.name.get_ref().as_slice());\n-}\n-\n-fn item_struct_field(w: &mut io::Writer, cx: &Context, it: &clean::Item) {\n-    write!(w, \"<DOCTYPE html><html><head>\\\n-                <meta http-equiv='refresh' content='0; \\\n-                      url=../struct.{}.html\\\\#field.{}'>\\\n-               </head><body></body></html>\",\n-           *cx.current.last(),\n-           it.name.get_ref().as_slice());\n-}"}, {"sha": "881149b0dd224e2c831810dc3fa405ece3d0199c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c5e03bec4d1e7655fc0fd13922fbebb3001f6bac/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=c5e03bec4d1e7655fc0fd13922fbebb3001f6bac", "patch": "@@ -265,25 +265,52 @@\n                     output += '<tr class=\"' + type + ' result\"><td>';\n \n                     if (type === 'mod') {\n-                        output += item.path + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/' + name + '/index.html\" class=\"' + type + '\">' + name + '</a>';\n+                        output += item.path +\n+                            '::<a href=\"' + rootPath +\n+                                            item.path.replace(/::/g, '/') + '/' +\n+                                            name + '/index.html\" class=\"' +\n+                                            type + '\">' + name + '</a>';\n                     } else if (type === 'static' || type === 'reexport') {\n-                        output += item.path + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/index.html\" class=\"' + type + '\">' + name + '</a>';\n+                        output += item.path +\n+                            '::<a href=\"' + rootPath +\n+                                            item.path.replace(/::/g, '/') +\n+                                            '/index.html\" class=\"' + type +\n+                                            '\">' + name + '</a>';\n                     } else if (item.parent !== undefined) {\n+                        console.log(item);\n                         var myparent = allPaths[item.parent];\n-                        output += item.path + '::' + myparent.name + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/' + myparent.type + '.' + myparent.name + '.html\" class=\"' + type + '\">' + name + '</a>';\n+                        var anchor = '#' + type + '.' + name;\n+                        output += item.path + '::' + myparent.name +\n+                            '::<a href=\"' + rootPath +\n+                                            item.path.replace(/::/g, '/') +\n+                                            '/' + myparent.type +\n+                                            '.' + myparent.name +\n+                                            '.html' + anchor +\n+                                            '\" class=\"' + type +\n+                                            '\">' + name + '</a>';\n                     } else {\n-                        output += item.path + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/' + type + '.' + name + '.html\" class=\"' + type + '\">' + name + '</a>';\n+                        output += item.path +\n+                            '::<a href=\"' + rootPath +\n+                                            item.path.replace(/::/g, '/') +\n+                                            '/' + type +\n+                                            '.' + name +\n+                                            '.html\" class=\"' + type +\n+                                            '\">' + name + '</a>';\n                     }\n \n-                    output += '</td><td><span class=\"desc\">' + item.desc + '</span></td></tr>';\n+                    output += '</td><td><span class=\"desc\">' + item.desc +\n+                                    '</span></td></tr>';\n                 });\n             } else {\n-                output += 'No results :( <a href=\"https://duckduckgo.com/?q=' + encodeURIComponent('rust ' + query.query) + '\">Try on DuckDuckGo?</a>';\n+                output += 'No results :( <a href=\"https://duckduckgo.com/?q=' +\n+                            encodeURIComponent('rust ' + query.query) +\n+                            '\">Try on DuckDuckGo?</a>';\n             }\n \n             output += \"</p>\";\n             $('.content').html(output);\n-            $('.search-results .desc').width($('.content').width() - 40 - $('.content td:first-child').first().width());\n+            $('.search-results .desc').width($('.content').width() - 40 -\n+                    $('.content td:first-child').first().width());\n             initSearchNav();\n         }\n "}]}