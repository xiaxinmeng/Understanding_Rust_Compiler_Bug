{"sha": "e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8", "node_id": "C_kwDOAAsO6NoAKGUxZDdhNzFiY2M0MmMxMGMxYzdhNzcxOTdjMTliZDRmMWFjZmJjZDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T11:21:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T11:21:46Z"}, "message": "Auto merge of #14006 - Veykril:markdown-remove-soft-break, r=Veykril\n\nReplace soft breaks in markdown with spaces\n\ncc https://github.com/rust-lang/rust-analyzer/pull/13988#issuecomment-1399924205", "tree": {"sha": "b38193fdfe2ea7a6a52d37c3cb988763344d43e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b38193fdfe2ea7a6a52d37c3cb988763344d43e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8", "html_url": "https://github.com/rust-lang/rust/commit/e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa0138e4c159d5753e41a447201b6191437276e", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa0138e4c159d5753e41a447201b6191437276e", "html_url": "https://github.com/rust-lang/rust/commit/daa0138e4c159d5753e41a447201b6191437276e"}, {"sha": "84239a14543b5a22a9662bc926c9ae033067c977", "url": "https://api.github.com/repos/rust-lang/rust/commits/84239a14543b5a22a9662bc926c9ae033067c977", "html_url": "https://github.com/rust-lang/rust/commit/84239a14543b5a22a9662bc926c9ae033067c977"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "718868c8747b16f7d90fec97a8a8363a6e140f48", "filename": "crates/ide/src/markdown_remove.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs?ref=e1d7a71bcc42c10c1c7a77197c19bd4f1acfbcd8", "patch": "@@ -11,9 +11,8 @@ pub(crate) fn remove_markdown(markdown: &str) -> String {\n     for event in parser {\n         match event {\n             Event::Text(text) | Event::Code(text) => out.push_str(&text),\n-            Event::SoftBreak | Event::HardBreak | Event::Rule | Event::End(Tag::CodeBlock(_)) => {\n-                out.push('\\n')\n-            }\n+            Event::SoftBreak => out.push(' '),\n+            Event::HardBreak | Event::Rule | Event::End(Tag::CodeBlock(_)) => out.push('\\n'),\n             Event::End(Tag::Paragraph) => {\n                 out.push('\\n');\n                 out.push('\\n');\n@@ -111,13 +110,9 @@ book] or the [Reference].\n         expect![[r#\"\n             A function or function pointer.\n \n-            Functions are the primary way code is executed within Rust. Function blocks, usually just\n-            called functions, can be defined in a variety of different places and be assigned many\n-            different attributes and modifiers.\n+            Functions are the primary way code is executed within Rust. Function blocks, usually just called functions, can be defined in a variety of different places and be assigned many different attributes and modifiers.\n \n-            Standalone functions that just sit within a module not attached to anything else are common,\n-            but most functions will end up being inside impl blocks, either on another type itself, or\n-            as a trait impl for that type.\n+            Standalone functions that just sit within a module not attached to anything else are common, but most functions will end up being inside impl blocks, either on another type itself, or as a trait impl for that type.\n \n             fn standalone_function() {\n                 // code\n@@ -140,9 +135,7 @@ book] or the [Reference].\n                 }\n             }\n \n-            In addition to presenting fixed types in the form of fn name(arg: type, ..) -> return_type,\n-            functions can also declare a list of type parameters along with trait bounds that they fall\n-            into.\n+            In addition to presenting fixed types in the form of fn name(arg: type, ..) -> return_type, functions can also declare a list of type parameters along with trait bounds that they fall into.\n \n             fn generic_function<T: Clone>(x: T) -> (T, T, T) {\n                 (x.clone(), x.clone(), x.clone())\n@@ -154,14 +147,10 @@ book] or the [Reference].\n                 x + x + x\n             }\n \n-            Declaring trait bounds in the angle brackets is functionally identical to using a where\n-            clause. It's up to the programmer to decide which works better in each situation, but where\n-            tends to be better when things get longer than one line.\n+            Declaring trait bounds in the angle brackets is functionally identical to using a where clause. It's up to the programmer to decide which works better in each situation, but where tends to be better when things get longer than one line.\n \n-            Along with being made public via pub, fn can also have an extern added for use in\n-            FFI.\n+            Along with being made public via pub, fn can also have an extern added for use in FFI.\n \n-            For more information on the various types of functions and how they're used, consult the Rust\n-            book or the Reference.\"#]].assert_eq(&res);\n+            For more information on the various types of functions and how they're used, consult the Rust book or the Reference.\"#]].assert_eq(&res);\n     }\n }"}]}