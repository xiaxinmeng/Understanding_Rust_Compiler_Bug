{"sha": "a3be0b105436118e187ea52deb89788afaf1edb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYmUwYjEwNTQzNjExOGUxODdlYTUyZGViODk3ODhhZmFmMWVkYjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-24T13:20:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-24T13:49:40Z"}, "message": "fix classes and parameterized ifaces; remove needless self check\n\nref #1726, #2434", "tree": {"sha": "363e694a48f765e6f0b048a57c0754eb32e44f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363e694a48f765e6f0b048a57c0754eb32e44f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3be0b105436118e187ea52deb89788afaf1edb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3be0b105436118e187ea52deb89788afaf1edb5", "html_url": "https://github.com/rust-lang/rust/commit/a3be0b105436118e187ea52deb89788afaf1edb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3be0b105436118e187ea52deb89788afaf1edb5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd573becf5f4ca10af7b90d41152ada530cb6b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd573becf5f4ca10af7b90d41152ada530cb6b94", "html_url": "https://github.com/rust-lang/rust/commit/bd573becf5f4ca10af7b90d41152ada530cb6b94"}], "stats": {"total": 117, "additions": 39, "deletions": 78}, "files": [{"sha": "82a42700ea13b529c31d94538eaae5430f4e2f2a", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=a3be0b105436118e187ea52deb89788afaf1edb5", "patch": "@@ -192,8 +192,6 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n          bind middle::check_loop::check_crate(ty_cx, crate));\n     time(time_passes, \"alt checking\",\n          bind middle::check_alt::check_crate(ty_cx, crate));\n-    time(time_passes, \"self checking\",\n-         bind middle::check_self::check_crate(ty_cx, crate));\n     time(time_passes, \"typestate checking\",\n          bind middle::tstate::ck::check_crate(ty_cx, crate));\n     let (root_map, mutbl_map) = time("}, {"sha": "b1d2c4b8215d0928fd392b150adb85aaee97860e", "filename": "src/rustc/middle/check_self.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bd573becf5f4ca10af7b90d41152ada530cb6b94/src%2Frustc%2Fmiddle%2Fcheck_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd573becf5f4ca10af7b90d41152ada530cb6b94/src%2Frustc%2Fmiddle%2Fcheck_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_self.rs?ref=bd573becf5f4ca10af7b90d41152ada530cb6b94", "patch": "@@ -1,60 +0,0 @@\n-/*\n-  This module checks that within a class, \"self\" doesn't escape.\n-  That is, it rejects any class in which \"self\" occurs other than\n-  as the left-hand side of a field reference.\n- */\n-import syntax::ast::*;\n-import syntax::visit::*;\n-import driver::session::session;\n-import std::map::hashmap;\n-import resolve::def_map;\n-\n-fn check_crate(cx: ty::ctxt, crate: @crate) {\n-    visit_crate(*crate, cx, mk_vt(@{\n-        visit_item: bind check_item(_, _, _)\n-        with *default_visitor()\n-    }));\n-    cx.sess.abort_if_errors();\n-}\n-\n-fn check_item(it: @item, &&cx: ty::ctxt, &&_v: vt<ty::ctxt>) {\n-    alt it.node {\n-      item_class(*) {\n-          visit_item(it, cx, check_self_visitor());\n-      }\n-      _ {}\n-    }\n-}\n-\n-fn check_self_visitor() -> vt<ty::ctxt> {\n-    mk_vt(@{\n-        visit_expr: bind check_self_expr(_, _, _)\n-                with *default_visitor()\n-    })\n-}\n-\n-fn check_self_expr(e: @expr, &&cx: ty::ctxt, &&v: vt<ty::ctxt>) {\n-   alt e.node {\n-     expr_field(@{node: expr_path(p),_},_,_) {\n-       // self is ok here; don't descend\n-     }\n-     expr_path(_) {\n-       alt cx.def_map.find(e.id) {\n-          some(def_self(_)) {\n-            cx.sess.span_err(e.span, \"can't return self or store \\\n-              it in a data structure\");\n-          }\n-          _ {}\n-       }\n-     }\n-     _ { visit_expr(e, cx, v); }\n-  }\n-}\n-\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:"}, {"sha": "0674a5e79df55616844a5599a0dfcff5bb316bca", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=a3be0b105436118e187ea52deb89788afaf1edb5", "patch": "@@ -359,8 +359,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         // Write the class type\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n-        tcx.tcache.insert(local_def(it.id), {bounds: tpt.bounds,\n-              rp: rp, ty: tpt.ty});\n+        tcx.tcache.insert(local_def(it.id), tpt);\n         // Write the ctor type\n         let t_ctor =\n             ty::mk_fn(\n@@ -416,13 +415,17 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         for ifaces.each { |ifce|\n             check_methods_against_iface(ccx, tps, rp, selfty,\n                                         ifce, methods);\n-            let t = ty::node_id_to_type(tcx, ifce.id);\n \n-            // FIXME: This assumes classes only implement\n-            // non-parameterized ifaces. add a test case for\n-            // a class implementing a parameterized iface.\n-            // -- tjc (#1726)\n-            tcx.tcache.insert(local_def(ifce.id), no_params(t));\n+            // FIXME #2434---this is somewhat bogus, but it seems that\n+            // the id of iface_ref is also the id of the impl, and so\n+            // we want to store the \"self type\" of the impl---in this\n+            // case, the class.  The reason I say this is somewhat\n+            // bogus (and should be refactored) is that the tcache\n+            // stores the class type for ifce.id but the node_type\n+            // table stores the iface type. Weird. Probably just\n+            // adding a \"self type\" table rather than overloading the\n+            // tcache would be ok, or else adding more than one id.\n+            tcx.tcache.insert(local_def(ifce.id), tpt);\n         }\n       }\n       _ {"}, {"sha": "b3956c2ab02d0f9dff21550c862136067d318379", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=a3be0b105436118e187ea52deb89788afaf1edb5", "patch": "@@ -68,7 +68,6 @@ mod middle {\n     mod check_loop;\n     mod check_alt;\n     mod check_const;\n-    mod check_self;\n     mod lint;\n     mod borrowck;\n     mod alias;"}, {"sha": "292a4aa3947ea57159d3cceaca89a275f5a719ec", "filename": "src/test/compile-fail/issue-2294.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd573becf5f4ca10af7b90d41152ada530cb6b94/src%2Ftest%2Fcompile-fail%2Fissue-2294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd573becf5f4ca10af7b90d41152ada530cb6b94/src%2Ftest%2Fcompile-fail%2Fissue-2294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2294.rs?ref=bd573becf5f4ca10af7b90d41152ada530cb6b94", "patch": "@@ -1,6 +0,0 @@\n-class cat {\n-  fn kitty() -> cat { self } //! ERROR: can't return self or store it in a data structure\n-  new() { }\n-}\n-\n-fn main() {}"}, {"sha": "fd0ea20b5fbf0e606285f7c1e445b142379fd2b0", "filename": "src/test/run-pass/class-iface-bounded-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Ftest%2Frun-pass%2Fclass-iface-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Ftest%2Frun-pass%2Fclass-iface-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-iface-bounded-param.rs?ref=a3be0b105436118e187ea52deb89788afaf1edb5", "patch": "@@ -0,0 +1,23 @@\n+use std;\n+import std::map::{map, hashmap, int_hash};\n+\n+class keys<K: copy, V: copy, M: copy map<K,V>>\n+    implements iter::base_iter<K> {\n+\n+    let map: M;\n+\n+    new(map: M) {\n+        self.map = map;\n+    }\n+\n+    fn each(blk: fn(K) -> bool) { self.map.each { |k, _v| blk(k)} }\n+    fn size_hint() -> option<uint> { some(self.map.size()) }\n+    fn eachi(blk: fn(uint, K) -> bool) { iter::eachi(self, blk) }\n+}\n+\n+fn main() {\n+    let m = int_hash();\n+    m.insert(1, 2);\n+    m.insert(3, 4);\n+    assert iter::to_vec(keys(m)) == [1, 3];\n+}"}, {"sha": "e19f06b3b7df62ef7ffcfd76d3d773cb8e5fdcef", "filename": "src/test/run-pass/class-implement-ifaces.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3be0b105436118e187ea52deb89788afaf1edb5/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs?ref=a3be0b105436118e187ea52deb89788afaf1edb5", "patch": "@@ -35,10 +35,14 @@ class cat implements noisy {\n   }\n }\n \n+fn make_speak<C: noisy>(c: C) {\n+    c.speak();\n+}\n+\n fn main() {\n   let nyan = cat(0u, 2, \"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n-  uint::range(1u, 10u, {|_i| nyan.speak(); });\n+  uint::range(1u, 10u, {|_i| make_speak(nyan); });\n   assert(nyan.eat());\n }\n\\ No newline at end of file"}]}