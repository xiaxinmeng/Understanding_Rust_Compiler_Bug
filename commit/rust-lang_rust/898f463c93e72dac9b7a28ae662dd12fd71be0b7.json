{"sha": "898f463c93e72dac9b7a28ae662dd12fd71be0b7", "node_id": "C_kwDOAAsO6NoAKDg5OGY0NjNjOTNlNzJkYWM5YjdhMjhhZTY2MmRkMTJmZDcxYmUwYjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T06:49:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T06:49:38Z"}, "message": "Auto merge of #103672 - matthiaskrgr:rollup-dyk3civ, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103585 (Migrate source line numbers CSS to CSS variables)\n - #103608 (Remap early bound lifetimes in return-position `impl Trait` in traits too)\n - #103609 (Emit a nicer error on `impl Self {`)\n - #103631 (Add test for issue 36007)\n - #103643 (rustdoc: stop hiding focus outlines on non-rustdoc-toggle details tags)\n - #103645 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "35a2b081503a012ef00e7c0bd3ca99c30f6b4ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a2b081503a012ef00e7c0bd3ca99c30f6b4ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898f463c93e72dac9b7a28ae662dd12fd71be0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898f463c93e72dac9b7a28ae662dd12fd71be0b7", "html_url": "https://github.com/rust-lang/rust/commit/898f463c93e72dac9b7a28ae662dd12fd71be0b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898f463c93e72dac9b7a28ae662dd12fd71be0b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd7afeaadf1c48eafb4dff4452439fa5d13a775", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd7afeaadf1c48eafb4dff4452439fa5d13a775", "html_url": "https://github.com/rust-lang/rust/commit/cdd7afeaadf1c48eafb4dff4452439fa5d13a775"}, {"sha": "2f00f57aef198b34d4599fa9903d5b1fd8e34d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f00f57aef198b34d4599fa9903d5b1fd8e34d9a", "html_url": "https://github.com/rust-lang/rust/commit/2f00f57aef198b34d4599fa9903d5b1fd8e34d9a"}], "stats": {"total": 295, "additions": 181, "deletions": 114}, "files": [{"sha": "62f004da0cae34f162975e40f4075064ba89efbc", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -146,3 +146,7 @@ hir_analysis_const_impl_for_non_const_trait =\n \n hir_analysis_const_bound_for_non_const_trait =\n     ~const can only be applied to `#[const_trait]` traits\n+\n+hir_analysis_self_in_impl_self =\n+    `Self` is not valid in the self type of an impl block\n+    .note = replace `Self` with a different type"}, {"sha": "9a9e40a3f43a7212ca78de76773bcb7113ea4583", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -2418,6 +2418,30 @@ impl<'hir> Ty<'hir> {\n         }\n         final_ty\n     }\n+\n+    pub fn find_self_aliases(&self) -> Vec<Span> {\n+        use crate::intravisit::Visitor;\n+        struct MyVisitor(Vec<Span>);\n+        impl<'v> Visitor<'v> for MyVisitor {\n+            fn visit_ty(&mut self, t: &'v Ty<'v>) {\n+                if matches!(\n+                    &t.kind,\n+                    TyKind::Path(QPath::Resolved(\n+                        _,\n+                        Path { res: crate::def::Res::SelfTyAlias { .. }, .. },\n+                    ))\n+                ) {\n+                    self.0.push(t.span);\n+                    return;\n+                }\n+                crate::intravisit::walk_ty(self, t);\n+            }\n+        }\n+\n+        let mut my_visitor = MyVisitor(vec![]);\n+        my_visitor.visit_ty(self);\n+        my_visitor.0\n+    }\n }\n \n /// Not represented directly in the AST; referred to by name through a `ty_path`."}, {"sha": "32f66b06f835859cd34c5c934ae2a9f0c71ad702", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -597,7 +597,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 let num_trait_substs = trait_to_impl_substs.len();\n                 let num_impl_substs = tcx.generics_of(impl_m.container_id(tcx)).params.len();\n                 let ty = tcx.fold_regions(ty, |region, _| {\n-                    let ty::ReFree(_) = region.kind() else { return region; };\n+                    let (ty::ReFree(_) | ty::ReEarlyBound(_)) = region.kind() else { return region; };\n                     let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n                     else {\n                         tcx"}, {"sha": "20903a68d6d935622beaabe532b0b01ea0212a25", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -319,7 +319,15 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     }\n                 }\n                 ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n-                ItemKind::Impl(hir::Impl { self_ty, .. }) => icx.to_ty(*self_ty),\n+                ItemKind::Impl(hir::Impl { self_ty, .. }) => {\n+                    match self_ty.find_self_aliases() {\n+                        spans if spans.len() > 0 => {\n+                            tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: (), });\n+                            tcx.ty_error()\n+                        },\n+                        _ => icx.to_ty(*self_ty),\n+                    }\n+                },\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_fn_def(def_id.to_def_id(), substs)"}, {"sha": "6ed8244d119debd7ad82e5739bf1ab32c0db35e8", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -1,7 +1,7 @@\n //! Errors emitted by `rustc_hir_analysis`.\n \n-use rustc_errors::IntoDiagnostic;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n+use rustc_errors::{IntoDiagnostic, MultiSpan};\n use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -270,3 +270,12 @@ pub struct ConstBoundForNonConstTrait {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_self_in_impl_self)]\n+pub struct SelfInImplSelf {\n+    #[primary_span]\n+    pub span: MultiSpan,\n+    #[note]\n+    pub note: (),\n+}"}, {"sha": "09371dc027b8041cc80bb960ca729a4a0398824f", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -292,10 +292,6 @@ p:last-child {\n \tmargin: 0;\n }\n \n-summary {\n-\toutline: none;\n-}\n-\n /* Fix some style changes due to normalize.css 8 */\n \n button {\n@@ -571,10 +567,18 @@ ul.block, .block li {\n \tpadding: 13px 8px;\n \tborder-top-left-radius: 5px;\n \tborder-bottom-left-radius: 5px;\n+\tborder-color: var(--example-line-numbers-border-color);\n }\n \n .src-line-numbers span {\n \tcursor: pointer;\n+\tcolor: var(--src-line-numbers-span-color);\n+}\n+.src-line-numbers .line-highlighted {\n+\tbackground-color: var(--src-line-number-highlighted-background-color);\n+}\n+.src-line-numbers :target {\n+\tbackground-color: transparent;\n }\n \n .search-loading {\n@@ -1527,6 +1531,8 @@ details.rustdoc-toggle > summary.hideme {\n \n details.rustdoc-toggle > summary {\n \tlist-style: none;\n+\t/* focus outline is shown on `::before` instead of this */\n+\toutline: none;\n }\n details.rustdoc-toggle > summary::-webkit-details-marker,\n details.rustdoc-toggle > summary::marker {"}, {"sha": "fdfdb3e196672560d05b7c55503d2e619e9357a8", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -55,6 +55,9 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--code-highlight-question-mark-color: #ff9011;\n \t--code-highlight-comment-color: #788797;\n \t--code-highlight-doc-comment-color: #a1ac88;\n+\t--example-line-numbers-border-color: none;\n+\t--src-line-numbers-span-color: #5c6773;\n+\t--src-line-number-highlighted-background-color: rgba(255, 236, 164, 0.06);\n }\n \n .slider {\n@@ -112,10 +115,8 @@ pre, .rustdoc.source .example-wrap {\n \tcolor: #ff7733;\n }\n \n-.src-line-numbers span { color: #5c6773; }\n .src-line-numbers .line-highlighted {\n \tcolor: #708090;\n-\tbackground-color: rgba(255, 236, 164, 0.06);\n \tpadding-right: 4px;\n \tborder-right: 1px solid #ffb44c;\n }\n@@ -170,13 +171,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #788797;\n }\n \n-.src-line-numbers :target { background-color: transparent; }\n-\n-pre.example-line-numbers {\n-\tcolor: #5c67736e;\n-\tborder: none;\n-}\n-\n a.test-arrow {\n \tfont-size: 100%;\n \tcolor: #788797;"}, {"sha": "361d3d4a22597f985247b5f6ca56b67b3d242b04", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -50,6 +50,9 @@\n \t--code-highlight-question-mark-color: #ff9011;\n \t--code-highlight-comment-color: #8d8d8b;\n \t--code-highlight-doc-comment-color: #8ca375;\n+\t--example-line-numbers-border-color: #4a4949;\n+\t--src-line-numbers-span-color: #3b91e2;\n+\t--src-line-number-highlighted-background-color: #0a042f;\n }\n \n .slider {\n@@ -69,11 +72,6 @@ input:focus + .slider {\n \t\tdrop-shadow(0 -1px 0 #fff)\n }\n \n-.src-line-numbers span { color: #3B91E2; }\n-.src-line-numbers .line-highlighted {\n-\tbackground-color: #0a042f !important;\n-}\n-\n .content .item-info::before { color: #ccc; }\n \n body.source .example-wrap pre.rust a {\n@@ -95,12 +93,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(69%) sepia(60%) saturate(6613%) hue-rotate(184deg) brightness(100%) contrast(91%);\n }\n \n-.src-line-numbers :target { background-color: transparent; }\n-\n-pre.example-line-numbers {\n-\tborder-color: #4a4949;\n-}\n-\n a.test-arrow {\n \tcolor: #dedede;\n \tbackground-color: rgba(78, 139, 202, 0.2);"}, {"sha": "5eb4bbcf834bbd3dde3f24a70d46fe11295c239b", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -50,6 +50,9 @@\n \t--code-highlight-question-mark-color: #ff9011;\n \t--code-highlight-comment-color: #8e908c;\n \t--code-highlight-doc-comment-color: #4d4d4c;\n+\t--example-line-numbers-border-color: #c7c7c7;\n+\t--src-line-numbers-span-color: #c67e2d;\n+\t--src-line-number-highlighted-background-color: #fdffd3;\n }\n \n .slider {\n@@ -68,11 +71,6 @@ input:focus + .slider {\n \t */\n }\n \n-.src-line-numbers span { color: #c67e2d; }\n-.src-line-numbers .line-highlighted {\n-\tbackground-color: #FDFFD3 !important;\n-}\n-\n .content .item-info::before { color: #ccc; }\n \n body.source .example-wrap pre.rust a {\n@@ -90,12 +88,6 @@ body.source .example-wrap pre.rust a {\n \tfilter: invert(44%) sepia(18%) saturate(23%) hue-rotate(317deg) brightness(96%) contrast(93%);\n }\n \n-.src-line-numbers :target { background-color: transparent; }\n-\n-pre.example-line-numbers {\n-\tborder-color: #c7c7c7;\n-}\n-\n a.test-arrow {\n \tcolor: #f5f5f5;\n \tbackground-color: rgba(78, 139, 202, 0.2);"}, {"sha": "a2dac2aa681d553058bb1c9397afa492d55533f4", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -1,5 +1,6 @@\n // Checks that the interactions with the source code pages are working as expected.\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n+show-text: true\n // Check that we can click on the line number.\n click: \".src-line-numbers > span:nth-child(4)\" // This is the span for line 4.\n // Ensure that the page URL was updated.\n@@ -12,6 +13,48 @@ assert-attribute: (\".src-line-numbers > span:nth-child(4)\", {\"class\": \"line-high\n assert-attribute: (\".src-line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n assert-attribute: (\".src-line-numbers > span:nth-child(6)\", {\"class\": \"line-highlighted\"})\n assert-attribute-false: (\".src-line-numbers > span:nth-child(7)\", {\"class\": \"line-highlighted\"})\n+\n+define-function: (\n+    \"check-colors\",\n+    (theme, color, background_color, highlight_color, highlight_background_color),\n+    [\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\n+            \".src-line-numbers > span:not(.line-highlighted)\",\n+            {\"color\": |color|, \"background-color\": |background_color|},\n+            ALL,\n+        )),\n+        (\"assert-css\", (\n+            \".src-line-numbers > span.line-highlighted\",\n+            {\"color\": |highlight_color|, \"background-color\": |highlight_background_color|},\n+            ALL,\n+        )),\n+    ],\n+)\n+\n+call-function: (\"check-colors\", {\n+    \"theme\": \"ayu\",\n+    \"color\": \"rgb(92, 103, 115)\",\n+    \"background_color\": \"rgba(0, 0, 0, 0)\",\n+    \"highlight_color\": \"rgb(112, 128, 144)\",\n+    \"highlight_background_color\": \"rgba(255, 236, 164, 0.06)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"dark\",\n+    \"color\": \"rgb(59, 145, 226)\",\n+    \"background_color\": \"rgba(0, 0, 0, 0)\",\n+    \"highlight_color\": \"rgb(59, 145, 226)\",\n+    \"highlight_background_color\": \"rgb(10, 4, 47)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"light\",\n+    \"color\": \"rgb(198, 126, 45)\",\n+    \"background_color\": \"rgba(0, 0, 0, 0)\",\n+    \"highlight_color\": \"rgb(198, 126, 45)\",\n+    \"highlight_background_color\": \"rgb(253, 255, 211)\",\n+})\n+\n // This is to ensure that the content is correctly align with the line numbers.\n compare-elements-position: (\"//*[@id='1']\", \".rust > code > span\", (\"y\"))\n \n@@ -20,7 +63,6 @@ assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n \n // Now let's check that clicking on something else than the line number doesn't\n // do anything (and certainly not add a `#NaN` to the URL!).\n-show-text: true\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // We use this assert-position to know where we will click.\n assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 112})"}, {"sha": "78812df870d02eb232d08a8c91a152c67f10d91f", "filename": "src/test/ui/coercion/issue-36007.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fcoercion%2Fissue-36007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fcoercion%2Fissue-36007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fissue-36007.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+#![feature(coerce_unsized, unsize)]\n+\n+use std::marker::Unsize;\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T: ?Sized>(Box<T>);\n+\n+impl<T> CoerceUnsized<Foo<dyn Baz>> for Foo<T> where T: Unsize<dyn Baz> {}\n+\n+struct Bar;\n+\n+trait Baz {}\n+\n+impl Baz for Bar {}\n+\n+fn main() {\n+    let foo = Foo(Box::new(Bar));\n+    let foobar: Foo<Bar> = foo;\n+}"}, {"sha": "9c1c2b503390482606f31d9c3438ef6b044ffa1c", "filename": "src/test/ui/impl-trait/in-trait/early.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fearly.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {\n+    async fn bar<'a: 'a>(&'a mut self);\n+}\n+\n+impl Foo for () {\n+    async fn bar<'a: 'a>(&'a mut self) {}\n+}\n+\n+pub trait Foo2 {\n+    fn bar<'a: 'a>(&'a mut self) -> impl Sized + 'a;\n+}\n+\n+impl Foo2 for () {\n+    fn bar<'a: 'a>(&'a mut self) -> impl Sized + 'a {}\n+}\n+\n+fn main() {}"}, {"sha": "6d7fe7c50a230a80447186611e7a8c0b0d56e904", "filename": "src/test/ui/resolve/issue-23305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -3,6 +3,6 @@ pub trait ToNbt<T> {\n }\n \n impl dyn ToNbt<Self> {}\n-//~^ ERROR cycle detected\n+//~^ ERROR `Self` is not valid in the self type of an impl block\n \n fn main() {}"}, {"sha": "aad1b583a3244c8d86dbd97fdd584c987a8cf742", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -1,22 +1,10 @@\n-error[E0391]: cycle detected when computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:21>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/issue-23305.rs:5:16\n    |\n LL | impl dyn ToNbt<Self> {}\n    |                ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:21>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/issue-23305.rs:1:1\n-   |\n-LL | / pub trait ToNbt<T> {\n-LL | |     fn new(val: T) -> Self;\n-LL | | }\n-LL | |\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "d0872d1b76f20e762a1bc5748d80357a2f9771e6", "filename": "src/test/ui/resolve/resolve-self-in-impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -11,10 +11,11 @@ impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK\n \n-impl Tr for Self {} //~ ERROR cycle detected\n-impl Tr for S<Self> {} //~ ERROR cycle detected\n-impl Self {} //~ ERROR cycle detected\n-impl S<Self> {} //~ ERROR cycle detected\n+impl Tr for Self {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl Tr for S<Self> {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl Self {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl S<Self> {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl (Self, Self) {} //~ ERROR `Self` is not valid in the self type of an impl block\n impl Tr<Self::A> for S {} //~ ERROR cycle detected\n \n fn main() {}"}, {"sha": "9f9ed68898f6c37401472a15ad3ca3bd34534955", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 19, "deletions": 55, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898f463c93e72dac9b7a28ae662dd12fd71be0b7/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -1,86 +1,50 @@\n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:17>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n LL | impl Tr for Self {}\n    |             ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:17>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:20>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:15:15\n    |\n LL | impl Tr for S<Self> {}\n    |               ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:20>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:10>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n LL | impl Self {}\n    |      ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:10>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:13>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:17:8\n    |\n LL | impl S<Self> {}\n    |        ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:13>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n+   = note: replace `Self` with a different type\n+\n+error: `Self` is not valid in the self type of an impl block\n+  --> $DIR/resolve-self-in-impl.rs:18:7\n    |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+LL | impl (Self, Self) {}\n+   |       ^^^^  ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>`\n-  --> $DIR/resolve-self-in-impl.rs:18:1\n+error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:19:1: 19:23>`\n+  --> $DIR/resolve-self-in-impl.rs:19:1\n    |\n LL | impl Tr<Self::A> for S {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>` again\n+   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:19:1: 19:23>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -93,6 +57,6 @@ LL | |\n LL | | fn main() {}\n    | |____________^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "7e484fc1a766f56dbc95380f45719698e0c82749", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=898f463c93e72dac9b7a28ae662dd12fd71be0b7", "patch": "@@ -1 +1 @@\n-Subproject commit 9210810d1fd7b51ae0439a0a363cc50e36963455\n+Subproject commit 7e484fc1a766f56dbc95380f45719698e0c82749"}]}