{"sha": "7d3c5f020e66d01686adf98881b957be9d939021", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkM2M1ZjAyMGU2NmQwMTY4NmFkZjk4ODgxYjk1N2JlOWQ5MzkwMjE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T03:56:24Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T21:29:22Z"}, "message": "use assoc types in unop traits", "tree": {"sha": "9a1081f116f21c19048bcdbbf691871e370d081f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1081f116f21c19048bcdbbf691871e370d081f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3c5f020e66d01686adf98881b957be9d939021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3c5f020e66d01686adf98881b957be9d939021", "html_url": "https://github.com/rust-lang/rust/commit/7d3c5f020e66d01686adf98881b957be9d939021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3c5f020e66d01686adf98881b957be9d939021/comments", "author": null, "committer": null, "parents": [{"sha": "99017f82b6e41ed283199b88ddfc0990bb95d696", "url": "https://api.github.com/repos/rust-lang/rust/commits/99017f82b6e41ed283199b88ddfc0990bb95d696", "html_url": "https://github.com/rust-lang/rust/commit/99017f82b6e41ed283199b88ddfc0990bb95d696"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "254788f9a75f193b83ba19d964a721eef28f4126", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7d3c5f020e66d01686adf98881b957be9d939021", "patch": "@@ -58,7 +58,7 @@ pub trait Int\n     + Mul<Output=Self>\n     + Div<Output=Self>\n     + Rem<Output=Self>\n-    + Not<Self>\n+    + Not<Output=Self>\n     + BitAnd<Output=Self>\n     + BitOr<Output=Self>\n     + BitXor<Output=Self>\n@@ -613,7 +613,7 @@ int_impl! { int = i64, u64, 64,\n #[unstable = \"recently settled as part of numerics reform\"]\n pub trait SignedInt\n     : Int\n-    + Neg<Self>\n+    + Neg<Output=Self>\n {\n     /// Computes the absolute value of `self`. `Int::min_value()` will be\n     /// returned if the number is `Int::min_value()`.\n@@ -1245,7 +1245,7 @@ pub trait Float\n     + NumCast\n     + PartialOrd\n     + PartialEq\n-    + Neg<Self>\n+    + Neg<Output=Self>\n     + Add<Output=Self>\n     + Sub<Output=Self>\n     + Mul<Output=Self>\n@@ -1718,7 +1718,7 @@ macro_rules! trait_impl {\n #[deprecated = \"Generalised numbers are no longer supported\"]\n #[allow(deprecated)]\n pub trait Num: PartialEq + Zero + One\n-             + Neg<Self>\n+             + Neg<Output=Self>\n              + Add<Output=Self>\n              + Sub<Output=Self>\n              + Mul<Output=Self>"}, {"sha": "642376f1d8e94ca1b3cb034dd7276b304e413598", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=7d3c5f020e66d01686adf98881b957be9d939021", "patch": "@@ -360,13 +360,17 @@ rem_float_impl! { f64, fmod }\n /// `neg`, and therefore, `main` prints `Negating!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Neg;\n ///\n /// struct Foo;\n ///\n /// impl Copy for Foo {}\n ///\n-/// impl Neg<Foo> for Foo {\n+/// impl Neg for Foo {\n+///     type Output = Foo;\n+///\n ///     fn neg(self) -> Foo {\n ///         println!(\"Negating!\");\n ///         self\n@@ -378,14 +382,18 @@ rem_float_impl! { f64, fmod }\n /// }\n /// ```\n #[lang=\"neg\"]\n-pub trait Neg<Result> {\n+pub trait Neg {\n+    type Output;\n+\n     /// The method for the unary `-` operator\n-    fn neg(self) -> Result;\n+    fn neg(self) -> Self::Output;\n }\n \n macro_rules! neg_impl {\n     ($($t:ty)*) => ($(\n-        impl Neg<$t> for $t {\n+        impl Neg for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn neg(self) -> $t { -self }\n         }\n@@ -394,7 +402,9 @@ macro_rules! neg_impl {\n \n macro_rules! neg_uint_impl {\n     ($t:ty, $t_signed:ty) => {\n-        impl Neg<$t> for $t {\n+        impl Neg for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn neg(self) -> $t { -(self as $t_signed) as $t }\n         }\n@@ -418,13 +428,17 @@ neg_uint_impl! { u64, i64 }\n /// `not`, and therefore, `main` prints `Not-ing!`.\n ///\n /// ```\n+/// #![feature(associated_types)]\n+///\n /// use std::ops::Not;\n ///\n /// struct Foo;\n ///\n /// impl Copy for Foo {}\n ///\n-/// impl Not<Foo> for Foo {\n+/// impl Not for Foo {\n+///     type Output = Foo;\n+///\n ///     fn not(self) -> Foo {\n ///         println!(\"Not-ing!\");\n ///         self\n@@ -436,14 +450,18 @@ neg_uint_impl! { u64, i64 }\n /// }\n /// ```\n #[lang=\"not\"]\n-pub trait Not<Result> {\n+pub trait Not {\n+    type Output;\n+\n     /// The method for the unary `!` operator\n-    fn not(self) -> Result;\n+    fn not(self) -> Self::Output;\n }\n \n macro_rules! not_impl {\n     ($($t:ty)*) => ($(\n-        impl Not<$t> for $t {\n+        impl Not for $t {\n+            type Output = $t;\n+\n             #[inline]\n             fn not(self) -> $t { !self }\n         }"}, {"sha": "16bc6b16598e046c90949dcfde7e6b5d5692a943", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=7d3c5f020e66d01686adf98881b957be9d939021", "patch": "@@ -249,7 +249,9 @@ macro_rules! bitflags {\n             }\n         }\n \n-        impl ::std::ops::Not<$BitFlags> for $BitFlags {\n+        impl ::std::ops::Not for $BitFlags {\n+            type Output = $BitFlags;\n+\n             /// Returns the complement of this set of flags.\n             #[inline]\n             fn not(self) -> $BitFlags {"}, {"sha": "41a130492c0470601970d74e7c86d8d20016bcc5", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c5f020e66d01686adf98881b957be9d939021/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=7d3c5f020e66d01686adf98881b957be9d939021", "patch": "@@ -262,7 +262,9 @@ impl Duration {\n     }\n }\n \n-impl Neg<Duration> for Duration {\n+impl Neg for Duration {\n+    type Output = Duration;\n+\n     #[inline]\n     fn neg(self) -> Duration {\n         if self.nanos == 0 {"}, {"sha": "f8cbdb4e160bf4cc18cfa7fc3eddd1a3f0b4dce2", "filename": "src/test/compile-fail/unop-move-semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c5f020e66d01686adf98881b957be9d939021/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c5f020e66d01686adf98881b957be9d939021/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs?ref=7d3c5f020e66d01686adf98881b957be9d939021", "patch": "@@ -12,13 +12,13 @@\n \n use std::ops::Not;\n \n-fn move_then_borrow<T: Not<T> + Clone>(x: T) {\n+fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n     !x;\n \n     x.clone();  //~ ERROR: use of moved value\n }\n \n-fn move_borrowed<T: Not<T>>(x: T, mut y: T) {\n+fn move_borrowed<T: Not<Output=T>>(x: T, mut y: T) {\n     let m = &x;\n     let n = &mut y;\n \n@@ -27,7 +27,7 @@ fn move_borrowed<T: Not<T>>(x: T, mut y: T) {\n     !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n }\n \n-fn illegal_dereference<T: Not<T>>(mut x: T, y: T) {\n+fn illegal_dereference<T: Not<Output=T>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n "}, {"sha": "58c433e570e76fff9361ad409ef3dfeacc648839", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d3c5f020e66d01686adf98881b957be9d939021/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3c5f020e66d01686adf98881b957be9d939021/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=7d3c5f020e66d01686adf98881b957be9d939021", "patch": "@@ -35,13 +35,17 @@ impl ops::Sub for Point {\n     }\n }\n \n-impl ops::Neg<Point> for Point {\n+impl ops::Neg for Point {\n+    type Output = Point;\n+\n     fn neg(self) -> Point {\n         Point {x: -self.x, y: -self.y}\n     }\n }\n \n-impl ops::Not<Point> for Point {\n+impl ops::Not for Point {\n+    type Output = Point;\n+\n     fn not(self) -> Point {\n         Point {x: !self.x, y: !self.y }\n     }"}]}