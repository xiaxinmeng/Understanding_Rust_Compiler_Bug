{"sha": "a102dc806da3bc9c59b3594368a14e7d2632bf9c", "node_id": "C_kwDOAAsO6NoAKGExMDJkYzgwNmRhM2JjOWM1OWIzNTk0MzY4YTE0ZTdkMjYzMmJmOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T23:03:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T23:03:20Z"}, "message": "Auto merge of #104655 - matthiaskrgr:rollup-r5kfffy, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #101310 (Clarify and restrict when `{Arc,Rc}::get_unchecked_mut` is allowed.)\n - #104461 (Fix building of `aarch64-pc-windows-gnullvm`)\n - #104487 (update ntapi dep to remove future-incompat warning)\n - #104504 (Add a detailed note for missing comma typo w/ FRU syntax)\n - #104581 (rustdoc: remove unused JS IIFE from main.js)\n - #104632 (avoid non-strict-provenance casts in libcore tests)\n - #104634 (move core::arch into separate file)\n - #104641 (replace unusual grammar)\n - #104643 (add examples to chunks remainder methods. )\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "81e596d41b4f9c2bcec911abb5bf29f5ec0abf2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e596d41b4f9c2bcec911abb5bf29f5ec0abf2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a102dc806da3bc9c59b3594368a14e7d2632bf9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a102dc806da3bc9c59b3594368a14e7d2632bf9c", "html_url": "https://github.com/rust-lang/rust/commit/a102dc806da3bc9c59b3594368a14e7d2632bf9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a102dc806da3bc9c59b3594368a14e7d2632bf9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28f3c88e50a77bc2a91889241248c4543854e61", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28f3c88e50a77bc2a91889241248c4543854e61", "html_url": "https://github.com/rust-lang/rust/commit/a28f3c88e50a77bc2a91889241248c4543854e61"}, {"sha": "846574828a60eac8974011d60addd981634733a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/846574828a60eac8974011d60addd981634733a1", "html_url": "https://github.com/rust-lang/rust/commit/846574828a60eac8974011d60addd981634733a1"}], "stats": {"total": 398, "additions": 310, "deletions": 88}, "files": [{"sha": "2ce417a8c786459253dee5078b1e3c11e573b04a", "filename": "compiler/rustc_error_messages/locales/en-US/hir_typeck.ftl", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -0,0 +1,8 @@\n+hir_typeck_fru_note = this expression may have been misinterpreted as a `..` range expression\n+hir_typeck_fru_expr = this expression does not end in a comma...\n+hir_typeck_fru_expr2 = ... so this is interpreted as a `..` range expression, instead of functional record update syntax\n+hir_typeck_fru_suggestion =\n+    to set the remaining fields{$expr ->\n+        [NONE]{\"\"}\n+        *[other] {\" \"}from `{$expr}`\n+    }, separate the last named field with a comma"}, {"sha": "1b35021db3d4bd673005f6cd539050f9e8cb7fc0", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -51,6 +51,7 @@ fluent_messages! {\n     errors => \"../locales/en-US/errors.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n     hir_analysis => \"../locales/en-US/hir_analysis.ftl\",\n+    hir_typeck => \"../locales/en-US/hir_typeck.ftl\",\n     infer => \"../locales/en-US/infer.ftl\",\n     interface => \"../locales/en-US/interface.ftl\",\n     lint => \"../locales/en-US/lint.ftl\","}, {"sha": "f8747386c0498d3916ddbc65be287b46d799951a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -467,6 +467,9 @@ pub enum StashKey {\n     /// When an invalid lifetime e.g. `'2` should be reinterpreted\n     /// as a char literal in the parser\n     LifetimeIsChar,\n+    /// Maybe there was a typo where a comma was forgotten before\n+    /// FRU syntax\n+    MaybeFruTypo,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "32265bcca45349ee4e6bbede9e058b4e543c3e80", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -1,4 +1,5 @@\n //! Errors emitted by `rustc_hir_analysis`.\n+use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span};\n@@ -133,3 +134,41 @@ pub struct OpMethodGenericParams {\n     pub span: Span,\n     pub method_name: String,\n }\n+\n+pub struct TypeMismatchFruTypo {\n+    /// Span of the LHS of the range\n+    pub expr_span: Span,\n+    /// Span of the `..RHS` part of the range\n+    pub fru_span: Span,\n+    /// Rendered expression of the RHS of the range\n+    pub expr: Option<String>,\n+}\n+\n+impl AddToDiagnostic for TypeMismatchFruTypo {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n+        diag.set_arg(\"expr\", self.expr.as_deref().unwrap_or(\"NONE\"));\n+\n+        // Only explain that `a ..b` is a range if it's split up\n+        if self.expr_span.between(self.fru_span).is_empty() {\n+            diag.span_note(\n+                self.expr_span.to(self.fru_span),\n+                rustc_errors::fluent::hir_typeck_fru_note,\n+            );\n+        } else {\n+            let mut multispan: MultiSpan = vec![self.expr_span, self.fru_span].into();\n+            multispan.push_span_label(self.expr_span, rustc_errors::fluent::hir_typeck_fru_expr);\n+            multispan.push_span_label(self.fru_span, rustc_errors::fluent::hir_typeck_fru_expr2);\n+            diag.span_note(multispan, rustc_errors::fluent::hir_typeck_fru_note);\n+        }\n+\n+        diag.span_suggestion(\n+            self.expr_span.shrink_to_hi(),\n+            rustc_errors::fluent::hir_typeck_fru_suggestion,\n+            \", \",\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "2764de751b08bc3fd52211d37500ddfa27bd58d8", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -5,6 +5,7 @@\n use crate::cast;\n use crate::coercion::CoerceMany;\n use crate::coercion::DynamicCoerceMany;\n+use crate::errors::TypeMismatchFruTypo;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use crate::errors::{\n     FieldMultiplySpecifiedInInitializer, FunctionalRecordUpdateOnNonStruct,\n@@ -1616,10 +1617,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.demand_coerce_diag(&field.expr, ty, field_type, None, AllowTwoPhase::No);\n \n             if let Some(mut diag) = diag {\n-                if idx == ast_fields.len() - 1 && remaining_fields.is_empty() {\n-                    self.suggest_fru_from_range(field, variant, substs, &mut diag);\n+                if idx == ast_fields.len() - 1 {\n+                    if remaining_fields.is_empty() {\n+                        self.suggest_fru_from_range(field, variant, substs, &mut diag);\n+                        diag.emit();\n+                    } else {\n+                        diag.stash(field.span, StashKey::MaybeFruTypo);\n+                    }\n+                } else {\n+                    diag.emit();\n                 }\n-                diag.emit();\n             }\n         }\n \n@@ -1877,19 +1884,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .map(|adt| adt.did())\n                 != range_def_id\n         {\n-            let instead = self\n+            // Suppress any range expr type mismatches\n+            if let Some(mut diag) = self\n+                .tcx\n+                .sess\n+                .diagnostic()\n+                .steal_diagnostic(last_expr_field.span, StashKey::MaybeFruTypo)\n+            {\n+                diag.delay_as_bug();\n+            }\n+\n+            // Use a (somewhat arbitrary) filtering heuristic to avoid printing\n+            // expressions that are either too long, or have control character\n+            //such as newlines in them.\n+            let expr = self\n                 .tcx\n                 .sess\n                 .source_map()\n                 .span_to_snippet(range_end.expr.span)\n-                .map(|s| format!(\" from `{s}`\"))\n-                .unwrap_or_default();\n-            err.span_suggestion(\n-                range_start.span.shrink_to_hi(),\n-                &format!(\"to set the remaining fields{instead}, separate the last named field with a comma\"),\n-                \",\",\n-                Applicability::MaybeIncorrect,\n-            );\n+                .ok()\n+                .filter(|s| s.len() < 25 && !s.contains(|c: char| c.is_control()));\n+\n+            let fru_span = self\n+                .tcx\n+                .sess\n+                .source_map()\n+                .span_extend_while(range_start.span, |c| c.is_whitespace())\n+                .unwrap_or(range_start.span).shrink_to_hi().to(range_end.span);\n+\n+            err.subdiagnostic(TypeMismatchFruTypo {\n+                expr_span: range_start.span,\n+                fru_span,\n+                expr,\n+            });\n         }\n     }\n "}, {"sha": "1d9c4460ec92a9537f9b7cf8c86a634cc7829474", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -46,8 +46,8 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// is done is *very* inefficient for modern computer architectures. In particular, every element\n /// is stored in its own individually heap-allocated node. This means that every single insertion\n /// triggers a heap-allocation, and every single comparison should be a cache-miss. Since these\n-/// are both notably expensive things to do in practice, we are forced to at very least reconsider\n-/// the BST strategy.\n+/// are both notably expensive things to do in practice, we are forced to, at the very least,\n+/// reconsider the BST strategy.\n ///\n /// A B-Tree instead makes each node contain B-1 to 2B-1 elements in a contiguous array. By doing\n /// this, we reduce the number of allocations by a factor of B, and improve cache efficiency in"}, {"sha": "38e31b1802a42f0ee0dcf2f10cb725ba3693e624", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -1091,10 +1091,11 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// # Safety\n     ///\n-    /// Any other `Rc` or [`Weak`] pointers to the same allocation must not be dereferenced\n-    /// for the duration of the returned borrow.\n-    /// This is trivially the case if no such pointers exist,\n-    /// for example immediately after `Rc::new`.\n+    /// If any other `Rc` or [`Weak`] pointers to the same allocation exist, then\n+    /// they must be must not be dereferenced or have active borrows for the duration\n+    /// of the returned borrow, and their inner type must be exactly the same as the\n+    /// inner type of this Rc (including lifetimes). This is trivially the case if no\n+    /// such pointers exist, for example immediately after `Rc::new`.\n     ///\n     /// # Examples\n     ///\n@@ -1109,6 +1110,38 @@ impl<T: ?Sized> Rc<T> {\n     /// }\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n+    /// Other `Rc` pointers to the same allocation must be to the same type.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<str> = Rc::from(\"Hello, world!\");\n+    /// let mut y: Rc<[u8]> = x.clone().into();\n+    /// unsafe {\n+    ///     // this is Undefined Behavior, because x's inner type is str, not [u8]\n+    ///     Rc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n+    /// }\n+    /// println!(\"{}\", &*x); // Invalid UTF-8 in a str\n+    /// ```\n+    /// Other `Rc` pointers to the same allocation must be to the exact same type, including lifetimes.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<&str> = Rc::new(\"Hello, world!\");\n+    /// {\n+    ///     let s = String::from(\"Oh, no!\");\n+    ///     let mut y: Rc<&str> = x.clone().into();\n+    ///     unsafe {\n+    ///         // this is Undefined Behavior, because x's inner type\n+    ///         // is &'long str, not &'short str\n+    ///         *Rc::get_mut_unchecked(&mut y) = &s;\n+    ///     }\n+    /// }\n+    /// println!(\"{}\", &*x); // Use-after-free\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {"}, {"sha": "f7dc4d1094ca3f8b1a0d160435ba6aa2653fa828", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -1587,10 +1587,11 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// # Safety\n     ///\n-    /// Any other `Arc` or [`Weak`] pointers to the same allocation must not be dereferenced\n-    /// for the duration of the returned borrow.\n-    /// This is trivially the case if no such pointers exist,\n-    /// for example immediately after `Arc::new`.\n+    /// If any other `Arc` or [`Weak`] pointers to the same allocation exist, then\n+    /// they must be must not be dereferenced or have active borrows for the duration\n+    /// of the returned borrow, and their inner type must be exactly the same as the\n+    /// inner type of this Rc (including lifetimes). This is trivially the case if no\n+    /// such pointers exist, for example immediately after `Arc::new`.\n     ///\n     /// # Examples\n     ///\n@@ -1605,6 +1606,38 @@ impl<T: ?Sized> Arc<T> {\n     /// }\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n+    /// Other `Arc` pointers to the same allocation must be to the same type.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<str> = Arc::from(\"Hello, world!\");\n+    /// let mut y: Arc<[u8]> = x.clone().into();\n+    /// unsafe {\n+    ///     // this is Undefined Behavior, because x's inner type is str, not [u8]\n+    ///     Arc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n+    /// }\n+    /// println!(\"{}\", &*x); // Invalid UTF-8 in a str\n+    /// ```\n+    /// Other `Arc` pointers to the same allocation must be to the exact same type, including lifetimes.\n+    /// ```no_run\n+    /// #![feature(get_mut_unchecked)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<&str> = Arc::new(\"Hello, world!\");\n+    /// {\n+    ///     let s = String::from(\"Oh, no!\");\n+    ///     let mut y: Arc<&str> = x.clone().into();\n+    ///     unsafe {\n+    ///         // this is Undefined Behavior, because x's inner type\n+    ///         // is &'long str, not &'short str\n+    ///         *Arc::get_mut_unchecked(&mut y) = &s;\n+    ///     }\n+    /// }\n+    /// println!(\"{}\", &*x); // Use-after-free\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {"}, {"sha": "fc2a5b89c149814c22661e6c5537b221f16edfa9", "filename": "library/core/src/arch.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farch.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -0,0 +1,30 @@\n+#![doc = include_str!(\"../../stdarch/crates/core_arch/src/core_arch_docs.md\")]\n+\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+pub use crate::core_arch::arch::*;\n+\n+/// Inline assembly.\n+///\n+/// Refer to [rust by example] for a usage guide and the [reference] for\n+/// detailed information about the syntax and available options.\n+///\n+/// [rust by example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html\n+/// [reference]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html\n+#[stable(feature = \"asm\", since = \"1.59.0\")]\n+#[rustc_builtin_macro]\n+pub macro asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n+    /* compiler built-in */\n+}\n+\n+/// Module-level inline assembly.\n+///\n+/// Refer to [rust by example] for a usage guide and the [reference] for\n+/// detailed information about the syntax and available options.\n+///\n+/// [rust by example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html\n+/// [reference]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html\n+#[stable(feature = \"global_asm\", since = \"1.59.0\")]\n+#[rustc_builtin_macro]\n+pub macro global_asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n+    /* compiler built-in */\n+}"}, {"sha": "e7ea558a9553447c6380e9715950c832b161fe43", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -89,6 +89,7 @@\n // Lints:\n #![deny(rust_2021_incompatible_or_patterns)]\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(fuzzy_provenance_casts)]\n #![warn(deprecated_in_future)]\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]\n@@ -162,6 +163,7 @@\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]\n #![feature(str_internals)]\n+#![feature(strict_provenance)]\n #![feature(utf16_extra)]\n #![feature(utf16_extra_const)]\n #![feature(variant_count)]\n@@ -392,38 +394,8 @@ pub mod primitive;\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n mod core_arch;\n \n-#[doc = include_str!(\"../../stdarch/crates/core_arch/src/core_arch_docs.md\")]\n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-pub mod arch {\n-    #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-    pub use crate::core_arch::arch::*;\n-\n-    /// Inline assembly.\n-    ///\n-    /// Refer to [rust by example] for a usage guide and the [reference] for\n-    /// detailed information about the syntax and available options.\n-    ///\n-    /// [rust by example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html\n-    /// [reference]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html\n-    #[stable(feature = \"asm\", since = \"1.59.0\")]\n-    #[rustc_builtin_macro]\n-    pub macro asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n-        /* compiler built-in */\n-    }\n-\n-    /// Module-level inline assembly.\n-    ///\n-    /// Refer to [rust by example] for a usage guide and the [reference] for\n-    /// detailed information about the syntax and available options.\n-    ///\n-    /// [rust by example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html\n-    /// [reference]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html\n-    #[stable(feature = \"global_asm\", since = \"1.59.0\")]\n-    #[rustc_builtin_macro]\n-    pub macro global_asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n-        /* compiler built-in */\n-    }\n-}\n+pub mod arch;\n \n // Pull in the `core_simd` crate directly into libcore. The contents of\n // `core_simd` are in a different repository: rust-lang/portable-simd."}, {"sha": "af64fbc8e9eca1539bc9285cd02b0a29e139b171", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -140,6 +140,7 @@ impl<T: ?Sized> *const T {\n     /// assert_eq!(<*const u8>::from_bits(1), dangling);\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    #[allow(fuzzy_provenance_casts)] // this is an unstable and semi-deprecated cast function\n     pub fn from_bits(bits: usize) -> Self\n     where\n         T: Sized,"}, {"sha": "89b11637ecabefc0405209cfe16c11b6accc1912", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -616,6 +616,7 @@ pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n #[inline]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n+#[allow(fuzzy_provenance_casts)] // this *is* the strict provenance API one should use instead\n pub fn from_exposed_addr<T>(addr: usize) -> *const T\n where\n     T: Sized,\n@@ -653,6 +654,7 @@ where\n #[inline]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n+#[allow(fuzzy_provenance_casts)] // this *is* the strict provenance API one should use instead\n pub fn from_exposed_addr_mut<T>(addr: usize) -> *mut T\n where\n     T: Sized,"}, {"sha": "d6872ba1c20f0f81f1ea7f51bcfb0c18a6d2235d", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -146,6 +146,7 @@ impl<T: ?Sized> *mut T {\n     /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    #[allow(fuzzy_provenance_casts)] // this is an unstable and semi-deprecated cast function\n     pub fn from_bits(bits: usize) -> Self\n     where\n         T: Sized,"}, {"sha": "06228976719f52f8e25c59010c4fab554b7ae4f5", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -1834,6 +1834,20 @@ impl<'a, T> ChunksExact<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let mut iter = slice.chunks_exact(2);\n+    /// assert_eq!(iter.remainder(), &['m'][..]);\n+    /// assert_eq!(iter.next(), Some(&['l', 'o'][..]));\n+    /// assert_eq!(iter.remainder(), &['m'][..]);\n+    /// assert_eq!(iter.next(), Some(&['r', 'e'][..]));\n+    /// assert_eq!(iter.remainder(), &['m'][..]);\n+    /// assert_eq!(iter.next(), None);\n+    /// assert_eq!(iter.remainder(), &['m'][..]);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n@@ -2869,7 +2883,7 @@ unsafe impl<T> Sync for RChunksMut<'_, T> where T: Sync {}\n /// ```\n ///\n /// [`rchunks_exact`]: slice::rchunks_exact\n-/// [`remainder`]: ChunksExact::remainder\n+/// [`remainder`]: RChunksExact::remainder\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -2892,6 +2906,20 @@ impl<'a, T> RChunksExact<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let mut iter = slice.rchunks_exact(2);\n+    /// assert_eq!(iter.remainder(), &['l'][..]);\n+    /// assert_eq!(iter.next(), Some(&['e', 'm'][..]));\n+    /// assert_eq!(iter.remainder(), &['l'][..]);\n+    /// assert_eq!(iter.next(), Some(&['o', 'r'][..]));\n+    /// assert_eq!(iter.remainder(), &['l'][..]);\n+    /// assert_eq!(iter.next(), None);\n+    /// assert_eq!(iter.remainder(), &['l'][..]);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n@@ -3031,7 +3059,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksExact<'a, T> {\n /// ```\n ///\n /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n-/// [`into_remainder`]: ChunksExactMut::into_remainder\n+/// [`into_remainder`]: RChunksExactMut::into_remainder\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "68f7dcdd5d6aa960eee2adecaa022e65bdb6ec7c", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -109,6 +109,7 @@\n #![feature(utf8_chunks)]\n #![feature(is_ascii_octdigit)]\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(fuzzy_provenance_casts)]\n \n extern crate test;\n "}, {"sha": "90bc83510803f2185d4f8a3ec83e19343cc5eda8", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -677,7 +677,7 @@ fn align_offset_issue_103361() {\n     #[cfg(target_pointer_width = \"16\")]\n     const SIZE: usize = 1 << 13;\n     struct HugeSize([u8; SIZE - 1]);\n-    let _ = (SIZE as *const HugeSize).align_offset(SIZE);\n+    let _ = ptr::invalid::<HugeSize>(SIZE).align_offset(SIZE);\n }\n \n #[test]"}, {"sha": "a218910f0ec4d0d40e09b7cd05a0b2f0f1121f51", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -275,7 +275,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n } // cfg_if!\n \n cfg_if::cfg_if! {\n-if #[cfg(all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))] {\n+if #[cfg(all(windows, any(target_arch = \"aarch64\", target_arch = \"x86_64\"), target_env = \"gnu\"))] {\n     // We declare these as opaque types. This is fine since you just need to\n     // pass them to _GCC_specific_handler and forget about them.\n     pub enum EXCEPTION_RECORD {}"}, {"sha": "a59dc4f87a68ebbf009f5bab47ff2aa1d5f04e52", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -383,9 +383,9 @@ dependencies = [\n \n [[package]]\n name = \"ntapi\"\n-version = \"0.3.7\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c28774a7fd2fbb4f0babd8237ce554b73af68021b5f695a3cebd6c59bac0980f\"\n+checksum = \"bc51db7b362b205941f71232e56c625156eb9a929f8cf74a428fd5bc094a4afc\"\n dependencies = [\n  \"winapi\",\n ]\n@@ -607,9 +607,9 @@ dependencies = [\n \n [[package]]\n name = \"sysinfo\"\n-version = \"0.24.2\"\n+version = \"0.26.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9a2809487b962344ca55d9aea565f9ffbcb6929780802217acc82561f6746770\"\n+checksum = \"c375d5fd899e32847b8566e10598d6e9f1d9b55ec6de3cdf9e7da4bdc51371bc\"\n dependencies = [\n  \"cfg-if\",\n  \"core-foundation-sys\","}, {"sha": "813c8075605993ec5cfa2ee537833c1ebc3918d6", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -54,7 +54,7 @@ xz2 = \"0.1\"\n walkdir = \"2\"\n \n # Dependencies needed by the build-metrics feature\n-sysinfo = { version = \"0.24.1\", optional = true }\n+sysinfo = { version = \"0.26.0\", optional = true }\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\""}, {"sha": "c823dc7968465e84a0553676654ebbbfcd153d50", "filename": "src/bootstrap/metrics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -97,7 +97,7 @@ impl BuildMetrics {\n             cpu_threads_count: system.cpus().len(),\n             cpu_model: system.cpus()[0].brand().into(),\n \n-            memory_total_bytes: system.total_memory() * 1024,\n+            memory_total_bytes: system.total_memory(),\n         };\n         let steps = std::mem::take(&mut state.finished_steps);\n "}, {"sha": "2a109ffbc608d3184a18a6ac1a51c3220e769147", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -723,12 +723,9 @@ function loadCss(cssUrl) {\n         });\n     };\n \n-    (function() {\n-        // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n-        if (getSettingValue(\"line-numbers\") === \"true\") {\n-            window.rustdoc_add_line_numbers_to_examples();\n-        }\n-    }());\n+    if (getSettingValue(\"line-numbers\") === \"true\") {\n+        window.rustdoc_add_line_numbers_to_examples();\n+    }\n \n     let oldSidebarScrollPosition = null;\n "}, {"sha": "7b2b139142e4c162d2565b21986e0dcdbba761d1", "filename": "src/test/ui/structs/multi-line-fru-suggestion.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -0,0 +1,22 @@\n+#[derive(Default)]\n+struct Inner {\n+    a: u8,\n+    b: u8,\n+}\n+\n+#[derive(Default)]\n+struct Outer {\n+    inner: Inner,\n+    defaulted: u8,\n+}\n+\n+fn main(){\n+    Outer {\n+        //~^ ERROR missing field `defaulted` in initializer of `Outer`\n+        inner: Inner {\n+            a: 1,\n+            b: 2,\n+        }\n+        ..Default::default()\n+    };\n+}"}, {"sha": "8bbd3ace7d29ef58e2cc2cf805734ddff1a0f02c", "filename": "src/test/ui/structs/multi-line-fru-suggestion.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.stderr?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -0,0 +1,25 @@\n+error[E0063]: missing field `defaulted` in initializer of `Outer`\n+  --> $DIR/multi-line-fru-suggestion.rs:14:5\n+   |\n+LL |     Outer {\n+   |     ^^^^^ missing `defaulted`\n+   |\n+note: this expression may have been misinterpreted as a `..` range expression\n+  --> $DIR/multi-line-fru-suggestion.rs:16:16\n+   |\n+LL |           inner: Inner {\n+   |  ________________^\n+LL | |             a: 1,\n+LL | |             b: 2,\n+LL | |         }\n+   | |_________^ this expression does not end in a comma...\n+LL |           ..Default::default()\n+   |           ^^^^^^^^^^^^^^^^^^^^ ... so this is interpreted as a `..` range expression, instead of functional record update syntax\n+help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n+   |\n+LL |         }, \n+   |          +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0063`."}, {"sha": "d93a62185b3f17184522f6a52aa0de0e666d81cd", "filename": "src/test/ui/structs/struct-record-suggestion.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -7,9 +7,8 @@ struct A {\n }\n \n fn a() {\n-    let q = A { c: 5,..Default::default() };\n-    //~^ ERROR mismatched types\n-    //~| ERROR missing fields\n+    let q = A { c: 5, ..Default::default() };\n+    //~^ ERROR missing fields\n     //~| HELP separate the last named field with a comma\n     let r = A { c: 5, ..Default::default() };\n     assert_eq!(q, r);\n@@ -21,7 +20,7 @@ struct B {\n }\n \n fn b() {\n-    let q = B { b: 1,..Default::default() };\n+    let q = B { b: 1, ..Default::default() };\n     //~^ ERROR mismatched types\n     //~| HELP separate the last named field with a comma\n     let r = B { b: 1 };"}, {"sha": "f0fd1c94e9ab5d2c386f6567e32ee28f9d61019f", "filename": "src/test/ui/structs/struct-record-suggestion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -8,8 +8,7 @@ struct A {\n \n fn a() {\n     let q = A { c: 5..Default::default() };\n-    //~^ ERROR mismatched types\n-    //~| ERROR missing fields\n+    //~^ ERROR missing fields\n     //~| HELP separate the last named field with a comma\n     let r = A { c: 5, ..Default::default() };\n     assert_eq!(q, r);"}, {"sha": "f4fd655e698b08171f3d6375d673c6d098f9ab5d", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a102dc806da3bc9c59b3594368a14e7d2632bf9c/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=a102dc806da3bc9c59b3594368a14e7d2632bf9c", "patch": "@@ -1,37 +1,38 @@\n-error[E0308]: mismatched types\n-  --> $DIR/struct-record-suggestion.rs:10:20\n-   |\n-LL |     let q = A { c: 5..Default::default() };\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found struct `std::ops::Range`\n-   |\n-   = note: expected type `u64`\n-            found struct `std::ops::Range<{integer}>`\n-\n error[E0063]: missing fields `b` and `d` in initializer of `A`\n   --> $DIR/struct-record-suggestion.rs:10:13\n    |\n LL |     let q = A { c: 5..Default::default() };\n    |             ^ missing `b` and `d`\n    |\n+note: this expression may have been misinterpreted as a `..` range expression\n+  --> $DIR/struct-record-suggestion.rs:10:20\n+   |\n+LL |     let q = A { c: 5..Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n    |\n-LL |     let q = A { c: 5,..Default::default() };\n+LL |     let q = A { c: 5, ..Default::default() };\n    |                     +\n \n error[E0308]: mismatched types\n-  --> $DIR/struct-record-suggestion.rs:24:20\n+  --> $DIR/struct-record-suggestion.rs:23:20\n    |\n LL |     let q = B { b: 1..Default::default() };\n    |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `std::ops::Range`\n    |\n    = note: expected type `u32`\n             found struct `std::ops::Range<{integer}>`\n+note: this expression may have been misinterpreted as a `..` range expression\n+  --> $DIR/struct-record-suggestion.rs:23:20\n+   |\n+LL |     let q = B { b: 1..Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n    |\n-LL |     let q = B { b: 1,..Default::default() };\n+LL |     let q = B { b: 1, ..Default::default() };\n    |                     +\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0063, E0308.\n For more information about an error, try `rustc --explain E0063`."}]}