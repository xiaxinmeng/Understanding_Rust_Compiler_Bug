{"sha": "e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YjZkM2NjOWViZWM3NmI2M2EyZjRkNmI1NGQ4ZWFlNThmMDdjNWY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-08T01:48:37Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-12T22:53:02Z"}, "message": "Use only one feature struct, and use hash maps in both occasions", "tree": {"sha": "4c12419f972491b68c6c65b56c759f9199757ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c12419f972491b68c6c65b56c759f9199757ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f", "html_url": "https://github.com/rust-lang/rust/commit/e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35717814686ea3e3d44a8f5c1c20d1cd50be82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35717814686ea3e3d44a8f5c1c20d1cd50be82a", "html_url": "https://github.com/rust-lang/rust/commit/e35717814686ea3e3d44a8f5c1c20d1cd50be82a"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "3c62bb83b402dcda15cb4fa07c55abfb54802b27", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=e8b6d3cc9ebec76b63a2f4d6b54d8eae58f07c5f", "patch": "@@ -39,22 +39,15 @@ impl fmt::Display for Status {\n     }\n }\n \n-\n struct Feature {\n-    name: String,\n-    level: Status,\n-    since: String,\n-}\n-\n-struct LibFeature {\n     level: Status,\n     since: String,\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let features = collect_lang_features(&path.join(\"libsyntax/feature_gate.rs\"));\n     assert!(!features.is_empty());\n-    let mut lib_features = HashMap::<String, LibFeature>::new();\n+    let mut lib_features = HashMap::<String, Feature>::new();\n \n     let mut contents = String::new();\n     super::walk(path,\n@@ -97,7 +90,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 None => \"None\",\n             };\n \n-            if features.iter().any(|f| f.name == feature_name) {\n+            if features.contains_key(feature_name) {\n                 err(\"duplicating a lang feature\");\n             }\n             if let Some(ref s) = lib_features.get(feature_name) {\n@@ -110,7 +103,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 continue;\n             }\n             lib_features.insert(feature_name.to_owned(),\n-                                LibFeature {\n+                                Feature {\n                                     level: level,\n                                     since: since.to_owned(),\n                                 });\n@@ -122,9 +115,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n     }\n \n     let mut lines = Vec::new();\n-    for feature in features {\n+    for (name, feature) in features {\n         lines.push(format!(\"{:<32} {:<8} {:<12} {:<8}\",\n-                           feature.name,\n+                           name,\n                            \"lang\",\n                            feature.level,\n                            feature.since));\n@@ -150,7 +143,7 @@ fn find_attr_val<'a>(line: &'a str, attr: &str) -> Option<&'a str> {\n         .map(|(i, j)| &line[i..j])\n }\n \n-fn collect_lang_features(path: &Path) -> Vec<Feature> {\n+fn collect_lang_features(path: &Path) -> HashMap<String, Feature> {\n     let mut contents = String::new();\n     t!(t!(File::open(path)).read_to_string(&mut contents));\n \n@@ -165,11 +158,11 @@ fn collect_lang_features(path: &Path) -> Vec<Feature> {\n             };\n             let name = parts.next().unwrap().trim();\n             let since = parts.next().unwrap().trim().trim_matches('\"');\n-            Some(Feature {\n-                name: name.to_owned(),\n-                level: level,\n-                since: since.to_owned(),\n-            })\n+            Some((name.to_owned(),\n+                Feature {\n+                    level: level,\n+                    since: since.to_owned(),\n+                }))\n         })\n         .collect()\n }"}]}