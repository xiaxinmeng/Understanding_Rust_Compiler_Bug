{"sha": "afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYjAzZDM4ZDdiYTQ1NzUzNGI3OWZlMmY2ODM5ZGM4ZTBmZDE3M2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-24T13:06:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-24T13:06:21Z"}, "message": "Merge pull request #541 from solson/rustup\n\nfix for new Align type", "tree": {"sha": "f3934d72483ebe145b3bbcb9f3b10cea6bdbf117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3934d72483ebe145b3bbcb9f3b10cea6bdbf117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+UzNCRBK7hj4Ov3rIwAAdHIIADTuiBHxfa+pTCYdDg5HxABQ\n3e7YpJzrFXG/v2DUcHdpTBB5L9AIFWAkJ1kJBcnSBQXwxebL6CUHqpIHPYTjmSXK\niGKgjU9GKbk2uksw9fhDfnoJcUeHlfJd+wZK3GF+QfmKV7XD5lUuuAn7jrcFLupu\nhz6GlbLB6IxPnxtw+eatFkB+sNxkcfEZMZCXx+V8i4VWJpQXHH5rDck4VIfMjfV8\n4tuXiagPIhpBP5gYOkVO7HC0qoFXSfAfnXbpd0n4jc8tV9gmTAQSugRlK1VahCMw\nfNddMrs+/boTKcw2uh1ElR1Z1+yP0W3rB8Yu/S6Bc47evGxO3qDojo2i7X+2mKQ=\n=Xs/x\n-----END PGP SIGNATURE-----\n", "payload": "tree f3934d72483ebe145b3bbcb9f3b10cea6bdbf117\nparent 3798a8edb2e6af1f348689f68d295c138539c7c3\nparent 82d4146a6c3fec5d0f87e3df6423f123dec784f6\nauthor Ralf Jung <post@ralfj.de> 1543064781 +0100\ncommitter GitHub <noreply@github.com> 1543064781 +0100\n\nMerge pull request #541 from solson/rustup\n\nfix for new Align type"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "html_url": "https://github.com/rust-lang/rust/commit/afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3798a8edb2e6af1f348689f68d295c138539c7c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3798a8edb2e6af1f348689f68d295c138539c7c3", "html_url": "https://github.com/rust-lang/rust/commit/3798a8edb2e6af1f348689f68d295c138539c7c3"}, {"sha": "82d4146a6c3fec5d0f87e3df6423f123dec784f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d4146a6c3fec5d0f87e3df6423f123dec784f6", "html_url": "https://github.com/rust-lang/rust/commit/82d4146a6c3fec5d0f87e3df6423f123dec784f6"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "5bdac314d16938c510dd67fe5cf46dbaaf0adb82", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "patch": "@@ -1 +1 @@\n-nightly-2018-11-22\n+nightly-2018-11-24"}, {"sha": "e64d4f6954878fd9553bf0aa39afd8b6f7ef22b1", "filename": "src/fn_call.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 if size == 0 {\n                     self.write_null(dest)?;\n                 } else {\n-                    let align = self.tcx.data_layout.pointer_align;\n+                    let align = self.tcx.data_layout.pointer_align.abi;\n                     let ptr = self.memory_mut().allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into())?;\n                     self.write_scalar(Scalar::Ptr(ptr.with_default_tag()), dest)?;\n                 }\n@@ -153,7 +153,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 let ptr = self.memory_mut()\n                     .allocate(\n                         Size::from_bytes(size),\n-                        Align::from_bytes(align, align).unwrap(),\n+                        Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::Rust.into()\n                     )?\n                     .with_default_tag();\n@@ -171,7 +171,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 let ptr = self.memory_mut()\n                     .allocate(\n                         Size::from_bytes(size),\n-                        Align::from_bytes(align, align).unwrap(),\n+                        Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::Rust.into()\n                     )?\n                     .with_default_tag();\n@@ -190,7 +190,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 }\n                 self.memory_mut().deallocate(\n                     ptr,\n-                    Some((Size::from_bytes(old_size), Align::from_bytes(align, align).unwrap())),\n+                    Some((Size::from_bytes(old_size), Align::from_bytes(align).unwrap())),\n                     MiriMemoryKind::Rust.into(),\n                 )?;\n             }\n@@ -208,9 +208,9 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 let new_ptr = self.memory_mut().reallocate(\n                     ptr,\n                     Size::from_bytes(old_size),\n-                    Align::from_bytes(align, align).unwrap(),\n+                    Align::from_bytes(align).unwrap(),\n                     Size::from_bytes(new_size),\n-                    Align::from_bytes(align, align).unwrap(),\n+                    Align::from_bytes(align).unwrap(),\n                     MiriMemoryKind::Rust.into(),\n                 )?;\n                 self.write_scalar(Scalar::Ptr(new_ptr.with_default_tag()), dest)?;\n@@ -394,7 +394,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                     // +1 for the null terminator\n                     let value_copy = self.memory_mut().allocate(\n                         Size::from_bytes((value.len() + 1) as u64),\n-                        Align::from_bytes(1, 1).unwrap(),\n+                        Align::from_bytes(1).unwrap(),\n                         MiriMemoryKind::Env.into(),\n                     )?.with_default_tag();\n                     self.memory_mut().write_bytes(value_copy.into(), &value)?;\n@@ -513,7 +513,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 }\n                 self.memory_mut().write_scalar(\n                     key_ptr,\n-                    key_layout.align,\n+                    key_layout.align.abi,\n                     Scalar::from_uint(key, key_layout.size).into(),\n                     key_layout.size,\n                 )?;"}, {"sha": "2b1a28fe9e0d0f27a1cc864b27807a4a65cb2926", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "patch": "@@ -130,9 +130,10 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 unsafe_cell_action: |place| {\n                     trace!(\"unsafe_cell_action on {:?}\", place.ptr);\n                     // We need a size to go on.\n-                    let (unsafe_cell_size, _) = self.size_and_align_of_mplace(place)?\n+                    let unsafe_cell_size = self.size_and_align_of_mplace(place)?\n+                        .map(|(size, _)| size)\n                         // for extern types, just cover what we can\n-                        .unwrap_or_else(|| place.layout.size_and_align());\n+                        .unwrap_or_else(|| place.layout.size);\n                     // Now handle this `UnsafeCell`, unless it is empty.\n                     if unsafe_cell_size != Size::ZERO {\n                         unsafe_cell_action(place.ptr, unsafe_cell_size)"}, {"sha": "66dab00e0975ccc4fac8ff22f84f8c2b508b272d", "filename": "src/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let elem_layout = self.layout_of(elem_ty)?;\n                 let elem_size = elem_layout.size.bytes();\n                 let count = self.read_scalar(args[2])?.to_usize(self)?;\n-                let elem_align = elem_layout.align;\n+                let elem_align = elem_layout.align.abi;\n                 // erase tags: this is a raw ptr operation\n                 let src = self.read_scalar(args[0])?.not_undef()?;\n                 let dest = self.read_scalar(args[1])?.not_undef()?;\n@@ -272,7 +272,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n             \"pref_align_of\" => {\n                 let ty = substs.type_at(0);\n                 let layout = self.layout_of(ty)?;\n-                let align = layout.align.pref();\n+                let align = layout.align.pref.bytes();\n                 let ptr_size = self.pointer_size();\n                 let align_val = Scalar::from_uint(align as u128, ptr_size);\n                 self.write_scalar(align_val, dest)?;\n@@ -364,7 +364,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     .expect(\"size_of_val called on extern type\");\n                 let ptr_size = self.pointer_size();\n                 self.write_scalar(\n-                    Scalar::from_uint(align.abi(), ptr_size),\n+                    Scalar::from_uint(align.bytes(), ptr_size),\n                     dest,\n                 )?;\n             }\n@@ -438,7 +438,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let val_byte = self.read_scalar(args[1])?.to_u8()?;\n                 let ptr = self.read_scalar(args[0])?.not_undef()?;\n                 let count = self.read_scalar(args[2])?.to_usize(self)?;\n-                self.memory().check_align(ptr, ty_layout.align)?;\n+                self.memory().check_align(ptr, ty_layout.align.abi)?;\n                 self.memory_mut().write_repeat(ptr, val_byte, ty_layout.size * count)?;\n             }\n "}, {"sha": "10a1405b2a628e752253dc5995bc7eb0b40020fa", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n         // Second argument: align\n         let arg = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-        let align = layout.align.abi();\n+        let align = layout.align.abi.bytes();\n         ecx.write_scalar(Scalar::from_uint(align, arg.layout.size), arg)?;\n \n         // No more arguments\n@@ -419,7 +419,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n             \"__cxa_thread_atexit_impl\" => {\n                 // This should be all-zero, pointer-sized\n                 let data = vec![0; tcx.data_layout.pointer_size.bytes() as usize];\n-                Allocation::from_bytes(&data[..], tcx.data_layout.pointer_align)\n+                Allocation::from_bytes(&data[..], tcx.data_layout.pointer_align.abi)\n             }\n             _ => return err!(Unimplemented(\n                     format!(\"can't access foreign static: {}\", link_name),\n@@ -458,9 +458,9 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         place: MPlaceTy<'tcx, Borrow>,\n         mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Scalar<Borrow>> {\n-        let (size, _) = ecx.size_and_align_of_mplace(place)?\n+        let size = ecx.size_and_align_of_mplace(place)?.map(|(size, _)| size)\n             // for extern types, just cover what we can\n-            .unwrap_or_else(|| place.layout.size_and_align());\n+            .unwrap_or_else(|| place.layout.size);\n         if !ecx.tcx.sess.opts.debugging_opts.mir_emit_retag ||\n             !Self::enforce_validity(ecx) || size == Size::ZERO\n         {\n@@ -498,9 +498,9 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         // This is deliberately NOT `deref_operand` as we do not want `tag_dereference`\n         // to be called!  That would kill the original tag if we got a raw ptr.\n         let place = ecx.ref_to_mplace(ecx.read_immediate(ptr)?)?;\n-        let (size, _) = ecx.size_and_align_of_mplace(place)?\n+        let size = ecx.size_and_align_of_mplace(place)?.map(|(size, _)| size)\n             // for extern types, just cover what we can\n-            .unwrap_or_else(|| place.layout.size_and_align());\n+            .unwrap_or_else(|| place.layout.size);\n         if !ecx.tcx.sess.opts.debugging_opts.mir_emit_retag ||\n             !ecx.machine.validate || size == Size::ZERO\n         {"}, {"sha": "2f3a0de999adf86c154339e4a3a8b3b77ed91cac", "filename": "src/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb03d38d7ba457534b79fe2f6839dc8e0fd173e/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=afb03d38d7ba457534b79fe2f6839dc8e0fd173e", "patch": "@@ -166,12 +166,12 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let (alloc_size, alloc_align) = self.memory().get_size_and_align(ptr.alloc_id);\n \n                 // Case II: Alignment gives it away\n-                if ptr.offset.bytes() % alloc_align.abi() == 0 {\n+                if ptr.offset.bytes() % alloc_align.bytes() == 0 {\n                     // The offset maintains the allocation alignment, so we know `base+offset`\n                     // is aligned by `alloc_align`.\n                     // FIXME: We could be even more general, e.g. offset 2 into a 4-aligned\n                     // allocation cannot equal 3.\n-                    if bits % alloc_align.abi() != 0 {\n+                    if bits % alloc_align.bytes() != 0 {\n                         // The integer is *not* aligned. So they cannot be equal.\n                         return Ok(false);\n                     }\n@@ -226,7 +226,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 map_to_primval(left.overflowing_offset(Size::from_bytes(right as u64), self)),\n \n             BitAnd if !signed => {\n-                let ptr_base_align = self.memory().get(left.alloc_id)?.align.abi();\n+                let ptr_base_align = self.memory().get(left.alloc_id)?.align.bytes();\n                 let base_mask = {\n                     // FIXME: Use interpret::truncate, once that takes a Size instead of a Layout\n                     let shift = 128 - self.memory().pointer_size().bits();\n@@ -259,7 +259,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n             Rem if !signed => {\n                 // Doing modulo a divisor of the alignment is allowed.\n                 // (Intuition: Modulo a divisor leaks less information.)\n-                let ptr_base_align = self.memory().get(left.alloc_id)?.align.abi();\n+                let ptr_base_align = self.memory().get(left.alloc_id)?.align.bytes();\n                 let right = right as u64;\n                 let ptr_size = self.memory().pointer_size().bytes() as u8;\n                 if right == 1 {"}]}