{"sha": "7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODFhYTZhYzkxNjViMGJiMWE1ZjYyNGI4ODAyMTkyYjhlYmM5ZWU=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-08T06:30:12Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-09T14:54:19Z"}, "message": "doc: Fix extraneous as_slice()'s in docstrings", "tree": {"sha": "ff0e96f6906be6c2e3b7a27ebda618bbb81c14dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff0e96f6906be6c2e3b7a27ebda618bbb81c14dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "html_url": "https://github.com/rust-lang/rust/commit/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061d84399e66dc3d47c567370b71e047202ba60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/061d84399e66dc3d47c567370b71e047202ba60f", "html_url": "https://github.com/rust-lang/rust/commit/061d84399e66dc3d47c567370b71e047202ba60f"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "d2fcf27e93cdf540627bf9e2c2e1255183493882", "filename": "src/doc/style/errors/ergonomics.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -22,9 +22,9 @@ fn write_info(info: &Info) -> Result<(), IoError> {\n     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"),\n                                    Open, Write);\n     // Early return on error\n-    try!(file.write_line(format!(\"name: {}\", info.name).as_slice()));\n-    try!(file.write_line(format!(\"age: {}\", info.age).as_slice()));\n-    try!(file.write_line(format!(\"rating: {}\", info.rating).as_slice()));\n+    try!(file.write_line(&format!(\"name: {}\", info.name)));\n+    try!(file.write_line(&format!(\"age: {}\", info.age)));\n+    try!(file.write_line(&format!(\"rating: {}\", info.rating)));\n     return Ok(());\n }\n ```\n@@ -44,15 +44,15 @@ fn write_info(info: &Info) -> Result<(), IoError> {\n     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"),\n                                    Open, Write);\n     // Early return on error\n-    match file.write_line(format!(\"name: {}\", info.name).as_slice()) {\n+    match file.write_line(&format!(\"name: {}\", info.name)) {\n         Ok(_) => (),\n         Err(e) => return Err(e)\n     }\n-    match file.write_line(format!(\"age: {}\", info.age).as_slice()) {\n+    match file.write_line(&format!(\"age: {}\", info.age)) {\n         Ok(_) => (),\n         Err(e) => return Err(e)\n     }\n-    return file.write_line(format!(\"rating: {}\", info.rating).as_slice());\n+    return file.write_line(&format!(\"rating: {}\", info.rating));\n }\n ```\n "}, {"sha": "15a66bd80d02b32507286f2f174448a5412e113e", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -198,7 +198,7 @@\n //!         // for details, and the function `pad` can be used to pad strings.\n //!         let decimals = f.precision().unwrap_or(3);\n //!         let string = f64::to_str_exact(magnitude, decimals);\n-//!         f.pad_integral(true, \"\", string.as_slice())\n+//!         f.pad_integral(true, \"\", &string)\n //!     }\n //! }\n //!"}, {"sha": "051fa1a8612f355d7b01a742516e61107cc66c57", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -139,7 +139,7 @@ impl String {\n     /// ```rust\n     /// let input = b\"Hello \\xF0\\x90\\x80World\";\n     /// let output = String::from_utf8_lossy(input);\n-    /// assert_eq!(output.as_slice(), \"Hello \\u{FFFD}World\");\n+    /// assert_eq!(output, \"Hello \\u{FFFD}World\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n@@ -355,7 +355,7 @@ impl String {\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n     /// s.push_str(\"bar\");\n-    /// assert_eq!(s.as_slice(), \"foobar\");\n+    /// assert_eq!(s, \"foobar\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -450,7 +450,7 @@ impl String {\n     /// s.push('1');\n     /// s.push('2');\n     /// s.push('3');\n-    /// assert_eq!(s.as_slice(), \"abc123\");\n+    /// assert_eq!(s, \"abc123\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -503,7 +503,7 @@ impl String {\n     /// ```\n     /// let mut s = String::from_str(\"hello\");\n     /// s.truncate(2);\n-    /// assert_eq!(s.as_slice(), \"he\");\n+    /// assert_eq!(s, \"he\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -622,7 +622,7 @@ impl String {\n     ///     assert!(vec == &[104, 101, 108, 108, 111]);\n     ///     vec.reverse();\n     /// }\n-    /// assert_eq!(s.as_slice(), \"olleh\");\n+    /// assert_eq!(s, \"olleh\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "6c3afdf884953ad0966eef3707fb5404cdcbfc9a", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -178,13 +178,13 @@\n //! fn write_info(info: &Info) -> Result<(), IoError> {\n //!     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"), Open, Write);\n //!     // Early return on error\n-//!     if let Err(e) = file.write_line(format!(\"name: {}\", info.name).as_slice()) {\n+//!     if let Err(e) = file.write_line(&format!(\"name: {}\", info.name)) {\n //!         return Err(e)\n //!     }\n-//!     if let Err(e) = file.write_line(format!(\"age: {}\", info.age).as_slice()) {\n+//!     if let Err(e) = file.write_line(&format!(\"age: {}\", info.age)) {\n //!         return Err(e)\n //!     }\n-//!     return file.write_line(format!(\"rating: {}\", info.rating).as_slice());\n+//!     return file.write_line(&format!(\"rating: {}\", info.rating));\n //! }\n //! ```\n //!\n@@ -202,9 +202,9 @@\n //! fn write_info(info: &Info) -> Result<(), IoError> {\n //!     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"), Open, Write);\n //!     // Early return on error\n-//!     try!(file.write_line(format!(\"name: {}\", info.name).as_slice()));\n-//!     try!(file.write_line(format!(\"age: {}\", info.age).as_slice()));\n-//!     try!(file.write_line(format!(\"rating: {}\", info.rating).as_slice()));\n+//!     try!(file.write_line(&format!(\"name: {}\", info.name)));\n+//!     try!(file.write_line(&format!(\"age: {}\", info.age)));\n+//!     try!(file.write_line(&format!(\"rating: {}\", info.rating)));\n //!     return Ok(());\n //! }\n //! ```"}, {"sha": "38abf3881bdf63aaac1c47e870c1d44e6bd5996b", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -46,7 +46,7 @@\n //!\n //! fn print_usage(program: &str, opts: &[OptGroup]) {\n //!     let brief = format!(\"Usage: {} [options]\", program);\n-//!     print!(\"{}\", usage(brief.as_slice(), opts));\n+//!     print!(\"{}\", usage(brief, opts));\n //! }\n //!\n //! fn main() {\n@@ -63,17 +63,17 @@\n //!         Err(f) => { panic!(f.to_string()) }\n //!     };\n //!     if matches.opt_present(\"h\") {\n-//!         print_usage(program.as_slice(), opts);\n+//!         print_usage(program, opts);\n //!         return;\n //!     }\n //!     let output = matches.opt_str(\"o\");\n //!     let input = if !matches.free.is_empty() {\n //!         matches.free[0].clone()\n //!     } else {\n-//!         print_usage(program.as_slice(), opts);\n+//!         print_usage(program, opts);\n //!         return;\n //!     };\n-//!     do_work(input.as_slice(), output);\n+//!     do_work(input, output);\n //! }\n //! ```\n "}, {"sha": "0367130c1320fe3e65fc8b430a2d34ec69b81f30", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -86,7 +86,7 @@\n ///     let mut flags = FLAG_A | FLAG_B;\n ///     flags.clear();\n ///     assert!(flags.is_empty());\n-///     assert_eq!(format!(\"{:?}\", flags).as_slice(), \"hi!\");\n+///     assert_eq!(format!(\"{:?}\", flags), \"hi!\");\n /// }\n /// ```\n ///"}, {"sha": "6fc56522c6af1dbaa7198a214416b4388535449d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "patch": "@@ -188,7 +188,7 @@\n //!     let json_str: String = json_obj.to_string();\n //!\n //!     // Deserialize like before\n-//!     let decoded: TestStruct = json::decode(json_str.as_slice()).unwrap();\n+//!     let decoded: TestStruct = json::decode(json_str)).unwrap();\n //! }\n //! ```\n "}]}