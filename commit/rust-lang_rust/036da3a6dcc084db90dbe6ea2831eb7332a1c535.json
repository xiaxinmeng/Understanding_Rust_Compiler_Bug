{"sha": "036da3a6dcc084db90dbe6ea2831eb7332a1c535", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNmRhM2E2ZGNjMDg0ZGI5MGRiZTZlYTI4MzFlYjczMzJhMWM1MzU=", "commit": {"author": {"name": "Dennis Duda", "email": "git@seri.tools", "date": "2020-05-31T15:36:17Z"}, "committer": {"name": "Dennis Duda", "email": "git@seri.tools", "date": "2020-05-31T15:36:17Z"}, "message": "Make `remote-test-client` work as cargo runner again\n\nSince cargo appends executable/args, the support_lib count\nparameter has to come first.", "tree": {"sha": "4a2d1788b011504c417002a90883696c1a77be3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2d1788b011504c417002a90883696c1a77be3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036da3a6dcc084db90dbe6ea2831eb7332a1c535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036da3a6dcc084db90dbe6ea2831eb7332a1c535", "html_url": "https://github.com/rust-lang/rust/commit/036da3a6dcc084db90dbe6ea2831eb7332a1c535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036da3a6dcc084db90dbe6ea2831eb7332a1c535/comments", "author": {"login": "seritools", "id": 5844066, "node_id": "MDQ6VXNlcjU4NDQwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5844066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seritools", "html_url": "https://github.com/seritools", "followers_url": "https://api.github.com/users/seritools/followers", "following_url": "https://api.github.com/users/seritools/following{/other_user}", "gists_url": "https://api.github.com/users/seritools/gists{/gist_id}", "starred_url": "https://api.github.com/users/seritools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seritools/subscriptions", "organizations_url": "https://api.github.com/users/seritools/orgs", "repos_url": "https://api.github.com/users/seritools/repos", "events_url": "https://api.github.com/users/seritools/events{/privacy}", "received_events_url": "https://api.github.com/users/seritools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seritools", "id": 5844066, "node_id": "MDQ6VXNlcjU4NDQwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5844066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seritools", "html_url": "https://github.com/seritools", "followers_url": "https://api.github.com/users/seritools/followers", "following_url": "https://api.github.com/users/seritools/following{/other_user}", "gists_url": "https://api.github.com/users/seritools/gists{/gist_id}", "starred_url": "https://api.github.com/users/seritools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seritools/subscriptions", "organizations_url": "https://api.github.com/users/seritools/orgs", "repos_url": "https://api.github.com/users/seritools/repos", "events_url": "https://api.github.com/users/seritools/events{/privacy}", "received_events_url": "https://api.github.com/users/seritools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0199fdc0f72ec6942d93d0bf23c7fa1fb9fbf54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0199fdc0f72ec6942d93d0bf23c7fa1fb9fbf54f", "html_url": "https://github.com/rust-lang/rust/commit/0199fdc0f72ec6942d93d0bf23c7fa1fb9fbf54f"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "3ae6c34d228416702bb8973a04418ba49bfc3539", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/036da3a6dcc084db90dbe6ea2831eb7332a1c535/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036da3a6dcc084db90dbe6ea2831eb7332a1c535/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=036da3a6dcc084db90dbe6ea2831eb7332a1c535", "patch": "@@ -1762,7 +1762,7 @@ impl Step for Crate {\n         } else if builder.remote_tested(target) {\n             cargo.env(\n                 format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)),\n-                format!(\"{} run\", builder.tool_exe(Tool::RemoteTestClient).display()),\n+                format!(\"{} run 0\", builder.tool_exe(Tool::RemoteTestClient).display()),\n             );\n         }\n "}, {"sha": "4f8cf92b86938c9e925dfe7b6d0d415278d1eb9a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/036da3a6dcc084db90dbe6ea2831eb7332a1c535/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036da3a6dcc084db90dbe6ea2831eb7332a1c535/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=036da3a6dcc084db90dbe6ea2831eb7332a1c535", "patch": "@@ -1608,8 +1608,7 @@ impl<'test> TestCx<'test> {\n                 let mut test_client =\n                     Command::new(self.config.remote_test_client.as_ref().unwrap());\n                 test_client\n-                    .args(&[\"run\", &prog])\n-                    .arg(support_libs.len().to_string())\n+                    .args(&[\"run\", &support_libs.len().to_string(), &prog])\n                     .args(support_libs)\n                     .args(args)\n                     .envs(env.clone());"}, {"sha": "259477e9a1c365b569115de4295e229ce150fbd8", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/036da3a6dcc084db90dbe6ea2831eb7332a1c535/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036da3a6dcc084db90dbe6ea2831eb7332a1c535/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=036da3a6dcc084db90dbe6ea2831eb7332a1c535", "patch": "@@ -45,8 +45,10 @@ fn main() {\n         ),\n         \"push\" => push(Path::new(&args.next().unwrap())),\n         \"run\" => run(\n-            args.next().unwrap(),\n             args.next().and_then(|count| count.parse().ok()).unwrap(),\n+            // the last required parameter must remain the executable\n+            // path so that the client works as a cargo runner\n+            args.next().unwrap(),\n             args.collect(),\n         ),\n         \"help\" | \"-h\" | \"--help\" => help(),\n@@ -201,7 +203,7 @@ fn push(path: &Path) {\n     println!(\"done pushing {:?}\", path);\n }\n \n-fn run(exe: String, support_lib_count: usize, all_args: Vec<String>) {\n+fn run(support_lib_count: usize, exe: String, all_args: Vec<String>) {\n     let device_address = env::var(REMOTE_ADDR_ENV).unwrap_or(DEFAULT_ADDR.to_string());\n     let client = t!(TcpStream::connect(device_address));\n     let mut client = BufWriter::new(client);\n@@ -306,7 +308,7 @@ Usage: {0} <command> [<args>]\n Sub-commands:\n     spawn-emulator <target> <server> <tmpdir> [rootfs]   See below\n     push <path>                                          Copy <path> to emulator\n-    run <file> <support_lib_count> [support_libs...] [args...]\n+    run <support_lib_count> <file> [support_libs...] [args...]\n                                                          Run program on emulator\n     help                                                 Display help message\n "}]}