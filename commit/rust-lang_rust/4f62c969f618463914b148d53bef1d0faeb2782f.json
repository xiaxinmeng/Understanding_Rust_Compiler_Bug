{"sha": "4f62c969f618463914b148d53bef1d0faeb2782f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjJjOTY5ZjYxODQ2MzkxNGIxNDhkNTNiZWYxZDBmYWViMjc4MmY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T11:44:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T12:05:00Z"}, "message": "std::vec: move pointless `raw::get` and `unsafe_get` functions.\n\nThis can easily be written as `(*v.unsafe_ref(i)).clone()`, or just\n`*v.unsafe_ref(i)` for primitive types like `i32` (the common case).", "tree": {"sha": "3a6a4bfd063c9b9caf606aff7ad0a409399897d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6a4bfd063c9b9caf606aff7ad0a409399897d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f62c969f618463914b148d53bef1d0faeb2782f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f62c969f618463914b148d53bef1d0faeb2782f", "html_url": "https://github.com/rust-lang/rust/commit/4f62c969f618463914b148d53bef1d0faeb2782f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f62c969f618463914b148d53bef1d0faeb2782f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0393c402a6f523993bb47c579d7382bec507bde7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0393c402a6f523993bb47c579d7382bec507bde7", "html_url": "https://github.com/rust-lang/rust/commit/0393c402a6f523993bb47c579d7382bec507bde7"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "5ba6994b78d703d378cb0aa41e3e51d10f34c484", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f62c969f618463914b148d53bef1d0faeb2782f/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f62c969f618463914b148d53bef1d0faeb2782f/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=4f62c969f618463914b148d53bef1d0faeb2782f", "patch": "@@ -341,7 +341,7 @@ impl Isaac64Rng {\n         static MP_VEC: [(uint, uint), .. 2] = [(0,MIDPOINT), (MIDPOINT, 0)];\n         macro_rules! ind (\n             ($x:expr) => {\n-                self.mem.unsafe_get(($x as uint >> 3) & (RAND_SIZE_64 - 1))\n+                *self.mem.unsafe_ref(($x as uint >> 3) & (RAND_SIZE_64 - 1))\n             }\n         );\n         macro_rules! rngstep(\n@@ -355,8 +355,8 @@ impl Isaac64Rng {\n                 let mix = if $j == 0 {!mix} else {mix};\n \n                 unsafe {\n-                    let x = self.mem.unsafe_get(base + mr_offset);\n-                    a = mix + self.mem.unsafe_get(base + m2_offset);\n+                    let x = *self.mem.unsafe_ref(base + mr_offset);\n+                    a = mix + *self.mem.unsafe_ref(base + m2_offset);\n                     let y = ind!(x) + a + b;\n                     self.mem.unsafe_set(base + mr_offset, y);\n \n@@ -395,7 +395,7 @@ impl Rng for Isaac64Rng {\n             self.isaac64();\n         }\n         self.cnt -= 1;\n-        unsafe { self.rsl.unsafe_get(self.cnt) }\n+        unsafe { *self.rsl.unsafe_ref(self.cnt) }\n     }\n }\n "}, {"sha": "fc051a7e2b55a21519b8368af7374b2dfacbd2c3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f62c969f618463914b148d53bef1d0faeb2782f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f62c969f618463914b148d53bef1d0faeb2782f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4f62c969f618463914b148d53bef1d0faeb2782f", "patch": "@@ -1270,8 +1270,6 @@ pub trait ImmutableCopyableVector<T> {\n      * those that do not.\n      */\n     fn partitioned(&self, f: |&T| -> bool) -> (~[T], ~[T]);\n-    /// Returns the element at the given index, without doing bounds checking.\n-    unsafe fn unsafe_get(&self, elem: uint) -> T;\n \n     /// Create an iterator that yields every possible permutation of the\n     /// vector in succession.\n@@ -1295,11 +1293,6 @@ impl<'a,T:Clone> ImmutableCopyableVector<T> for &'a [T] {\n         (lefts, rights)\n     }\n \n-    #[inline]\n-    unsafe fn unsafe_get(&self, index: uint) -> T {\n-        (*self.unsafe_ref(index)).clone()\n-    }\n-\n     fn permutations(self) -> Permutations<T> {\n         Permutations{\n             swaps: ElementSwaps::new(self.len()),\n@@ -2192,7 +2185,6 @@ pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n /// Unsafe operations\n pub mod raw {\n     use cast;\n-    use clone::Clone;\n     use option::Some;\n     use ptr;\n     use mem;\n@@ -2269,14 +2261,6 @@ pub mod raw {\n         }))\n     }\n \n-    /**\n-     * Unchecked vector indexing.\n-     */\n-    #[inline]\n-    pub unsafe fn get<T:Clone>(v: &[T], i: uint) -> T {\n-        v.as_imm_buf(|p, _len| (*ptr::offset(p, i as int)).clone())\n-    }\n-\n     /**\n      * Unchecked vector index assignment.  Does not drop the\n      * old value and hence is only suitable when the vector"}, {"sha": "ea57eae22b8e3d7dc561afb1cd2f8507d3c91f80", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f62c969f618463914b148d53bef1d0faeb2782f/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f62c969f618463914b148d53bef1d0faeb2782f/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=4f62c969f618463914b148d53bef1d0faeb2782f", "patch": "@@ -37,16 +37,16 @@ fn fannkuch_redux(n: i32) -> i32 {\n             let mut flips_count: i32 = 0;\n             let mut k: i32;\n             loop {\n-                k = perm.unsafe_get(0);\n+                k = *perm.unsafe_ref(0);\n                 if k == 0 {\n                     break;\n                 }\n \n                 let k2 = (k+1) >> 1;\n                 for i in range(0i32, k2) {\n                     let (perm_i, perm_k_i) = {\n-                        (perm.unsafe_get(i as uint),\n-                            perm.unsafe_get((k-i) as uint))\n+                        (*perm.unsafe_ref(i as uint),\n+                            *perm.unsafe_ref((k-i) as uint))\n                     };\n                     perm.unsafe_set(i as uint, perm_k_i);\n                     perm.unsafe_set((k-i) as uint, perm_i);\n@@ -72,15 +72,15 @@ fn fannkuch_redux(n: i32) -> i32 {\n                 let mut i: i32 = 0;\n                 while i < r {\n                     let j = i + 1;\n-                    let perm1_j = { perm1.unsafe_get(j as uint) };\n+                    let perm1_j = { *perm1.unsafe_ref(j as uint) };\n                     perm1.unsafe_set(i as uint, perm1_j);\n                     i = j;\n                 }\n                 perm1.unsafe_set(r as uint, perm0);\n \n-                let count_r = { count.unsafe_get(r as uint) };\n+                let count_r = { *count.unsafe_ref(r as uint) };\n                 count.unsafe_set(r as uint, count_r - 1);\n-                if count.unsafe_get(r as uint) > 0 {\n+                if *count.unsafe_ref(r as uint) > 0 {\n                     break;\n                 }\n                 r += 1;"}]}