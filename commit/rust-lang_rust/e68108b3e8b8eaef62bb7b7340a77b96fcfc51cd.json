{"sha": "e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ODEwOGIzZThiOGVhZWY2MmJiN2I3MzQwYTc3Yjk2ZmNmYzUxY2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-16T00:26:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "librustc: Stop using `@str` for source.", "tree": {"sha": "1c39cd392414e5db5505c05ce8f3abbd170f068a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c39cd392414e5db5505c05ce8f3abbd170f068a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "html_url": "https://github.com/rust-lang/rust/commit/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f152be7a425e7d66f717ffe8b210bcacf82539cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f152be7a425e7d66f717ffe8b210bcacf82539cc", "html_url": "https://github.com/rust-lang/rust/commit/f152be7a425e7d66f717ffe8b210bcacf82539cc"}], "stats": {"total": 176, "additions": 87, "deletions": 89}, "files": [{"sha": "bdefc3418724dd04db7a814daa9dcb7b90e8e140", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -138,16 +138,15 @@ fn parse_cfgspecs(cfgspecs: ~[~str], demitter: @diagnostic::Emitter)\n                   -> ast::CrateConfig {\n     cfgspecs.move_iter().map(|s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n-        parse::parse_meta_from_source_str(@\"cfgspec\", s.to_managed(), ~[], sess)\n+        parse::parse_meta_from_source_str(@\"cfgspec\", s, ~[], sess)\n     }).collect::<ast::CrateConfig>()\n }\n \n pub enum Input {\n     /// Load source from file\n     FileInput(Path),\n     /// The string is the source\n-    // FIXME (#2319): Don't really want to box the source string\n-    StrInput(@str)\n+    StrInput(~str)\n }\n \n pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n@@ -157,9 +156,11 @@ pub fn phase_1_parse_input(sess: Session, cfg: ast::CrateConfig, input: &Input)\n             FileInput(ref file) => {\n                 parse::parse_crate_from_file(&(*file), cfg.clone(), sess.parse_sess)\n             }\n-            StrInput(src) => {\n-                parse::parse_crate_from_source_str(\n-                    anon_src(), src, cfg.clone(), sess.parse_sess)\n+            StrInput(ref src) => {\n+                parse::parse_crate_from_source_str(anon_src(),\n+                                                   (*src).clone(),\n+                                                   cfg.clone(),\n+                                                   sess.parse_sess)\n             }\n         }\n     })\n@@ -624,7 +625,7 @@ pub fn pretty_print_input(sess: Session,\n         _ => @pprust::NoAnn as @pprust::PpAnn,\n     };\n \n-    let src = sess.codemap.get_filemap(source_name(input)).src;\n+    let src = &sess.codemap.get_filemap(source_name(input)).src;\n     let mut rdr = MemReader::new(src.as_bytes().to_owned());\n     let stdout = io::stdout();\n     pprust::print_crate(sess.codemap,"}, {"sha": "c34f881b2db1866a6416ebe4d9fb7feaca540a66", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -236,8 +236,9 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n       1u => {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n-            let src = str::from_utf8_owned(io::stdin().read_to_end()).unwrap();\n-            (d::StrInput(src.to_managed()), None)\n+            let src =\n+                str::from_utf8_owned(io::stdin().read_to_end()).unwrap();\n+            (d::StrInput(src), None)\n         } else {\n             (d::FileInput(Path::new(ifile)), Some(Path::new(ifile)))\n         }\n@@ -319,9 +320,11 @@ fn parse_crate_attrs(sess: session::Session,\n         d::FileInput(ref ifile) => {\n             parse::parse_crate_attrs_from_file(ifile, ~[], sess.parse_sess)\n         }\n-        d::StrInput(src) => {\n-            parse::parse_crate_attrs_from_source_str(\n-                d::anon_src(), src, ~[], sess.parse_sess)\n+        d::StrInput(ref src) => {\n+            parse::parse_crate_attrs_from_source_str(d::anon_src(),\n+                                                     (*src).clone(),\n+                                                     ~[],\n+                                                     sess.parse_sess)\n         }\n     }\n }"}, {"sha": "12874d1b502a282e4249f8f69d64319c767d9dd0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -137,7 +137,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n     }\n }\n \n-fn maketest(s: &str, cratename: &str) -> @str {\n+fn maketest(s: &str, cratename: &str) -> ~str {\n     let mut prog = ~r\"\n #[deny(warnings)];\n #[allow(unused_variable, dead_assignment, unused_mut, attribute_usage, dead_code)];\n@@ -156,7 +156,7 @@ fn maketest(s: &str, cratename: &str) -> @str {\n         prog.push_str(\"\\n}\");\n     }\n \n-    return prog.to_managed();\n+    return prog;\n }\n \n pub struct Collector {"}, {"sha": "16b31f0a4159f7e32eb8e0c8e19c0e84300eb07f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -206,7 +206,7 @@ pub struct FileMap {\n     /// e.g. `<anon>`\n     name: FileName,\n     /// The complete source code\n-    src: @str,\n+    src: ~str,\n     /// The start position of this source in the CodeMap\n     start_pos: BytePos,\n     /// Locations of lines beginnings in the source code\n@@ -267,7 +267,7 @@ impl CodeMap {\n         }\n     }\n \n-    pub fn new_filemap(&self, filename: FileName, src: @str) -> @FileMap {\n+    pub fn new_filemap(&self, filename: FileName, src: ~str) -> @FileMap {\n         let mut files = self.files.borrow_mut();\n         let start_pos = match files.get().last() {\n             None => 0,"}, {"sha": "3eaafba55cda01ba4641ac99270084668c437175", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -1047,7 +1047,7 @@ mod test {\n             ~[], sess);\n         // should fail:\n         let mut loader = ErrLoader;\n-        expand_crate(sess,&mut loader,~[],crate_ast);\n+        expand_crate(sess, &mut loader, ~[], crate_ast);\n     }\n \n     #[test] fn test_contains_flatten (){"}, {"sha": "11f61c340fcae81b330be35a8cacb7c6a8b7d469", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -203,7 +203,7 @@ pub mod rt {\n         ($t:ty) => (\n             impl ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> ~[TokenTree] {\n-                    cx.parse_tts(self.to_source().to_managed())\n+                    cx.parse_tts(self.to_source())\n                 }\n             }\n         )\n@@ -213,7 +213,7 @@ pub mod rt {\n         ($t:ty) => (\n             impl<'a> ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> ~[TokenTree] {\n-                    cx.parse_tts(self.to_source().to_managed())\n+                    cx.parse_tts(self.to_source())\n                 }\n             }\n         )\n@@ -240,15 +240,15 @@ pub mod rt {\n     impl_to_tokens!(u64)\n \n     pub trait ExtParseUtils {\n-        fn parse_item(&self, s: @str) -> @ast::Item;\n-        fn parse_expr(&self, s: @str) -> @ast::Expr;\n-        fn parse_stmt(&self, s: @str) -> @ast::Stmt;\n-        fn parse_tts(&self, s: @str) -> ~[ast::TokenTree];\n+        fn parse_item(&self, s: ~str) -> @ast::Item;\n+        fn parse_expr(&self, s: ~str) -> @ast::Expr;\n+        fn parse_stmt(&self, s: ~str) -> @ast::Stmt;\n+        fn parse_tts(&self, s: ~str) -> ~[ast::TokenTree];\n     }\n \n     impl<'a> ExtParseUtils for ExtCtxt<'a> {\n \n-        fn parse_item(&self, s: @str) -> @ast::Item {\n+        fn parse_item(&self, s: ~str) -> @ast::Item {\n             let res = parse::parse_item_from_source_str(\n                 @\"<quote expansion>\",\n                 s,\n@@ -257,13 +257,13 @@ pub mod rt {\n             match res {\n                 Some(ast) => ast,\n                 None => {\n-                    error!(\"Parse error with ```\\n{}\\n```\", s);\n+                    error!(\"Parse error\");\n                     fail!()\n                 }\n             }\n         }\n \n-        fn parse_stmt(&self, s: @str) -> @ast::Stmt {\n+        fn parse_stmt(&self, s: ~str) -> @ast::Stmt {\n             parse::parse_stmt_from_source_str(\n                 @\"<quote expansion>\",\n                 s,\n@@ -272,15 +272,15 @@ pub mod rt {\n                 self.parse_sess())\n         }\n \n-        fn parse_expr(&self, s: @str) -> @ast::Expr {\n+        fn parse_expr(&self, s: ~str) -> @ast::Expr {\n             parse::parse_expr_from_source_str(\n                 @\"<quote expansion>\",\n                 s,\n                 self.cfg(),\n                 self.parse_sess())\n         }\n \n-        fn parse_tts(&self, s: @str) -> ~[ast::TokenTree] {\n+        fn parse_tts(&self, s: ~str) -> ~[ast::TokenTree] {\n             parse::parse_tts_from_source_str(\n                 @\"<quote expansion>\",\n                 s,"}, {"sha": "1367ab0677ed0054ef574cdc8523b4970156bfa7", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -114,11 +114,11 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         Some(src) => {\n             // Add this input file to the code map to make it available as\n             // dependency information\n-            let src = src.to_managed();\n             let filename = file.display().to_str().to_managed();\n+            let interned = token::intern_and_get_ident(src);\n             cx.parse_sess.cm.new_filemap(filename, src);\n \n-            base::MRExpr(cx.expr_str(sp, token::intern_and_get_ident(src)))\n+            base::MRExpr(cx.expr_str(sp, interned))\n         }\n         None => {\n             cx.span_err(sp, format!(\"{} wasn't a utf-8 file\", file.display()));"}, {"sha": "bbd0e00f4dd85fb1131815d00730ace593989520", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -350,7 +350,7 @@ pub fn gather_comments_and_literals(span_diagnostic:\n                                     path: @str,\n                                     srdr: &mut io::Reader)\n                                  -> (~[Comment], ~[Literal]) {\n-    let src = str::from_utf8_owned(srdr.read_to_end()).unwrap().to_managed();\n+    let src = str::from_utf8_owned(srdr.read_to_end()).unwrap();\n     let cm = CodeMap::new();\n     let filemap = cm.new_filemap(path, src);\n     let rdr = lexer::new_low_level_string_reader(span_diagnostic, filemap);"}, {"sha": "e7bc5ff3df3f6fa4f8d1f7dacd7f79a619c75271", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 41, "deletions": 47, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -89,25 +89,23 @@ pub fn parse_crate_attrs_from_file(\n     return inner;\n }\n \n-pub fn parse_crate_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    sess: @ParseSess\n-) -> ast::Crate {\n+pub fn parse_crate_from_source_str(name: @str,\n+                                   source: ~str,\n+                                   cfg: ast::CrateConfig,\n+                                   sess: @ParseSess)\n+                                   -> ast::Crate {\n     let mut p = new_parser_from_source_str(sess,\n                                            /*bad*/ cfg.clone(),\n                                            name,\n                                            source);\n     maybe_aborted(p.parse_crate_mod(),p)\n }\n \n-pub fn parse_crate_attrs_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    sess: @ParseSess\n-) -> ~[ast::Attribute] {\n+pub fn parse_crate_attrs_from_source_str(name: @str,\n+                                         source: ~str,\n+                                         cfg: ast::CrateConfig,\n+                                         sess: @ParseSess)\n+                                         -> ~[ast::Attribute] {\n     let mut p = new_parser_from_source_str(sess,\n                                            /*bad*/ cfg.clone(),\n                                            name,\n@@ -116,44 +114,40 @@ pub fn parse_crate_attrs_from_source_str(\n     return inner;\n }\n \n-pub fn parse_expr_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    sess: @ParseSess\n-) -> @ast::Expr {\n+pub fn parse_expr_from_source_str(name: @str,\n+                                  source: ~str,\n+                                  cfg: ast::CrateConfig,\n+                                  sess: @ParseSess)\n+                                  -> @ast::Expr {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n     maybe_aborted(p.parse_expr(), p)\n }\n \n-pub fn parse_item_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    sess: @ParseSess\n-) -> Option<@ast::Item> {\n+pub fn parse_item_from_source_str(name: @str,\n+                                  source: ~str,\n+                                  cfg: ast::CrateConfig,\n+                                  sess: @ParseSess)\n+                                  -> Option<@ast::Item> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n     let attrs = p.parse_outer_attributes();\n     maybe_aborted(p.parse_item(attrs),p)\n }\n \n-pub fn parse_meta_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    sess: @ParseSess\n-) -> @ast::MetaItem {\n+pub fn parse_meta_from_source_str(name: @str,\n+                                  source: ~str,\n+                                  cfg: ast::CrateConfig,\n+                                  sess: @ParseSess)\n+                                  -> @ast::MetaItem {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n     maybe_aborted(p.parse_meta_item(),p)\n }\n \n-pub fn parse_stmt_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    attrs: ~[ast::Attribute],\n-    sess: @ParseSess\n-) -> @ast::Stmt {\n+pub fn parse_stmt_from_source_str(name: @str,\n+                                  source: ~str,\n+                                  cfg: ast::CrateConfig,\n+                                  attrs: ~[ast::Attribute],\n+                                  sess: @ParseSess)\n+                                  -> @ast::Stmt {\n     let mut p = new_parser_from_source_str(\n         sess,\n         cfg,\n@@ -163,12 +157,11 @@ pub fn parse_stmt_from_source_str(\n     maybe_aborted(p.parse_stmt(attrs),p)\n }\n \n-pub fn parse_tts_from_source_str(\n-    name: @str,\n-    source: @str,\n-    cfg: ast::CrateConfig,\n-    sess: @ParseSess\n-) -> ~[ast::TokenTree] {\n+pub fn parse_tts_from_source_str(name: @str,\n+                                 source: ~str,\n+                                 cfg: ast::CrateConfig,\n+                                 sess: @ParseSess)\n+                                 -> ~[ast::TokenTree] {\n     let mut p = new_parser_from_source_str(\n         sess,\n         cfg,\n@@ -184,8 +177,8 @@ pub fn parse_tts_from_source_str(\n pub fn new_parser_from_source_str(sess: @ParseSess,\n                                   cfg: ast::CrateConfig,\n                                   name: @str,\n-                                  source: @str)\n-                               -> Parser {\n+                                  source: ~str)\n+                                  -> Parser {\n     filemap_to_parser(sess,string_to_filemap(sess,source,name),cfg)\n }\n \n@@ -248,7 +241,8 @@ pub fn file_to_filemap(sess: @ParseSess, path: &Path, spanopt: Option<Span>)\n     };\n     match str::from_utf8_owned(bytes) {\n         Some(s) => {\n-            return string_to_filemap(sess, s.to_managed(),\n+            return string_to_filemap(sess,\n+                                     s,\n                                      path.as_str().unwrap().to_managed());\n         }\n         None => {\n@@ -260,7 +254,7 @@ pub fn file_to_filemap(sess: @ParseSess, path: &Path, spanopt: Option<Span>)\n \n // given a session and a string, add the string to\n // the session's codemap and return the new filemap\n-pub fn string_to_filemap(sess: @ParseSess, source: @str, path: @str)\n+pub fn string_to_filemap(sess: @ParseSess, source: ~str, path: @str)\n     -> @FileMap {\n     sess.cm.new_filemap(path, source)\n }"}, {"sha": "02bfa31d0e1a1fb1794e6e097b7336a312b24706", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=e68108b3e8b8eaef62bb7b7340a77b96fcfc51cd", "patch": "@@ -17,72 +17,72 @@ use parse::token;\n \n // map a string to tts, using a made-up filename: return both the TokenTree's\n // and the ParseSess\n-pub fn string_to_tts_and_sess (source_str : @str) -> (~[ast::TokenTree], @ParseSess) {\n+pub fn string_to_tts_and_sess (source_str : ~str) -> (~[ast::TokenTree], @ParseSess) {\n     let ps = new_parse_sess(None);\n     (filemap_to_tts(ps,string_to_filemap(ps,source_str,@\"bogofile\")),ps)\n }\n \n // map a string to tts, using a made-up filename:\n-pub fn string_to_tts(source_str : @str) -> ~[ast::TokenTree] {\n+pub fn string_to_tts(source_str : ~str) -> ~[ast::TokenTree] {\n     let (tts,_) = string_to_tts_and_sess(source_str);\n     tts\n }\n \n-pub fn string_to_parser_and_sess(source_str: @str) -> (Parser,@ParseSess) {\n+pub fn string_to_parser_and_sess(source_str: ~str) -> (Parser,@ParseSess) {\n     let ps = new_parse_sess(None);\n     (new_parser_from_source_str(ps,~[],@\"bogofile\",source_str),ps)\n }\n \n // map string to parser (via tts)\n-pub fn string_to_parser(source_str: @str) -> Parser {\n+pub fn string_to_parser(source_str: ~str) -> Parser {\n     let (p,_) = string_to_parser_and_sess(source_str);\n     p\n }\n \n-fn with_error_checking_parse<T>(s: @str, f: |&mut Parser| -> T) -> T {\n+fn with_error_checking_parse<T>(s: ~str, f: |&mut Parser| -> T) -> T {\n     let mut p = string_to_parser(s);\n     let x = f(&mut p);\n     p.abort_if_errors();\n     x\n }\n \n // parse a string, return a crate.\n-pub fn string_to_crate (source_str : @str) -> ast::Crate {\n+pub fn string_to_crate (source_str : ~str) -> ast::Crate {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_crate_mod()\n     })\n }\n \n // parse a string, return a crate and the ParseSess\n-pub fn string_to_crate_and_sess (source_str : @str) -> (ast::Crate,@ParseSess) {\n+pub fn string_to_crate_and_sess (source_str : ~str) -> (ast::Crate,@ParseSess) {\n     let (mut p,ps) = string_to_parser_and_sess(source_str);\n     (p.parse_crate_mod(),ps)\n }\n \n // parse a string, return an expr\n-pub fn string_to_expr (source_str : @str) -> @ast::Expr {\n+pub fn string_to_expr (source_str : ~str) -> @ast::Expr {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_expr()\n     })\n }\n \n // parse a string, return an item\n-pub fn string_to_item (source_str : @str) -> Option<@ast::Item> {\n+pub fn string_to_item (source_str : ~str) -> Option<@ast::Item> {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_item(~[])\n     })\n }\n \n // parse a string, return a stmt\n-pub fn string_to_stmt(source_str : @str) -> @ast::Stmt {\n+pub fn string_to_stmt(source_str : ~str) -> @ast::Stmt {\n     with_error_checking_parse(source_str, |p| {\n         p.parse_stmt(~[])\n     })\n }\n \n // parse a string, return a pat. Uses \"irrefutable\"... which doesn't\n // (currently) affect parsing.\n-pub fn string_to_pat(source_str : @str) -> @ast::Pat {\n+pub fn string_to_pat(source_str : ~str) -> @ast::Pat {\n     string_to_parser(source_str).parse_pat()\n }\n "}]}