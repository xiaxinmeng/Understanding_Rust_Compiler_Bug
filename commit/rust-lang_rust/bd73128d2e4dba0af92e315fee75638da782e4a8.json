{"sha": "bd73128d2e4dba0af92e315fee75638da782e4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNzMxMjhkMmU0ZGJhMGFmOTJlMzE1ZmVlNzU2MzhkYTc4MmU0YTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-04T16:40:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T15:59:31Z"}, "message": "Implement lt, le, ge and gt for fat pointers", "tree": {"sha": "186045102711fcbc2551fc44526534fd6ead4f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186045102711fcbc2551fc44526534fd6ead4f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd73128d2e4dba0af92e315fee75638da782e4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd73128d2e4dba0af92e315fee75638da782e4a8", "html_url": "https://github.com/rust-lang/rust/commit/bd73128d2e4dba0af92e315fee75638da782e4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd73128d2e4dba0af92e315fee75638da782e4a8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0779d5d1dd03ecb4d507e236b2a642636e62ca1", "html_url": "https://github.com/rust-lang/rust/commit/c0779d5d1dd03ecb4d507e236b2a642636e62ca1"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "3f5b003a24de83e42d99ab2c0c8e9691ec84f6f2", "filename": "src/base.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bd73128d2e4dba0af92e315fee75638da782e4a8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd73128d2e4dba0af92e315fee75638da782e4a8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bd73128d2e4dba0af92e315fee75638da782e4a8", "patch": "@@ -1052,6 +1052,7 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n     } else {\n         let (lhs_ptr, lhs_extra) = lhs.load_scalar_pair(fx);\n         let (rhs_ptr, rhs_extra) = rhs.load_scalar_pair(fx);\n+\n         let res = match bin_op {\n             BinOp::Eq => {\n                 let ptr_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_ptr, rhs_ptr);\n@@ -1063,10 +1064,28 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n                 let extra_ne = fx.bcx.ins().icmp(IntCC::NotEqual, lhs_extra, rhs_extra);\n                 fx.bcx.ins().bor(ptr_ne, extra_ne)\n             }\n-            _ => unimplemented!(\n-                \"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\",\n-                bin_op\n-            ),\n+            BinOp::Lt | BinOp::Le | BinOp::Ge | BinOp::Gt => {\n+                let ptr_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_ptr, rhs_ptr);\n+\n+                let ptr_cmp = fx.bcx.ins().icmp(match bin_op {\n+                    BinOp::Lt => IntCC::UnsignedLessThan,\n+                    BinOp::Le => IntCC::UnsignedLessThanOrEqual,\n+                    BinOp::Ge => IntCC::UnsignedGreaterThanOrEqual,\n+                    BinOp::Gt => IntCC::UnsignedGreaterThan,\n+                    _ => unreachable!(),\n+                }, lhs_ptr, rhs_ptr);\n+\n+                let extra_cmp = fx.bcx.ins().icmp(match bin_op {\n+                    BinOp::Lt => IntCC::UnsignedLessThan,\n+                    BinOp::Le => IntCC::UnsignedLessThanOrEqual,\n+                    BinOp::Ge => IntCC::UnsignedGreaterThanOrEqual,\n+                    BinOp::Gt => IntCC::UnsignedGreaterThan,\n+                    _ => unreachable!(),\n+                }, lhs_extra, rhs_extra);\n+\n+                fx.bcx.ins().select(ptr_eq, extra_cmp, ptr_cmp)\n+            }\n+            _ => panic!(\"bin_op {:?} on ptr\", bin_op),\n         };\n \n         assert_eq!(fx.tcx.types.bool, ret_ty);"}]}