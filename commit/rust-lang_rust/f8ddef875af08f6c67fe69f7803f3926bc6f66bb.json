{"sha": "f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZGRlZjg3NWFmMDhmNmM2N2ZlNjlmNzgwM2YzOTI2YmM2ZjY2YmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T14:19:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T14:43:14Z"}, "message": "remove forward pointer for name", "tree": {"sha": "ed4704070c4e5bb9db7225b1f5af753b83864661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4704070c4e5bb9db7225b1f5af753b83864661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "html_url": "https://github.com/rust-lang/rust/commit/f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e620c052016010b2f17070a98bdc1e7e849ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e620c052016010b2f17070a98bdc1e7e849ab3", "html_url": "https://github.com/rust-lang/rust/commit/16e620c052016010b2f17070a98bdc1e7e849ab3"}], "stats": {"total": 95, "additions": 52, "deletions": 43}, "files": [{"sha": "ce64980bbceb5a90b7e75c43a3ada1c1508f0682", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -3,13 +3,14 @@\n \n use std::sync::Arc;\n \n+use hir_def::name::AsName;\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     type_ref::TypeRef,\n-    AsName, Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n+    Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n };\n \n impl Struct {"}, {"sha": "7848d0a3f62800a362de9832368a674171c40238", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -5,7 +5,13 @@ pub(crate) mod docs;\n \n use std::sync::Arc;\n \n-use hir_def::{CrateModuleId, ModuleId};\n+use hir_def::{\n+    name::{\n+        self, AsName, BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128,\n+        U16, U32, U64, U8, USIZE,\n+    },\n+    CrateModuleId, ModuleId,\n+};\n use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n@@ -20,10 +26,6 @@ use crate::{\n         TypeAliasId,\n     },\n     impl_block::ImplBlock,\n-    name::{\n-        BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128, U16, U32, U64,\n-        U8, USIZE,\n-    },\n     nameres::{ImportId, ModuleScope, Namespace},\n     resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n@@ -33,7 +35,7 @@ use crate::{\n     },\n     type_ref::Mutability,\n     type_ref::TypeRef,\n-    AsName, Either, HasSource, Name, Ty,\n+    Either, HasSource, Name, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -898,9 +900,7 @@ impl Trait {\n             .where_predicates\n             .iter()\n             .filter_map(|pred| match &pred.type_ref {\n-                TypeRef::Path(p) if p.as_ident() == Some(&crate::name::SELF_TYPE) => {\n-                    pred.bound.as_path()\n-                }\n+                TypeRef::Path(p) if p.as_ident() == Some(&name::SELF_TYPE) => pred.bound.as_path(),\n                 _ => None,\n             })\n             .filter_map(|path| match resolver.resolve_path_in_type_ns_fully(db, path) {"}, {"sha": "cf8a41b1e862c2889b724a38104c60ca560d84ee", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use hir_def::name::{self, AsName, Name};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n@@ -12,7 +13,6 @@ use test_utils::tested_by;\n \n use crate::{\n     db::HirDatabase,\n-    name::{AsName, Name, SELF_PARAM},\n     path::GenericArgs,\n     ty::primitive::{FloatTy, IntTy, UncertainFloatTy, UncertainIntTy},\n     type_ref::TypeRef,\n@@ -78,7 +78,7 @@ where\n                 let ptr = AstPtr::new(&self_param);\n                 let param_pat = self.alloc_pat(\n                     Pat::Bind {\n-                        name: SELF_PARAM,\n+                        name: name::SELF_PARAM,\n                         mode: BindingAnnotation::Unannotated,\n                         subpat: None,\n                     },"}, {"sha": "b9fbaa367f212aa521cd6fec6df20d3e95bd3644", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n+use hir_def::name::AsName;\n use ra_syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n-    name::AsName,\n     AstId, Const, Crate, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock, Module,\n     ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias, Union, VariantDef,\n };"}, {"sha": "61786a61494159e2f0f6d829c4320aeec7efc457", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -5,15 +5,15 @@\n \n use std::sync::Arc;\n \n+use hir_def::name::{self, AsName};\n use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    name::SELF_TYPE,\n     path::Path,\n     type_ref::{TypeBound, TypeRef},\n-    Adt, AsName, Const, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n-    Trait, TypeAlias, Union,\n+    Adt, Const, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -94,11 +94,15 @@ impl GenericParams {\n             GenericDef::Adt(Adt::Enum(it)) => generics.fill(&it.source(db).ast, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n-                generics.params.push(GenericParam { idx: start, name: SELF_TYPE, default: None });\n+                generics.params.push(GenericParam {\n+                    idx: start,\n+                    name: name::SELF_TYPE,\n+                    default: None,\n+                });\n                 generics.fill(&it.source(db).ast, start + 1);\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n-                let self_param = TypeRef::Path(SELF_TYPE.into());\n+                let self_param = TypeRef::Path(name::SELF_TYPE.into());\n                 generics.fill_bounds(&it.source(db).ast, self_param);\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&it.source(db).ast, start),"}, {"sha": "6209114593ea74a8f239bbc0e71bfa2c8724b080", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -36,7 +36,6 @@ mod path;\n pub mod source_binder;\n \n mod ids;\n-mod name;\n mod nameres;\n mod adt;\n mod traits;\n@@ -61,7 +60,7 @@ mod marks;\n \n use hir_expand::AstId;\n \n-use crate::{ids::MacroFileKind, name::AsName, resolve::Resolver};\n+use crate::{ids::MacroFileKind, resolve::Resolver};\n \n pub use crate::{\n     adt::VariantDef,\n@@ -71,7 +70,6 @@ pub use crate::{\n     generics::{GenericDef, GenericParam, GenericParams, HasGenericParams},\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     impl_block::ImplBlock,\n-    name::Name,\n     nameres::{ImportId, Namespace, PerNs},\n     path::{Path, PathKind},\n     resolve::ScopeDef,\n@@ -89,3 +87,5 @@ pub use self::code_model::{\n     Enum, EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n+\n+pub use hir_def::name::Name;"}, {"sha": "cf66f88adf7a78bdfbe04e672d2f52b12c199ab6", "filename": "crates/ra_hir/src/name.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16e620c052016010b2f17070a98bdc1e7e849ab3/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e620c052016010b2f17070a98bdc1e7e849ab3/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=16e620c052016010b2f17070a98bdc1e7e849ab3", "patch": "@@ -1 +0,0 @@\n-pub use hir_def::name::*;"}, {"sha": "1f3849dc76d18de153cfc09cc39e386999b261f2", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::nameres::raw;\n+use hir_def::{name, nameres::raw};\n use ra_cfg::CfgOptions;\n use ra_db::FileId;\n use ra_syntax::{ast, SmolStr};\n@@ -11,7 +11,6 @@ use crate::{\n     attr::Attr,\n     db::DefDatabase,\n     ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n-    name::MACRO_RULES,\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, Crate, CrateDefMap, CrateModuleId,\n         ModuleData, ModuleDef, PerNs, ReachedFixedPoint, Resolution, ResolveMode,\n@@ -726,7 +725,7 @@ where\n }\n \n fn is_macro_rules(path: &Path) -> bool {\n-    path.as_ident() == Some(&MACRO_RULES)\n+    path.as_ident() == Some(&name::MACRO_RULES)\n }\n \n #[cfg(test)]"}, {"sha": "b9459552b668aaf47334cc6ecaed9832cf9c5de4", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -1,7 +1,10 @@\n //! Name resolution.\n use std::sync::Arc;\n \n-use hir_def::CrateModuleId;\n+use hir_def::{\n+    name::{self, Name},\n+    CrateModuleId,\n+};\n use rustc_hash::FxHashSet;\n \n use crate::{\n@@ -13,7 +16,6 @@ use crate::{\n     },\n     generics::GenericParams,\n     impl_block::ImplBlock,\n-    name::{Name, SELF_PARAM, SELF_TYPE},\n     nameres::{CrateDefMap, PerNs},\n     path::{Path, PathKind},\n     Adt, BuiltinType, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, Static, Struct,\n@@ -150,13 +152,13 @@ impl Resolver {\n                     }\n                 }\n                 Scope::ImplBlockScope(impl_) => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::SelfType(*impl_), idx));\n                     }\n                 }\n                 Scope::AdtScope(adt) => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::AdtSelfType(*adt), idx));\n                     }\n@@ -205,7 +207,7 @@ impl Resolver {\n             return None;\n         }\n         let n_segments = path.segments.len();\n-        let tmp = SELF_PARAM;\n+        let tmp = name::SELF_PARAM;\n         let first_name = if path.is_self() { &tmp } else { &path.segments.first()?.name };\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n         for scope in self.scopes.iter().rev() {\n@@ -241,13 +243,13 @@ impl Resolver {\n                 Scope::GenericParams(_) => continue,\n \n                 Scope::ImplBlockScope(impl_) if n_segments > 1 => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let ty = TypeNs::SelfType(*impl_);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n                 Scope::AdtScope(adt) if n_segments > 1 => {\n-                    if first_name == &SELF_TYPE {\n+                    if first_name == &name::SELF_TYPE {\n                         let ty = TypeNs::AdtSelfType(*adt);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n@@ -459,10 +461,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(SELF_TYPE, ScopeDef::ImplSelfType(*i));\n+                f(name::SELF_TYPE, ScopeDef::ImplSelfType(*i));\n             }\n             Scope::AdtScope(i) => {\n-                f(SELF_TYPE, ScopeDef::AdtSelfType(*i));\n+                f(name::SELF_TYPE, ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(e) => {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {"}, {"sha": "8a1fa29a42c2ff267341da4dd4cf109361d2ce12", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -7,6 +7,7 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n+use hir_def::name::AsName;\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -27,8 +28,8 @@ use crate::{\n     path::known,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::implements_trait,\n-    AsName, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, MacroDef,\n-    Module, Name, Path, Resolver, Static, Struct, Ty,\n+    Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, MacroDef, Module,\n+    Name, Path, Resolver, Static, Struct, Ty,\n };\n \n fn try_get_resolver_for_node("}, {"sha": "514c813ab1c9cdaa1a1f363bcedeeafe46f82d4a", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -1,14 +1,14 @@\n //! HIR for trait definitions.\n \n-use rustc_hash::FxHashMap;\n use std::sync::Arc;\n \n+use hir_def::name::AsName;\n use ra_syntax::ast::{self, NameOwner};\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     db::{AstDatabase, DefDatabase},\n     ids::LocationCtx,\n-    name::AsName,\n     AssocItem, Const, Function, HasSource, Module, Name, Trait, TypeAlias,\n };\n "}, {"sha": "03c45546d2df66b3dc159acf6379b1dce4ed0afc", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -5,10 +5,11 @@\n \n use std::iter::successors;\n \n+use hir_def::name;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n-use crate::{db::HirDatabase, name, HasGenericParams, Resolver};\n+use crate::{db::HirDatabase, HasGenericParams, Resolver};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n "}, {"sha": "92b8e718ea0911f1d9b436fa8c60c4df63626c70", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -21,6 +21,7 @@ use std::sync::Arc;\n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n+use hir_def::name;\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use test_utils::tested_by;\n@@ -37,7 +38,6 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::DiagnosticSink,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n-    name,\n     path::known,\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,"}, {"sha": "7ef87bfe2a94c36fec4fdeb6e04887c12f008a2d", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -3,12 +3,13 @@\n use std::iter::{repeat, repeat_with};\n use std::sync::Arc;\n \n+use hir_def::name;\n+\n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n use crate::{\n     db::HirDatabase,\n     expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n-    name,\n     nameres::Namespace,\n     path::{GenericArg, GenericArgs},\n     ty::{"}, {"sha": "2dd4c2fae52980d81dac578285f065d232fe5664", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -9,6 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n \n+use hir_def::name;\n use ra_db::salsa::{InternId, InternKey};\n \n use super::{Canonical, ChalkContext, Impl, Obligation};\n@@ -734,7 +735,7 @@ fn closure_fn_trait_impl_datum(\n         substs: Substs::build_for_def(db, trait_).push(self_ty).push(arg_ty).build(),\n     };\n \n-    let output_ty_id = fn_once_trait.associated_type_by_name(db, &crate::name::OUTPUT_TYPE)?;\n+    let output_ty_id = fn_once_trait.associated_type_by_name(db, &name::OUTPUT_TYPE)?;\n \n     let output_ty_value = chalk_rust_ir::AssociatedTyValue {\n         associated_ty_id: output_ty_id.to_chalk(db),"}, {"sha": "18c01e1b92550c7fbfb2bc03ea3bd8e14f9f23a9", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ddef875af08f6c67fe69f7803f3926bc6f66bb/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=f8ddef875af08f6c67fe69f7803f3926bc6f66bb", "patch": "@@ -2,11 +2,11 @@\n \n use std::sync::Arc;\n \n+use hir_def::name::{AsName, Name};\n use ra_syntax::ast::NameOwner;\n \n use crate::{\n     db::{AstDatabase, DefDatabase},\n-    name::{AsName, Name},\n     type_ref::TypeRef,\n     HasSource, TypeAlias,\n };"}]}