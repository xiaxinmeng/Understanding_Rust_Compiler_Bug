{"sha": "69de7e2fd71c3a808f0ac856d7b105eeb210f169", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZGU3ZTJmZDcxYzNhODA4ZjBhYzg1NmQ3YjEwNWVlYjIxMGYxNjk=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-07T20:44:25Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-10-07T21:03:38Z"}, "message": "Refactor vscode extension", "tree": {"sha": "62a163c43cb710cff18de6c7e8e47a81038ad1bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a163c43cb710cff18de6c7e8e47a81038ad1bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69de7e2fd71c3a808f0ac856d7b105eeb210f169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69de7e2fd71c3a808f0ac856d7b105eeb210f169", "html_url": "https://github.com/rust-lang/rust/commit/69de7e2fd71c3a808f0ac856d7b105eeb210f169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69de7e2fd71c3a808f0ac856d7b105eeb210f169/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4fdfd15012c983e4555996aa466b57d787e4385", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fdfd15012c983e4555996aa466b57d787e4385", "html_url": "https://github.com/rust-lang/rust/commit/e4fdfd15012c983e4555996aa466b57d787e4385"}], "stats": {"total": 933, "additions": 518, "deletions": 415}, "files": [{"sha": "99cac3379e435c3c91ba2d054fcb6d7809c186b4", "filename": "editors/code/src/commands.ts", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,17 @@\n+import * as applySourceChange from './commands/apply_source_change';\n+import * as extendSelection from './commands/extend_selection';\n+import * as joinLines from './commands/join_lines';\n+import * as matchingBrace from './commands/matching_brace';\n+import * as parentModule from './commands/parent_module';\n+import * as runnables from './commands/runnables';\n+import * as syntaxTree from './commands/syntaxTree';\n+\n+export {\n+    applySourceChange,\n+    extendSelection,\n+    joinLines,\n+    matchingBrace,\n+    parentModule,\n+    runnables,\n+    syntaxTree\n+}"}, {"sha": "dcbbb2b098441375d9c3e077c62676b00909096d", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,58 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient'\n+\n+import { Server } from '../server';\n+\n+interface FileSystemEdit {\n+    type: string;\n+    uri?: string;\n+    src?: string;\n+    dst?: string;\n+}\n+\n+export interface SourceChange {\n+    label: string,\n+    sourceFileEdits: lc.TextDocumentEdit[],\n+    fileSystemEdits: FileSystemEdit[],\n+    cursorPosition?: lc.TextDocumentPositionParams,\n+}\n+\n+export async function handle(change: SourceChange) {\n+    console.log(`applySOurceChange ${JSON.stringify(change)}`)\n+    let wsEdit = new vscode.WorkspaceEdit()\n+    for (let sourceEdit of change.sourceFileEdits) {\n+        let uri = Server.client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri)\n+        let edits = Server.client.protocol2CodeConverter.asTextEdits(sourceEdit.edits)\n+        wsEdit.set(uri, edits)\n+    }\n+    let created;\n+    let moved;\n+    for (let fsEdit of change.fileSystemEdits) {\n+        if (fsEdit.type == \"createFile\") {\n+            let uri = vscode.Uri.parse(fsEdit.uri!)\n+            wsEdit.createFile(uri)\n+            created = uri\n+        } else if (fsEdit.type == \"moveFile\") {\n+            let src = vscode.Uri.parse(fsEdit.src!)\n+            let dst = vscode.Uri.parse(fsEdit.dst!)\n+            wsEdit.renameFile(src, dst)\n+            moved = dst\n+        } else {\n+            console.error(`unknown op: ${JSON.stringify(fsEdit)}`)\n+        }\n+    }\n+    let toOpen = created || moved\n+    let toReveal = change.cursorPosition\n+    await vscode.workspace.applyEdit(wsEdit)\n+    if (toOpen) {\n+        let doc = await vscode.workspace.openTextDocument(toOpen)\n+        await vscode.window.showTextDocument(doc)\n+    } else if (toReveal) {\n+        let uri = Server.client.protocol2CodeConverter.asUri(toReveal.textDocument.uri)\n+        let position = Server.client.protocol2CodeConverter.asPosition(toReveal.position)\n+        let editor = vscode.window.activeTextEditor;\n+        if (!editor || editor.document.uri.toString() != uri.toString()) return\n+        if (!editor.selection.isEmpty) return\n+        editor!.selection = new vscode.Selection(position, position)\n+    }\n+}"}, {"sha": "b90828ba9bab88d0d24ed4e3343a0b8177f4eb5d", "filename": "editors/code/src/commands/extend_selection.ts", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fextend_selection.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,29 @@\n+import * as vscode from 'vscode';\n+\n+import { TextDocumentIdentifier, Range } from \"vscode-languageclient\";\n+import { Server } from '../server';\n+\n+interface ExtendSelectionParams {\n+    textDocument: TextDocumentIdentifier;\n+    selections: Range[];\n+}\n+\n+interface ExtendSelectionResult {\n+    selections: Range[];\n+}\n+\n+export async function handle() {\n+    let editor = vscode.window.activeTextEditor\n+    if (editor == null || editor.document.languageId != \"rust\") return\n+    let request: ExtendSelectionParams = {\n+        textDocument: { uri: editor.document.uri.toString() },\n+        selections: editor.selections.map((s) => {\n+            return Server.client.code2ProtocolConverter.asRange(s)\n+        })\n+    }\n+    let response = await Server.client.sendRequest<ExtendSelectionResult>(\"m/extendSelection\", request)\n+    editor.selections = response.selections.map((range: Range) => {\n+        let r = Server.client.protocol2CodeConverter.asRange(range)\n+        return new vscode.Selection(r.start, r.end)\n+    })\n+}"}, {"sha": "7ae7b9d76011a1f8f033c0c68bd57e2d7717f42b", "filename": "editors/code/src/commands/join_lines.ts", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,21 @@\n+import * as vscode from 'vscode';\n+\n+import { TextDocumentIdentifier, Range } from \"vscode-languageclient\";\n+import { Server } from '../server';\n+import { handle as applySourceChange, SourceChange } from './apply_source_change';\n+\n+interface JoinLinesParams {\n+    textDocument: TextDocumentIdentifier;\n+    range: Range;\n+}\n+\n+export async function handle() {\n+    let editor = vscode.window.activeTextEditor\n+    if (editor == null || editor.document.languageId != \"rust\") return\n+    let request: JoinLinesParams = {\n+        textDocument: { uri: editor.document.uri.toString() },\n+        range: Server.client.code2ProtocolConverter.asRange(editor.selection),\n+    }\n+    let change = await Server.client.sendRequest<SourceChange>(\"m/joinLines\", request)\n+    await applySourceChange(change)\n+}"}, {"sha": "572c15ce830e4ccbac565ad1ae56cde2818250fd", "filename": "editors/code/src/commands/matching_brace.ts", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,27 @@\n+import * as vscode from 'vscode';\n+\n+import { TextDocumentIdentifier, Position } from \"vscode-languageclient\";\n+import { Server } from '../server';\n+\n+interface FindMatchingBraceParams {\n+    textDocument: TextDocumentIdentifier;\n+    offsets: Position[];\n+}\n+\n+export async function handle() {\n+    let editor = vscode.window.activeTextEditor\n+    if (editor == null || editor.document.languageId != \"rust\") return\n+    let request: FindMatchingBraceParams = {\n+        textDocument: { uri: editor.document.uri.toString() },\n+        offsets: editor.selections.map((s) => {\n+            return Server.client.code2ProtocolConverter.asPosition(s.active)\n+        })\n+    }\n+    let response = await Server.client.sendRequest<Position[]>(\"m/findMatchingBrace\", request)\n+    editor.selections = editor.selections.map((sel, idx) => {\n+        let active = Server.client.protocol2CodeConverter.asPosition(response[idx])\n+        let anchor = sel.isEmpty ? active : sel.anchor\n+        return new vscode.Selection(anchor, active)\n+    })\n+    editor.revealRange(editor.selection)\n+};"}, {"sha": "dae60bfb4a3bfeca3ab70d20906e548250a54698", "filename": "editors/code/src/commands/parent_module.ts", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,22 @@\n+import * as vscode from 'vscode';\n+\n+import { TextDocumentIdentifier, Location } from \"vscode-languageclient\";\n+import { Server } from '../server';\n+\n+export async function handle() {\n+    let editor = vscode.window.activeTextEditor\n+    if (editor == null || editor.document.languageId != \"rust\") return\n+    let request: TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString()\n+    }\n+    let response = await Server.client.sendRequest<Location[]>(\"m/parentModule\", request)\n+    let loc = response[0]\n+    if (loc == null) return\n+    let uri = Server.client.protocol2CodeConverter.asUri(loc.uri)\n+    let range = Server.client.protocol2CodeConverter.asRange(loc.range)\n+\n+    let doc = await vscode.workspace.openTextDocument(uri)\n+    let e = await vscode.window.showTextDocument(doc)\n+    e.selection = new vscode.Selection(range.start, range.start)\n+    e.revealRange(range, vscode.TextEditorRevealType.InCenter)\n+}"}, {"sha": "45c16497dbeadc63bd789b91d1736820b7156d54", "filename": "editors/code/src/commands/runnables.ts", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,88 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient'\n+import { Server } from '../server';\n+\n+interface RunnablesParams {\n+    textDocument: lc.TextDocumentIdentifier,\n+    position?: lc.Position,\n+}\n+\n+interface Runnable {\n+    range: lc.Range;\n+    label: string;\n+    bin: string;\n+    args: string[];\n+    env: { [index: string]: string },\n+}\n+\n+class RunnableQuickPick implements vscode.QuickPickItem {\n+    label: string;\n+    description?: string | undefined;\n+    detail?: string | undefined;\n+    picked?: boolean | undefined;\n+\n+    constructor(public runnable: Runnable) {\n+        this.label = runnable.label\n+    }\n+}\n+\n+interface CargoTaskDefinition extends vscode.TaskDefinition {\n+    type: 'cargo';\n+    label: string;\n+    command: string;\n+    args: Array<string>;\n+    env?: { [key: string]: string };\n+}\n+\n+function createTask(spec: Runnable): vscode.Task {\n+    const TASK_SOURCE = 'Rust';\n+    let definition: CargoTaskDefinition = {\n+        type: 'cargo',\n+        label: 'cargo',\n+        command: spec.bin,\n+        args: spec.args,\n+        env: spec.env\n+    }\n+\n+    let execCmd = `${definition.command} ${definition.args.join(' ')}`;\n+    let execOption: vscode.ShellExecutionOptions = {\n+        cwd: '.',\n+        env: definition.env,\n+    };\n+    let exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n+\n+    let f = vscode.workspace.workspaceFolders![0]\n+    let t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n+    return t;\n+}\n+\n+let prevRunnable: RunnableQuickPick | undefined = undefined\n+export async function handle() {\n+    let editor = vscode.window.activeTextEditor\n+    if (editor == null || editor.document.languageId != \"rust\") return\n+    let textDocument: lc.TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString()\n+    }\n+    let params: RunnablesParams = {\n+        textDocument,\n+        position: Server.client.code2ProtocolConverter.asPosition(editor.selection.active)\n+    }\n+    let runnables = await Server.client.sendRequest<Runnable[]>('m/runnables', params)\n+    let items: RunnableQuickPick[] = []\n+    if (prevRunnable) {\n+        items.push(prevRunnable)\n+    }\n+    for (let r of runnables) {\n+        if (prevRunnable && JSON.stringify(prevRunnable.runnable) == JSON.stringify(r)) {\n+            continue\n+        }\n+        items.push(new RunnableQuickPick(r))\n+    }\n+    let item = await vscode.window.showQuickPick(items)\n+    if (item) {\n+        item.detail = \"rerun\"\n+        prevRunnable = item\n+        let task = createTask(item.runnable)\n+        return await vscode.tasks.executeTask(task)\n+    }\n+}"}, {"sha": "d5daa9302c6a509f1d26527bf916b9bd02bddabe", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,38 @@\n+import * as vscode from 'vscode';\n+import { TextDocumentIdentifier } from 'vscode-languageclient';\n+\n+import { Server } from '../server';\n+\n+export const syntaxTreeUri = vscode.Uri.parse('ra-lsp://syntaxtree');\n+\n+export class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n+    public eventEmitter = new vscode.EventEmitter<vscode.Uri>()\n+    public syntaxTree: string = \"Not available\"\n+\n+    public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n+        let editor = vscode.window.activeTextEditor;\n+        if (editor == null) return \"\"\n+        let request: SyntaxTreeParams = {\n+            textDocument: { uri: editor.document.uri.toString() }\n+        };\n+        return Server.client.sendRequest<SyntaxTreeResult>(\"m/syntaxTree\", request);\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event\n+    }\n+}\n+\n+interface SyntaxTreeParams {\n+    textDocument: TextDocumentIdentifier;\n+}\n+\n+type SyntaxTreeResult = string;\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export async function handle() {\n+    let document = await vscode.workspace.openTextDocument(syntaxTreeUri)\n+    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true)\n+}"}, {"sha": "b143bb2565c7c3b1122625cb8600bd3a4ce4f872", "filename": "editors/code/src/events.ts", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fevents.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fevents.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,7 @@\n+import * as changeActiveTextEditor from './events/change_active_text_editor'\n+import * as changeTextDocument from './events/change_text_document';\n+\n+export {\n+    changeActiveTextEditor,\n+    changeTextDocument\n+}\n\\ No newline at end of file"}, {"sha": "bbdd5309869ed6b034d2d154f818ab785f8f891c", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,14 @@\n+import { TextEditor } from \"vscode\";\n+import { TextDocumentIdentifier } from \"vscode-languageclient\";\n+\n+import { Server } from \"../server\";\n+import { Decoration } from \"../highlighting\";\n+\n+export async function handle(editor: TextEditor | undefined) {\n+    if (!Server.config.highlightingOn || !editor || editor.document.languageId != 'rust') return\n+    let params: TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString()\n+    }\n+    let decorations = await Server.client.sendRequest<Decoration[]>(\"m/decorationsRequest\", params)\n+    Server.highlighter.setHighlights(editor, decorations)\n+}\n\\ No newline at end of file"}, {"sha": "83ee6c9ee99747f30668ef0b935ab9b719e432d0", "filename": "editors/code/src/events/change_text_document.ts", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,19 @@\n+import * as vscode from 'vscode';\n+\n+import { syntaxTreeUri, TextDocumentContentProvider } from '../commands/syntaxTree';\n+\n+export function createHandler(textDocumentContentProvider: TextDocumentContentProvider) {\n+    return (event: vscode.TextDocumentChangeEvent) => {\n+        let doc = event.document\n+        if (doc.languageId != \"rust\") return\n+        afterLs(() => {\n+            textDocumentContentProvider.eventEmitter.fire(syntaxTreeUri);\n+        })\n+    }\n+}\n+\n+// We need to order this after LS updates, but there's no API for that.\n+// Hence, good old setTimeout.\n+function afterLs(f: () => any) {\n+    setTimeout(f, 10)\n+}"}, {"sha": "595fb98fe3f9a3fbff4099269c784a5819d77564", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 26, "deletions": 415, "changes": 441, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -1,434 +1,45 @@\n-'use strict';\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient'\n \n-let client: lc.LanguageClient;\n-\n-let uris = {\n-    syntaxTree: vscode.Uri.parse('ra-lsp://syntaxtree')\n-}\n-\n-let highlightingOn = true;\n+import * as commands from './commands'\n+import * as events from './events'\n+import { Server } from './server';\n+import { TextDocumentContentProvider } from './commands/syntaxTree';\n \n export function activate(context: vscode.ExtensionContext) {\n-    let applyHighlightingOn = () => {\n-        let config = vscode.workspace.getConfiguration('ra-lsp');\n-        if (config.has('highlightingOn')) {\n-            highlightingOn = config.get('highlightingOn') as boolean;\n-        };\n-\n-        if (!highlightingOn) {\n-            removeHighlights();\n-        }\n-    };\n-\n-    // Apply the highlightingOn config now and whenever the config changes\n-    applyHighlightingOn();\n-    vscode.workspace.onDidChangeConfiguration(_ => {\n-        applyHighlightingOn();\n-    });\n-\n-    let textDocumentContentProvider = new TextDocumentContentProvider()\n-    let dispose = (disposable: vscode.Disposable) => {\n+    function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n     }\n-    let registerCommand = (name: string, f: any) => {\n-        dispose(vscode.commands.registerCommand(name, f))\n-    }\n-\n-    registerCommand('ra-lsp.syntaxTree', () => openDoc(uris.syntaxTree))\n-    registerCommand('ra-lsp.extendSelection', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: ExtendSelectionParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            selections: editor.selections.map((s) => {\n-                return client.code2ProtocolConverter.asRange(s)\n-            })\n-        }\n-        let response = await client.sendRequest<ExtendSelectionResult>(\"m/extendSelection\", request)\n-        editor.selections = response.selections.map((range) => {\n-            let r = client.protocol2CodeConverter.asRange(range)\n-            return new vscode.Selection(r.start, r.end)\n-        })\n-    })\n-    registerCommand('ra-lsp.matchingBrace', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: FindMatchingBraceParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            offsets: editor.selections.map((s) => {\n-                return client.code2ProtocolConverter.asPosition(s.active)\n-            })\n-        }\n-        let response = await client.sendRequest<lc.Position[]>(\"m/findMatchingBrace\", request)\n-        editor.selections = editor.selections.map((sel, idx) => {\n-            let active = client.protocol2CodeConverter.asPosition(response[idx])\n-            let anchor = sel.isEmpty ? active : sel.anchor\n-            return new vscode.Selection(anchor, active)\n-        })\n-        editor.revealRange(editor.selection)\n-    })\n-    registerCommand('ra-lsp.joinLines', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: JoinLinesParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            range: client.code2ProtocolConverter.asRange(editor.selection),\n-        }\n-        let change = await client.sendRequest<SourceChange>(\"m/joinLines\", request)\n-        await applySourceChange(change)\n-    })\n-    registerCommand('ra-lsp.parentModule', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let request: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n-        }\n-        let response = await client.sendRequest<lc.Location[]>(\"m/parentModule\", request)\n-        let loc = response[0]\n-        if (loc == null) return\n-        let uri = client.protocol2CodeConverter.asUri(loc.uri)\n-        let range = client.protocol2CodeConverter.asRange(loc.range)\n \n-        let doc = await vscode.workspace.openTextDocument(uri)\n-        let e = await vscode.window.showTextDocument(doc)\n-        e.selection = new vscode.Selection(range.start, range.start)\n-        e.revealRange(range, vscode.TextEditorRevealType.InCenter)\n-    })\n+    function registerCommand(name: string, f: any) {\n+        disposeOnDeactivation(vscode.commands.registerCommand(name, f))\n+    }\n \n-    let prevRunnable: RunnableQuickPick | undefined = undefined\n-    registerCommand('ra-lsp.run', async () => {\n-        let editor = vscode.window.activeTextEditor\n-        if (editor == null || editor.document.languageId != \"rust\") return\n-        let textDocument: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n-        }\n-        let params: RunnablesParams = {\n-            textDocument,\n-            position: client.code2ProtocolConverter.asPosition(editor.selection.active)\n-        }\n-        let runnables = await client.sendRequest<Runnable[]>('m/runnables', params)\n-        let items: RunnableQuickPick[] = []\n-        if (prevRunnable) {\n-            items.push(prevRunnable)\n-        }\n-        for (let r of runnables) {\n-            if (prevRunnable && JSON.stringify(prevRunnable.runnable) == JSON.stringify(r)) {\n-                continue\n-            }\n-            items.push(new RunnableQuickPick(r))\n-        }\n-        let item = await vscode.window.showQuickPick(items)\n-        if (item) {\n-            item.detail = \"rerun\"\n-            prevRunnable = item\n-            let task = createTask(item.runnable)\n-            return await vscode.tasks.executeTask(task)\n-        }\n-    })\n-    registerCommand('ra-lsp.applySourceChange', applySourceChange)\n+    registerCommand('ra-lsp.syntaxTree', commands.syntaxTree.handle)\n+    registerCommand('ra-lsp.extendSelection', commands.extendSelection.handle);\n+    registerCommand('ra-lsp.matchingBrace', commands.matchingBrace.handle);\n+    registerCommand('ra-lsp.joinLines', commands.joinLines.handle);\n+    registerCommand('ra-lsp.parentModule', commands.parentModule.handle);\n+    registerCommand('ra-lsp.run', commands.runnables.handle);\n+    registerCommand('ra-lsp.applySourceChange', commands.applySourceChange.handle);\n \n-    dispose(vscode.workspace.registerTextDocumentContentProvider(\n+    let textDocumentContentProvider = new TextDocumentContentProvider()\n+    disposeOnDeactivation(vscode.workspace.registerTextDocumentContentProvider(\n         'ra-lsp',\n         textDocumentContentProvider\n     ))\n-    startServer()\n-    vscode.workspace.onDidChangeTextDocument((event: vscode.TextDocumentChangeEvent) => {\n-        let doc = event.document\n-        if (doc.languageId != \"rust\") return\n-        afterLs(() => {\n-            textDocumentContentProvider.eventEmitter.fire(uris.syntaxTree)\n-        })\n-    }, null, context.subscriptions)\n-    vscode.window.onDidChangeActiveTextEditor(async (editor) => {\n-        if (!highlightingOn || !editor || editor.document.languageId != 'rust') return\n-        let params: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n-        }\n-        let decorations = await client.sendRequest<Decoration[]>(\"m/decorationsRequest\", params)\n-        setHighlights(editor, decorations)\n-    })\n-}\n \n-// We need to order this after LS updates, but there's no API for that.\n-// Hence, good old setTimeout.\n-function afterLs(f: () => any) {\n-    setTimeout(f, 10)\n+    Server.start()\n+\n+    vscode.workspace.onDidChangeTextDocument(\n+        events.changeTextDocument.createHandler(textDocumentContentProvider),\n+        null,\n+        context.subscriptions)\n+    vscode.window.onDidChangeActiveTextEditor(events.changeActiveTextEditor.handle)\n }\n \n export function deactivate(): Thenable<void> {\n-    if (!client) {\n+    if (!Server.client) {\n         return Promise.resolve();\n     }\n-    return client.stop();\n-}\n-\n-function startServer() {\n-    let run: lc.Executable = {\n-        command: \"ra_lsp_server\",\n-        options: { cwd: \".\" }\n-    }\n-    let serverOptions: lc.ServerOptions = {\n-        run,\n-        debug: run\n-    };\n-\n-    let clientOptions: lc.LanguageClientOptions = {\n-        documentSelector: [{ scheme: 'file', language: 'rust' }],\n-    };\n-\n-    client = new lc.LanguageClient(\n-        'ra-lsp',\n-        'rust-analyzer languge server',\n-        serverOptions,\n-        clientOptions,\n-    );\n-    client.onReady().then(() => {\n-        client.onNotification(\n-            \"m/publishDecorations\",\n-            (params: PublishDecorationsParams) => {\n-                let editor = vscode.window.visibleTextEditors.find(\n-                    (editor) => editor.document.uri.toString() == params.uri\n-                )\n-                if (!highlightingOn || !editor) return;\n-                setHighlights(\n-                    editor,\n-                    params.decorations,\n-                )\n-            }\n-        )\n-    })\n-    client.start();\n-}\n-\n-async function openDoc(uri: vscode.Uri) {\n-    let document = await vscode.workspace.openTextDocument(uri)\n-    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true)\n-}\n-\n-class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>()\n-    public syntaxTree: string = \"Not available\"\n-\n-    public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n-        let editor = vscode.window.activeTextEditor;\n-        if (editor == null) return \"\"\n-        let request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() }\n-        };\n-        return client.sendRequest<SyntaxTreeResult>(\"m/syntaxTree\", request);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event\n-    }\n-}\n-\n-let decorations: { [index: string]: vscode.TextEditorDecorationType } = {};\n-\n-function initDecorations() {\n-    const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj })\n-    decorations = {\n-        background: decor(\"#3F3F3F\"),\n-        error: vscode.window.createTextEditorDecorationType({\n-            borderColor: \"red\",\n-            borderStyle: \"none none dashed none\",\n-        }),\n-        comment: decor(\"#7F9F7F\"),\n-        string: decor(\"#CC9393\"),\n-        keyword: decor(\"#F0DFAF\"),\n-        function: decor(\"#93E0E3\"),\n-        parameter: decor(\"#94BFF3\"),\n-        builtin: decor(\"#DD6718\"),\n-        text: decor(\"#DCDCCC\"),\n-        attribute: decor(\"#BFEBBF\"),\n-        literal: decor(\"#DFAF8F\"),\n-    }\n-}\n-\n-function removeHighlights() {\n-    for (let tag in decorations) {\n-        decorations[tag].dispose();\n-    }\n-\n-    decorations = {};\n-}\n-\n-function setHighlights(\n-    editor: vscode.TextEditor,\n-    highlights: Array<Decoration>\n-) {\n-    // Initialize decorations if necessary\n-    //\n-    // Note: decoration objects need to be kept around so we can dispose them\n-    // if the user disables syntax highlighting\n-    if (Object.keys(decorations).length === 0) {\n-        initDecorations();\n-    }\n-\n-    let byTag: Map<string, vscode.Range[]> = new Map()\n-    for (let tag in decorations) {\n-        byTag.set(tag, [])\n-    }\n-\n-    for (let d of highlights) {\n-        if (!byTag.get(d.tag)) {\n-            console.log(`unknown tag ${d.tag}`)\n-            continue\n-        }\n-        byTag.get(d.tag)!.push(\n-            client.protocol2CodeConverter.asRange(d.range)\n-        )\n-    }\n-\n-    for (let tag of byTag.keys()) {\n-        let dec: vscode.TextEditorDecorationType = decorations[tag]\n-        let ranges = byTag.get(tag)!\n-        editor.setDecorations(dec, ranges)\n-    }\n-}\n-\n-interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-}\n-\n-type SyntaxTreeResult = string\n-\n-interface ExtendSelectionParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    selections: lc.Range[];\n-}\n-\n-interface ExtendSelectionResult {\n-    selections: lc.Range[];\n-}\n-\n-interface FindMatchingBraceParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    offsets: lc.Position[];\n-}\n-\n-interface JoinLinesParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n-}\n-\n-interface PublishDecorationsParams {\n-    uri: string,\n-    decorations: Decoration[],\n-}\n-\n-interface RunnablesParams {\n-    textDocument: lc.TextDocumentIdentifier,\n-    position?: lc.Position,\n-}\n-\n-interface Runnable {\n-    range: lc.Range;\n-    label: string;\n-    bin: string;\n-    args: string[];\n-    env: { [index: string]: string },\n-}\n-\n-class RunnableQuickPick implements vscode.QuickPickItem {\n-    label: string;\n-    description?: string | undefined;\n-    detail?: string | undefined;\n-    picked?: boolean | undefined;\n-\n-    constructor(public runnable: Runnable) {\n-        this.label = runnable.label\n-    }\n-}\n-\n-interface Decoration {\n-    range: lc.Range,\n-    tag: string,\n-}\n-\n-\n-interface CargoTaskDefinition extends vscode.TaskDefinition {\n-    type: 'cargo';\n-    label: string;\n-    command: string;\n-    args: Array<string>;\n-    env?: { [key: string]: string };\n-}\n-\n-function createTask(spec: Runnable): vscode.Task {\n-    const TASK_SOURCE = 'Rust';\n-    let definition: CargoTaskDefinition = {\n-        type: 'cargo',\n-        label: 'cargo',\n-        command: spec.bin,\n-        args: spec.args,\n-        env: spec.env\n-    }\n-\n-    let execCmd = `${definition.command} ${definition.args.join(' ')}`;\n-    let execOption: vscode.ShellExecutionOptions = {\n-        cwd: '.',\n-        env: definition.env,\n-    };\n-    let exec = new vscode.ShellExecution(`clear; ${execCmd}`, execOption);\n-\n-    let f = vscode.workspace.workspaceFolders![0]\n-    let t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n-    return t;\n-}\n-\n-interface FileSystemEdit {\n-    type: string;\n-    uri?: string;\n-    src?: string;\n-    dst?: string;\n-}\n-\n-interface SourceChange {\n-    label: string,\n-    sourceFileEdits: lc.TextDocumentEdit[],\n-    fileSystemEdits: FileSystemEdit[],\n-    cursorPosition?: lc.TextDocumentPositionParams,\n-}\n-\n-async function applySourceChange(change: SourceChange) {\n-    console.log(`applySOurceChange ${JSON.stringify(change)}`)\n-    let wsEdit = new vscode.WorkspaceEdit()\n-    for (let sourceEdit of change.sourceFileEdits) {\n-        let uri = client.protocol2CodeConverter.asUri(sourceEdit.textDocument.uri)\n-        let edits = client.protocol2CodeConverter.asTextEdits(sourceEdit.edits)\n-        wsEdit.set(uri, edits)\n-    }\n-    let created;\n-    let moved;\n-    for (let fsEdit of change.fileSystemEdits) {\n-        if (fsEdit.type == \"createFile\") {\n-            let uri = vscode.Uri.parse(fsEdit.uri!)\n-            wsEdit.createFile(uri)\n-            created = uri\n-        } else if (fsEdit.type == \"moveFile\") {\n-            let src = vscode.Uri.parse(fsEdit.src!)\n-            let dst = vscode.Uri.parse(fsEdit.dst!)\n-            wsEdit.renameFile(src, dst)\n-            moved = dst\n-        } else {\n-            console.error(`unknown op: ${JSON.stringify(fsEdit)}`)\n-        }\n-    }\n-    let toOpen = created || moved\n-    let toReveal = change.cursorPosition\n-    await vscode.workspace.applyEdit(wsEdit)\n-    if (toOpen) {\n-        let doc = await vscode.workspace.openTextDocument(toOpen)\n-        await vscode.window.showTextDocument(doc)\n-    } else if (toReveal) {\n-        let uri = client.protocol2CodeConverter.asUri(toReveal.textDocument.uri)\n-        let position = client.protocol2CodeConverter.asPosition(toReveal.position)\n-        let editor = vscode.window.activeTextEditor;\n-        if (!editor || editor.document.uri.toString() != uri.toString()) return\n-        if (!editor.selection.isEmpty) return\n-        editor!.selection = new vscode.Selection(position, position)\n-    }\n+    return Server.client.stop();\n }"}, {"sha": "169ddb0df08cf6a5ca702e90b42776ad3c92054b", "filename": "editors/code/src/highlighting.ts", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,78 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient'\n+\n+import { Server } from './server';\n+\n+export interface Decoration {\n+    range: lc.Range,\n+    tag: string,\n+}\n+\n+export class Highlighter {\n+    private decorations: { [index: string]: vscode.TextEditorDecorationType };\n+    constructor() {\n+        this.decorations = {};\n+    }\n+\n+    removeHighlights() {\n+        for (let tag in this.decorations) {\n+            this.decorations[tag].dispose();\n+        }\n+\n+        this.decorations = {};\n+    }\n+\n+    setHighlights(\n+        editor: vscode.TextEditor,\n+        highlights: Array<Decoration>\n+    ) {\n+        // Initialize decorations if necessary\n+        //\n+        // Note: decoration objects need to be kept around so we can dispose them\n+        // if the user disables syntax highlighting\n+        if (Object.keys(this.decorations).length === 0) {\n+            this.initDecorations();\n+        }\n+\n+        let byTag: Map<string, vscode.Range[]> = new Map()\n+        for (let tag in this.decorations) {\n+            byTag.set(tag, [])\n+        }\n+\n+        for (let d of highlights) {\n+            if (!byTag.get(d.tag)) {\n+                console.log(`unknown tag ${d.tag}`)\n+                continue\n+            }\n+            byTag.get(d.tag)!.push(\n+                Server.client.protocol2CodeConverter.asRange(d.range)\n+            )\n+        }\n+\n+        for (let tag of byTag.keys()) {\n+            let dec: vscode.TextEditorDecorationType = this.decorations[tag]\n+            let ranges = byTag.get(tag)!\n+            editor.setDecorations(dec, ranges)\n+        }\n+    }\n+\n+    private initDecorations() {\n+        const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj })\n+        this.decorations = {\n+            background: decor(\"#3F3F3F\"),\n+            error: vscode.window.createTextEditorDecorationType({\n+                borderColor: \"red\",\n+                borderStyle: \"none none dashed none\",\n+            }),\n+            comment: decor(\"#7F9F7F\"),\n+            string: decor(\"#CC9393\"),\n+            keyword: decor(\"#F0DFAF\"),\n+            function: decor(\"#93E0E3\"),\n+            parameter: decor(\"#94BFF3\"),\n+            builtin: decor(\"#DD6718\"),\n+            text: decor(\"#DCDCCC\"),\n+            attribute: decor(\"#BFEBBF\"),\n+            literal: decor(\"#DFAF8F\"),\n+        }\n+    }\n+}"}, {"sha": "c1c95e00842622ffbd5c35e9a2803d61f3f10aef", "filename": "editors/code/src/server.ts", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/69de7e2fd71c3a808f0ac856d7b105eeb210f169/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=69de7e2fd71c3a808f0ac856d7b105eeb210f169", "patch": "@@ -0,0 +1,74 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient'\n+\n+import { Highlighter, Decoration } from './highlighting';\n+\n+export class Config {\n+    highlightingOn = true;\n+\n+    constructor() {\n+        vscode.workspace.onDidChangeConfiguration(_ => this.userConfigChanged());\n+        this.userConfigChanged();\n+    }\n+\n+    userConfigChanged() {\n+        let config = vscode.workspace.getConfiguration('ra-lsp');\n+        if (config.has('highlightingOn')) {\n+            this.highlightingOn = config.get('highlightingOn') as boolean;\n+        };\n+\n+        if (!this.highlightingOn) {\n+            Server.highlighter.removeHighlights();\n+        }\n+    }\n+}\n+\n+export class Server {\n+    static highlighter = new Highlighter();\n+    static config = new Config();\n+    static client: lc.LanguageClient;\n+\n+\n+    static start() {\n+        let run: lc.Executable = {\n+            command: \"ra_lsp_server\",\n+            options: { cwd: \".\" }\n+        }\n+        let serverOptions: lc.ServerOptions = {\n+            run,\n+            debug: run\n+        };\n+\n+        let clientOptions: lc.LanguageClientOptions = {\n+            documentSelector: [{ scheme: 'file', language: 'rust' }],\n+        };\n+\n+        Server.client = new lc.LanguageClient(\n+            'ra-lsp',\n+            'rust-analyzer languge server',\n+            serverOptions,\n+            clientOptions,\n+        );\n+        Server.client.onReady().then(() => {\n+            Server.client.onNotification(\n+                \"m/publishDecorations\",\n+                (params: PublishDecorationsParams) => {\n+                    let editor = vscode.window.visibleTextEditors.find(\n+                        (editor) => editor.document.uri.toString() == params.uri\n+                    )\n+                    if (!Server.config.highlightingOn || !editor) return;\n+                    Server.highlighter.setHighlights(\n+                        editor,\n+                        params.decorations,\n+                    )\n+                }\n+            )\n+        })\n+        Server.client.start();\n+    }\n+}\n+\n+interface PublishDecorationsParams {\n+    uri: string,\n+    decorations: Decoration[],\n+}"}]}