{"sha": "182c96c9212a2b7e830fe5f9a6662e72f73775ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MmM5NmM5MjEyYTJiN2U4MzBmZTVmOWE2NjYyZTcyZjczNzc1ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T20:17:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T20:17:28Z"}, "message": "auto merge of #14040 : hannobraun/rust/force-color-output, r=alexcrichton\n\nThis pull request fixes #12881.\r\n\r\nTwo caveats:\r\n\r\n1. As explained in the commit message, this doesn't include a regression test. If this is unacceptable, please let me know, I'll see what I can do.\r\n1. I'm getting some test failures on make check, all from debuginfo. I suspect this is due to #13680 and  not related to my changes (I have GDB 7.7). This is the list of failed tests:\r\n\r\n> [debuginfo-gdb] debuginfo/basic-types-globals.rs\r\n> [debuginfo-gdb] debuginfo/basic-types-mut-globals.rs\r\n> [debuginfo-gdb] debuginfo/basic-types.rs\r\n> [debuginfo-gdb] debuginfo/borrowed-basic.rs\r\n> [debuginfo-gdb] debuginfo/borrowed-managed-basic.rs\r\n> [debuginfo-gdb] debuginfo/borrowed-struct.rs\r\n> [debuginfo-gdb] debuginfo/borrowed-unique-basic.rs\r\n> [debuginfo-gdb] debuginfo/box.rs\r\n> [debuginfo-gdb] debuginfo/by-value-non-immediate-argument.rs\r\n> [debuginfo-gdb] debuginfo/by-value-self-argument-in-trait-impl.rs\r\n> [debuginfo-gdb] debuginfo/closure-in-generic-function.rs\r\n> [debuginfo-gdb] debuginfo/evec-in-struct.rs\r\n> [debuginfo-gdb] debuginfo/function-arg-initialization.rs\r\n> [debuginfo-gdb] debuginfo/function-prologue-stepping-no-split-stack.rs\r\n> [debuginfo-gdb] debuginfo/generic-function.rs\r\n> [debuginfo-gdb] debuginfo/generic-functions-nested.rs\r\n> [debuginfo-gdb] debuginfo/generic-method-on-generic-struct.rs\r\n> [debuginfo-gdb] debuginfo/generic-static-method-on-struct-and-enum.rs\r\n> [debuginfo-gdb] debuginfo/generic-struct.rs\r\n> [debuginfo-gdb] debuginfo/lexical-scope-in-stack-closure.rs\r\n> [debuginfo-gdb] debuginfo/lexical-scope-in-unique-closure.rs\r\n> [debuginfo-gdb] debuginfo/method-on-generic-struct.rs\r\n> [debuginfo-gdb] debuginfo/method-on-tuple-struct.rs\r\n> [debuginfo-gdb] debuginfo/name-shadowing-and-scope-nesting.rs\r\n> [debuginfo-gdb] debuginfo/recursive-struct.rs\r\n> [debuginfo-gdb] debuginfo/self-in-generic-default-method.rs\r\n> [debuginfo-gdb] debuginfo/shadowed-argument.rs\r\n> [debuginfo-gdb] debuginfo/shadowed-variable.rs\r\n> [debuginfo-gdb] debuginfo/simd.rs\r\n> [debuginfo-gdb] debuginfo/simple-lexical-scope.rs\r\n> [debuginfo-gdb] debuginfo/simple-struct.rs\r\n> [debuginfo-gdb] debuginfo/simple-tuple.rs\r\n> [debuginfo-gdb] debuginfo/static-method-on-struct-and-enum.rs\r\n> [debuginfo-gdb] debuginfo/tuple-struct.rs\r\n> [debuginfo-gdb] debuginfo/var-captured-in-nested-closure.rs\r\n> [debuginfo-gdb] debuginfo/var-captured-in-sendable-closure.rs\r\n> [debuginfo-gdb] debuginfo/var-captured-in-stack-closure.rs\r\n\r\nI can provide the full output on request.", "tree": {"sha": "fa664eb2f99eec23178efe6e9d57194639f7a9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa664eb2f99eec23178efe6e9d57194639f7a9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182c96c9212a2b7e830fe5f9a6662e72f73775ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182c96c9212a2b7e830fe5f9a6662e72f73775ec", "html_url": "https://github.com/rust-lang/rust/commit/182c96c9212a2b7e830fe5f9a6662e72f73775ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182c96c9212a2b7e830fe5f9a6662e72f73775ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba5f53009aab826d8bb8fa97f3213b2fee803e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5f53009aab826d8bb8fa97f3213b2fee803e29", "html_url": "https://github.com/rust-lang/rust/commit/ba5f53009aab826d8bb8fa97f3213b2fee803e29"}, {"sha": "b7676f2df5e1ff97e0baa3f7e70936d4bd4dacb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7676f2df5e1ff97e0baa3f7e70936d4bd4dacb5", "html_url": "https://github.com/rust-lang/rust/commit/b7676f2df5e1ff97e0baa3f7e70936d4bd4dacb5"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "e929c64e58ad44d5496cd0d12573b5538cd8fe8e", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -27,6 +27,7 @@ use syntax::ast;\n use syntax::ast::{IntTy, UintTy};\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n+use syntax::diagnostic::{ColorConfig, Auto, Always, Never};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n \n@@ -92,6 +93,7 @@ pub struct Options {\n     /// Crate id-related things to maybe print. It's (crate_id, crate_name, crate_file_name).\n     pub print_metas: (bool, bool, bool),\n     pub cg: CodegenOptions,\n+    pub color: ColorConfig,\n }\n \n /// Some reasonable defaults\n@@ -115,6 +117,7 @@ pub fn basic_options() -> Options {\n         write_dependency_info: (false, None),\n         print_metas: (false, false, false),\n         cg: basic_codegen_options(),\n+        color: Auto,\n     }\n }\n \n@@ -536,7 +539,11 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         optmulti(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n         optmulti(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n         optmulti(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n-        optflag( \"v\", \"version\", \"Print version info and exit\")\n+        optflag(\"v\", \"version\", \"Print version info and exit\"),\n+        optopt(\"\", \"color\", \"Configure coloring of output:\n+            auto   = colorize, if output goes to a tty (default);\n+            always = always colorize output;\n+            never  = never colorize output\", \"auto|always|never\")\n     )\n }\n \n@@ -707,6 +714,18 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                        matches.opt_present(\"crate-file-name\"));\n     let cg = build_codegen_options(matches);\n \n+    let color = match matches.opt_str(\"color\").as_ref().map(|s| s.as_slice()) {\n+        Some(\"auto\")   => Auto,\n+        Some(\"always\") => Always,\n+        Some(\"never\")  => Never,\n+\n+        None => Auto,\n+\n+        Some(arg) => early_error(format!(\n+            \"argument for --color must be auto, always or never (instead was `{}`)\",\n+            arg))\n+    };\n+\n     Options {\n         crate_types: crate_types,\n         gc: gc,\n@@ -726,6 +745,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         write_dependency_info: write_dependency_info,\n         print_metas: print_metas,\n         cg: cg,\n+        color: color\n     }\n }\n "}, {"sha": "b355d474bd572a9438b5766a34f08d8e21b68214", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -323,7 +323,7 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n }\n \n pub fn early_error(msg: &str) -> ! {\n-    let mut emitter = diagnostic::EmitterWriter::stderr();\n+    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto);\n     emitter.emit(None, msg, diagnostic::Fatal);\n     fail!(diagnostic::FatalError);\n }\n@@ -368,7 +368,7 @@ fn monitor(f: proc():Send) {\n         Err(value) => {\n             // Task failed without emitting a fatal diagnostic\n             if !value.is::<diagnostic::FatalError>() {\n-                let mut emitter = diagnostic::EmitterWriter::stderr();\n+                let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto);\n \n                 // a .span_bug or .bug call has already printed what\n                 // it wants to print."}, {"sha": "e450fd200a6ae19598720d1d67bd759605efa9e7", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -196,7 +196,7 @@ pub fn build_session(sopts: config::Options,\n                      -> Session {\n     let codemap = codemap::CodeMap::new();\n     let diagnostic_handler =\n-        diagnostic::default_handler();\n+        diagnostic::default_handler(sopts.color);\n     let span_diagnostic_handler =\n         diagnostic::mk_span_handler(diagnostic_handler, codemap);\n "}, {"sha": "791ee96d67290cde77ea2f40c0e1cb4816f07c9c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -78,7 +78,7 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<StrBuf>)\n \n \n     let codemap = syntax::codemap::CodeMap::new();\n-    let diagnostic_handler = syntax::diagnostic::default_handler();\n+    let diagnostic_handler = syntax::diagnostic::default_handler(syntax::diagnostic::Auto);\n     let span_diagnostic_handler =\n         syntax::diagnostic::mk_span_handler(diagnostic_handler, codemap);\n "}, {"sha": "c56841a076d00133ae5d89390a0134092fbdf4a8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -53,7 +53,7 @@ pub fn run(input: &str,\n \n \n     let codemap = CodeMap::new();\n-    let diagnostic_handler = diagnostic::default_handler();\n+    let diagnostic_handler = diagnostic::default_handler(diagnostic::Auto);\n     let span_diagnostic_handler =\n     diagnostic::mk_span_handler(diagnostic_handler, codemap);\n "}, {"sha": "94132988d972f76325fc95fb0acf12ee3a2246d1", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -49,6 +49,13 @@ impl RenderSpan {\n     }\n }\n \n+#[deriving(Clone)]\n+pub enum ColorConfig {\n+    Auto,\n+    Always,\n+    Never\n+}\n+\n pub trait Emitter {\n     fn emit(&mut self, cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str, lvl: Level);\n@@ -176,8 +183,8 @@ pub fn mk_span_handler(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n     }\n }\n \n-pub fn default_handler() -> Handler {\n-    mk_handler(box EmitterWriter::stderr())\n+pub fn default_handler(color_config: ColorConfig) -> Handler {\n+    mk_handler(box EmitterWriter::stderr(color_config))\n }\n \n pub fn mk_handler(e: Box<Emitter:Send>) -> Handler {\n@@ -257,9 +264,16 @@ enum Destination {\n }\n \n impl EmitterWriter {\n-    pub fn stderr() -> EmitterWriter {\n+    pub fn stderr(color_config: ColorConfig) -> EmitterWriter {\n         let stderr = io::stderr();\n-        if stderr.get_ref().isatty() {\n+\n+        let use_color = match color_config {\n+            Always => true,\n+            Never  => false,\n+            Auto   => stderr.get_ref().isatty()\n+        };\n+\n+        if use_color {\n             let dst = match term::Terminal::new(stderr.unwrap()) {\n                 Ok(t) => Terminal(t),\n                 Err(..) => Raw(box io::stderr()),"}, {"sha": "d8a9f69e29342fc47895cf0ba16408bbd95fd2ca", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182c96c9212a2b7e830fe5f9a6662e72f73775ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=182c96c9212a2b7e830fe5f9a6662e72f73775ec", "patch": "@@ -13,7 +13,7 @@\n \n use ast;\n use codemap::{Span, CodeMap, FileMap};\n-use diagnostic::{SpanHandler, mk_span_handler, default_handler};\n+use diagnostic::{SpanHandler, mk_span_handler, default_handler, Auto};\n use parse::attr::ParserAttr;\n use parse::parser::Parser;\n \n@@ -41,7 +41,7 @@ pub struct ParseSess {\n \n pub fn new_parse_sess() -> ParseSess {\n     ParseSess {\n-        span_diagnostic: mk_span_handler(default_handler(), CodeMap::new()),\n+        span_diagnostic: mk_span_handler(default_handler(Auto), CodeMap::new()),\n         included_mod_stack: RefCell::new(Vec::new()),\n     }\n }"}]}