{"sha": "e175921932615cb97eaa5cfd11d940cbd1473cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNzU5MjE5MzI2MTVjYjk3ZWFhNWNmZDExZDk0MGNiZDE0NzNjYWM=", "commit": {"author": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-04-04T22:29:21Z"}, "committer": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-04-07T12:23:14Z"}, "message": "Added ArrayExprKind,\nchanged the  display for fixed array types,\nAdded Array Enum to ra_hir/expr", "tree": {"sha": "14830570c216a7536848b652ded69fdea48ad9c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14830570c216a7536848b652ded69fdea48ad9c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e175921932615cb97eaa5cfd11d940cbd1473cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e175921932615cb97eaa5cfd11d940cbd1473cac", "html_url": "https://github.com/rust-lang/rust/commit/e175921932615cb97eaa5cfd11d940cbd1473cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e175921932615cb97eaa5cfd11d940cbd1473cac/comments", "author": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d73c909fe03c799b488aa0f97a588e13bbd7006", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d73c909fe03c799b488aa0f97a588e13bbd7006", "html_url": "https://github.com/rust-lang/rust/commit/2d73c909fe03c799b488aa0f97a588e13bbd7006"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "589a9b2db2aa322487385e3a74b840843c61c559", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=e175921932615cb97eaa5cfd11d940cbd1473cac", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstPtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind, TypeAscriptionOwner}\n+    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -238,15 +238,17 @@ pub enum Expr {\n     Tuple {\n         exprs: Vec<ExprId>,\n     },\n-    Array {\n-        exprs: Vec<ExprId>,\n-        repeat: Option<ExprId>,\n-    },\n+    Array(Array),\n     Literal(Literal),\n }\n \n pub use ra_syntax::ast::PrefixOp as UnaryOp;\n pub use ra_syntax::ast::BinOp as BinaryOp;\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum Array {\n+    ElementList(Vec<ExprId>),\n+    Repeat { initializer: ExprId, repeat: ExprId },\n+}\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MatchArm {\n@@ -354,15 +356,17 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n-            Expr::Array { exprs, repeat } => {\n-                for expr in exprs {\n-                    f(*expr);\n+            Expr::Array(a) => match a {\n+                Array::ElementList(exprs) => {\n+                    for expr in exprs {\n+                        f(*expr);\n+                    }\n                 }\n-\n-                if let Some(expr) = repeat {\n-                    f(*expr)\n+                Array::Repeat { initializer, repeat } => {\n+                    f(*initializer);\n+                    f(*repeat)\n                 }\n-            }\n+            },\n             Expr::Literal(_) => {}\n         }\n     }\n@@ -733,11 +737,26 @@ impl ExprCollector {\n                 let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n+\n             ast::ExprKind::ArrayExpr(e) => {\n-                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n-                let repeat = e.repeat().map(|e| self.collect_expr(e));\n-                self.alloc_expr(Expr::Array { exprs, repeat }, syntax_ptr)\n+                let kind = e.kind();\n+\n+                match kind {\n+                    ArrayExprKind::ElementList(e) => {\n+                        let exprs = e.map(|expr| self.collect_expr(expr)).collect();\n+                        self.alloc_expr(Expr::Array(Array::ElementList(exprs)), syntax_ptr)\n+                    }\n+                    ArrayExprKind::Repeat { initializer, repeat } => {\n+                        let initializer = self.collect_expr_opt(initializer);\n+                        let repeat = self.collect_expr_opt(repeat);\n+                        self.alloc_expr(\n+                            Expr::Array(Array::Repeat { initializer, repeat }),\n+                            syntax_ptr,\n+                        )\n+                    }\n+                }\n             }\n+\n             ast::ExprKind::Literal(e) => {\n                 let lit = match e.kind() {\n                     LiteralKind::IntNumber { suffix } => {"}, {"sha": "20e55d92d09ab08c445ff8eee3817a7737a9c45b", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=e175921932615cb97eaa5cfd11d940cbd1473cac", "patch": "@@ -359,7 +359,7 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::Array => {\n                 let t = self.parameters.as_single();\n-                write!(f, \"[{};usize]\", t.display(f.db))?;\n+                write!(f, \"[{};_]\", t.display(f.db))?;\n             }\n             TypeCtor::RawPtr(m) => {\n                 let t = self.parameters.as_single();"}, {"sha": "9ace6b13a01b039f2294e9dea6e6addac0abd79f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=e175921932615cb97eaa5cfd11d940cbd1473cac", "patch": "@@ -32,7 +32,7 @@ use crate::{\n     DefWithBody,\n     ImplItem,\n     type_ref::{TypeRef, Mutability},\n-    expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat, self},\n+    expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat,Array, self},\n     generics::GenericParams,\n     path::{GenericArgs, GenericArg},\n     adt::VariantDef,\n@@ -1074,7 +1074,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 Ty::apply(TypeCtor::Tuple, Substs(ty_vec.into()))\n             }\n-            Expr::Array { exprs, repeat } => {\n+            Expr::Array(array) => {\n                 let elem_ty = match &expected.ty {\n                     Ty::Apply(a_ty) => match a_ty.ctor {\n                         TypeCtor::Slice | TypeCtor::Array => {\n@@ -1085,17 +1085,21 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     _ => self.new_type_var(),\n                 };\n \n-                for expr in exprs.iter() {\n-                    self.infer_expr(*expr, &Expectation::has_type(elem_ty.clone()));\n-                }\n-\n-                if let Some(expr) = repeat {\n-                    self.infer_expr(\n-                        *expr,\n-                        &Expectation::has_type(Ty::simple(TypeCtor::Int(\n-                            primitive::UncertainIntTy::Known(primitive::IntTy::usize()),\n-                        ))),\n-                    );\n+                match array {\n+                    Array::ElementList(items) => {\n+                        for expr in items.iter() {\n+                            self.infer_expr(*expr, &Expectation::has_type(elem_ty.clone()));\n+                        }\n+                    }\n+                    Array::Repeat { initializer, repeat } => {\n+                        self.infer_expr(*initializer, &Expectation::has_type(elem_ty.clone()));\n+                        self.infer_expr(\n+                            *repeat,\n+                            &Expectation::has_type(Ty::simple(TypeCtor::Int(\n+                                primitive::UncertainIntTy::Known(primitive::IntTy::usize()),\n+                            ))),\n+                        );\n+                    }\n                 }\n \n                 Ty::apply_one(TypeCtor::Array, elem_ty)"}, {"sha": "970b898250b357e6b3fbd5bb12b67eb04d223641", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=e175921932615cb97eaa5cfd11d940cbd1473cac", "patch": "@@ -17,8 +17,8 @@ pub use self::{\n     generated::*,\n     traits::*,\n     tokens::*,\n-    extensions::{PathSegmentKind, StructKind, FieldKind, SelfParamKind},\n-    expr_extensions::{ElseBranch, PrefixOp, BinOp, LiteralKind},\n+    extensions::{PathSegmentKind, StructKind, SelfParamKind},\n+    expr_extensions::{ElseBranch, PrefixOp, BinOp, LiteralKind,ArrayExprKind},\n };\n \n /// The main trait to go from untyped `SyntaxNode`  to a typed ast. The"}, {"sha": "d21ec80c367d337c83bef1394162e6ee7f26233d", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e175921932615cb97eaa5cfd11d940cbd1473cac/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=e175921932615cb97eaa5cfd11d940cbd1473cac", "patch": "@@ -193,6 +193,28 @@ impl ast::BinExpr {\n     }\n }\n \n+pub enum ArrayExprKind<'a> {\n+    Repeat { initializer: Option<&'a ast::Expr>, repeat: Option<&'a ast::Expr> },\n+    ElementList(AstChildren<'a, ast::Expr>),\n+}\n+\n+impl ast::ArrayExpr {\n+    pub fn kind(&self) -> ArrayExprKind {\n+        if self.is_repeat() {\n+            ArrayExprKind::Repeat {\n+                initializer: children(self).nth(0),\n+                repeat: children(self).nth(2),\n+            }\n+        } else {\n+            ArrayExprKind::ElementList(children(self))\n+        }\n+    }\n+\n+    fn is_repeat(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|it| it.kind() == SEMI)\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum LiteralKind {\n     String,"}]}