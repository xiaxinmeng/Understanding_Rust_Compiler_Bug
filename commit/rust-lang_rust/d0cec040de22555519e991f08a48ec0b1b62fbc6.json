{"sha": "d0cec040de22555519e991f08a48ec0b1b62fbc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwY2VjMDQwZGUyMjU1NTUxOWU5OTFmMDhhNDhlYzBiMWI2MmZiYzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-10T14:08:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-10T14:08:24Z"}, "message": "Rollup merge of #62493 - Freyskeyd:valid_example_read-write_unaligned, r=rkruppe\n\n#62357: doc(ptr): add example for {read,write}_unaligned\n\nrelated to #62357\n\n> With #62323 the only example (that had UB and was thus invalid) in std::ptr::read_unaligned and std::ptr::write_unaligned is removed.\n\n> We should add a valid example of using the aforementioned functions.\n\nSigned-off-by: Freyskeyd <simon.paitrault@gmail.com>", "tree": {"sha": "2b71cb20d8bfb4521d83dd3f8f1998349384a28b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b71cb20d8bfb4521d83dd3f8f1998349384a28b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0cec040de22555519e991f08a48ec0b1b62fbc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJfFYCRBK7hj4Ov3rIwAAdHIIAGGPUrITFx5OG9tZPvwX1vN4\nhpbtBvqBfbHFgdIAZ0M8pAm9jZIphLKBOE4yXFOAbErbpjiexjY/AuX07r6bQ5oI\nLv48qbX/ivPm5clCPh+qDhvxZeBSTk7jo37KtgQmj8lRWIjdVkDL4B7UWwy5jc2X\nY/YVtuBTxcL7Uos2/6kIsr7FERUgJ9qgDbrfOXeu84VAkmOZqCxULlpK5JHJZsQu\n1IKhfO8NbGtMAK260NwloZBHfFq1N3nokFY3oG30QV4kvXhQTdq/gE4glzbBCjOA\nDeIoVeF1cB6c7d8F1U34y48JhoAqEQ/qJbGcXJnSU581I+WMus2VYaLji++uqeg=\n=+Fip\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b71cb20d8bfb4521d83dd3f8f1998349384a28b\nparent ad21558b8539a8a9bcb21800ad1b7918304d7ef7\nparent bc322af444006973addb3e65bcd74f033080402b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562767704 +0200\ncommitter GitHub <noreply@github.com> 1562767704 +0200\n\nRollup merge of #62493 - Freyskeyd:valid_example_read-write_unaligned, r=rkruppe\n\n#62357: doc(ptr): add example for {read,write}_unaligned\n\nrelated to #62357\n\n> With #62323 the only example (that had UB and was thus invalid) in std::ptr::read_unaligned and std::ptr::write_unaligned is removed.\n\n> We should add a valid example of using the aforementioned functions.\n\nSigned-off-by: Freyskeyd <simon.paitrault@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cec040de22555519e991f08a48ec0b1b62fbc6", "html_url": "https://github.com/rust-lang/rust/commit/d0cec040de22555519e991f08a48ec0b1b62fbc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0cec040de22555519e991f08a48ec0b1b62fbc6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad21558b8539a8a9bcb21800ad1b7918304d7ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad21558b8539a8a9bcb21800ad1b7918304d7ef7", "html_url": "https://github.com/rust-lang/rust/commit/ad21558b8539a8a9bcb21800ad1b7918304d7ef7"}, {"sha": "bc322af444006973addb3e65bcd74f033080402b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc322af444006973addb3e65bcd74f033080402b", "html_url": "https://github.com/rust-lang/rust/commit/bc322af444006973addb3e65bcd74f033080402b"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "df66a2978de41f8de35c31f2352d0d42b5d680c5", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d0cec040de22555519e991f08a48ec0b1b62fbc6/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cec040de22555519e991f08a48ec0b1b62fbc6/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=d0cec040de22555519e991f08a48ec0b1b62fbc6", "patch": "@@ -669,6 +669,22 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however.\n // FIXME: Update docs based on outcome of RFC #2582 and friends.\n+///\n+/// # Examples\n+///\n+/// Read an usize value from a byte buffer:\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// fn read_usize(x: &[u8]) -> usize {\n+///     assert!(x.len() >= mem::size_of::<usize>());\n+///\n+///     let ptr = x.as_ptr() as *const usize;\n+///\n+///     unsafe { ptr.read_unaligned() }\n+/// }\n+/// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n@@ -839,6 +855,22 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// Accessing unaligned fields directly with e.g. `packed.unaligned` is safe however.\n // FIXME: Update docs based on outcome of RFC #2582 and friends.\n+///\n+/// # Examples\n+///\n+/// Write an usize value to a byte buffer:\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// fn write_usize(x: &mut [u8], val: usize) {\n+///     assert!(x.len() >= mem::size_of::<usize>());\n+///\n+///     let ptr = x.as_mut_ptr() as *mut usize;\n+///\n+///     unsafe { ptr.write_unaligned(val) }\n+/// }\n+/// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {"}]}