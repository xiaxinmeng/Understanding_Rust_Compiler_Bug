{"sha": "20742ea21ab0556d22321481bed1e8a6dad88c56", "node_id": "C_kwDOAAsO6NoAKDIwNzQyZWEyMWFiMDU1NmQyMjMyMTQ4MWJlZDFlOGE2ZGFkODhjNTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-26T23:17:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T00:58:26Z"}, "message": "Adjust obligation cause code for find_and_report_unsatisfied_index_impl", "tree": {"sha": "1400e2e5847b115d3d08a8e5a4d84e46f776dc01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1400e2e5847b115d3d08a8e5a4d84e46f776dc01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20742ea21ab0556d22321481bed1e8a6dad88c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20742ea21ab0556d22321481bed1e8a6dad88c56", "html_url": "https://github.com/rust-lang/rust/commit/20742ea21ab0556d22321481bed1e8a6dad88c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20742ea21ab0556d22321481bed1e8a6dad88c56/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8763965a2c7b68a33af5fc55999f9eff26749fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8763965a2c7b68a33af5fc55999f9eff26749fd6", "html_url": "https://github.com/rust-lang/rust/commit/8763965a2c7b68a33af5fc55999f9eff26749fd6"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "82913602f2d5c285cfe8d1e85dbb257c90f4f7dd", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20742ea21ab0556d22321481bed1e8a6dad88c56/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20742ea21ab0556d22321481bed1e8a6dad88c56/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=20742ea21ab0556d22321481bed1e8a6dad88c56", "patch": "@@ -2821,7 +2821,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // but has nested obligations which are unsatisfied.\n                     for (base_t, _) in self.autoderef(base.span, base_t).silence_errors() {\n                         if let Some((_, index_ty, element_ty)) =\n-                            self.find_and_report_unsatisfied_index_impl(expr.hir_id, base, base_t)\n+                            self.find_and_report_unsatisfied_index_impl(base, base_t)\n                         {\n                             self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n                             return element_ty;\n@@ -2880,7 +2880,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// predicates cause this to be, so that the user can add them to fix their code.\n     fn find_and_report_unsatisfied_index_impl(\n         &self,\n-        index_expr_hir_id: HirId,\n         base_expr: &hir::Expr<'_>,\n         base_ty: Ty<'tcx>,\n     ) -> Option<(ErrorGuaranteed, Ty<'tcx>, Ty<'tcx>)> {\n@@ -2913,13 +2912,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // in the first place.\n             ocx.register_obligations(traits::predicates_for_generics(\n                 |idx, span| {\n-                    traits::ObligationCause::new(\n-                        base_expr.span,\n-                        self.body_id,\n-                        if span.is_dummy() {\n-                            traits::ExprItemObligation(impl_def_id, index_expr_hir_id, idx)\n-                        } else {\n-                            traits::ExprBindingObligation(impl_def_id, span, index_expr_hir_id, idx)\n+                    cause.clone().derived_cause(\n+                        ty::Binder::dummy(ty::TraitPredicate {\n+                            trait_ref: impl_trait_ref,\n+                            polarity: ty::ImplPolarity::Positive,\n+                            constness: ty::BoundConstness::NotConst,\n+                        }),\n+                        |derived| {\n+                            traits::ImplDerivedObligation(Box::new(\n+                                traits::ImplDerivedObligationCause {\n+                                    derived,\n+                                    impl_or_alias_def_id: impl_def_id,\n+                                    impl_def_predicate_index: Some(idx),\n+                                    span,\n+                                },\n+                            ))\n                         },\n                     )\n                 },"}, {"sha": "cdb23372c4ba5c4e273e603997395c33de64b02c", "filename": "tests/ui/typeck/bad-index-due-to-nested.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20742ea21ab0556d22321481bed1e8a6dad88c56/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20742ea21ab0556d22321481bed1e8a6dad88c56/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr?ref=20742ea21ab0556d22321481bed1e8a6dad88c56", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `K: Hash` is not satisfied\n LL |     map[k]\n    |     ^^^ the trait `Hash` is not implemented for `K`\n    |\n-note: required by a bound in `<HashMap<K, V> as Index<&K>>`\n-  --> $DIR/bad-index-due-to-nested.rs:9:8\n+note: required for `HashMap<K, V>` to implement `Index<&K>`\n+  --> $DIR/bad-index-due-to-nested.rs:7:12\n    |\n+LL | impl<K, V> Index<&K> for HashMap<K, V>\n+   |            ^^^^^^^^^     ^^^^^^^^^^^^^\n+LL | where\n LL |     K: Hash,\n-   |        ^^^^ required by this bound in `<HashMap<K, V> as Index<&K>>`\n+   |        ---- unsatisfied trait bound introduced here\n help: consider restricting type parameter `K`\n    |\n LL | fn index<'a, K: std::hash::Hash, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n@@ -20,11 +23,14 @@ error[E0277]: the trait bound `V: Copy` is not satisfied\n LL |     map[k]\n    |     ^^^ the trait `Copy` is not implemented for `V`\n    |\n-note: required by a bound in `<HashMap<K, V> as Index<&K>>`\n-  --> $DIR/bad-index-due-to-nested.rs:10:8\n+note: required for `HashMap<K, V>` to implement `Index<&K>`\n+  --> $DIR/bad-index-due-to-nested.rs:7:12\n    |\n+LL | impl<K, V> Index<&K> for HashMap<K, V>\n+   |            ^^^^^^^^^     ^^^^^^^^^^^^^\n+...\n LL |     V: Copy,\n-   |        ^^^^ required by this bound in `<HashMap<K, V> as Index<&K>>`\n+   |        ---- unsatisfied trait bound introduced here\n help: consider restricting type parameter `V`\n    |\n LL | fn index<'a, K, V: std::marker::Copy>(map: &'a HashMap<K, V>, k: K) -> &'a V {"}]}