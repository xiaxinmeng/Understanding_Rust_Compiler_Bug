{"sha": "ea15e1000fda6ef0bd9aed9569884da301e73db5", "node_id": "C_kwDOAAsO6NoAKGVhMTVlMTAwMGZkYTZlZjBiZDlhZWQ5NTY5ODg0ZGEzMDFlNzNkYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T07:40:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T07:40:34Z"}, "message": "Auto merge of #12452 - iDawer:assist.merge_selected_imports, r=Veykril\n\nfeature: `Merge imports` assist can merge multiple selected imports.\n\nThe selected imports have to have a common prefix in paths.\n\nSelect imports or use trees to merge:\n```rust\n$0use std::fmt::Display;\nuse std::fmt::Debug;\nuse std::fmt::Write;$0\n```\nApply `Merge imports`:\n```rust\nuse std::fmt::{Display, Debug, Write};\n```\n\nCloses #12426", "tree": {"sha": "0cc1d48ac74f242ca590b6137d5b8fb55ac52900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc1d48ac74f242ca590b6137d5b8fb55ac52900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea15e1000fda6ef0bd9aed9569884da301e73db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea15e1000fda6ef0bd9aed9569884da301e73db5", "html_url": "https://github.com/rust-lang/rust/commit/ea15e1000fda6ef0bd9aed9569884da301e73db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea15e1000fda6ef0bd9aed9569884da301e73db5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29fae10345146bf24de1680cd6420ddecdf5f0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/29fae10345146bf24de1680cd6420ddecdf5f0fe", "html_url": "https://github.com/rust-lang/rust/commit/29fae10345146bf24de1680cd6420ddecdf5f0fe"}, {"sha": "ea8899a4455e4667eef20d46fab911e83bcddcfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8899a4455e4667eef20d46fab911e83bcddcfb", "html_url": "https://github.com/rust-lang/rust/commit/ea8899a4455e4667eef20d46fab911e83bcddcfb"}], "stats": {"total": 183, "additions": 150, "deletions": 33}, "files": [{"sha": "946e66f1f5092f9290f7162a52fda1d546839eeb", "filename": "crates/ide-assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 146, "deletions": 33, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/ea15e1000fda6ef0bd9aed9569884da301e73db5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea15e1000fda6ef0bd9aed9569884da301e73db5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=ea15e1000fda6ef0bd9aed9569884da301e73db5", "patch": "@@ -1,12 +1,15 @@\n+use either::Either;\n use ide_db::imports::merge_imports::{try_merge_imports, try_merge_trees, MergeBehavior};\n-use syntax::{algo::neighbor, ast, ted, AstNode};\n+use syntax::{algo::neighbor, ast, match_ast, ted, AstNode, SyntaxElement, SyntaxNode};\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::next_prev,\n     AssistId, AssistKind,\n };\n \n+use Edit::*;\n+\n // Assist: merge_imports\n //\n // Merges two imports with a common prefix.\n@@ -20,51 +23,115 @@ use crate::{\n // use std::{fmt::Formatter, io};\n // ```\n pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let tree: ast::UseTree = ctx.find_node_at_offset()?;\n-\n-    let mut imports = None;\n-    let mut uses = None;\n-    if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n-        let (merged, to_remove) =\n-            next_prev().filter_map(|dir| neighbor(&use_item, dir)).find_map(|use_item2| {\n-                try_merge_imports(&use_item, &use_item2, MergeBehavior::Crate).zip(Some(use_item2))\n-            })?;\n-\n-        imports = Some((use_item, merged, to_remove));\n+    let (target, edits) = if ctx.has_empty_selection() {\n+        // Merge a neighbor\n+        let tree: ast::UseTree = ctx.find_node_at_offset()?;\n+        let target = tree.syntax().text_range();\n+\n+        let edits = if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n+            let mut neighbor = next_prev().find_map(|dir| neighbor(&use_item, dir)).into_iter();\n+            use_item.try_merge_from(&mut neighbor)\n+        } else {\n+            let mut neighbor = next_prev().find_map(|dir| neighbor(&tree, dir)).into_iter();\n+            tree.try_merge_from(&mut neighbor)\n+        };\n+        (target, edits?)\n     } else {\n-        let (merged, to_remove) =\n-            next_prev().filter_map(|dir| neighbor(&tree, dir)).find_map(|use_tree| {\n-                try_merge_trees(&tree, &use_tree, MergeBehavior::Crate).zip(Some(use_tree))\n-            })?;\n-\n-        uses = Some((tree.clone(), merged, to_remove))\n+        // Merge selected\n+        let selection_range = ctx.selection_trimmed();\n+        let parent_node = match ctx.covering_element() {\n+            SyntaxElement::Node(n) => n,\n+            SyntaxElement::Token(t) => t.parent()?,\n+        };\n+        let mut selected_nodes =\n+            parent_node.children().filter(|it| selection_range.contains_range(it.text_range()));\n+\n+        let first_selected = selected_nodes.next()?;\n+        let edits = match_ast! {\n+            match first_selected {\n+                ast::Use(use_item) => {\n+                    use_item.try_merge_from(&mut selected_nodes.filter_map(ast::Use::cast))\n+                },\n+                ast::UseTree(use_tree) => {\n+                    use_tree.try_merge_from(&mut selected_nodes.filter_map(ast::UseTree::cast))\n+                },\n+                _ => return None,\n+            }\n+        };\n+        (selection_range, edits?)\n     };\n \n-    let target = tree.syntax().text_range();\n     acc.add(\n         AssistId(\"merge_imports\", AssistKind::RefactorRewrite),\n         \"Merge imports\",\n         target,\n         |builder| {\n-            if let Some((to_replace, replacement, to_remove)) = imports {\n-                let to_replace = builder.make_mut(to_replace);\n-                let to_remove = builder.make_mut(to_remove);\n-\n-                ted::replace(to_replace.syntax(), replacement.syntax());\n-                to_remove.remove();\n-            }\n-\n-            if let Some((to_replace, replacement, to_remove)) = uses {\n-                let to_replace = builder.make_mut(to_replace);\n-                let to_remove = builder.make_mut(to_remove);\n-\n-                ted::replace(to_replace.syntax(), replacement.syntax());\n-                to_remove.remove()\n+            let edits_mut: Vec<Edit> = edits\n+                .into_iter()\n+                .map(|it| match it {\n+                    Remove(Either::Left(it)) => Remove(Either::Left(builder.make_mut(it))),\n+                    Remove(Either::Right(it)) => Remove(Either::Right(builder.make_mut(it))),\n+                    Replace(old, new) => Replace(builder.make_syntax_mut(old), new),\n+                })\n+                .collect();\n+            for edit in edits_mut {\n+                match edit {\n+                    Remove(it) => it.as_ref().either(ast::Use::remove, ast::UseTree::remove),\n+                    Replace(old, new) => ted::replace(old, new),\n+                }\n             }\n         },\n     )\n }\n \n+trait Merge: AstNode + Clone {\n+    fn try_merge_from(self, items: &mut dyn Iterator<Item = Self>) -> Option<Vec<Edit>> {\n+        let mut edits = Vec::new();\n+        let mut merged = self.clone();\n+        while let Some(item) = items.next() {\n+            merged = merged.try_merge(&item)?;\n+            edits.push(Edit::Remove(item.into_either()));\n+        }\n+        if !edits.is_empty() {\n+            edits.push(Edit::replace(self, merged));\n+            Some(edits)\n+        } else {\n+            None\n+        }\n+    }\n+    fn try_merge(&self, other: &Self) -> Option<Self>;\n+    fn into_either(self) -> Either<ast::Use, ast::UseTree>;\n+}\n+\n+impl Merge for ast::Use {\n+    fn try_merge(&self, other: &Self) -> Option<Self> {\n+        try_merge_imports(self, other, MergeBehavior::Crate)\n+    }\n+    fn into_either(self) -> Either<ast::Use, ast::UseTree> {\n+        Either::Left(self)\n+    }\n+}\n+\n+impl Merge for ast::UseTree {\n+    fn try_merge(&self, other: &Self) -> Option<Self> {\n+        try_merge_trees(self, other, MergeBehavior::Crate)\n+    }\n+    fn into_either(self) -> Either<ast::Use, ast::UseTree> {\n+        Either::Right(self)\n+    }\n+}\n+\n+enum Edit {\n+    Remove(Either<ast::Use, ast::UseTree>),\n+    Replace(SyntaxNode, SyntaxNode),\n+}\n+\n+impl Edit {\n+    fn replace(old: impl AstNode, new: impl AstNode) -> Self {\n+        Edit::Replace(old.syntax().clone(), new.syntax().clone())\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -454,4 +521,50 @@ use foo::{*, bar::Baz};\n \",\n         );\n     }\n+\n+    #[test]\n+    fn merge_selection_uses() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::fmt::Error;\n+$0use std::fmt::Display;\n+use std::fmt::Debug;\n+use std::fmt::Write;\n+$0use std::fmt::Result;\n+\",\n+            r\"\n+use std::fmt::Error;\n+use std::fmt::{Display, Debug, Write};\n+use std::fmt::Result;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_selection_use_trees() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use std::{\n+    fmt::Error,\n+    $0fmt::Display,\n+    fmt::Debug,\n+    fmt::Write,$0\n+    fmt::Result,\n+};\",\n+            r\"\n+use std::{\n+    fmt::Error,\n+    fmt::{Display, Debug, Write},\n+    fmt::Result,\n+};\",\n+        );\n+        // FIXME: Remove redundant braces. See also unnecessary-braces diagnostic.\n+        check_assist(\n+            merge_imports,\n+            r\"use std::$0{fmt::Display, fmt::Debug}$0;\",\n+            r\"use std::{fmt::{Display, Debug}};\",\n+        );\n+    }\n }"}, {"sha": "7fb4b90e6d992c5462164af2721f5b95b3db6922", "filename": "crates/ide-db/src/imports/merge_imports.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea15e1000fda6ef0bd9aed9569884da301e73db5/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea15e1000fda6ef0bd9aed9569884da301e73db5/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=ea15e1000fda6ef0bd9aed9569884da301e73db5", "patch": "@@ -30,6 +30,8 @@ impl MergeBehavior {\n     }\n }\n \n+/// Merge `rhs` into `lhs` keeping both intact.\n+/// Returned AST is mutable.\n pub fn try_merge_imports(\n     lhs: &ast::Use,\n     rhs: &ast::Use,\n@@ -51,6 +53,8 @@ pub fn try_merge_imports(\n     Some(lhs)\n }\n \n+/// Merge `rhs` into `lhs` keeping both intact.\n+/// Returned AST is mutable.\n pub fn try_merge_trees(\n     lhs: &ast::UseTree,\n     rhs: &ast::UseTree,"}]}