{"sha": "789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "node_id": "C_kwDOAAsO6NoAKDc4OWRkMGIyYTJjZDY4YzEyOWJhOWIwYWExMDA4OTM5MjA5YWRjZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-01T16:04:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-01T16:04:40Z"}, "message": "Auto merge of #112040 - cjgillot:separate-const-switch, r=oli-obk\n\nEnable ConstGoto and SeparateConstSwitch passes by default\n\nThese 2 passes implement a limited form of jump-threading.\nFiling this PR to see if enabling them would be lighter than https://github.com/rust-lang/rust/pull/107009.", "tree": {"sha": "59ed05ee9be4d6ad4abebc916d4ab4f63bc3bdf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ed05ee9be4d6ad4abebc916d4ab4f63bc3bdf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "html_url": "https://github.com/rust-lang/rust/commit/789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642c92e63008ffb49f6ad8344e07bfa7d5b0d9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/642c92e63008ffb49f6ad8344e07bfa7d5b0d9bb", "html_url": "https://github.com/rust-lang/rust/commit/642c92e63008ffb49f6ad8344e07bfa7d5b0d9bb"}, {"sha": "f74695b01005e63583c32f0334ee8eb9557dec00", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74695b01005e63583c32f0334ee8eb9557dec00", "html_url": "https://github.com/rust-lang/rust/commit/f74695b01005e63583c32f0334ee8eb9557dec00"}], "stats": {"total": 146, "additions": 62, "deletions": 84}, "files": [{"sha": "024bea620982a70c99de5645be1836fed795d180", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "patch": "@@ -28,7 +28,7 @@ pub struct ConstGoto;\n \n impl<'tcx> MirPass<'tcx> for ConstGoto {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 4\n+        sess.mir_opt_level() >= 2\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "f66a7a42ff8be2b3fcbbf95695b9a5a79ae61b5b", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "patch": "@@ -103,7 +103,14 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         // That would require a uniform one-def no-mutation analysis\n         // and RPO (or recursing when needing the value of a local).\n         let mut optimization_finder = ConstPropagator::new(body, dummy_body, tcx);\n-        optimization_finder.visit_body(body);\n+\n+        // Traverse the body in reverse post-order, to ensure that `FullConstProp` locals are\n+        // assigned before being read.\n+        let postorder = body.basic_blocks.postorder().to_vec();\n+        for bb in postorder.into_iter().rev() {\n+            let data = &mut body.basic_blocks.as_mut_preserves_cfg()[bb];\n+            optimization_finder.visit_basic_block_data(bb, data);\n+        }\n \n         trace!(\"ConstProp done for {:?}\", def_id);\n     }\n@@ -789,12 +796,6 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         self.tcx\n     }\n \n-    fn visit_body(&mut self, body: &mut Body<'tcx>) {\n-        for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n-            self.visit_basic_block_data(bb, data);\n-        }\n-    }\n-\n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n         self.super_operand(operand, location);\n \n@@ -885,14 +886,23 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                 }\n             }\n             StatementKind::StorageLive(local) => {\n-                let frame = self.ecx.frame_mut();\n-                frame.locals[local].value =\n-                    LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit));\n-            }\n-            StatementKind::StorageDead(local) => {\n-                let frame = self.ecx.frame_mut();\n-                frame.locals[local].value = LocalValue::Dead;\n+                Self::remove_const(&mut self.ecx, local);\n             }\n+            // We do not need to mark dead locals as such. For `FullConstProp` locals,\n+            // this allows to propagate the single assigned value in this case:\n+            // ```\n+            // let x = SOME_CONST;\n+            // if a {\n+            //   f(copy x);\n+            //   StorageDead(x);\n+            // } else {\n+            //   g(copy x);\n+            //   StorageDead(x);\n+            // }\n+            // ```\n+            //\n+            // This may propagate a constant where the local would be uninit or dead.\n+            // In both cases, this does not matter, as those reads would be UB anyway.\n             _ => {}\n         }\n     }"}, {"sha": "7d9f6c38e36a40741360e78efa15699dbd392a76", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "patch": "@@ -559,10 +559,13 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &instsimplify::InstSimplify,\n-            &separate_const_switch::SeparateConstSwitch,\n             &simplify::SimplifyLocals::BeforeConstProp,\n             &copy_prop::CopyProp,\n             &ref_prop::ReferencePropagation,\n+            // Perform `SeparateConstSwitch` after SSA-based analyses, as cloning blocks may\n+            // destroy the SSA property. It should still happen before const-propagation, so the\n+            // latter pass will leverage the created opportunities.\n+            &separate_const_switch::SeparateConstSwitch,\n             &const_prop::ConstProp,\n             &dataflow_const_prop::DataflowConstProp,\n             //"}, {"sha": "f35a5fb42768aca30a85a0758ea13f6f0bae5a0f", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "patch": "@@ -46,7 +46,7 @@ pub struct SeparateConstSwitch;\n \n impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 4\n+        sess.mir_opt_level() >= 2\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "7f0e50a23f972f8ab58d957f227276a3a76c06d3", "filename": "tests/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 29, "deletions": 49, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "patch": "@@ -9,70 +9,61 @@\n       let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n       let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n       let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+      let mut _7: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+      let _8: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           scope 2 {\n               scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:25:8: 25:10\n-                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  debug residual => _6;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _13: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _14: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   scope 9 {\n-                      debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      debug e => _13;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n                       scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _14;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                          debug t => _13;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n           }\n       }\n       scope 3 {\n-          debug val => _9;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          debug val => _8;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           scope 4 {\n           }\n       }\n       scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:25:8: 25:10\n-          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          debug self => _1;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _9: isize;               // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _10: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _12: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _13: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           scope 6 {\n-              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+              debug v => _10;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n           scope 7 {\n-              debug e => _12;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+              debug e => _11;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n+          StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageLive(_12);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _9 = discriminant(_1);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_12);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n       bb2: {\n-          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          _0 = Result::<i32, i32>::Ok(move _2); // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n+          _8 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          _0 = Result::<i32, i32>::Ok(_8); // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n@@ -82,30 +73,19 @@\n       }\n   \n       bb4: {\n-          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_14);                // scope 2 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _14 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _14;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          _0 = Result::<i32, i32>::Err(move _15); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_14);                // scope 2 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n+          _13 = ((_6 as Err).0: i32);      // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _0 = Result::<i32, i32>::Err(move _13); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n       bb5: {\n-          _12 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _13 = Result::<Infallible, i32>::Err(move _12); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _13); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = ((_1 as Err).0: i32);      // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = Result::<Infallible, i32>::Err(move _11); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _12); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n@@ -114,8 +94,8 @@\n       }\n   \n       bb7: {\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _11); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _10 = ((_1 as Ok).0: i32);       // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _10); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   }"}, {"sha": "f86a96dec4155fd0bf98e025fa53be725c76b7b7", "filename": "tests/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/789dd0b2a2cd68c129ba9b0aa1008939209adcfd/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=789dd0b2a2cd68c129ba9b0aa1008939209adcfd", "patch": "@@ -34,13 +34,8 @@\n       }\n   \n       bb1: {\n-          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n           _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-          StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          _2 = ControlFlow::<usize, i32>::Break(move _7); // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n+          _2 = ControlFlow::<usize, i32>::Break(_6); // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n           goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n       }\n   \n@@ -49,13 +44,8 @@\n       }\n   \n       bb3: {\n-          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-          StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          _2 = ControlFlow::<usize, i32>::Continue(move _5); // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n+          _2 = ControlFlow::<usize, i32>::Continue(_4); // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n           goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n       }\n   \n@@ -73,13 +63,8 @@\n       }\n   \n       bb6: {\n-          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-          StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          _0 = Option::<i32>::Some(move _10); // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+          _0 = Option::<i32>::Some(_9);    // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   "}]}