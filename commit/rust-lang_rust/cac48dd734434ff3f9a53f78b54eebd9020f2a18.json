{"sha": "cac48dd734434ff3f9a53f78b54eebd9020f2a18", "node_id": "C_kwDOAAsO6NoAKGNhYzQ4ZGQ3MzQ0MzRmZjNmOWE1M2Y3OGI1NGVlYmQ5MDIwZjJhMTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-07T20:14:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-07T20:20:19Z"}, "message": "treat prctl like a variadic function", "tree": {"sha": "22d6bd34acc680939082106a0e02f810fd71d235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d6bd34acc680939082106a0e02f810fd71d235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac48dd734434ff3f9a53f78b54eebd9020f2a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac48dd734434ff3f9a53f78b54eebd9020f2a18", "html_url": "https://github.com/rust-lang/rust/commit/cac48dd734434ff3f9a53f78b54eebd9020f2a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac48dd734434ff3f9a53f78b54eebd9020f2a18/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ee672fef55dda91c912286e614cd3dd2c82899", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ee672fef55dda91c912286e614cd3dd2c82899", "html_url": "https://github.com/rust-lang/rust/commit/59ee672fef55dda91c912286e614cd3dd2c82899"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "5395d0f0bf1123db321f9b3b07fc3a81eb609e08", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac48dd734434ff3f9a53f78b54eebd9020f2a18/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac48dd734434ff3f9a53f78b54eebd9020f2a18/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=cac48dd734434ff3f9a53f78b54eebd9020f2a18", "patch": "@@ -921,7 +921,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         dirfd_op: &OpTy<'tcx, Tag>,    // Should be an `int`\n         pathname_op: &OpTy<'tcx, Tag>, // Should be a `const char *`\n         flags_op: &OpTy<'tcx, Tag>,    // Should be an `int`\n-        mask_op: &OpTy<'tcx, Tag>,    // Should be an `unsigned int`\n+        mask_op: &OpTy<'tcx, Tag>,     // Should be an `unsigned int`\n         statxbuf_op: &OpTy<'tcx, Tag>, // Should be a `struct statx *`\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();"}, {"sha": "339fb04dae337b8931f136ca1dfcf59b891ec9b2", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cac48dd734434ff3f9a53f78b54eebd9020f2a18/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac48dd734434ff3f9a53f78b54eebd9020f2a18/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=cac48dd734434ff3f9a53f78b54eebd9020f2a18", "patch": "@@ -106,9 +106,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Threading\n             \"prctl\" => {\n-                let &[ref option, ref arg2, ref arg3, ref arg4, ref arg5] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.prctl(option, arg2, arg3, arg4, arg5)?;\n+                // prctl is variadic. (It is not documented like that in the manpage, but defined like that in the libc crate.)\n+                this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name)?;\n+                let result = this.prctl(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_setclock\" => {"}, {"sha": "69875a9ffc44b994f9b841dfb54ab3da01d0ea59", "filename": "src/shims/posix/thread.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cac48dd734434ff3f9a53f78b54eebd9020f2a18/src%2Fshims%2Fposix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac48dd734434ff3f9a53f78b54eebd9020f2a18/src%2Fshims%2Fposix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fthread.rs?ref=cac48dd734434ff3f9a53f78b54eebd9020f2a18", "patch": "@@ -97,28 +97,42 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.write_scalar(Scalar::from_uint(thread_id.to_u32(), dest.layout.size), dest)\n     }\n \n-    fn prctl(\n-        &mut self,\n-        option: &OpTy<'tcx, Tag>,\n-        arg2: &OpTy<'tcx, Tag>,\n-        _arg3: &OpTy<'tcx, Tag>,\n-        _arg4: &OpTy<'tcx, Tag>,\n-        _arg5: &OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, i32> {\n+    fn prctl(&mut self, args: &[OpTy<'tcx, Tag>]) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"linux\", \"prctl\");\n \n-        let option = this.read_scalar(option)?.to_i32()?;\n+        if args.len() < 1 {\n+            throw_ub_format!(\n+                \"incorrect number of arguments for `prctl`: got {}, expected at least 1\",\n+                args.len()\n+            );\n+        }\n+\n+        let option = this.read_scalar(&args[0])?.to_i32()?;\n         if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n-            let address = this.read_pointer(arg2)?;\n+            if args.len() < 2 {\n+                throw_ub_format!(\n+                    \"incorrect number of arguments for `prctl` with `PR_SET_NAME`: got {}, expected at least 2\",\n+                    args.len()\n+                );\n+            }\n+\n+            let address = this.read_pointer(&args[1])?;\n             let mut name = this.read_c_str(address)?.to_owned();\n             // The name should be no more than 16 bytes, including the null\n             // byte. Since `read_c_str` returns the string without the null\n             // byte, we need to truncate to 15.\n             name.truncate(15);\n             this.set_active_thread_name(name);\n         } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n-            let address = this.read_pointer(arg2)?;\n+            if args.len() < 2 {\n+                throw_ub_format!(\n+                    \"incorrect number of arguments for `prctl` with `PR_SET_NAME`: got {}, expected at least 2\",\n+                    args.len()\n+                );\n+            }\n+\n+            let address = this.read_pointer(&args[1])?;\n             let mut name = this.get_active_thread_name().to_vec();\n             name.push(0u8);\n             assert!(name.len() <= 16);"}, {"sha": "bd2ae6094be18bd42ee79e5dc97654811df36d57", "filename": "tests/compile-fail/fs/unix_open_missing_required_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac48dd734434ff3f9a53f78b54eebd9020f2a18/tests%2Fcompile-fail%2Ffs%2Funix_open_missing_required_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac48dd734434ff3f9a53f78b54eebd9020f2a18/tests%2Fcompile-fail%2Ffs%2Funix_open_missing_required_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Funix_open_missing_required_mode.rs?ref=cac48dd734434ff3f9a53f78b54eebd9020f2a18", "patch": "@@ -12,5 +12,5 @@ fn main() {\n fn test_file_open_missing_needed_mode() {\n     let name = b\"missing_arg.txt\\0\";\n     let name_ptr = name.as_ptr().cast::<libc::c_char>();\n-    let _fd = unsafe { libc::open(name_ptr, libc::O_CREAT) }; //~ ERROR Undefined Behavior: incorrect number of arguments for `open` with `O_CREAT`: got 2, expected 3\n+    let _fd = unsafe { libc::open(name_ptr, libc::O_CREAT) }; //~ ERROR Undefined Behavior: incorrect number of arguments for `open` with `O_CREAT`: got 2, expected at least 3\n }"}, {"sha": "9df7415d3133a9fe94e3efbe96d86017ca308bb0", "filename": "tests/compile-fail/fs/unix_open_too_many_args.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59ee672fef55dda91c912286e614cd3dd2c82899/tests%2Fcompile-fail%2Ffs%2Funix_open_too_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ee672fef55dda91c912286e614cd3dd2c82899/tests%2Fcompile-fail%2Ffs%2Funix_open_too_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Funix_open_too_many_args.rs?ref=59ee672fef55dda91c912286e614cd3dd2c82899", "patch": "@@ -1,16 +0,0 @@\n-// ignore-windows: No libc on Windows\n-// compile-flags: -Zmiri-disable-isolation\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-fn main() {\n-    test_open_too_many_args();\n-}\n-\n-fn test_open_too_many_args() {\n-    let name = b\"too_many_args.txt\\0\";\n-    let name_ptr = name.as_ptr().cast::<libc::c_char>();\n-    let _fd = unsafe { libc::open(name_ptr, libc::O_RDONLY, 0, 0) }; //~ ERROR Undefined Behavior: incorrect number of arguments for `open`: got 4, expected 2 or 3\n-}"}]}