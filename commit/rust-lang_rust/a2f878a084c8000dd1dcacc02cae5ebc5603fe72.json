{"sha": "a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjg3OGEwODRjODAwMGRkMWRjYWNjMDJjYWU1ZWJjNTYwM2ZlNzI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-22T18:24:07Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:22Z"}, "message": "Replace Box::{from,into}_unique with {from,into}_nonnull_raw\n\nThew `_raw` prefix is included because the fact that `Box`\u2019s ownership\nsemantics are \"dissolved\" or recreated seem more important than the exact\nparameter type or return type.", "tree": {"sha": "1a22eca86173c7e603fe758e41ea7dd8b8bdeecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a22eca86173c7e603fe758e41ea7dd8b8bdeecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "html_url": "https://github.com/rust-lang/rust/commit/a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb03a49c2501c52401b3c987fd455818de1736f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb03a49c2501c52401b3c987fd455818de1736f2", "html_url": "https://github.com/rust-lang/rust/commit/fb03a49c2501c52401b3c987fd455818de1736f2"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "e490f67dd92826b1a4bec259da996452d0dd61ab", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "patch": "@@ -286,7 +286,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Arc { ptr: NonNull::from(Box::into_unique(x)), phantom: PhantomData }\n+        Arc { ptr: Box::into_nonnull_raw(x), phantom: PhantomData }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -991,11 +991,11 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: NonNull::from(Box::into_unique(box ArcInner {\n+                ptr: Box::into_nonnull_raw(box ArcInner {\n                     strong: atomic::AtomicUsize::new(0),\n                     weak: atomic::AtomicUsize::new(1),\n                     data: uninitialized(),\n-                })),\n+                }),\n             }\n         }\n     }"}, {"sha": "994466e2249cda4d2d783643204a43dca5202807", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "patch": "@@ -68,7 +68,7 @@ use core::marker::{self, Unsize};\n use core::mem;\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n-use core::ptr::{self, Unique};\n+use core::ptr::{self, NonNull, Unique};\n use core::convert::From;\n use str::from_boxed_utf8_unchecked;\n \n@@ -269,38 +269,38 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n-        Box::from_unique(Unique::new_unchecked(raw))\n+        Box(Unique::new_unchecked(raw))\n     }\n \n-    /// Constructs a `Box` from a `Unique<T>` pointer.\n+    /// Constructs a `Box` from a `NonNull<T>` pointer.\n     ///\n     /// After calling this function, the memory is owned by a `Box` and `T` can\n     /// then be destroyed and released upon drop.\n     ///\n     /// # Safety\n     ///\n-    /// A `Unique<T>` can be safely created via [`Unique::new`] and thus doesn't\n+    /// A `NonNull<T>` can be safely created via [`NonNull::new`] and thus doesn't\n     /// necessarily own the data pointed to nor is the data guaranteed to live\n     /// as long as the pointer.\n     ///\n-    /// [`Unique::new`]: ../../core/ptr/struct.Unique.html#method.new\n+    /// [`NonNull::new`]: ../../core/ptr/struct.NonNull.html#method.new\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(unique)]\n+    /// #![feature(nonnull)]\n     ///\n     /// fn main() {\n     ///     let x = Box::new(5);\n-    ///     let ptr = Box::into_unique(x);\n-    ///     let x = unsafe { Box::from_unique(ptr) };\n+    ///     let ptr = Box::into_nonnull_raw(x);\n+    ///     let x = unsafe { Box::from_nonnull_raw(ptr) };\n     /// }\n     /// ```\n-    #[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+    #[unstable(feature = \"nonnull\", reason = \"needs an RFC to flesh out design\",\n                issue = \"27730\")]\n     #[inline]\n-    pub unsafe fn from_unique(u: Unique<T>) -> Self {\n-        Box(u)\n+    pub unsafe fn from_nonnull_raw(u: NonNull<T>) -> Self {\n+        Box(u.into())\n     }\n \n     /// Consumes the `Box`, returning the wrapped raw pointer.\n@@ -326,41 +326,48 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        Box::into_unique(b).as_ptr()\n+        Box::into_nonnull_raw(b).as_ptr()\n     }\n \n-    /// Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.\n+    /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n     ///\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to either convert the `Unique<T>` pointer:\n+    /// proper way to do so is to either convert the `NonNull<T>` pointer:\n     ///\n-    /// - Into a `Box` with the [`Box::from_unique`] function.\n+    /// - Into a `Box` with the [`Box::from_nonnull_raw`] function.\n     ///\n     /// - Into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n     ///   function.\n     ///\n     /// Note: this is an associated function, which means that you have\n-    /// to call it as `Box::into_unique(b)` instead of `b.into_unique()`. This\n+    /// to call it as `Box::into_nonnull_raw(b)`\n+    /// instead of `b.into_nonnull_raw()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n-    /// [`Box::from_unique`]: struct.Box.html#method.from_unique\n+    /// [`Box::from_nonnull_raw`]: struct.Box.html#method.from_nonnull_raw\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(unique)]\n+    /// #![feature(nonnull)]\n     ///\n     /// fn main() {\n     ///     let x = Box::new(5);\n-    ///     let ptr = Box::into_unique(x);\n+    ///     let ptr = Box::into_nonnull_raw(x);\n     /// }\n     /// ```\n-    #[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+    #[unstable(feature = \"nonnull\", reason = \"needs an RFC to flesh out design\",\n                issue = \"27730\")]\n     #[inline]\n+    pub fn into_nonnull_raw(b: Box<T>) -> NonNull<T> {\n+        Box::into_unique(b).into()\n+    }\n+\n+    #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_nonnull_raw instead\")]\n+    #[inline]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n         let unique = b.0;\n         mem::forget(b);"}, {"sha": "4c4a00e53fa753038fd939317931dd6a2390f2c3", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "patch": "@@ -157,7 +157,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(NonNull::from(Box::into_unique(node)));\n+            let node = Some(Box::into_nonnull_raw(node));\n \n             match self.head {\n                 None => self.tail = node,\n@@ -192,7 +192,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(NonNull::from(Box::into_unique(node)));\n+            let node = Some(Box::into_nonnull_raw(node));\n \n             match self.tail {\n                 None => self.head = node,\n@@ -986,11 +986,11 @@ impl<'a, T> IterMut<'a, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(NonNull::from(Box::into_unique(box Node {\n+                let node = Some(Box::into_nonnull_raw(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n                     element,\n-                })));\n+                }));\n \n                 prev.as_mut().next = node;\n                 head.as_mut().prev = node;"}, {"sha": "590a68379054739457edf4959ce63045d2ab4179", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "patch": "@@ -311,11 +311,11 @@ impl<T> Rc<T> {\n             // pointers, which ensures that the weak destructor never frees\n             // the allocation while the strong destructor is running, even\n             // if the weak pointer is stored inside the strong one.\n-            ptr: NonNull::from(Box::into_unique(box RcBox {\n+            ptr: Box::into_nonnull_raw(box RcBox {\n                 strong: Cell::new(1),\n                 weak: Cell::new(1),\n                 value,\n-            })),\n+            }),\n             phantom: PhantomData,\n         }\n     }\n@@ -1190,11 +1190,11 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: NonNull::from(Box::into_unique(box RcBox {\n+                ptr: Box::into_nonnull_raw(box RcBox {\n                     strong: Cell::new(0),\n                     weak: Cell::new(1),\n                     value: uninitialized(),\n-                })),\n+                }),\n             }\n         }\n     }"}, {"sha": "0296788f7a0f5402f94de16eb0ba06a7ced0fec7", "filename": "src/test/rustdoc-js/from_u.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "raw_url": "https://github.com/rust-lang/rust/raw/a2f878a084c8000dd1dcacc02cae5ebc5603fe72/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffrom_u.js?ref=a2f878a084c8000dd1dcacc02cae5ebc5603fe72", "patch": "@@ -15,7 +15,6 @@ const EXPECTED = {\n         { 'path': 'std::char', 'name': 'from_u32' },\n         { 'path': 'std::str', 'name': 'from_utf8' },\n         { 'path': 'std::string::String', 'name': 'from_utf8' },\n-        { 'path': 'std::boxed::Box', 'name': 'from_unique' },\n         { 'path': 'std::i32', 'name': 'from_unsigned' },\n         { 'path': 'std::i128', 'name': 'from_unsigned' },\n     ],"}]}