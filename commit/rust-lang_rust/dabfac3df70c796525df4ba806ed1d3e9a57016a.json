{"sha": "dabfac3df70c796525df4ba806ed1d3e9a57016a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYmZhYzNkZjcwYzc5NjUyNWRmNGJhODA2ZWQxZDNlOWE1NzAxNmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T15:07:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-19T15:56:52Z"}, "message": "Fix a panic", "tree": {"sha": "fd759db3fb04c487922958b278b847653655c7ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd759db3fb04c487922958b278b847653655c7ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dabfac3df70c796525df4ba806ed1d3e9a57016a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dabfac3df70c796525df4ba806ed1d3e9a57016a", "html_url": "https://github.com/rust-lang/rust/commit/dabfac3df70c796525df4ba806ed1d3e9a57016a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dabfac3df70c796525df4ba806ed1d3e9a57016a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f57ac5725653a76a54f810abcb3a6f935c12065", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f57ac5725653a76a54f810abcb3a6f935c12065", "html_url": "https://github.com/rust-lang/rust/commit/5f57ac5725653a76a54f810abcb3a6f935c12065"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "318ac226461f32debe993a5114cc8d2bf55a4595", "filename": "Readme.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabfac3df70c796525df4ba806ed1d3e9a57016a/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/dabfac3df70c796525df4ba806ed1d3e9a57016a/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=dabfac3df70c796525df4ba806ed1d3e9a57016a", "patch": "@@ -53,4 +53,3 @@ $ ./build.sh\n \n * [ ] cranelift-module api seems to be used wrong, thus causing panic for some consts\n * [ ] cranelift-codegen doesn't have encodings for some instructions for types smaller than I32\n-* [ ] `thread 'main' panicked at 'assertion failed: !value.has_escaping_regions()', librustc/ty/sty.rs:754:9` in cton_sig_from_mono_fn_sig\n\\ No newline at end of file"}, {"sha": "884a15710261d488e5be2a5239867b9aa3447045", "filename": "example.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dabfac3df70c796525df4ba806ed1d3e9a57016a/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabfac3df70c796525df4ba806ed1d3e9a57016a/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=dabfac3df70c796525df4ba806ed1d3e9a57016a", "patch": "@@ -134,3 +134,9 @@ fn int_cast(a: u16, b: i16) -> (u8, u16, u32, usize, i8, i16, i32, isize) {\n         a as isize,\n     )\n }\n+\n+struct DebugTuple(());\n+\n+fn debug_tuple() -> DebugTuple {\n+    DebugTuple(())\n+}"}, {"sha": "73c13619b97946e86d8dc081bf8f32d1032209fb", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dabfac3df70c796525df4ba806ed1d3e9a57016a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabfac3df70c796525df4ba806ed1d3e9a57016a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=dabfac3df70c796525df4ba806ed1d3e9a57016a", "patch": "@@ -260,6 +260,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             let field_offset = fx.bcx.ins().iconst(types::I64, field_offset.bytes() as i64);\n             CPlace::Addr(fx.bcx.ins().iadd(base, field_offset), field_ty)\n         } else {\n+            fx.bcx.ins().nop();\n             CPlace::Addr(base, field_ty)\n         }\n     }\n@@ -290,9 +291,8 @@ pub fn cton_sig_from_instance<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, inst: I\n \n pub fn cton_sig_from_mono_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>) -> Signature {\n     // TODO: monomorphize signature\n-    // TODO: this should likely not use skip_binder()\n \n-    let sig = sig.skip_binder();\n+    let sig = tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &sig);\n     let inputs = sig.inputs();\n     let _output = sig.output();\n     assert!(!sig.variadic, \"Variadic function are not yet supported\");"}]}