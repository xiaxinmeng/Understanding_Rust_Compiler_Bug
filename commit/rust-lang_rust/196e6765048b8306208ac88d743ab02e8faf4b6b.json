{"sha": "196e6765048b8306208ac88d743ab02e8faf4b6b", "node_id": "C_kwDOAAsO6NoAKDE5NmU2NzY1MDQ4YjgzMDYyMDhhYzg4ZDc0M2FiMDJlOGZhZjRiNmI", "commit": {"author": {"name": "mujpao", "email": "mujpao@gmail.com", "date": "2021-11-19T01:06:49Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-20T01:18:17Z"}, "message": "Preserve normalized comments after last list item", "tree": {"sha": "f9ea826875efd9cef203f7a14fc0b9f9cbb169c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ea826875efd9cef203f7a14fc0b9f9cbb169c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196e6765048b8306208ac88d743ab02e8faf4b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196e6765048b8306208ac88d743ab02e8faf4b6b", "html_url": "https://github.com/rust-lang/rust/commit/196e6765048b8306208ac88d743ab02e8faf4b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196e6765048b8306208ac88d743ab02e8faf4b6b/comments", "author": {"login": "mujpao", "id": 13281891, "node_id": "MDQ6VXNlcjEzMjgxODkx", "avatar_url": "https://avatars.githubusercontent.com/u/13281891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mujpao", "html_url": "https://github.com/mujpao", "followers_url": "https://api.github.com/users/mujpao/followers", "following_url": "https://api.github.com/users/mujpao/following{/other_user}", "gists_url": "https://api.github.com/users/mujpao/gists{/gist_id}", "starred_url": "https://api.github.com/users/mujpao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mujpao/subscriptions", "organizations_url": "https://api.github.com/users/mujpao/orgs", "repos_url": "https://api.github.com/users/mujpao/repos", "events_url": "https://api.github.com/users/mujpao/events{/privacy}", "received_events_url": "https://api.github.com/users/mujpao/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf", "html_url": "https://github.com/rust-lang/rust/commit/2c442ccf25a98c9e8f0a972d94f10ef44b7b09bf"}], "stats": {"total": 539, "additions": 535, "deletions": 4}, "files": [{"sha": "3515dd172510c91e6bc109c7378ab8cccd82f0b2", "filename": "src/lists.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/196e6765048b8306208ac88d743ab02e8faf4b6b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196e6765048b8306208ac88d743ab02e8faf4b6b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=196e6765048b8306208ac88d743ab02e8faf4b6b", "patch": "@@ -444,10 +444,15 @@ where\n                 let offset = formatting.shape.indent + overhead;\n                 let comment_shape = Shape::legacy(width, offset);\n \n-                // Use block-style only for the last item or multiline comments.\n-                let block_style = !formatting.ends_with_newline && last\n-                    || comment.trim().contains('\\n')\n-                    || comment.trim().len() > width;\n+                let block_style = if !formatting.ends_with_newline && last {\n+                    true\n+                } else if starts_with_newline(comment) {\n+                    false\n+                } else if comment.trim().contains('\\n') || comment.trim().len() > width {\n+                    true\n+                } else {\n+                    false\n+                };\n \n                 rewrite_comment(\n                     comment.trim_start(),"}, {"sha": "cd8de2707f16070e0ce673e2f462baee725ed032", "filename": "tests/source/issue-4909/wrap-comments-not-normalized.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Fsource%2Fissue-4909%2Fwrap-comments-not-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Fsource%2Fissue-4909%2Fwrap-comments-not-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4909%2Fwrap-comments-not-normalized.rs?ref=196e6765048b8306208ac88d743ab02e8faf4b6b", "patch": "@@ -0,0 +1,108 @@\n+// rustfmt-wrap_comments: true\n+\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    ];\n+}"}, {"sha": "f18d8d686e1f3a8dc3ec0b5195daa596edfb408d", "filename": "tests/source/issue-4909/wrap-comments-true.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Fsource%2Fissue-4909%2Fwrap-comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Fsource%2Fissue-4909%2Fwrap-comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4909%2Fwrap-comments-true.rs?ref=196e6765048b8306208ac88d743ab02e8faf4b6b", "patch": "@@ -0,0 +1,109 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the inclusion pipeline, or according to the descriptions\n+    ];\n+}"}, {"sha": "a8ead584f445995628c634dd83252b94b69e53bd", "filename": "tests/target/issue-4909/wrap-comments-false.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-false.rs?ref=196e6765048b8306208ac88d743ab02e8faf4b6b", "patch": "@@ -0,0 +1,72 @@\n+// rustfmt-normalize_comments: true\n+\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+}"}, {"sha": "2a3d803b3b1e45a704271356c99a994f9ad4ddba", "filename": "tests/target/issue-4909/wrap-comments-not-normalized.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-not-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-not-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-not-normalized.rs?ref=196e6765048b8306208ac88d743ab02e8faf4b6b", "patch": "@@ -0,0 +1,118 @@\n+// rustfmt-wrap_comments: true\n+\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+    ];\n+}"}, {"sha": "5376962a2ee41bf4397bb9e567def1d961d1b13a", "filename": "tests/target/issue-4909/wrap-comments-true.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196e6765048b8306208ac88d743ab02e8faf4b6b/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4909%2Fwrap-comments-true.rs?ref=196e6765048b8306208ac88d743ab02e8faf4b6b", "patch": "@@ -0,0 +1,119 @@\n+// rustfmt-normalize_comments: true\n+// rustfmt-wrap_comments: true\n+\n+pub enum E {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub enum E3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant1,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    Variant2,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+pub struct S {\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S2 {\n+    // This can be changed once https://github.com/rust-lang/rustfmt/issues/4854 is fixed\n+// Expand as needed, numbers should be ascending according to the stage\n+// through the inclusion pipeline, or according to the descriptions\n+}\n+\n+pub struct S3 {\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    some_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    last_field: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+}\n+\n+fn foo(\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo2(// Expand as needed, numbers should be ascending according to the stage\n+    // through the inclusion pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn foo3(\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    a: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+    b: usize,\n+    // Expand as needed, numbers should be ascending according to the stage through the inclusion\n+    // pipeline, or according to the descriptions\n+) -> usize {\n+    5\n+}\n+\n+fn main() {\n+    let v = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v2: Vec<i32> = vec![\n+        // Expand as needed, numbers should be ascending according to the stage\n+        // through the inclusion pipeline, or according to the descriptions\n+    ];\n+\n+    let v3 = vec![\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        1,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+        2,\n+        // Expand as needed, numbers should be ascending according to the stage through the\n+        // inclusion pipeline, or according to the descriptions\n+    ];\n+}"}]}