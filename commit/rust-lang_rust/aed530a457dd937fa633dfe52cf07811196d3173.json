{"sha": "aed530a457dd937fa633dfe52cf07811196d3173", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDUzMGE0NTdkZDkzN2ZhNjMzZGZlNTJjZjA3ODExMTk2ZDMxNzM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-28T12:33:28Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:22:46Z"}, "message": "Lift bounds into GenericParam", "tree": {"sha": "d7848036bf766e1153e965028d8c4c5c8ecb5940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7848036bf766e1153e965028d8c4c5c8ecb5940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed530a457dd937fa633dfe52cf07811196d3173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed530a457dd937fa633dfe52cf07811196d3173", "html_url": "https://github.com/rust-lang/rust/commit/aed530a457dd937fa633dfe52cf07811196d3173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed530a457dd937fa633dfe52cf07811196d3173/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5328bc17b8d18083478554b3381d55183647f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5328bc17b8d18083478554b3381d55183647f15", "html_url": "https://github.com/rust-lang/rust/commit/a5328bc17b8d18083478554b3381d55183647f15"}], "stats": {"total": 683, "additions": 339, "deletions": 344}, "files": [{"sha": "d5c9d964eb2a59c5cd43f2563748c3bdfea4f32d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -314,7 +314,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_trait_ref(&mut self, t: &'v TraitRef) {\n         walk_trait_ref(self, t)\n     }\n-    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) {\n+    fn visit_ty_param_bound(&mut self, bounds: &'v ParamBound) {\n         walk_ty_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: TraitBoundModifier) {\n@@ -731,12 +731,12 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n }\n \n-pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyParamBound) {\n+pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n-        RegionTyParamBound(ref lifetime) => {\n+        Outlives(ref lifetime) => {\n             visitor.visit_lifetime(lifetime);\n         }\n     }\n@@ -759,11 +759,11 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n         }\n         GenericParamKind::Type { name, ref bounds, ref default, ref attrs, .. } => {\n             visitor.visit_name(param.span, name);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n             walk_list!(visitor, visit_attribute, attrs.iter());\n         }\n     }\n+    walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {"}, {"sha": "494e6e1ba33ba4c705db88e8a4d42c6cf11c0479", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -701,9 +701,9 @@ impl<'a> LoweringContext<'a> {\n                     id: def_node_id,\n                     span,\n                     pure_wrt_drop: false,\n+                    bounds: vec![].into(),\n                     kind: hir::GenericParamKind::Lifetime {\n                         name: hir_name,\n-                        bounds: vec![].into(),\n                         in_band: true,\n                         lifetime: hir::Lifetime {\n                             id: def_node_id,\n@@ -1127,7 +1127,7 @@ impl<'a> LoweringContext<'a> {\n                             Some(self.lower_poly_trait_ref(ty, itctx))\n                         }\n                         TraitTyParamBound(_, TraitBoundModifier::Maybe) => None,\n-                        RegionTyParamBound(ref lifetime) => {\n+                        Outlives(ref lifetime) => {\n                             if lifetime_bound.is_none() {\n                                 lifetime_bound = Some(self.lower_lifetime(lifetime));\n                             }\n@@ -1246,16 +1246,16 @@ impl<'a> LoweringContext<'a> {\n                             span,\n                         );\n \n-                        let hir_bounds = self.lower_bounds(bounds, itctx);\n+                        let hir_bounds = self.lower_param_bounds(bounds, itctx);\n                         // Set the name to `impl Bound1 + Bound2`\n                         let name = Symbol::intern(&pprust::ty_to_string(t));\n                         self.in_band_ty_params.push(hir::GenericParam {\n                             id: def_node_id,\n                             span,\n                             pure_wrt_drop: false,\n+                            bounds: hir_bounds,\n                             kind: hir::GenericParamKind::Type {\n                                 name,\n-                                bounds: hir_bounds,\n                                 default: None,\n                                 synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n                                 attrs: P::new(),\n@@ -1299,7 +1299,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         exist_ty_id: NodeId,\n         parent_index: DefIndex,\n-        bounds: &hir::TyParamBounds,\n+        bounds: &hir::ParamBounds,\n     ) -> (HirVec<hir::Lifetime>, HirVec<hir::GenericParam>) {\n         // This visitor walks over impl trait bounds and creates defs for all lifetimes which\n         // appear in the bounds, excluding lifetimes that are created within the bounds.\n@@ -1420,9 +1420,9 @@ impl<'a> LoweringContext<'a> {\n                         id: def_node_id,\n                         span: lifetime.span,\n                         pure_wrt_drop: false,\n+                        bounds: vec![].into(),\n                         kind: hir::GenericParamKind::Lifetime {\n                             name,\n-                            bounds: vec![].into(),\n                             in_band: false,\n                             lifetime: hir::Lifetime {\n                                 id: def_node_id,\n@@ -1882,18 +1882,18 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn lower_ty_param_bound(\n+    fn lower_param_bound(\n         &mut self,\n-        tpb: &TyParamBound,\n+        tpb: &ParamBound,\n         itctx: ImplTraitContext,\n-    ) -> hir::TyParamBound {\n+    ) -> hir::ParamBound {\n         match *tpb {\n             TraitTyParamBound(ref ty, modifier) => hir::TraitTyParamBound(\n                 self.lower_poly_trait_ref(ty, itctx),\n                 self.lower_trait_bound_modifier(modifier),\n             ),\n-            RegionTyParamBound(ref lifetime) => {\n-                hir::RegionTyParamBound(self.lower_lifetime(lifetime))\n+            Outlives(ref lifetime) => {\n+                hir::Outlives(self.lower_lifetime(lifetime))\n             }\n         }\n     }\n@@ -1935,19 +1935,20 @@ impl<'a> LoweringContext<'a> {\n     fn lower_generic_params(\n         &mut self,\n         params: &Vec<GenericParam>,\n-        add_bounds: &NodeMap<Vec<TyParamBound>>,\n+        add_bounds: &NodeMap<Vec<ParamBound>>,\n         itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {\n         params.iter().map(|param| self.lower_generic_param(param, add_bounds, itctx)).collect()\n     }\n \n     fn lower_generic_param(&mut self,\n                            param: &GenericParam,\n-                           add_bounds: &NodeMap<Vec<TyParamBound>>,\n+                           add_bounds: &NodeMap<Vec<ParamBound>>,\n                            itctx: ImplTraitContext)\n                            -> hir::GenericParam {\n+        let mut bounds = self.lower_param_bounds(&param.bounds, itctx);\n         match param.kind {\n-            GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n+            GenericParamKind::Lifetime { ref lifetime } => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n \n@@ -1956,9 +1957,9 @@ impl<'a> LoweringContext<'a> {\n                     id: lifetime.id,\n                     span: lifetime.span,\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n+                    bounds,\n                     kind: hir::GenericParamKind::Lifetime {\n                         name: lifetime.name,\n-                        bounds: bounds.iter().map(|lt| self.lower_lifetime(lt)).collect(),\n                         in_band: false,\n                         lifetime,\n                     }\n@@ -1968,7 +1969,7 @@ impl<'a> LoweringContext<'a> {\n \n                 param\n             }\n-            GenericParamKind::Type { ref bounds, ref default } => {\n+            GenericParamKind::Type { ref default, .. } => {\n                 let mut name = self.lower_ident(param.ident);\n \n                 // Don't expose `Self` (recovered \"keyword used as ident\" parse error).\n@@ -1978,21 +1979,20 @@ impl<'a> LoweringContext<'a> {\n                     name = Symbol::gensym(\"Self\");\n                 }\n \n-                let mut bounds = self.lower_bounds(bounds, itctx);\n                 let add_bounds = add_bounds.get(&param.id).map_or(&[][..], |x| &x);\n                 if !add_bounds.is_empty() {\n                     bounds = bounds.into_iter()\n-                                   .chain(self.lower_bounds(add_bounds, itctx).into_iter())\n+                                   .chain(self.lower_param_bounds(add_bounds, itctx).into_iter())\n                                    .collect();\n                 }\n \n                 hir::GenericParam {\n                     id: self.lower_node_id(param.id).node_id,\n                     span: param.ident.span,\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n+                    bounds,\n                     kind: hir::GenericParamKind::Type {\n                         name,\n-                        bounds,\n                         default: default.as_ref().map(|x| {\n                             self.lower_ty(x, ImplTraitContext::Disallowed)\n                         }),\n@@ -2107,7 +2107,7 @@ impl<'a> LoweringContext<'a> {\n                                     // Ignore `?Trait` bounds.\n                                     // Tthey were copied into type parameters already.\n                                     TraitTyParamBound(_, TraitBoundModifier::Maybe) => None,\n-                                    _ => Some(this.lower_ty_param_bound(\n+                                    _ => Some(this.lower_param_bound(\n                                         bound,\n                                         ImplTraitContext::Disallowed,\n                                     )),\n@@ -2228,15 +2228,9 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_bounds(\n-        &mut self,\n-        bounds: &[TyParamBound],\n-        itctx: ImplTraitContext,\n-    ) -> hir::TyParamBounds {\n-        bounds\n-            .iter()\n-            .map(|bound| self.lower_ty_param_bound(bound, itctx))\n-            .collect()\n+    fn lower_param_bounds(&mut self, bounds: &[ParamBound], itctx: ImplTraitContext)\n+        -> hir::ParamBounds {\n+        bounds.iter().map(|bound| self.lower_param_bound(bound, itctx)).collect()\n     }\n \n     fn lower_block(&mut self, b: &Block, targeted_by_break: bool) -> P<hir::Block> {\n@@ -2422,7 +2416,7 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n-                let bounds = self.lower_bounds(bounds, ImplTraitContext::Disallowed);\n+                let bounds = self.lower_param_bounds(bounds, ImplTraitContext::Disallowed);\n                 let items = items\n                     .iter()\n                     .map(|item| self.lower_trait_item_ref(item))\n@@ -2437,7 +2431,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::TraitAlias(ref generics, ref bounds) => hir::ItemTraitAlias(\n                 self.lower_generics(generics, ImplTraitContext::Disallowed),\n-                self.lower_bounds(bounds, ImplTraitContext::Disallowed),\n+                self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n             ),\n             ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n@@ -2664,7 +2658,7 @@ impl<'a> LoweringContext<'a> {\n             TraitItemKind::Type(ref bounds, ref default) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n                 hir::TraitItemKind::Type(\n-                    self.lower_bounds(bounds, ImplTraitContext::Disallowed),\n+                    self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n                     default\n                         .as_ref()\n                         .map(|x| self.lower_ty(x, ImplTraitContext::Disallowed)),"}, {"sha": "8253a34f3106a42e2a38b2ac206e82e8391422c5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -22,7 +22,7 @@ pub use self::Mutability::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n pub use self::Ty_::*;\n-pub use self::TyParamBound::*;\n+pub use self::ParamBound::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n pub use self::Visibility::{Public, Inherited};\n@@ -416,41 +416,42 @@ impl GenericArgs {\n     }\n }\n \n+/// A modifier on a bound, currently this is only used for `?Sized`, where the\n+/// modifier is `Maybe`. Negative bounds should also be handled here.\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum TraitBoundModifier {\n+    None,\n+    Maybe,\n+}\n+\n+pub type Outlives = Lifetime;\n+\n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum TyParamBound {\n+pub enum ParamBound {\n     TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n-    RegionTyParamBound(Lifetime),\n+    Outlives(Lifetime),\n }\n \n-impl TyParamBound {\n+impl ParamBound {\n     pub fn span(&self) -> Span {\n         match self {\n             &TraitTyParamBound(ref t, ..) => t.span,\n-            &RegionTyParamBound(ref l) => l.span,\n+            &Outlives(ref l) => l.span,\n         }\n     }\n }\n \n-/// A modifier on a bound, currently this is only used for `?Sized`, where the\n-/// modifier is `Maybe`. Negative bounds should also be handled here.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum TraitBoundModifier {\n-    None,\n-    Maybe,\n-}\n-\n-pub type TyParamBounds = HirVec<TyParamBound>;\n+pub type ParamBounds = HirVec<ParamBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, eg `'a: 'b + 'c + 'd`.\n     Lifetime {\n         name: LifetimeName,\n-        bounds: HirVec<Lifetime>,\n         // Indicates that the lifetime definition was synthetically added\n         // as a result of an in-band lifetime usage like:\n         // `fn foo(x: &'a u8) -> &'a u8 { x }`\n@@ -460,7 +461,6 @@ pub enum GenericParamKind {\n     },\n     Type {\n         name: Name,\n-        bounds: TyParamBounds,\n         default: Option<P<Ty>>,\n         synthetic: Option<SyntheticTyParamKind>,\n         attrs: HirVec<Attribute>,\n@@ -470,6 +470,7 @@ pub enum GenericParamKind {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct GenericParam {\n     pub id: NodeId,\n+    pub bounds: ParamBounds,\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n \n@@ -587,7 +588,7 @@ pub struct WhereBoundPredicate {\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n-    pub bounds: TyParamBounds,\n+    pub bounds: ParamBounds,\n }\n \n /// A lifetime predicate, e.g. `'a: 'b+'c`\n@@ -1554,7 +1555,7 @@ pub enum TraitItemKind {\n     Method(MethodSig, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type\n-    Type(TyParamBounds, Option<P<Ty>>),\n+    Type(ParamBounds, Option<P<Ty>>),\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -1639,7 +1640,7 @@ pub struct BareFnTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ExistTy {\n     pub generics: Generics,\n-    pub bounds: TyParamBounds,\n+    pub bounds: ParamBounds,\n     pub impl_trait_fn: Option<DefId>,\n }\n \n@@ -2048,9 +2049,9 @@ pub enum Item_ {\n     /// A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(IsAuto, Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n+    ItemTrait(IsAuto, Unsafety, Generics, ParamBounds, HirVec<TraitItemRef>),\n     /// Represents a Trait Alias Declaration\n-    ItemTraitAlias(Generics, TyParamBounds),\n+    ItemTraitAlias(Generics, ParamBounds),\n \n     /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,"}, {"sha": "4058db17f2fa06d6ce45825a2f06822f3891e9dc", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -24,7 +24,7 @@ use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use hir;\n-use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n+use hir::{PatKind, Outlives, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n use hir::{GenericParam, GenericParamKind, GenericArg};\n \n use std::cell::Cell;\n@@ -514,7 +514,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_type(&mut self,\n                              name: ast::Name,\n-                             bounds: Option<&hir::TyParamBounds>,\n+                             bounds: Option<&hir::ParamBounds>,\n                              ty: Option<&hir::Ty>)\n                              -> io::Result<()> {\n         self.word_space(\"type\")?;\n@@ -2071,7 +2071,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_bounds(&mut self, prefix: &str, bounds: &[hir::TyParamBound]) -> io::Result<()> {\n+    pub fn print_bounds(&mut self, prefix: &str, bounds: &[hir::ParamBound]) -> io::Result<()> {\n         if !bounds.is_empty() {\n             self.s.word(prefix)?;\n             let mut first = true;\n@@ -2092,7 +2092,7 @@ impl<'a> State<'a> {\n                         }\n                         self.print_poly_trait_ref(tref)?;\n                     }\n-                    RegionTyParamBound(lt) => {\n+                    Outlives(lt) => {\n                         self.print_lifetime(lt)?;\n                     }\n                 }\n@@ -2117,17 +2117,22 @@ impl<'a> State<'a> {\n     pub fn print_generic_param(&mut self, param: &GenericParam) -> io::Result<()> {\n         self.print_name(param.name())?;\n         match param.kind {\n-            GenericParamKind::Lifetime { ref bounds, .. } => {\n+            GenericParamKind::Lifetime { .. } => {\n                 let mut sep = \":\";\n-                for bound in bounds {\n-                    self.s.word(sep)?;\n-                    self.print_lifetime(bound)?;\n-                    sep = \"+\";\n+                for bound in &param.bounds {\n+                    match bound {\n+                        hir::ParamBound::Outlives(lt) => {\n+                            self.s.word(sep)?;\n+                            self.print_lifetime(lt)?;\n+                            sep = \"+\";\n+                        }\n+                        _ => bug!(),\n+                    }\n                 }\n                 Ok(())\n             }\n-            GenericParamKind::Type { ref bounds, ref default, .. } => {\n-                self.print_bounds(\":\", bounds)?;\n+            GenericParamKind::Type { ref default, .. } => {\n+                self.print_bounds(\":\", &param.bounds)?;\n                 match default {\n                     Some(default) => {\n                         self.s.space()?;"}, {"sha": "f8da828d2c3bab0454ae5f15718f734c9157a5d5", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -184,9 +184,9 @@ impl_stable_hash_for!(struct hir::GenericArgs {\n     parenthesized\n });\n \n-impl_stable_hash_for!(enum hir::TyParamBound {\n+impl_stable_hash_for!(enum hir::ParamBound {\n     TraitTyParamBound(poly_trait_ref, trait_bound_modifier),\n-    RegionTyParamBound(lifetime)\n+    Outlives(lifetime)\n });\n \n impl_stable_hash_for!(enum hir::TraitBoundModifier {\n@@ -198,6 +198,7 @@ impl_stable_hash_for!(struct hir::GenericParam {\n     id,\n     span,\n     pure_wrt_drop,\n+    bounds,\n     kind\n });\n \n@@ -207,16 +208,13 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            hir::GenericParamKind::Lifetime { name, ref bounds, in_band,\n-                                              ref lifetime } => {\n+            hir::GenericParamKind::Lifetime { name, in_band, ref lifetime } => {\n                 name.hash_stable(hcx, hasher);\n-                bounds.hash_stable(hcx, hasher);\n                 in_band.hash_stable(hcx, hasher);\n                 lifetime.hash_stable(hcx, hasher);\n             }\n-            hir::GenericParamKind::Type { name, ref bounds, ref default, synthetic, attrs } => {\n+            hir::GenericParamKind::Type { name, ref default, synthetic, attrs } => {\n                 name.hash_stable(hcx, hasher);\n-                bounds.hash_stable(hcx, hasher);\n                 default.hash_stable(hcx, hasher);\n                 synthetic.hash_stable(hcx, hasher);\n                 attrs.hash_stable(hcx, hasher);"}, {"sha": "4d6f2fb41b05d7e5c5fa5512071b9aa2f9e0eacc", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -61,7 +61,7 @@ use super::region_constraints::GenericKind;\n use super::lexical_region_resolve::RegionResolutionError;\n \n use std::fmt;\n-use hir::{self, GenericParamKind};\n+use hir;\n use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n@@ -1038,12 +1038,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // instead we suggest `T: 'a + 'b` in that case.\n                             let mut has_bounds = false;\n                             if let hir_map::NodeGenericParam(ref param) = hir.get(id) {\n-                                match param.kind {\n-                                    GenericParamKind::Type { ref bounds, .. } => {\n-                                        has_bounds = !bounds.is_empty();\n-                                    }\n-                                    _ => bug!(\"unexpected non-type NodeGenericParam\"),\n-                                }\n+                                has_bounds = !param.bounds.is_empty();\n                             }\n                             let sp = hir.span(id);\n                             // `sp` only covers `T`, change it so that it covers"}, {"sha": "2963227c2117ea526f0b5be821aa5f9439deddab", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -881,8 +881,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => {}\n-                GenericParamKind::Type { ref bounds, ref default, .. } => {\n-                    walk_list!(self, visit_ty_param_bound, bounds);\n+                GenericParamKind::Type { ref default, .. } => {\n+                    walk_list!(self, visit_ty_param_bound, &param.bounds);\n                     if let Some(ref ty) = default {\n                         self.visit_ty(&ty);\n                     }\n@@ -1255,20 +1255,20 @@ fn object_lifetime_defaults_for_item(\n     tcx: TyCtxt<'_, '_, '_>,\n     generics: &hir::Generics,\n ) -> Vec<ObjectLifetimeDefault> {\n-    fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::TyParamBound]) {\n+    fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::ParamBound]) {\n         for bound in bounds {\n-            if let hir::RegionTyParamBound(ref lifetime) = *bound {\n+            if let hir::Outlives(ref lifetime) = *bound {\n                 set.insert(lifetime.name);\n             }\n         }\n     }\n \n     generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamKind::Lifetime { .. } => None,\n-        GenericParamKind::Type { ref bounds, .. } => {\n+        GenericParamKind::Type { .. } => {\n             let mut set = Set1::Empty;\n \n-            add_bounds(&mut set, &bounds);\n+            add_bounds(&mut set, &param.bounds);\n \n             let param_def_id = tcx.hir.local_def_id(param.id);\n             for predicate in &generics.where_clause.predicates {\n@@ -2283,45 +2283,44 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             // It is a soft error to shadow a lifetime within a parent scope.\n             self.check_lifetime_param_for_shadowing(old_scope, &lifetime_i);\n \n-            let bounds = match lifetime_i.kind {\n-                GenericParamKind::Lifetime { ref bounds, .. } => bounds,\n-                _ => bug!(),\n-            };\n-            for bound in bounds {\n-                match bound.name {\n-                    hir::LifetimeName::Underscore => {\n-                        let mut err = struct_span_err!(\n-                            self.tcx.sess,\n-                            bound.span,\n-                            E0637,\n-                            \"invalid lifetime bound name: `'_`\"\n-                        );\n-                        err.span_label(bound.span, \"`'_` is a reserved lifetime name\");\n-                        err.emit();\n-                    }\n-                    hir::LifetimeName::Static => {\n-                        self.insert_lifetime(bound, Region::Static);\n-                        self.tcx\n-                            .sess\n-                            .struct_span_warn(\n-                                lifetime_i.span.to(bound.span),\n-                                &format!(\n-                                    \"unnecessary lifetime parameter `{}`\",\n+            for bound in &lifetime_i.bounds {\n+                match bound {\n+                    hir::ParamBound::Outlives(lt) => match lt.name {\n+                        hir::LifetimeName::Underscore => {\n+                            let mut err = struct_span_err!(\n+                                self.tcx.sess,\n+                                lt.span,\n+                                E0637,\n+                                \"invalid lifetime bound name: `'_`\"\n+                            );\n+                            err.span_label(lt.span, \"`'_` is a reserved lifetime name\");\n+                            err.emit();\n+                        }\n+                        hir::LifetimeName::Static => {\n+                            self.insert_lifetime(lt, Region::Static);\n+                            self.tcx\n+                                .sess\n+                                .struct_span_warn(\n+                                    lifetime_i.span.to(lt.span),\n+                                    &format!(\n+                                        \"unnecessary lifetime parameter `{}`\",\n+                                        lifetime_i.name()\n+                                    ),\n+                                )\n+                                .help(&format!(\n+                                    \"you can use the `'static` lifetime directly, in place \\\n+                                     of `{}`\",\n                                     lifetime_i.name()\n-                                ),\n-                            )\n-                            .help(&format!(\n-                                \"you can use the `'static` lifetime directly, in place \\\n-                                 of `{}`\",\n-                                lifetime_i.name()\n-                            ))\n-                            .emit();\n-                    }\n-                    hir::LifetimeName::Fresh(_)\n-                    | hir::LifetimeName::Implicit\n-                    | hir::LifetimeName::Name(_) => {\n-                        self.resolve_lifetime_ref(bound);\n+                                ))\n+                                .emit();\n+                        }\n+                        hir::LifetimeName::Fresh(_)\n+                        | hir::LifetimeName::Implicit\n+                        | hir::LifetimeName::Name(_) => {\n+                            self.resolve_lifetime_ref(lt);\n+                        }\n                     }\n+                    _ => bug!(),\n                 }\n             }\n         }\n@@ -2521,8 +2520,8 @@ fn insert_late_bound_lifetimes(\n \n     for param in &generics.params {\n         match param.kind {\n-            hir::GenericParamKind::Lifetime { ref bounds, .. } => {\n-                if !bounds.is_empty() {\n+            hir::GenericParamKind::Lifetime { .. } => {\n+                if !param.bounds.is_empty() {\n                     // `'a: 'b` means both `'a` and `'b` are referenced\n                     appears_in_where_clause.regions.insert(lifetime_def.lifetime.name);\n                 }"}, {"sha": "941fabe26a6ed3ff3f789103372c6d4306dc2546", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -1537,14 +1537,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n         }\n         // The parameters must not have bounds\n         for param in type_alias_generics.params.iter() {\n-            let spans: Vec<_> = match param.kind {\n-                GenericParamKind::Lifetime { ref bounds, .. } => {\n-                    bounds.iter().map(|b| b.span).collect()\n-                }\n-                GenericParamKind::Type { ref bounds, .. } => {\n-                    bounds.iter().map(|b| b.span()).collect()\n-                }\n-            };\n+            let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n             if !spans.is_empty() {\n                 let mut err = cx.struct_span_lint(\n                     TYPE_ALIAS_BOUNDS,"}, {"sha": "d14a02ec8d155bee67d4d4afae69ea5711a2b9ec", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -99,7 +99,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn no_questions_in_bounds(&self, bounds: &TyParamBounds, where_: &str, is_trait: bool) {\n+    fn no_questions_in_bounds(&self, bounds: &ParamBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n             if let TraitTyParamBound(ref poly, TraitBoundModifier::Maybe) = *bound {\n                 let mut err = self.err_handler().struct_span_err(poly.span,\n@@ -142,9 +142,9 @@ impl<'a> AstValidator<'a> {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n         let non_lt_param_spans: Vec<_> = params.iter().filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { ref bounds, .. } => {\n-                    if !bounds.is_empty() {\n-                        let spans: Vec<_> = bounds.iter().map(|b| b.ident.span).collect();\n+                GenericParamKind::Lifetime { .. } => {\n+                    if !param.bounds.is_empty() {\n+                        let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n                         self.err_handler()\n                             .span_err(spans, \"lifetime bounds cannot be used in this context\");\n                     }\n@@ -190,7 +190,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             TyKind::TraitObject(ref bounds, ..) => {\n                 let mut any_lifetime_bounds = false;\n                 for bound in bounds {\n-                    if let RegionTyParamBound(ref lifetime) = *bound {\n+                    if let Outlives(ref lifetime) = *bound {\n                         if any_lifetime_bounds {\n                             span_err!(self.session, lifetime.ident.span, E0226,\n                                       \"only a single explicit lifetime bound is permitted\");\n@@ -330,8 +330,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 for param in params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {}\n-                        GenericParamKind::Type { ref bounds, ref default, .. } => {\n-                            if !bounds.is_empty() {\n+                        GenericParamKind::Type { ref default, .. } => {\n+                            if !param.bounds.is_empty() {\n                                 self.err_handler()\n                                     .span_err(param.ident.span, \"type parameters on the left \\\n                                         side of a trait alias cannot be bounded\");"}, {"sha": "c58b6a96ee70e461f3ecfd61087e238fa246be17", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -203,8 +203,8 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_ty_param_bound(&mut self, bounds: &'v hir::TyParamBound) {\n-        self.record(\"TyParamBound\", Id::None, bounds);\n+    fn visit_ty_param_bound(&mut self, bounds: &'v hir::ParamBound) {\n+        self.record(\"ParamBound\", Id::None, bounds);\n         hir_visit::walk_ty_param_bound(self, bounds)\n     }\n \n@@ -322,8 +322,8 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_ty_param_bound(&mut self, bounds: &'v ast::TyParamBound) {\n-        self.record(\"TyParamBound\", Id::None, bounds);\n+    fn visit_ty_param_bound(&mut self, bounds: &'v ast::ParamBound) {\n+        self.record(\"ParamBound\", Id::None, bounds);\n         ast_visit::walk_ty_param_bound(self, bounds)\n     }\n "}, {"sha": "2667f68b26095560e95f9d25e70f610d234983ab", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -1038,7 +1038,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_ty_param_bound(&mut self,\n-                            ty_param_bound: &hir::TyParamBound) {\n+                            ty_param_bound: &hir::ParamBound) {\n         if let hir::TraitTyParamBound(ref trait_ref, _) = *ty_param_bound {\n             if self.path_is_private_type(&trait_ref.trait_ref.path) {\n                 self.old_error_set.insert(trait_ref.trait_ref.ref_id);\n@@ -1270,8 +1270,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n         generics.params.iter().for_each(|param| match param.kind {\n             GenericParamKind::Lifetime { .. } => {}\n-            GenericParamKind::Type { ref bounds, .. } => {\n-                for bound in bounds {\n+            GenericParamKind::Type { .. } => {\n+                for bound in &param.bounds {\n                     self.check_ty_param_bound(bound);\n                 }\n             }"}, {"sha": "b51ef90449571916837a8c5f82df4196fdcc7a8e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -813,8 +813,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n-                GenericParamKind::Type { ref bounds, ref default, .. } => {\n-                    for bound in bounds {\n+                GenericParamKind::Type { ref default, .. } => {\n+                    for bound in &param.bounds {\n                         self.visit_ty_param_bound(bound);\n                     }\n "}, {"sha": "cbae6c1ab1ab876425562b801c631f8ed36ec4af", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -718,7 +718,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         &mut self,\n         item: &'l ast::Item,\n         generics: &'l ast::Generics,\n-        trait_refs: &'l ast::TyParamBounds,\n+        trait_refs: &'l ast::ParamBounds,\n         methods: &'l [ast::TraitItem],\n     ) {\n         let name = item.ident.to_string();\n@@ -762,7 +762,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         for super_bound in trait_refs.iter() {\n             let trait_ref = match *super_bound {\n                 ast::TraitTyParamBound(ref trait_ref, _) => trait_ref,\n-                ast::RegionTyParamBound(..) => {\n+                ast::Outlives(..) => {\n                     continue;\n                 }\n             };\n@@ -1487,8 +1487,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n     fn visit_generics(&mut self, generics: &'l ast::Generics) {\n         generics.params.iter().for_each(|param| match param.kind {\n             ast::GenericParamKind::Lifetime { .. } => {}\n-            ast::GenericParamKind::Type { ref bounds, ref default, .. } => {\n-                for bound in bounds {\n+            ast::GenericParamKind::Type { ref default, .. } => {\n+                for bound in &param.bounds {\n                     if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n                         self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n                     }"}, {"sha": "58e2e9b225829830bdf21a99d0b77d1f024e03e6", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -104,7 +104,7 @@ pub fn assoc_const_signature(\n pub fn assoc_type_signature(\n     id: NodeId,\n     ident: ast::Ident,\n-    bounds: Option<&ast::TyParamBounds>,\n+    bounds: Option<&ast::ParamBounds>,\n     default: Option<&ast::Ty>,\n     scx: &SaveContext,\n ) -> Option<Signature> {\n@@ -623,22 +623,22 @@ impl Sig for ast::Generics {\n                 start: offset + text.len(),\n                 end: offset + text.len() + param_text.len(),\n             });\n-            match param.kind {\n-                ast::GenericParamKind::Lifetime { ref bounds, .. } => {\n-                    if !bounds.is_empty() {\n-                        param_text.push_str(\": \");\n-                        let bounds = bounds.iter()\n-                            .map(|l| l.ident.to_string())\n+            if !param.bounds.is_empty() {\n+                param_text.push_str(\": \");\n+                match param.kind {\n+                    ast::GenericParamKind::Lifetime { .. } => {\n+                        let bounds = param.bounds.iter()\n+                            .map(|bound| match bound {\n+                                ast::ParamBound::Outlives(lt) => lt.ident.to_string(),\n+                                _ => panic!(),\n+                            })\n                             .collect::<Vec<_>>()\n                             .join(\" + \");\n                         param_text.push_str(&bounds);\n                         // FIXME add lifetime bounds refs.\n                     }\n-                }\n-                ast::GenericParamKind::Type { ref bounds, .. } => {\n-                    if !bounds.is_empty() {\n-                        param_text.push_str(\": \");\n-                        param_text.push_str(&pprust::bounds_to_string(bounds));\n+                    ast::GenericParamKind::Type { .. } => {\n+                        param_text.push_str(&pprust::bounds_to_string(&param.bounds));\n                         // FIXME descend properly into bounds.\n                     }\n                 }\n@@ -841,7 +841,7 @@ fn name_and_generics(\n fn make_assoc_type_signature(\n     id: NodeId,\n     ident: ast::Ident,\n-    bounds: Option<&ast::TyParamBounds>,\n+    bounds: Option<&ast::ParamBounds>,\n     default: Option<&ast::Ty>,\n     scx: &SaveContext,\n ) -> Result {"}, {"sha": "5f8955612e10cb00614bf34c15aae479d6eab212", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -844,9 +844,9 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         let bounds = impl_m.generics.params.iter().find_map(|param| {\n                             match param.kind {\n                                 GenericParamKind::Lifetime { .. } => None,\n-                                GenericParamKind::Type { ref bounds, .. } => {\n+                                GenericParamKind::Type { .. } => {\n                                     if param.id == impl_node_id {\n-                                        Some(bounds)\n+                                        Some(&param.bounds)\n                                     } else {\n                                         None\n                                     }"}, {"sha": "f95f6a26f0b92d93623646ae9a176b98a2a3b7e0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -315,9 +315,7 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n         let from_ty_params =\n             ast_generics.params.iter()\n                 .filter_map(|param| match param.kind {\n-                    GenericParamKind::Type { ref bounds, .. } if param.id == param_id => {\n-                        Some(bounds)\n-                    }\n+                    GenericParamKind::Type { .. } if param.id == param_id => Some(&param.bounds),\n                     _ => None\n                 })\n                 .flat_map(|bounds| bounds.iter())\n@@ -1252,7 +1250,7 @@ fn impl_polarity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n // Is it marked with ?Sized\n fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n-                                ast_bounds: &[hir::TyParamBound],\n+                                ast_bounds: &[hir::ParamBound],\n                                 span: Span) -> bool\n {\n     let tcx = astconv.tcx();\n@@ -1445,13 +1443,15 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         index += 1;\n \n         match param.kind {\n-            GenericParamKind::Lifetime { ref bounds, .. } => {\n-                for bound in bounds {\n-                    let bound_region = AstConv::ast_region_to_region(&icx, bound, None);\n-                    let outlives =\n-                        ty::Binder::bind(ty::OutlivesPredicate(region, bound_region));\n-                    predicates.push(outlives.to_predicate());\n-                }\n+            GenericParamKind::Lifetime { .. } => {\n+                param.bounds.iter().for_each(|bound| match bound {\n+                    hir::ParamBound::Outlives(lt) => {\n+                        let bound = AstConv::ast_region_to_region(&icx, &lt, None);\n+                        let outlives = ty::Binder::bind(ty::OutlivesPredicate(region, bound));\n+                        predicates.push(outlives.to_predicate());\n+                    }\n+                    _ => bug!(),\n+                });\n             },\n             _ => bug!(),\n         }\n@@ -1461,13 +1461,12 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // type parameter (e.g., `<T:Foo>`).\n     for param in &ast_generics.params {\n         match param.kind {\n-            GenericParamKind::Type { ref bounds, .. } => {\n-                let param_ty = ty::ParamTy::new(index, param.name().as_interned_str())\n-                                           .to_ty(tcx);\n+            GenericParamKind::Type { .. } => {\n+                let param_ty = ty::ParamTy::new(index, param.name().as_interned_str()).to_ty(tcx);\n                 index += 1;\n \n-                let bounds =\n-                    compute_bounds(&icx, param_ty, bounds, SizedByDefault::Yes, param.span);\n+                let sized = SizedByDefault::Yes;\n+                let bounds = compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n             }\n             _ => {}\n@@ -1483,7 +1482,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n-                        &hir::TyParamBound::TraitTyParamBound(ref poly_trait_ref, _) => {\n+                        &hir::ParamBound::TraitTyParamBound(ref poly_trait_ref, _) => {\n                             let mut projections = Vec::new();\n \n                             let trait_ref =\n@@ -1499,7 +1498,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             }\n                         }\n \n-                        &hir::TyParamBound::RegionTyParamBound(ref lifetime) => {\n+                        &hir::ParamBound::Outlives(ref lifetime) => {\n                             let region = AstConv::ast_region_to_region(&icx,\n                                                                        lifetime,\n                                                                        None);\n@@ -1578,7 +1577,7 @@ pub enum SizedByDefault { Yes, No, }\n /// built-in trait (formerly known as kind): Send.\n pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n                                         param_ty: Ty<'tcx>,\n-                                        ast_bounds: &[hir::TyParamBound],\n+                                        ast_bounds: &[hir::ParamBound],\n                                         sized_by_default: SizedByDefault,\n                                         span: Span)\n                                         -> Bounds<'tcx>\n@@ -1591,7 +1590,7 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n                 trait_bounds.push(b);\n             }\n             hir::TraitTyParamBound(_, hir::TraitBoundModifier::Maybe) => {}\n-            hir::RegionTyParamBound(ref l) => {\n+            hir::Outlives(ref l) => {\n                 region_bounds.push(l);\n             }\n         }\n@@ -1625,14 +1624,14 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     }\n }\n \n-/// Converts a specific TyParamBound from the AST into a set of\n+/// Converts a specific ParamBound from the AST into a set of\n /// predicates that apply to the self-type. A vector is returned\n /// because this can be anywhere from 0 predicates (`T:?Sized` adds no\n /// predicates) to 1 (`T:Foo`) to many (`T:Bar<X=i32>` adds `T:Bar`\n /// and `<T as Bar>::X == i32`).\n fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n                                param_ty: Ty<'tcx>,\n-                               bound: &hir::TyParamBound)\n+                               bound: &hir::ParamBound)\n                                -> Vec<ty::Predicate<'tcx>>\n {\n     match *bound {\n@@ -1646,7 +1645,7 @@ fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n                        .chain(Some(pred.to_predicate()))\n                        .collect()\n         }\n-        hir::RegionTyParamBound(ref lifetime) => {\n+        hir::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::Binder::bind(ty::OutlivesPredicate(param_ty, region));\n             vec![ty::Predicate::TypeOutlives(pred)]"}, {"sha": "2686ad96c6ece9e5bdabc662bac2d89edfbdd9b2", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -536,7 +536,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n \n     fn make_final_bounds<'b, 'c, 'cx>(\n         &self,\n-        ty_to_bounds: FxHashMap<Type, FxHashSet<TyParamBound>>,\n+        ty_to_bounds: FxHashMap<Type, FxHashSet<ParamBound>>,\n         ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)>,\n         lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<Lifetime>>,\n     ) -> Vec<WherePredicate> {\n@@ -589,7 +589,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         }\n                         _ => panic!(\"Unexpected data: {:?}, {:?}\", ty, data),\n                     };\n-                    bounds.insert(TyParamBound::TraitBound(\n+                    bounds.insert(ParamBound::TraitBound(\n                         PolyTrait {\n                             trait_: new_ty,\n                             generic_params: poly_trait.generic_params,\n@@ -732,7 +732,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         // later\n \n                         let is_fn = match &mut b {\n-                            &mut TyParamBound::TraitBound(ref mut p, _) => {\n+                            &mut ParamBound::TraitBound(ref mut p, _) => {\n                                 // Insert regions into the for_generics hash map first, to ensure\n                                 // that we don't end up with duplicate bounds (e.g. for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n@@ -826,7 +826,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                         .entry(*ty.clone())\n                                         .or_insert_with(|| FxHashSet());\n \n-                                    bounds.insert(TyParamBound::TraitBound(\n+                                    bounds.insert(ParamBound::TraitBound(\n                                         PolyTrait {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n@@ -843,7 +843,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                     // that we don't see a\n                                     // duplicate bound like `T: Iterator + Iterator<Item=u8>`\n                                     // on the docs page.\n-                                    bounds.remove(&TyParamBound::TraitBound(\n+                                    bounds.remove(&ParamBound::TraitBound(\n                                         PolyTrait {\n                                             trait_: *trait_.clone(),\n                                             generic_params: Vec::new(),\n@@ -877,7 +877,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     default.take();\n                     let generic_ty = Type::Generic(param.name.clone());\n                     if !has_sized.contains(&generic_ty) {\n-                        bounds.insert(0, TyParamBound::maybe_sized(self.cx));\n+                        bounds.insert(0, ParamBound::maybe_sized(self.cx));\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n@@ -911,7 +911,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // both for visual consistency between 'rustdoc' runs, and to\n     // make writing tests much easier\n     #[inline]\n-    fn sort_where_bounds(&self, mut bounds: &mut Vec<TyParamBound>) {\n+    fn sort_where_bounds(&self, mut bounds: &mut Vec<ParamBound>) {\n         // We should never have identical bounds - and if we do,\n         // they're visually identical as well. Therefore, using\n         // an unstable sort is fine.\n@@ -939,7 +939,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // to end users, it makes writing tests much more difficult, as predicates\n     // can appear in any order in the final result.\n     //\n-    // To solve this problem, we sort WherePredicates and TyParamBounds\n+    // To solve this problem, we sort WherePredicates and ParamBounds\n     // by their Debug string. The thing to keep in mind is that we don't really\n     // care what the final order is - we're synthesizing an impl or bound\n     // ourselves, so any order can be considered equally valid. By sorting the\n@@ -949,7 +949,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // Using the Debug impementation for sorting prevents us from needing to\n     // write quite a bit of almost entirely useless code (e.g. how should two\n     // Types be sorted relative to each other). It also allows us to solve the\n-    // problem for both WherePredicates and TyParamBounds at the same time. This\n+    // problem for both WherePredicates and ParamBounds at the same time. This\n     // approach is probably somewhat slower, but the small number of items\n     // involved (impls rarely have more than a few bounds) means that it\n     // shouldn't matter in practice."}, {"sha": "afe959aaec5a54bf7cc77768c6b2a0e398a76818", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -474,7 +474,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n             } if *s == \"Self\" => {\n                 bounds.retain(|bound| {\n                     match *bound {\n-                        clean::TyParamBound::TraitBound(clean::PolyTrait {\n+                        clean::ParamBound::TraitBound(clean::PolyTrait {\n                             trait_: clean::ResolvedPath { did, .. },\n                             ..\n                         }, _) => did != trait_did,\n@@ -505,7 +505,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n /// the metadata for a crate, so we want to separate those out and create a new\n /// list of explicit supertrait bounds to render nicely.\n fn separate_supertrait_bounds(mut g: clean::Generics)\n-                              -> (clean::Generics, Vec<clean::TyParamBound>) {\n+                              -> (clean::Generics, Vec<clean::ParamBound>) {\n     let mut ty_bounds = Vec::new();\n     g.where_predicates.retain(|pred| {\n         match *pred {"}, {"sha": "4cc8de91baa6d8b36acc4522742912058caa47e6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 52, "deletions": 43, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -14,7 +14,7 @@\n pub use self::Type::*;\n pub use self::Mutability::*;\n pub use self::ItemEnum::*;\n-pub use self::TyParamBound::*;\n+pub use self::ParamBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::Visibility::{Public, Inherited};\n@@ -532,7 +532,7 @@ pub enum ItemEnum {\n     MacroItem(Macro),\n     PrimitiveItem(PrimitiveType),\n     AssociatedConstItem(Type, Option<String>),\n-    AssociatedTypeItem(Vec<TyParamBound>, Option<Type>),\n+    AssociatedTypeItem(Vec<ParamBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemEnum>),\n     KeywordItem(String),\n@@ -1458,13 +1458,13 @@ impl Clean<Attributes> for [ast::Attribute] {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n-pub enum TyParamBound {\n+pub enum ParamBound {\n     RegionBound(Lifetime),\n     TraitBound(PolyTrait, hir::TraitBoundModifier)\n }\n \n-impl TyParamBound {\n-    fn maybe_sized(cx: &DocContext) -> TyParamBound {\n+impl ParamBound {\n+    fn maybe_sized(cx: &DocContext) -> ParamBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -1483,7 +1483,7 @@ impl TyParamBound {\n \n     fn is_sized_bound(&self, cx: &DocContext) -> bool {\n         use rustc::hir::TraitBoundModifier as TBM;\n-        if let TyParamBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n+        if let ParamBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n             if trait_.def_id() == cx.tcx.lang_items().sized_trait() {\n                 return true;\n             }\n@@ -1492,25 +1492,25 @@ impl TyParamBound {\n     }\n \n     fn get_poly_trait(&self) -> Option<PolyTrait> {\n-        if let TyParamBound::TraitBound(ref p, _) = *self {\n+        if let ParamBound::TraitBound(ref p, _) = *self {\n             return Some(p.clone())\n         }\n         None\n     }\n \n     fn get_trait_type(&self) -> Option<Type> {\n \n-        if let TyParamBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n+        if let ParamBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n             return Some(trait_.clone());\n         }\n         None\n     }\n }\n \n-impl Clean<TyParamBound> for hir::TyParamBound {\n-    fn clean(&self, cx: &DocContext) -> TyParamBound {\n+impl Clean<ParamBound> for hir::ParamBound {\n+    fn clean(&self, cx: &DocContext) -> ParamBound {\n         match *self {\n-            hir::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n+            hir::Outlives(lt) => RegionBound(lt.clean(cx)),\n             hir::TraitTyParamBound(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n         }\n     }\n@@ -1570,8 +1570,8 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n     }\n }\n \n-impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n-    fn clean(&self, cx: &DocContext) -> TyParamBound {\n+impl<'a, 'tcx> Clean<ParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n+    fn clean(&self, cx: &DocContext) -> ParamBound {\n         let (trait_ref, ref bounds) = *self;\n         inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n         let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id).as_str(),\n@@ -1614,14 +1614,14 @@ impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n     }\n }\n \n-impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> TyParamBound {\n+impl<'tcx> Clean<ParamBound> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> ParamBound {\n         (self, vec![]).clean(cx)\n     }\n }\n \n-impl<'tcx> Clean<Option<Vec<TyParamBound>>> for Substs<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n+impl<'tcx> Clean<Option<Vec<ParamBound>>> for Substs<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> Option<Vec<ParamBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().filter_map(|r| r.clean(cx))\n                      .map(RegionBound));\n@@ -1671,10 +1671,15 @@ impl Clean<Lifetime> for hir::Lifetime {\n impl Clean<Lifetime> for hir::GenericParam {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n         match self.kind {\n-            hir::GenericParamKind::Lifetime { ref bounds, .. } => {\n-                if bounds.len() > 0 {\n-                    let mut s = format!(\"{}: {}\", self.name(), bounds[0].name.name());\n-                    for bound in bounds.iter().skip(1) {\n+            hir::GenericParamKind::Lifetime { .. } => {\n+                if self.bounds.len() > 0 {\n+                    let mut bounds = self.bounds.iter().map(|bound| match bound {\n+                        hir::ParamBound::Outlives(lt) => lt,\n+                        _ => panic!(),\n+                    });\n+                    let name = bounds.next().unwrap().name.name();\n+                    let mut s = format!(\"{}: {}\", self.name(), name);\n+                    for bound in bounds {\n                         s.push_str(&format!(\" + {}\", bound.name.name()));\n                     }\n                     Lifetime(s)\n@@ -1715,7 +1720,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n-    BoundPredicate { ty: Type, bounds: Vec<TyParamBound> },\n+    BoundPredicate { ty: Type, bounds: Vec<ParamBound> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<Lifetime>},\n     EqPredicate { lhs: Type, rhs: Type },\n }\n@@ -1797,7 +1802,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<\n \n         WherePredicate::BoundPredicate {\n             ty: ty.clean(cx),\n-            bounds: vec![TyParamBound::RegionBound(lt.clean(cx).unwrap())]\n+            bounds: vec![ParamBound::RegionBound(lt.clean(cx).unwrap())]\n         }\n     }\n }\n@@ -1814,8 +1819,8 @@ impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         let trait_ = match self.trait_ref(cx.tcx).clean(cx) {\n-            TyParamBound::TraitBound(t, _) => t.trait_,\n-            TyParamBound::RegionBound(_) => {\n+            ParamBound::TraitBound(t, _) => t.trait_,\n+            ParamBound::RegionBound(_) => {\n                 panic!(\"cleaning a trait got a region\")\n             }\n         };\n@@ -1832,7 +1837,7 @@ pub enum GenericParamDefKind {\n     Lifetime,\n     Type {\n         did: DefId,\n-        bounds: Vec<TyParamBound>,\n+        bounds: Vec<ParamBound>,\n         default: Option<Type>,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n@@ -1887,10 +1892,15 @@ impl<'tcx> Clean<GenericParamDef> for ty::GenericParamDef {\n impl Clean<GenericParamDef> for hir::GenericParam {\n     fn clean(&self, cx: &DocContext) -> GenericParamDef {\n         let (name, kind) = match self.kind {\n-            hir::GenericParamKind::Lifetime { ref bounds, .. } => {\n-                let name = if bounds.len() > 0 {\n-                    let mut s = format!(\"{}: {}\", self.name(), bounds[0].name.name());\n-                    for bound in bounds.iter().skip(1) {\n+            hir::GenericParamKind::Lifetime { .. } => {\n+                let name = if self.bounds.len() > 0 {\n+                    let mut bounds = self.bounds.iter().map(|bound| match bound {\n+                        hir::ParamBound::Outlives(lt) => lt,\n+                        _ => panic!(),\n+                    });\n+                    let name = bounds.next().unwrap().name.name();\n+                    let mut s = format!(\"{}: {}\", self.name(), name);\n+                    for bound in bounds {\n                         s.push_str(&format!(\" + {}\", bound.name.name()));\n                     }\n                     s\n@@ -1899,10 +1909,10 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n                 };\n                 (name, GenericParamDefKind::Lifetime)\n             }\n-            hir::GenericParamKind::Type { ref bounds, ref default, synthetic, .. } => {\n+            hir::GenericParamKind::Type { ref default, synthetic, .. } => {\n                 (self.name().clean(cx), GenericParamDefKind::Type {\n                     did: cx.tcx.hir.local_def_id(self.id),\n-                    bounds: bounds.clean(cx),\n+                    bounds: self.bounds.clean(cx),\n                     default: default.clean(cx),\n                     synthetic: synthetic,\n                 })\n@@ -2041,7 +2051,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             if !sized_params.contains(&tp.name) {\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name.clone()),\n-                    bounds: vec![TyParamBound::maybe_sized(cx)],\n+                    bounds: vec![ParamBound::maybe_sized(cx)],\n                 })\n             }\n         }\n@@ -2282,7 +2292,7 @@ pub struct Trait {\n     pub unsafety: hir::Unsafety,\n     pub items: Vec<Item>,\n     pub generics: Generics,\n-    pub bounds: Vec<TyParamBound>,\n+    pub bounds: Vec<ParamBound>,\n     pub is_spotlight: bool,\n     pub is_auto: bool,\n }\n@@ -2504,7 +2514,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     // at the end.\n                     match bounds.iter().position(|b| b.is_sized_bound(cx)) {\n                         Some(i) => { bounds.remove(i); }\n-                        None => bounds.push(TyParamBound::maybe_sized(cx)),\n+                        None => bounds.push(ParamBound::maybe_sized(cx)),\n                     }\n \n                     let ty = if self.defaultness.has_value() {\n@@ -2559,7 +2569,7 @@ pub enum Type {\n     /// structs/enums/traits (most that'd be an hir::TyPath)\n     ResolvedPath {\n         path: Path,\n-        typarams: Option<Vec<TyParamBound>>,\n+        typarams: Option<Vec<ParamBound>>,\n         did: DefId,\n         /// true if is a `T::Name` path for associated types\n         is_generic: bool,\n@@ -2595,7 +2605,7 @@ pub enum Type {\n     Infer,\n \n     // impl TraitA+TraitB\n-    ImplTrait(Vec<TyParamBound>),\n+    ImplTrait(Vec<ParamBound>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Debug)]\n@@ -3147,7 +3157,6 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         }\n                     }\n \n-\n                     let bounds = bounds.predicates.iter().filter_map(|pred|\n                         if let ty::Predicate::Projection(proj) = *pred {\n                             let proj = proj.skip_binder();\n@@ -3169,7 +3178,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 }).collect::<Vec<_>>();\n                 bounds.extend(regions);\n                 if !has_sized && !bounds.is_empty() {\n-                    bounds.insert(0, TyParamBound::maybe_sized(cx));\n+                    bounds.insert(0, ParamBound::maybe_sized(cx));\n                 }\n                 ImplTrait(bounds)\n             }\n@@ -4465,11 +4474,11 @@ impl AutoTraitResult {\n     }\n }\n \n-impl From<TyParamBound> for SimpleBound {\n-    fn from(bound: TyParamBound) -> Self {\n+impl From<ParamBound> for SimpleBound {\n+    fn from(bound: ParamBound) -> Self {\n         match bound.clone() {\n-            TyParamBound::RegionBound(l) => SimpleBound::RegionBound(l),\n-            TyParamBound::TraitBound(t, mod_) => match t.trait_ {\n+            ParamBound::RegionBound(l) => SimpleBound::RegionBound(l),\n+            ParamBound::TraitBound(t, mod_) => match t.trait_ {\n                 Type::ResolvedPath { path, typarams, .. } => {\n                     SimpleBound::TraitBound(path.segments,\n                                             typarams"}, {"sha": "81ad2a5bf51a6e01ab3648373da236635e840ead", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -147,7 +147,7 @@ pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericP\n     params\n }\n \n-fn ty_bounds(bounds: Vec<clean::TyParamBound>) -> Vec<clean::TyParamBound> {\n+fn ty_bounds(bounds: Vec<clean::ParamBound>) -> Vec<clean::ParamBound> {\n     bounds\n }\n "}, {"sha": "7147e13805f8b9ed3f39d34b876e49c192daa730", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -77,7 +77,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n     /// Table DefId of `impl Trait` in argument position -> bounds\n-    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::TyParamBound>>>,\n+    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::ParamBound>>>,\n     pub send_trait: Option<DefId>,\n     pub fake_def_ids: RefCell<FxHashMap<CrateNum, DefId>>,\n     pub all_fake_def_ids: RefCell<FxHashSet<DefId>>,"}, {"sha": "542d753c4f0dc9eda44c09d14165f66a24c73454", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -201,7 +201,7 @@ pub struct Trait {\n     pub name: Name,\n     pub items: hir::HirVec<hir::TraitItem>,\n     pub generics: hir::Generics,\n-    pub bounds: hir::HirVec<hir::TyParamBound>,\n+    pub bounds: hir::HirVec<hir::ParamBound>,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub id: ast::NodeId,\n     pub whence: Span,"}, {"sha": "4174f656995fe077d4e31fe1412a34300e072e71", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -46,7 +46,7 @@ pub struct MutableSpace(pub clean::Mutability);\n #[derive(Copy, Clone)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for emitting type parameter bounds.\n-pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n+pub struct ParamBounds<'a>(pub &'a [clean::ParamBound]);\n /// Wrapper struct for emitting a comma-separated list of items\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n@@ -104,9 +104,9 @@ impl<'a, T: fmt::Display> fmt::Display for CommaSep<'a, T> {\n     }\n }\n \n-impl<'a> fmt::Display for TyParamBounds<'a> {\n+impl<'a> fmt::Display for ParamBounds<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &TyParamBounds(bounds) = self;\n+        let &ParamBounds(bounds) = self;\n         for (i, bound) in bounds.iter().enumerate() {\n             if i > 0 {\n                 f.write_str(\" + \")?;\n@@ -126,9 +126,9 @@ impl fmt::Display for clean::GenericParamDef {\n \n                 if !bounds.is_empty() {\n                     if f.alternate() {\n-                        write!(f, \": {:#}\", TyParamBounds(bounds))?;\n+                        write!(f, \": {:#}\", ParamBounds(bounds))?;\n                     } else {\n-                        write!(f, \":&nbsp;{}\", TyParamBounds(bounds))?;\n+                        write!(f, \":&nbsp;{}\", ParamBounds(bounds))?;\n                     }\n                 }\n \n@@ -190,9 +190,9 @@ impl<'a> fmt::Display for WhereClause<'a> {\n                 &clean::WherePredicate::BoundPredicate { ref ty, ref bounds } => {\n                     let bounds = bounds;\n                     if f.alternate() {\n-                        clause.push_str(&format!(\"{:#}: {:#}\", ty, TyParamBounds(bounds)));\n+                        clause.push_str(&format!(\"{:#}: {:#}\", ty, ParamBounds(bounds)));\n                     } else {\n-                        clause.push_str(&format!(\"{}: {}\", ty, TyParamBounds(bounds)));\n+                        clause.push_str(&format!(\"{}: {}\", ty, ParamBounds(bounds)));\n                     }\n                 }\n                 &clean::WherePredicate::RegionPredicate { ref lifetime,\n@@ -267,7 +267,7 @@ impl fmt::Display for clean::PolyTrait {\n     }\n }\n \n-impl fmt::Display for clean::TyParamBound {\n+impl fmt::Display for clean::ParamBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::RegionBound(ref lt) => {\n@@ -512,7 +512,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n \n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter,\n-            typarams: &Option<Vec<clean::TyParamBound>>) -> fmt::Result {\n+            typarams: &Option<Vec<clean::ParamBound>>) -> fmt::Result {\n     match *typarams {\n         Some(ref params) => {\n             for param in params {\n@@ -667,7 +667,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             }\n         }\n         clean::ImplTrait(ref bounds) => {\n-            write!(f, \"impl {}\", TyParamBounds(bounds))\n+            write!(f, \"impl {}\", ParamBounds(bounds))\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {"}, {"sha": "21724c2d730ef63ec7e8fcd9b548f6209f774720", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -69,7 +69,7 @@ use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n use html::format::{ConstnessSpace};\n-use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n+use html::format::{ParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n@@ -2960,14 +2960,14 @@ fn assoc_const(w: &mut fmt::Formatter,\n }\n \n fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n-                             bounds: &Vec<clean::TyParamBound>,\n+                             bounds: &Vec<clean::ParamBound>,\n                              default: Option<&clean::Type>,\n                              link: AssocItemLink) -> fmt::Result {\n     write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n     if !bounds.is_empty() {\n-        write!(w, \": {}\", TyParamBounds(bounds))?\n+        write!(w, \": {}\", ParamBounds(bounds))?\n     }\n     if let Some(default) = default {\n         write!(w, \" = {}\", default)?;"}, {"sha": "b082cde5df7eda7d89a87f338fc0d7a878f421ee", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -10,7 +10,7 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::TyParamBound::*;\n+pub use self::ParamBound::*;\n pub use self::UnsafeSource::*;\n pub use self::GenericArgs::*;\n pub use symbol::{Ident, Symbol as Name};\n@@ -269,44 +269,42 @@ pub const CRATE_NODE_ID: NodeId = NodeId(0);\n /// small, positive ids.\n pub const DUMMY_NODE_ID: NodeId = NodeId(!0);\n \n+/// A modifier on a bound, currently this is only used for `?Sized`, where the\n+/// modifier is `Maybe`. Negative bounds should also be handled here.\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum TraitBoundModifier {\n+    None,\n+    Maybe,\n+}\n+\n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum TyParamBound {\n+pub enum ParamBound {\n     TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n-    RegionTyParamBound(Lifetime)\n+    Outlives(Lifetime)\n }\n \n-impl TyParamBound {\n+impl ParamBound {\n     pub fn span(&self) -> Span {\n         match self {\n             &TraitTyParamBound(ref t, ..) => t.span,\n-            &RegionTyParamBound(ref l) => l.ident.span,\n+            &Outlives(ref l) => l.ident.span,\n         }\n     }\n }\n \n-/// A modifier on a bound, currently this is only used for `?Sized`, where the\n-/// modifier is `Maybe`. Negative bounds should also be handled here.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum TraitBoundModifier {\n-    None,\n-    Maybe,\n-}\n-\n-pub type TyParamBounds = Vec<TyParamBound>;\n+pub type ParamBounds = Vec<ParamBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, e.g. `'a: 'b+'c+'d`.\n     Lifetime {\n-        bounds: Vec<Lifetime>,\n         lifetime: Lifetime,\n     },\n     Type {\n-        bounds: TyParamBounds,\n         default: Option<P<Ty>>,\n     }\n }\n@@ -316,6 +314,7 @@ pub struct GenericParam {\n     pub ident: Ident,\n     pub id: NodeId,\n     pub attrs: ThinVec<Attribute>,\n+    pub bounds: ParamBounds,\n \n     pub kind: GenericParamKind,\n }\n@@ -384,7 +383,7 @@ pub struct WhereBoundPredicate {\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n-    pub bounds: TyParamBounds,\n+    pub bounds: ParamBounds,\n }\n \n /// A lifetime predicate.\n@@ -930,7 +929,7 @@ impl Expr {\n         }\n     }\n \n-    fn to_bound(&self) -> Option<TyParamBound> {\n+    fn to_bound(&self) -> Option<ParamBound> {\n         match &self.node {\n             ExprKind::Path(None, path) =>\n                 Some(TraitTyParamBound(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n@@ -1355,7 +1354,7 @@ pub struct TraitItem {\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n     Method(MethodSig, Option<P<Block>>),\n-    Type(TyParamBounds, Option<P<Ty>>),\n+    Type(ParamBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n \n@@ -1540,10 +1539,10 @@ pub enum TyKind {\n     Path(Option<QSelf>, Path),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n-    TraitObject(TyParamBounds, TraitObjectSyntax),\n+    TraitObject(ParamBounds, TraitObjectSyntax),\n     /// An `impl Bound1 + Bound2 + Bound3` type\n     /// where `Bound` is a trait or a lifetime.\n-    ImplTrait(TyParamBounds),\n+    ImplTrait(ParamBounds),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     Paren(P<Ty>),\n     /// Unused for now\n@@ -2064,11 +2063,11 @@ pub enum ItemKind {\n     /// A Trait declaration (`trait` or `pub trait`).\n     ///\n     /// E.g. `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`\n-    Trait(IsAuto, Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n+    Trait(IsAuto, Unsafety, Generics, ParamBounds, Vec<TraitItem>),\n     /// Trait alias\n     ///\n     /// E.g. `trait Foo = Bar + Quux;`\n-    TraitAlias(Generics, TyParamBounds),\n+    TraitAlias(Generics, ParamBounds),\n     /// An implementation.\n     ///\n     /// E.g. `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`"}, {"sha": "ea151ca68a8bef897a3f25b38d61d838d17463a1", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -68,18 +68,18 @@ pub trait AstBuilder {\n                span: Span,\n                id: ast::Ident,\n                attrs: Vec<ast::Attribute>,\n-               bounds: ast::TyParamBounds,\n+               bounds: ast::ParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::GenericParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef;\n-    fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;\n+    fn ty_param_bound(&self, path: ast::Path) -> ast::ParamBound;\n     fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime;\n     fn lifetime_def(&self,\n                     span: Span,\n                     ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n-                    bounds: Vec<ast::Lifetime>)\n+                    bounds: ast::ParamBounds)\n                     -> ast::GenericParam;\n \n     // statements\n@@ -436,14 +436,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                span: Span,\n                ident: ast::Ident,\n                attrs: Vec<ast::Attribute>,\n-               bounds: ast::TyParamBounds,\n+               bounds: ast::ParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::GenericParam {\n         ast::GenericParam {\n             ident: ident.with_span_pos(span),\n             id: ast::DUMMY_NODE_ID,\n             attrs: attrs.into(),\n+            bounds,\n             kind: ast::GenericParamKind::Type {\n-                bounds,\n                 default,\n             }\n         }\n@@ -464,7 +464,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n-    fn typarambound(&self, path: ast::Path) -> ast::TyParamBound {\n+    fn ty_param_bound(&self, path: ast::Path) -> ast::ParamBound {\n         ast::TraitTyParamBound(self.poly_trait_ref(path.span, path), ast::TraitBoundModifier::None)\n     }\n \n@@ -476,16 +476,16 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                     span: Span,\n                     ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n-                    bounds: Vec<ast::Lifetime>)\n+                    bounds: ast::ParamBounds)\n                     -> ast::GenericParam {\n         let lifetime = self.lifetime(span, ident);\n         ast::GenericParam {\n             ident: lifetime.ident,\n             id: lifetime.id,\n             attrs: attrs.into(),\n+            bounds,\n             kind: ast::GenericParamKind::Lifetime {\n                 lifetime,\n-                bounds,\n             }\n         }\n     }"}, {"sha": "a0c69d83e84608e5312691f232b2377a94a73c5f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -268,17 +268,16 @@ pub trait Folder : Sized {\n         noop_fold_interpolated(nt, self)\n     }\n \n-    fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>)\n-                       -> Option<TyParamBounds> {\n+    fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>) -> Option<TyParamBounds> {\n         noop_fold_opt_bounds(b, self)\n     }\n \n-    fn fold_bounds(&mut self, b: TyParamBounds)\n-                       -> TyParamBounds {\n+    fn fold_bounds(&mut self, b: ParamBounds)\n+                       -> ParamBounds {\n         noop_fold_bounds(b, self)\n     }\n \n-    fn fold_ty_param_bound(&mut self, tpb: TyParamBound) -> TyParamBound {\n+    fn fold_ty_param_bound(&mut self, tpb: ParamBound) -> ParamBound {\n         noop_fold_ty_param_bound(tpb, self)\n     }\n \n@@ -678,12 +677,12 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n     })\n }\n \n-pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n-                                   -> TyParamBound\n+pub fn noop_fold_ty_param_bound<T>(tpb: ParamBound, fld: &mut T)\n+                                   -> ParamBound\n                                    where T: Folder {\n     match tpb {\n         TraitTyParamBound(ty, modifier) => TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier),\n-        RegionTyParamBound(lifetime) => RegionTyParamBound(noop_fold_lifetime(lifetime, fld)),\n+        Outlives(lifetime) => Outlives(noop_fold_lifetime(lifetime, fld)),\n     }\n }\n \n@@ -850,13 +849,13 @@ pub fn noop_fold_mt<T: Folder>(MutTy {ty, mutbl}: MutTy, folder: &mut T) -> MutT\n     }\n }\n \n-pub fn noop_fold_opt_bounds<T: Folder>(b: Option<TyParamBounds>, folder: &mut T)\n-                                       -> Option<TyParamBounds> {\n+pub fn noop_fold_opt_bounds<T: Folder>(b: Option<ParamBounds>, folder: &mut T)\n+                                       -> Option<ParamBounds> {\n     b.map(|bounds| folder.fold_bounds(bounds))\n }\n \n-fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T)\n-                          -> TyParamBounds {\n+fn noop_fold_bounds<T: Folder>(bounds: ParamBounds, folder: &mut T)\n+                          -> ParamBounds {\n     bounds.move_map(|bound| folder.fold_ty_param_bound(bound))\n }\n "}, {"sha": "ce79735fff536c5051c45ce2397d53f5c39484fb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -10,7 +10,7 @@\n \n use rustc_target::spec::abi::{self, Abi};\n use ast::{AngleBracketedArgs, ParenthesizedArgData, AttrStyle, BareFnTy};\n-use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n+use ast::{Outlives, TraitTyParamBound, TraitBoundModifier};\n use ast::Unsafety;\n use ast::{Mod, AnonConst, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n@@ -36,7 +36,7 @@ use ast::{VariantData, StructField};\n use ast::StrStyle;\n use ast::SelfKind;\n use ast::{TraitItem, TraitRef, TraitObjectSyntax};\n-use ast::{Ty, TyKind, TypeBinding, TyParamBounds};\n+use ast::{Ty, TyKind, TypeBinding, ParamBounds};\n use ast::{Visibility, VisibilityKind, WhereClause, CrateSugar};\n use ast::{UseTree, UseTreeKind};\n use ast::{BinOpKind, UnOp};\n@@ -4735,7 +4735,7 @@ impl<'a> Parser<'a> {\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n     // TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n     // TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n-    fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, TyParamBounds> {\n+    fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, ParamBounds> {\n         let mut bounds = Vec::new();\n         loop {\n             // This needs to be syncronized with `Token::can_begin_bound`.\n@@ -4752,7 +4752,7 @@ impl<'a> Parser<'a> {\n                         self.span_err(question_span,\n                                       \"`?` may only modify trait bounds, not lifetime bounds\");\n                     }\n-                    bounds.push(RegionTyParamBound(self.expect_lifetime()));\n+                    bounds.push(Outlives(RegionTyParamBound(self.expect_lifetime())));\n                     if has_parens {\n                         self.expect(&token::CloseDelim(token::Paren))?;\n                         self.span_err(self.prev_span,\n@@ -4784,7 +4784,7 @@ impl<'a> Parser<'a> {\n         return Ok(bounds);\n     }\n \n-    fn parse_ty_param_bounds(&mut self) -> PResult<'a, TyParamBounds> {\n+    fn parse_ty_param_bounds(&mut self) -> PResult<'a, ParamBounds> {\n         self.parse_ty_param_bounds_common(true)\n     }\n \n@@ -4823,17 +4823,17 @@ impl<'a> Parser<'a> {\n \n         Ok(GenericParam {\n             ident,\n-            attrs: preceding_attrs.into(),\n             id: ast::DUMMY_NODE_ID,\n+            attrs: preceding_attrs.into(),\n+            bounds,\n             kind: GenericParamKind::Type {\n-                bounds,\n                 default,\n             }\n         })\n     }\n \n     /// Parses the following grammar:\n-    ///     TraitItemAssocTy = Ident [\"<\"...\">\"] [\":\" [TyParamBounds]] [\"where\" ...] [\"=\" Ty]\n+    ///     TraitItemAssocTy = Ident [\"<\"...\">\"] [\":\" [ParamBounds]] [\"where\" ...] [\"=\" Ty]\n     fn parse_trait_item_assoc_ty(&mut self)\n         -> PResult<'a, (Ident, TraitItemKind, ast::Generics)> {\n         let ident = self.parse_ident()?;\n@@ -4868,17 +4868,19 @@ impl<'a> Parser<'a> {\n                 let lifetime = self.expect_lifetime();\n                 // Parse lifetime parameter.\n                 let bounds = if self.eat(&token::Colon) {\n-                    self.parse_lt_param_bounds()\n+                    self.parse_lt_param_bounds().iter()\n+                        .map(|bound| ast::ParamBound::Outlives(*bound))\n+                        .collect()\n                 } else {\n                     Vec::new()\n                 };\n                 params.push(ast::GenericParam {\n                     ident: lifetime.ident,\n                     id: lifetime.id,\n                     attrs: attrs.into(),\n+                    bounds,\n                     kind: ast::GenericParamKind::Lifetime {\n                         lifetime,\n-                        bounds,\n                     }\n                 });\n                 if seen_ty_param {"}, {"sha": "c8d139c7de904d5f19b0961dfa6bfb7046fbd079", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -12,7 +12,7 @@ pub use self::AnnNode::*;\n \n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n-use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n+use ast::{SelfKind, Outlives, TraitTyParamBound, TraitBoundModifier};\n use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n@@ -292,7 +292,7 @@ pub fn ty_to_string(ty: &ast::Ty) -> String {\n     to_string(|s| s.print_type(ty))\n }\n \n-pub fn bounds_to_string(bounds: &[ast::TyParamBound]) -> String {\n+pub fn bounds_to_string(bounds: &[ast::ParamBound]) -> String {\n     to_string(|s| s.print_bounds(\"\", bounds))\n }\n \n@@ -1178,7 +1178,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_type(&mut self,\n                              ident: ast::Ident,\n-                             bounds: Option<&ast::TyParamBounds>,\n+                             bounds: Option<&ast::ParamBounds>,\n                              ty: Option<&ast::Ty>)\n                              -> io::Result<()> {\n         self.word_space(\"type\")?;\n@@ -2811,7 +2811,7 @@ impl<'a> State<'a> {\n \n     pub fn print_bounds(&mut self,\n                         prefix: &str,\n-                        bounds: &[ast::TyParamBound])\n+                        bounds: &[ast::ParamBound])\n                         -> io::Result<()> {\n         if !bounds.is_empty() {\n             self.s.word(prefix)?;\n@@ -2833,7 +2833,7 @@ impl<'a> State<'a> {\n                         }\n                         self.print_poly_trait_ref(tref)?;\n                     }\n-                    RegionTyParamBound(lt) => {\n+                    Outlives(lt) => {\n                         self.print_lifetime(lt)?;\n                     }\n                 }\n@@ -2879,14 +2879,19 @@ impl<'a> State<'a> {\n \n         self.commasep(Inconsistent, &generic_params, |s, param| {\n             match param.kind {\n-                ast::GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n+                ast::GenericParamKind::Lifetime { ref lifetime } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n-                    s.print_lifetime_bounds(lifetime, bounds)\n+                    s.print_lifetime_bounds(lifetime, &param.bounds.iter().map(|bound| {\n+                        match bound {\n+                            ast::ParamBound::Outlives(lt) => *lt,\n+                            _ => panic!(),\n+                        }\n+                    }).collect::<Vec<_>>().as_slice())\n                 },\n-                ast::GenericParamKind::Type { ref bounds, ref default } => {\n+                ast::GenericParamKind::Type { ref default } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n                     s.print_ident(param.ident)?;\n-                    s.print_bounds(\":\", bounds)?;\n+                    s.print_bounds(\":\", &param.bounds)?;\n                     match default {\n                         Some(ref default) => {\n                             s.s.space()?;"}, {"sha": "485775765abf806f74bd5d35e37179946cb4506f", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -95,7 +95,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_trait_ref(self, t)\n     }\n-    fn visit_ty_param_bound(&mut self, bounds: &TyParamBound) {\n+    fn visit_ty_param_bound(&mut self, bounds: &ParamBound) {\n         self.count += 1;\n         walk_ty_param_bound(self, bounds)\n     }"}, {"sha": "4e0c417d4fba65fccc5d49d1417038e9049d46f3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -86,7 +86,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) { walk_trait_item(self, ti) }\n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) { walk_impl_item(self, ii) }\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) { walk_trait_ref(self, t) }\n-    fn visit_ty_param_bound(&mut self, bounds: &'ast TyParamBound) {\n+    fn visit_ty_param_bound(&mut self, bounds: &'ast ParamBound) {\n         walk_ty_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n@@ -479,31 +479,30 @@ pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n     // Empty!\n }\n \n-pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyParamBound) {\n+pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a ParamBound) {\n     match *bound {\n         TraitTyParamBound(ref typ, ref modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n-        RegionTyParamBound(ref lifetime) => {\n+        Outlives(ref lifetime) => {\n             visitor.visit_lifetime(lifetime);\n         }\n     }\n }\n \n pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n+    visitor.visit_ident(param.ident);\n     match param.kind {\n         GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n-            visitor.visit_ident(param.ident);\n             walk_list!(visitor, visit_lifetime, bounds);\n-            walk_list!(visitor, visit_attribute, param.attrs.iter());\n         }\n         GenericParamKind::Type { ref bounds, ref default } => {\n             visitor.visit_ident(t.ident);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n-            walk_list!(visitor, visit_attribute, param.attrs.iter());\n         }\n     }\n+    walk_list!(visitor, visit_attribute, param.attrs.iter());\n }\n \n pub fn walk_generics<'a, V: Visitor<'a>>(visitor: &mut V, generics: &'a Generics) {"}, {"sha": "a7d8156f4a04397363388d0888b10ed8d8316fc0", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -551,22 +551,21 @@ impl<'a> TraitDef<'a> {\n         // Create the generic parameters\n         params.extend(generics.params.iter().map(|param| match param.kind {\n             GenericParamKind::Lifetime { .. } => param.clone(),\n-            GenericParamKind::Type { bounds: ref ty_bounds, .. } => {\n+            GenericParamKind::Type { .. } => {\n                 // I don't think this can be moved out of the loop, since\n-                // a TyParamBound requires an ast id\n+                // a ParamBound requires an ast id\n                 let mut bounds: Vec<_> =\n                     // extra restrictions on the generics parameters to the\n                     // type being derived upon\n                     self.additional_bounds.iter().map(|p| {\n-                        cx.typarambound(p.to_path(cx, self.span,\n-                                                    type_ident, generics))\n+                        cx.ty_param_bound(p.to_path(cx, self.span, type_ident, generics))\n                     }).collect();\n \n                 // require the current trait\n-                bounds.push(cx.typarambound(trait_path.clone()));\n+                bounds.push(cx.ty_param_bound(trait_path.clone()));\n \n                 // also add in any bounds from the declaration\n-                for declared_bound in ty_bounds {\n+                for declared_bound in &param.bounds {\n                     bounds.push((*declared_bound).clone());\n                 }\n \n@@ -635,12 +634,12 @@ impl<'a> TraitDef<'a> {\n                         let mut bounds: Vec<_> = self.additional_bounds\n                             .iter()\n                             .map(|p| {\n-                                cx.typarambound(p.to_path(cx, self.span, type_ident, generics))\n+                                cx.ty_param_bound(p.to_path(cx, self.span, type_ident, generics))\n                             })\n                             .collect();\n \n                         // require the current trait\n-                        bounds.push(cx.typarambound(trait_path.clone()));\n+                        bounds.push(cx.ty_param_bound(trait_path.clone()));\n \n                         let predicate = ast::WhereBoundPredicate {\n                             span: self.span,"}, {"sha": "327a35d39b327849e28c9d8215c762ca7bb6609d", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed530a457dd937fa633dfe52cf07811196d3173/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=aed530a457dd937fa633dfe52cf07811196d3173", "patch": "@@ -219,7 +219,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n     let bounds = bounds.iter()\n         .map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n-            cx.typarambound(path)\n+            cx.ty_param_bound(path)\n         })\n         .collect();\n     cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)\n@@ -261,9 +261,8 @@ impl<'a> LifetimeBounds<'a> {\n             .iter()\n             .map(|&(lt, ref bounds)| {\n                 let bounds = bounds.iter()\n-                    .map(|b| cx.lifetime(span, Ident::from_str(b)))\n-                    .collect();\n-                cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds)\n+                    .map(|b| ast::ParamBound::Outlives(cx.lifetime(span, Ident::from_str(b))));\n+                cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds.collect())\n             })\n             .chain(self.bounds\n                 .iter()"}]}