{"sha": "66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "node_id": "C_kwDOAAsO6NoAKDY2ZmU4NGQ5MzY5YzQwZjJiMTdhZThjZDU0MWQ2ZDg3YzUwMWI0NWY", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-13T16:06:43Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T14:01:41Z"}, "message": "accepting review suggestions", "tree": {"sha": "b1695d2ce4f690509aba886cf24bececb6eced25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1695d2ce4f690509aba886cf24bececb6eced25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "html_url": "https://github.com/rust-lang/rust/commit/66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c372fb3495af20f3e76097a782018cc122f3ab78", "url": "https://api.github.com/repos/rust-lang/rust/commits/c372fb3495af20f3e76097a782018cc122f3ab78", "html_url": "https://github.com/rust-lang/rust/commit/c372fb3495af20f3e76097a782018cc122f3ab78"}], "stats": {"total": 164, "additions": 67, "deletions": 97}, "files": [{"sha": "1936eabdd9f3b64ee34ea241c83e70997c0f8db8", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -165,7 +165,6 @@ impl ChangeFixture {\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n                     version,\n-                    None,\n                     meta.cfg,\n                     Default::default(),\n                     meta.env,\n@@ -206,7 +205,6 @@ impl ChangeFixture {\n                 Edition::CURRENT,\n                 Some(CrateName::new(\"test\").unwrap().into()),\n                 None,\n-                None,\n                 default_cfg,\n                 Default::default(),\n                 Env::default(),\n@@ -251,7 +249,6 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"core\".to_string())),\n                 None,\n-                None,\n                 Default::default(),\n                 Default::default(),\n                 Env::default(),\n@@ -291,7 +288,6 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"proc_macros\".to_string())),\n                 None,\n-                None,\n                 Default::default(),\n                 Default::default(),\n                 Env::default(),"}, {"sha": "e6d265df675d11ea43997028f44f8c326ed13206", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -304,7 +304,6 @@ pub struct CrateData {\n     /// For purposes of analysis, crates are anonymous (only names in\n     /// `Dependency` matters), this name should only be used for UI.\n     pub display_name: Option<CrateDisplayName>,\n-    pub crate_root_path: Option<AbsPathBuf>,\n     pub cfg_options: CfgOptions,\n     /// The cfg options that could be used by the crate\n     pub potential_cfg_options: Option<CfgOptions>,\n@@ -362,7 +361,6 @@ impl CrateGraph {\n         edition: Edition,\n         display_name: Option<CrateDisplayName>,\n         version: Option<String>,\n-        crate_root_path: Option<AbsPathBuf>,\n         cfg_options: CfgOptions,\n         potential_cfg_options: Option<CfgOptions>,\n         env: Env,\n@@ -376,7 +374,6 @@ impl CrateGraph {\n             edition,\n             version,\n             display_name,\n-            crate_root_path,\n             cfg_options,\n             potential_cfg_options,\n             env,\n@@ -743,7 +740,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -757,7 +753,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -771,7 +766,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -799,7 +793,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -813,7 +806,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -838,7 +830,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -852,7 +843,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -866,7 +856,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -891,7 +880,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),\n@@ -905,7 +893,6 @@ mod tests {\n             Edition2018,\n             None,\n             None,\n-            None,\n             Default::default(),\n             Default::default(),\n             Env::default(),"}, {"sha": "d326b7c2ccc9dd2106a1205b3c0c319bd2612624", "filename": "crates/ide/src/fetch_crates.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffetch_crates.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -1,13 +1,13 @@\n use ide_db::{\n-    base_db::{CrateOrigin, SourceDatabase},\n+    base_db::{CrateOrigin, FileId, SourceDatabase},\n     FxIndexSet, RootDatabase,\n };\n \n #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateInfo {\n-    pub name: String,\n-    pub version: String,\n-    pub path: String,\n+    pub name: Option<String>,\n+    pub version: Option<String>,\n+    pub root_file_id: FileId,\n }\n \n // Feature: Show Dependency Tree\n@@ -22,24 +22,16 @@ pub(crate) fn fetch_crates(db: &RootDatabase) -> FxIndexSet<CrateInfo> {\n         .iter()\n         .map(|crate_id| &crate_graph[crate_id])\n         .filter(|&data| !matches!(data.origin, CrateOrigin::Local { .. }))\n-        .filter_map(|data| crate_info(data))\n+        .map(|data| crate_info(data))\n         .collect()\n }\n \n-fn crate_info(data: &ide_db::base_db::CrateData) -> Option<CrateInfo> {\n+fn crate_info(data: &ide_db::base_db::CrateData) -> CrateInfo {\n     let crate_name = crate_name(data);\n-    let crate_path = data.crate_root_path.as_ref().map(|p| p.display().to_string());\n-    if let Some(crate_path) = crate_path {\n-        let version = data.version.clone().unwrap_or_else(|| \"\".to_owned());\n-        Some(CrateInfo { name: crate_name, version, path: crate_path })\n-    } else {\n-        None\n-    }\n+    let version = data.version.clone();\n+    CrateInfo { name: crate_name, version, root_file_id: data.root_file_id }\n }\n \n-fn crate_name(data: &ide_db::base_db::CrateData) -> String {\n-    data.display_name\n-        .clone()\n-        .map(|it| it.canonical_name().to_owned())\n-        .unwrap_or(\"unknown\".to_string())\n+fn crate_name(data: &ide_db::base_db::CrateData) -> Option<String> {\n+    data.display_name.as_ref().map(|it| it.canonical_name().to_owned())\n }"}, {"sha": "24e2aed65a5beebe2391c00ca976bba5028d22cf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -239,7 +239,6 @@ impl Analysis {\n             Edition::CURRENT,\n             None,\n             None,\n-            None,\n             cfg_options.clone(),\n             None,\n             Env::default(),"}, {"sha": "d94b15f60c84c1b25768808eacbe6b8c0a20d614", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -34,7 +34,6 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.edition,\n             data.display_name.clone(),\n             data.version.clone(),\n-            data.crate_root_path.clone(),\n             data.cfg_options.clone(),\n             data.potential_cfg_options.clone(),\n             data.env.clone(),"}, {"sha": "083dfcf43d969607ec1801e8bf2d5a86241596fa", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -184,6 +184,13 @@ impl AbsPath {\n         self.0.ends_with(&suffix.0)\n     }\n \n+    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n+        Some((\n+            self.file_stem()?.to_str()?,\n+            self.extension().and_then(|extension| extension.to_str()),\n+        ))\n+    }\n+\n     // region:delegate-methods\n \n     // Note that we deliberately don't implement `Deref<Target = Path>` here.\n@@ -213,13 +220,6 @@ impl AbsPath {\n     pub fn exists(&self) -> bool {\n         self.0.exists()\n     }\n-\n-    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n-        Some((\n-            self.file_stem()?.to_str()?,\n-            self.extension().and_then(|extension| extension.to_str()),\n-        ))\n-    }\n     // endregion:delegate-methods\n }\n "}, {"sha": "102f862522e6db3ccefe20cb875105bcf180bcd9", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 13, "deletions": 44, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -766,7 +766,6 @@ fn project_json_to_crate_graph(\n                     proc_macro_dylib_path,\n                     is_proc_macro,\n                     repository,\n-                    root_module,\n                     ..\n                 },\n                 file_id,\n@@ -785,7 +784,6 @@ fn project_json_to_crate_graph(\n                     *edition,\n                     display_name.clone(),\n                     version.clone(),\n-                    crate_path(display_name.as_ref(), root_module),\n                     target_cfgs.iter().chain(cfg.iter()).cloned().collect(),\n                     None,\n                     env,\n@@ -834,30 +832,6 @@ fn project_json_to_crate_graph(\n     res\n }\n \n-//Thats a best effort to try and find the crate path for a project configured using JsonProject model\n-fn crate_path(\n-    crate_name: Option<&CrateDisplayName>,\n-    root_module_path: &AbsPathBuf,\n-) -> Option<AbsPathBuf> {\n-    crate_name.and_then(|crate_name| {\n-        let mut crate_path = None;\n-        let mut root_path = root_module_path.as_path();\n-        while let Some(path) = root_path.parent() {\n-            match path.name_and_extension() {\n-                Some((name, _)) => {\n-                    if name.starts_with(crate_name.canonical_name()) {\n-                        crate_path = Some(path.to_path_buf());\n-                        break;\n-                    }\n-                }\n-                None => break,\n-            }\n-            root_path = path;\n-        }\n-        crate_path\n-    })\n-}\n-\n fn cargo_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     rustc: Option<&(CargoWorkspace, WorkspaceBuildScripts)>,\n@@ -1079,7 +1053,6 @@ fn detached_files_to_crate_graph(\n             Edition::CURRENT,\n             display_name.clone(),\n             None,\n-            None,\n             cfg_options.clone(),\n             None,\n             Env::default(),\n@@ -1276,7 +1249,6 @@ fn add_target_crate_root(\n         edition,\n         Some(display_name),\n         Some(pkg.version.to_string()),\n-        Some(pkg.manifest.parent().to_owned()),\n         cfg_options,\n         potential_cfg_options,\n         env,\n@@ -1345,27 +1317,24 @@ fn sysroot_to_crate_graph(\n             .filter_map(|krate| {\n                 let file_id = load(&sysroot[krate].root)?;\n \n-                let env = Env::default();\n-                let display_name =\n-                    CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n-                let crate_root_path = sysroot.src_root().join(display_name.canonical_name());\n+            let env = Env::default();\n+            let display_name = CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n             let crate_id = crate_graph.add_crate_root(\n                     file_id,\n                     Edition::CURRENT,\n                     Some(display_name),\n                     None,\n-                Some(crate_root_path),\n-                    cfg_options.clone(),\n-                    None,\n-                    env,\n-                    false,\n-                    CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n-                    target_layout.clone(),\n-                    channel,\n-                );\n-                Some((krate, crate_id))\n-            })\n-            .collect(),\n+                cfg_options.clone(),\n+                None,\n+                env,\n+                false,\n+                CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n+                target_layout.clone(),\n+                channel,\n+            );\n+            Some((krate, crate_id))\n+        })\n+        .collect(),\n     };\n     for from in sysroot.crates() {\n         for &to in sysroot[from].deps.iter() {"}, {"sha": "ae6dd4dd56135cc3ca7de21ce4e020b6be3c96e8", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -57,7 +57,35 @@ pub(crate) fn fetch_dependency_list(\n     Ok(FetchDependencyListResult {\n         crates: crates\n             .into_iter()\n-            .map(|it| CrateInfoResult { name: it.name, version: it.version, path: it.path })\n+            .filter_map(|it| {\n+                let root_file_path = state.file_id_to_file_path(it.root_file_id);\n+                crate_path(it.name.as_ref(), root_file_path).map(|crate_path| CrateInfoResult {\n+                    name: it.name,\n+                    version: it.version,\n+                    path: crate_path.to_string(),\n+                })\n+            })\n             .collect(),\n     })\n }\n+\n+//Thats a best effort to try and find the crate path\n+fn crate_path(crate_name: Option<&String>, root_file_path: VfsPath) -> Option<VfsPath> {\n+    crate_name.and_then(|crate_name| {\n+        let mut crate_path = None;\n+        let mut root_path = root_file_path;\n+        while let Some(path) = root_path.parent() {\n+            match path.name_and_extension() {\n+                Some((name, _)) => {\n+                    if name.starts_with(crate_name.as_str()) {\n+                        crate_path = Some(path);\n+                        break;\n+                    }\n+                }\n+                None => break,\n+            }\n+            root_path = path;\n+        }\n+        crate_path\n+    })\n+}\n\\ No newline at end of file"}, {"sha": "8689fae0798be10b437158df35d2e32b1ea86f78", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -30,8 +30,8 @@ pub struct AnalyzerStatusParams {\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct CrateInfoResult {\n-    pub name: String,\n-    pub version: String,\n+    pub name: Option<String>,\n+    pub version: Option<String>,\n     pub path: String,\n }\n pub enum FetchDependencyList {}"}, {"sha": "8e3097fce4230a556d42d6bf1195913296372b95", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -45,7 +45,7 @@ fn check_lsp_extensions_docs() {\n             sh.read_file(sourcegen::project_root().join(\"docs/dev/lsp-extensions.md\")).unwrap();\n         let text = lsp_extensions_md\n             .lines()\n-            .find_map(|line| dbg!(line.strip_prefix(\"lsp_ext.rs hash:\")))\n+            .find_map(|line| line.strip_prefix(\"lsp_ext.rs hash:\"))\n             .unwrap()\n             .trim();\n         u64::from_str_radix(text, 16).unwrap()"}, {"sha": "0fb92638e0d2691c8cc48850719ea7ccfc2d68dc", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -860,12 +860,12 @@ export interface Diagnostic {\n **Request:**\n \n ```typescript\n-export interface FetchDependencyGraphParams {}\n+export interface FetchDependencyListParams {}\n ```\n \n **Response:** \n ```typescript\n-export interface FetchDependencyGraphResult {\n+export interface FetchDependencyListResult {\n     crates: {\n         name: string;\n         version: string;"}, {"sha": "b1ea36588677f2965a20aa7b04c3bc8cd2a5c7c5", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -88,7 +88,7 @@ export class RustDependenciesProvider\n         );\n         const crates = dependenciesResult.crates;\n         const deps = crates.map((crate) => {\n-        const dep = this.toDep(crate.name, crate.version, crate.path);\n+        const dep = this.toDep(crate.name || \"unknown\", crate.version || \"\", crate.path);\n             this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n         this.dependenciesMap[stdlib.dependencyPath.toLowerCase()] = stdlib;\n         return dep;"}, {"sha": "b72804e510ce4d8ffe9650090592898a1d3d79d5", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/66fe84d9369c40f2b17ae8cd541d6d87c501b45f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "patch": "@@ -74,8 +74,8 @@ export interface FetchDependencyListParams {}\n \n export interface FetchDependencyListResult {\n     crates: {\n-        name: string;\n-        version: string;\n+        name: string | undefined;\n+        version: string | undefined;\n         path: string;\n     }[];\n }"}]}