{"sha": "a313ef05a78330ac342cddf819214cb6414164e2", "node_id": "C_kwDOAAsO6NoAKGEzMTNlZjA1YTc4MzMwYWMzNDJjZGRmODE5MjE0Y2I2NDE0MTY0ZTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T07:31:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T00:43:13Z"}, "message": "rename get_parent_node to parent_id", "tree": {"sha": "1902ae8d9786d51b8f8a2205f149694e04fdb2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1902ae8d9786d51b8f8a2205f149694e04fdb2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a313ef05a78330ac342cddf819214cb6414164e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a313ef05a78330ac342cddf819214cb6414164e2", "html_url": "https://github.com/rust-lang/rust/commit/a313ef05a78330ac342cddf819214cb6414164e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a313ef05a78330ac342cddf819214cb6414164e2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7572670a1302f5c7e245d069200e22da9df0316", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7572670a1302f5c7e245d069200e22da9df0316", "html_url": "https://github.com/rust-lang/rust/commit/c7572670a1302f5c7e245d069200e22da9df0316"}], "stats": {"total": 240, "additions": 119, "deletions": 121}, "files": [{"sha": "6b663ea31470ed0b6eb6a04e4f9025cb2575895e", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -394,7 +394,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     }\n                 }\n                 let typeck = self.infcx.tcx.typeck(self.mir_def_id());\n-                let hir_id = hir.get_parent_node(expr.hir_id);\n+                let hir_id = hir.parent_id(expr.hir_id);\n                 if let Some(parent) = hir.find(hir_id) {\n                     let (def_id, args, offset) = if let hir::Node::Expr(parent_expr) = parent\n                         && let hir::ExprKind::MethodCall(_, _, args, _) = parent_expr.kind"}, {"sha": "c022fb55a16f75d3e491d4043fd5697a326d9e68", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -1004,7 +1004,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let hir = self.infcx.tcx.hir();\n         let closure_id = self.mir_hir_id();\n         let closure_span = self.infcx.tcx.def_span(self.mir_def_id());\n-        let fn_call_id = hir.get_parent_node(closure_id);\n+        let fn_call_id = hir.parent_id(closure_id);\n         let node = hir.get(fn_call_id);\n         let def_id = hir.enclosing_body_owner(fn_call_id);\n         let mut look_at_return = true;"}, {"sha": "4f74dbe99e3dafabcf0a43223eba532fe3a7c53e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -3460,7 +3460,7 @@ impl<'hir> Node<'hir> {\n     /// ```ignore (illustrative)\n     /// ctor\n     ///     .ctor_hir_id()\n-    ///     .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n+    ///     .and_then(|ctor_id| tcx.hir().find(tcx.hir().parent_id(ctor_id)))\n     ///     .and_then(|parent| parent.ident())\n     /// ```\n     pub fn ident(&self) -> Option<Ident> {"}, {"sha": "93b91b3c9c62ecb4efe1464262d87e27a9faf35c", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -2936,7 +2936,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), ident, .. }) =\n             hir.get(fn_hir_id) else { return None };\n         let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n-                hir.get(hir.get_parent_node(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n+                hir.get(hir.parent_id(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n \n         let trait_ref = self.instantiate_mono_trait_ref(\n             i.of_trait.as_ref()?,"}, {"sha": "fb732d7f945227deb7446f93a3d1221ff40db66c", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -212,7 +212,7 @@ pub(crate) fn placeholder_type_error_diag<'tcx>(\n             is_fn = true;\n \n             // Check if parent is const or static\n-            let parent_id = tcx.hir().get_parent_node(hir_ty.hir_id);\n+            let parent_id = tcx.hir().parent_id(hir_ty.hir_id);\n             let parent_node = tcx.hir().get(parent_id);\n \n             is_const_or_static = matches!(\n@@ -1108,7 +1108,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), generics, .. }) => {\n             // Do not try to infer the return type for a impl method coming from a trait\n             if let Item(hir::Item { kind: ItemKind::Impl(i), .. }) =\n-                tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n+                tcx.hir().get(tcx.hir().parent_id(hir_id))\n                 && i.of_trait.is_some()\n             {\n                 <dyn AstConv<'_>>::ty_of_fn("}, {"sha": "8ff96869b557d52aa745016a2e8165627023482c", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -103,7 +103,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // `min_const_generics`.\n                 Some(parent_def_id.to_def_id())\n             } else {\n-                let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+                let parent_node = tcx.hir().get(tcx.hir().parent_id(hir_id));\n                 match parent_node {\n                     // HACK(eddyb) this provides the correct generics for repeat\n                     // expressions' count (i.e. `N` in `[x; N]`), and explicit\n@@ -320,7 +320,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n     // provide junk type parameter defs for const blocks.\n     if let Node::AnonConst(_) = node {\n-        let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+        let parent_node = tcx.hir().get(tcx.hir().parent_id(hir_id));\n         if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n             params.push(ty::GenericParamDef {\n                 index: next_index(),"}, {"sha": "0a1188c16a8ba4f3c3cb0f053a76968a1c5ac650", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     };\n                     let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                     // Ensure that the parent of the def is an item, not HRTB\n-                    let parent_id = self.tcx.hir().get_parent_node(hir_id);\n+                    let parent_id = self.tcx.hir().parent_id(hir_id);\n                     if !parent_id.is_owner() {\n                         struct_span_err!(\n                             self.tcx.sess,"}, {"sha": "8412b7418b3aa956d56be7e91a4695d6d258d087", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -270,7 +270,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // We create bi-directional Outlives predicates between the original\n     // and the duplicated parameter, to ensure that they do not get out of sync.\n     if let Node::Item(&Item { kind: ItemKind::OpaqueTy(..), .. }) = node {\n-        let opaque_ty_id = tcx.hir().get_parent_node(hir_id);\n+        let opaque_ty_id = tcx.hir().parent_id(hir_id);\n         let opaque_ty_node = tcx.hir().get(opaque_ty_id);\n         let Node::Ty(&Ty { kind: TyKind::OpaqueDef(_, lifetimes, _), .. }) = opaque_ty_node else {\n             bug!(\"unexpected {opaque_ty_node:?}\")"}, {"sha": "1c8acf6590dea725db84d4e4685bc06a60087b9b", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -28,7 +28,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         _ => return None,\n     };\n \n-    let parent_node_id = tcx.hir().get_parent_node(hir_id);\n+    let parent_node_id = tcx.hir().parent_id(hir_id);\n     let parent_node = tcx.hir().get(parent_node_id);\n \n     let (generics, arg_idx) = match parent_node {\n@@ -402,7 +402,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         }\n \n         Node::AnonConst(_) => {\n-            let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+            let parent_node = tcx.hir().get(tcx.hir().parent_id(hir_id));\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n@@ -445,7 +445,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         ..\n                     },\n                 ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get(tcx.hir().get_parent_node(binding_id))\n+                    tcx.hir().get(tcx.hir().parent_id(binding_id))\n                     && e.hir_id == hir_id =>\n                 {\n                     let Some(trait_def_id) = trait_ref.trait_def_id() else {\n@@ -472,7 +472,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 Node::TypeBinding(\n                     binding @ &TypeBinding { hir_id: binding_id, gen_args, ref kind, .. },\n                 ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get(tcx.hir().get_parent_node(binding_id))\n+                    tcx.hir().get(tcx.hir().parent_id(binding_id))\n                     && let Some((idx, _)) =\n                         gen_args.args.iter().enumerate().find(|(_, arg)| {\n                             if let GenericArg::Const(ct) = arg {"}, {"sha": "7659b2d0a0b8e6cf4e67a913cac08a9addfd6f5c", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -289,15 +289,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n         let node = {\n-            let rslt = self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(hir_id));\n+            let rslt = self.tcx.hir().parent_id(self.tcx.hir().parent_id(hir_id));\n             self.tcx.hir().get(rslt)\n         };\n         if let hir::Node::Block(block) = node {\n             // check that the body's parent is an fn\n             let parent = self\n                 .tcx\n                 .hir()\n-                .get(self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(block.hir_id)));\n+                .get(self.tcx.hir().parent_id(self.tcx.hir().parent_id(block.hir_id)));\n             if let (Some(expr), hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })) =\n                 (&block.expr, parent)\n             {"}, {"sha": "2cb976f718c22b72d16640e6b98e9bace72c549f", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_span: Span,\n     ) {\n         let hir = self.tcx.hir();\n-        let parent_hir_id = hir.get_parent_node(hir_id);\n+        let parent_hir_id = hir.parent_id(hir_id);\n         let parent_node = hir.get(parent_hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr {\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // Actually need to unwrap a few more layers of HIR to get to\n                 // the _real_ closure...\n-                let async_closure = hir.get_parent_node(hir.get_parent_node(parent_hir_id));\n+                let async_closure = hir.parent_id(hir.parent_id(parent_hir_id));\n                 if let hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                     ..\n@@ -336,7 +336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &'tcx hir::Expr<'tcx>,\n         callee_expr: &'tcx hir::Expr<'tcx>,\n     ) -> bool {\n-        let hir_id = self.tcx.hir().get_parent_node(call_expr.hir_id);\n+        let hir_id = self.tcx.hir().parent_id(call_expr.hir_id);\n         let parent_node = self.tcx.hir().get(hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Array(_), .. }),"}, {"sha": "9e91a3f90764cf4c879d0f2f3b6043052baa0f10", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -1547,7 +1547,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         err.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n-                        let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n+                        let parent_id = fcx.tcx.hir().parent_id(blk_id);\n                         err = self.report_return_mismatched_types(\n                             cause,\n                             expected,\n@@ -1578,7 +1578,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            let id = fcx.tcx.hir().get_parent_node(id);\n+                            let id = fcx.tcx.hir().parent_id(id);\n                             unsized_return = self.is_return_ty_unsized(fcx, id);\n                         }\n                     }\n@@ -1668,7 +1668,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let mut pointing_at_return_type = false;\n         let mut fn_output = None;\n \n-        let parent_id = fcx.tcx.hir().get_parent_node(id);\n+        let parent_id = fcx.tcx.hir().parent_id(id);\n         let parent = fcx.tcx.hir().get(parent_id);\n         if let Some(expr) = expression\n             && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(&hir::Closure { body, .. }), .. }) = parent"}, {"sha": "6f1af904c0289bc1f08d1ee0e09cab552c173140", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -211,7 +211,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         error: Option<TypeError<'tcx>>,\n     ) {\n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         match (self.tcx.hir().find(parent), error) {\n             (Some(hir::Node::Local(hir::Local { ty: Some(ty), init: Some(init), .. })), _)\n                 if init.hir_id == expr.hir_id =>\n@@ -258,7 +258,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         hir::Path { res: hir::def::Res::Local(hir_id), .. },\n                     )) => {\n                         if let Some(hir::Node::Pat(pat)) = self.tcx.hir().find(*hir_id) {\n-                            let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n+                            let parent = self.tcx.hir().parent_id(pat.hir_id);\n                             primary_span = pat.span;\n                             secondary_span = pat.span;\n                             match self.tcx.hir().find(parent) {\n@@ -326,7 +326,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         error: Option<TypeError<'tcx>>,\n     ) {\n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         let Some(TypeError::Sorts(ExpectedFound { expected, .. })) = error else {return;};\n         let Some(hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Assign(lhs, rhs, _), ..\n@@ -510,7 +510,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Unroll desugaring, to make sure this works for `for` loops etc.\n                 loop {\n-                    parent = self.tcx.hir().get_parent_node(id);\n+                    parent = self.tcx.hir().parent_id(id);\n                     if let Some(parent_span) = self.tcx.hir().opt_span(parent) {\n                         if parent_span.find_ancestor_inside(expr.span).is_some() {\n                             // The parent node is part of the same span, so is the result of the\n@@ -790,12 +790,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        let local_parent = self.tcx.hir().get_parent_node(local_id);\n+        let local_parent = self.tcx.hir().parent_id(local_id);\n         let Some(Node::Param(hir::Param { hir_id: param_hir_id, .. })) = self.tcx.hir().find(local_parent) else {\n             return None;\n         };\n \n-        let param_parent = self.tcx.hir().get_parent_node(*param_hir_id);\n+        let param_parent = self.tcx.hir().parent_id(*param_hir_id);\n         let Some(Node::Expr(hir::Expr {\n             hir_id: expr_hir_id,\n             kind: hir::ExprKind::Closure(hir::Closure { fn_decl: closure_fn_decl, .. }),\n@@ -804,7 +804,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        let expr_parent = self.tcx.hir().get_parent_node(*expr_hir_id);\n+        let expr_parent = self.tcx.hir().parent_id(*expr_hir_id);\n         let hir = self.tcx.hir().find(expr_parent);\n         let closure_params_len = closure_fn_decl.inputs.len();\n         let (\n@@ -857,7 +857,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => None,\n         }?;\n \n-        match hir.find(hir.get_parent_node(expr.hir_id))? {\n+        match hir.find(hir.parent_id(expr.hir_id))? {\n             Node::ExprField(field) => {\n                 if field.ident.name == local.name && field.is_shorthand {\n                     return Some(local.name);\n@@ -883,7 +883,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Returns whether the given expression is an `else if`.\n     pub(crate) fn is_else_if_block(&self, expr: &hir::Expr<'_>) -> bool {\n         if let hir::ExprKind::If(..) = expr.kind {\n-            let parent_id = self.tcx.hir().get_parent_node(expr.hir_id);\n+            let parent_id = self.tcx.hir().parent_id(expr.hir_id);\n             if let Some(Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::If(_, _, Some(else_expr)),\n                 ..\n@@ -1040,7 +1040,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(hir::Node::Expr(hir::Expr {\n                             kind: hir::ExprKind::Assign(..),\n                             ..\n-                        })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+                        })) = self.tcx.hir().find(self.tcx.hir().parent_id(expr.hir_id))\n                         {\n                             if mutability.is_mut() {\n                                 // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n@@ -1268,7 +1268,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut sugg = vec![];\n \n         if let Some(hir::Node::ExprField(field)) =\n-            self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+            self.tcx.hir().find(self.tcx.hir().parent_id(expr.hir_id))\n         {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n             if field.is_shorthand {\n@@ -1625,7 +1625,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             [start, end],\n             _,\n         ) = expr.kind else { return; };\n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         if let Some(hir::Node::ExprField(_)) = self.tcx.hir().find(parent) {\n             // Ignore `Foo { field: a..Default::default() }`\n             return;"}, {"sha": "ee5578a8de6375437d92c9aea86c53c9f6c92a45", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         original_expr_id: HirId,\n         then: impl FnOnce(&hir::Expr<'_>),\n     ) {\n-        let mut parent = self.tcx.hir().get_parent_node(original_expr_id);\n+        let mut parent = self.tcx.hir().parent_id(original_expr_id);\n         while let Some(node) = self.tcx.hir().find(parent) {\n             match node {\n                 hir::Node::Expr(hir::Expr {\n@@ -959,7 +959,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | hir::Node::TraitItem(_)\n                 | hir::Node::Crate(_) => break,\n                 _ => {\n-                    parent = self.tcx.hir().get_parent_node(parent);\n+                    parent = self.tcx.hir().parent_id(parent);\n                 }\n             }\n         }\n@@ -1083,7 +1083,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n                 let hir = self.tcx.hir();\n                 if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) =\n-                    hir.get(hir.get_parent_node(hir.get_parent_node(expr.hir_id)))\n+                    hir.get(hir.parent_id(hir.parent_id(expr.hir_id)))\n                 {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_lo(),\n@@ -2462,7 +2462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_label(field.span, \"method, not a field\");\n         let expr_is_call =\n             if let hir::Node::Expr(hir::Expr { kind: ExprKind::Call(callee, _args), .. }) =\n-                self.tcx.hir().get(self.tcx.hir().get_parent_node(expr.hir_id))\n+                self.tcx.hir().get(self.tcx.hir().parent_id(expr.hir_id))\n             {\n                 expr.hir_id == callee.hir_id\n             } else {"}, {"sha": "a452dcc5014e41248718a4dd7b1af07c31ede775", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -1436,7 +1436,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut contained_in_place = false;\n \n         while let hir::Node::Expr(parent_expr) =\n-            self.tcx.hir().get(self.tcx.hir().get_parent_node(expr_id))\n+            self.tcx.hir().get(self.tcx.hir().parent_id(expr_id))\n         {\n             match &parent_expr.kind {\n                 hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {"}, {"sha": "fbb4da153b88b2fe5819823119dd9e0748446014", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -1803,7 +1803,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     hir_id: call_hir_id,\n                     span: call_span,\n                     ..\n-                }) = hir.get(hir.get_parent_node(expr.hir_id))\n+                }) = hir.get(hir.parent_id(expr.hir_id))\n                     && callee.hir_id == expr.hir_id\n                 {\n                     if self.closure_span_overlaps_error(error, *call_span) {"}, {"sha": "066e98c74578fe047d2fcce200a3c1839158fdc7", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results\n             .borrow()\n             .liberated_fn_sigs()\n-            .get(self.tcx.hir().get_parent_node(self.body_id))\n+            .get(self.tcx.hir().parent_id(self.body_id))\n             .copied()\n     }\n \n@@ -642,7 +642,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check if the parent expression is a call to Pin::new.  If it\n                 // is and we were expecting a Box, ergo Pin<Box<expected>>, we\n                 // can suggest Box::pin.\n-                let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+                let parent = self.tcx.hir().parent_id(expr.hir_id);\n                 let Some(Node::Expr(Expr { kind: ExprKind::Call(fn_name, _), .. })) = self.tcx.hir().find(parent) else {\n                     return false;\n                 };"}, {"sha": "26d4e7d1df37ee19269bc6579b017b48e9d020db", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -224,7 +224,7 @@ fn typeck_with_fallback<'tcx>(\n                     _ => None,\n                 })\n                 .unwrap_or_else(|| match tcx.hir().get(id) {\n-                    Node::AnonConst(_) => match tcx.hir().get(tcx.hir().get_parent_node(id)) {\n+                    Node::AnonConst(_) => match tcx.hir().get(tcx.hir().parent_id(id)) {\n                         Node::Expr(&hir::Expr {\n                             kind: hir::ExprKind::ConstBlock(ref anon_const),\n                             .."}, {"sha": "ccee9b2554ce1ad8b1ad02367f2355580be80e20", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let sugg_span = if let SelfSource::MethodCall(expr) = source {\n             // Given `foo.bar(baz)`, `expr` is `bar`, but we want to point to the whole thing.\n-            self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id)).span\n+            self.tcx.hir().expect_expr(self.tcx.hir().parent_id(expr.hir_id)).span\n         } else {\n             span\n         };\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let SelfSource::MethodCall(rcvr_expr) = source {\n             self.suggest_fn_call(&mut err, rcvr_expr, rcvr_ty, |output_ty| {\n                 let call_expr =\n-                    self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(rcvr_expr.hir_id));\n+                    self.tcx.hir().expect_expr(self.tcx.hir().parent_id(rcvr_expr.hir_id));\n                 let probe =\n                     self.lookup_probe(item_name, output_ty, call_expr, ProbeScope::AllTraits);\n                 probe.is_ok()\n@@ -916,8 +916,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let msg = \"remove this method call\";\n             let mut fallback_span = true;\n             if let SelfSource::MethodCall(expr) = source {\n-                let call_expr =\n-                    self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n+                let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().parent_id(expr.hir_id));\n                 if let Some(span) = call_expr.span.trim_start(expr.span) {\n                     err.span_suggestion(span, msg, \"\", Applicability::MachineApplicable);\n                     fallback_span = false;\n@@ -1270,7 +1269,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n-                    let call_expr = tcx.hir().expect_expr(tcx.hir().get_parent_node(expr.hir_id));\n+                    let call_expr = tcx.hir().expect_expr(tcx.hir().parent_id(expr.hir_id));\n \n                     if let Some(span) = call_expr.span.trim_start(item_name.span) {\n                         err.span_suggestion(\n@@ -1452,7 +1451,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                         let parent_node =\n-                            self.tcx.hir().get(self.tcx.hir().get_parent_node(hir_id));\n+                            self.tcx.hir().get(self.tcx.hir().parent_id(hir_id));\n                         let msg = format!(\n                             \"you must specify a type for this binding, like `{}`\",\n                             concrete_type,\n@@ -1525,7 +1524,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut visitor = LetVisitor { result: None, ident_name: seg1.ident.name };\n         visitor.visit_body(&body);\n \n-        let parent = self.tcx.hir().get_parent_node(seg1.hir_id);\n+        let parent = self.tcx.hir().parent_id(seg1.hir_id);\n         if let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent)\n             && let Some(expr) = visitor.result\n             && let Some(self_ty) = self.node_ty_opt(expr.hir_id)\n@@ -1563,7 +1562,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         && let Some((fields, substs)) =\n             self.get_field_candidates_considering_privacy(span, actual, mod_id)\n         {\n-            let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n+            let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().parent_id(expr.hir_id));\n \n             let lang_items = self.tcx.lang_items();\n             let never_mention_traits = [\n@@ -1633,7 +1632,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n         let SelfSource::MethodCall(expr) = source else { return; };\n-        let call_expr = tcx.hir().expect_expr(tcx.hir().get_parent_node(expr.hir_id));\n+        let call_expr = tcx.hir().expect_expr(tcx.hir().parent_id(expr.hir_id));\n \n         let ty::Adt(kind, substs) = actual.kind() else { return; };\n         match kind.adt_kind() {\n@@ -2594,7 +2593,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         if  let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent) &&\n             let hir::ExprKind::MethodCall(\n                 hir::PathSegment { ident: method_name, .. },"}, {"sha": "ff3b347ee018f1f53041596dfe22847d53a9d544", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -692,7 +692,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         if let PatKind::Ref(inner, mutbl) = pat.kind\n         && let PatKind::Binding(_, _, binding, ..) = inner.kind {\n-            let binding_parent_id = tcx.hir().get_parent_node(pat.hir_id);\n+            let binding_parent_id = tcx.hir().parent_id(pat.hir_id);\n             let binding_parent = tcx.hir().get(binding_parent_id);\n             debug!(?inner, ?pat, ?binding_parent);\n \n@@ -936,7 +936,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                match self.tcx.hir().get(self.tcx.hir().get_parent_node(pat.hir_id)) {\n+                match self.tcx.hir().get(self.tcx.hir().parent_id(pat.hir_id)) {\n                     hir::Node::PatField(..) => {\n                         e.span_suggestion_verbose(\n                             ident.span.shrink_to_hi(),"}, {"sha": "1ebfde16df9ad6ff9a4cf6c535e667e724fe7ad1", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -411,7 +411,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         span: Span,\n     ) {\n         let hir = self.tcx.hir();\n-        let fn_hir_id = hir.get_parent_node(cause.body_id);\n+        let fn_hir_id = hir.parent_id(cause.body_id);\n         if let Some(node) = self.tcx.hir().find(fn_hir_id) &&\n             let hir::Node::Item(hir::Item {\n                     kind: hir::ItemKind::Fn(_sig, _, body_id), ..\n@@ -585,9 +585,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             let hir::StmtKind::Local(local) = &stmt.kind else { continue; };\n             local.pat.walk(&mut find_compatible_candidates);\n         }\n-        match hir.find(hir.get_parent_node(blk.hir_id)) {\n+        match hir.find(hir.parent_id(blk.hir_id)) {\n             Some(hir::Node::Expr(hir::Expr { hir_id, .. })) => {\n-                match hir.find(hir.get_parent_node(*hir_id)) {\n+                match hir.find(hir.parent_id(*hir_id)) {\n                     Some(hir::Node::Arm(hir::Arm { pat, .. })) => {\n                         pat.walk(&mut find_compatible_candidates);\n                     }"}, {"sha": "3c2f2e9417a5f366e70fa12ed3b1c5795230bb62", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let map = cx.tcx.hir();\n-        if matches!(map.get(map.get_parent_node(field.hir_id)), Node::Variant(_)) {\n+        if matches!(map.get(map.parent_id(field.hir_id)), Node::Variant(_)) {\n             return;\n         }\n         self.perform_lint(cx, \"field\", field.def_id, field.vis_span, false);"}, {"sha": "96084a50984ee2b3d2d5f23f477de77c8d14905c", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n             TyKind::Path(QPath::Resolved(_, path)) => {\n                 if lint_ty_kind_usage(cx, &path.res) {\n                     let hir = cx.tcx.hir();\n-                    let span = match hir.find(hir.get_parent_node(ty.hir_id)) {\n+                    let span = match hir.find(hir.parent_id(ty.hir_id)) {\n                         Some(Node::Pat(Pat {\n                             kind:\n                                 PatKind::Path(qpath)"}, {"sha": "a4182c121ed02a84ed05a8a6e632afbc38d81eb9", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -444,8 +444,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n \n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n         if let PatKind::Binding(_, hid, ident, _) = p.kind {\n-            if let hir::Node::PatField(field) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n-            {\n+            if let hir::Node::PatField(field) = cx.tcx.hir().get(cx.tcx.hir().parent_id(hid)) {\n                 if !field.is_shorthand {\n                     // Only check if a new name has been introduced, to avoid warning\n                     // on both the struct definition and this pattern."}, {"sha": "9b67ab38f909a0141cf458eb854e20a586a410b3", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -127,9 +127,9 @@ fn lint_overflowing_range_endpoint<'tcx>(\n ) -> bool {\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n-    let par_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n+    let par_id = cx.tcx.hir().parent_id(expr.hir_id);\n     let Node::ExprField(field) = cx.tcx.hir().get(par_id) else { return false };\n-    let field_par_id = cx.tcx.hir().get_parent_node(field.hir_id);\n+    let field_par_id = cx.tcx.hir().parent_id(field.hir_id);\n     let Node::Expr(struct_expr) = cx.tcx.hir().get(field_par_id) else { return false };\n     if !is_range_literal(struct_expr) {\n         return false;\n@@ -404,7 +404,7 @@ fn lint_uint_literal<'tcx>(\n         _ => bug!(),\n     };\n     if lit_val < min || lit_val > max {\n-        let parent_id = cx.tcx.hir().get_parent_node(e.hir_id);\n+        let parent_id = cx.tcx.hir().parent_id(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(parent_id) {\n             match par_e.kind {\n                 hir::ExprKind::Cast(..) => {"}, {"sha": "e00949d45a2796e4a7e12d99fd5d5f5979938c36", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -69,7 +69,7 @@ impl<'hir> Iterator for ParentHirIterator<'hir> {\n         }\n         loop {\n             // There are nodes that do not have entries, so we need to skip them.\n-            let parent_id = self.map.get_parent_node(self.current_id);\n+            let parent_id = self.map.parent_id(self.current_id);\n \n             if parent_id == self.current_id {\n                 self.current_id = CRATE_HIR_ID;\n@@ -246,7 +246,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n-                let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n+                let ctor_of = match self.find(self.parent_id(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -257,7 +257,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::AnonConst(_) => {\n-                let inline = match self.find(self.get_parent_node(hir_id)) {\n+                let inline = match self.find(self.parent_id(hir_id)) {\n                     Some(Node::Expr(&Expr {\n                         kind: ExprKind::ConstBlock(ref anon_const), ..\n                     })) if anon_const.hir_id == hir_id => true,\n@@ -312,7 +312,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[track_caller]\n-    pub fn get_parent_node(self, hir_id: HirId) -> HirId {\n+    pub fn parent_id(self, hir_id: HirId) -> HirId {\n         self.find_parent_node(hir_id)\n             .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n     }\n@@ -414,7 +414,7 @@ impl<'hir> Map<'hir> {\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(self, BodyId { hir_id }: BodyId) -> HirId {\n-        let parent = self.get_parent_node(hir_id);\n+        let parent = self.parent_id(hir_id);\n         assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)), \"{hir_id:?}\");\n         parent\n     }\n@@ -642,29 +642,29 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n-    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    /// until the crate root is reached. Prefer this over your own loop using `parent_id`.\n     #[inline]\n     pub fn parent_id_iter(self, current_id: HirId) -> impl Iterator<Item = HirId> + 'hir {\n         ParentHirIterator { current_id, map: self }\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n-    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    /// until the crate root is reached. Prefer this over your own loop using `parent_id`.\n     #[inline]\n     pub fn parent_iter(self, current_id: HirId) -> impl Iterator<Item = (HirId, Node<'hir>)> {\n         self.parent_id_iter(current_id).filter_map(move |id| Some((id, self.find(id)?)))\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n-    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    /// until the crate root is reached. Prefer this over your own loop using `parent_id`.\n     #[inline]\n     pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {\n         ParentOwnerIterator { current_id, map: self }\n     }\n \n     /// Checks if the node is left-hand side of an assignment.\n     pub fn is_lhs(self, id: HirId) -> bool {\n-        match self.find(self.get_parent_node(id)) {\n+        match self.find(self.parent_id(id)) {\n             Some(Node::Expr(expr)) => match expr.kind {\n                 ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,\n                 _ => false,\n@@ -892,7 +892,7 @@ impl<'hir> Map<'hir> {\n             Node::Pat(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n             // A `Ctor` doesn't have an identifier itself, but its parent\n             // struct/variant does. Compare with `hir::Map::opt_span`.\n-            Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n+            Node::Ctor(..) => match self.find(self.parent_id(id))? {\n                 Node::Item(item) => Some(item.ident),\n                 Node::Variant(variant) => Some(variant.ident),\n                 _ => unreachable!(),\n@@ -1021,7 +1021,7 @@ impl<'hir> Map<'hir> {\n                 ForeignItemKind::Fn(decl, _, _) => until_within(item.span, decl.output.span()),\n                 _ => named_span(item.span, item.ident, None),\n             },\n-            Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n+            Node::Ctor(_) => return self.opt_span(self.parent_id(hir_id)),\n             Node::Expr(Expr {\n                 kind: ExprKind::Closure(Closure { fn_decl_span, .. }),\n                 span,\n@@ -1063,7 +1063,7 @@ impl<'hir> Map<'hir> {\n             Node::PatField(field) => field.span,\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n-            Node::Ctor(..) => self.span_with_body(self.get_parent_node(hir_id)),\n+            Node::Ctor(..) => self.span_with_body(self.parent_id(hir_id)),\n             Node::Lifetime(lifetime) => lifetime.ident.span,\n             Node::GenericParam(param) => param.span,\n             Node::Infer(i) => i.span,\n@@ -1093,7 +1093,7 @@ impl<'hir> Map<'hir> {\n     /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n     /// called with the HirId for the `{ ... }` anon const\n     pub fn opt_const_param_default_param_def_id(self, anon_const: HirId) -> Option<LocalDefId> {\n-        match self.get(self.get_parent_node(anon_const)) {\n+        match self.get(self.parent_id(anon_const)) {\n             Node::GenericParam(GenericParam {\n                 def_id: param_id,\n                 kind: GenericParamKind::Const { .. },"}, {"sha": "eb48b325e84ebd22be75e0fc1951dd7514b32af0", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -182,7 +182,7 @@ impl TyCtxt<'_> {\n             if hir.attrs(id).iter().any(|attr| Level::from_attr(attr).is_some()) {\n                 return id;\n             }\n-            let next = hir.get_parent_node(id);\n+            let next = hir.parent_id(id);\n             if next == id {\n                 bug!(\"lint traversal reached the root of the crate\");\n             }"}, {"sha": "e1aa7fea441cdde9df8701cc3523f402173c10fb", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -457,7 +457,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                             .def_id\n                             .as_local()\n                             .map(|id| hir.local_def_id_to_hir_id(id))\n-                            .and_then(|id| self.hir().find(self.hir().get_parent_node(id)))\n+                            .and_then(|id| self.hir().find(self.hir().parent_id(id)))\n                             .as_ref()\n                             .and_then(|node| node.generics())\n                         {"}, {"sha": "e7ee0d9e908e0556746b5f01fc413d1a5f731256", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -247,14 +247,14 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n     fn check_let_chain(&mut self, cx: &mut MatchCheckCtxt<'p, 'tcx>, pat_id: HirId) -> bool {\n         let hir = self.tcx.hir();\n-        let parent = hir.get_parent_node(pat_id);\n+        let parent = hir.parent_id(pat_id);\n \n         // First, figure out if the given pattern is part of a let chain,\n         // and if so, obtain the top node of the chain.\n         let mut top = parent;\n         let mut part_of_chain = false;\n         loop {\n-            let new_top = hir.get_parent_node(top);\n+            let new_top = hir.parent_id(top);\n             if let hir::Node::Expr(\n                 hir::Expr {\n                     kind: hir::ExprKind::Binary(Spanned { node: hir::BinOpKind::And, .. }, lhs, rhs),\n@@ -1054,7 +1054,7 @@ pub enum LetSource {\n fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n     let hir = tcx.hir();\n \n-    let parent = hir.get_parent_node(pat_id);\n+    let parent = hir.parent_id(pat_id);\n     let_source_parent(tcx, parent, Some(pat_id))\n }\n \n@@ -1073,7 +1073,7 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n         _ => {}\n     }\n \n-    let parent_parent = hir.get_parent_node(parent);\n+    let parent_parent = hir.parent_id(parent);\n     let parent_parent_node = hir.get(parent_parent);\n     match parent_parent_node {\n         hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), .. }) => {\n@@ -1085,8 +1085,8 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n         _ => {}\n     }\n \n-    let parent_parent_parent = hir.get_parent_node(parent_parent);\n-    let parent_parent_parent_parent = hir.get_parent_node(parent_parent_parent);\n+    let parent_parent_parent = hir.parent_id(parent_parent);\n+    let parent_parent_parent_parent = hir.parent_id(parent_parent_parent);\n     let parent_parent_parent_parent_node = hir.get(parent_parent_parent_parent);\n \n     if let hir::Node::Expr(hir::Expr {"}, {"sha": "ef241c5398d4d89c666ffb0cbf1bc42452fe5f8d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -2141,7 +2141,7 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n             if !old_error_set_ancestry.insert(id) {\n                 break;\n             }\n-            let parent = tcx.hir().get_parent_node(id);\n+            let parent = tcx.hir().parent_id(id);\n             if parent == id {\n                 break;\n             }"}, {"sha": "a8d82de02b7548836d5b8e3a7e70ae07caab06a2", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -600,7 +600,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 if seg.res != Res::Err {\n                     seg.res\n                 } else {\n-                    let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                    let parent_node = self.tcx.hir().parent_id(hir_id);\n                     self.get_path_res(parent_node)\n                 }\n             }"}, {"sha": "b0a730c8ad16865d3b6f7c8a12dd688edf42ed85", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 Some(if movability.is_some() { \"an async closure\" } else { \"a closure\" })\n             }),\n             hir::Node::Expr(hir::Expr { .. }) => {\n-                let parent_hid = hir.get_parent_node(hir_id);\n+                let parent_hid = hir.parent_id(hir_id);\n                 if parent_hid != hir_id { self.describe_enclosure(parent_hid) } else { None }\n             }\n             _ => None,"}, {"sha": "bf5e06268e96402a31c5197e20d2cd4178fd3096", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -838,7 +838,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         let hir = self.tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(def_id.as_local()?);\n-        let parent_node = hir.get_parent_node(hir_id);\n+        let parent_node = hir.parent_id(hir_id);\n         match hir.find(parent_node) {\n             Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local), .. })) => {\n                 get_name(err, &local.pat.kind)\n@@ -1421,7 +1421,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let parent_node = hir.parent_id(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. })) = node\n             && let hir::ExprKind::Block(blk, _) = &hir.body(*body_id).value.kind\n@@ -1458,7 +1458,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span> {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let parent_node = hir.parent_id(obligation.cause.body_id);\n         let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), .. })) = hir.find(parent_node) else {\n             return None;\n         };\n@@ -1483,7 +1483,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         let hir = self.tcx.hir();\n-        let fn_hir_id = hir.get_parent_node(obligation.cause.body_id);\n+        let fn_hir_id = hir.parent_id(obligation.cause.body_id);\n         let node = hir.find(fn_hir_id);\n         let Some(hir::Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(sig, _, body_id),\n@@ -1695,7 +1695,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let parent_node = hir.parent_id(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body_id), .. })) =\n             node\n@@ -2291,7 +2291,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let expr = hir.expect_expr(expr_id);\n                         debug!(\"target_ty evaluated from {:?}\", expr);\n \n-                        let parent = hir.get_parent_node(expr_id);\n+                        let parent = hir.parent_id(expr_id);\n                         if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n                             let parent_span = hir.span(parent);\n                             let parent_did = parent.owner.to_def_id();\n@@ -2512,7 +2512,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             ObligationCauseCode::VariableType(hir_id) => {\n-                let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                let parent_node = self.tcx.hir().parent_id(hir_id);\n                 match self.tcx.hir().find(parent_node) {\n                     Some(Node::Local(hir::Local { ty: Some(ty), .. })) => {\n                         err.span_suggestion_verbose(\n@@ -2992,7 +2992,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         span: Span,\n     ) {\n         let body_hir_id = obligation.cause.body_id;\n-        let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n+        let item_id = self.tcx.hir().parent_id(body_hir_id);\n \n         if let Some(body_id) =\n             self.tcx.hir().maybe_body_owned_by(self.tcx.hir().local_def_id(item_id))\n@@ -3219,7 +3219,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n                 && let hir::Path { res: hir::def::Res::Local(hir_id), .. } = path\n                 && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(*hir_id)\n-                && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n+                && let parent_hir_id = self.tcx.hir().parent_id(binding.hir_id)\n                 && let Some(hir::Node::Local(local)) = self.tcx.hir().find(parent_hir_id)\n                 && let Some(binding_expr) = local.init\n             {\n@@ -3287,7 +3287,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n                 && let hir::Path { res: hir::def::Res::Local(hir_id), .. } = path\n                 && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(*hir_id)\n-                && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n+                && let parent_hir_id = self.tcx.hir().parent_id(binding.hir_id)\n                 && let Some(parent) = self.tcx.hir().find(parent_hir_id)\n             {\n                 // We've reached the root of the method call chain..."}, {"sha": "e17b8346c0eea70e026277c110c00ce3c15cc1f1", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -161,7 +161,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n                 kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n                 ..\n             }) => {\n-                let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n+                let parent_hir_id = tcx.hir().parent_id(hir_id);\n                 match tcx.hir().get(parent_hir_id) {\n                     hir::Node::Item(hir::Item {\n                         kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),"}, {"sha": "58b7b9829a100d4134d2587169a856d7f1dde977", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -131,7 +131,7 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n         _ => return false,\n     }\n \n-    matches!(map.find(map.get_parent_node(id)), Some(Node::Param(_)))\n+    matches!(map.find(map.parent_id(id)), Some(Node::Param(_)))\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n@@ -156,8 +156,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             let map = &self.cx.tcx.hir();\n             if is_argument(*map, cmt.hir_id) {\n                 // Skip closure arguments\n-                let parent_id = map.get_parent_node(cmt.hir_id);\n-                if let Some(Node::Expr(..)) = map.find(map.get_parent_node(parent_id)) {\n+                let parent_id = map.parent_id(cmt.hir_id);\n+                if let Some(Node::Expr(..)) = map.find(map.parent_id(parent_id)) {\n                     return;\n                 }\n "}, {"sha": "bdeddf44df7bd27839af48aa48ff7654794eb57b", "filename": "src/tools/clippy/clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -251,15 +251,15 @@ impl<'a, 'tcx> Visitor<'tcx> for SliceIndexLintingVisitor<'a, 'tcx> {\n                 let map = cx.tcx.hir();\n \n                 // Checking for slice indexing\n-                let parent_id = map.get_parent_node(expr.hir_id);\n+                let parent_id = map.parent_id(expr.hir_id);\n                 if let Some(hir::Node::Expr(parent_expr)) = map.find(parent_id);\n                 if let hir::ExprKind::Index(_, index_expr) = parent_expr.kind;\n                 if let Some((Constant::Int(index_value), _)) = constant(cx, cx.typeck_results(), index_expr);\n                 if let Ok(index_value) = index_value.try_into();\n                 if index_value < max_suggested_slice;\n \n                 // Make sure that this slice index is read only\n-                let maybe_addrof_id = map.get_parent_node(parent_id);\n+                let maybe_addrof_id = map.parent_id(parent_id);\n                 if let Some(hir::Node::Expr(maybe_addrof_expr)) = map.find(maybe_addrof_id);\n                 if let hir::ExprKind::AddrOf(_kind, hir::Mutability::Not, _inner_expr) = maybe_addrof_expr.kind;\n                 then {"}, {"sha": "540656a2cd991d8f497e1531db137fd69bc2ed6d", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                                 if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation(_, Mutability::Mut));\n-                                let parent_node = cx.tcx.hir().get_parent_node(hir_id);\n+                                let parent_node = cx.tcx.hir().parent_id(hir_id);\n                                 if let Some(Node::Local(parent_let_expr)) = cx.tcx.hir().find(parent_node);\n                                 if let Some(init) = parent_let_expr.init;\n                                 then {"}, {"sha": "494fde395e933dc513de2485a570db082bbaffb1", "filename": "src/tools/clippy/clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(hir_id) = path_to_local(expr3)\n             && let Some(Node::Pat(_)) = cx.tcx.hir().find(hir_id) {\n                 // Apply only to params or locals with annotated types\n-                match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+                match cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n                     Some(Node::Param(..)) => (),\n                     Some(Node::Local(local)) => {\n                         let Some(ty) = local.ty else { return };"}, {"sha": "abe9d231f4aa13f313b065090f86d6185afa03c3", "filename": "src/tools/clippy/clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -140,8 +140,8 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n fn opt_parent_assign_span<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<AssignmentExpr> {\n     let map = &cx.tcx.hir();\n \n-    if let Some(Node::Expr(parent_arm_expr)) = map.find(map.get_parent_node(ex.hir_id)) {\n-        return match map.find(map.get_parent_node(parent_arm_expr.hir_id)) {\n+    if let Some(Node::Expr(parent_arm_expr)) = map.find(map.parent_id(ex.hir_id)) {\n+        return match map.find(map.parent_id(parent_arm_expr.hir_id)) {\n             Some(Node::Local(parent_let_expr)) => Some(AssignmentExpr::Local {\n                 span: parent_let_expr.span,\n                 pat_span: parent_let_expr.pat.span(),\n@@ -183,7 +183,7 @@ fn sugg_with_curlies<'a>(\n \n     // If the parent is already an arm, and the body is another match statement,\n     // we need curly braces around suggestion\n-    let parent_node_id = cx.tcx.hir().get_parent_node(match_expr.hir_id);\n+    let parent_node_id = cx.tcx.hir().parent_id(match_expr.hir_id);\n     if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n         if let ExprKind::Match(..) = arm.body.kind {\n             cbrace_end = format!(\"\\n{indent}}}\");"}, {"sha": "f0be7771bb1a6d6d44f2f7263915d251aa665d50", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -186,7 +186,7 @@ fn check_for_unsequenced_reads(vis: &mut ReadVisitor<'_, '_>) {\n     let map = &vis.cx.tcx.hir();\n     let mut cur_id = vis.write_expr.hir_id;\n     loop {\n-        let parent_id = map.get_parent_node(cur_id);\n+        let parent_id = map.parent_id(cur_id);\n         if parent_id == cur_id {\n             break;\n         }"}, {"sha": "58c54280a2346a3f69b8c515b3fbf7c9a5ba2797", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "07fd321d69fced8a6ac11ebb3bb790a90fdf1bd3", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -366,7 +366,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             let mut dereferenced_expr = expr;\n             let mut needs_check_adjustment = true;\n             loop {\n-                let parent_id = cx.tcx.hir().get_parent_node(cur_expr.hir_id);\n+                let parent_id = cx.tcx.hir().parent_id(cur_expr.hir_id);\n                 if parent_id == cur_expr.hir_id {\n                     break;\n                 }"}, {"sha": "f96a19b2723590fbc30eaad4a20afbf0997bbd5b", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "ac4f8789a43425155c65080eaecbfd55f8fbfcce", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         return;\n     }\n     let map = &cx.tcx.hir();\n-    let opt_parent_node = map.find(map.get_parent_node(expr.hir_id));\n+    let opt_parent_node = map.find(map.parent_id(expr.hir_id));\n     if_chain! {\n         if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n         if is_questionmark_desugar_marked_call(parent_expr);\n@@ -192,7 +192,7 @@ fn fmt_stmts_and_call(\n \n     let mut stmts_and_call_snippet = stmts_and_call.join(&format!(\"{}{}\", \";\\n\", \" \".repeat(call_expr_indent)));\n     // expr is not in a block statement or result expression position, wrap in a block\n-    let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(call_expr.hir_id));\n+    let parent_node = cx.tcx.hir().find(cx.tcx.hir().parent_id(call_expr.hir_id));\n     if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n         let block_indent = call_expr_indent + 4;\n         stmts_and_call_snippet ="}, {"sha": "63f4f01b08778e83a93b94f644bc5ef8c2dc128a", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method.\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "a177ae507bbedce0a8829e02f142f2a7a62d8f3e", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -1058,7 +1058,7 @@ fn get_parent_local<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -\n fn get_parent_local_hir_id<'hir>(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n     let map = cx.tcx.hir();\n \n-    match map.find(map.get_parent_node(hir_id)) {\n+    match map.find(map.parent_id(hir_id)) {\n         Some(hir::Node::Local(local)) => Some(local),\n         Some(hir::Node::Pat(pattern)) => get_parent_local_hir_id(cx, pattern.hir_id),\n         _ => None,"}, {"sha": "7144363637a04a0d0213c7b9d696431605a61450", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -219,7 +219,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n     match peel_hir_expr_refs(expr).0.kind {\n         ExprKind::Path(ref qpath) => match cx.qpath_res(qpath, expr.hir_id) {\n             Res::Local(hir_id) => {\n-                let parent_id = cx.tcx.hir().get_parent_node(hir_id);\n+                let parent_id = cx.tcx.hir().parent_id(hir_id);\n                 if let Some(Node::Local(Local { init: Some(init), .. })) = cx.tcx.hir().find(parent_id) {\n                     path_to_matched_type(cx, init)\n                 } else {"}, {"sha": "63d0938169a823674fdb765b86e08c63930d00b1", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a313ef05a78330ac342cddf819214cb6414164e2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=a313ef05a78330ac342cddf819214cb6414164e2", "patch": "@@ -174,7 +174,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n     if_chain! {\n         if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::NONE, ..));\n-        let parent = hir.get_parent_node(hir_id);\n+        let parent = hir.parent_id(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);\n         then {\n             return local.init;\n@@ -2075,7 +2075,7 @@ pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n /// }\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().parent_id(hir_id)) {\n         matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false"}]}