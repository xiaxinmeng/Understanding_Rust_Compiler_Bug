{"sha": "a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "node_id": "C_kwDOAAsO6NoAKGEyYTNlYTg2ZWFhZmRjM2JiNjI4N2U4MzZhNDJkZWFkY2QwMjYzN2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-02T16:14:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-02T16:36:02Z"}, "message": "Bring the version command output in line with other rust tools", "tree": {"sha": "639119066d199ed8d8a77ebca2b370ae30b78af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/639119066d199ed8d8a77ebca2b370ae30b78af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "html_url": "https://github.com/rust-lang/rust/commit/a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88024c7ec2d44a8be8bf05a6580409200cf726fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/88024c7ec2d44a8be8bf05a6580409200cf726fc", "html_url": "https://github.com/rust-lang/rust/commit/88024c7ec2d44a8be8bf05a6580409200cf726fc"}], "stats": {"total": 171, "additions": 105, "deletions": 66}, "files": [{"sha": "292a7ad70ae8988eb985bd8ce0d1e96241e7b65f", "filename": "crates/rust-analyzer/build.rs", "status": "modified", "additions": 22, "deletions": 45, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fbuild.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -4,11 +4,14 @@ use std::{env, path::PathBuf, process::Command};\n \n fn main() {\n     set_rerun();\n-    println!(\"cargo:rustc-env=REV={}\", rev());\n+    set_commit_info();\n+    if option_env!(\"CFG_RELEASE\").is_none() {\n+        println!(\"cargo:rustc-env=POKE_RA_DEVS=1\");\n+    }\n }\n \n fn set_rerun() {\n-    println!(\"cargo:rerun-if-env-changed=RUST_ANALYZER_REV\");\n+    println!(\"cargo:rerun-if-env-changed=CFG_RELEASE\");\n \n     let mut manifest_dir = PathBuf::from(\n         env::var(\"CARGO_MANIFEST_DIR\").expect(\"`CARGO_MANIFEST_DIR` is always set by cargo.\"),\n@@ -27,47 +30,21 @@ fn set_rerun() {\n     println!(\"cargo:warning=Could not find `.git/HEAD` from manifest dir!\");\n }\n \n-fn rev() -> String {\n-    if let Ok(rev) = env::var(\"RUST_ANALYZER_REV\") {\n-        return rev;\n-    }\n-\n-    if let Some(commit_hash) = commit_hash() {\n-        let mut buf = commit_hash;\n-\n-        if let Some(date) = build_date() {\n-            buf.push(' ');\n-            buf.push_str(&date);\n-        }\n-\n-        let channel = env::var(\"RUST_ANALYZER_CHANNEL\").unwrap_or_else(|_| \"dev\".to_string());\n-        buf.push(' ');\n-        buf.push_str(&channel);\n-\n-        return buf;\n-    }\n-\n-    \"???????\".to_string()\n-}\n-\n-fn commit_hash() -> Option<String> {\n-    exec(\"git rev-parse --short HEAD\").ok()\n-}\n-\n-fn build_date() -> Option<String> {\n-    exec(\"date -u +%Y-%m-%d\").ok()\n-}\n-\n-fn exec(command: &str) -> std::io::Result<String> {\n-    let args = command.split_ascii_whitespace().collect::<Vec<_>>();\n-    let output = Command::new(args[0]).args(&args[1..]).output()?;\n-    if !output.status.success() {\n-        return Err(std::io::Error::new(\n-            std::io::ErrorKind::InvalidData,\n-            format!(\"command {:?} returned non-zero code\", command,),\n-        ));\n-    }\n-    let stdout = String::from_utf8(output.stdout)\n-        .map_err(|err| std::io::Error::new(std::io::ErrorKind::InvalidData, err))?;\n-    Ok(stdout.trim().to_string())\n+fn set_commit_info() {\n+    let output = match Command::new(\"git\")\n+        .arg(\"log\")\n+        .arg(\"-1\")\n+        .arg(\"--date=short\")\n+        .arg(\"--format=%H %h %cd\")\n+        .output()\n+    {\n+        Ok(output) if output.status.success() => output,\n+        _ => return,\n+    };\n+    let stdout = String::from_utf8(output.stdout).unwrap();\n+    let mut parts = stdout.split_whitespace();\n+    let mut next = || parts.next().unwrap();\n+    println!(\"cargo:rustc-env=RA_COMMIT_HASH={}\", next());\n+    println!(\"cargo:rustc-env=RA_COMMIT_SHORT_HASH={}\", next());\n+    println!(\"cargo:rustc-env=RA_COMMIT_DATE={}\", next())\n }"}, {"sha": "fd155068616fc705709e8d2339a17e04e7d5bf89", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -70,7 +70,7 @@ fn try_main() -> Result<()> {\n                 return Ok(());\n             }\n             if cmd.version {\n-                println!(\"rust-analyzer {}\", env!(\"REV\"));\n+                println!(\"rust-analyzer {}\", rust_analyzer::version());\n                 return Ok(());\n             }\n             if cmd.help {\n@@ -150,7 +150,7 @@ fn with_extra_thread(\n }\n \n fn run_server() -> Result<()> {\n-    tracing::info!(\"server version {} will start\", env!(\"REV\"));\n+    tracing::info!(\"server version {} will start\", rust_analyzer::version());\n \n     let (connection, io_threads) = Connection::stdio();\n \n@@ -192,7 +192,7 @@ fn run_server() -> Result<()> {\n         capabilities: server_capabilities,\n         server_info: Some(lsp_types::ServerInfo {\n             name: String::from(\"rust-analyzer\"),\n-            version: Some(String::from(env!(\"REV\"))),\n+            version: Some(rust_analyzer::version().to_string()),\n         }),\n         offset_encoding: if supports_utf8(config.caps()) {\n             Some(\"utf-8\".to_string())"}, {"sha": "491c55a04f8c0ade80b19ed3d56632ac82275120", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -22,6 +22,7 @@ use crate::cli::{\n };\n use crate::line_index::{LineEndings, LineIndex, OffsetEncoding};\n use crate::to_proto;\n+use crate::version::version;\n \n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);\n@@ -312,7 +313,7 @@ impl flags::Lsif {\n             tool_info: Some(lsp_types::lsif::ToolInfo {\n                 name: \"rust-analyzer\".to_string(),\n                 args: vec![],\n-                version: Some(env!(\"REV\").to_string()),\n+                version: Some(version().to_string()),\n             }),\n         }));\n         for file in si.files {"}, {"sha": "f16559148e651644ebd4f0d0029e18460d8f91af", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -8,6 +8,7 @@ use serde::{de::DeserializeOwned, Serialize};\n use crate::{\n     global_state::{GlobalState, GlobalStateSnapshot},\n     main_loop::Task,\n+    version::version,\n     LspError, Result,\n };\n \n@@ -144,7 +145,7 @@ impl<'a> RequestDispatcher<'a> {\n         match res {\n             Ok(params) => {\n                 let panic_context =\n-                    format!(\"\\nversion: {}\\nrequest: {} {:#?}\", env!(\"REV\"), R::METHOD, params);\n+                    format!(\"\\nversion: {}\\nrequest: {} {:#?}\", version(), R::METHOD, params);\n                 Some((req, params, panic_context))\n             }\n             Err(err) => {\n@@ -248,7 +249,7 @@ impl<'a> NotificationDispatcher<'a> {\n         };\n         let _pctx = stdx::panic_context::enter(format!(\n             \"\\nversion: {}\\nnotification: {}\",\n-            env!(\"REV\"),\n+            version(),\n             N::METHOD\n         ));\n         f(self.global_state, params)?;"}, {"sha": "e04df7dea4218f6790b843be627884770c11e01a", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -16,26 +16,28 @@ macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n }\n \n-mod global_state;\n-mod reload;\n-mod main_loop;\n-mod dispatch;\n-mod handlers;\n mod caps;\n mod cargo_target_spec;\n-mod to_proto;\n-mod from_proto;\n-mod semantic_tokens;\n-mod markdown;\n mod diagnostics;\n+mod diff;\n+mod dispatch;\n+mod from_proto;\n+mod global_state;\n+mod handlers;\n mod line_index;\n mod lsp_utils;\n-mod task_pool;\n+mod main_loop;\n+mod markdown;\n mod mem_docs;\n-mod diff;\n mod op_queue;\n-pub mod lsp_ext;\n+mod reload;\n+mod semantic_tokens;\n+mod task_pool;\n+mod to_proto;\n+mod version;\n+\n pub mod config;\n+pub mod lsp_ext;\n \n #[cfg(test)]\n mod integrated_benchmarks;\n@@ -44,7 +46,7 @@ use std::fmt;\n \n use serde::de::DeserializeOwned;\n \n-pub use crate::{caps::server_capabilities, main_loop::main_loop};\n+pub use crate::{caps::server_capabilities, main_loop::main_loop, version::version};\n \n pub type Error = Box<dyn std::error::Error + Send + Sync>;\n pub type Result<T, E = Error> = std::result::Result<T, E>;"}, {"sha": "5a37cbe2e334baa95346e4d522b600f2597a7545", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -74,7 +74,7 @@ impl GlobalState {\n     /// panicky is a good idea, let's see if we can keep our awesome bleeding\n     /// edge users from being upset!\n     pub(crate) fn poke_rust_analyzer_developer(&mut self, message: String) {\n-        let from_source_build = env!(\"REV\").contains(\"dev\");\n+        let from_source_build = option_env!(\"POKE_RA_DEVS\").is_some();\n         let profiling_enabled = std::env::var(\"RA_PROFILE\").is_ok();\n         if from_source_build || profiling_enabled {\n             self.show_message(lsp_types::MessageType::ERROR, message)"}, {"sha": "1e829299e6f3c115d67140d509858db3b616aabf", "filename": "crates/rust-analyzer/src/version.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/crates%2Frust-analyzer%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fversion.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -0,0 +1,57 @@\n+//! Code for representing rust-analyzer's release version number.\n+\n+use std::fmt;\n+\n+/// Information about the git repository where rust-analyzer was built from.\n+pub struct CommitInfo {\n+    pub short_commit_hash: &'static str,\n+    pub commit_hash: &'static str,\n+    pub commit_date: &'static str,\n+}\n+\n+/// Cargo's version.\n+pub struct VersionInfo {\n+    /// rust-analyzer's version, such as \"1.57.0\", \"1.58.0-beta.1\", \"1.59.0-nightly\", etc.\n+    pub version: &'static str,\n+    /// The release channel we were built for (stable/beta/nightly/dev).\n+    ///\n+    /// `None` if not built via rustbuild.\n+    pub release_channel: Option<&'static str>,\n+    /// Information about the Git repository we may have been built from.\n+    ///\n+    /// `None` if not built from a git repo.\n+    pub commit_info: Option<CommitInfo>,\n+}\n+\n+impl fmt::Display for VersionInfo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.version)?;\n+\n+        if let Some(ci) = &self.commit_info {\n+            write!(f, \" ({} {})\", ci.short_commit_hash, ci.commit_date)?;\n+        };\n+        Ok(())\n+    }\n+}\n+\n+/// Returns information about cargo's version.\n+pub const fn version() -> VersionInfo {\n+    let version = match option_env!(\"CFG_RELEASE\") {\n+        Some(x) => x,\n+        None => \"0.0.0\",\n+    };\n+\n+    let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\");\n+    let commit_info = match (\n+        option_env!(\"RA_COMMIT_SHORT_HASH\"),\n+        option_env!(\"RA_COMMIT_HASH\"),\n+        option_env!(\"RA_COMMIT_DATE\"),\n+    ) {\n+        (Some(short_commit_hash), Some(commit_hash), Some(commit_date)) => {\n+            Some(CommitInfo { short_commit_hash, commit_hash, commit_date })\n+        }\n+        _ => None,\n+    };\n+\n+    VersionInfo { version, release_channel, commit_info }\n+}"}, {"sha": "c82867d3b4dd26c3d1a7ab0a94322e5e93048719", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a3ea86eaafdc3bb6287e836a42deadcd02637b/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=a2a3ea86eaafdc3bb6287e836a42deadcd02637b", "patch": "@@ -72,7 +72,8 @@ fn dist_client(\n }\n \n fn dist_server(sh: &Shell, release_channel: &str, target: &Target) -> anyhow::Result<()> {\n-    let _e = sh.push_env(\"RUST_ANALYZER_CHANNEL\", release_channel);\n+    let _e = sh.push_env(\"CFG_RELEASE_CHANNEL\", release_channel);\n+    let _e = sh.push_env(\"CFG_RELEASE\", \"0.0.0\");\n     let _e = sh.push_env(\"CARGO_PROFILE_RELEASE_LTO\", \"thin\");\n \n     // Uncomment to enable debug info for releases. Note that:"}]}