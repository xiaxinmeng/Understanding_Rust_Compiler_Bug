{"sha": "ac38258dcc4938af8a6eedca687512f1b3b486fe", "node_id": "C_kwDOAAsO6NoAKGFjMzgyNThkY2M0OTM4YWY4YTZlZWRjYTY4NzUxMmYxYjNiNDg2ZmU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-05-06T10:05:40Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-21T09:49:59Z"}, "message": "Use futex based thread parker on Fuchsia.", "tree": {"sha": "a791645fb91b4232bbad91acdcd8343eb54c5dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a791645fb91b4232bbad91acdcd8343eb54c5dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac38258dcc4938af8a6eedca687512f1b3b486fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac38258dcc4938af8a6eedca687512f1b3b486fe", "html_url": "https://github.com/rust-lang/rust/commit/ac38258dcc4938af8a6eedca687512f1b3b486fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac38258dcc4938af8a6eedca687512f1b3b486fe/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9e013ba62e7bf77a95ba29bcb2c5740b7b2059", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9e013ba62e7bf77a95ba29bcb2c5740b7b2059", "html_url": "https://github.com/rust-lang/rust/commit/7f9e013ba62e7bf77a95ba29bcb2c5740b7b2059"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "20340357f6425d23324a355404c64e809b091846", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ac38258dcc4938af8a6eedca687512f1b3b486fe/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac38258dcc4938af8a6eedca687512f1b3b486fe/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=ac38258dcc4938af8a6eedca687512f1b3b486fe", "patch": "@@ -5,6 +5,7 @@\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"dragonfly\",\n+    target_os = \"fuchsia\",\n ))]\n \n use crate::sync::atomic::AtomicU32;\n@@ -241,3 +242,52 @@ pub fn futex_wake(futex: &AtomicU32) -> bool {\n pub fn futex_wake_all(futex: &AtomicU32) {\n     unsafe { emscripten_futex_wake(futex, i32::MAX) };\n }\n+\n+#[cfg(target_os = \"fuchsia\")]\n+mod zircon {\n+    type zx_time_t = i64;\n+    type zx_futex_t = crate::sync::atomic::AtomicU32;\n+    type zx_handle_t = u32;\n+    type zx_status_t = i32;\n+\n+    pub const ZX_HANDLE_INVALID: zx_handle_t = 0;\n+    pub const ZX_ERR_TIMED_OUT: zx_status_t = -21;\n+    pub const ZX_TIME_INFINITE: zx_time_t = zx_time_t::MAX;\n+\n+    extern \"C\" {\n+        pub fn zx_futex_wait(\n+            value_ptr: *const zx_futex_t,\n+            current_value: zx_futex_t,\n+            new_futex_owner: zx_handle_t,\n+            deadline: zx_time_t,\n+        ) -> zx_status_t;\n+        pub fn zx_futex_wake(value_ptr: *const zx_futex_t, wake_count: u32) -> zx_status_t;\n+        pub fn zx_clock_get_monotonic() -> zx_time_t;\n+    }\n+}\n+\n+#[cfg(target_os = \"fuchsia\")]\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    use crate::convert::TryFrom;\n+\n+    // Sleep forever if the timeout is longer than fits in a i64.\n+    let deadline = timeout\n+        .and_then(|d| {\n+            i64::try_from(d.as_nanos())\n+                .ok()?\n+                .checked_add(unsafe { zircon::zx_clock_get_monotonic() })\n+        })\n+        .unwrap_or(zircon::ZX_TIME_INFINITE);\n+\n+    unsafe {\n+        zircon::zx_futex_wait(futex, AtomicU32::new(expected), zircon::ZX_HANDLE_INVALID, deadline)\n+            != zircon::ZX_ERR_TIMED_OUT\n+    }\n+}\n+\n+// Fuchsia doesn't tell us how many threads are woken up, so this always returns false.\n+#[cfg(target_os = \"fuchsia\")]\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n+    unsafe { zircon::zx_futex_wake(futex, 1) };\n+    false\n+}"}, {"sha": "54ac5556a794deca361e599d8d60508cff8f8b93", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac38258dcc4938af8a6eedca687512f1b3b486fe/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac38258dcc4938af8a6eedca687512f1b3b486fe/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=ac38258dcc4938af8a6eedca687512f1b3b486fe", "patch": "@@ -7,6 +7,7 @@\n     target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"dragonfly\",\n+    target_os = \"fuchsia\",\n )))]\n \n use crate::cell::UnsafeCell;"}, {"sha": "7e8bfb2565e454ca27b748e069ad51f3381e6f5d", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac38258dcc4938af8a6eedca687512f1b3b486fe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac38258dcc4938af8a6eedca687512f1b3b486fe/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=ac38258dcc4938af8a6eedca687512f1b3b486fe", "patch": "@@ -6,6 +6,7 @@ cfg_if::cfg_if! {\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n         target_os = \"dragonfly\",\n+        target_os = \"fuchsia\",\n     ))] {\n         mod futex;\n         pub use futex::Parker;"}]}