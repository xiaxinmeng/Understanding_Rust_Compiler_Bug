{"sha": "cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNDljMmExZWZlNjVkOGNiZTY3MWVmMDJlNWM0ZDg3MDUyOWRhMTM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-10-14T14:52:16Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-12-16T10:33:42Z"}, "message": "cg_ssa: correct documentation comments\n\nThis commit changes some comments to documentation comments so that\nthey can be read on the generated rustdoc.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "5ea444268b555fd83a24a07224a1981741670551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea444268b555fd83a24a07224a1981741670551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl/Z4oYACgkQJZLnbIc4\nH9lxOBAAlBm4YA7nb3YHWjmkwTkgqRbi9be1Vucfcj6AIRyn5pq88D000UY3s271\nmuylQA6IZbp8FDm/SUgphfeaFjItBcCoq8KfFyiRwfG0qsMHIVbyx/fAIvmeRiiE\nnNc88n5ujvlDjhKMeYUBxRXH497Ot2QYO9U6TVEO+7z0L5eOGRdckY+rkrTD5Epd\n0AV9/t4EIe9YLIrM8QO9Jfi7n4aKZ2DEZNQWhefZBvMItblUUYPq2IC3mrpr+pIT\np48zdAZVYjKuDmAuCI/m39bI64NDmr9hqsY2k31r0kIEVd7HvjORZHWtPm5diyaY\nEGpsDqqyOsVcpEwftbWmGx9I4Co5t9PVwzL6x4V7gp3/sV+52a4716wvK2MyEjCy\nt8BePwdXR3CVMaoAeAQC9Z1iz/yrm0omDpRul5NxgPdPhJTnpgrKiRXsmmyYcru+\nyeWcnyhtjjZg8G1GJ6K4oYjyrSRj0xOlss/QTG9vr8vsjsDjVrkbQNPa8zK8K6Pv\n/9uDHfBB/LVgPusVmarGeq77vUwCZ3TBDLDRCwiiSrxVVSTbWblH4cBV2YeqPtMg\nePLOchS5fCfbkiI5QwfgsXR28VGfz3RDfwDUWExLVW7v02O4X6A11vz6dy6K/UXh\nsWUCvZIwtD+tPt3GAsT+3QtZi22bfQZtLfukzQC38GxkIuOkQfE=\n=RhH4\n-----END PGP SIGNATURE-----", "payload": "tree 5ea444268b555fd83a24a07224a1981741670551\nparent 57d05d35765a443fbb0b789a823e84ddff7c0cb1\nauthor David Wood <david@davidtw.co> 1602687136 +0100\ncommitter David Wood <david@davidtw.co> 1608114822 +0000\n\ncg_ssa: correct documentation comments\n\nThis commit changes some comments to documentation comments so that\nthey can be read on the generated rustdoc.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "html_url": "https://github.com/rust-lang/rust/commit/cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf49c2a1efe65d8cbe671ef02e5c4d870529da13/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d05d35765a443fbb0b789a823e84ddff7c0cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d05d35765a443fbb0b789a823e84ddff7c0cb1", "html_url": "https://github.com/rust-lang/rust/commit/57d05d35765a443fbb0b789a823e84ddff7c0cb1"}], "stats": {"total": 105, "additions": 49, "deletions": 56}, "files": [{"sha": "5001e97016ce7199d5a1f19afe9083b2895e1ce3", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 49, "deletions": 56, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/cf49c2a1efe65d8cbe671ef02e5c4d870529da13/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf49c2a1efe65d8cbe671ef02e5c4d870529da13/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=cf49c2a1efe65d8cbe671ef02e5c4d870529da13", "patch": "@@ -279,12 +279,12 @@ pub fn emit_metadata(sess: &Session, metadata: &EncodedMetadata, tmpdir: &MaybeT\n     out_filename\n }\n \n-// Create an 'rlib'\n-//\n-// An rlib in its current incarnation is essentially a renamed .a file. The\n-// rlib primarily contains the object file of the crate, but it also contains\n-// all of the object files from native libraries. This is done by unzipping\n-// native libraries and inserting all of the contents into this archive.\n+/// Create an 'rlib'.\n+///\n+/// An rlib in its current incarnation is essentially a renamed .a file. The rlib primarily contains\n+/// the object file of the crate, but it also contains all of the object files from native\n+/// libraries. This is done by unzipping native libraries and inserting all of the contents into\n+/// this archive.\n fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n@@ -379,18 +379,17 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     ab\n }\n \n-// Create a static archive\n-//\n-// This is essentially the same thing as an rlib, but it also involves adding\n-// all of the upstream crates' objects into the archive. This will slurp in\n-// all of the native libraries of upstream dependencies as well.\n-//\n-// Additionally, there's no way for us to link dynamic libraries, so we warn\n-// about all dynamic library dependencies that they're not linked in.\n-//\n-// There's no need to include metadata in a static archive, so ensure to not\n-// link in the metadata object file (and also don't prepare the archive with a\n-// metadata file).\n+/// Create a static archive.\n+///\n+/// This is essentially the same thing as an rlib, but it also involves adding all of the upstream\n+/// crates' objects into the archive. This will slurp in all of the native libraries of upstream\n+/// dependencies as well.\n+///\n+/// Additionally, there's no way for us to link dynamic libraries, so we warn about all dynamic\n+/// library dependencies that they're not linked in.\n+///\n+/// There's no need to include metadata in a static archive, so ensure to not link in the metadata\n+/// object file (and also don't prepare the archive with a metadata file).\n fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n@@ -447,10 +446,10 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n-// Create a dynamic library or executable\n-//\n-// This will invoke the system linker/cc to create the resulting file. This\n-// links to all upstream files as well.\n+/// Create a dynamic library or executable.\n+///\n+/// This will invoke the system linker/cc to create the resulting file. This links to all upstream\n+/// files as well.\n fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     crate_type: CrateType,\n@@ -1677,17 +1676,15 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.take_cmd()\n }\n \n-// # Native library linking\n-//\n-// User-supplied library search paths (-L on the command line). These are\n-// the same paths used to find Rust crates, so some of them may have been\n-// added already by the previous crate linking code. This only allows them\n-// to be found at compile time so it is still entirely up to outside\n-// forces to make sure that library can be found at runtime.\n-//\n-// Also note that the native libraries linked here are only the ones located\n-// in the current crate. Upstream crates with native library dependencies\n-// may have their native library pulled in above.\n+/// # Native library linking\n+///\n+/// User-supplied library search paths (-L on the command line). These are the same paths used to\n+/// find Rust crates, so some of them may have been added already by the previous crate linking\n+/// code. This only allows them to be found at compile time so it is still entirely up to outside\n+/// forces to make sure that library can be found at runtime.\n+///\n+/// Also note that the native libraries linked here are only the ones located in the current crate.\n+/// Upstream crates with native library dependencies may have their native library pulled in above.\n fn add_local_native_libraries(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n@@ -1727,11 +1724,10 @@ fn add_local_native_libraries(\n     }\n }\n \n-// # Rust Crate linking\n-//\n-// Rust crates are not considered at all when creating an rlib output. All\n-// dependencies will be linked when producing the final output (instead of\n-// the intermediate rlib version)\n+/// # Rust Crate linking\n+///\n+/// Rust crates are not considered at all when creating an rlib output. All dependencies will be\n+/// linked when producing the final output (instead of the intermediate rlib version).\n fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     cmd: &mut dyn Linker,\n     sess: &'a Session,\n@@ -1996,24 +1992,21 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n-// Link in all of our upstream crates' native dependencies. Remember that\n-// all of these upstream native dependencies are all non-static\n-// dependencies. We've got two cases then:\n-//\n-// 1. The upstream crate is an rlib. In this case we *must* link in the\n-// native dependency because the rlib is just an archive.\n-//\n-// 2. The upstream crate is a dylib. In order to use the dylib, we have to\n-// have the dependency present on the system somewhere. Thus, we don't\n-// gain a whole lot from not linking in the dynamic dependency to this\n-// crate as well.\n-//\n-// The use case for this is a little subtle. In theory the native\n-// dependencies of a crate are purely an implementation detail of the crate\n-// itself, but the problem arises with generic and inlined functions. If a\n-// generic function calls a native function, then the generic function must\n-// be instantiated in the target crate, meaning that the native symbol must\n-// also be resolved in the target crate.\n+/// Link in all of our upstream crates' native dependencies. Remember that all of these upstream\n+/// native dependencies are all non-static dependencies. We've got two cases then:\n+///\n+/// 1. The upstream crate is an rlib. In this case we *must* link in the native dependency because\n+/// the rlib is just an archive.\n+///\n+/// 2. The upstream crate is a dylib. In order to use the dylib, we have to have the dependency\n+/// present on the system somewhere. Thus, we don't gain a whole lot from not linking in the\n+/// dynamic dependency to this crate as well.\n+///\n+/// The use case for this is a little subtle. In theory the native dependencies of a crate are\n+/// purely an implementation detail of the crate itself, but the problem arises with generic and\n+/// inlined functions. If a generic function calls a native function, then the generic function\n+/// must be instantiated in the target crate, meaning that the native symbol must also be resolved\n+/// in the target crate.\n fn add_upstream_native_libraries(\n     cmd: &mut dyn Linker,\n     sess: &Session,"}]}