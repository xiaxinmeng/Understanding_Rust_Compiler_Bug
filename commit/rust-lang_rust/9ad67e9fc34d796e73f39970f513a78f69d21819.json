{"sha": "9ad67e9fc34d796e73f39970f513a78f69d21819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZDY3ZTlmYzM0ZDc5NmU3M2YzOTk3MGY1MTNhNzhmNjlkMjE4MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-23T02:55:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-23T02:55:52Z"}, "message": "Auto merge of #44055 - zackmdavis:condensed_non-ADT_derive_error, r=jseyfried\n\nonly set non-ADT derive error once per attribute, not per trait\n\nI found the expansion code very hard to follow, leaving me unsure as to whether this might somehow be done better, but this patch does give us the behavior requested in #43927 (up to exact choice of span; here, it's the entire attribute, not just the `derive` token).\n\n(Note to GitHub robots: _resolves #43927_.)\n\nr? @jseyfried", "tree": {"sha": "d65be815d5f68e64578863efabf5e6a49742b2ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d65be815d5f68e64578863efabf5e6a49742b2ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ad67e9fc34d796e73f39970f513a78f69d21819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad67e9fc34d796e73f39970f513a78f69d21819", "html_url": "https://github.com/rust-lang/rust/commit/9ad67e9fc34d796e73f39970f513a78f69d21819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ad67e9fc34d796e73f39970f513a78f69d21819/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b1d1590029da748fbc7ce723b70f6d3442a729", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b1d1590029da748fbc7ce723b70f6d3442a729", "html_url": "https://github.com/rust-lang/rust/commit/01b1d1590029da748fbc7ce723b70f6d3442a729"}, {"sha": "083f053294b062e12bacfea17a07f83e1b4c3732", "url": "https://api.github.com/repos/rust-lang/rust/commits/083f053294b062e12bacfea17a07f83e1b4c3732", "html_url": "https://github.com/rust-lang/rust/commit/083f053294b062e12bacfea17a07f83e1b4c3732"}], "stats": {"total": 94, "additions": 64, "deletions": 30}, "files": [{"sha": "0e05cce35e2df2bec26e60081124b3c9c4bb7492", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -783,6 +783,10 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_err(&self, sp: Span, msg: &str) {\n         self.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n+    pub fn mut_span_err(&self, sp: Span, msg: &str)\n+                        -> DiagnosticBuilder<'a> {\n+        self.parse_sess.span_diagnostic.mut_span_err(sp, msg)\n+    }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n         self.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }"}, {"sha": "5deb4c3cc00b5ba098139260132e9a113b79ca66", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -282,6 +282,32 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let expansion = self.expand_invoc(invoc, ext);\n                     self.collect_invocations(expansion, &[])\n                 } else if let InvocationKind::Attr { attr: None, traits, item } = invoc.kind {\n+                    let derive_allowed = match item {\n+                        Annotatable::Item(ref item) => match item.node {\n+                            ast::ItemKind::Struct(..) |\n+                            ast::ItemKind::Enum(..) |\n+                            ast::ItemKind::Union(..) => true,\n+                            _ => false,\n+                        },\n+                        _ => false,\n+                    };\n+                    if !derive_allowed {\n+                        let attr = item.attrs().iter()\n+                            .find(|attr| attr.check_name(\"derive\"))\n+                            .expect(\"`derive` attribute should exist\");\n+                        let span = attr.span;\n+                        let mut err = self.cx.mut_span_err(span,\n+                                                           \"`derive` may only be applied to \\\n+                                                            structs, enums and unions\");\n+                        if let ast::AttrStyle::Inner = attr.style {\n+                            let trait_list = traits.iter()\n+                                .map(|t| format!(\"{}\", t)).collect::<Vec<_>>();\n+                            let suggestion = format!(\"#[derive({})]\", trait_list.join(\", \"));\n+                            err.span_suggestion(span, \"try an outer attribute\", suggestion);\n+                        }\n+                        err.emit();\n+                    }\n+\n                     let item = item\n                         .map_attrs(|mut attrs| { attrs.retain(|a| a.path != \"derive\"); attrs });\n                     let item_with_markers ="}, {"sha": "5c1ca19d635f7dc865e94d51f98f1df19cda7216", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -428,8 +428,9 @@ impl<'a> TraitDef<'a> {\n                         }\n                     }\n                     _ => {\n-                        cx.span_err(mitem.span,\n-                                    \"`derive` may only be applied to structs, enums and unions\");\n+                        // Non-ADT derive is an error, but it should have been\n+                        // set earlier; see\n+                        // libsyntax/ext/expand.rs:MacroExpander::expand()\n                         return;\n                     }\n                 };\n@@ -448,8 +449,10 @@ impl<'a> TraitDef<'a> {\n                 push(Annotatable::Item(P(ast::Item { attrs: attrs, ..(*newitem).clone() })))\n             }\n             _ => {\n-                cx.span_err(mitem.span,\n-                            \"`derive` may only be applied to structs and enums\");\n+                // Non-Item derive is an error, but it should have been\n+                // set earlier; see\n+                // libsyntax/ext/expand.rs:MacroExpander::expand()\n+                return;\n             }\n         }\n     }"}, {"sha": "2dbc6cb140db3f957c01f288516fefdc6f6e72b6", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-derive-2.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -8,23 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// `#![derive]` is interpreted (and raises errors) when it occurs at\n-// contexts other than ADT definitions. This test checks cases where\n-// the derive-macro does not exist.\n+// This test checks cases where the derive-macro does not exist.\n \n-#![derive(x3300)]\n-//~^ ERROR cannot find derive macro `x3300` in this scope\n-\n-#[derive(x3300)]\n-//~^ ERROR cannot find derive macro `x3300` in this scope\n mod derive {\n-    mod inner { #![derive(x3300)] }\n-    //~^ ERROR cannot find derive macro `x3300` in this scope\n-\n-    #[derive(x3300)]\n-    //~^ ERROR cannot find derive macro `x3300` in this scope\n-    fn derive() { }\n-\n     #[derive(x3300)]\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n     union U { f: i32 }\n@@ -36,12 +22,4 @@ mod derive {\n     #[derive(x3300)]\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n     struct S;\n-\n-    #[derive(x3300)]\n-    //~^ ERROR cannot find derive macro `x3300` in this scope\n-    type T = S;\n-\n-    #[derive(x3300)]\n-    //~^ ERROR cannot find derive macro `x3300` in this scope\n-    impl S { }\n }"}, {"sha": "e5293ebb94ddc8c0161a9147737efdd3385e473e", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-derive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// `#![derive]` is interpreted (and raises errors) when it occurs at\n-// contexts other than ADT definitions. This test checks cases where\n-// the derive-macro exists.\n+// `#![derive]` raises errors when it occurs at contexts other than ADT\n+// definitions.\n \n #![derive(Debug)]\n //~^ ERROR `derive` may only be applied to structs, enums and unions"}, {"sha": "cf2a4b8d037671a96fddcdf93a648ab467329cc3", "filename": "src/test/ui/span/issue-43927-non-ADT-derive.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.rs?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+#![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n+struct DerivedOn;\n+\n+fn main() {}"}, {"sha": "a0485bed2f4160513e437309bcfdb667984fbcaa", "filename": "src/test/ui/span/issue-43927-non-ADT-derive.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad67e9fc34d796e73f39970f513a78f69d21819/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-43927-non-ADT-derive.stderr?ref=9ad67e9fc34d796e73f39970f513a78f69d21819", "patch": "@@ -0,0 +1,8 @@\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43927-non-ADT-derive.rs:13:1\n+   |\n+13 | #![derive(Debug, PartialEq, Eq)] // should be an outer attribute!\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try an outer attribute: `#[derive(Debug, PartialEq, Eq)]`\n+\n+error: aborting due to previous error\n+"}]}