{"sha": "682f0f8d807b728cb18712fb3315e024f22118bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MmYwZjhkODA3YjcyOGNiMTg3MTJmYjMzMTVlMDI0ZjIyMTE4YmI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-20T19:20:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-29T20:58:37Z"}, "message": "Consider references and unions potentially inhabited during privacy-respecting inhabitedness checks", "tree": {"sha": "f782d5873255b47aa37b9d081b47cc085a6d7960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f782d5873255b47aa37b9d081b47cc085a6d7960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682f0f8d807b728cb18712fb3315e024f22118bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682f0f8d807b728cb18712fb3315e024f22118bb", "html_url": "https://github.com/rust-lang/rust/commit/682f0f8d807b728cb18712fb3315e024f22118bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682f0f8d807b728cb18712fb3315e024f22118bb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "html_url": "https://github.com/rust-lang/rust/commit/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "3f9a9c1720263966eddf0361ffc2350dc73f1bb0", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/682f0f8d807b728cb18712fb3315e024f22118bb/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682f0f8d807b728cb18712fb3315e024f22118bb/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=682f0f8d807b728cb18712fb3315e024f22118bb", "patch": "@@ -167,23 +167,15 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n         substs: &'tcx Substs<'tcx>,\n         adt_kind: AdtKind) -> DefIdForest\n     {\n-        match adt_kind {\n-            AdtKind::Union => {\n-                DefIdForest::intersection(tcx, self.fields.iter().map(|f| {\n-                    f.uninhabited_from(visited, tcx, substs, false)\n-                }))\n-            },\n-            AdtKind::Struct => {\n-                DefIdForest::union(tcx, self.fields.iter().map(|f| {\n-                    f.uninhabited_from(visited, tcx, substs, false)\n-                }))\n-            },\n-            AdtKind::Enum => {\n-                DefIdForest::union(tcx, self.fields.iter().map(|f| {\n-                    f.uninhabited_from(visited, tcx, substs, true)\n-                }))\n-            },\n-        }\n+        let is_enum = match adt_kind {\n+            // For now, `union`s are never considered uninhabited.\n+            AdtKind::Union => return DefIdForest::empty(),\n+            AdtKind::Enum => true,\n+            AdtKind::Struct => false,\n+        };\n+        DefIdForest::union(tcx, self.fields.iter().map(|f| {\n+            f.uninhabited_from(visited, tcx, substs, is_enum)\n+        }))\n     }\n }\n \n@@ -194,8 +186,8 @@ impl<'a, 'gcx, 'tcx> FieldDef {\n         visited: &mut FxHashMap<DefId, FxHashSet<&'tcx Substs<'tcx>>>,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         substs: &'tcx Substs<'tcx>,\n-        is_enum: bool) -> DefIdForest\n-    {\n+        is_enum: bool,\n+    ) -> DefIdForest {\n         let mut data_uninhabitedness = move || {\n             self.ty(tcx, substs).uninhabited_from(visited, tcx)\n         };\n@@ -253,14 +245,16 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 let substs_set = visited.get_mut(&def.did).unwrap();\n                 substs_set.remove(substs);\n                 ret\n-            },\n+            }\n \n             Never => DefIdForest::full(tcx),\n+\n             Tuple(ref tys) => {\n                 DefIdForest::union(tcx, tys.iter().map(|ty| {\n                     ty.uninhabited_from(visited, tcx)\n                 }))\n-            },\n+            }\n+\n             Array(ty, len) => {\n                 match len.assert_usize(tcx) {\n                     // If the array is definitely non-empty, it's uninhabited if\n@@ -269,9 +263,11 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                     _ => DefIdForest::empty()\n                 }\n             }\n-            Ref(_, ty, _) => {\n-                ty.uninhabited_from(visited, tcx)\n-            }\n+\n+            // References to uninitialised memory is valid for any type, including\n+            // uninhabited types, in unsafe code, so we treat all references as\n+            // inhabited.\n+            Ref(..) => DefIdForest::empty(),\n \n             _ => DefIdForest::empty(),\n         }"}]}