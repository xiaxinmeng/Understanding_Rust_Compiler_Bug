{"sha": "a8e0511b3288f40570812fe6524e0d80cf630f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTA1MTFiMzI4OGY0MDU3MDgxMmZlNjUyNGUwZDgwY2Y2MzBmMmM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-30T22:23:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T22:23:17Z"}, "message": "Rollup merge of #71688 - ecstatic-morse:const-downcast, r=oli-obk\n\nAllow `Downcast` projections unconditionally in const-checking\n\n`ProjectionElem::Downcast` sounds scary, but it's really just the projection we use to access a particular enum variant. They usually appear in the lowering of a `match` statement, so they have been associated with control flow in const-checking, but they don't do any control flow by themselves. We already have a HIR pass that looks for `if` and `match` (even ones that have 1 or fewer reachable branches). That pass is double-checked by a MIR pass that looks for `SwitchInt`s and `FakeRead`s for match scrutinees. In my opinion, there's no need to look for `Downcast` as well.\n\nr? @oli-obk", "tree": {"sha": "06b28d2cb7806fb0bd291474ed3028c43aecc1da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b28d2cb7806fb0bd291474ed3028c43aecc1da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e0511b3288f40570812fe6524e0d80cf630f2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeq0/VCRBK7hj4Ov3rIwAAdHIIAJ0kzeP1sTo1Re3h4nahMgHS\n3buN668Rgtmql7kVdr5+PAsg+6hcXWBRpBEpWlAv7fR/3dcSo/60jEUk4FT8Q/mV\nfz7rSMR4/LWd2Es1tjSa3DW6nJdVMV5HFJgvBoLAg+4BfpyuEdSNVS09NJ08yGE5\n68H2zI5xYU0dgP3quyKpNFIQHlFiURx4vbuEtuMSKUMLrgleU+VSkmYpUlP/QDna\noinFreQ/MFr+CEXo+DxyOquwAaebFq8GjfD/nMonFYb1oC5Aq+QWYDjsl0n057Sm\nrHJpKsBHdaeCPZNP1SxgX9UjgiZ3+FghkdtHuioXHzsXvQMAjhkRChIalxlCgFQ=\n=QU5j\n-----END PGP SIGNATURE-----\n", "payload": "tree 06b28d2cb7806fb0bd291474ed3028c43aecc1da\nparent 8192cb6ea3e4456519bce0b176af221b960fd289\nparent 0592976f7ee4b31046e3d23457699ef038c3e6e7\nauthor Tyler Mandry <tmandry@gmail.com> 1588285397 -0700\ncommitter GitHub <noreply@github.com> 1588285397 -0700\n\nRollup merge of #71688 - ecstatic-morse:const-downcast, r=oli-obk\n\nAllow `Downcast` projections unconditionally in const-checking\n\n`ProjectionElem::Downcast` sounds scary, but it's really just the projection we use to access a particular enum variant. They usually appear in the lowering of a `match` statement, so they have been associated with control flow in const-checking, but they don't do any control flow by themselves. We already have a HIR pass that looks for `if` and `match` (even ones that have 1 or fewer reachable branches). That pass is double-checked by a MIR pass that looks for `SwitchInt`s and `FakeRead`s for match scrutinees. In my opinion, there's no need to look for `Downcast` as well.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e0511b3288f40570812fe6524e0d80cf630f2c", "html_url": "https://github.com/rust-lang/rust/commit/a8e0511b3288f40570812fe6524e0d80cf630f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e0511b3288f40570812fe6524e0d80cf630f2c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8192cb6ea3e4456519bce0b176af221b960fd289", "url": "https://api.github.com/repos/rust-lang/rust/commits/8192cb6ea3e4456519bce0b176af221b960fd289", "html_url": "https://github.com/rust-lang/rust/commit/8192cb6ea3e4456519bce0b176af221b960fd289"}, {"sha": "0592976f7ee4b31046e3d23457699ef038c3e6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0592976f7ee4b31046e3d23457699ef038c3e6e7", "html_url": "https://github.com/rust-lang/rust/commit/0592976f7ee4b31046e3d23457699ef038c3e6e7"}], "stats": {"total": 53, "additions": 6, "deletions": 47}, "files": [{"sha": "fe20ceb47ee37b7a901c8dfff9005701f4f95b1d", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -53,15 +53,6 @@ pub trait NonConstOp: std::fmt::Debug {\n     }\n }\n \n-/// A `Downcast` projection.\n-#[derive(Debug)]\n-pub struct Downcast;\n-impl NonConstOp for Downcast {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_if_match)\n-    }\n-}\n-\n /// A function call where the callee is a pointer.\n #[derive(Debug)]\n pub struct FnCallIndirect;"}, {"sha": "78cb60ea484e4c1a7e54a2c54970a52a56045b05", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -472,6 +472,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             }\n \n             ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {\n@@ -484,10 +485,6 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     _ => {}\n                 }\n             }\n-\n-            ProjectionElem::Downcast(..) => {\n-                self.check_op(ops::Downcast);\n-            }\n         }\n     }\n "}, {"sha": "cde06cbf84fbbd9c460ef061c7383d298f2bbf24", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -286,11 +286,6 @@ fn check_place(\n     while let &[ref proj_base @ .., elem] = cursor {\n         cursor = proj_base;\n         match elem {\n-            ProjectionElem::Downcast(..) if !feature_allowed(tcx, def_id, sym::const_if_match) => {\n-                return Err((span, \"`match` or `if let` in `const fn` is unstable\".into()));\n-            }\n-            ProjectionElem::Downcast(_symbol, _variant_index) => {}\n-\n             ProjectionElem::Field(..) => {\n                 let base_ty = Place::ty_from(place.local, &proj_base, body, tcx).ty;\n                 if let Some(def) = base_ty.ty_adt_def() {\n@@ -303,6 +298,7 @@ fn check_place(\n                 }\n             }\n             ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref\n             | ProjectionElem::Index(_) => {}"}, {"sha": "7dbf7d1a38691e2ff0648809a2d4c7d2a380f1bb", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -10,7 +10,6 @@ const fn f(x: usize) -> usize {\n         //~| ERROR E0658\n         //~| ERROR E0080\n         //~| ERROR E0744\n-        //~| ERROR E0019\n         sum += i;\n     }\n     sum"}, {"sha": "9761959335273ec05ac5e1934728e1f7d2562335", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -11,6 +11,5 @@ fn main() {\n     //~| ERROR calls in constants are limited to constant functions\n     //~| ERROR references in constants may only refer to immutable values\n     //~| ERROR calls in constants are limited to constant functions\n-    //~| ERROR constant contains unimplemented expression type\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "c49dd830a12e87b04c12f37fa56ed9d13388a448", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -113,6 +113,5 @@ fn main() { //[if_match]~ ERROR fatal error triggered by #[rustc_error]\n         //[stock]~^ ERROR `match` is not allowed in a `const`\n         if let Some(x) = Some(x) { x } else { 1 }\n         //[stock]~^ ERROR `if` is not allowed in a `const`\n-        //[stock]~| ERROR constant contains unimplemented expression type\n     }];\n }"}, {"sha": "b27971dccac6c3766f61725851848fb8a201195e", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.stock.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -237,13 +237,6 @@ LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/feature-gate-const-if-match.rs:114:21\n-   |\n-LL |         if let Some(x) = Some(x) { x } else { 1 }\n-   |                     ^\n-\n-error: aborting due to 25 previous errors\n+error: aborting due to 24 previous errors\n \n-Some errors have detailed explanations: E0019, E0658.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d21cf3dc72c99f59d9b25466f48a9357f1fb4aa6", "filename": "src/test/ui/or-patterns/feature-gate-const-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.rs?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -30,8 +30,6 @@ fn main() {\n         let x = Ok(3);\n         let Ok(y) | Err(y) = x;\n         //~^ ERROR or-pattern is not allowed in a `const`\n-        //~| ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n         2\n     }];\n }"}, {"sha": "345d6c7098112da8b1ef1b0d260909b255f25a81", "filename": "src/test/ui/or-patterns/feature-gate-const-fn.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0511b3288f40570812fe6524e0d80cf630f2c/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr?ref=a8e0511b3288f40570812fe6524e0d80cf630f2c", "patch": "@@ -52,19 +52,6 @@ LL |         let Ok(y) | Err(y) = x;\n    = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/feature-gate-const-fn.rs:31:25\n-   |\n-LL |         let Ok(y) | Err(y) = x;\n-   |                         ^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/feature-gate-const-fn.rs:31:16\n-   |\n-LL |         let Ok(y) | Err(y) = x;\n-   |                ^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0019, E0658.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0658`."}]}