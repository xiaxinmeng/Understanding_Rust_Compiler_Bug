{"sha": "a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MGFlNWQzMWNlYTdkZmYxYTViMDJiOTU4ZDMyOTViNDc0YTdjOWY=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-21T01:57:47Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Split test cases into separate files", "tree": {"sha": "333ee7ed0341fdefc7a5986a8707ad9f01fd45ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/333ee7ed0341fdefc7a5986a8707ad9f01fd45ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "html_url": "https://github.com/rust-lang/rust/commit/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7973392402cd34a98c3d7ca2e0c39d60fcada0", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7973392402cd34a98c3d7ca2e0c39d60fcada0", "html_url": "https://github.com/rust-lang/rust/commit/de7973392402cd34a98c3d7ca2e0c39d60fcada0"}], "stats": {"total": 344, "additions": 177, "deletions": 167}, "files": [{"sha": "303c6124775c140c7503bc8974dd2ecd53e3e648", "filename": "tests/ui/floating_point_exp.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.rs?ref=a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "patch": "@@ -0,0 +1,17 @@\n+#![warn(clippy::floating_point_improvements)]\n+\n+fn main() {\n+    let x = 2f32;\n+    let _ = x.exp() - 1.0;\n+    let _ = x.exp() - 1.0 + 2.0;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.exp() - 2.0;\n+    let _ = x.exp() - 1.0 * 2.0;\n+\n+    let x = 2f64;\n+    let _ = x.exp() - 1.0;\n+    let _ = x.exp() - 1.0 + 2.0;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.exp() - 2.0;\n+    let _ = x.exp() - 1.0 * 2.0;\n+}"}, {"sha": "7832189994584ce408c211e1da6d6948f3e1d3ac", "filename": "tests/ui/floating_point_exp.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_exp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_exp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.stderr?ref=a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "patch": "@@ -0,0 +1,28 @@\n+error: (e.pow(x) - 1) can be computed more accurately\n+  --> $DIR/floating_point_exp.rs:5:13\n+   |\n+LL |     let _ = x.exp() - 1.0;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n+   |\n+   = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n+\n+error: (e.pow(x) - 1) can be computed more accurately\n+  --> $DIR/floating_point_exp.rs:6:13\n+   |\n+LL |     let _ = x.exp() - 1.0 + 2.0;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n+\n+error: (e.pow(x) - 1) can be computed more accurately\n+  --> $DIR/floating_point_exp.rs:12:13\n+   |\n+LL |     let _ = x.exp() - 1.0;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n+\n+error: (e.pow(x) - 1) can be computed more accurately\n+  --> $DIR/floating_point_exp.rs:13:13\n+   |\n+LL |     let _ = x.exp() - 1.0 + 2.0;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "4c01d5e716b0e58f5b1a928a17b065cb786417be", "filename": "tests/ui/floating_point_log.rs", "status": "renamed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "patch": "@@ -40,48 +40,6 @@ fn check_ln1p() {\n     let _ = (1.0 + x - 2.0).ln();\n }\n \n-fn check_powf() {\n-    let x = 3f32;\n-    let _ = 2f32.powf(x);\n-    let _ = std::f32::consts::E.powf(x);\n-    let _ = x.powf(1.0 / 2.0);\n-    let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n-    let _ = x.powf(-2.0);\n-    let _ = x.powf(2.1);\n-    let _ = x.powf(-2.1);\n-    let _ = x.powf(16_777_217.0);\n-    let _ = x.powf(-16_777_217.0);\n-\n-    let x = 3f64;\n-    let _ = 2f64.powf(x);\n-    let _ = std::f64::consts::E.powf(x);\n-    let _ = x.powf(1.0 / 2.0);\n-    let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n-    let _ = x.powf(-2.0);\n-    let _ = x.powf(2.1);\n-    let _ = x.powf(-2.1);\n-    let _ = x.powf(9_007_199_254_740_993.0);\n-    let _ = x.powf(-9_007_199_254_740_993.0);\n-}\n-\n-fn check_expm1() {\n-    let x = 2f32;\n-    let _ = x.exp() - 1.0;\n-    let _ = x.exp() - 1.0 + 2.0;\n-    // Cases where the lint shouldn't be applied\n-    let _ = x.exp() - 2.0;\n-    let _ = x.exp() - 1.0 * 2.0;\n-\n-    let x = 2f64;\n-    let _ = x.exp() - 1.0;\n-    let _ = x.exp() - 1.0 + 2.0;\n-    // Cases where the lint shouldn't be applied\n-    let _ = x.exp() - 2.0;\n-    let _ = x.exp() - 1.0 * 2.0;\n-}\n-\n fn check_log_division() {\n     let x = 3f32;\n     let y = 2f32;", "previous_filename": "tests/ui/floating_point_arithmetic.rs"}, {"sha": "0a36f8fc69fd38346697e8076dc14275f3e3b39e", "filename": "tests/ui/floating_point_log.stderr", "status": "renamed", "additions": 29, "deletions": 125, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "patch": "@@ -1,268 +1,172 @@\n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:9:13\n+  --> $DIR/floating_point_log.rs:9:13\n    |\n LL |     let _ = x.log(2f32);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n    |\n    = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:10:13\n+  --> $DIR/floating_point_log.rs:10:13\n    |\n LL |     let _ = x.log(10f32);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:11:13\n+  --> $DIR/floating_point_log.rs:11:13\n    |\n LL |     let _ = x.log(std::f32::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:12:13\n+  --> $DIR/floating_point_log.rs:12:13\n    |\n LL |     let _ = x.log(TWO);\n    |             ^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:13:13\n+  --> $DIR/floating_point_log.rs:13:13\n    |\n LL |     let _ = x.log(E);\n    |             ^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:16:13\n+  --> $DIR/floating_point_log.rs:16:13\n    |\n LL |     let _ = x.log(2f64);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:17:13\n+  --> $DIR/floating_point_log.rs:17:13\n    |\n LL |     let _ = x.log(10f64);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:18:13\n+  --> $DIR/floating_point_log.rs:18:13\n    |\n LL |     let _ = x.log(std::f64::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:23:13\n+  --> $DIR/floating_point_log.rs:23:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:24:13\n+  --> $DIR/floating_point_log.rs:24:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:25:13\n+  --> $DIR/floating_point_log.rs:25:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:26:13\n+  --> $DIR/floating_point_log.rs:26:13\n    |\n LL |     let _ = (1.0 + x.powi(2) * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:27:13\n+  --> $DIR/floating_point_log.rs:27:13\n    |\n LL |     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `((std::f32::consts::E - 1.0)).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:34:13\n+  --> $DIR/floating_point_log.rs:34:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:35:13\n+  --> $DIR/floating_point_log.rs:35:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:36:13\n+  --> $DIR/floating_point_log.rs:36:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n-error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:45:13\n-   |\n-LL |     let _ = 2f32.powf(x);\n-   |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n-\n-error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:46:13\n-   |\n-LL |     let _ = std::f32::consts::E.powf(x);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n-\n-error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_arithmetic.rs:47:13\n-   |\n-LL |     let _ = x.powf(1.0 / 2.0);\n-   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n-\n-error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:48:13\n-   |\n-LL |     let _ = x.powf(1.0 / 3.0);\n-   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n-\n-error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:49:13\n-   |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n-\n-error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:50:13\n-   |\n-LL |     let _ = x.powf(-2.0);\n-   |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n-\n-error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:57:13\n-   |\n-LL |     let _ = 2f64.powf(x);\n-   |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n-\n-error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:58:13\n-   |\n-LL |     let _ = std::f64::consts::E.powf(x);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n-\n-error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_arithmetic.rs:59:13\n-   |\n-LL |     let _ = x.powf(1.0 / 2.0);\n-   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n-\n-error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:60:13\n-   |\n-LL |     let _ = x.powf(1.0 / 3.0);\n-   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n-\n-error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:61:13\n-   |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n-\n-error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:62:13\n-   |\n-LL |     let _ = x.powf(-2.0);\n-   |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n-\n-error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:71:13\n-   |\n-LL |     let _ = x.exp() - 1.0;\n-   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n-\n-error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:72:13\n-   |\n-LL |     let _ = x.exp() - 1.0 + 2.0;\n-   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n-\n-error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:78:13\n-   |\n-LL |     let _ = x.exp() - 1.0;\n-   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n-\n-error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:79:13\n-   |\n-LL |     let _ = x.exp() - 1.0 + 2.0;\n-   |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n-\n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:90:13\n+  --> $DIR/floating_point_log.rs:48:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:91:13\n+  --> $DIR/floating_point_log.rs:49:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:92:13\n+  --> $DIR/floating_point_log.rs:50:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:93:13\n+  --> $DIR/floating_point_log.rs:51:13\n    |\n LL |     let _ = x.log(4.0) / y.log(4.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:94:13\n+  --> $DIR/floating_point_log.rs:52:13\n    |\n LL |     let _ = x.log(b) / y.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:96:13\n+  --> $DIR/floating_point_log.rs:54:13\n    |\n LL |     let _ = x.log(b) / 2f32.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:102:13\n+  --> $DIR/floating_point_log.rs:60:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:103:13\n+  --> $DIR/floating_point_log.rs:61:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:104:13\n+  --> $DIR/floating_point_log.rs:62:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:105:13\n+  --> $DIR/floating_point_log.rs:63:13\n    |\n LL |     let _ = x.log(4.0) / y.log(4.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:106:13\n+  --> $DIR/floating_point_log.rs:64:13\n    |\n LL |     let _ = x.log(b) / y.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_arithmetic.rs:108:13\n+  --> $DIR/floating_point_log.rs:66:13\n    |\n LL |     let _ = x.log(b) / 2f64.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 28 previous errors\n ", "previous_filename": "tests/ui/floating_point_arithmetic.stderr"}, {"sha": "14f1f531f0f85f24a4b9ddef9da0a0eea2aa6411", "filename": "tests/ui/floating_point_powf.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::floating_point_improvements)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = 2f32.powf(x);\n+    let _ = std::f32::consts::E.powf(x);\n+    let _ = x.powf(1.0 / 2.0);\n+    let _ = x.powf(1.0 / 3.0);\n+    let _ = x.powf(2.0);\n+    let _ = x.powf(-2.0);\n+    let _ = x.powf(2.1);\n+    let _ = x.powf(-2.1);\n+    let _ = x.powf(16_777_217.0);\n+    let _ = x.powf(-16_777_217.0);\n+\n+    let x = 3f64;\n+    let _ = 2f64.powf(x);\n+    let _ = std::f64::consts::E.powf(x);\n+    let _ = x.powf(1.0 / 2.0);\n+    let _ = x.powf(1.0 / 3.0);\n+    let _ = x.powf(2.0);\n+    let _ = x.powf(-2.0);\n+    let _ = x.powf(2.1);\n+    let _ = x.powf(-2.1);\n+    let _ = x.powf(9_007_199_254_740_993.0);\n+    let _ = x.powf(-9_007_199_254_740_993.0);\n+}"}, {"sha": "2be54af96c6b663fccbe7533c737ba19cd10bafc", "filename": "tests/ui/floating_point_powf.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "patch": "@@ -0,0 +1,76 @@\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:5:13\n+   |\n+LL |     let _ = 2f32.powf(x);\n+   |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n+   |\n+   = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:6:13\n+   |\n+LL |     let _ = std::f32::consts::E.powf(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n+\n+error: square-root of a number can be computed more efficiently and accurately\n+  --> $DIR/floating_point_powf.rs:7:13\n+   |\n+LL |     let _ = x.powf(1.0 / 2.0);\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n+\n+error: cube-root of a number can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:8:13\n+   |\n+LL |     let _ = x.powf(1.0 / 3.0);\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:9:13\n+   |\n+LL |     let _ = x.powf(2.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:10:13\n+   |\n+LL |     let _ = x.powf(-2.0);\n+   |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:17:13\n+   |\n+LL |     let _ = 2f64.powf(x);\n+   |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:18:13\n+   |\n+LL |     let _ = std::f64::consts::E.powf(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n+\n+error: square-root of a number can be computed more efficiently and accurately\n+  --> $DIR/floating_point_powf.rs:19:13\n+   |\n+LL |     let _ = x.powf(1.0 / 2.0);\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n+\n+error: cube-root of a number can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:20:13\n+   |\n+LL |     let _ = x.powf(1.0 / 3.0);\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:21:13\n+   |\n+LL |     let _ = x.powf(2.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:22:13\n+   |\n+LL |     let _ = x.powf(-2.0);\n+   |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n+\n+error: aborting due to 12 previous errors\n+"}]}