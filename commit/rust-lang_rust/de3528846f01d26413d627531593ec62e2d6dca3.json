{"sha": "de3528846f01d26413d627531593ec62e2d6dca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzUyODg0NmYwMWQyNjQxM2Q2Mjc1MzE1OTNlYzYyZTJkNmRjYTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T05:10:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T17:58:03Z"}, "message": "rustc: Fail when there are multiple matches for 'use'", "tree": {"sha": "94b5542388cecf79b9d527653cf8d045e7df0561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b5542388cecf79b9d527653cf8d045e7df0561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3528846f01d26413d627531593ec62e2d6dca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3528846f01d26413d627531593ec62e2d6dca3", "html_url": "https://github.com/rust-lang/rust/commit/de3528846f01d26413d627531593ec62e2d6dca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3528846f01d26413d627531593ec62e2d6dca3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0255bf30ea86d0c925403ad3cb3d4c2c662ad424", "url": "https://api.github.com/repos/rust-lang/rust/commits/0255bf30ea86d0c925403ad3cb3d4c2c662ad424", "html_url": "https://github.com/rust-lang/rust/commit/0255bf30ea86d0c925403ad3cb3d4c2c662ad424"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "3c6d69fc27890e9268067430ff3ef42feabf516d", "filename": "src/librustsyntax/attr.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de3528846f01d26413d627531593ec62e2d6dca3/src%2Flibrustsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3528846f01d26413d627531593ec62e2d6dca3/src%2Flibrustsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fattr.rs?ref=de3528846f01d26413d627531593ec62e2d6dca3", "patch": "@@ -7,6 +7,7 @@ import diagnostic::span_handler;\n \n export attr_meta;\n export attr_metas;\n+export find_linkage_attrs;\n export find_linkage_metas;\n export inline_attr;\n export find_inline_attr;\n@@ -36,14 +37,22 @@ export native_abi;\n // From a list of crate attributes get only the meta_items that impact crate\n // linkage\n fn find_linkage_metas(attrs: [ast::attribute]) -> [@ast::meta_item] {\n-    let mut metas: [@ast::meta_item] = [];\n+    find_linkage_attrs(attrs).flat_map {|attr|\n+        alt check attr.node.value.node {\n+          ast::meta_list(_, items) { items }\n+        }\n+    }\n+}\n+\n+fn find_linkage_attrs(attrs: [ast::attribute]) -> [ast::attribute] {\n+    let mut found = [];\n     for attr: ast::attribute in find_attrs_by_name(attrs, \"link\") {\n         alt attr.node.value.node {\n-          ast::meta_list(_, items) { metas += items; }\n+          ast::meta_list(_, _) { found += [attr] }\n           _ { #debug(\"ignoring link attribute that has incorrect type\"); }\n         }\n     }\n-    ret metas;\n+    ret found;\n }\n \n enum inline_attr {"}, {"sha": "44bc44913811d895cac66687c574abb3cdd845b4", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de3528846f01d26413d627531593ec62e2d6dca3/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3528846f01d26413d627531593ec62e2d6dca3/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=de3528846f01d26413d627531593ec62e2d6dca3", "patch": "@@ -138,7 +138,7 @@ fn default_native_lib_naming(sess: session::session, static: bool) ->\n     }\n }\n \n-fn find_library_crate(sess: session::session,\n+fn find_library_crate(sess: session::session, span: span,\n                       metas: [@ast::meta_item])\n    -> option<{ident: str, data: @[u8]}> {\n \n@@ -163,15 +163,16 @@ fn find_library_crate(sess: session::session,\n \n     let nn = default_native_lib_naming(sess, sess.opts.static);\n     let x =\n-        find_library_crate_aux(sess, nn, crate_name,\n+        find_library_crate_aux(sess, span, nn, crate_name,\n                                metas, sess.filesearch);\n     if x != none || sess.opts.static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(sess, nn2, crate_name, metas,\n+    ret find_library_crate_aux(sess, span, nn2, crate_name, metas,\n                                sess.filesearch);\n }\n \n fn find_library_crate_aux(sess: session::session,\n+                          span: span,\n                           nn: {prefix: str, suffix: str},\n                           crate_name: str,\n                           metas: [@ast::meta_item],\n@@ -180,7 +181,8 @@ fn find_library_crate_aux(sess: session::session,\n     let prefix: str = nn.prefix + crate_name + \"-\";\n     let suffix: str = nn.suffix;\n \n-    ret filesearch::search(filesearch, { |path|\n+    let mut matches = [];\n+    filesearch::search(filesearch, { |path|\n         #debug(\"inspecting file %s\", path);\n         let f: str = path::basename(path);\n         if !(str::starts_with(f, prefix) && str::ends_with(f, suffix)) {\n@@ -196,7 +198,8 @@ fn find_library_crate_aux(sess: session::session,\n                     option::none\n                 } else {\n                     #debug(\"found %s with matching metadata\", path);\n-                    option::some({ident: path, data: cvec})\n+                    matches += [{ident: path, data: cvec}];\n+                    option::none\n                 }\n               }\n               _ {\n@@ -206,6 +209,25 @@ fn find_library_crate_aux(sess: session::session,\n             }\n         }\n     });\n+\n+    if matches.is_empty() {\n+        none\n+    } else if matches.len() == 1u {\n+        some(matches[0])\n+    } else {\n+        sess.span_err(\n+            span, #fmt(\"multiple matching crates for `%s`\", crate_name));\n+        sess.note(\"candidates:\");\n+        for matches.each {|match|\n+            sess.note(#fmt(\"path: %s\", match.ident));\n+            let attrs = decoder::get_crate_attributes(match.data);\n+            for attr::find_linkage_attrs(attrs).each {|attr|\n+                sess.note(#fmt(\"meta: %s\", pprust::attr_to_str(attr)));\n+            }\n+        }\n+        sess.abort_if_errors();\n+        none\n+    }\n }\n \n fn get_metadata_section(sess: session::session,\n@@ -240,7 +262,7 @@ fn load_library_crate(sess: session::session, ident: ast::ident, span: span,\n    -> {ident: str, data: @[u8]} {\n \n \n-    alt find_library_crate(sess, metas) {\n+    alt find_library_crate(sess, span, metas) {\n       some(t) { ret t; }\n       none {\n         sess.span_fatal(span, #fmt[\"can't find crate for '%s'\", ident]);"}, {"sha": "da1969a8a0391e314fd92e9fced9c4dbc6000119", "filename": "src/test/compile-fail/crateresolve.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de3528846f01d26413d627531593ec62e2d6dca3/src%2Ftest%2Fcompile-fail%2Fcrateresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3528846f01d26413d627531593ec62e2d6dca3/src%2Ftest%2Fcompile-fail%2Fcrateresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve.rs?ref=de3528846f01d26413d627531593ec62e2d6dca3", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:crateresolve-1.rs\n+// aux-build:crateresolve-2.rs\n+// aux-build:crateresolve-3.rs\n+// error-pattern:multiple matching crates for `crateresolve`\n+\n+use crateresolve;\n+\n+fn main() {\n+}"}]}