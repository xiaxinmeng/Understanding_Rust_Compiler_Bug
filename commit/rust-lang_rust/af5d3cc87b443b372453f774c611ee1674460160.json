{"sha": "af5d3cc87b443b372453f774c611ee1674460160", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNWQzY2M4N2I0NDNiMzcyNDUzZjc3NGM2MTFlZTE2NzQ0NjAxNjA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-11T22:21:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-11T22:21:09Z"}, "message": "Merge pull request #2524 from topecongiro/issue-2523\n\nDo not unindent code block in comments with unformattable macro", "tree": {"sha": "ef9146ec982fad9d5ef49e2068fa45d17648665a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef9146ec982fad9d5ef49e2068fa45d17648665a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5d3cc87b443b372453f774c611ee1674460160", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJapavVCRBK7hj4Ov3rIwAAdHIIAKzDIDOMs3M2g/+m729qXYgN\nf00OdX45veM+dlehluRImpfJHC2wWwUUwKq3GLIT5jDjRG7t3C04mJSZ1daOmljm\nsxQFJVSM29bUyorL6nLWhvcrjkgGZWsEwBvaOHAVfkdJOnXzEwH6/3mOfX4AAtX5\n/ZRosrgRTOTUYEUHQ5dfl9FR/aY/AbnW6QR1dHocbJ6Ib2aLlIHkZA05zt8mDAT2\nfUOGDknmP/e0+Q7f4UC4I7z2xZSrWzcEyWIRP/dp6RHW9D5PviLRe+XaQ7k1khRq\neftSEP8Xy+IkDD8HkRrtVFLF6P87V4XHNsy1so/yBR1f5XA/rxOnnCEeBb5W2pc=\n=YnUP\n-----END PGP SIGNATURE-----\n", "payload": "tree ef9146ec982fad9d5ef49e2068fa45d17648665a\nparent 124f03b1fcad4265df627980626fcd1785705946\nparent 2188b464b0c5e22661bc488815f8b46b0b31cc26\nauthor Nick Cameron <nrc@ncameron.org> 1520806869 +1300\ncommitter GitHub <noreply@github.com> 1520806869 +1300\n\nMerge pull request #2524 from topecongiro/issue-2523\n\nDo not unindent code block in comments with unformattable macro"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5d3cc87b443b372453f774c611ee1674460160", "html_url": "https://github.com/rust-lang/rust/commit/af5d3cc87b443b372453f774c611ee1674460160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5d3cc87b443b372453f774c611ee1674460160/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124f03b1fcad4265df627980626fcd1785705946", "url": "https://api.github.com/repos/rust-lang/rust/commits/124f03b1fcad4265df627980626fcd1785705946", "html_url": "https://github.com/rust-lang/rust/commit/124f03b1fcad4265df627980626fcd1785705946"}, {"sha": "2188b464b0c5e22661bc488815f8b46b0b31cc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/2188b464b0c5e22661bc488815f8b46b0b31cc26", "html_url": "https://github.com/rust-lang/rust/commit/2188b464b0c5e22661bc488815f8b46b0b31cc26"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "6e740f43f8282ba913a9df07faa1e3b3e00907a9", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af5d3cc87b443b372453f774c611ee1674460160/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5d3cc87b443b372453f774c611ee1674460160/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=af5d3cc87b443b372453f774c611ee1674460160", "patch": "@@ -2652,6 +2652,7 @@ impl<'a> ToExpr for MacroArg {\n             MacroArg::Expr(ref expr) => can_be_overflowed_expr(context, expr, len),\n             MacroArg::Ty(ref ty) => can_be_overflowed_type(context, ty, len),\n             MacroArg::Pat(..) => false,\n+            MacroArg::Item(..) => len == 1,\n         }\n     }\n }"}, {"sha": "73f5efc685a6d4e84492ecf22d76fde53370cbb1", "filename": "src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af5d3cc87b443b372453f774c611ee1674460160/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5d3cc87b443b372453f774c611ee1674460160/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=af5d3cc87b443b372453f774c611ee1674460160", "patch": "@@ -597,14 +597,23 @@ pub fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     }\n }\n \n+const FN_MAIN_PREFIX: &str = \"fn main() {\\n\";\n+\n+fn enclose_in_main_block(s: &str, config: &Config) -> String {\n+    let indent = Indent::from_width(config, config.tab_spaces());\n+    FN_MAIN_PREFIX.to_owned() + &indent.to_string(config)\n+        + &s.lines()\n+            .collect::<Vec<_>>()\n+            .join(&indent.to_string_with_newline(config)) + \"\\n}\"\n+}\n+\n /// Format the given code block. Mainly targeted for code block in comment.\n /// The code block may be incomplete (i.e. parser may be unable to parse it).\n /// To avoid panic in parser, we wrap the code block with a dummy function.\n /// The returned code block does *not* end with newline.\n pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n     // Wrap the given code block with `fn main()` if it does not have one.\n-    let fn_main_prefix = \"fn main() {\\n\";\n-    let snippet = fn_main_prefix.to_owned() + code_snippet + \"\\n}\";\n+    let snippet = enclose_in_main_block(code_snippet, config);\n     let mut result = String::with_capacity(snippet.len());\n     let mut is_first = true;\n \n@@ -613,7 +622,7 @@ pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String>\n     let formatted = format_snippet(&snippet, config)?;\n     // 2 = \"}\\n\"\n     let block_len = formatted.len().checked_sub(2).unwrap_or(0);\n-    for line in formatted[fn_main_prefix.len()..block_len].lines() {\n+    for line in formatted[FN_MAIN_PREFIX.len()..block_len].lines() {\n         if !is_first {\n             result.push('\\n');\n         } else {"}, {"sha": "78a8f0c0b3144304ca858649a63d800922b1f6be", "filename": "src/macros.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/af5d3cc87b443b372453f774c611ee1674460160/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5d3cc87b443b372453f774c611ee1674460160/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=af5d3cc87b443b372453f774c611ee1674460160", "patch": "@@ -22,7 +22,7 @@\n use std::collections::HashMap;\n \n use config::lists::*;\n-use syntax::ast;\n+use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, Span};\n use syntax::parse::new_parser_from_tts;\n use syntax::parse::parser::Parser;\n@@ -39,6 +39,7 @@ use lists::{itemize_list, write_list, ListFormatting};\n use overflow;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use utils::{format_visibility, mk_sp, wrap_str};\n \n const FORCED_BRACKET_MACROS: &[&str] = &[\"vec!\"];\n@@ -71,9 +72,21 @@ impl MacroStyle {\n \n #[derive(Debug)]\n pub enum MacroArg {\n-    Expr(ast::Expr),\n-    Ty(ast::Ty),\n-    Pat(ast::Pat),\n+    Expr(ptr::P<ast::Expr>),\n+    Ty(ptr::P<ast::Ty>),\n+    Pat(ptr::P<ast::Pat>),\n+    // `parse_item` returns `Option<ptr::P<ast::Item>>`.\n+    Item(Option<ptr::P<ast::Item>>),\n+}\n+\n+impl Rewrite for ast::Item {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        let mut visitor = ::visitor::FmtVisitor::from_context(context);\n+        visitor.block_indent = shape.indent;\n+        visitor.last_pos = self.span().lo();\n+        visitor.visit_item(self);\n+        Some(visitor.buffer)\n+    }\n }\n \n impl Rewrite for MacroArg {\n@@ -82,6 +95,7 @@ impl Rewrite for MacroArg {\n             MacroArg::Expr(ref expr) => expr.rewrite(context, shape),\n             MacroArg::Ty(ref ty) => ty.rewrite(context, shape),\n             MacroArg::Pat(ref pat) => pat.rewrite(context, shape),\n+            MacroArg::Item(ref item) => item.as_ref().and_then(|item| item.rewrite(context, shape)),\n         }\n     }\n }\n@@ -97,7 +111,7 @@ fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n                     } else {\n                         // Parsing succeeded.\n                         *parser = cloned_parser;\n-                        return Some(MacroArg::$macro_arg((*x).clone()));\n+                        return Some(MacroArg::$macro_arg(x.clone()));\n                     }\n                 }\n                 Err(mut e) => {\n@@ -111,6 +125,7 @@ fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n     parse_macro_arg!(Expr, parse_expr);\n     parse_macro_arg!(Ty, parse_ty);\n     parse_macro_arg!(Pat, parse_pat);\n+    parse_macro_arg!(Item, parse_item);\n \n     None\n }"}, {"sha": "6f5a4b1721f9d6ff5ce48b91f612701f7306871a", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af5d3cc87b443b372453f774c611ee1674460160/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5d3cc87b443b372453f774c611ee1674460160/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=af5d3cc87b443b372453f774c611ee1674460160", "patch": "@@ -187,6 +187,7 @@ impl Spanned for MacroArg {\n             MacroArg::Expr(ref expr) => expr.span(),\n             MacroArg::Ty(ref ty) => ty.span(),\n             MacroArg::Pat(ref pat) => pat.span(),\n+            MacroArg::Item(ref item) => item.as_ref().unwrap().span(),\n         }\n     }\n }"}, {"sha": "693d06e131ab8cea7bd1829cae0758bcc4474974", "filename": "tests/source/issue-2523.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af5d3cc87b443b372453f774c611ee1674460160/tests%2Fsource%2Fissue-2523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5d3cc87b443b372453f774c611ee1674460160/tests%2Fsource%2Fissue-2523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2523.rs?ref=af5d3cc87b443b372453f774c611ee1674460160", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-normalize_comments: true\n+\n+// Do not unindent macro calls in comment with unformattable syntax.\n+//! ```rust\n+//! let x = 3  ;\n+//! some_macro!(pub fn fn foo() (\n+//!     println!(\"Don't unindent me!\");\n+//! ));\n+//! ```\n+\n+// Format items that appear as arguments of macro call.\n+//! ```rust\n+//! let x = 3  ;\n+//! some_macro!(pub fn foo() {\n+//! println!(\"Don't unindent me!\");\n+//! });\n+//! ```"}, {"sha": "6805f7ec2cad22d65c7e54217d0894be4991f002", "filename": "tests/target/issue-2523.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af5d3cc87b443b372453f774c611ee1674460160/tests%2Ftarget%2Fissue-2523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5d3cc87b443b372453f774c611ee1674460160/tests%2Ftarget%2Fissue-2523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2523.rs?ref=af5d3cc87b443b372453f774c611ee1674460160", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-normalize_comments: true\n+\n+// Do not unindent macro calls in comment with unformattable syntax.\n+//! ```rust\n+//! let x = 3;\n+//! some_macro!(pub fn fn foo() (\n+//!     println!(\"Don't unindent me!\");\n+//! ));\n+//! ```\n+\n+// Format items that appear as arguments of macro call.\n+//! ```rust\n+//! let x = 3;\n+//! some_macro!(pub fn foo() {\n+//!     println!(\"Don't unindent me!\");\n+//! });\n+//! ```"}]}