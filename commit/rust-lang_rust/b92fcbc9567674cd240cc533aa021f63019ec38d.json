{"sha": "b92fcbc9567674cd240cc533aa021f63019ec38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MmZjYmM5NTY3Njc0Y2QyNDBjYzUzM2FhMDIxZjYzMDE5ZWMzOGQ=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-25T07:03:10Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-25T07:03:10Z"}, "message": "Further improvements to the SourceChange convenience methods\n\nRename system_edit to file_system_edit, add more documentation, add\nsource_file_edit_from to create a SourceChange from `FileId` and `TextEdit`.", "tree": {"sha": "4eb3b02be2a092284c3a6cee93db07df16ee12f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb3b02be2a092284c3a6cee93db07df16ee12f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92fcbc9567674cd240cc533aa021f63019ec38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92fcbc9567674cd240cc533aa021f63019ec38d", "html_url": "https://github.com/rust-lang/rust/commit/b92fcbc9567674cd240cc533aa021f63019ec38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92fcbc9567674cd240cc533aa021f63019ec38d/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e1c7a112832a18509d400841b3d162228372bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e1c7a112832a18509d400841b3d162228372bf", "html_url": "https://github.com/rust-lang/rust/commit/22e1c7a112832a18509d400841b3d162228372bf"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "6559de29d9adde0c1e3ffc15df5113ecccc0b546", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=b92fcbc9567674cd240cc533aa021f63019ec38d", "patch": "@@ -140,7 +140,7 @@ fn check_module(\n             Problem::UnresolvedModule { candidate } => {\n                 let create_file =\n                     FileSystemEdit::CreateFile { source_root, path: candidate.clone() };\n-                let fix = SourceChange::system_edit(\"create module\", create_file);\n+                let fix = SourceChange::file_system_edit(\"create module\", create_file);\n                 Diagnostic {\n                     range: name_node.range(),\n                     message: \"unresolved module\".to_string(),"}, {"sha": "928f3d604f3a3c519f198cdefaca83b5e8b1e2c2", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=b92fcbc9567674cd240cc533aa021f63019ec38d", "patch": "@@ -98,7 +98,24 @@ pub struct SourceChange {\n }\n \n impl SourceChange {\n-    pub fn source_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n+    /// Creates a new SourceChange with the given label\n+    /// from the edits.\n+    pub(crate) fn from_edits<L: Into<String>>(\n+        label: L,\n+        source_file_edits: Vec<SourceFileEdit>,\n+        file_system_edits: Vec<FileSystemEdit>,\n+    ) -> Self {\n+        SourceChange {\n+            label: label.into(),\n+            source_file_edits,\n+            file_system_edits,\n+            cursor_position: None,\n+        }\n+    }\n+\n+    /// Creates a new SourceChange with the given label,\n+    /// containing only the given `SourceFileEdits`.\n+    pub(crate) fn source_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n         SourceChange {\n             label: label.into(),\n             source_file_edits: edits,\n@@ -107,7 +124,9 @@ impl SourceChange {\n         }\n     }\n \n-    pub fn system_edits<L: Into<String>>(label: L, edits: Vec<FileSystemEdit>) -> Self {\n+    /// Creates a new SourceChange with the given label,\n+    /// containing only the given `FileSystemEdits`.\n+    pub(crate) fn file_system_edits<L: Into<String>>(label: L, edits: Vec<FileSystemEdit>) -> Self {\n         SourceChange {\n             label: label.into(),\n             source_file_edits: vec![],\n@@ -116,20 +135,36 @@ impl SourceChange {\n         }\n     }\n \n-    pub fn source_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n+    /// Creates a new SourceChange with the given label,\n+    /// containing only a single `SourceFileEdit`.\n+    pub(crate) fn source_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n         SourceChange::source_edits(label, vec![edit])\n     }\n \n-    pub fn system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n-        SourceChange::system_edits(label, vec![edit])\n+    /// Creates a new SourceChange with the given label\n+    /// from the given `FileId` and `TextEdit`\n+    pub(crate) fn source_file_edit_from<L: Into<String>>(\n+        label: L,\n+        file_id: FileId,\n+        edit: TextEdit,\n+    ) -> Self {\n+        SourceChange::source_edit(label, SourceFileEdit { file_id, edit })\n+    }\n+\n+    /// Creates a new SourceChange with the given label\n+    /// from the given `FileId` and `TextEdit`\n+    pub(crate) fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n+        SourceChange::file_system_edits(label, vec![edit])\n     }\n \n-    pub fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n+    /// Sets the cursor position to the given `FilePosition`\n+    pub(crate) fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n         self.cursor_position = Some(cursor_position);\n         self\n     }\n \n-    pub fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n+    /// Sets the cursor position to the given `FilePosition`\n+    pub(crate) fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n         self.cursor_position = cursor_position;\n         self\n     }"}, {"sha": "78f77e761a31ca0e579480b76b149043f7589313", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=b92fcbc9567674cd240cc533aa021f63019ec38d", "patch": "@@ -187,12 +187,7 @@ fn rename_mod(\n     };\n     source_file_edits.push(edit);\n \n-    Some(SourceChange {\n-        label: \"rename\".to_string(),\n-        source_file_edits,\n-        file_system_edits,\n-        cursor_position: None,\n-    })\n+    Some(SourceChange::from_edits(\"rename\", source_file_edits, file_system_edits))\n }\n \n fn rename_reference(\n@@ -211,12 +206,7 @@ fn rename_reference(\n         return None;\n     }\n \n-    Some(SourceChange {\n-        label: \"rename\".to_string(),\n-        source_file_edits: edit,\n-        file_system_edits: Vec::new(),\n-        cursor_position: None,\n-    })\n+    Some(SourceChange::source_edits(\"rename\", edit))\n }\n \n #[cfg(test)]"}, {"sha": "aa9971450f72ba5ecd552b836b87def1fc25bf73", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92fcbc9567674cd240cc533aa021f63019ec38d/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=b92fcbc9567674cd240cc533aa021f63019ec38d", "patch": "@@ -112,16 +112,14 @@ pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<\n         TextRange::from_to(position.offset - current_indent_len, position.offset),\n         target_indent.into(),\n     );\n-    let res = SourceChange {\n-        label: \"reindent dot\".to_string(),\n-        source_file_edits: vec![SourceFileEdit { edit: edit.finish(), file_id: position.file_id }],\n-        file_system_edits: vec![],\n-        cursor_position: Some(FilePosition {\n+\n+    let res = SourceChange::source_file_edit_from(\"reindent dot\", position.file_id, edit.finish())\n+        .with_cursor(FilePosition {\n             offset: position.offset + target_indent_len - current_indent_len\n                 + TextUnit::of_char('.'),\n             file_id: position.file_id,\n-        }),\n-    };\n+        });\n+\n     Some(res)\n }\n "}]}