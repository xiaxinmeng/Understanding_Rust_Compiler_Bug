{"sha": "c60aab29f1a84b799d4b2a27ed26eeda29438eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MGFhYjI5ZjFhODRiNzk5ZDRiMmEyN2VkMjZlZWRhMjk0MzhlZGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-11T07:35:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-15T06:51:42Z"}, "message": "When attempting to write str with single quote suggest double quotes", "tree": {"sha": "0e92783df5f21256b5059f20f9eed554364b3d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e92783df5f21256b5059f20f9eed554364b3d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60aab29f1a84b799d4b2a27ed26eeda29438eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60aab29f1a84b799d4b2a27ed26eeda29438eda", "html_url": "https://github.com/rust-lang/rust/commit/c60aab29f1a84b799d4b2a27ed26eeda29438eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60aab29f1a84b799d4b2a27ed26eeda29438eda/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "933103190950c97b966e789e9206bff2f7bd6118", "url": "https://api.github.com/repos/rust-lang/rust/commits/933103190950c97b966e789e9206bff2f7bd6118", "html_url": "https://github.com/rust-lang/rust/commit/933103190950c97b966e789e9206bff2f7bd6118"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "9cce13d84ccc7b6de19999400ae50e7001d48e24", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -1790,6 +1790,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n+ \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "3e15af7558da261b84f18ca1156deb32656fd717", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -12,3 +12,4 @@ crate-type = [\"dylib\"]\n serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+unicode-width = \"0.1.4\""}, {"sha": "af556c576c0350e660805bb88229669d786d1491", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -23,6 +23,7 @@ use std::rc::Rc;\n use term;\n use std::collections::HashMap;\n use std::cmp::min;\n+use unicode_width;\n \n /// Emitter trait for emitting errors.\n pub trait Emitter {\n@@ -1182,7 +1183,10 @@ impl EmitterWriter {\n                 if show_underline {\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n                     let start = parts[0].snippet.len() - parts[0].snippet.trim_left().len();\n-                    let sub_len = parts[0].snippet.trim().len();\n+                    // account for substitutions containing unicode characters\n+                    let sub_len = parts[0].snippet.trim().chars().fold(0, |acc, ch| {\n+                        acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                    });\n                     let underline_start = span_start_pos.col.0 + start;\n                     let underline_end = span_start_pos.col.0 + start + sub_len;\n                     for p in underline_start..underline_end {"}, {"sha": "840346c447b8ba9311b33b4eb0bc803ff23d5a70", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -26,6 +26,7 @@ extern crate libc;\n extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n extern crate syntax_pos;\n+extern crate unicode_width;\n \n pub use emitter::ColorConfig;\n "}, {"sha": "1e84fb98a66f15fff8dc3edc4592c6db599f3a24", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -1306,8 +1306,34 @@ impl<'a> StringReader<'a> {\n                                                    '\\'');\n \n                 if !self.ch_is('\\'') {\n+                    let pos = self.pos;\n+                    loop {\n+                        self.bump();\n+                        if self.ch_is('\\'') {\n+                            let start = self.byte_offset(start).to_usize();\n+                            let end = self.byte_offset(self.pos).to_usize();\n+                            self.bump();\n+                            let span = self.mk_sp(start_with_quote, self.pos);\n+                            self.sess.span_diagnostic\n+                                .struct_span_err(span,\n+                                                 \"character literal may only contain one codepoint\")\n+                                .span_suggestion(span,\n+                                                 \"if you meant to write a `str` literal, \\\n+                                                  use double quotes\",\n+                                                 format!(\"\\\"{}\\\"\",\n+                                                         &self.source_text[start..end]))\n+                                .emit();\n+                            return Ok(token::Literal(token::Str_(Symbol::intern(\"??\")), None))\n+                        }\n+                        if self.ch_is('\\n') || self.is_eof() || self.ch_is('/') {\n+                            // Only attempt to infer single line string literals. If we encounter\n+                            // a slash, bail out in order to avoid nonsensical suggestion when\n+                            // involving comments.\n+                            break;\n+                        }\n+                    }\n                     panic!(self.fatal_span_verbose(\n-                           start_with_quote, self.pos,\n+                           start_with_quote, pos,\n                            String::from(\"character literal may only contain one codepoint\")));\n                 }\n "}, {"sha": "464e75ec58231a25b02bbb131afc3da70d4de099", "filename": "src/test/parse-fail/lex-bad-char-literals-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-3.rs?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -12,5 +12,5 @@\n \n // This test needs to the last one appearing in this file as it kills the parser\n static c: char =\n-    '\u25cf\u25cf' //~ ERROR: character literal may only contain one codepoint: '\u25cf\n+    '\u25cf\u25cf' //~ ERROR: character literal may only contain one codepoint\n ;"}, {"sha": "aa166881d89d5a97845b7fe3e1988cf5c38c6f40", "filename": "src/test/parse-fail/lex-bad-char-literals-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-5.rs?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -12,5 +12,5 @@\n //\n // This test needs to the last one appearing in this file as it kills the parser\n static c: char =\n-    '\\x10\\x10'  //~ ERROR: character literal may only contain one codepoint: '\\x10\n+    '\\x10\\x10'  //~ ERROR: character literal may only contain one codepoint\n ;"}, {"sha": "09aca61147df0f791b760f86dbf9a4e432f956c4", "filename": "src/test/ui/suggestions/str-as-char.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.rs?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!('\u25cf\u25cf');\n+    //~^ ERROR character literal may only contain one codepoint\n+}"}, {"sha": "bf975053ffafd28a19241500974ea9379e62a7b1", "filename": "src/test/ui/suggestions/str-as-char.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c60aab29f1a84b799d4b2a27ed26eeda29438eda/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr?ref=c60aab29f1a84b799d4b2a27ed26eeda29438eda", "patch": "@@ -0,0 +1,12 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/str-as-char.rs:12:14\n+   |\n+12 |     println!('\u25cf\u25cf');\n+   |              ^^^^\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+12 |     println!(\"\u25cf\u25cf\");\n+   |              ^^^^\n+\n+error: aborting due to previous error\n+"}]}