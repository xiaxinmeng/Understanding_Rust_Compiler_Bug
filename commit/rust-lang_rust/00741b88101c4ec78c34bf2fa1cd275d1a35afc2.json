{"sha": "00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzQxYjg4MTAxYzRlYzc4YzM0YmYyZmExY2QyNzVkMWEzNWFmYzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-30T13:49:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T13:49:17Z"}, "message": "Rollup merge of #80260 - RalfJung:less-untyped-panics, r=m-ou-se\n\nslightly more typed interface to panic implementation\n\nThe panic payload is currently being passed around as a `usize`. However, it actually is a pointer, and the involved types are available on all ends of this API, so I propose we use the proper pointer type to avoid some casts. Avoiding int-to-ptr casts also makes this code work with `miri -Zmiri-track-raw-pointers`.", "tree": {"sha": "b1771f1b80c810f1f401210990af2c529e89bb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1771f1b80c810f1f401210990af2c529e89bb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7IVdCRBK7hj4Ov3rIwAAdHIIAIuR3F8qeaXymI4gaXC4+gKS\niEDT4enDufjUu70Rf5fiUooXwW/7ODuskQv2xCpL+vgnk4cAlytHIMNjrX8HuQlN\n2fgzdkuO5qXSuCAcB1RfPFe83uH9rGy47ypDSyjq+dPRZQz9dmky6Qqktww+KoFy\nfyOBDv0LuP/oUWQc9yaq5pHaT4rwQ/yDCggry4Q937i1QxCbAipow3sbf7mcHDI6\nJdbw6oY8M/i8PXLn05iRzIgJ7cCqF6Mp10aIQE3vDCE5mX4nStaNzIK1edLQjDev\n+pgVef3F7zkADtO2IaGYJPoVleUrbcam7su8mYkOCGM/2VfJtT5wBHjQzbOZfNs=\n=fq+8\n-----END PGP SIGNATURE-----\n", "payload": "tree b1771f1b80c810f1f401210990af2c529e89bb8f\nparent 1caa5b00d5ec25db3888e0010663a0a053ef2e20\nparent 1600f7d693c5fba1b279f8d96ec714c897e21799\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609336157 +0900\ncommitter GitHub <noreply@github.com> 1609336157 +0900\n\nRollup merge of #80260 - RalfJung:less-untyped-panics, r=m-ou-se\n\nslightly more typed interface to panic implementation\n\nThe panic payload is currently being passed around as a `usize`. However, it actually is a pointer, and the involved types are available on all ends of this API, so I propose we use the proper pointer type to avoid some casts. Avoiding int-to-ptr casts also makes this code work with `miri -Zmiri-track-raw-pointers`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "html_url": "https://github.com/rust-lang/rust/commit/00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1caa5b00d5ec25db3888e0010663a0a053ef2e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/1caa5b00d5ec25db3888e0010663a0a053ef2e20", "html_url": "https://github.com/rust-lang/rust/commit/1caa5b00d5ec25db3888e0010663a0a053ef2e20"}, {"sha": "1600f7d693c5fba1b279f8d96ec714c897e21799", "url": "https://api.github.com/repos/rust-lang/rust/commits/1600f7d693c5fba1b279f8d96ec714c897e21799", "html_url": "https://github.com/rust-lang/rust/commit/1600f7d693c5fba1b279f8d96ec714c897e21799"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "eb2277d8baacde22ad18f6c83d881a11773b5432", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "patch": "@@ -14,11 +14,13 @@\n #![feature(core_intrinsics)]\n #![feature(nll)]\n #![feature(panic_runtime)]\n+#![feature(std_internals)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n #![feature(asm)]\n \n use core::any::Any;\n+use core::panic::BoxMeUp;\n \n #[rustc_std_internal_symbol]\n #[allow(improper_ctypes_definitions)]\n@@ -28,7 +30,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n \n // \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n+pub unsafe extern \"C\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n     abort();\n \n     cfg_if::cfg_if! {"}, {"sha": "9ce9c477ec0f0ae18f8722fb6062ab0d1d936b6d", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "patch": "@@ -104,9 +104,8 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any\n // implementation.\n #[rustc_std_internal_symbol]\n #[unwind(allowed)]\n-pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n-    let payload = payload as *mut &mut dyn BoxMeUp;\n-    let payload = (*payload).take_box();\n+pub unsafe extern \"C\" fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n+    let payload = Box::from_raw((*payload).take_box());\n \n-    imp::panic(Box::from_raw(payload))\n+    imp::panic(payload)\n }"}, {"sha": "6cd572cbe87c131b661d56d7483d62df2e2c551e", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00741b88101c4ec78c34bf2fa1cd275d1a35afc2/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=00741b88101c4ec78c34bf2fa1cd275d1a35afc2", "patch": "@@ -44,11 +44,11 @@ use realstd::io::set_output_capture;\n extern \"C\" {\n     fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static);\n \n-    /// `payload` is actually a `*mut &mut dyn BoxMeUp` but that would cause FFI warnings.\n-    /// It cannot be `Box<dyn BoxMeUp>` because the other end of this call does not depend\n-    /// on liballoc, and thus cannot use `Box`.\n+    /// `payload` is passed through another layer of raw pointers as `&mut dyn Trait` is not\n+    /// FFI-safe. `BoxMeUp` lazily performs allocation only when needed (this avoids allocations\n+    /// when using the \"abort\" panic runtime).\n     #[unwind(allowed)]\n-    fn __rust_start_panic(payload: usize) -> u32;\n+    fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32;\n }\n \n /// This function is called by the panic runtime if FFI code catches a Rust\n@@ -637,7 +637,7 @@ pub fn rust_panic_without_hook(payload: Box<dyn Any + Send>) -> ! {\n fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n     let code = unsafe {\n         let obj = &mut msg as *mut &mut dyn BoxMeUp;\n-        __rust_start_panic(obj as usize)\n+        __rust_start_panic(obj)\n     };\n     rtabort!(\"failed to initiate panic, error {}\", code)\n }"}]}