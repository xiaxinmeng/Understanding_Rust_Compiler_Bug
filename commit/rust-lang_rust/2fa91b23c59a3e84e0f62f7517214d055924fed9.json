{"sha": "2fa91b23c59a3e84e0f62f7517214d055924fed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTkxYjIzYzU5YTNlODRlMGY2MmY3NTE3MjE0ZDA1NTkyNGZlZDk=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-09-26T23:05:46Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-09-26T23:05:46Z"}, "message": "Update E0425, E0446, E0449", "tree": {"sha": "46c0563ed3a73c08394b2a21dd7c96fc72339887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c0563ed3a73c08394b2a21dd7c96fc72339887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa91b23c59a3e84e0f62f7517214d055924fed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa91b23c59a3e84e0f62f7517214d055924fed9", "html_url": "https://github.com/rust-lang/rust/commit/2fa91b23c59a3e84e0f62f7517214d055924fed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa91b23c59a3e84e0f62f7517214d055924fed9/comments", "author": null, "committer": null, "parents": [{"sha": "8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1", "html_url": "https://github.com/rust-lang/rust/commit/8ccfc695b56c102a2e7e95719b398bfa0a5e8af1"}], "stats": {"total": 142, "additions": 107, "deletions": 35}, "files": [{"sha": "5096a574e2ba59419b06b6b14c86b9bc6119e1c9", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -53,8 +53,11 @@ impl<'a> AstValidator<'a> {\n                                            span,\n                                            E0449,\n                                            \"unnecessary visibility qualifier\");\n+            if vis == &Visibility::Public {\n+                err.span_label(span, &format!(\"`pub` not needed here\"));\n+            }\n             if let Some(note) = note {\n-                err.span_note(span, note);\n+                err.note(note);\n             }\n             err.emit();\n         }"}, {"sha": "b214608fbe9c96a432bbedc6b81d745e16c2f7a6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -972,8 +972,10 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                         if !vis.is_at_least(self.required_visibility, &self.tcx.map) {\n                             if self.tcx.sess.features.borrow().pub_restricted ||\n                                self.old_error_set.contains(&ty.id) {\n-                                span_err!(self.tcx.sess, ty.span, E0446,\n+                                let mut err = struct_span_err!(self.tcx.sess, ty.span, E0446,\n                                           \"private type in public interface\");\n+                                err.span_label(ty.span, &format!(\"private type can't be public\"));\n+                                err.emit();\n                             } else {\n                                 self.tcx.sess.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n                                                        node_id,"}, {"sha": "38b31db6781431723bd95589e7760d5bf89b37c3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -366,9 +366,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0425,\n-                                           \"unresolved name `{}`{}\",\n-                                           path,\n-                                           msg);\n+                                           \"unresolved name `{}`\",\n+                                           path);\n+            if msg != \"\" {\n+                err.span_label(span, &msg);\n+            } else {\n+                err.span_label(span, &format!(\"unresolved name\"));\n+            }\n+\n             match context {\n                 UnresolvedNameContext::Other => {\n                     if msg.is_empty() && is_static_method && is_field {\n@@ -2941,7 +2946,7 @@ impl<'a> Resolver<'a> {\n                                 let mut context =  UnresolvedNameContext::Other;\n                                 let mut def = Def::Err;\n                                 if !msg.is_empty() {\n-                                    msg = format!(\". Did you mean {}?\", msg);\n+                                    msg = format!(\"did you mean {}?\", msg);\n                                 } else {\n                                     // we display a help message if this is a module\n                                     let name_path = path.segments.iter()"}, {"sha": "44f73e10e25d3d93c39c93593cefa774231b3cd9", "filename": "src/test/compile-fail/E0033.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0033.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -15,6 +15,7 @@ trait SomeTrait {\n fn main() {\n     let trait_obj: &SomeTrait = SomeTrait;\n     //~^ ERROR E0425\n+    //~| NOTE unresolved name\n     //~| ERROR E0038\n     //~| method `foo` has no receiver\n     //~| NOTE the trait `SomeTrait` cannot be made into an object"}, {"sha": "fe8a50bc618eddc1ce1ff63c67cdc6638b944f39", "filename": "src/test/compile-fail/E0446.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2FE0446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2FE0446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0446.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -12,6 +12,7 @@ mod Foo {\n     struct Bar(u32);\n \n     pub fn bar() -> Bar { //~ ERROR E0446\n+                          //~| NOTE private type can't be public\n         Bar(0)\n     }\n }"}, {"sha": "0b3fdb9e6abe69ba77e1109f5b94cdb4e870cd90", "filename": "src/test/compile-fail/E0449.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2FE0449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2FE0449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0449.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -15,9 +15,13 @@ trait Foo {\n }\n \n pub impl Bar {} //~ ERROR E0449\n+                //~| NOTE `pub` not needed here\n+                //~| NOTE place qualifiers on individual impl items instead\n \n pub impl Foo for Bar { //~ ERROR E0449\n+                       //~| NOTE `pub` not needed here\n     pub fn foo() {} //~ ERROR E0449\n+                    //~| NOTE `pub` not needed here\n }\n \n fn main() {"}, {"sha": "c18a318347745600c237235760541766f8d37454", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name `m1::arguments`. Did you mean `arguments`?\n+// error-pattern: unresolved name `m1::arguments`\n \n mod m1 {}\n "}, {"sha": "e1c1afb0049d74d76286a70842848124448f4ddb", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name `m1::arguments`. Did you mean `arguments`?\n+// error-pattern: unresolved name `m1::arguments`\n \n mod m1 {\n     pub mod arguments {}"}, {"sha": "c7bd343bc9a33aef72a3c784702b892bfb98472b", "filename": "src/test/compile-fail/issue-14254.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -27,87 +27,111 @@ impl BarTy {\n impl Foo for *const BarTy {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         a;\n         //~^ ERROR: unresolved name `a`\n+        //~| NOTE unresolved name\n     }\n }\n \n impl<'a> Foo for &'a BarTy {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         x;\n-        //~^ ERROR: unresolved name `x`. Did you mean `self.x`?\n+        //~^ ERROR: unresolved name `x`\n+        //~| NOTE did you mean `self.x`?\n         y;\n-        //~^ ERROR: unresolved name `y`. Did you mean `self.y`?\n+        //~^ ERROR: unresolved name `y`\n+        //~| NOTE did you mean `self.y`?\n         a;\n         //~^ ERROR: unresolved name `a`\n+        //~| NOTE unresolved name\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n         b;\n         //~^ ERROR: unresolved name `b`\n+        //~| NOTE unresolved name\n     }\n }\n \n impl<'a> Foo for &'a mut BarTy {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         x;\n-        //~^ ERROR: unresolved name `x`. Did you mean `self.x`?\n+        //~^ ERROR: unresolved name `x`\n+        //~| NOTE did you mean `self.x`?\n         y;\n-        //~^ ERROR: unresolved name `y`. Did you mean `self.y`?\n+        //~^ ERROR: unresolved name `y`\n+        //~| NOTE did you mean `self.y`?\n         a;\n         //~^ ERROR: unresolved name `a`\n+        //~| NOTE unresolved name\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n         b;\n         //~^ ERROR: unresolved name `b`\n+        //~| NOTE unresolved name\n     }\n }\n \n impl Foo for Box<BarTy> {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n     }\n }\n \n impl Foo for *const isize {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n     }\n }\n \n impl<'a> Foo for &'a isize {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n     }\n }\n \n impl<'a> Foo for &'a mut isize {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n     }\n }\n \n impl Foo for Box<isize> {\n     fn bar(&self) {\n         baz();\n-        //~^ ERROR: unresolved name `baz`. Did you mean to call `self.baz`?\n+        //~^ ERROR: unresolved name `baz`\n+        //~| NOTE did you mean to call `self.baz`?\n         bah;\n-        //~^ ERROR: unresolved name `bah`. Did you mean to call `Foo::bah`?\n+        //~^ ERROR: unresolved name `bah`\n+        //~| NOTE did you mean to call `Foo::bah`?\n     }\n }"}, {"sha": "d7635d7bc9473fc1b482e2d9b2c418cfba30eb73", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -26,18 +26,22 @@ impl MaybeDog {\n     // If this provides a suggestion, it's a bug as MaybeDog doesn't impl Groom\n     shave();\n     //~^ ERROR: unresolved name `shave`\n+    //~| NOTE unresolved name\n   }\n }\n \n impl Groom for cat {\n   fn shave(other: usize) {\n     whiskers -= other;\n     //~^ ERROR: unresolved name `whiskers`\n+    //~| NOTE unresolved name\n     //~| HELP this is an associated function\n     shave(4);\n-    //~^ ERROR: unresolved name `shave`. Did you mean to call `Groom::shave`?\n+    //~^ ERROR: unresolved name `shave`\n+    //~| NOTE did you mean to call `Groom::shave`?\n     purr();\n     //~^ ERROR: unresolved name `purr`\n+    //~| NOTE unresolved name\n   }\n }\n \n@@ -47,12 +51,16 @@ impl cat {\n     fn purr_louder() {\n         static_method();\n         //~^ ERROR: unresolved name `static_method`\n+        //~| NOTE unresolved name\n         purr();\n         //~^ ERROR: unresolved name `purr`\n+        //~| NOTE unresolved name\n         purr();\n         //~^ ERROR: unresolved name `purr`\n+        //~| NOTE unresolved name\n         purr();\n         //~^ ERROR: unresolved name `purr`\n+        //~| NOTE unresolved name\n     }\n }\n \n@@ -69,27 +77,33 @@ impl cat {\n   fn purr(&self) {\n     grow_older();\n     //~^ ERROR: unresolved name `grow_older`\n+    //~| NOTE unresolved name\n     shave();\n     //~^ ERROR: unresolved name `shave`\n+    //~| NOTE unresolved name\n   }\n \n   fn burn_whiskers(&mut self) {\n     whiskers = 0;\n-    //~^ ERROR: unresolved name `whiskers`. Did you mean `self.whiskers`?\n+    //~^ ERROR: unresolved name `whiskers`\n+    //~| NOTE did you mean `self.whiskers`?\n   }\n \n   pub fn grow_older(other:usize) {\n     whiskers = 4;\n     //~^ ERROR: unresolved name `whiskers`\n+    //~| NOTE unresolved name\n     //~| HELP this is an associated function\n     purr_louder();\n     //~^ ERROR: unresolved name `purr_louder`\n+    //~| NOTE unresolved name\n   }\n }\n \n fn main() {\n     self += 1;\n     //~^ ERROR: unresolved name `self`\n+    //~| NOTE unresolved name\n     //~| HELP: module `self`\n     // it's a bug if this suggests a missing `self` as we're not in a method\n }"}, {"sha": "edaab012757126ac17af640cc6024e7d1dd658e0", "filename": "src/test/compile-fail/resolve-hint-macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fresolve-hint-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Fresolve-hint-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-hint-macro.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    assert(true); //~ERROR unresolved name `assert`. Did you mean the macro `assert!`?\n+    assert(true);\n+    //~^ ERROR unresolved name `assert`\n+    //~| NOTE did you mean the macro `assert!`?\n }"}, {"sha": "151c1d432ed364715a31e02ea94169b40e46f217", "filename": "src/test/compile-fail/token-error-correct-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-2.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -13,5 +13,6 @@\n fn main() {\n     if foo { //~ NOTE: unclosed delimiter\n     //~^ ERROR: unresolved name `foo`\n+    //~| NOTE unresolved name\n     ) //~ ERROR: incorrect close delimiter: `)`\n }"}, {"sha": "5f21bf18d7b1bfd6e5356d2d14c8de7a58775e8f", "filename": "src/test/compile-fail/token-error-correct-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-3.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -19,6 +19,7 @@ pub mod raw {\n                                                                callback: F)\n                                                                -> io::Result<bool> {\n         if !is_directory(path.as_ref()) { //~ ERROR: unresolved name `is_directory`\n+                                          //~| NOTE unresolved name\n             callback(path.as_ref();  //~ NOTE: unclosed delimiter\n                      //~^ ERROR: expected one of\n             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types"}, {"sha": "3ba9edda07f266a5b28385d1ddcb6f6887c329b7", "filename": "src/test/compile-fail/token-error-correct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -17,6 +17,8 @@ fn main() {\n     //~^^^ ERROR: unresolved name `bar`\n     //~^^^^ ERROR: unresolved name `foo`\n     //~^^^^^ ERROR: expected one of `)`, `,`, `.`, `<`, `?`\n+    //~| NOTE unresolved name\n+    //~| NOTE unresolved name\n } //~ ERROR: incorrect close delimiter: `}`\n //~^ ERROR: incorrect close delimiter: `}`\n //~^^ ERROR: expected expression, found `)`"}, {"sha": "f865f0a5f23cdc4427c610d74a8bd97ec548b5c9", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -2,7 +2,7 @@ error[E0425]: unresolved name `bar`\n   --> $DIR/tab.rs:14:2\n    |\n 14 | \\tbar;\n-   | \\t^^^\n+   | \\t^^^ unresolved name\n \n error: aborting due to previous error\n "}, {"sha": "1c7fac894f976cf2468dbedf5e2aa9c147e1625d", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -2,7 +2,7 @@ error[E0425]: unresolved name `fake`\n   --> $DIR/macro-backtrace-nested.rs:15:12\n    |\n 15 |     () => (fake)\n-   |            ^^^^\n+   |            ^^^^ unresolved name\n ...\n 27 |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n@@ -11,7 +11,7 @@ error[E0425]: unresolved name `fake`\n   --> $DIR/macro-backtrace-nested.rs:15:12\n    |\n 15 |     () => (fake)\n-   |            ^^^^\n+   |            ^^^^ unresolved name\n ...\n 28 |     call_nested_expr_sum!();\n    |     ------------------------ in this macro invocation"}, {"sha": "536bf16142b3072318773f2868c625003b1dc695", "filename": "src/test/ui/span/typo-suggestion.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.rs?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -13,9 +13,7 @@ fn main() {\n \n     // `foo` shouldn't be suggested, it is too dissimilar from `bar`.\n     println!(\"Hello {}\", bar);\n-    //~^ ERROR: unresolved name `bar`\n \n     // But this is close enough.\n     println!(\"Hello {}\", fob);\n-    //~^ ERROR: unresolved name `fob`. Did you mean `foo`?\n }", "previous_filename": "src/test/compile-fail/typo-suggestion.rs"}, {"sha": "5446175aa250500bcd957c9de550862f1bcfd1ac", "filename": "src/test/ui/span/typo-suggestion.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fa91b23c59a3e84e0f62f7517214d055924fed9/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr?ref=2fa91b23c59a3e84e0f62f7517214d055924fed9", "patch": "@@ -0,0 +1,14 @@\n+error[E0425]: unresolved name `bar`\n+  --> $DIR/typo-suggestion.rs:15:26\n+   |\n+15 |     println!(\"Hello {}\", bar);\n+   |                          ^^^ unresolved name\n+\n+error[E0425]: unresolved name `fob`\n+  --> $DIR/typo-suggestion.rs:18:26\n+   |\n+18 |     println!(\"Hello {}\", fob);\n+   |                          ^^^ did you mean `foo`?\n+\n+error: aborting due to 2 previous errors\n+"}]}