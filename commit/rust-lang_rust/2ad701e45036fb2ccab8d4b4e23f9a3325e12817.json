{"sha": "2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "node_id": "C_kwDOAAsO6NoAKDJhZDcwMWU0NTAzNmZiMmNjYWI4ZDRiNGUyM2Y5YTMzMjVlMTI4MTc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-11T18:00:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T18:00:40Z"}, "message": "Rollup merge of #95008 - c410-f3r:let-chains-paren, r=wesleywiser\n\n[`let_chains`] Forbid `let` inside parentheses\n\nParenthesizes are mostly a no-op in let chains, in other words, they are mostly ignored.\n\n```rust\nlet opt = Some(Some(1i32));\n\nif (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    println!(\"`b` is declared inside but used outside\");\n}\n```\n\nAs seen above, such behavior can lead to confusion.\n\nA proper fix or nested encapsulation would probably require research, time and a modified MIR graph so in this PR I simply denied any `let` inside parentheses. Non-let stuff are still allowed.\n\n```rust\nfn main() {\n    let fun = || true;\n\n    if let true = (true && fun()) && (true) {\n        println!(\"Allowed\");\n    }\n}\n```\n\nIt is worth noting that `let ...`  is not an expression and the RFC did not mention this specific situation.\n\ncc `@matthewjasper`", "tree": {"sha": "e3d2525106965b176aaecf20ca9fde36e80cc198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d2525106965b176aaecf20ca9fde36e80cc198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVGzICRBK7hj4Ov3rIwAAcUoIAHK6m7e+snbhRCHFnY/NcstR\nKXfILkGGJY9A96NyILJOJ9RZg1UeH49TDekhBEwTtFuOj5cG0ptD6gmeULvg9CTA\nnocSXX+q8+5v2CD4bdVT61RdFVlgoFdH3fFoetwfNGG9CtXG8j0a6j0ScQT3U8BZ\nNYkp9SG/WU5EpnjAlvbQUC6J492tQCMk4urOoacCsRejeh0vJVLYoTdpbNQuO7rS\nv0o+0DeWF0foI3Fi0TgekH4u/rHMaB0ZsOVxbnV4DJ6e2MKPPoARnKj2T1KBm41C\nQfAxQsS27ORIxL27ERCo0U5mwqWoJEeJa4uPDGdDd5Sbs2Ftl/2eCqCf3Abq3Ow=\n=KzQW\n-----END PGP SIGNATURE-----\n", "payload": "tree e3d2525106965b176aaecf20ca9fde36e80cc198\nparent 625e4dd13a3abd0cc59807af66c3c4cd63440852\nparent 6ee3c47a3a41c495fcf52f342fe4253231a257c8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649700040 +0200\ncommitter GitHub <noreply@github.com> 1649700040 +0200\n\nRollup merge of #95008 - c410-f3r:let-chains-paren, r=wesleywiser\n\n[`let_chains`] Forbid `let` inside parentheses\n\nParenthesizes are mostly a no-op in let chains, in other words, they are mostly ignored.\n\n```rust\nlet opt = Some(Some(1i32));\n\nif (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    println!(\"`b` is declared inside but used outside\");\n}\n```\n\nAs seen above, such behavior can lead to confusion.\n\nA proper fix or nested encapsulation would probably require research, time and a modified MIR graph so in this PR I simply denied any `let` inside parentheses. Non-let stuff are still allowed.\n\n```rust\nfn main() {\n    let fun = || true;\n\n    if let true = (true && fun()) && (true) {\n        println!(\"Allowed\");\n    }\n}\n```\n\nIt is worth noting that `let ...`  is not an expression and the RFC did not mention this specific situation.\n\ncc `@matthewjasper`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "html_url": "https://github.com/rust-lang/rust/commit/2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625e4dd13a3abd0cc59807af66c3c4cd63440852", "url": "https://api.github.com/repos/rust-lang/rust/commits/625e4dd13a3abd0cc59807af66c3c4cd63440852", "html_url": "https://github.com/rust-lang/rust/commit/625e4dd13a3abd0cc59807af66c3c4cd63440852"}, {"sha": "6ee3c47a3a41c495fcf52f342fe4253231a257c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee3c47a3a41c495fcf52f342fe4253231a257c8", "html_url": "https://github.com/rust-lang/rust/commit/6ee3c47a3a41c495fcf52f342fe4253231a257c8"}], "stats": {"total": 1224, "additions": 751, "deletions": 473}, "files": [{"sha": "33727084ccf064f5d291934cc5bf062bcd0825fa", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "patch": "@@ -120,12 +120,21 @@ impl<'a> AstValidator<'a> {\n             let err = \"`let` expressions are not supported here\";\n             let mut diag = sess.struct_span_err(expr.span, err);\n             diag.note(\"only supported directly in conditions of `if` and `while` expressions\");\n-            diag.note(\"as well as when nested within `&&` and parentheses in those conditions\");\n-            if let ForbiddenLetReason::ForbiddenWithOr(span) = forbidden_let_reason {\n-                diag.span_note(\n-                    span,\n-                    \"`||` operators are not currently supported in let chain expressions\",\n-                );\n+            match forbidden_let_reason {\n+                ForbiddenLetReason::GenericForbidden => {}\n+                ForbiddenLetReason::NotSupportedOr(span) => {\n+                    diag.span_note(\n+                        span,\n+                        \"`||` operators are not supported in let chain expressions\",\n+                    );\n+                }\n+                ForbiddenLetReason::NotSupportedParentheses(span) => {\n+                    diag.span_note(\n+                        span,\n+                        \"`let`s wrapped in parentheses are not supported in a context with let \\\n+                        chains\",\n+                    );\n+                }\n             }\n             diag.emit();\n         } else {\n@@ -1009,9 +1018,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         self.with_let_management(Some(ForbiddenLetReason::GenericForbidden), |this, forbidden_let_reason| {\n             match &expr.kind {\n                 ExprKind::Binary(Spanned { node: BinOpKind::Or, span }, lhs, rhs) => {\n-                    let forbidden_let_reason = Some(ForbiddenLetReason::ForbiddenWithOr(*span));\n-                    this.with_let_management(forbidden_let_reason, |this, _| this.visit_expr(lhs));\n-                    this.with_let_management(forbidden_let_reason, |this, _| this.visit_expr(rhs));\n+                    let local_reason = Some(ForbiddenLetReason::NotSupportedOr(*span));\n+                    this.with_let_management(local_reason, |this, _| this.visit_expr(lhs));\n+                    this.with_let_management(local_reason, |this, _| this.visit_expr(rhs));\n                 }\n                 ExprKind::If(cond, then, opt_else) => {\n                     this.visit_block(then);\n@@ -1036,7 +1045,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         }\n                     }\n                 }\n-                ExprKind::Paren(_) | ExprKind::Binary(Spanned { node: BinOpKind::And, .. }, ..) => {\n+                ExprKind::Paren(local_expr) => {\n+                    fn has_let_expr(expr: &Expr) -> bool {\n+                        match expr.kind {\n+                            ExprKind::Binary(_, ref lhs, ref rhs) => has_let_expr(lhs) || has_let_expr(rhs),\n+                            ExprKind::Let(..) => true,\n+                            _ => false,\n+                        }\n+                    }\n+                    let local_reason = if has_let_expr(local_expr) {\n+                        Some(ForbiddenLetReason::NotSupportedParentheses(local_expr.span))\n+                    }\n+                    else {\n+                        forbidden_let_reason\n+                    };\n+                    this.with_let_management(local_reason, |this, _| this.visit_expr(local_expr));\n+                }\n+                ExprKind::Binary(Spanned { node: BinOpKind::And, .. }, ..) => {\n                     this.with_let_management(forbidden_let_reason, |this, _| visit::walk_expr(this, expr));\n                     return;\n                 }\n@@ -1810,8 +1835,13 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n /// Used to forbid `let` expressions in certain syntactic locations.\n #[derive(Clone, Copy)]\n enum ForbiddenLetReason {\n-    /// A let chain with the `||` operator\n-    ForbiddenWithOr(Span),\n     /// `let` is not valid and the source environment is not important\n     GenericForbidden,\n+    /// A let chain with the `||` operator\n+    NotSupportedOr(Span),\n+    /// A let chain with invalid parentheses\n+    ///\n+    /// For exemple, `let 1 = 1 && (expr && expr)` is allowed\n+    /// but `(let 1 = 1 && (let 1 = 1 && (let 1 = 1))) && let a = 1` is not\n+    NotSupportedParentheses(Span),\n }"}, {"sha": "1bd8b74240eacb81972422f2cdf9be59708b7b0c", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "patch": "@@ -25,6 +25,67 @@ use std::ops::Range;\n \n fn main() {}\n \n+fn _if() {\n+    if (let 0 = 1) {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    if (((let 0 = 1))) {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    if (let 0 = 1) && true {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    if true && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    if (let 0 = 1) && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+\n+    if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+}\n+\n+fn _while() {\n+    while (let 0 = 1) {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    while (((let 0 = 1))) {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    while (let 0 = 1) && true {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    while true && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions are not supported here\n+\n+    while (let 0 = 1) && (let 0 = 1) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+\n+    while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+}\n+\n+fn _macros() {\n+    macro_rules! use_expr {\n+        ($e:expr) => {\n+            if $e {}\n+            while $e {}\n+        }\n+    }\n+    use_expr!((let 0 = 1 && 0 == 0));\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    use_expr!((let 0 = 1));\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+}\n+\n fn nested_within_if_expr() {\n     if &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n     //~^ ERROR mismatched types\n@@ -234,3 +295,44 @@ fn inside_const_generic_arguments() {\n         //~| ERROR  expressions must be enclosed in braces\n     >::O == 5 {}\n }\n+\n+fn with_parenthesis() {\n+    let opt = Some(Some(1i32));\n+\n+    if (let Some(a) = opt && true) {\n+    //~^ ERROR `let` expressions are not supported here\n+    }\n+\n+    if (let Some(a) = opt) && true {\n+    //~^ ERROR `let` expressions are not supported here\n+    }\n+    if (let Some(a) = opt) && (let Some(b) = a) {\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    }\n+    if let Some(a) = opt && (true && true) {\n+    }\n+\n+    if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    }\n+    if (let Some(a) = opt && (let Some(b) = a)) && true {\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR `let` expressions are not supported here\n+    }\n+    if (let Some(a) = opt && (true)) && true {\n+    //~^ ERROR `let` expressions are not supported here\n+    }\n+\n+    if (true && (true)) && let Some(a) = opt {\n+    }\n+    if (true) && let Some(a) = opt {\n+    }\n+    if true && let Some(a) = opt {\n+    }\n+\n+    let fun = || true;\n+    if let true = (true && fun()) && (true) {\n+    }\n+}"}, {"sha": "00da9d2605765c187873a4c52e2ffc0eb029b113", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 597, "deletions": 184, "changes": 781, "blob_url": "https://github.com/rust-lang/rust/blob/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:232:9\n+  --> $DIR/disallowed-positions.rs:293:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -12,555 +12,968 @@ LL |         { true && let 1 = 1 }\n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:29:9\n    |\n+LL |     if (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:29:9\n+   |\n+LL |     if (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:32:11\n+   |\n+LL |     if (((let 0 = 1))) {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:32:11\n+   |\n+LL |     if (((let 0 = 1))) {}\n+   |           ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:35:9\n+   |\n+LL |     if (let 0 = 1) && true {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:35:9\n+   |\n+LL |     if (let 0 = 1) && true {}\n+   |         ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:38:17\n+   |\n+LL |     if true && (let 0 = 1) {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:38:17\n+   |\n+LL |     if true && (let 0 = 1) {}\n+   |                 ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:41:9\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:41:9\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |         ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:41:24\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:41:24\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |                        ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:45:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:45:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:45:48\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:45:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:45:61\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                             ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:45:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:52:12\n+   |\n+LL |     while (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:52:12\n+   |\n+LL |     while (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:55:14\n+   |\n+LL |     while (((let 0 = 1))) {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:55:14\n+   |\n+LL |     while (((let 0 = 1))) {}\n+   |              ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:58:12\n+   |\n+LL |     while (let 0 = 1) && true {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:58:12\n+   |\n+LL |     while (let 0 = 1) && true {}\n+   |            ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:61:20\n+   |\n+LL |     while true && (let 0 = 1) {}\n+   |                    ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:61:20\n+   |\n+LL |     while true && (let 0 = 1) {}\n+   |                    ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:64:12\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:64:12\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |            ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:64:27\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |                           ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:64:27\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |                           ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:68:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:68:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:68:51\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                   ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:68:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:68:64\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                                                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:68:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:81:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:81:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:81:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:81:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:84:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:84:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:84:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:84:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:90:9\n+   |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:32:9\n+  --> $DIR/disallowed-positions.rs:93:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:33:9\n+  --> $DIR/disallowed-positions.rs:94:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:96:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:43:9\n+  --> $DIR/disallowed-positions.rs:104:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:104:9\n+   |\n+LL |     if (let 0 = 0)? {}\n+   |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:47:16\n+  --> $DIR/disallowed-positions.rs:108:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:47:13\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:108:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:48:17\n+  --> $DIR/disallowed-positions.rs:109:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:48:14\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:109:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:49:25\n+  --> $DIR/disallowed-positions.rs:110:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:49:22\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:110:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:50:25\n+  --> $DIR/disallowed-positions.rs:111:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:50:13\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:111:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n-   |             ^^\n+   |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:53:12\n+  --> $DIR/disallowed-positions.rs:114:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:56:15\n+  --> $DIR/disallowed-positions.rs:117:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:117:15\n+   |\n+LL |     if true..(let 0 = 0) {}\n+   |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:58:11\n+  --> $DIR/disallowed-positions.rs:119:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:119:11\n+   |\n+LL |     if ..(let 0 = 0) {}\n+   |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:60:9\n+  --> $DIR/disallowed-positions.rs:121:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:121:9\n+   |\n+LL |     if (let 0 = 0).. {}\n+   |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:64:8\n+  --> $DIR/disallowed-positions.rs:125:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:8\n+  --> $DIR/disallowed-positions.rs:129:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:75:8\n+  --> $DIR/disallowed-positions.rs:136:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:83:8\n+  --> $DIR/disallowed-positions.rs:144:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:89:19\n+  --> $DIR/disallowed-positions.rs:150:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:93:12\n+  --> $DIR/disallowed-positions.rs:154:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:96:12\n+  --> $DIR/disallowed-positions.rs:157:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:12\n+  --> $DIR/disallowed-positions.rs:158:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:99:12\n+  --> $DIR/disallowed-positions.rs:160:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:107:12\n+  --> $DIR/disallowed-positions.rs:168:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:168:12\n+   |\n+LL |     while (let 0 = 0)? {}\n+   |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:111:19\n+  --> $DIR/disallowed-positions.rs:172:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:111:16\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:172:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:112:20\n+  --> $DIR/disallowed-positions.rs:173:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:112:17\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:173:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:113:28\n+  --> $DIR/disallowed-positions.rs:174:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:113:25\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:174:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:28\n+  --> $DIR/disallowed-positions.rs:175:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:114:16\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:175:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n-   |                ^^\n+   |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:117:15\n+  --> $DIR/disallowed-positions.rs:178:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:120:18\n+  --> $DIR/disallowed-positions.rs:181:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:181:18\n+   |\n+LL |     while true..(let 0 = 0) {}\n+   |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:122:14\n+  --> $DIR/disallowed-positions.rs:183:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:183:14\n+   |\n+LL |     while ..(let 0 = 0) {}\n+   |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:124:12\n+  --> $DIR/disallowed-positions.rs:185:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:185:12\n+   |\n+LL |     while (let 0 = 0).. {}\n+   |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:128:11\n+  --> $DIR/disallowed-positions.rs:189:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:132:11\n+  --> $DIR/disallowed-positions.rs:193:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:139:11\n+  --> $DIR/disallowed-positions.rs:200:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:147:11\n+  --> $DIR/disallowed-positions.rs:208:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:153:22\n+  --> $DIR/disallowed-positions.rs:214:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:167:6\n+  --> $DIR/disallowed-positions.rs:228:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:169:6\n+  --> $DIR/disallowed-positions.rs:230:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:170:6\n+  --> $DIR/disallowed-positions.rs:231:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:172:6\n+  --> $DIR/disallowed-positions.rs:233:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:180:6\n+  --> $DIR/disallowed-positions.rs:241:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:241:6\n+   |\n+LL |     (let 0 = 0)?;\n+   |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:184:13\n+  --> $DIR/disallowed-positions.rs:245:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:184:10\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:245:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:185:14\n+  --> $DIR/disallowed-positions.rs:246:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:185:11\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:246:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:186:22\n+  --> $DIR/disallowed-positions.rs:247:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not currently supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:186:19\n+note: `||` operators are not supported in let chain expressions\n+  --> $DIR/disallowed-positions.rs:247:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:189:9\n+  --> $DIR/disallowed-positions.rs:250:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:191:12\n+  --> $DIR/disallowed-positions.rs:252:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:252:12\n+   |\n+LL |     true..(let 0 = 0);\n+   |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:192:8\n+  --> $DIR/disallowed-positions.rs:253:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:253:8\n+   |\n+LL |     ..(let 0 = 0);\n+   |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:193:6\n+  --> $DIR/disallowed-positions.rs:254:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:254:6\n+   |\n+LL |     (let 0 = 0)..;\n+   |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:195:6\n+  --> $DIR/disallowed-positions.rs:256:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:199:6\n+  --> $DIR/disallowed-positions.rs:260:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:260:6\n+   |\n+LL |     (let true = let true = true);\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:203:6\n+  --> $DIR/disallowed-positions.rs:264:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:214:17\n+  --> $DIR/disallowed-positions.rs:275:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:218:17\n+  --> $DIR/disallowed-positions.rs:279:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:222:17\n+  --> $DIR/disallowed-positions.rs:283:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:232:17\n+  --> $DIR/disallowed-positions.rs:293:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:302:9\n+   |\n+LL |     if (let Some(a) = opt && true) {\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:302:9\n+   |\n+LL |     if (let Some(a) = opt && true) {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:306:9\n+   |\n+LL |     if (let Some(a) = opt) && true {\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:306:9\n+   |\n+LL |     if (let Some(a) = opt) && true {\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:309:9\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:309:9\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:309:32\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |                                ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:309:32\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |                                ^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:316:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:316:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:316:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |                               ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:316:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |                               ^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:320:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:320:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:320:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |                               ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:320:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |                               ^^^^^^^^^^^^^^^\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/disallowed-positions.rs:324:9\n+   |\n+LL |     if (let Some(a) = opt && (true)) && true {\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+note: `let`s wrapped in parentheses are not supported in a context with let chains\n+  --> $DIR/disallowed-positions.rs:324:9\n+   |\n+LL |     if (let Some(a) = opt && (true)) && true {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:29:8\n+  --> $DIR/disallowed-positions.rs:90:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -572,27 +985,27 @@ LL +     if let 0 = 0 {}\n    | \n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:33:8\n+  --> $DIR/disallowed-positions.rs:94:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:35:8\n+  --> $DIR/disallowed-positions.rs:96:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:43:8\n+  --> $DIR/disallowed-positions.rs:104:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:43:19\n+  --> $DIR/disallowed-positions.rs:104:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -609,7 +1022,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:53:8\n+  --> $DIR/disallowed-positions.rs:114:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -620,7 +1033,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:56:8\n+  --> $DIR/disallowed-positions.rs:117:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -629,7 +1042,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:58:8\n+  --> $DIR/disallowed-positions.rs:119:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -638,7 +1051,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:60:8\n+  --> $DIR/disallowed-positions.rs:121:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -647,7 +1060,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:64:12\n+  --> $DIR/disallowed-positions.rs:125:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -658,7 +1071,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:64:8\n+  --> $DIR/disallowed-positions.rs:125:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -667,7 +1080,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:68:12\n+  --> $DIR/disallowed-positions.rs:129:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -678,7 +1091,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:68:8\n+  --> $DIR/disallowed-positions.rs:129:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -687,7 +1100,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:136:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -698,16 +1111,16 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:75:41\n+  --> $DIR/disallowed-positions.rs:136:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:75:41: 75:48]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:136:41: 136:48]`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:75:8\n+  --> $DIR/disallowed-positions.rs:136:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -716,7 +1129,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:83:12\n+  --> $DIR/disallowed-positions.rs:144:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -727,7 +1140,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:83:44\n+  --> $DIR/disallowed-positions.rs:144:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -739,7 +1152,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    | \n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:83:8\n+  --> $DIR/disallowed-positions.rs:144:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -748,15 +1161,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:39:20\n+  --> $DIR/disallowed-positions.rs:100:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:93:11\n+  --> $DIR/disallowed-positions.rs:154:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -768,27 +1181,27 @@ LL +     while let 0 = 0 {}\n    | \n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:97:11\n+  --> $DIR/disallowed-positions.rs:158:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:99:11\n+  --> $DIR/disallowed-positions.rs:160:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:107:11\n+  --> $DIR/disallowed-positions.rs:168:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:107:22\n+  --> $DIR/disallowed-positions.rs:168:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -805,7 +1218,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:117:11\n+  --> $DIR/disallowed-positions.rs:178:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -816,7 +1229,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:120:11\n+  --> $DIR/disallowed-positions.rs:181:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -825,7 +1238,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:122:11\n+  --> $DIR/disallowed-positions.rs:183:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -834,7 +1247,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:124:11\n+  --> $DIR/disallowed-positions.rs:185:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -843,7 +1256,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:128:15\n+  --> $DIR/disallowed-positions.rs:189:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -854,7 +1267,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:128:11\n+  --> $DIR/disallowed-positions.rs:189:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -863,7 +1276,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:132:15\n+  --> $DIR/disallowed-positions.rs:193:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -874,7 +1287,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:132:11\n+  --> $DIR/disallowed-positions.rs:193:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -883,7 +1296,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:139:15\n+  --> $DIR/disallowed-positions.rs:200:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -894,16 +1307,16 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:139:44\n+  --> $DIR/disallowed-positions.rs:200:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:139:44: 139:51]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:200:44: 200:51]`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:139:11\n+  --> $DIR/disallowed-positions.rs:200:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -912,7 +1325,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:147:15\n+  --> $DIR/disallowed-positions.rs:208:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -923,7 +1336,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:147:47\n+  --> $DIR/disallowed-positions.rs:208:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -935,7 +1348,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    | \n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:147:11\n+  --> $DIR/disallowed-positions.rs:208:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -944,35 +1357,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:103:23\n+  --> $DIR/disallowed-positions.rs:164:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:170:5\n+  --> $DIR/disallowed-positions.rs:231:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:172:5\n+  --> $DIR/disallowed-positions.rs:233:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:180:5\n+  --> $DIR/disallowed-positions.rs:241:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:180:16\n+  --> $DIR/disallowed-positions.rs:241:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -989,7 +1402,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:195:10\n+  --> $DIR/disallowed-positions.rs:256:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1000,7 +1413,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:5\n+  --> $DIR/disallowed-positions.rs:264:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1009,14 +1422,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:176:17\n+  --> $DIR/disallowed-positions.rs:237:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 103 previous errors\n+error: aborting due to 134 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "aebfc1a72b7aa34b6dd7467c1c1459e18544d0ee", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "patch": "@@ -72,7 +72,6 @@ LL |     let Some(n) = opt && let another = n else {\n    |                          ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n-   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:19"}, {"sha": "ac60bc7e57fd484c7074378c5287de5260d1f835", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "patch": "@@ -11,71 +11,25 @@ use std::ops::Range;\n fn _if() {\n     if let 0 = 1 {} // Stable!\n \n-    if (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if (((let 0 = 1))) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n     if true && let 0 = 1 {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     if let 0 = 1 && true {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n-    if (let 0 = 1) && true {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if true && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if (let 0 = 1) && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-\n     if let Range { start: _, end: _ } = (true..true) && false {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n }\n \n fn _while() {\n     while let 0 = 1 {} // Stable!\n \n-    while (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    while (((let 0 = 1))) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n     while true && let 0 = 1 {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n     while let 0 = 1 && true {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n \n-    while (let 0 = 1) && true {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    while true && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    while (let 0 = 1) && (let 0 = 1) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-\n-    while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-\n     while let Range { start: _, end: _ } = (true..true) && false {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n }\n@@ -92,10 +46,6 @@ fn _macros() {\n             while $e {}\n         }\n     }\n-    use_expr!((let 0 = 1 && 0 == 0));\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    use_expr!((let 0 = 1));\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n     use_expr!(let 0 = 1);"}, {"sha": "1eabee47c64ac3b5da2fdd0c9b8d3791aa3cffa5", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 10, "deletions": 226, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ad701e45036fb2ccab8d4b4e23f9a3325e12817/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=2ad701e45036fb2ccab8d4b4e23f9a3325e12817", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:101:15\n+  --> $DIR/feature-gate.rs:51:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -8,25 +8,7 @@ LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:14:9\n-   |\n-LL |     if (let 0 = 1) {}\n-   |         ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:17:11\n-   |\n-LL |     if (((let 0 = 1))) {}\n-   |           ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:20:16\n+  --> $DIR/feature-gate.rs:14:16\n    |\n LL |     if true && let 0 = 1 {}\n    |                ^^^^^^^^^\n@@ -35,7 +17,7 @@ LL |     if true && let 0 = 1 {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:23:8\n+  --> $DIR/feature-gate.rs:17:8\n    |\n LL |     if let 0 = 1 && true {}\n    |        ^^^^^^^^^\n@@ -44,88 +26,7 @@ LL |     if let 0 = 1 && true {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:26:9\n-   |\n-LL |     if (let 0 = 1) && true {}\n-   |         ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:29:17\n-   |\n-LL |     if true && (let 0 = 1) {}\n-   |                 ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:32:9\n-   |\n-LL |     if (let 0 = 1) && (let 0 = 1) {}\n-   |         ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:32:24\n-   |\n-LL |     if (let 0 = 1) && (let 0 = 1) {}\n-   |                        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:36:8\n-   |\n-LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:36:21\n-   |\n-LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                     ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:36:35\n-   |\n-LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                                   ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:36:48\n-   |\n-LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                                                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:36:61\n-   |\n-LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                                                             ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:43:8\n+  --> $DIR/feature-gate.rs:20:8\n    |\n LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -134,25 +35,7 @@ LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:50:12\n-   |\n-LL |     while (let 0 = 1) {}\n-   |            ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:53:14\n-   |\n-LL |     while (((let 0 = 1))) {}\n-   |              ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:56:19\n+  --> $DIR/feature-gate.rs:27:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n@@ -161,7 +44,7 @@ LL |     while true && let 0 = 1 {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:59:11\n+  --> $DIR/feature-gate.rs:30:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n@@ -170,88 +53,7 @@ LL |     while let 0 = 1 && true {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:62:12\n-   |\n-LL |     while (let 0 = 1) && true {}\n-   |            ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:65:20\n-   |\n-LL |     while true && (let 0 = 1) {}\n-   |                    ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:68:12\n-   |\n-LL |     while (let 0 = 1) && (let 0 = 1) {}\n-   |            ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:68:27\n-   |\n-LL |     while (let 0 = 1) && (let 0 = 1) {}\n-   |                           ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:72:11\n-   |\n-LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |           ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:72:24\n-   |\n-LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:72:38\n-   |\n-LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                                      ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:72:51\n-   |\n-LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                                                   ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:72:64\n-   |\n-LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n-   |                                                                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:79:11\n+  --> $DIR/feature-gate.rs:33:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +62,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:99:20\n+  --> $DIR/feature-gate.rs:49:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -269,32 +71,14 @@ LL |     #[cfg(FALSE)] (let 0 = 1);\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:86:17\n+  --> $DIR/feature-gate.rs:40:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:95:16\n-   |\n-LL |     use_expr!((let 0 = 1 && 0 == 0));\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:97:16\n-   |\n-LL |     use_expr!((let 0 = 1));\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error: aborting due to 33 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}