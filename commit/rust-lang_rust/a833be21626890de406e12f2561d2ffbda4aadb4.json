{"sha": "a833be21626890de406e12f2561d2ffbda4aadb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzNiZTIxNjI2ODkwZGU0MDZlMTJmMjU2MWQyZmZiZGE0YWFkYjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-30T12:02:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:39:24Z"}, "message": "parser: fuse free `fn` parsing together.", "tree": {"sha": "bd75ba7b37902e0ba9d09e775bdd413f9c868201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd75ba7b37902e0ba9d09e775bdd413f9c868201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a833be21626890de406e12f2561d2ffbda4aadb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a833be21626890de406e12f2561d2ffbda4aadb4", "html_url": "https://github.com/rust-lang/rust/commit/a833be21626890de406e12f2561d2ffbda4aadb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a833be21626890de406e12f2561d2ffbda4aadb4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a17e4067d2e67223cd9a172476ee5503d6b44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a17e4067d2e67223cd9a172476ee5503d6b44b", "html_url": "https://github.com/rust-lang/rust/commit/36a17e4067d2e67223cd9a172476ee5503d6b44b"}], "stats": {"total": 366, "additions": 181, "deletions": 185}, "files": [{"sha": "0bc6179dabf5b846cea1591b76fe5e699ef211d4", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1089,6 +1089,20 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         self.check_c_varadic_type(fk);\n \n+        // Functions cannot both be `const async`\n+        if let Some(FnHeader {\n+            constness: Const::Yes(cspan),\n+            asyncness: Async::Yes { span: aspan, .. },\n+            ..\n+        }) = fk.header()\n+        {\n+            self.err_handler()\n+                .struct_span_err(span, \"functions cannot be both `const` and `async`\")\n+                .span_label(*cspan, \"`const` because of this\")\n+                .span_label(*aspan, \"`async` because of this\")\n+                .emit();\n+        }\n+\n         // Functions without bodies cannot have patterns.\n         if let FnKind::Fn(ctxt, _, sig, _, None) = fk {\n             Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {"}, {"sha": "0b21de4d78b41a513258f823baae67efbf956990", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -496,6 +496,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in `visit_assoc_item` below.\n             self.check_extern(header.ext);\n+\n+            if let (ast::Const::Yes(_), ast::Extern::Implicit)\n+            | (ast::Const::Yes(_), ast::Extern::Explicit(_)) = (header.constness, header.ext)\n+            {\n+                gate_feature_post!(\n+                    &self,\n+                    const_extern_fn,\n+                    span,\n+                    \"`const extern fn` definitions are unstable\"\n+                );\n+            }\n         }\n \n         if fn_kind.ctxt() != Some(FnCtxt::Foreign) && fn_kind.decl().c_variadic() {\n@@ -595,7 +606,6 @@ pub fn check_crate(\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n-    gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n     gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");"}, {"sha": "906b82f746b24fd872fdd338c49a675550ead7c8", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 25, "deletions": 86, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -11,7 +11,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::BytePos;\n use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n-use syntax::ast::{Async, Const, Defaultness, Extern, IsAuto, PathSegment, StrLit, Unsafe};\n+use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, StrLit, Unsafe};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n@@ -96,53 +96,30 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n+        if self.is_fn_front_matter() {\n+            // FUNCTION ITEM\n+            return self.parse_item_fn(lo, vis, attrs);\n+        }\n+\n         if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n+                // EXTERN CRATE\n                 return Ok(Some(self.parse_item_extern_crate(lo, vis, attrs)?));\n             }\n-\n+            // EXTERN BLOCK\n             let abi = self.parse_abi();\n-\n-            if self.eat_keyword(kw::Fn) {\n-                // EXTERN FUNCTION ITEM\n-                let header = FnHeader {\n-                    unsafety: Unsafe::No,\n-                    asyncness: Async::No,\n-                    constness: Const::No,\n-                    ext: Extern::from_abi(abi),\n-                };\n-                return self.parse_item_fn(lo, vis, attrs, header);\n-            } else if self.check(&token::OpenDelim(token::Brace)) {\n-                return Ok(Some(self.parse_item_foreign_mod(lo, abi, vis, attrs)?));\n-            }\n-\n-            self.unexpected()?;\n+            return Ok(Some(self.parse_item_foreign_mod(lo, abi, vis, attrs)?));\n         }\n \n         if self.is_static_global() {\n-            self.bump();\n             // STATIC ITEM\n+            self.bump();\n             let m = self.parse_mutability();\n             let info = self.parse_item_const(Some(m))?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        let constness = self.parse_constness();\n-        if let Const::Yes(const_span) = constness {\n-            if [kw::Fn, kw::Unsafe, kw::Extern].iter().any(|k| self.check_keyword(*k)) {\n-                // CONST FUNCTION ITEM\n-                let unsafety = self.parse_unsafety();\n-\n-                if self.check_keyword(kw::Extern) {\n-                    self.sess.gated_spans.gate(sym::const_extern_fn, lo.to(self.token.span));\n-                }\n-                let ext = self.parse_extern()?;\n-                self.expect_keyword(kw::Fn)?;\n-\n-                let header = FnHeader { unsafety, asyncness: Async::No, constness, ext };\n-                return self.parse_item_fn(lo, vis, attrs, header);\n-            }\n-\n+        if let Const::Yes(const_span) = self.parse_constness() {\n             // CONST ITEM\n             if self.eat_keyword(kw::Mut) {\n                 let prev_span = self.prev_span;\n@@ -161,21 +138,6 @@ impl<'a> Parser<'a> {\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        // Parses `async unsafe? fn`.\n-        if self.check_keyword(kw::Async) {\n-            let async_span = self.token.span;\n-            if self.is_keyword_ahead(1, &[kw::Fn]) || self.is_keyword_ahead(2, &[kw::Fn]) {\n-                // ASYNC FUNCTION ITEM\n-                let asyncness = self.parse_asyncness(); // `async`\n-                let unsafety = self.parse_unsafety(); // `unsafe`?\n-                self.expect_keyword(kw::Fn)?; // `fn`\n-                self.ban_async_in_2015(async_span);\n-                let header =\n-                    FnHeader { unsafety, asyncness, constness: Const::No, ext: Extern::None };\n-                return self.parse_item_fn(lo, vis, attrs, header);\n-            }\n-        }\n-\n         if self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Trait, kw::Auto]) {\n             // UNSAFE TRAIT ITEM\n             let unsafety = self.parse_unsafety();\n@@ -195,26 +157,6 @@ impl<'a> Parser<'a> {\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        if self.check_keyword(kw::Fn) {\n-            // FUNCTION ITEM\n-            self.bump();\n-            let header = FnHeader::default();\n-            return self.parse_item_fn(lo, vis, attrs, header);\n-        }\n-\n-        if self.check_keyword(kw::Unsafe)\n-            && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace))\n-        {\n-            // UNSAFE FUNCTION ITEM\n-            let unsafety = self.parse_unsafety();\n-            // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n-            self.check(&token::OpenDelim(token::Brace));\n-            let ext = self.parse_extern()?;\n-            self.expect_keyword(kw::Fn)?;\n-            let header = FnHeader { unsafety, asyncness: Async::No, constness: Const::No, ext };\n-            return self.parse_item_fn(lo, vis, attrs, header);\n-        }\n-\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n             let info = self.parse_item_mod(&attrs[..])?;\n@@ -1662,9 +1604,9 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         vis: Visibility,\n         mut attrs: Vec<Attribute>,\n-        header: FnHeader,\n     ) -> PResult<'a, Option<P<Item>>> {\n         let cfg = ParamCfg { is_name_required: |_| true };\n+        let header = self.parse_fn_front_matter()?;\n         let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n         let body = self.parse_fn_body(&mut false, &mut attrs)?;\n         let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n@@ -1730,27 +1672,24 @@ impl<'a> Parser<'a> {\n         Ok(body)\n     }\n \n-    /// Is the current token unambiguously the start of an `FnHeader`?\n+    /// Is the current token the start of an `FnHeader` / not a valid parse?\n     fn is_fn_front_matter(&mut self) -> bool {\n         // We use an over-approximation here.\n         // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n-        // This works for `async fn` and similar as `async async` is an invalid\n-        // parse and `async fn` is never a valid parse on previous editions.\n-        const QUALIFIER: [Symbol; 4] = [kw::Const, kw::Async, kw::Unsafe, kw::Extern];\n-\n-        let check_qual_follow = |this: &mut Self, dist| {\n-            this.look_ahead(dist, |t| {\n-                // ...qualified and then `fn`, e.g. `const fn`.\n-                t.is_keyword(kw::Fn)\n-                // Two qualifiers. This is enough.\n-                || QUALIFIER.iter().any(|&kw| t.is_keyword(kw))\n-            })\n-        };\n+        const QUALS: [Symbol; 4] = [kw::Const, kw::Async, kw::Unsafe, kw::Extern];\n         self.check_keyword(kw::Fn) // Definitely an `fn`.\n             // `$qual fn` or `$qual $qual`:\n-            || QUALIFIER.iter().any(|&kw| self.check_keyword(kw)) && check_qual_follow(self, 1)\n-            // `extern ABI fn` or `extern ABI $qual`; skip 1 for the ABI.\n-            || self.check_keyword(kw::Extern) && check_qual_follow(self, 2)\n+            || QUALS.iter().any(|&kw| self.check_keyword(kw))\n+                && self.look_ahead(1, |t| {\n+                    // ...qualified and then `fn`, e.g. `const fn`.\n+                    t.is_keyword(kw::Fn)\n+                    // Two qualifiers. This is enough. Due `async` we need to check that it's reserved.\n+                    || t.is_non_raw_ident_where(|i| QUALS.contains(&i.name) && i.is_reserved())\n+                })\n+            // `extern ABI fn`\n+            || self.check_keyword(kw::Extern)\n+                && self.look_ahead(1, |t| t.can_begin_literal_or_bool())\n+                && self.look_ahead(2, |t| t.is_keyword(kw::Fn))\n     }\n \n     /// Parses all the \"front matter\" (or \"qualifiers\") for a `fn` declaration,"}, {"sha": "862934300e08562f5b9ef7e3b3474ab76ef020d1", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -402,12 +402,14 @@ impl Token {\n \n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n+    ///\n+    /// Keep this in sync with `Lit::from_token`.\n     pub fn can_begin_literal_or_bool(&self) -> bool {\n         match self.kind {\n             Literal(..) | BinOp(Minus) => true,\n             Ident(name, false) if name.is_bool_lit() => true,\n-            Interpolated(ref nt) => match **nt {\n-                NtLiteral(..) => true,\n+            Interpolated(ref nt) => match &**nt {\n+                NtExpr(e) | NtLiteral(e) => matches!(e.kind, ast::ExprKind::Lit(_)),\n                 _ => false,\n             },\n             _ => false,\n@@ -530,7 +532,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is a non-raw identifier for which `pred` holds.\n-    fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n+    pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n         match self.ident() {\n             Some((id, false)) => pred(id),\n             _ => false,"}, {"sha": "0c611adc06bcfa014461fc5292291e8837925cf2", "filename": "src/libsyntax/util/literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibsyntax%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Flibsyntax%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fliteral.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -188,6 +188,8 @@ impl Lit {\n     }\n \n     /// Converts arbitrary token into an AST literal.\n+    ///\n+    /// Keep this in sync with `Token::can_begin_literal_or_bool`.\n     pub fn from_token(token: &Token) -> Result<Lit, LitError> {\n         let lit = match token.kind {\n             token::Ident(name, false) if name.is_bool_lit() => {"}, {"sha": "963460c11824913074343c700c69ed73d5239567", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -2,4 +2,4 @@\n // compile-flags: --crate-type lib\n \n pub async const fn x() {}\n-//~^ ERROR expected one of `fn` or `unsafe`, found keyword `const`\n+//~^ ERROR expected one of `extern`, `fn`, or `unsafe`, found keyword `const`"}, {"sha": "e324a77187ab6c71cf43652a5a4c55fc75c6d761", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `fn` or `unsafe`, found keyword `const`\n+error: expected one of `extern`, `fn`, or `unsafe`, found keyword `const`\n   --> $DIR/no-async-const.rs:4:11\n    |\n LL | pub async const fn x() {}\n-   |           ^^^^^ expected one of `fn` or `unsafe`\n+   |           ^^^^^ expected one of `extern`, `fn`, or `unsafe`\n \n error: aborting due to previous error\n "}, {"sha": "b3c59734e036f7b0a57b729d99c3cd6f3026cc75", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -2,5 +2,4 @@\n // compile-flags: --crate-type lib\n \n pub const async fn x() {}\n-//~^ ERROR expected identifier, found keyword `async`\n-//~^^ expected `:`, found keyword `fn`\n+//~^ ERROR functions cannot be both `const` and `async`"}, {"sha": "f6ae0f1447ced96d832f6b2fb5717b86754a0207", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,14 +1,11 @@\n-error: expected identifier, found keyword `async`\n-  --> $DIR/no-const-async.rs:4:11\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/no-const-async.rs:4:1\n    |\n LL | pub const async fn x() {}\n-   |           ^^^^^ expected identifier, found keyword\n+   | ^^^^-----^-----^^^^^^^^^^\n+   |     |     |\n+   |     |     `async` because of this\n+   |     `const` because of this\n \n-error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:4:17\n-   |\n-LL | pub const async fn x() {}\n-   |                 ^^ expected `:`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "f40154e16f34eddd16ec3ec6ffdc3d7f2cacbdb0", "filename": "src/test/ui/async-await/no-unsafe-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -8,4 +8,4 @@ impl S {\n }\n \n #[cfg(FALSE)]\n-unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found keyword `async`\n+unsafe async fn f() {} //~ ERROR expected one of `extern` or `fn`, found keyword `async`"}, {"sha": "2651588d59710ca106c09b2a90614143f8ad0bf8", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -4,11 +4,11 @@ error: expected one of `extern` or `fn`, found keyword `async`\n LL |     unsafe async fn g() {}\n    |            ^^^^^ expected one of `extern` or `fn`\n \n-error: expected one of `extern`, `fn`, or `{`, found keyword `async`\n+error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8\n    |\n LL | unsafe async fn f() {}\n-   |        ^^^^^ expected one of `extern`, `fn`, or `{`\n+   |        ^^^^^ expected one of `extern` or `fn`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5667d5535274d161c5b38bf434638d6ba476a006", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,12 +1,10 @@\n // Check that `const extern fn` and `const unsafe extern fn` are feature-gated.\n \n-#[cfg(FALSE)] const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n-//~^ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n-//~^ ERROR `const extern fn` definitions are unstable\n+const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n+const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n+const unsafe extern \"C\" fn bar2() {} //~ ERROR `const extern fn` definitions are unstable\n+const unsafe extern \"Rust\" fn bar3() {} //~ ERROR `const extern fn` definitions are unstable\n \n fn main() {}"}, {"sha": "bd5940a3fd60c17cf07a67b5fd6512c8ba149309", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,53 +1,53 @@\n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:3:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:3:1\n    |\n-LL | #[cfg(FALSE)] const extern fn foo1() {}\n-   |               ^^^^^^^^^^^^\n+LL | const extern fn foo1() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:4:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:4:1\n    |\n-LL | #[cfg(FALSE)] const extern \"C\" fn foo2() {}\n-   |               ^^^^^^^^^^^^\n+LL | const extern \"C\" fn foo2() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:5:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:5:1\n    |\n-LL | #[cfg(FALSE)] const extern \"Rust\" fn foo3() {}\n-   |               ^^^^^^^^^^^^\n+LL | const extern \"Rust\" fn foo3() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:6:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:6:1\n    |\n-LL | #[cfg(FALSE)] const unsafe extern fn bar1() {}\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern fn bar1() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:7:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:7:1\n    |\n-LL | #[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"C\" fn bar2() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:9:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:8:1\n    |\n-LL | #[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"Rust\" fn bar3() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable"}, {"sha": "6f575d055a29baa35109595e5a0478f7418fc784", "filename": "src/test/ui/consts/const-extern-fn/issue-68062-const-extern-fns-dont-need-fn-specifier.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -4,5 +4,4 @@ fn main() {}\n fn container() {\n     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n     //~^ ERROR expected `fn`\n-    //~| ERROR `const extern fn` definitions are unstable\n }"}, {"sha": "ec415ec9d0211c006382e9bbf6116b0032565c36", "filename": "src/test/ui/consts/const-extern-fn/issue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -4,15 +4,5 @@ error: expected `fn`, found `PUT_ANYTHING_YOU_WANT_HERE`\n LL |     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fn`\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/issue-68062-const-extern-fns-dont-need-fn-specifier.rs:5:5\n-   |\n-LL |     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "9d4c72410a6d156f6b43816f07d1eefc0e628f7a", "filename": "src/test/ui/label/label_break_value_illegal_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -3,7 +3,7 @@\n // These are forbidden occurrences of label-break-value\n \n fn labeled_unsafe() {\n-    unsafe 'b: {} //~ ERROR expected one of `extern`, `fn`, or `{`\n+    unsafe 'b: {} //~ ERROR expected `{`, found `'b`\n }\n \n fn labeled_if() {"}, {"sha": "fd8850dd8dab255a8a374efffb12ac2f5eec3d60", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `extern`, `fn`, or `{`, found `'b`\n+error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:6:12\n    |\n LL |     unsafe 'b: {}\n-   |            ^^ expected one of `extern`, `fn`, or `{`\n+   |            ^^ expected `{`\n \n error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:10:13"}, {"sha": "7687f5e64094b2c4c52fb59206e85087c12d6d4e", "filename": "src/test/ui/parser/extern-crate-unexpected-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1 +1 @@\n-extern crte foo; //~ ERROR expected one of `crate`, `fn`, or `{`, found `crte`\n+extern crte foo; //~ ERROR expected one of `crate` or `{`, found `crte`"}, {"sha": "e9d287ac0e9276a4aa60505ac82ed13c88359e5a", "filename": "src/test/ui/parser/extern-crate-unexpected-token.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `crate`, `fn`, or `{`, found `crte`\n+error: expected one of `crate` or `{`, found `crte`\n   --> $DIR/extern-crate-unexpected-token.rs:1:8\n    |\n LL | extern crte foo;\n-   |        ^^^^ expected one of `crate`, `fn`, or `{`\n+   |        ^^^^ expected one of `crate` or `{`\n \n error: aborting due to previous error\n "}, {"sha": "1dcea17445e7a7389abf3048b494ba47ff2ae796", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,4 +1,3 @@\n-// Verifies that the expected token errors for `extern crate` are\n-// raised\n+// Verifies that the expected token errors for `extern crate` are raised.\n \n-extern \"C\" mod foo; //~ERROR expected one of `fn` or `{`, found keyword `mod`\n+extern \"C\" mod foo; //~ERROR expected `{`, found keyword `mod`"}, {"sha": "258a2c2680aaf4fb9e06360d8343e5094e1f6d4e", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `fn` or `{`, found keyword `mod`\n-  --> $DIR/extern-expected-fn-or-brace.rs:4:12\n+error: expected `{`, found keyword `mod`\n+  --> $DIR/extern-expected-fn-or-brace.rs:3:12\n    |\n LL | extern \"C\" mod foo;\n-   |            ^^^ expected one of `fn` or `{`\n+   |            ^^^ expected `{`\n \n error: aborting due to previous error\n "}, {"sha": "a05ea277eec208f53e7cbfc7d333732c302c888b", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -10,8 +10,8 @@ fn main() {\n     unsafe fn ff2() {} // OK.\n     const fn ff3() {} // OK.\n     extern \"C\" fn ff4() {} // OK.\n-    const /* async */ unsafe extern \"C\" fn ff5() {} // OK.\n-    //^ FIXME(Centril): `async` should be legal syntactically, ensure it's illegal semantically.\n+    const async unsafe extern \"C\" fn ff5() {} // OK.\n+    //~^ ERROR functions cannot be both `const` and `async`\n \n     trait X {\n         async fn ft1(); //~ ERROR trait fns cannot be declared `async`\n@@ -21,6 +21,7 @@ fn main() {\n         const async unsafe extern \"C\" fn ft5();\n         //~^ ERROR trait fns cannot be declared `async`\n         //~| ERROR trait fns cannot be declared const\n+        //~| ERROR functions cannot be both `const` and `async`\n     }\n \n     struct Y;\n@@ -34,14 +35,16 @@ fn main() {\n         //~^ ERROR trait fns cannot be declared `async`\n         //~| ERROR trait fns cannot be declared const\n         //~| ERROR method `ft5` has an incompatible type for trait\n+        //~| ERROR functions cannot be both `const` and `async`\n     }\n \n     impl Y {\n         async fn fi1() {} // OK.\n         unsafe fn fi2() {} // OK.\n         const fn fi3() {} // OK.\n         extern \"C\" fn fi4() {} // OK.\n-        const async unsafe extern \"C\" fn fi5() {} // OK.\n+        const async unsafe extern \"C\" fn fi5() {}\n+        //~^ ERROR functions cannot be both `const` and `async`\n     }\n \n     extern {\n@@ -50,5 +53,6 @@ fn main() {\n         const fn fe3(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         extern \"C\" fn fe4(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         const async unsafe extern \"C\" fn fe5(); //~ ERROR functions in `extern` blocks\n+        //~^ ERROR functions cannot be both `const` and `async`\n     }\n }"}, {"sha": "a9e4a183347672a2eca409ebafda8cf7237fb482", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 57, "deletions": 12, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,3 +1,12 @@\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:13:5\n+   |\n+LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n+   |     -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |     |\n+   |     |     `async` because of this\n+   |     `const` because of this\n+\n error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:17:9\n    |\n@@ -32,8 +41,17 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:28:9\n+  --> $DIR/fn-header-semantic-fail.rs:29:9\n    |\n LL |         async fn ft1() {}\n    |         -----^^^^^^^^^^^^\n@@ -44,19 +62,19 @@ LL |         async fn ft1() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:31:9\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ trait fns cannot be const\n \n error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,8 +84,26 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:46:9\n+   |\n+LL |         const async unsafe extern \"C\" fn fi5() {}\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:48:18\n+  --> $DIR/fn-header-semantic-fail.rs:51:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -77,7 +113,7 @@ LL |         async fn fe1();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:49:19\n+  --> $DIR/fn-header-semantic-fail.rs:52:19\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -88,7 +124,7 @@ LL |         unsafe fn fe2();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:50:18\n+  --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -99,7 +135,7 @@ LL |         const fn fe3();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:51:23\n+  --> $DIR/fn-header-semantic-fail.rs:54:23\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -110,7 +146,7 @@ LL |         extern \"C\" fn fe4();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:52:42\n+  --> $DIR/fn-header-semantic-fail.rs:55:42\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -120,8 +156,17 @@ LL |         const async unsafe extern \"C\" fn fe5();\n    |         |\n    |         help: remove the qualifiers: `fn`\n \n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:55:9\n+   |\n+LL |         const async unsafe extern \"C\" fn fe5();\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:28:24\n+  --> $DIR/fn-header-semantic-fail.rs:29:24\n    |\n LL |         async fn ft1();\n    |                       - type in trait\n@@ -136,7 +181,7 @@ LL |         async fn ft1() {}\n               found fn pointer `fn() -> impl std::future::Future`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:33:48\n+  --> $DIR/fn-header-semantic-fail.rs:34:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |                                               - type in trait\n@@ -150,7 +195,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n               found fn pointer `unsafe extern \"C\" fn() -> impl std::future::Future`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0053, E0379, E0706.\n For more information about an error, try `rustc --explain E0053`."}, {"sha": "9e44541993d92b3ed8638723ce63ff7af67f4718", "filename": "src/test/ui/parser/fn-header-syntactic-pass.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -3,9 +3,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(const_extern_fn)]\n-//^ FIXME(Centril): move check to ast_validation.\n-\n fn main() {}\n \n #[cfg(FALSE)]\n@@ -14,8 +11,7 @@ fn syntax() {\n     unsafe fn f();\n     const fn f();\n     extern \"C\" fn f();\n-    const /* async */ unsafe extern \"C\" fn f();\n-    //^ FIXME(Centril): `async` should be legal syntactically.\n+    const async unsafe extern \"C\" fn f();\n \n     trait X {\n         async fn f();"}, {"sha": "2158a2fd6c11cb70a8c25a1f3edd2b3ff7b5e084", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,5 +1,5 @@\n trait T {\n-    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found keyword `unsafe`\n+    extern \"Rust\" unsafe fn foo(); //~ ERROR expected one of `async`, `const`\n }\n \n fn main() {}"}, {"sha": "201a6b2d66a7cba92566bd127e69eee9b4e40cfc", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,8 +1,10 @@\n-error: expected `fn`, found keyword `unsafe`\n-  --> $DIR/issue-19398.rs:2:19\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `extern`\n+  --> $DIR/issue-19398.rs:2:5\n    |\n+LL | trait T {\n+   |          - expected one of 10 possible tokens\n LL |     extern \"Rust\" unsafe fn foo();\n-   |                   ^^^^^^ expected `fn`\n+   |     ^^^^^^ unexpected token\n \n error: aborting due to previous error\n "}, {"sha": "4e461161854e67dd90ebb80aa60edc111bc40511", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.rs?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -3,4 +3,4 @@ fn main() {\n         std::mem::transmute::<f32, u32>(1.0);\n     //}\n }\n-//~^^^ ERROR expected one of `extern`, `fn`, or `{`, found `std`\n+//~^^^ ERROR expected `{`, found `std`"}, {"sha": "13e0c3681fa0070b3990cb9fb8c7dc0bd7b274ad", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a833be21626890de406e12f2561d2ffbda4aadb4/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr?ref=a833be21626890de406e12f2561d2ffbda4aadb4", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `extern`, `fn`, or `{`, found `std`\n+error: expected `{`, found `std`\n   --> $DIR/unsafe-block-without-braces.rs:3:9\n    |\n LL |     unsafe //{\n-   |           - expected one of `extern`, `fn`, or `{`\n+   |           - expected `{`\n LL |         std::mem::transmute::<f32, u32>(1.0);\n    |         ^^^ unexpected token\n "}]}