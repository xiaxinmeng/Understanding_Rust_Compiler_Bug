{"sha": "17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "node_id": "C_kwDOAAsO6NoAKDE3YTRhNjhhYjBmZmEwZTg3MzZkNWNjZjcxZjZlNTY3OTRhMDMyMGE", "commit": {"author": {"name": "rdvdev2", "email": "rdvdev2@gmail.com", "date": "2022-09-01T22:11:44Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "Migrate derivable diagnostics in lang_items.rs", "tree": {"sha": "ac4534e3ef9889e0b46398b809a1ce51495e8959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4534e3ef9889e0b46398b809a1ce51495e8959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "html_url": "https://github.com/rust-lang/rust/commit/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/comments", "author": {"login": "rdvdev2", "id": 33713918, "node_id": "MDQ6VXNlcjMzNzEzOTE4", "avatar_url": "https://avatars.githubusercontent.com/u/33713918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdvdev2", "html_url": "https://github.com/rdvdev2", "followers_url": "https://api.github.com/users/rdvdev2/followers", "following_url": "https://api.github.com/users/rdvdev2/following{/other_user}", "gists_url": "https://api.github.com/users/rdvdev2/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdvdev2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdvdev2/subscriptions", "organizations_url": "https://api.github.com/users/rdvdev2/orgs", "repos_url": "https://api.github.com/users/rdvdev2/repos", "events_url": "https://api.github.com/users/rdvdev2/events{/privacy}", "received_events_url": "https://api.github.com/users/rdvdev2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "2f74d1d14ff08bfc5995ba1379840e5bd3f30efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f74d1d14ff08bfc5995ba1379840e5bd3f30efb", "html_url": "https://github.com/rust-lang/rust/commit/2f74d1d14ff08bfc5995ba1379840e5bd3f30efb"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "6512af1d14c86f62b166c003ceafd7bdd7a2a66b", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "patch": "@@ -280,3 +280,11 @@ passes_missing_alloc_error_handler = `#[alloc_error_handler]` function required,\n passes_missing_lang_item = language item required, but not found: `{$name}`\n     .note = this can occur when a binary crate with `#![no_std]` is compiled for a target where `{$name}` is defined in the standard library\n     .help = you may be able to compile for a target that doesn't need `{$name}`, specify a target with `--target` or in `.cargo/config`\n+\n+passes_lang_item_on_incorrect_target = `{$name}` language item must be applied to a {$expected_target}\n+    .label = attribute should be applied to a {$expected_target}, not a {$actual_target}\n+\n+passes_unknown_lang_item = definition of an unknown language item: `{$name}`\n+    .label = definition of unknown language item `{$name}`\n+\n+passes_local_duplicate_lang_item = found duplicate lang item `{$name}`"}, {"sha": "cd05784cd53b377e4667f9a538e97cdda6e4e352", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "patch": "@@ -1,4 +1,5 @@\n use rustc_errors::{Applicability, MultiSpan};\n+use rustc_hir::Target;\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -682,3 +683,23 @@ pub struct MissingAllocErrorHandler;\n pub struct MissingLangItem {\n     pub name: Symbol,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::lang_item_on_incorrect_target, code = \"E0718\")]\n+pub struct LangItemOnIncorrectTarget {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub name: Symbol,\n+    pub expected_target: Target,\n+    pub actual_target: Target,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::unknown_lang_item, code = \"E0522\")]\n+pub struct UnknownLangItem {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub name: Symbol,\n+}"}, {"sha": "98ff625d094693881afc4f2991326791b09567da", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=17a4a68ab0ffa0e8736d5ccf71f6e56794a0320a", "patch": "@@ -7,6 +7,7 @@\n //! * Traits that represent operators; e.g., `Add`, `Sub`, `Index`.\n //! * Functions called by the compiler itself.\n \n+use crate::errors::{LangItemOnIncorrectTarget, UnknownLangItem};\n use crate::check_attr::target_from_impl_item;\n use crate::weak_lang_items;\n \n@@ -42,34 +43,19 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                 }\n                 // Known lang item with attribute on incorrect target.\n                 Some((_, expected_target)) => {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n+                    self.tcx.sess.emit_err(LangItemOnIncorrectTarget {\n                         span,\n-                        E0718,\n-                        \"`{}` language item must be applied to a {}\",\n-                        value,\n+                        name: value,\n                         expected_target,\n-                    )\n-                    .span_label(\n-                        span,\n-                        format!(\n-                            \"attribute should be applied to a {}, not a {}\",\n-                            expected_target, actual_target,\n-                        ),\n-                    )\n-                    .emit();\n+                        actual_target,\n+                    });\n                 }\n                 // Unknown lang item.\n                 _ => {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n+                    self.tcx.sess.emit_err(UnknownLangItem {\n                         span,\n-                        E0522,\n-                        \"definition of an unknown language item: `{}`\",\n-                        value\n-                    )\n-                    .span_label(span, format!(\"definition of unknown language item `{}`\", value))\n-                    .emit();\n+                        name: value,\n+                    });\n                 }\n             }\n         }"}]}