{"sha": "519b86b8a810e12fe4247c56ffb894579c6b22e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOWI4NmI4YTgxMGUxMmZlNDI0N2M1NmZmYjg5NDU3OWM2YjIyZTc=", "commit": {"author": {"name": "Matt Carberry", "email": "carberry.matt@gmail.com", "date": "2013-11-03T04:26:29Z"}, "committer": {"name": "Matt Carberry", "email": "carberry.matt@gmail.com", "date": "2013-11-03T04:26:29Z"}, "message": "Added octal literal support.", "tree": {"sha": "837c99dc2a3ca5afffe7371fb0059c2aa445bdb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837c99dc2a3ca5afffe7371fb0059c2aa445bdb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/519b86b8a810e12fe4247c56ffb894579c6b22e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/519b86b8a810e12fe4247c56ffb894579c6b22e7", "html_url": "https://github.com/rust-lang/rust/commit/519b86b8a810e12fe4247c56ffb894579c6b22e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/519b86b8a810e12fe4247c56ffb894579c6b22e7/comments", "author": {"login": "mattcarberry", "id": 1875525, "node_id": "MDQ6VXNlcjE4NzU1MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1875525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattcarberry", "html_url": "https://github.com/mattcarberry", "followers_url": "https://api.github.com/users/mattcarberry/followers", "following_url": "https://api.github.com/users/mattcarberry/following{/other_user}", "gists_url": "https://api.github.com/users/mattcarberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattcarberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattcarberry/subscriptions", "organizations_url": "https://api.github.com/users/mattcarberry/orgs", "repos_url": "https://api.github.com/users/mattcarberry/repos", "events_url": "https://api.github.com/users/mattcarberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mattcarberry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattcarberry", "id": 1875525, "node_id": "MDQ6VXNlcjE4NzU1MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1875525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattcarberry", "html_url": "https://github.com/mattcarberry", "followers_url": "https://api.github.com/users/mattcarberry/followers", "following_url": "https://api.github.com/users/mattcarberry/following{/other_user}", "gists_url": "https://api.github.com/users/mattcarberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattcarberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattcarberry/subscriptions", "organizations_url": "https://api.github.com/users/mattcarberry/orgs", "repos_url": "https://api.github.com/users/mattcarberry/repos", "events_url": "https://api.github.com/users/mattcarberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mattcarberry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c01ca15383513eb2981b6ee532c33ea546b4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c01ca15383513eb2981b6ee532c33ea546b4a8", "html_url": "https://github.com/rust-lang/rust/commit/e0c01ca15383513eb2981b6ee532c33ea546b4a8"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "42237b9d6cca38ade636ad90c3f95f231e2e0349", "filename": "doc/po/ja/rust.md.po", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Fja%2Frust.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Fja%2Frust.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Frust.md.po?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -678,6 +678,13 @@ msgid \"\"\n \"and continues as any mixture hex digits and underscores.\"\n msgstr \"\"\n \n+#. type: Bullet: '  * '\n+#: doc/rust.md:326\n+msgid \"\"\n+\"An _octal literal_ starts with the character sequence `U+0030` `U+006F` (`0o`) \"\n+\"and continues as any mixture octal digits and underscores.\"\n+msgstr \"\"\n+\n #. type: Bullet: '  * '\n #: doc/rust.md:326\n msgid \"\"\n@@ -740,6 +747,7 @@ msgid \"\"\n \"123u;                              // type uint\\n\"\n \"123_u;                             // type uint\\n\"\n \"0xff_u8;                           // type u8\\n\"\n+\"0o70_i16;                          // type i16\\n\"\n \"0b1111_1111_1001_0000_i32;         // type i32\\n\"\n \"~~~~\\n\"\n msgstr \"\""}, {"sha": "26dc7bf0db86629a3af10be5ea4df5abc50f1e59", "filename": "doc/po/ja/tutorial.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Fja%2Ftutorial.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Fja%2Ftutorial.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Ftutorial.md.po?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -849,7 +849,7 @@ msgstr \"## \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3068\u30ea\u30c6\u30e9\u30eb\"\n msgid \"\"\n \"There are general signed and unsigned integer types, `int` and `uint`, as \"\n \"well as 8-, 16-, 32-, and 64-bit variants, `i8`, `u16`, etc.  Integers can \"\n-\"be written in decimal (`144`), hexadecimal (`0x90`), or binary \"\n+\"be written in decimal (`144`), hexadecimal (`0x90`), octal (`0o70`), or binary \"\n \"(`0b10010000`) base. Each integral type has a corresponding literal suffix \"\n \"that can be used to indicate the type of a literal: `i` for `int`, `u` for \"\n \"`uint`, `i8` for the `i8` type.\""}, {"sha": "2b682975065d76688872d1e069ee5c0d41b390d2", "filename": "doc/po/rust.md.pot", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Frust.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Frust.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Frust.md.pot?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -678,6 +678,13 @@ msgid \"\"\n \"and continues as any mixture hex digits and underscores.\"\n msgstr \"\"\n \n+#. type: Bullet: '  * '\n+#: doc/rust.md:326\n+msgid \"\"\n+\"An _octal literal_ starts with the character sequence `U+0030` `U+006F` (`0o`) \"\n+\"and continues as any mixture octal digits and underscores.\"\n+msgstr \"\"\n+\n #. type: Bullet: '  * '\n #: doc/rust.md:326\n msgid \"\"\n@@ -740,6 +747,7 @@ msgid \"\"\n \"123u;                              // type uint\\n\"\n \"123_u;                             // type uint\\n\"\n \"0xff_u8;                           // type u8\\n\"\n+\"0o70_i16;                          // type i16\\n\"\n \"0b1111_1111_1001_0000_i32;         // type i32\\n\"\n \"~~~~\\n\"\n msgstr \"\""}, {"sha": "a9c93aa6a8ba572281bfb2b30742a570d8f6b287", "filename": "doc/po/tutorial.md.pot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Ftutorial.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Fpo%2Ftutorial.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Ftutorial.md.pot?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -646,7 +646,7 @@ msgstr \"\"\n msgid \"\"\n \"There are general signed and unsigned integer types, `int` and `uint`, as \"\n \"well as 8-, 16-, 32-, and 64-bit variants, `i8`, `u16`, etc.  Integers can \"\n-\"be written in decimal (`144`), hexadecimal (`0x90`), or binary \"\n+\"be written in decimal (`144`), hexadecimal (`0x90`), octal (`0o70`), or binary \"\n \"(`0b10010000`) base. Each integral type has a corresponding literal suffix \"\n \"that can be used to indicate the type of a literal: `i` for `int`, `u` for \"\n \"`uint`, `i8` for the `i8` type.\""}, {"sha": "453048c4b5ffc09b9339511a7535fe76afe7cd5e", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -340,12 +340,14 @@ as they are differentiated by suffixes.\n \n ##### Integer literals\n \n-An _integer literal_ has one of three forms:\n+An _integer literal_ has one of four forms:\n \n   * A _decimal literal_ starts with a *decimal digit* and continues with any\n     mixture of *decimal digits* and _underscores_.\n   * A _hex literal_ starts with the character sequence `U+0030` `U+0078`\n     (`0x`) and continues as any mixture hex digits and underscores.\n+  * An _octal literal_ starts with the character sequence `U+0030` `U+006F`\n+    (`0o`) and continues as any mixture octal digits and underscores.\n   * A _binary literal_ starts with the character sequence `U+0030` `U+0062`\n     (`0b`) and continues as any mixture binary digits and underscores.\n \n@@ -376,6 +378,7 @@ Examples of integer literals of various forms:\n 123u;                              // type uint\n 123_u;                             // type uint\n 0xff_u8;                           // type u8\n+0o70_i16;                          // type i16\n 0b1111_1111_1001_0000_i32;         // type i32\n ~~~~\n "}, {"sha": "9fca9896d1021e5755fc49ed30e5b1fd879a3f77", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -305,7 +305,7 @@ fn is_four(x: int) -> bool {\n \n There are general signed and unsigned integer types, `int` and `uint`,\n as well as 8-, 16-, 32-, and 64-bit variants, `i8`, `u16`, etc.\n-Integers can be written in decimal (`144`), hexadecimal (`0x90`), or\n+Integers can be written in decimal (`144`), hexadecimal (`0x90`), octal (`0o70`), or\n binary (`0b10010000`) base. Each integral type has a corresponding literal\n suffix that can be used to indicate the type of a literal: `i` for `int`,\n `u` for `uint`, `i8` for the `i8` type."}, {"sha": "b8841ebe568e9b32c009f3c575480d916cd87667", "filename": "src/etc/gedit/share/gtksourceview-3.0/language-specs/rust.lang", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -224,13 +224,18 @@\n       [0-9a-fA-F]\n     </define-regex>\n \n+    <define-regex id=\"oct_digit\" extended=\"true\">\n+      [0-7]\n+    </define-regex>\n+\n     <context id=\"number\" style-ref=\"number\">\n       <match extended=\"true\">\n         ((?&lt;=\\.\\.)|(?&lt;![\\w\\.]))\n         (\n         [1-9][0-9_]*\\%{num_suffix}?|\n         0[0-9_]*\\%{num_suffix}?|\n         0b[01_]+\\%{int_suffix}?|\n+        0o(\\%{oct_digit}|_)+\\%{int_suffix}?|\n         0x(\\%{hex_digit}|_)+\\%{int_suffix}?\n         )\n         ((?![\\w\\.].)|(?=\\.\\.))"}, {"sha": "5efd393fc35854c64be1eadfc5609fa31d0a552d", "filename": "src/etc/kate/rust.xml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Fetc%2Fkate%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Fetc%2Fkate%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fkate%2Frust.xml?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -199,6 +199,7 @@\n \t\t\t<Detect2Chars char=\"/\" char1=\"/\" attribute=\"Comment\" context=\"Commentar 1\"/>\n \t\t\t<Detect2Chars char=\"/\" char1=\"*\" attribute=\"Comment\" context=\"Commentar 2\" beginRegion=\"Comment\"/>\n \t\t\t<RegExpr String=\"0x[0-9a-fA-F_]+&rustIntSuf;\" attribute=\"Number\" context=\"#stay\"/>\n+\t\t\t<RegExpr String=\"0o[0-7_]+&rustIntSuf;\" attribute=\"Number\" context=\"#stay\"/>\n \t\t\t<RegExpr String=\"0b[0-1_]+&rustIntSuf;\" attribute=\"Number\" context=\"#stay\"/>\n \t\t\t<RegExpr String=\"[0-9][0-9_]*\\.[0-9_]*([eE][+-]?[0-9_]+)?(f32|f64|f)?\" attribute=\"Number\" context=\"#stay\"/>\n \t\t\t<RegExpr String=\"[0-9][0-9_]*&rustIntSuf;\" attribute=\"Number\" context=\"#stay\"/>"}, {"sha": "abac8a32d787ee2cf8c159e051862536f36cfd85", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -160,7 +160,10 @@ syn match     rustNumber      display \"\\<[0-9][0-9_]*\\(i\\|i8\\|i16\\|i32\\|i64\\)\\>\"\n \n syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\>\"\n syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n-syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n+syn match     rustHexNumber   display \"\\<0x[0-9_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n+syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\>\"\n+syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n+syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n syn match     rustBinNumber   display \"\\<0b[01_]\\+\\>\"\n syn match     rustBinNumber   display \"\\<0b[01_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n syn match     rustBinNumber   display \"\\<0b[01_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n@@ -198,6 +201,7 @@ syn region rustFoldBraces start=\"{\" end=\"}\" transparent fold\n \n \" Default highlighting {{{1\n hi def link rustHexNumber       rustNumber\n+hi def link rustOctNumber       rustNumber\n hi def link rustBinNumber       rustNumber\n hi def link rustIdentifierPrime rustIdentifier\n hi def link rustTrait           rustType"}, {"sha": "f75b17adeedfc6e26b1507649ae551e7bba8fa9d", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -276,6 +276,11 @@ fn hex_digit_val(c: char) -> int {\n     fail!();\n }\n \n+fn oct_digit_val(c: char) -> int {\n+    if in_range(c, '0', '7') { return (c as int) - ('0' as int); }\n+    fail!();\n+}\n+\n fn bin_digit_value(c: char) -> int { if c == '0' { return 0; } return 1; }\n \n pub fn is_whitespace(c: char) -> bool {\n@@ -293,6 +298,8 @@ fn is_hex_digit(c: char) -> bool {\n             in_range(c, 'A', 'F');\n }\n \n+fn is_oct_digit(c: char) -> bool { return in_range(c, '0', '7'); }\n+\n fn is_bin_digit(c: char) -> bool { return c == '0' || c == '1'; }\n \n // EFFECT: eats whitespace and comments.\n@@ -464,6 +471,10 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n         bump(rdr);\n         bump(rdr);\n         base = 16u;\n+    } else if c == '0' && n == 'o' {\n+        bump(rdr);\n+        bump(rdr);\n+        base = 8u;\n     } else if c == '0' && n == 'b' {\n         bump(rdr);\n         bump(rdr);\n@@ -529,6 +540,8 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n         match base {\n           16u => fatal_span(rdr, start_bpos, rdr.last_pos,\n                             ~\"hexadecimal float literal is not supported\"),\n+          8u => fatal_span(rdr, start_bpos, rdr.last_pos,\n+                           ~\"octal float literal is not supported\"),\n           2u => fatal_span(rdr, start_bpos, rdr.last_pos,\n                            ~\"binary float literal is not supported\"),\n           _ => ()"}, {"sha": "511116b1c559c9ce7ff217f5aca9f2017777d60a", "filename": "src/test/compile-fail/no-oct-float-literal.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Ftest%2Fcompile-fail%2Fno-oct-float-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519b86b8a810e12fe4247c56ffb894579c6b22e7/src%2Ftest%2Fcompile-fail%2Fno-oct-float-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-oct-float-literal.rs?ref=519b86b8a810e12fe4247c56ffb894579c6b22e7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:octal float literal is not supported\n+\n+fn main() {\n+    0o123f64;\n+    0o123.456;\n+    0o123p4f;\n+}"}]}