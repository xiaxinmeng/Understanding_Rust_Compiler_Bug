{"sha": "95c8c65139c10e4de44367fead8dff88511e6d46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzhjNjUxMzljMTBlNGRlNDQzNjdmZWFkOGRmZjg4NTExZTZkNDY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T15:37:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T15:37:14Z"}, "message": "Nest all the or-patterns!", "tree": {"sha": "4326d46ee282c133123f3a08aaee7d640f007050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4326d46ee282c133123f3a08aaee7d640f007050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c8c65139c10e4de44367fead8dff88511e6d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c8c65139c10e4de44367fead8dff88511e6d46", "html_url": "https://github.com/rust-lang/rust/commit/95c8c65139c10e4de44367fead8dff88511e6d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c8c65139c10e4de44367fead8dff88511e6d46/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82a9141abe6b6cbf5b55710dc8a315a3839081b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82a9141abe6b6cbf5b55710dc8a315a3839081b", "html_url": "https://github.com/rust-lang/rust/commit/c82a9141abe6b6cbf5b55710dc8a315a3839081b"}], "stats": {"total": 284, "additions": 133, "deletions": 151}, "files": [{"sha": "43162797e3c8b780ea36b140e6e966bb86936ee2", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -51,12 +51,14 @@ impl PathResolution {\n             PathResolution::Def(ModuleDef::BuiltinType(builtin)) => {\n                 Some(TypeNs::BuiltinType((*builtin).into()))\n             }\n-            PathResolution::Def(ModuleDef::Const(_))\n-            | PathResolution::Def(ModuleDef::Variant(_))\n-            | PathResolution::Def(ModuleDef::Function(_))\n-            | PathResolution::Def(ModuleDef::Module(_))\n-            | PathResolution::Def(ModuleDef::Static(_))\n-            | PathResolution::Def(ModuleDef::Trait(_)) => None,\n+            PathResolution::Def(\n+                ModuleDef::Const(_)\n+                | ModuleDef::Variant(_)\n+                | ModuleDef::Function(_)\n+                | ModuleDef::Module(_)\n+                | ModuleDef::Static(_)\n+                | ModuleDef::Trait(_),\n+            ) => None,\n             PathResolution::Def(ModuleDef::TypeAlias(alias)) => {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n             }\n@@ -65,8 +67,7 @@ impl PathResolution {\n             }\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n-            PathResolution::AssocItem(AssocItem::Const(_))\n-            | PathResolution::AssocItem(AssocItem::Function(_)) => None,\n+            PathResolution::AssocItem(AssocItem::Const(_) | AssocItem::Function(_)) => None,\n             PathResolution::AssocItem(AssocItem::TypeAlias(alias)) => {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n             }"}, {"sha": "e63bc8232b97f38f13691fe8f7cc6198077dcc42", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -63,7 +63,7 @@ impl<'a> Printer<'a> {\n     fn blank(&mut self) {\n         let mut iter = self.buf.chars().rev().fuse();\n         match (iter.next(), iter.next()) {\n-            (Some('\\n'), Some('\\n')) | (Some('\\n'), None) | (None, None) => {}\n+            (Some('\\n'), Some('\\n') | None) | (None, None) => {}\n             (Some('\\n'), Some(_)) => {\n                 self.buf.push('\\n');\n             }\n@@ -77,7 +77,7 @@ impl<'a> Printer<'a> {\n \n     fn whitespace(&mut self) {\n         match self.buf.chars().next_back() {\n-            None | Some('\\n') | Some(' ') => {}\n+            None | Some('\\n' | ' ') => {}\n             _ => self.buf.push(' '),\n         }\n     }"}, {"sha": "927a7b6e85f0d905b545419a2cdcffdd35179551", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -1260,7 +1260,7 @@ impl DefCollector<'_> {\n         for directive in &self.unresolved_imports {\n             if let ImportSource::Import { id: import, use_tree } = &directive.import.source {\n                 match (directive.import.path.segments().first(), &directive.import.path.kind) {\n-                    (Some(krate), PathKind::Plain) | (Some(krate), PathKind::Abs) => {\n+                    (Some(krate), PathKind::Plain | PathKind::Abs) => {\n                         if diagnosed_extern_crates.contains(krate) {\n                             continue;\n                         }"}, {"sha": "47e56259f4f18af85bff96b1bcb9d38ada029d0b", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -605,8 +605,7 @@ fn to_value_ns(per_ns: PerNs) -> Option<ValueNs> {\n         ModuleDefId::ConstId(it) => ValueNs::ConstId(it),\n         ModuleDefId::StaticId(it) => ValueNs::StaticId(it),\n \n-        ModuleDefId::AdtId(AdtId::EnumId(_))\n-        | ModuleDefId::AdtId(AdtId::UnionId(_))\n+        ModuleDefId::AdtId(AdtId::EnumId(_) | AdtId::UnionId(_))\n         | ModuleDefId::TraitId(_)\n         | ModuleDefId::TypeAliasId(_)\n         | ModuleDefId::BuiltinType(_)"}, {"sha": "aeb1e7726b6eb7cdf5a1a3f5025e768dae9d3a3e", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -172,9 +172,8 @@ impl Visibility {\n     /// visible in unrelated modules).\n     pub(crate) fn max(self, other: Visibility, def_map: &DefMap) -> Option<Visibility> {\n         match (self, other) {\n-            (Visibility::Module(_), Visibility::Public)\n-            | (Visibility::Public, Visibility::Module(_))\n-            | (Visibility::Public, Visibility::Public) => Some(Visibility::Public),\n+            (Visibility::Module(_) | Visibility::Public, Visibility::Public)\n+            | (Visibility::Public, Visibility::Module(_)) => Some(Visibility::Public),\n             (Visibility::Module(mod_a), Visibility::Module(mod_b)) => {\n                 if mod_a.krate != mod_b.krate {\n                     return None;"}, {"sha": "8485224115578fedffa423b66bab2f0ac657cdb0", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -146,10 +146,11 @@ impl HygieneInfo {\n                 (&self.macro_arg.1, InFile::new(loc.kind.file_id(), arg_start))\n             }\n             mbe::Origin::Def => match (&*self.macro_def, self.def_start) {\n-                (TokenExpander::MacroDef { def_site_token_map, .. }, Some(tt))\n-                | (TokenExpander::MacroRules { def_site_token_map, .. }, Some(tt)) => {\n-                    (def_site_token_map, tt)\n-                }\n+                (\n+                    TokenExpander::MacroDef { def_site_token_map, .. }\n+                    | TokenExpander::MacroRules { def_site_token_map, .. },\n+                    Some(tt),\n+                ) => (def_site_token_map, tt),\n                 _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n             },\n         };"}, {"sha": "c31426d7cc7e3b1e30ff8b6ff1922c3714e871a8", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -368,10 +368,11 @@ impl ExpansionInfo {\n         let (token_map, tt) = match origin {\n             mbe::Origin::Call => (&self.macro_arg.1, self.arg.clone()),\n             mbe::Origin::Def => match (&*self.macro_def, self.def.as_ref()) {\n-                (db::TokenExpander::MacroRules { def_site_token_map, .. }, Some(tt))\n-                | (db::TokenExpander::MacroDef { def_site_token_map, .. }, Some(tt)) => {\n-                    (def_site_token_map, tt.as_ref().map(|tt| tt.syntax().clone()))\n-                }\n+                (\n+                    db::TokenExpander::MacroRules { def_site_token_map, .. }\n+                    | db::TokenExpander::MacroDef { def_site_token_map, .. },\n+                    Some(tt),\n+                ) => (def_site_token_map, tt.as_ref().map(|tt| tt.syntax().clone())),\n                 _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n             },\n         };"}, {"sha": "ab1afce081f3c7059c3cb318d2c83767e76d29c3", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -38,8 +38,7 @@ impl ConstExt for Const {\n // FIXME: support more than just evaluating literals\n pub fn eval_usize(expr: &Expr) -> Option<u64> {\n     match expr {\n-        Expr::Literal(Literal::Uint(v, None))\n-        | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n+        Expr::Literal(Literal::Uint(v, None | Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n         _ => None,\n     }\n }"}, {"sha": "e3d640a7969e75ef481c4806a50948bd13fcc8c5", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -84,10 +84,7 @@ impl IntRange {\n     #[inline]\n     fn is_integral(ty: &Ty) -> bool {\n         match ty.kind(&Interner) {\n-            TyKind::Scalar(Scalar::Char)\n-            | TyKind::Scalar(Scalar::Int(_))\n-            | TyKind::Scalar(Scalar::Uint(_))\n-            | TyKind::Scalar(Scalar::Bool) => true,\n+            TyKind::Scalar(Scalar::Char | Scalar::Int(_) | Scalar::Uint(_) | Scalar::Bool) => true,\n             _ => false,\n         }\n     }\n@@ -381,7 +378,7 @@ impl Constructor {\n             // Wildcards cover anything\n             (_, Wildcard) => true,\n             // The missing ctors are not covered by anything in the matrix except wildcards.\n-            (Missing, _) | (Wildcard, _) => false,\n+            (Missing | Wildcard, _) => false,\n \n             (Single, Single) => true,\n             (Variant(self_id), Variant(other_id)) => self_id == other_id,\n@@ -523,7 +520,7 @@ impl SplitWildcard {\n                 }\n             }\n             TyKind::Scalar(Scalar::Char) => unhandled(),\n-            TyKind::Scalar(Scalar::Int(..)) | TyKind::Scalar(Scalar::Uint(..)) => unhandled(),\n+            TyKind::Scalar(Scalar::Int(..) | Scalar::Uint(..)) => unhandled(),\n             TyKind::Never if !cx.feature_exhaustive_patterns() && !pcx.is_top_level => {\n                 smallvec![NonExhaustive]\n             }"}, {"sha": "7be91445199caea2d3e4200d7790bc5d22189a73", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -47,10 +47,7 @@ impl<'a> InferenceContext<'a> {\n         // pointers to have a chance at getting a match. See\n         // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n         let sig = match (ty1.kind(&Interner), ty2.kind(&Interner)) {\n-            (TyKind::FnDef(..), TyKind::FnDef(..))\n-            | (TyKind::Closure(..), TyKind::FnDef(..))\n-            | (TyKind::FnDef(..), TyKind::Closure(..))\n-            | (TyKind::Closure(..), TyKind::Closure(..)) => {\n+            (TyKind::FnDef(..) | TyKind::Closure(..), TyKind::FnDef(..) | TyKind::Closure(..)) => {\n                 // FIXME: we're ignoring safety here. To be more correct, if we have one FnDef and one Closure,\n                 // we should be coercing the closure to a fn pointer of the safety of the FnDef\n                 cov_mark::hit!(coerce_fn_reification);\n@@ -448,8 +445,7 @@ fn safe_to_unsafe_fn_ty(fn_ty: FnPointer) -> FnPointer {\n \n fn coerce_mutabilities(from: Mutability, to: Mutability) -> Result<(), TypeError> {\n     match (from, to) {\n-        (Mutability::Mut, Mutability::Mut)\n-        | (Mutability::Mut, Mutability::Not)\n+        (Mutability::Mut, Mutability::Mut | Mutability::Not)\n         | (Mutability::Not, Mutability::Not) => Ok(()),\n         (Mutability::Not, Mutability::Mut) => Err(TypeError),\n     }"}, {"sha": "4e4f6e5a46a9bf8772a70bc41a2db4d9f2b5fc19", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -593,11 +593,11 @@ impl<'a> InferenceContext<'a> {\n                     UnaryOp::Neg => {\n                         match inner_ty.kind(&Interner) {\n                             // Fast path for builtins\n-                            TyKind::Scalar(Scalar::Int(_))\n-                            | TyKind::Scalar(Scalar::Uint(_))\n-                            | TyKind::Scalar(Scalar::Float(_))\n-                            | TyKind::InferenceVar(_, TyVariableKind::Integer)\n-                            | TyKind::InferenceVar(_, TyVariableKind::Float) => inner_ty,\n+                            TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_) | Scalar::Float(_))\n+                            | TyKind::InferenceVar(\n+                                _,\n+                                TyVariableKind::Integer | TyVariableKind::Float,\n+                            ) => inner_ty,\n                             // Otherwise we resolve via the std::ops::Neg trait\n                             _ => self\n                                 .resolve_associated_type(inner_ty, self.resolve_ops_neg_output()),\n@@ -606,9 +606,7 @@ impl<'a> InferenceContext<'a> {\n                     UnaryOp::Not => {\n                         match inner_ty.kind(&Interner) {\n                             // Fast path for builtins\n-                            TyKind::Scalar(Scalar::Bool)\n-                            | TyKind::Scalar(Scalar::Int(_))\n-                            | TyKind::Scalar(Scalar::Uint(_))\n+                            TyKind::Scalar(Scalar::Bool | Scalar::Int(_) | Scalar::Uint(_))\n                             | TyKind::InferenceVar(_, TyVariableKind::Integer) => inner_ty,\n                             // Otherwise we resolve via the std::ops::Not trait\n                             _ => self\n@@ -735,7 +733,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::Array(array) => {\n                 let elem_ty =\n                     match expected.to_option(&mut self.table).as_ref().map(|t| t.kind(&Interner)) {\n-                        Some(TyKind::Array(st, _)) | Some(TyKind::Slice(st)) => st.clone(),\n+                        Some(TyKind::Array(st, _) | TyKind::Slice(st)) => st.clone(),\n                         _ => self.table.new_type_var(),\n                     };\n "}, {"sha": "58cb23e9dca29b095b0ed701344ea7fd125dc61b", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -297,10 +297,11 @@ fn is_non_ref_pat(body: &hir_def::body::Body, pat: PatId) -> bool {\n             Expr::Literal(Literal::String(..)) => false,\n             _ => true,\n         },\n-        Pat::Bind { mode: BindingAnnotation::Mutable, subpat: Some(subpat), .. }\n-        | Pat::Bind { mode: BindingAnnotation::Unannotated, subpat: Some(subpat), .. } => {\n-            is_non_ref_pat(body, *subpat)\n-        }\n+        Pat::Bind {\n+            mode: BindingAnnotation::Mutable | BindingAnnotation::Unannotated,\n+            subpat: Some(subpat),\n+            ..\n+        } => is_non_ref_pat(body, *subpat),\n         Pat::Wild | Pat::Bind { .. } | Pat::Ref { .. } | Pat::Box { .. } | Pat::Missing => false,\n     }\n }"}, {"sha": "5ef6342d57bd2bf02d3e7fe6736d6b6b65d9b48d", "filename": "crates/hir_ty/src/op.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fhir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fop.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -8,17 +8,15 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(_) | BinaryOp::CmpOp(_) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n         BinaryOp::Assignment { .. } => TyBuilder::unit(),\n-        BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => {\n+        BinaryOp::ArithOp(ArithOp::Shl | ArithOp::Shr) => {\n             // all integer combinations are valid here\n             if matches!(\n                 lhs_ty.kind(&Interner),\n-                TyKind::Scalar(Scalar::Int(_))\n-                    | TyKind::Scalar(Scalar::Uint(_))\n+                TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_))\n                     | TyKind::InferenceVar(_, TyVariableKind::Integer)\n             ) && matches!(\n                 rhs_ty.kind(&Interner),\n-                TyKind::Scalar(Scalar::Int(_))\n-                    | TyKind::Scalar(Scalar::Uint(_))\n+                TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_))\n                     | TyKind::InferenceVar(_, TyVariableKind::Integer)\n             ) {\n                 lhs_ty\n@@ -32,15 +30,15 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n             | (TyKind::Scalar(Scalar::Uint(_)), TyKind::Scalar(Scalar::Uint(_)))\n             | (TyKind::Scalar(Scalar::Float(_)), TyKind::Scalar(Scalar::Float(_))) => rhs_ty,\n             // ({int}, int) | ({int}, uint)\n-            (TyKind::InferenceVar(_, TyVariableKind::Integer), TyKind::Scalar(Scalar::Int(_)))\n-            | (TyKind::InferenceVar(_, TyVariableKind::Integer), TyKind::Scalar(Scalar::Uint(_))) => {\n-                rhs_ty\n-            }\n+            (\n+                TyKind::InferenceVar(_, TyVariableKind::Integer),\n+                TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_)),\n+            ) => rhs_ty,\n             // (int, {int}) | (uint, {int})\n-            (TyKind::Scalar(Scalar::Int(_)), TyKind::InferenceVar(_, TyVariableKind::Integer))\n-            | (TyKind::Scalar(Scalar::Uint(_)), TyKind::InferenceVar(_, TyVariableKind::Integer)) => {\n-                lhs_ty\n-            }\n+            (\n+                TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_)),\n+                TyKind::InferenceVar(_, TyVariableKind::Integer),\n+            ) => lhs_ty,\n             // ({float} | float)\n             (TyKind::InferenceVar(_, TyVariableKind::Float), TyKind::Scalar(Scalar::Float(_))) => {\n                 rhs_ty\n@@ -69,21 +67,15 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n         BinaryOp::Assignment { op: None } => lhs_ty,\n         BinaryOp::CmpOp(CmpOp::Eq { .. }) => match lhs_ty.kind(&Interner) {\n             TyKind::Scalar(_) | TyKind::Str => lhs_ty,\n-            TyKind::InferenceVar(_, TyVariableKind::Integer)\n-            | TyKind::InferenceVar(_, TyVariableKind::Float) => lhs_ty,\n+            TyKind::InferenceVar(_, TyVariableKind::Integer | TyVariableKind::Float) => lhs_ty,\n             _ => TyKind::Error.intern(&Interner),\n         },\n-        BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => {\n-            TyKind::Error.intern(&Interner)\n-        }\n+        BinaryOp::ArithOp(ArithOp::Shl | ArithOp::Shr) => TyKind::Error.intern(&Interner),\n         BinaryOp::CmpOp(CmpOp::Ord { .. })\n         | BinaryOp::Assignment { op: Some(_) }\n         | BinaryOp::ArithOp(_) => match lhs_ty.kind(&Interner) {\n-            TyKind::Scalar(Scalar::Int(_))\n-            | TyKind::Scalar(Scalar::Uint(_))\n-            | TyKind::Scalar(Scalar::Float(_)) => lhs_ty,\n-            TyKind::InferenceVar(_, TyVariableKind::Integer)\n-            | TyKind::InferenceVar(_, TyVariableKind::Float) => lhs_ty,\n+            TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_) | Scalar::Float(_)) => lhs_ty,\n+            TyKind::InferenceVar(_, TyVariableKind::Integer | TyVariableKind::Float) => lhs_ty,\n             _ => TyKind::Error.intern(&Interner),\n         },\n     }"}, {"sha": "ffa8bd1826a1acf5f83050fecf91710f399797d5", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -197,7 +197,7 @@ fn join_single_use_tree(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Opti\n }\n \n fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n-    matches!((left, right), (T![,], T![')']) | (T![,], T![']']))\n+    matches!((left, right), (T![,], T![')'] | T![']']))\n }\n \n fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {"}, {"sha": "5808562a77156fc936e6fe6b0b4d03ccfa6d1468", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -79,8 +79,7 @@ pub(crate) fn find_all_refs(\n                 });\n                 usages.references.retain(|_, it| !it.is_empty());\n             }\n-            Definition::ModuleDef(hir::ModuleDef::Adt(_))\n-            | Definition::ModuleDef(hir::ModuleDef::Variant(_)) => {\n+            Definition::ModuleDef(hir::ModuleDef::Adt(_) | hir::ModuleDef::Variant(_)) => {\n                 refs.for_each(|it| {\n                     it.retain(|reference| {\n                         reference.name.as_name_ref().map_or(false, is_lit_name_ref)"}, {"sha": "d44a1b45f62b2997016a5a3f72ed31c6fafdedd4", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -294,7 +294,7 @@ fn traverse(\n                 Some(parent) => {\n                     // We only care Name and Name_ref\n                     match (token.kind(), parent.kind()) {\n-                        (IDENT, NAME) | (IDENT, NAME_REF) => parent.into(),\n+                        (IDENT, NAME | NAME_REF) => parent.into(),\n                         _ => token.into(),\n                     }\n                 }\n@@ -310,7 +310,7 @@ fn traverse(\n                 Some(parent) => {\n                     // We only care Name and Name_ref\n                     match (token.kind(), parent.kind()) {\n-                        (IDENT, NAME) | (IDENT, NAME_REF) => parent.into(),\n+                        (IDENT, NAME | NAME_REF) => parent.into(),\n                         _ => token.into(),\n                     }\n                 }"}, {"sha": "7085a0c484930f507f238f1006606c36b162c20a", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -1384,7 +1384,7 @@ fn fix_param_usages(ctx: &AssistContext, params: &[Param], syntax: &SyntaxNode)\n     for (param, usages) in usages_for_param {\n         for usage in usages {\n             match usage.syntax().ancestors().skip(1).find_map(ast::Expr::cast) {\n-                Some(ast::Expr::MethodCallExpr(_)) | Some(ast::Expr::FieldExpr(_)) => {\n+                Some(ast::Expr::MethodCallExpr(_) | ast::Expr::FieldExpr(_)) => {\n                     // do nothing\n                 }\n                 Some(ast::Expr::RefExpr(node))"}, {"sha": "bf4ba16f0ed796775414e39b197afba77156ed4f", "filename": "crates/ide_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -68,28 +68,33 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n \n                     Some(!matches!(\n                         (&initializer_expr, usage_parent),\n-                        (ast::Expr::CallExpr(_), _)\n-                            | (ast::Expr::IndexExpr(_), _)\n-                            | (ast::Expr::MethodCallExpr(_), _)\n-                            | (ast::Expr::FieldExpr(_), _)\n-                            | (ast::Expr::TryExpr(_), _)\n-                            | (ast::Expr::RefExpr(_), _)\n-                            | (ast::Expr::Literal(_), _)\n-                            | (ast::Expr::TupleExpr(_), _)\n-                            | (ast::Expr::ArrayExpr(_), _)\n-                            | (ast::Expr::ParenExpr(_), _)\n-                            | (ast::Expr::PathExpr(_), _)\n-                            | (ast::Expr::BlockExpr(_), _)\n-                            | (ast::Expr::EffectExpr(_), _)\n-                            | (_, ast::Expr::CallExpr(_))\n-                            | (_, ast::Expr::TupleExpr(_))\n-                            | (_, ast::Expr::ArrayExpr(_))\n-                            | (_, ast::Expr::ParenExpr(_))\n-                            | (_, ast::Expr::ForExpr(_))\n-                            | (_, ast::Expr::WhileExpr(_))\n-                            | (_, ast::Expr::BreakExpr(_))\n-                            | (_, ast::Expr::ReturnExpr(_))\n-                            | (_, ast::Expr::MatchExpr(_))\n+                        (\n+                            ast::Expr::CallExpr(_)\n+                                | ast::Expr::IndexExpr(_)\n+                                | ast::Expr::MethodCallExpr(_)\n+                                | ast::Expr::FieldExpr(_)\n+                                | ast::Expr::TryExpr(_)\n+                                | ast::Expr::RefExpr(_)\n+                                | ast::Expr::Literal(_)\n+                                | ast::Expr::TupleExpr(_)\n+                                | ast::Expr::ArrayExpr(_)\n+                                | ast::Expr::ParenExpr(_)\n+                                | ast::Expr::PathExpr(_)\n+                                | ast::Expr::BlockExpr(_)\n+                                | ast::Expr::EffectExpr(_),\n+                            _\n+                        ) | (\n+                            _,\n+                            ast::Expr::CallExpr(_)\n+                                | ast::Expr::TupleExpr(_)\n+                                | ast::Expr::ArrayExpr(_)\n+                                | ast::Expr::ParenExpr(_)\n+                                | ast::Expr::ForExpr(_)\n+                                | ast::Expr::WhileExpr(_)\n+                                | ast::Expr::BreakExpr(_)\n+                                | ast::Expr::ReturnExpr(_)\n+                                | ast::Expr::MatchExpr(_)\n+                        )\n                     ))\n                 })\n                 .collect::<Option<_>>()"}, {"sha": "29bd4a563f799470c97c5bab530b1eda5a0bef4b", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -179,9 +179,10 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n             \"unresolved assist should not contain source changes\"\n         ),\n         (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n-        (None, ExpectedResult::After(_))\n-        | (None, ExpectedResult::Target(_))\n-        | (None, ExpectedResult::Unresolved) => {\n+        (\n+            None,\n+            ExpectedResult::After(_) | ExpectedResult::Target(_) | ExpectedResult::Unresolved,\n+        ) => {\n             panic!(\"code action is not applicable\")\n         }\n         (None, ExpectedResult::NotApplicable) => (),"}, {"sha": "da3385bdce975e0b880cd96d739df43d3de5d853", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -65,9 +65,11 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     // Don't suggest attribute macros and derives.\n                     hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n                     // no values in type places\n-                    hir::ScopeDef::ModuleDef(hir::ModuleDef::Function(_))\n-                    | hir::ScopeDef::ModuleDef(hir::ModuleDef::Variant(_))\n-                    | hir::ScopeDef::ModuleDef(hir::ModuleDef::Static(_))\n+                    hir::ScopeDef::ModuleDef(\n+                        hir::ModuleDef::Function(_)\n+                        | hir::ModuleDef::Variant(_)\n+                        | hir::ModuleDef::Static(_),\n+                    )\n                     | hir::ScopeDef::Local(_) => !ctx.expects_type(),\n                     // unless its a constant in a generic arg list position\n                     hir::ScopeDef::ModuleDef(hir::ModuleDef::Const(_)) => {\n@@ -81,9 +83,13 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 }\n             }\n         }\n-        hir::PathResolution::Def(def @ hir::ModuleDef::Adt(_))\n-        | hir::PathResolution::Def(def @ hir::ModuleDef::TypeAlias(_))\n-        | hir::PathResolution::Def(def @ hir::ModuleDef::BuiltinType(_)) => {\n+        hir::PathResolution::Def(\n+            def\n+            @\n+            (hir::ModuleDef::Adt(_)\n+            | hir::ModuleDef::TypeAlias(_)\n+            | hir::ModuleDef::BuiltinType(_)),\n+        ) => {\n             if let hir::ModuleDef::Adt(hir::Adt::Enum(e)) = def {\n                 add_enum_variants(acc, ctx, e);\n             }"}, {"sha": "77c6d706fdd4137e7e8eaf9e1ee12d786b43c75b", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -71,9 +71,11 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             // Don't suggest attribute macros and derives.\n             ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n             // no values in type places\n-            ScopeDef::ModuleDef(hir::ModuleDef::Function(_))\n-            | ScopeDef::ModuleDef(hir::ModuleDef::Variant(_))\n-            | ScopeDef::ModuleDef(hir::ModuleDef::Static(_))\n+            ScopeDef::ModuleDef(\n+                hir::ModuleDef::Function(_)\n+                | hir::ModuleDef::Variant(_)\n+                | hir::ModuleDef::Static(_),\n+            )\n             | ScopeDef::Local(_) => !ctx.expects_type(),\n             // unless its a constant in a generic arg list position\n             ScopeDef::ModuleDef(hir::ModuleDef::Const(_))"}, {"sha": "84b2bcf9facc1fc6d71dbe94d5bdb83a24a593dd", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -242,24 +242,23 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_assoc_item(&self) -> bool {\n-        matches!(\n-            self.completion_location,\n-            Some(ImmediateLocation::Trait) | Some(ImmediateLocation::Impl)\n-        )\n+        matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n     }\n \n     pub(crate) fn has_dot_receiver(&self) -> bool {\n         matches!(\n             &self.completion_location,\n-            Some(ImmediateLocation::FieldAccess { receiver, .. }) | Some(ImmediateLocation::MethodCall { receiver,.. })\n+            Some(ImmediateLocation::FieldAccess { receiver, .. } | ImmediateLocation::MethodCall { receiver,.. })\n                 if receiver.is_some()\n         )\n     }\n \n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match &self.completion_location {\n-            Some(ImmediateLocation::MethodCall { receiver, .. })\n-            | Some(ImmediateLocation::FieldAccess { receiver, .. }) => receiver.as_ref(),\n+            Some(\n+                ImmediateLocation::MethodCall { receiver, .. }\n+                | ImmediateLocation::FieldAccess { receiver, .. },\n+            ) => receiver.as_ref(),\n             _ => None,\n         }\n     }\n@@ -283,7 +282,7 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn expects_ident_pat_or_ref_expr(&self) -> bool {\n         matches!(\n             self.completion_location,\n-            Some(ImmediateLocation::IdentPat) | Some(ImmediateLocation::RefExpr)\n+            Some(ImmediateLocation::IdentPat | ImmediateLocation::RefExpr)\n         )\n     }\n \n@@ -294,14 +293,14 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn in_use_tree(&self) -> bool {\n         matches!(\n             self.completion_location,\n-            Some(ImmediateLocation::Use) | Some(ImmediateLocation::UseTree)\n+            Some(ImmediateLocation::Use | ImmediateLocation::UseTree)\n         )\n     }\n \n     pub(crate) fn has_impl_or_trait_prev_sibling(&self) -> bool {\n         matches!(\n             self.prev_sibling,\n-            Some(ImmediatePrevSibling::ImplDefType) | Some(ImmediatePrevSibling::TraitDefName)\n+            Some(ImmediatePrevSibling::ImplDefType | ImmediatePrevSibling::TraitDefName)\n         )\n     }\n \n@@ -318,14 +317,16 @@ impl<'a> CompletionContext<'a> {\n             || self.previous_token_is(T![unsafe])\n             || matches!(\n                 self.prev_sibling,\n-                Some(ImmediatePrevSibling::Attribute) | Some(ImmediatePrevSibling::Visibility)\n+                Some(ImmediatePrevSibling::Attribute | ImmediatePrevSibling::Visibility)\n             )\n             || matches!(\n                 self.completion_location,\n-                Some(ImmediateLocation::Attribute(_))\n-                    | Some(ImmediateLocation::ModDeclaration(_))\n-                    | Some(ImmediateLocation::RecordPat(_))\n-                    | Some(ImmediateLocation::RecordExpr(_))\n+                Some(\n+                    ImmediateLocation::Attribute(_)\n+                        | ImmediateLocation::ModDeclaration(_)\n+                        | ImmediateLocation::RecordPat(_)\n+                        | ImmediateLocation::RecordExpr(_)\n+                )\n             )\n     }\n "}, {"sha": "33d3a5ee188942bf2184646e53d8a379ebe120b0", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -32,7 +32,7 @@ impl Builder {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }\n-        if matches!(ctx.path_call_kind(), Some(CallKind::Expr) | Some(CallKind::Pat))\n+        if matches!(ctx.path_call_kind(), Some(CallKind::Expr | CallKind::Pat))\n             | matches!(\n                 ctx.completion_location,\n                 Some(ImmediateLocation::MethodCall { has_parens: true, .. })"}, {"sha": "b4f2fe9a4a795e90f4e59ae00e8a5ef3c123d56d", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -804,33 +804,17 @@ impl<'a> TtIter<'a> {\n         };\n \n         match (punct.char, second, third) {\n-            ('.', '.', Some('.'))\n-            | ('.', '.', Some('='))\n-            | ('<', '<', Some('='))\n-            | ('>', '>', Some('=')) => {\n+            ('.', '.', Some('.' | '=')) | ('<', '<', Some('=')) | ('>', '>', Some('=')) => {\n                 let tt2 = self.next().unwrap().clone();\n                 let tt3 = self.next().unwrap().clone();\n                 Ok(tt::Subtree { delimiter: None, token_trees: vec![tt, tt2, tt3] }.into())\n             }\n-            ('-', '=', _)\n-            | ('-', '>', _)\n+            ('-' | '!' | '*' | '/' | '&' | '%' | '^' | '+' | '<' | '=' | '>' | '|', '=', _)\n+            | ('-' | '=' | '>', '>', _)\n             | (':', ':', _)\n-            | ('!', '=', _)\n             | ('.', '.', _)\n-            | ('*', '=', _)\n-            | ('/', '=', _)\n             | ('&', '&', _)\n-            | ('&', '=', _)\n-            | ('%', '=', _)\n-            | ('^', '=', _)\n-            | ('+', '=', _)\n             | ('<', '<', _)\n-            | ('<', '=', _)\n-            | ('=', '=', _)\n-            | ('=', '>', _)\n-            | ('>', '=', _)\n-            | ('>', '>', _)\n-            | ('|', '=', _)\n             | ('|', '|', _) => {\n                 let tt2 = self.next().unwrap().clone();\n                 Ok(tt::Subtree { delimiter: None, token_trees: vec![tt, tt2] }.into())"}, {"sha": "ef2d7657a9f9e3252332b2dd8f5754f48f74426b", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -389,7 +389,7 @@ impl VirtualPath {\n \n             match (file_stem, extension) {\n                 (None, None) => None,\n-                (None, Some(_)) | (Some(\"\"), Some(_)) => Some((file_name, None)),\n+                (None | Some(\"\"), Some(_)) => Some((file_name, None)),\n                 (Some(file_stem), extension) => Some((file_stem, extension)),\n             }\n         }"}, {"sha": "64ab12b42a9ac59f9a6367b04b4e078c5705243a", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c8c65139c10e4de44367fead8dff88511e6d46/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c8c65139c10e4de44367fead8dff88511e6d46/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=95c8c65139c10e4de44367fead8dff88511e6d46", "patch": "@@ -8,7 +8,7 @@ use xshell::{cmd, pushd};\n use crate::flags;\n \n // Latest stable, feel free to send a PR if this lags behind.\n-const REQUIRED_RUST_VERSION: u32 = 52;\n+const REQUIRED_RUST_VERSION: u32 = 53;\n \n impl flags::Install {\n     pub(crate) fn run(self) -> Result<()> {"}]}