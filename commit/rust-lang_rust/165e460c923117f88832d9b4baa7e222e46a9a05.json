{"sha": "165e460c923117f88832d9b4baa7e222e46a9a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NWU0NjBjOTIzMTE3Zjg4ODMyZDliNGJhYTdlMjIyZTQ2YTlhMDU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-07T15:41:51Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-11T14:00:42Z"}, "message": "Remove `HAS_NORMALIZABLE_PROJECTION`", "tree": {"sha": "759203d1f489e39688e8d9f1b5235cc95258590b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759203d1f489e39688e8d9f1b5235cc95258590b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165e460c923117f88832d9b4baa7e222e46a9a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165e460c923117f88832d9b4baa7e222e46a9a05", "html_url": "https://github.com/rust-lang/rust/commit/165e460c923117f88832d9b4baa7e222e46a9a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165e460c923117f88832d9b4baa7e222e46a9a05/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "html_url": "https://github.com/rust-lang/rust/commit/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "8c513c696e6aad7545c8ca570c466a2f82a44dc9", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/165e460c923117f88832d9b4baa7e222e46a9a05/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165e460c923117f88832d9b4baa7e222e46a9a05/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=165e460c923117f88832d9b4baa7e222e46a9a05", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::{SubstsRef, UnpackedKind};\n-use crate::ty::{self, Ty, TypeFlags, TypeFoldable, InferConst};\n+use crate::ty::{self, Ty, TypeFlags, InferConst};\n use crate::mir::interpret::ConstValue;\n \n #[derive(Debug)]\n@@ -139,11 +139,6 @@ impl FlagComputation {\n             }\n \n             &ty::Projection(ref data) => {\n-                // currently we can't normalize projections that\n-                // include bound regions, so track those separately.\n-                if !data.has_escaping_bound_vars() {\n-                    self.add_flags(TypeFlags::HAS_NORMALIZABLE_PROJECTION);\n-                }\n                 self.add_flags(TypeFlags::HAS_PROJECTION);\n                 self.add_projection_ty(data);\n             }\n@@ -239,7 +234,7 @@ impl FlagComputation {\n         match c.val {\n             ConstValue::Unevaluated(_, substs) => {\n                 self.add_substs(substs);\n-                self.add_flags(TypeFlags::HAS_NORMALIZABLE_PROJECTION | TypeFlags::HAS_PROJECTION);\n+                self.add_flags(TypeFlags::HAS_PROJECTION);\n             },\n             ConstValue::Infer(infer) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_CT_INFER);"}, {"sha": "721ecc368c7e6b0d5fe6b0fc9def45b955c237a0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/165e460c923117f88832d9b4baa7e222e46a9a05/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165e460c923117f88832d9b4baa7e222e46a9a05/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=165e460c923117f88832d9b4baa7e222e46a9a05", "patch": "@@ -441,20 +441,16 @@ bitflags! {\n \n         /// Present if the type belongs in a local type context.\n         /// Only set for Infer other than Fresh.\n-        const KEEP_IN_LOCAL_TCX  = 1 << 11;\n-\n-        // Is there a projection that does not involve a bound region?\n-        // Currently we can't normalize projections w/ bound regions.\n-        const HAS_NORMALIZABLE_PROJECTION = 1 << 12;\n+        const KEEP_IN_LOCAL_TCX  = 1 << 10;\n \n         /// Does this have any `ReLateBound` regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND = 1 << 13;\n+        const HAS_RE_LATE_BOUND = 1 << 11;\n \n-        const HAS_TY_PLACEHOLDER = 1 << 14;\n+        const HAS_TY_PLACEHOLDER = 1 << 12;\n \n-        const HAS_CT_INFER = 1 << 15;\n-        const HAS_CT_PLACEHOLDER = 1 << 16;\n+        const HAS_CT_INFER = 1 << 13;\n+        const HAS_CT_PLACEHOLDER = 1 << 14;\n \n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_RE_EARLY_BOUND.bits;\n@@ -465,7 +461,6 @@ bitflags! {\n         const NOMINAL_FLAGS     = TypeFlags::HAS_PARAMS.bits |\n                                   TypeFlags::HAS_TY_INFER.bits |\n                                   TypeFlags::HAS_RE_INFER.bits |\n-                                  TypeFlags::HAS_CT_INFER.bits |\n                                   TypeFlags::HAS_RE_PLACEHOLDER.bits |\n                                   TypeFlags::HAS_RE_EARLY_BOUND.bits |\n                                   TypeFlags::HAS_FREE_REGIONS.bits |\n@@ -476,6 +471,7 @@ bitflags! {\n                                   TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n                                   TypeFlags::HAS_RE_LATE_BOUND.bits |\n                                   TypeFlags::HAS_TY_PLACEHOLDER.bits |\n+                                  TypeFlags::HAS_CT_INFER.bits |\n                                   TypeFlags::HAS_CT_PLACEHOLDER.bits;\n     }\n }"}]}