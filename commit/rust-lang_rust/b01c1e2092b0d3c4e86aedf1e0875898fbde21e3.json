{"sha": "b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMWMxZTIwOTJiMGQzYzRlODZhZWRmMWUwODc1ODk4ZmJkZTIxZTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T05:04:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parser: tweak item kind wording", "tree": {"sha": "c45793911cee907f35ecd5ac94355c49ee062744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45793911cee907f35ecd5ac94355c49ee062744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "html_url": "https://github.com/rust-lang/rust/commit/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab84914fe47aa2da615c9e759e686d1a45f8aae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab84914fe47aa2da615c9e759e686d1a45f8aae3", "html_url": "https://github.com/rust-lang/rust/commit/ab84914fe47aa2da615c9e759e686d1a45f8aae3"}], "stats": {"total": 227, "additions": 115, "deletions": 112}, "files": [{"sha": "fce2a1d7a7ee2d4804a7a01f2616f809a3e45c22", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -378,8 +378,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.cx.span_err(\n                     span,\n                     &format!(\n-                        \"expected crate top-level item to be a module after macro expansion, found a {}\",\n-                        kind.descriptive_variant()\n+                        \"expected crate top-level item to be a module after macro expansion, found {} {}\",\n+                        kind.article(), kind.descr()\n                     ),\n                 );\n             }"}, {"sha": "6d2f5ba6baf14d74079485a80059f06560f65fae", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -2500,24 +2500,24 @@ pub enum ItemKind<'hir> {\n }\n \n impl ItemKind<'_> {\n-    pub fn descriptive_variant(&self) -> &str {\n+    pub fn descr(&self) -> &str {\n         match *self {\n             ItemKind::ExternCrate(..) => \"extern crate\",\n-            ItemKind::Use(..) => \"use\",\n+            ItemKind::Use(..) => \"`use` import\",\n             ItemKind::Static(..) => \"static item\",\n             ItemKind::Const(..) => \"constant item\",\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n-            ItemKind::ForeignMod(..) => \"foreign module\",\n-            ItemKind::GlobalAsm(..) => \"global asm\",\n+            ItemKind::ForeignMod(..) => \"extern block\",\n+            ItemKind::GlobalAsm(..) => \"global asm item\",\n             ItemKind::TyAlias(..) => \"type alias\",\n             ItemKind::OpaqueTy(..) => \"opaque type\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Impl { .. } => \"impl\",\n+            ItemKind::Impl { .. } => \"implementation\",\n         }\n     }\n "}, {"sha": "0e0017d4ee56604397c732adc8381d25a37ec09c", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -661,12 +661,7 @@ impl<'a> Parser<'a> {\n                     self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n                     AssocItemKind::Const(a, b)\n                 }\n-                _ => {\n-                    let span = self.sess.source_map().def_span(span);\n-                    self.struct_span_err(span, \"item kind not supported in `trait` or `impl`\")\n-                        .emit();\n-                    return None;\n-                }\n+                _ => return self.error_bad_item_kind(span, &kind, \"`trait` or `impl`\"),\n             };\n             Some(P(Item { attrs, id, span, vis, ident, defaultness, kind, tokens }))\n         }))\n@@ -858,16 +853,19 @@ impl<'a> Parser<'a> {\n                     self.error_on_foreign_const(span, ident);\n                     ForeignItemKind::Static(a, Mutability::Not, b)\n                 }\n-                _ => {\n-                    let span = self.sess.source_map().def_span(span);\n-                    self.struct_span_err(span, \"item kind not supported in `extern` block\").emit();\n-                    return None;\n-                }\n+                _ => return self.error_bad_item_kind(span, &kind, \"`extern` block\"),\n             };\n             Some(P(Item { attrs, id, span, vis, ident, defaultness, kind, tokens }))\n         }))\n     }\n \n+    fn error_bad_item_kind<T>(&self, span: Span, kind: &ItemKind, ctx: &str) -> Option<T> {\n+        let span = self.sess.source_map().def_span(span);\n+        let msg = format!(\"{} not supported in {}\", kind.descr(), ctx);\n+        self.struct_span_err(span, &msg).emit();\n+        return None;\n+    }\n+\n     fn error_on_foreign_const(&self, span: Span, ident: Ident) {\n         self.struct_span_err(ident.span, \"extern items cannot be `const`\")\n             .span_suggestion("}, {"sha": "e0eef1db0f089e474b86b402486c5c8618ba5226", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -601,13 +601,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 hir::ItemKind::Struct(..) => \"constructed\", // Issue #52325\n                 _ => \"used\",\n             };\n-            self.warn_dead_code(\n-                item.hir_id,\n-                span,\n-                item.ident.name,\n-                item.kind.descriptive_variant(),\n-                participle,\n-            );\n+            self.warn_dead_code(item.hir_id, span, item.ident.name, item.kind.descr(), participle);\n         } else {\n             // Only continue if we didn't warn\n             intravisit::walk_item(self, item);"}, {"sha": "99fbac4568e4f3414ca12c98679d79f26ea9b61b", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n             // optional. They inherit stability from their parents when unannotated.\n             hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {}\n \n-            _ => self.check_missing_stability(i.hir_id, i.span, i.kind.descriptive_variant()),\n+            _ => self.check_missing_stability(i.hir_id, i.span, i.kind.descr()),\n         }\n \n         intravisit::walk_item(self, i)"}, {"sha": "f8a27cf71424610c6b40550e6252d1e649e7786b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -2574,23 +2574,34 @@ pub enum ItemKind {\n }\n \n impl ItemKind {\n-    pub fn descriptive_variant(&self) -> &str {\n-        match *self {\n+    pub fn article(&self) -> &str {\n+        use ItemKind::*;\n+        match self {\n+            Use(..) | Static(..) | Const(..) | Fn(..) | Mod(..) | GlobalAsm(..) | TyAlias(..)\n+            | Struct(..) | Union(..) | Trait(..) | TraitAlias(..) | MacroDef(..) => \"a\",\n+            ExternCrate(..) | ForeignMod(..) | Mac(..) | Enum(..) | Impl { .. } => \"an\",\n+        }\n+    }\n+\n+    pub fn descr(&self) -> &str {\n+        match self {\n             ItemKind::ExternCrate(..) => \"extern crate\",\n-            ItemKind::Use(..) => \"use\",\n+            ItemKind::Use(..) => \"`use` import\",\n             ItemKind::Static(..) => \"static item\",\n             ItemKind::Const(..) => \"constant item\",\n             ItemKind::Fn(..) => \"function\",\n             ItemKind::Mod(..) => \"module\",\n-            ItemKind::ForeignMod(..) => \"foreign module\",\n-            ItemKind::GlobalAsm(..) => \"global asm\",\n+            ItemKind::ForeignMod(..) => \"extern block\",\n+            ItemKind::GlobalAsm(..) => \"global asm item\",\n             ItemKind::TyAlias(..) => \"type alias\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Mac(..) | ItemKind::MacroDef(..) | ItemKind::Impl { .. } => \"item\",\n+            ItemKind::Mac(..) => \"item macro invocation\",\n+            ItemKind::MacroDef(..) => \"macro definition\",\n+            ItemKind::Impl { .. } => \"implementation\",\n         }\n     }\n "}, {"sha": "47b9e34305f214f56d22c5d2b6004d3e2c6e4148", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -31,110 +31,110 @@ mod free_items {\n #[cfg(FALSE)]\n extern \"C\" {\n     default extern crate foo; //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR extern crate not supported in `extern` block\n     default use foo; //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR `use` import not supported in `extern` block\n     default static foo: u8; //~ ERROR item cannot be `default`\n     default const foo: u8; //~ ERROR item cannot be `default`\n     //~^ ERROR extern items cannot be `const`\n     default fn foo(); //~ ERROR item cannot be `default`\n     default mod foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR module not supported in `extern` block\n     default extern \"C\" {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR extern block not supported in `extern` block\n     default type foo = u8; //~ ERROR item cannot be `default`\n     default enum foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR enum not supported in `extern` block\n     default struct foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR struct not supported in `extern` block\n     default union foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR union not supported in `extern` block\n     default trait foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR trait not supported in `extern` block\n     default trait foo = Ord; //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR trait alias not supported in `extern` block\n     default impl foo {}\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR implementation not supported in `extern` block\n     default!();\n     default::foo::bar!();\n     default default!(); //~ ERROR item cannot be `default`\n     default default::foo::bar!(); //~ ERROR item cannot be `default`\n     default macro foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR macro definition not supported in `extern` block\n     default macro_rules! foo {} //~ ERROR item cannot be `default`\n-    //~^ ERROR item kind not supported in `extern` block\n+    //~^ ERROR macro definition not supported in `extern` block\n }\n \n #[cfg(FALSE)]\n impl S {\n     default extern crate foo;\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR extern crate not supported in `trait` or `impl`\n     default use foo;\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR `use` import not supported in `trait` or `impl`\n     default static foo: u8;\n     //~^ ERROR associated `static` items are not allowed\n     default const foo: u8;\n     default fn foo();\n     default mod foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR module not supported in `trait` or `impl`\n     default extern \"C\" {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR extern block not supported in `trait` or `impl`\n     default type foo = u8;\n     default enum foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR enum not supported in `trait` or `impl`\n     default struct foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR struct not supported in `trait` or `impl`\n     default union foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR union not supported in `trait` or `impl`\n     default trait foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR trait not supported in `trait` or `impl`\n     default trait foo = Ord;\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR trait alias not supported in `trait` or `impl`\n     default impl foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR implementation not supported in `trait` or `impl`\n     default!();\n     default::foo::bar!();\n     default default!();\n     default default::foo::bar!();\n     default macro foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR macro definition not supported in `trait` or `impl`\n     default macro_rules! foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR macro definition not supported in `trait` or `impl`\n }\n \n #[cfg(FALSE)]\n trait T {\n     default extern crate foo;\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR extern crate not supported in `trait` or `impl`\n     default use foo;\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR `use` import not supported in `trait` or `impl`\n     default static foo: u8;\n     //~^ ERROR associated `static` items are not allowed\n     default const foo: u8;\n     default fn foo();\n     default mod foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR module not supported in `trait` or `impl`\n     default extern \"C\" {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR extern block not supported in `trait` or `impl`\n     default type foo = u8;\n     default enum foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR enum not supported in `trait` or `impl`\n     default struct foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR struct not supported in `trait` or `impl`\n     default union foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR union not supported in `trait` or `impl`\n     default trait foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR trait not supported in `trait` or `impl`\n     default trait foo = Ord;\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR trait alias not supported in `trait` or `impl`\n     default impl foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR implementation not supported in `trait` or `impl`\n     default!();\n     default::foo::bar!();\n     default default!();\n     default default::foo::bar!();\n     default macro foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR macro definition not supported in `trait` or `impl`\n     default macro_rules! foo {}\n-    //~^ ERROR item kind not supported in `trait` or `impl`\n+    //~^ ERROR macro definition not supported in `trait` or `impl`\n }"}, {"sha": "ec569b43d700d2b1dd6cd1564ed73d2ab916fcb6", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -142,7 +142,7 @@ LL |     default extern crate foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: extern crate not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:33:5\n    |\n LL |     default extern crate foo;\n@@ -156,7 +156,7 @@ LL |     default use foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: `use` import not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:35:5\n    |\n LL |     default use foo;\n@@ -204,7 +204,7 @@ LL |     default mod foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: module not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:41:5\n    |\n LL |     default mod foo {}\n@@ -218,7 +218,7 @@ LL |     default extern \"C\" {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: extern block not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:43:5\n    |\n LL |     default extern \"C\" {}\n@@ -240,7 +240,7 @@ LL |     default enum foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: enum not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:46:5\n    |\n LL |     default enum foo {}\n@@ -254,7 +254,7 @@ LL |     default struct foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: struct not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:48:5\n    |\n LL |     default struct foo {}\n@@ -268,7 +268,7 @@ LL |     default union foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: union not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:50:5\n    |\n LL |     default union foo {}\n@@ -282,7 +282,7 @@ LL |     default trait foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: trait not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:52:5\n    |\n LL |     default trait foo {}\n@@ -296,13 +296,13 @@ LL |     default trait foo = Ord;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: trait alias not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:54:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `extern` block\n+error: implementation not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:56:5\n    |\n LL |     default impl foo {}\n@@ -332,7 +332,7 @@ LL |     default macro foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: macro definition not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:62:5\n    |\n LL |     default macro foo {}\n@@ -346,19 +346,19 @@ LL |     default macro_rules! foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item kind not supported in `extern` block\n+error: macro definition not supported in `extern` block\n   --> $DIR/default-on-wrong-item-kind.rs:64:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: extern crate not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:70:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: `use` import not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:72:5\n    |\n LL |     default use foo;\n@@ -370,73 +370,73 @@ error: associated `static` items are not allowed\n LL |     default static foo: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: module not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:78:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: extern block not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:80:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: enum not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:83:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: struct not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:85:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: union not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:87:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: trait not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:89:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: trait alias not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:91:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: implementation not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:93:5\n    |\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:99:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:101:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: extern crate not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:107:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: `use` import not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:109:5\n    |\n LL |     default use foo;\n@@ -448,61 +448,61 @@ error: associated `static` items are not allowed\n LL |     default static foo: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: module not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:115:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: extern block not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:117:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: enum not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:120:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: struct not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:122:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: union not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:124:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: trait not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:126:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: trait alias not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:128:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: implementation not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:130:5\n    |\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:136:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:138:5\n    |\n LL |     default macro_rules! foo {}"}, {"sha": "b26e5134db6cc787a010961fb4de2074603a7f0a", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -4,10 +4,10 @@ impl T for () { //~ ERROR cannot find trait `T` in this scope\n \n fn foo(&self) {}\n \n-trait T { //~ ERROR item kind not supported in `trait` or `impl`\n+trait T { //~ ERROR trait not supported in `trait` or `impl`\n     fn foo(&self);\n }\n \n-pub(crate) struct Bar<T>(); //~ ERROR item kind not supported in `trait` or `impl`\n+pub(crate) struct Bar<T>(); //~ ERROR struct not supported in `trait` or `impl`\n \n //~ ERROR this file contains an unclosed delimiter"}, {"sha": "b1bd1a784be34be65240eacc277cccbefc29b44a", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -7,13 +7,13 @@ LL | impl T for () {\n LL |\n    |                                                    ^\n \n-error: item kind not supported in `trait` or `impl`\n+error: trait not supported in `trait` or `impl`\n   --> $DIR/missing-close-brace-in-impl-trait.rs:7:1\n    |\n LL | trait T {\n    | ^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: struct not supported in `trait` or `impl`\n   --> $DIR/missing-close-brace-in-impl-trait.rs:11:1\n    |\n LL | pub(crate) struct Bar<T>();"}, {"sha": "d52add273981dc593dba57a0891e2173ea33a220", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -2,10 +2,10 @@ trait T {\n     fn foo(&self);\n \n pub(crate) struct Bar<T>();\n-//~^ ERROR item kind not supported in `trait` or `impl`\n+//~^ ERROR struct not supported in `trait` or `impl`\n \n impl T for Bar<usize> {\n-//~^ ERROR item kind not supported in `trait` or `impl`\n+//~^ ERROR implementation not supported in `trait` or `impl`\n fn foo(&self) {}\n }\n "}, {"sha": "49c685f254956de8f0f92426bacf1a7b5b0f1288", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "patch": "@@ -7,13 +7,13 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                 ^\n \n-error: item kind not supported in `trait` or `impl`\n+error: struct not supported in `trait` or `impl`\n   --> $DIR/missing-close-brace-in-trait.rs:4:1\n    |\n LL | pub(crate) struct Bar<T>();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item kind not supported in `trait` or `impl`\n+error: implementation not supported in `trait` or `impl`\n   --> $DIR/missing-close-brace-in-trait.rs:7:1\n    |\n LL | impl T for Bar<usize> {"}]}