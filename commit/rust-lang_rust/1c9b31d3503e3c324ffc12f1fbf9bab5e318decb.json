{"sha": "1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "node_id": "C_kwDOAAsO6NoAKDFjOWIzMWQzNTAzZTNjMzI0ZmZjMTJmMWZiZjliYWI1ZTMxOGRlY2I", "commit": {"author": {"name": "Piotr Mikulski", "email": "piotr@near.org", "date": "2021-12-31T06:39:53Z"}, "committer": {"name": "Piotr Mikulski", "email": "piotr@near.org", "date": "2022-01-16T17:59:29Z"}, "message": "New line: cloned_next", "tree": {"sha": "fe02bd48908b433267f6b2b7fa97183a0717f96b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe02bd48908b433267f6b2b7fa97183a0717f96b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "html_url": "https://github.com/rust-lang/rust/commit/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/comments", "author": {"login": "pmnoxx", "id": 7828365, "node_id": "MDQ6VXNlcjc4MjgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7828365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmnoxx", "html_url": "https://github.com/pmnoxx", "followers_url": "https://api.github.com/users/pmnoxx/followers", "following_url": "https://api.github.com/users/pmnoxx/following{/other_user}", "gists_url": "https://api.github.com/users/pmnoxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmnoxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmnoxx/subscriptions", "organizations_url": "https://api.github.com/users/pmnoxx/orgs", "repos_url": "https://api.github.com/users/pmnoxx/repos", "events_url": "https://api.github.com/users/pmnoxx/events{/privacy}", "received_events_url": "https://api.github.com/users/pmnoxx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmnoxx", "id": 7828365, "node_id": "MDQ6VXNlcjc4MjgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7828365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmnoxx", "html_url": "https://github.com/pmnoxx", "followers_url": "https://api.github.com/users/pmnoxx/followers", "following_url": "https://api.github.com/users/pmnoxx/following{/other_user}", "gists_url": "https://api.github.com/users/pmnoxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmnoxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmnoxx/subscriptions", "organizations_url": "https://api.github.com/users/pmnoxx/orgs", "repos_url": "https://api.github.com/users/pmnoxx/repos", "events_url": "https://api.github.com/users/pmnoxx/events{/privacy}", "received_events_url": "https://api.github.com/users/pmnoxx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d27bd846c61b50a2df3470360e6ed0613a5815f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d27bd846c61b50a2df3470360e6ed0613a5815f", "html_url": "https://github.com/rust-lang/rust/commit/0d27bd846c61b50a2df3470360e6ed0613a5815f"}], "stats": {"total": 307, "additions": 292, "deletions": 15}, "files": [{"sha": "258a8256f53177752b46ed1914cd5a1789e639aa", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -3049,6 +3049,7 @@ Released 2018-09-13\n [`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n [`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n+[`iter_overeager_cloned`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits"}, {"sha": "eba51099496f0584385ce969b605a119c2929aad", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -156,6 +156,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::ITER_NEXT_SLICE),\n     LintId::of(methods::ITER_NTH),\n     LintId::of(methods::ITER_NTH_ZERO),\n+    LintId::of(methods::ITER_OVEREAGER_CLONED),\n     LintId::of(methods::ITER_SKIP_NEXT),\n     LintId::of(methods::MANUAL_FILTER_MAP),\n     LintId::of(methods::MANUAL_FIND_MAP),"}, {"sha": "56146a0fd3a7525d84cfeb51f2dd08cfdf8119c0", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -288,6 +288,7 @@ store.register_lints(&[\n     methods::ITER_NEXT_SLICE,\n     methods::ITER_NTH,\n     methods::ITER_NTH_ZERO,\n+    methods::ITER_OVEREAGER_CLONED,\n     methods::ITER_SKIP_NEXT,\n     methods::MANUAL_FILTER_MAP,\n     methods::MANUAL_FIND_MAP,"}, {"sha": "c44ef124bfa0ea3bcb1130283606736cc08ebbef", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -14,6 +14,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(methods::EXPECT_FUN_CALL),\n     LintId::of(methods::EXTEND_WITH_DRAIN),\n     LintId::of(methods::ITER_NTH),\n+    LintId::of(methods::ITER_OVEREAGER_CLONED),\n     LintId::of(methods::MANUAL_STR_REPEAT),\n     LintId::of(methods::OR_FUN_CALL),\n     LintId::of(methods::SINGLE_CHAR_PATTERN),"}, {"sha": "ca33bfc643da84a5d3a669eaa163c6fcd718e2df", "filename": "clippy_lints/src/methods/iter_overeager_cloned.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -0,0 +1,62 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n+use itertools::Itertools;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use std::ops::Not;\n+\n+use super::ITER_OVEREAGER_CLONED;\n+use crate::redundant_clone::REDUNDANT_CLONE;\n+\n+/// lint overeager use of `cloned()` for `Iterator`s\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    recv: &'tcx hir::Expr<'_>,\n+    name: &str,\n+    map_arg: &[hir::Expr<'_>],\n+) {\n+    // Check if it's iterator and get type associated with `Item`.\n+    let inner_ty = match get_iterator_item_ty(cx, cx.typeck_results().expr_ty_adjusted(recv)) {\n+        Some(ty) => ty,\n+        _ => return,\n+    };\n+\n+    match inner_ty.kind() {\n+        ty::Ref(_, ty, _) if !is_copy(cx, ty) => {},\n+        _ => return,\n+    };\n+\n+    let (lint, preserve_cloned) = match name {\n+        \"count\" => (REDUNDANT_CLONE, false),\n+        _ => (ITER_OVEREAGER_CLONED, true),\n+    };\n+    let wildcard_params = map_arg.is_empty().not().then(|| \"...\").unwrap_or_default();\n+    let msg = format!(\n+        \"called `cloned().{}({})` on an `Iterator`. It may be more efficient to call `{}({}){}` instead\",\n+        name,\n+        wildcard_params,\n+        name,\n+        wildcard_params,\n+        preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n+    );\n+\n+    span_lint_and_sugg(\n+        cx,\n+        lint,\n+        expr.span,\n+        &msg,\n+        \"try this\",\n+        format!(\n+            \"{}.{}({}){}\",\n+            snippet(cx, recv.span, \"..\"),\n+            name,\n+            map_arg.iter().map(|a| snippet(cx, a.span, \"..\")).join(\", \"),\n+            preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}"}, {"sha": "cff625112e5c10b3338803190f690a5554009d47", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 76, "deletions": 15, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -30,6 +30,7 @@ mod iter_count;\n mod iter_next_slice;\n mod iter_nth;\n mod iter_nth_zero;\n+mod iter_overeager_cloned;\n mod iter_skip_next;\n mod iterator_step_by_zero;\n mod manual_saturating_arithmetic;\n@@ -106,6 +107,41 @@ declare_clippy_lint! {\n     \"used `cloned` where `copied` could be used instead\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usage of `_.cloned().<func>()` where call to `.cloned()` can be postponed.\n+    ///\n+    /// ### Why is this bad?\n+    /// It's often inefficient to clone all elements of an iterator, when eventually, only some\n+    /// of them will be consumed.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    /// # let vec = vec![\"string\".to_string()];\n+    ///\n+    /// // Bad\n+    /// vec.iter().cloned().take(10);\n+    ///\n+    /// // Good\n+    /// vec.iter().take(10).cloned();\n+    ///\n+    /// // Bad\n+    /// vec.iter().cloned().last();\n+    ///\n+    /// // Good\n+    /// vec.iter().last().cloned();\n+    ///\n+    /// ```\n+    /// ### Known Problems\n+    /// This `lint` removes the side of effect of cloning items in the iterator.\n+    /// A code that relies on that side-effect could fail.\n+    ///\n+    #[clippy::version = \"1.59.0\"]\n+    pub ITER_OVEREAGER_CLONED,\n+    perf,\n+    \"using `cloned()` early with `Iterator::iter()` can lead to some performance inefficiencies\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usages of `Iterator::flat_map()` where `filter_map()` could be\n@@ -1950,6 +1986,7 @@ impl_lint_pass!(Methods => [\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n+    ITER_OVEREAGER_CLONED,\n     CLONED_INSTEAD_OF_COPIED,\n     FLAT_MAP_OPTION,\n     INEFFICIENT_TO_STRING,\n@@ -2243,9 +2280,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 },\n                 _ => {},\n             },\n-            (\"count\", []) => match method_call(recv) {\n-                Some((name @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n-                    iter_count::check(cx, expr, recv2, name);\n+            (name @ \"count\", args @ []) => match method_call(recv) {\n+                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                Some((name2 @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n+                    iter_count::check(cx, expr, recv2, name2);\n                 },\n                 Some((\"map\", [_, arg], _)) => suspicious_map::check(cx, expr, recv, arg),\n                 _ => {},\n@@ -2266,10 +2304,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 flat_map_identity::check(cx, expr, arg, span);\n                 flat_map_option::check(cx, expr, arg, span);\n             },\n-            (\"flatten\", []) => {\n-                if let Some((\"map\", [recv, map_arg], _)) = method_call(recv) {\n-                    map_flatten::check(cx, expr, recv, map_arg);\n-                }\n+            (name @ \"flatten\", args @ []) => match method_call(recv) {\n+                Some((\"map\", [recv, map_arg], _)) => map_flatten::check(cx, expr, recv, map_arg),\n+                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                _ => {},\n             },\n             (\"fold\", [init, acc]) => unnecessary_fold::check(cx, expr, init, acc, span),\n             (\"for_each\", [_]) => {\n@@ -2281,6 +2319,13 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n             (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n             (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n+            (\"last\", args @ []) => {\n+                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                    if let (\"cloned\", []) = (name2, args2) {\n+                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                    }\n+                }\n+            },\n             (\"map\", [m_arg]) => {\n                 if let Some((name, [recv2, args @ ..], span2)) = method_call(recv) {\n                     match (name, args) {\n@@ -2296,20 +2341,22 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 map_identity::check(cx, expr, recv, m_arg, span);\n             },\n             (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n-            (\"next\", []) => {\n-                if let Some((name, [recv, args @ ..], _)) = method_call(recv) {\n-                    match (name, args) {\n-                        (\"filter\", [arg]) => filter_next::check(cx, expr, recv, arg),\n-                        (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv, arg, msrv),\n-                        (\"iter\", []) => iter_next_slice::check(cx, expr, recv),\n-                        (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv, arg),\n+            (name @ \"next\", args @ []) => {\n+                if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n+                    match (name2, args2) {\n+                        (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                        (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n+                        (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, msrv),\n+                        (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n+                        (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n                         (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n                         _ => {},\n                     }\n                 }\n             },\n-            (\"nth\", [n_arg]) => match method_call(recv) {\n+            (\"nth\", args @ [n_arg]) => match method_call(recv) {\n                 Some((\"bytes\", [recv2], _)) => bytes_nth::check(cx, expr, recv2, n_arg),\n+                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n                 Some((\"iter\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, false),\n                 Some((\"iter_mut\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, true),\n                 _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n@@ -2320,6 +2367,13 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"or\");\n                 }\n             },\n+            (\"skip\", args) => {\n+                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                    if let (\"cloned\", []) = (name2, args2) {\n+                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                    }\n+                }\n+            },\n             (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n                 if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n                     suspicious_splitn::check(cx, name, expr, recv, count);\n@@ -2337,6 +2391,13 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 }\n             },\n             (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n+            (\"take\", args @ [_arg]) => {\n+                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                    if let (\"cloned\", []) = (name2, args2) {\n+                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                    }\n+                }\n+            },\n             (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                 implicit_clone::check(cx, name, expr, recv);\n             },"}, {"sha": "a9041671101b5006f437f516f3280545a6f67413", "filename": "tests/ui/iter_overeager_cloned.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/tests%2Fui%2Fiter_overeager_cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/tests%2Fui%2Fiter_overeager_cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.fixed?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![warn(clippy::iter_overeager_cloned, clippy::redundant_clone, clippy::filter_next)]\n+\n+fn main() {\n+    let vec = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n+\n+    let _: Option<String> = vec.iter().last().cloned();\n+\n+    let _: Option<String> = vec.iter().chain(vec.iter()).next().cloned();\n+\n+    let _: usize = vec.iter().filter(|x| x == &\"2\").count();\n+\n+    let _: Vec<_> = vec.iter().take(2).cloned().collect();\n+\n+    let _: Vec<_> = vec.iter().skip(2).cloned().collect();\n+\n+    let _ = vec.iter().filter(|x| x == &\"2\").nth(2).cloned();\n+\n+    let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+        .iter().flatten().cloned();\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().filter(|x| x.starts_with('2'));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().map(|x| x.len());\n+\n+    // This would fail if changed.\n+    let _ = vec.iter().cloned().map(|x| x + \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().find(|x| x == \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().for_each(|x| assert!(!x.is_empty()));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().all(|x| x.len() == 1);\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().any(|x| x.len() == 1);\n+\n+    // Should probably stay as it is.\n+    let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+}"}, {"sha": "dd04e33a4b3aeedb8901b55a5d7e49f4d611852f", "filename": "tests/ui/iter_overeager_cloned.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/tests%2Fui%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/tests%2Fui%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.rs?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -0,0 +1,47 @@\n+// run-rustfix\n+#![warn(clippy::iter_overeager_cloned, clippy::redundant_clone, clippy::filter_next)]\n+\n+fn main() {\n+    let vec = vec![\"1\".to_string(), \"2\".to_string(), \"3\".to_string()];\n+\n+    let _: Option<String> = vec.iter().cloned().last();\n+\n+    let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n+\n+    let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n+\n+    let _: Vec<_> = vec.iter().cloned().take(2).collect();\n+\n+    let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n+\n+    let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n+\n+    let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+        .iter()\n+        .cloned()\n+        .flatten();\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().filter(|x| x.starts_with('2'));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().map(|x| x.len());\n+\n+    // This would fail if changed.\n+    let _ = vec.iter().cloned().map(|x| x + \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().find(|x| x == \"2\");\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().for_each(|x| assert!(!x.is_empty()));\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().all(|x| x.len() == 1);\n+\n+    // Not implemented yet\n+    let _ = vec.iter().cloned().any(|x| x.len() == 1);\n+\n+    // Should probably stay as it is.\n+    let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+}"}, {"sha": "e36b0e36fbdf98c6f4346682bd3a44df84ffac3a", "filename": "tests/ui/iter_overeager_cloned.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/tests%2Fui%2Fiter_overeager_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b31d3503e3c324ffc12f1fbf9bab5e318decb/tests%2Fui%2Fiter_overeager_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.stderr?ref=1c9b31d3503e3c324ffc12f1fbf9bab5e318decb", "patch": "@@ -0,0 +1,58 @@\n+error: called `cloned().last()` on an `Iterator`. It may be more efficient to call `last().cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:7:29\n+   |\n+LL |     let _: Option<String> = vec.iter().cloned().last();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().last().cloned()`\n+   |\n+   = note: `-D clippy::iter-overeager-cloned` implied by `-D warnings`\n+\n+error: called `cloned().next()` on an `Iterator`. It may be more efficient to call `next().cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:9:29\n+   |\n+LL |     let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().chain(vec.iter()).next().cloned()`\n+\n+error: called `cloned().count()` on an `Iterator`. It may be more efficient to call `count()` instead\n+  --> $DIR/iter_overeager_cloned.rs:11:20\n+   |\n+LL |     let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").count()`\n+   |\n+   = note: `-D clippy::redundant-clone` implied by `-D warnings`\n+\n+error: called `cloned().take(...)` on an `Iterator`. It may be more efficient to call `take(...).cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:13:21\n+   |\n+LL |     let _: Vec<_> = vec.iter().cloned().take(2).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().take(2).cloned()`\n+\n+error: called `cloned().skip(...)` on an `Iterator`. It may be more efficient to call `skip(...).cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:15:21\n+   |\n+LL |     let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().skip(2).cloned()`\n+\n+error: called `cloned().nth(...)` on an `Iterator`. It may be more efficient to call `nth(...).cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:17:13\n+   |\n+LL |     let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").nth(2).cloned()`\n+\n+error: called `cloned().flatten()` on an `Iterator`. It may be more efficient to call `flatten().cloned()` instead\n+  --> $DIR/iter_overeager_cloned.rs:19:13\n+   |\n+LL |       let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+   |  _____________^\n+LL | |         .iter()\n+LL | |         .cloned()\n+LL | |         .flatten();\n+   | |__________________^\n+   |\n+help: try this\n+   |\n+LL ~     let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n+LL ~         .iter().flatten().cloned();\n+   |\n+\n+error: aborting due to 7 previous errors\n+"}]}