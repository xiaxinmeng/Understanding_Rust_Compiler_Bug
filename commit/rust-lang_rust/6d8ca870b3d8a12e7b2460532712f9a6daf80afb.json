{"sha": "6d8ca870b3d8a12e7b2460532712f9a6daf80afb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOGNhODcwYjNkOGExMmU3YjI0NjA1MzI3MTJmOWE2ZGFmODBhZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-18T11:07:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-18T11:07:13Z"}, "message": "More Source", "tree": {"sha": "29058558657d34698b587b5781797981e01da74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29058558657d34698b587b5781797981e01da74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8ca870b3d8a12e7b2460532712f9a6daf80afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8ca870b3d8a12e7b2460532712f9a6daf80afb", "html_url": "https://github.com/rust-lang/rust/commit/6d8ca870b3d8a12e7b2460532712f9a6daf80afb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8ca870b3d8a12e7b2460532712f9a6daf80afb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "614c034ffc3a7120f125eede8323f01c8f4411d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/614c034ffc3a7120f125eede8323f01c8f4411d3", "html_url": "https://github.com/rust-lang/rust/commit/614c034ffc3a7120f125eede8323f01c8f4411d3"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "4703cfaf728b6e9a2f9675916fb3d3d9478c445e", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6d8ca870b3d8a12e7b2460532712f9a6daf80afb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8ca870b3d8a12e7b2460532712f9a6daf80afb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=6d8ca870b3d8a12e7b2460532712f9a6daf80afb", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{AssocItem, Either, FieldSource, HasSource, ModuleSource};\n+use hir::{AssocItem, Either, FieldSource, HasSource, ModuleSource, Source};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n@@ -79,7 +79,8 @@ impl NavigationTarget {\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n-            let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n+            let (file_id, text_range) =\n+                find_range_from_node(db, src.as_ref().map(|it| it.syntax()));\n             return NavigationTarget::from_syntax(\n                 file_id,\n                 name,\n@@ -147,8 +148,9 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n-        let focus_range = node.name().map(|it| find_range_from_node(db, file_id, it.syntax()).1);\n-        let (file_id, full_range) = find_range_from_node(db, file_id, node.syntax());\n+        let focus_range =\n+            node.name().map(|it| find_range_from_node(db, Source::new(file_id, it.syntax())).1);\n+        let (file_id, full_range) = find_range_from_node(db, Source::new(file_id, node.syntax()));\n \n         NavigationTarget::from_syntax(\n             file_id,\n@@ -230,9 +232,9 @@ impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match src.ast {\n+        match &src.ast {\n             ModuleSource::SourceFile(node) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+                let (file_id, text_range) = find_range_from_node(db, src.with_ast(node.syntax()));\n \n                 NavigationTarget::from_syntax(\n                     file_id,\n@@ -245,7 +247,7 @@ impl ToNav for hir::Module {\n                 )\n             }\n             ModuleSource::Module(node) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n+                let (file_id, text_range) = find_range_from_node(db, src.with_ast(node.syntax()));\n \n                 NavigationTarget::from_syntax(\n                     file_id,\n@@ -264,7 +266,7 @@ impl ToNav for hir::Module {\n impl ToNav for hir::ImplBlock {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let (file_id, text_range) = find_range_from_node(db, src.file_id, src.ast.syntax());\n+        let (file_id, text_range) = find_range_from_node(db, src.as_ref().map(|it| it.syntax()));\n \n         NavigationTarget::from_syntax(\n             file_id,\n@@ -282,16 +284,16 @@ impl ToNav for hir::StructField {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n \n-        match src.ast {\n+        match &src.ast {\n             FieldSource::Named(it) => NavigationTarget::from_named(\n                 db,\n                 src.file_id,\n-                &it,\n+                it,\n                 it.doc_comment_text(),\n                 it.short_label(),\n             ),\n             FieldSource::Pos(it) => {\n-                let (file_id, text_range) = find_range_from_node(db, src.file_id, it.syntax());\n+                let (file_id, text_range) = find_range_from_node(db, src.with_ast(it.syntax()));\n                 NavigationTarget::from_syntax(\n                     file_id,\n                     \"\".into(),\n@@ -360,16 +362,13 @@ impl ToNav for hir::Local {\n     }\n }\n \n-fn find_range_from_node(\n-    db: &RootDatabase,\n-    src: hir::HirFileId,\n-    node: &SyntaxNode,\n-) -> (FileId, TextRange) {\n-    let text_range = node.text_range();\n-    let (file_id, text_range) = src\n+fn find_range_from_node(db: &RootDatabase, node: Source<&SyntaxNode>) -> (FileId, TextRange) {\n+    let text_range = node.ast.text_range();\n+    let (file_id, text_range) = node\n+        .file_id\n         .expansion_info(db)\n         .and_then(|expansion_info| expansion_info.find_range(text_range))\n-        .unwrap_or((src, text_range));\n+        .unwrap_or((node.file_id, text_range));\n \n     // FIXME: handle recursive macro generated macro\n     (file_id.original_file(db), text_range)"}]}