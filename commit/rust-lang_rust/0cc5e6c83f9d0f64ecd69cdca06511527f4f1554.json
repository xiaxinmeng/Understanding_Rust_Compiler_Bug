{"sha": "0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzVlNmM4M2Y5ZDBmNjRlY2Q2OWNkY2EwNjUxMTUyN2Y0ZjE1NTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T19:16:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T19:26:31Z"}, "message": "Remove resolve's xray infrastructure\n\nSince the removal of privacy from resolve, this flag is no longer necessary to\nget the test runner working. All of the privacy checks are bypassed by a special\nitem attribute in the privacy visitor.\n\nCloses #4947", "tree": {"sha": "944d86241594d719927f3564f69a8763f0d528c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944d86241594d719927f3564f69a8763f0d528c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "html_url": "https://github.com/rust-lang/rust/commit/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9b95fada7c97ac1c63099bab1d45ba120958ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9b95fada7c97ac1c63099bab1d45ba120958ec", "html_url": "https://github.com/rust-lang/rust/commit/4d9b95fada7c97ac1c63099bab1d45ba120958ec"}], "stats": {"total": 28, "additions": 0, "deletions": 28}, "files": [{"sha": "4861fa19f7e8f58f5dd8fb4c8e312c362403e215", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc5e6c83f9d0f64ecd69cdca06511527f4f1554/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0cc5e6c83f9d0f64ecd69cdca06511527f4f1554", "patch": "@@ -25,7 +25,6 @@ use syntax::ast::*;\n use syntax::ast;\n use syntax::ast_util::{def_id_of_def, local_def, mtwt_resolve};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n-use syntax::attr;\n use syntax::parse::token;\n use syntax::parse::token::{ident_interner, interner_get};\n use syntax::parse::token::special_idents;\n@@ -254,19 +253,6 @@ enum MethodSort {\n     Provided(NodeId)\n }\n \n-// The X-ray flag indicates that a context has the X-ray privilege, which\n-// allows it to reference private names. Currently, this is used for the test\n-// runner.\n-//\n-// FIXME #4947: The X-ray flag is kind of questionable in the first\n-// place. It might be better to introduce an expr_xray_path instead.\n-\n-#[deriving(Eq)]\n-enum XrayFlag {\n-    NoXray,     //< Private items cannot be accessed.\n-    Xray        //< Private items can be accessed.\n-}\n-\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n@@ -831,7 +817,6 @@ fn Resolver(session: Session,\n         type_ribs: @mut ~[],\n         label_ribs: @mut ~[],\n \n-        xray_context: NoXray,\n         current_trait_refs: None,\n \n         self_ident: special_idents::self_,\n@@ -883,10 +868,6 @@ struct Resolver {\n     // The current set of local scopes, for labels.\n     label_ribs: @mut ~[@Rib],\n \n-    // Whether the current context is an X-ray context. An X-ray context is\n-    // allowed to access private names of any module.\n-    xray_context: XrayFlag,\n-\n     // The trait that the current context can refer to.\n     current_trait_refs: Option<~[DefId]>,\n \n@@ -3545,13 +3526,6 @@ impl Resolver {\n         debug!(\"(resolving item) resolving {}\",\n                self.session.str_of(item.ident));\n \n-        // Items with the !resolve_unexported attribute are X-ray contexts.\n-        // This is used to allow the test runner to run unexported tests.\n-        let orig_xray_flag = self.xray_context;\n-        if attr::contains_name(item.attrs, \"!resolve_unexported\") {\n-            self.xray_context = Xray;\n-        }\n-\n         match item.node {\n \n             // enum item: resolve all the variants' discrs,\n@@ -3715,8 +3689,6 @@ impl Resolver {\n             fail!(\"item macros unimplemented\")\n           }\n         }\n-\n-        self.xray_context = orig_xray_flag;\n     }\n \n     fn with_type_parameter_rib(&mut self,"}]}