{"sha": "0335a94a6803b83f3ec91391aea5473c9846bb18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMzVhOTRhNjgwM2I4M2YzZWM5MTM5MWFlYTU0NzNjOTg0NmJiMTg=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-05-30T20:13:34Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-06-07T18:58:47Z"}, "message": "doc: improve some of str examples", "tree": {"sha": "b5b36681c9cbe2074045c98d10ef228358150508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b36681c9cbe2074045c98d10ef228358150508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0335a94a6803b83f3ec91391aea5473c9846bb18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0335a94a6803b83f3ec91391aea5473c9846bb18", "html_url": "https://github.com/rust-lang/rust/commit/0335a94a6803b83f3ec91391aea5473c9846bb18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0335a94a6803b83f3ec91391aea5473c9846bb18/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "474c6e0ae47578b3e608c893e18bc83798b565aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/474c6e0ae47578b3e608c893e18bc83798b565aa", "html_url": "https://github.com/rust-lang/rust/commit/474c6e0ae47578b3e608c893e18bc83798b565aa"}], "stats": {"total": 78, "additions": 28, "deletions": 50}, "files": [{"sha": "a98cc5611da122254e50845c895a4d7469757032", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 28, "deletions": 50, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0335a94a6803b83f3ec91391aea5473c9846bb18/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335a94a6803b83f3ec91391aea5473c9846bb18/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=0335a94a6803b83f3ec91391aea5473c9846bb18", "patch": "@@ -636,17 +636,20 @@ impl str {\n     ///\n     /// let v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\n     /// assert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n-    /// ```\n-    ///\n-    /// More complex patterns with closures:\n     ///\n-    /// ```\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\n     /// assert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\n     /// assert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n     /// ```\n+    ///\n+    /// A more complex pattern, using a closure:\n+    ///\n+    /// ```\n+    /// let v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\n+    /// assert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(&self[..], pat)\n@@ -687,14 +690,11 @@ impl str {\n     /// assert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n     /// ```\n     ///\n-    /// More complex patterns with closures:\n+    /// A more complex pattern, using a closure:\n     ///\n-    /// ```rust\n-    /// let v: Vec<&str> = \"abc1def2ghi\".rsplit(|c: char| c.is_numeric()).collect();\n+    /// ```\n+    /// let v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\n     /// assert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n-    ///\n-    /// let v: Vec<&str> = \"lionXtigerXleopard\".rsplit(char::is_uppercase).collect();\n-    /// assert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n@@ -729,22 +729,13 @@ impl str {\n     ///\n     /// # Examples\n     ///\n-    /// Simple patterns:\n-    ///\n     /// ```\n     /// let v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\n     /// assert_eq!(v, [\"A\", \"B\"]);\n     ///\n     /// let v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\n     /// assert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n     /// ```\n-    ///\n-    /// More complex patterns with closures:\n-    ///\n-    /// ```\n-    /// let v: Vec<&str> = \"abc1def2ghi3\".split_terminator(|c: char| c.is_numeric()).collect();\n-    /// assert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n-    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n         core_str::StrExt::split_terminator(&self[..], pat)\n@@ -774,22 +765,13 @@ impl str {\n     ///\n     /// # Examples\n     ///\n-    /// Simple patterns:\n-    ///\n     /// ```\n     /// let v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\n     /// assert_eq!(v, [\"B\", \"A\"]);\n     ///\n     /// let v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\n     /// assert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n     /// ```\n-    ///\n-    /// More complex patterns with closures:\n-    ///\n-    /// ```\n-    /// let v: Vec<&str> = \"abc1def2ghi3\".rsplit_terminator(|c: char| c.is_numeric()).collect();\n-    /// assert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n-    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n@@ -833,11 +815,11 @@ impl str {\n     /// assert_eq!(v, [\"\"]);\n     /// ```\n     ///\n-    /// More complex patterns with closures:\n+    /// A more complex pattern, using a closure:\n     ///\n     /// ```\n-    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(2, |c: char| c.is_numeric()).collect();\n-    /// assert_eq!(v, [\"abc\", \"def2ghi\"]);\n+    /// let v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\n+    /// assert_eq!(v, [\"abc\", \"defXghi\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> {\n@@ -878,10 +860,10 @@ impl str {\n     /// assert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n     /// ```\n     ///\n-    /// More complex patterns with closures:\n+    /// A more complex pattern, using a closure:\n     ///\n     /// ```\n-    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(2, |c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\n     /// assert_eq!(v, [\"ghi\", \"abc1def\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -916,7 +898,7 @@ impl str {\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\n     /// assert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n     ///\n-    /// let v: Vec<&str> = \"1abc2abc3\".matches(|c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\n     /// assert_eq!(v, [\"1\", \"2\", \"3\"]);\n     /// ```\n     #[unstable(feature = \"collections\",\n@@ -949,7 +931,7 @@ impl str {\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\n     /// assert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n     ///\n-    /// let v: Vec<&str> = \"1abc2abc3\".rmatches(|c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\n     /// assert_eq!(v, [\"3\", \"2\", \"1\"]);\n     /// ```\n     #[unstable(feature = \"collections\",\n@@ -1195,15 +1177,16 @@ impl str {\n     ///\n     /// ```\n     /// assert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\n+    /// assert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n     ///\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n     /// ```\n     ///\n-    /// More complex patterns with closures:\n+    /// A more complex pattern, using a closure:\n     ///\n     /// ```\n-    /// assert_eq!(\"123foo1bar123\".trim_matches(|c: char| c.is_numeric()), \"foo1bar\");\n+    /// assert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n@@ -1220,20 +1203,13 @@ impl str {\n     ///\n     /// # Examples\n     ///\n-    /// Simple patterns:\n-    ///\n     /// ```\n     /// assert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\n+    /// assert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n     ///\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n     /// ```\n-    ///\n-    /// More complex patterns with closures:\n-    ///\n-    /// ```\n-    /// assert_eq!(\"123foo1bar123\".trim_left_matches(|c: char| c.is_numeric()), \"foo1bar123\");\n-    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n         core_str::StrExt::trim_left_matches(&self[..], pat)\n@@ -1251,14 +1227,16 @@ impl str {\n     ///\n     /// ```\n     /// assert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\n+    /// assert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n+    ///\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n     /// ```\n     ///\n-    /// More complex patterns with closures:\n+    /// A more complex pattern, using a closure:\n     ///\n     /// ```\n-    /// assert_eq!(\"123foo1bar123\".trim_right_matches(|c: char| c.is_numeric()), \"123foo1bar\");\n+    /// assert_eq!(\"1fooX\".trim_left_matches(|c| c == '1' || c == 'X'), \"fooX\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n@@ -1494,7 +1472,7 @@ impl str {\n     /// ```\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n-    /// assert_eq!(s.find(|c: char| c.is_whitespace()), Some(5));\n+    /// assert_eq!(s.find(char::is_whitespace), Some(5));\n     /// assert_eq!(s.find(char::is_lowercase), Some(1));\n     /// ```\n     ///\n@@ -1536,7 +1514,7 @@ impl str {\n     /// ```\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n-    /// assert_eq!(s.rfind(|c: char| c.is_whitespace()), Some(12));\n+    /// assert_eq!(s.rfind(char::is_whitespace), Some(12));\n     /// assert_eq!(s.rfind(char::is_lowercase), Some(20));\n     /// ```\n     ///"}]}