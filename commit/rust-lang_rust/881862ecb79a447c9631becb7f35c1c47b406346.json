{"sha": "881862ecb79a447c9631becb7f35c1c47b406346", "node_id": "C_kwDOAAsO6NoAKDg4MTg2MmVjYjc5YTQ0N2M5NjMxYmVjYjdmMzVjMWM0N2I0MDYzNDY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T18:12:12Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-27T07:14:49Z"}, "message": "Rename `fn_trait_kind_from_{from_lang=>def_id}` to better convey meaning", "tree": {"sha": "bb79090a9faae94868c216bbd372e2096dc2bdcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb79090a9faae94868c216bbd372e2096dc2bdcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881862ecb79a447c9631becb7f35c1c47b406346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881862ecb79a447c9631becb7f35c1c47b406346", "html_url": "https://github.com/rust-lang/rust/commit/881862ecb79a447c9631becb7f35c1c47b406346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881862ecb79a447c9631becb7f35c1c47b406346/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9eee68111ec742c3d60bb96078994c494a59fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9eee68111ec742c3d60bb96078994c494a59fb", "html_url": "https://github.com/rust-lang/rust/commit/0e9eee68111ec742c3d60bb96078994c494a59fb"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "11a5f2b0d90e73b47aa9374ccea9d66f3c9d5c41", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 });\n                 let kind = object_type\n                     .principal_def_id()\n-                    .and_then(|did| self.tcx.fn_trait_kind_from_lang_item(did));\n+                    .and_then(|did| self.tcx.fn_trait_kind_from_def_id(did));\n                 (sig, kind)\n             }\n             ty::Infer(ty::TyVar(vid)) => self.deduce_signature_from_predicates(\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => None,\n             };\n             if let Some(closure_kind) =\n-                trait_def_id.and_then(|def_id| self.tcx.fn_trait_kind_from_lang_item(def_id))\n+                trait_def_id.and_then(|def_id| self.tcx.fn_trait_kind_from_def_id(def_id))\n             {\n                 expected_kind = Some(\n                     expected_kind\n@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let trait_def_id = projection.trait_def_id(tcx);\n \n-        let is_fn = tcx.fn_trait_kind_from_lang_item(trait_def_id).is_some();\n+        let is_fn = tcx.fn_trait_kind_from_def_id(trait_def_id).is_some();\n         let gen_trait = tcx.require_lang_item(LangItem::Generator, cause_span);\n         let is_gen = gen_trait == trait_def_id;\n         if !is_fn && !is_gen {"}, {"sha": "3a74ac51b2c27196198e999feedb5c672c21a1a0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -401,7 +401,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 if self_ty.value.is_closure()\n                     && self\n                         .tcx()\n-                        .fn_trait_kind_from_lang_item(expected_trait_ref.value.def_id)\n+                        .fn_trait_kind_from_def_id(expected_trait_ref.value.def_id)\n                         .is_some()\n                 {\n                     let closure_sig = self_ty.map(|closure| {"}, {"sha": "e1bcb74b281c4de886bb317f92e8a7929d925280", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -27,7 +27,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    pub fn fn_trait_kind_from_lang_item(self, id: DefId) -> Option<ty::ClosureKind> {\n+    pub fn fn_trait_kind_from_def_id(self, id: DefId) -> Option<ty::ClosureKind> {\n         let items = self.lang_items();\n         match Some(id) {\n             x if x == items.fn_trait() => Some(ty::ClosureKind::Fn),"}, {"sha": "6afb8bdc45743671184642be3b019bc36fb9ed4c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -1085,7 +1085,7 @@ pub trait PrettyPrinter<'tcx>:\n                 let mut resugared = false;\n \n                 // Special-case `Fn(...) -> ...` and re-sugar it.\n-                let fn_trait_kind = cx.tcx().fn_trait_kind_from_lang_item(principal.def_id);\n+                let fn_trait_kind = cx.tcx().fn_trait_kind_from_def_id(principal.def_id);\n                 if !cx.should_print_verbose() && fn_trait_kind.is_some() {\n                     if let ty::Tuple(tys) = principal.substs.type_at(0).kind() {\n                         let mut projections = predicates.projection_bounds();"}, {"sha": "a115bb2831a4b2c1c1ec7dc04d4015495200a30e", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -37,7 +37,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n         }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n-            let adjustment = match tcx.fn_trait_kind_from_lang_item(trait_) {\n+            let adjustment = match tcx.fn_trait_kind_from_def_id(trait_) {\n                 Some(ty::ClosureKind::FnOnce) => Adjustment::Identity,\n                 Some(ty::ClosureKind::FnMut | ty::ClosureKind::Fn) => Adjustment::Deref,\n                 None => bug!(\"fn pointer {:?} is not an fn\", ty),"}, {"sha": "c466e1e29ad8014531e7452f53afe6279660c540", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -2155,7 +2155,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n                         && !snippet.ends_with('>')\n                         && !generics.has_impl_trait()\n-                        && !self.tcx.fn_trait_kind_from_lang_item(def_id).is_some()\n+                        && !self.tcx.fn_trait_kind_from_def_id(def_id).is_some()\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't"}, {"sha": "07ba4d0c3b856871c746181df7f62cd63374f000", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -1680,7 +1680,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs)\n-                    if infcx.tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n+                    if infcx.tcx.fn_trait_kind_from_def_id(trait_ref.def_id()).is_some() =>\n                 {\n                     infcx.tcx.mk_fn_sig(\n                         inputs.iter(),"}, {"sha": "460ca923c6e29cca8f915d6ee92f87159e66ae2f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -451,7 +451,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        let Some(kind) = self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) else {\n+        let Some(kind) = self.tcx().fn_trait_kind_from_def_id(obligation.predicate.def_id()) else {\n             return;\n         };\n \n@@ -489,7 +489,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         // We provide impl of all fn traits for fn pointers.\n-        if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {\n+        if self.tcx().fn_trait_kind_from_def_id(obligation.predicate.def_id()).is_none() {\n             return;\n         }\n "}, {"sha": "28e742688a9145ad1169261ffb045bdbfb005775", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -735,7 +735,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<ImplSourceClosureData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         let kind = self\n             .tcx()\n-            .fn_trait_kind_from_lang_item(obligation.predicate.def_id())\n+            .fn_trait_kind_from_def_id(obligation.predicate.def_id())\n             .unwrap_or_else(|| bug!(\"closure candidate for non-fn trait {:?}\", obligation));\n \n         // Okay to skip binder because the substs on closure types never"}, {"sha": "c6f2b16ca210226db5b9482d7233e87676418292", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -209,7 +209,7 @@ fn resolve_associated_item<'tcx>(\n             substs: future_data.substs,\n         }),\n         traits::ImplSource::Closure(closure_data) => {\n-            let trait_closure_kind = tcx.fn_trait_kind_from_lang_item(trait_id).unwrap();\n+            let trait_closure_kind = tcx.fn_trait_kind_from_def_id(trait_id).unwrap();\n             Instance::resolve_closure(\n                 tcx,\n                 closure_data.closure_def_id,"}, {"sha": "d540d828d3b103c2ce12f5de127179357fc239c4", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881862ecb79a447c9631becb7f35c1c47b406346/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881862ecb79a447c9631becb7f35c1c47b406346/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=881862ecb79a447c9631becb7f35c1c47b406346", "patch": "@@ -106,7 +106,7 @@ fn external_generic_args<'tcx>(\n ) -> GenericArgs {\n     let args = substs_to_args(cx, substs, has_self);\n \n-    if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n+    if cx.tcx.fn_trait_kind_from_def_id(did).is_some() {\n         let inputs =\n             // The trait's first substitution is the one after self, if there is one.\n             match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {"}]}