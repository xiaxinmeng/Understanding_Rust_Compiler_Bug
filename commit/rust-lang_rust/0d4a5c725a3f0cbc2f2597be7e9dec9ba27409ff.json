{"sha": "0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "node_id": "C_kwDOAAsO6NoAKDBkNGE1YzcyNWEzZjBjYmMyZjI1OTdiZTdlOWRlYzliYTI3NDA5ZmY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T21:33:19Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T15:40:27Z"}, "message": "Make `deref_into_dyn_supertrait` lint the impl and not the usage", "tree": {"sha": "2c6378893e44776023fa55507815f71edb03ccd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6378893e44776023fa55507815f71edb03ccd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "html_url": "https://github.com/rust-lang/rust/commit/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a5386256c3d9bf835cf51f0798dfffa51d00f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a5386256c3d9bf835cf51f0798dfffa51d00f0", "html_url": "https://github.com/rust-lang/rust/commit/11a5386256c3d9bf835cf51f0798dfffa51d00f0"}], "stats": {"total": 166, "additions": 102, "deletions": 64}, "files": [{"sha": "74081f2da6fee192c7249d9a80cece43a8c81464", "filename": "compiler/rustc_lint/src/deref_into_dyn_supertrait.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs?ref=0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "patch": "@@ -0,0 +1,85 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+use rustc_errors::DelayDm;\n+use rustc_hir as hir;\n+use rustc_middle::{traits::util::supertraits, ty};\n+\n+declare_lint! {\n+    /// The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n+    /// `Deref` implementation with a `dyn SuperTrait` type as `Output`.\n+    ///\n+    /// These implementations will become shadowed when the `trait_upcasting` feature is stabilized.\n+    /// The `deref` functions will no longer be called implicitly, so there might be behavior change.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(deref_into_dyn_supertrait)]\n+    /// #![allow(dead_code)]\n+    ///\n+    /// use core::ops::Deref;\n+    ///\n+    /// trait A {}\n+    /// trait B: A {}\n+    /// impl<'a> Deref for dyn 'a + B {\n+    ///     type Target = dyn A;\n+    ///     fn deref(&self) -> &Self::Target {\n+    ///         todo!()\n+    ///     }\n+    /// }\n+    ///\n+    /// fn take_a(_: &dyn A) { }\n+    ///\n+    /// fn take_b(b: &dyn B) {\n+    ///     take_a(b);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The dyn upcasting coercion feature adds new coercion rules, taking priority\n+    /// over certain other coercion rules, which will cause some behavior change.\n+    pub DEREF_INTO_DYN_SUPERTRAIT,\n+    Warn,\n+    \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n+    };\n+}\n+\n+declare_lint_pass!(DerefIntoDynSupertrait => [DEREF_INTO_DYN_SUPERTRAIT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DerefIntoDynSupertrait {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        // `Deref` is being implemented for `t`\n+        if let hir::ItemKind::Impl(impl_) = item.kind\n+            && let Some(trait_) = &impl_.of_trait\n+            && let t = cx.tcx.type_of(item.owner_id)\n+            && let opt_did @ Some(did) = trait_.trait_def_id()\n+            && opt_did == cx.tcx.lang_items().deref_trait()\n+            // `t` is `dyn t_principal`\n+            && let ty::Dynamic(data, _, ty::Dyn) = t.kind()\n+            && let Some(t_principal) = data.principal()\n+            // `<T as Deref>::Target` is `dyn target_principal`\n+            && let Some(target) = cx.get_associated_type(t, did, \"Target\")\n+            && let ty::Dynamic(data, _, ty::Dyn) = target.kind()\n+            && let Some(target_principal) = data.principal()\n+            // `target_principal` is a supertrait of `t_principal`\n+            && supertraits(cx.tcx, t_principal.with_self_ty(cx.tcx, cx.tcx.types.trait_object_dummy_self))\n+                .any(|sup| sup.map_bound(|x| ty::ExistentialTraitRef::erase_self_ty(cx.tcx, x)) == target_principal)\n+        {\n+            cx.struct_span_lint(\n+                DEREF_INTO_DYN_SUPERTRAIT,\n+                item.span,\n+                DelayDm(|| {\n+                    format!(\n+                        \"`{t}` implements `Deref` with supertrait `{target_principal}` as output\"\n+                    )\n+                }),\n+                |lint| lint,\n+            )\n+        }\n+    }\n+}"}, {"sha": "b6027476adfd97f3d2f8c05062fc1d652d44d890", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "patch": "@@ -49,6 +49,7 @@ extern crate tracing;\n mod array_into_iter;\n pub mod builtin;\n mod context;\n+mod deref_into_dyn_supertrait;\n mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n@@ -87,6 +88,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use deref_into_dyn_supertrait::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n@@ -192,6 +194,7 @@ macro_rules! late_lint_mod_passes {\n             $args,\n             [\n                 ForLoopsOverFallibles: ForLoopsOverFallibles,\n+                DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n                 HardwiredLints: HardwiredLints,\n                 ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n                 ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "df0e17dea3c051495593062c68485307b168bf01", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "patch": "@@ -3262,7 +3262,6 @@ declare_lint_pass! {\n         UNUSED_TUPLE_STRUCT_FIELDS,\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n-        DEREF_INTO_DYN_SUPERTRAIT,\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n         DUPLICATE_MACRO_ATTRIBUTES,\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n@@ -3764,51 +3763,6 @@ declare_lint! {\n     \"invisible directionality-changing codepoints in comment\"\n }\n \n-declare_lint! {\n-    /// The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n-    /// `Deref` implementation with a `dyn SuperTrait` type as `Output`.\n-    ///\n-    /// These implementations will become shadowed when the `trait_upcasting` feature is stabilized.\n-    /// The `deref` functions will no longer be called implicitly, so there might be behavior change.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #![deny(deref_into_dyn_supertrait)]\n-    /// #![allow(dead_code)]\n-    ///\n-    /// use core::ops::Deref;\n-    ///\n-    /// trait A {}\n-    /// trait B: A {}\n-    /// impl<'a> Deref for dyn 'a + B {\n-    ///     type Target = dyn A;\n-    ///     fn deref(&self) -> &Self::Target {\n-    ///         todo!()\n-    ///     }\n-    /// }\n-    ///\n-    /// fn take_a(_: &dyn A) { }\n-    ///\n-    /// fn take_b(b: &dyn B) {\n-    ///     take_a(b);\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// The dyn upcasting coercion feature adds new coercion rules, taking priority\n-    /// over certain other coercion rules, which will cause some behavior change.\n-    pub DEREF_INTO_DYN_SUPERTRAIT,\n-    Warn,\n-    \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n-    };\n-}\n-\n declare_lint! {\n     /// The `duplicate_macro_attributes` lint detects when a `#[test]`-like built-in macro\n     /// attribute is duplicated on an item. This lint may trigger on `bench`, `cfg_eval`, `test`"}, {"sha": "93abd3cb8e1501fc5a33bb71ab492bdf5c8d9a2b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "patch": "@@ -6,11 +6,9 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use hir::LangItem;\n-use rustc_errors::DelayDm;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n-use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_target::spec::abi::Abi;\n@@ -811,16 +809,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             &obligation.cause,\n                         ) {\n                             if deref_trait_ref.def_id() == target_trait_did {\n-                                self.tcx().struct_span_lint_hir(\n-                                    DEREF_INTO_DYN_SUPERTRAIT,\n-                                    obligation.cause.body_id,\n-                                    obligation.cause.span,\n-                                    DelayDm(|| format!(\n-                                        \"`{}` implements `Deref` with supertrait `{}` as output\",\n-                                        source, deref_trait_ref\n-                                    )),\n-                                    |lint| lint,\n-                                );\n                                 return;\n                             }\n                         }"}, {"sha": "ae36115be7b562f54464743434be91e365895f2c", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs?ref=0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "patch": "@@ -7,7 +7,11 @@ use core::ops::Deref;\n // issue 89190\n trait A {}\n trait B: A {}\n+\n impl<'a> Deref for dyn 'a + B {\n+    //~^ ERROR `(dyn B + 'a)` implements `Deref` with supertrait `A` as output\n+    //~| WARN this was previously accepted by the compiler but is being phased out;\n+\n     type Target = dyn A;\n     fn deref(&self) -> &Self::Target {\n         todo!()\n@@ -18,8 +22,6 @@ fn take_a(_: &dyn A) {}\n \n fn whoops(b: &dyn B) {\n     take_a(b)\n-    //~^ ERROR `dyn B` implements `Deref` with supertrait `A` as output\n-    //~^^ WARN this was previously accepted by the compiler but is being phased out;\n }\n \n fn main() {}"}, {"sha": "03317d09eb6821ab497accba221d8d34972efad5", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr?ref=0d4a5c725a3f0cbc2f2597be7e9dec9ba27409ff", "patch": "@@ -1,8 +1,14 @@\n-error: `dyn B` implements `Deref` with supertrait `A` as output\n-  --> $DIR/migrate-lint-deny.rs:20:12\n+error: `(dyn B + 'a)` implements `Deref` with supertrait `A` as output\n+  --> $DIR/migrate-lint-deny.rs:11:1\n    |\n-LL |     take_a(b)\n-   |            ^\n+LL | / impl<'a> Deref for dyn 'a + B {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #89460 <https://github.com/rust-lang/rust/issues/89460>"}]}