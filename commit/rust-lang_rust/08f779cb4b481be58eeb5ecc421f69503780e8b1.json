{"sha": "08f779cb4b481be58eeb5ecc421f69503780e8b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Zjc3OWNiNGI0ODFiZTU4ZWViNWVjYzQyMWY2OTUwMzc4MGU4YjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T11:16:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T11:16:08Z"}, "message": "better comment and rename BoxMeUp::box_me_up to take_box", "tree": {"sha": "95896dbd33e56152d8f42a065317b70f7a3f5aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95896dbd33e56152d8f42a065317b70f7a3f5aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f779cb4b481be58eeb5ecc421f69503780e8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f779cb4b481be58eeb5ecc421f69503780e8b1", "html_url": "https://github.com/rust-lang/rust/commit/08f779cb4b481be58eeb5ecc421f69503780e8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f779cb4b481be58eeb5ecc421f69503780e8b1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5d0c7b102d2573165efdbd2ffc31c4a5be3bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5d0c7b102d2573165efdbd2ffc31c4a5be3bb5", "html_url": "https://github.com/rust-lang/rust/commit/cd5d0c7b102d2573165efdbd2ffc31c4a5be3bb5"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "0abc481f6e53b5e4e373ba64709da974deea25bd", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f779cb4b481be58eeb5ecc421f69503780e8b1/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f779cb4b481be58eeb5ecc421f69503780e8b1/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=08f779cb4b481be58eeb5ecc421f69503780e8b1", "patch": "@@ -266,6 +266,8 @@ impl fmt::Display for Location<'_> {\n #[unstable(feature = \"std_internals\", issue = \"0\")]\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n-    fn box_me_up(&mut self) -> *mut (dyn Any + Send);\n+    /// The return type is actually `Box<dyn Any + Send>`, but we cannot use `Box` in libcore.\n+    /// After this method got called, only some dummy default value is left in `self`.\n+    fn take_box(&mut self) -> *mut (dyn Any + Send);\n     fn get(&mut self) -> &(dyn Any + Send);\n }"}, {"sha": "0c834e5c2a05c3bce0e2cd7b45e14efda6b8f582", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f779cb4b481be58eeb5ecc421f69503780e8b1/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f779cb4b481be58eeb5ecc421f69503780e8b1/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=08f779cb4b481be58eeb5ecc421f69503780e8b1", "patch": "@@ -94,5 +94,5 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n #[unwind(allowed)]\n pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n     let payload = payload as *mut &mut dyn BoxMeUp;\n-    imp::panic(Box::from_raw((*payload).box_me_up()))\n+    imp::panic(Box::from_raw((*payload).take_box()))\n }"}, {"sha": "a16eec45b9aa16570f42debab1fa4e4704f1cfda", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08f779cb4b481be58eeb5ecc421f69503780e8b1/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f779cb4b481be58eeb5ecc421f69503780e8b1/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=08f779cb4b481be58eeb5ecc421f69503780e8b1", "patch": "@@ -340,6 +340,7 @@ fn panic_handler(info: &PanicInfo<'_>) -> ! {\n             use crate::fmt::Write;\n \n             let inner = self.inner;\n+            // Lazily, the first time this gets called, run the actual string formatting.\n             self.string.get_or_insert_with(|| {\n                 let mut s = String::new();\n                 drop(s.write_fmt(*inner));\n@@ -349,7 +350,7 @@ fn panic_handler(info: &PanicInfo<'_>) -> ! {\n     }\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n             let contents = mem::take(self.fill());\n             Box::into_raw(Box::new(contents))\n         }\n@@ -407,10 +408,10 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n     }\n \n     unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n-        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n             let data = match self.inner.take() {\n                 Some(a) => Box::new(a) as Box<dyn Any + Send>,\n-                None => Box::new(()),\n+                None => Box::new(()), // this should never happen: we got called twice\n             };\n             Box::into_raw(data)\n         }\n@@ -488,7 +489,7 @@ pub fn update_count_then_panic(msg: Box<dyn Any + Send>) -> ! {\n     struct RewrapBox(Box<dyn Any + Send>);\n \n     unsafe impl BoxMeUp for RewrapBox {\n-        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n             Box::into_raw(mem::replace(&mut self.0, Box::new(())))\n         }\n "}]}