{"sha": "2f0618d8c691904d43d99362b164487aba1f644d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMDYxOGQ4YzY5MTkwNGQ0M2Q5OTM2MmIxNjQ0ODdhYmExZjY0NGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T03:02:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T03:02:33Z"}, "message": "Rollup merge of #64726 - andrewbanchich:unimplemented, r=rkruppe\n\nrewrite documentation for unimplemented! to clarify use\n\nThe current docs for `unimplemented!` seem to miss the point of this macro.\n\n> This can be useful if you are prototyping and are just looking to have your code type-check, or if you're implementing a trait that requires multiple methods, and you're only planning on using one of them.\n\nYou could also return a `()` if you just want your code to type-check.\n\nI think `unimplemented!` is useful for when you want your program to exit when it reaches an unimplemented area.\n\nI rewrote the explanation and gave examples of both forms of this macro that I think clarify its use a little better.", "tree": {"sha": "537b90dea6f091f4eb0b1b59ed67804f98011de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/537b90dea6f091f4eb0b1b59ed67804f98011de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f0618d8c691904d43d99362b164487aba1f644d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdm/xKCRBK7hj4Ov3rIwAAdHIIAA7RgF4ghVKavLuH8T6RB/YM\ncjWuCiif8FcV9juD1YwwcqVyaln8CJXIWlBSYJBTvSXk9T+h1IugAciDKvwPWFWC\nPV5VP4Ak2REgNUpbuEg9Yoiyaw7z1HUkJDXvNGbTZXYmT6A8TbY+0eihkNl8zc5V\nocD9e/dHTYdNWcFeAuDDoUUUuRCW9mwYh2ys8pEJ2RIYJLlnH6G/mKQ+Z5IpNfxq\nboyTKMPzpU6sv2vPCH+AV30eHA8isax7NywBBdLDV5RZ5zWv9XkQNkFohJmNdeAa\nPhGIOyvjr8RFq0QTs89Aw6UPV2/tdswmjjZ3jJBcxGSlbeVj3xmKEJBoQ7qzww4=\n=ds16\n-----END PGP SIGNATURE-----\n", "payload": "tree 537b90dea6f091f4eb0b1b59ed67804f98011de9\nparent c20654ebc318004a98303d2d5d84eee8bf44080c\nparent b7091e4f5275fd9e48af8083addcb8b577493656\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570503753 +0200\ncommitter GitHub <noreply@github.com> 1570503753 +0200\n\nRollup merge of #64726 - andrewbanchich:unimplemented, r=rkruppe\n\nrewrite documentation for unimplemented! to clarify use\n\nThe current docs for `unimplemented!` seem to miss the point of this macro.\n\n> This can be useful if you are prototyping and are just looking to have your code type-check, or if you're implementing a trait that requires multiple methods, and you're only planning on using one of them.\n\nYou could also return a `()` if you just want your code to type-check.\n\nI think `unimplemented!` is useful for when you want your program to exit when it reaches an unimplemented area.\n\nI rewrote the explanation and gave examples of both forms of this macro that I think clarify its use a little better.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0618d8c691904d43d99362b164487aba1f644d", "html_url": "https://github.com/rust-lang/rust/commit/2f0618d8c691904d43d99362b164487aba1f644d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f0618d8c691904d43d99362b164487aba1f644d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20654ebc318004a98303d2d5d84eee8bf44080c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20654ebc318004a98303d2d5d84eee8bf44080c", "html_url": "https://github.com/rust-lang/rust/commit/c20654ebc318004a98303d2d5d84eee8bf44080c"}, {"sha": "b7091e4f5275fd9e48af8083addcb8b577493656", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7091e4f5275fd9e48af8083addcb8b577493656", "html_url": "https://github.com/rust-lang/rust/commit/b7091e4f5275fd9e48af8083addcb8b577493656"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "1320e63df0635289d00b1ba756bb35182605de92", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2f0618d8c691904d43d99362b164487aba1f644d/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0618d8c691904d43d99362b164487aba1f644d/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=2f0618d8c691904d43d99362b164487aba1f644d", "patch": "@@ -520,57 +520,74 @@ macro_rules! unreachable {\n     });\n }\n \n-/// Indicates unfinished code.\n+/// Indicates unfinished code by panicking with a message of \"not yet implemented\".\n ///\n-/// This can be useful if you are prototyping and are just looking to have your\n-/// code type-check, or if you're implementing a trait that requires multiple\n-/// methods, and you're only planning on using one of them.\n+/// This allows the your code to type-check, which is useful if you are prototyping or\n+/// implementing a trait that requires multiple methods which you don't plan of using all of.\n ///\n /// There is no difference between `unimplemented!` and `todo!` apart from the\n /// name.\n ///\n /// # Panics\n ///\n-/// This will always [panic!](macro.panic.html)\n+/// This will always [panic!](macro.panic.html) because `unimplemented!` is just a\n+/// shorthand for `panic!` with a fixed, specific message.\n+///\n+/// Like `panic!`, this macro has a second form for displaying custom values.\n ///\n /// # Examples\n ///\n /// Here's an example of some in-progress code. We have a trait `Foo`:\n ///\n /// ```\n /// trait Foo {\n-///     fn bar(&self);\n+///     fn bar(&self) -> u8;\n ///     fn baz(&self);\n+///     fn qux(&self) -> Result<u64, ()>;\n /// }\n /// ```\n ///\n-/// We want to implement `Foo` on one of our types, but we also want to work on\n-/// just `bar()` first. In order for our code to compile, we need to implement\n-/// `baz()`, so we can use `unimplemented!`:\n+/// We want to implement `Foo` for 'MyStruct', but so far we only know how to\n+/// implement the `bar()` function. `baz()` and `qux()` will still need to be defined\n+/// in our implementation of `Foo`, but we can use `unimplemented!` in their definitions\n+/// to allow our code to compile.\n+///\n+/// In the meantime, we want to have our program stop running once these\n+/// unimplemented functions are reached.\n ///\n /// ```\n /// # trait Foo {\n-/// #     fn bar(&self);\n+/// #     fn bar(&self) -> u8;\n /// #     fn baz(&self);\n+/// #     fn qux(&self) -> Result<u64, ()>;\n /// # }\n /// struct MyStruct;\n ///\n /// impl Foo for MyStruct {\n-///     fn bar(&self) {\n-///         // implementation goes here\n+///     fn bar(&self) -> u8 {\n+///         1 + 1\n ///     }\n ///\n ///     fn baz(&self) {\n-///         // let's not worry about implementing baz() for now\n+///         // We aren't sure how to even start writing baz yet,\n+///         // so we have no logic here at all.\n+///         // This will display \"thread 'main' panicked at 'not yet implemented'\".\n ///         unimplemented!();\n ///     }\n+///\n+///     fn qux(&self) -> Result<u64, ()> {\n+///         let n = self.bar();\n+///         // We have some logic here,\n+///         // so we can use unimplemented! to display what we have so far.\n+///         // This will display:\n+///         // \"thread 'main' panicked at 'not yet implemented: we need to divide by 2'\".\n+///         unimplemented!(\"we need to divide by {}\", n);\n+///     }\n /// }\n ///\n /// fn main() {\n ///     let s = MyStruct;\n ///     s.bar();\n-///\n-///     // we aren't even using baz() yet, so this is fine.\n /// }\n /// ```\n #[macro_export]"}]}