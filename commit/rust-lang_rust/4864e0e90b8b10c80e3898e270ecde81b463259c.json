{"sha": "4864e0e90b8b10c80e3898e270ecde81b463259c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjRlMGU5MGI4YjEwYzgwZTM4OThlMjcwZWNkZTgxYjQ2MzI1OWM=", "commit": {"author": {"name": "Raph Levien", "email": "raph@google.com", "date": "2016-04-19T19:25:28Z"}, "committer": {"name": "Raph Levien", "email": "raph@google.com", "date": "2016-04-19T19:25:28Z"}, "message": "Efficient trie lookup for boolean Unicode properties\n\nReplace binary search of ranges with trie lookup using leaves of\n64-bit bitmap chunks. Benchmarks suggest this is approximately 10x\nfaster than the bsearch approach.", "tree": {"sha": "ace72a27ebe63bb3de1c7b717c83129d260f2448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace72a27ebe63bb3de1c7b717c83129d260f2448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4864e0e90b8b10c80e3898e270ecde81b463259c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4864e0e90b8b10c80e3898e270ecde81b463259c", "html_url": "https://github.com/rust-lang/rust/commit/4864e0e90b8b10c80e3898e270ecde81b463259c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4864e0e90b8b10c80e3898e270ecde81b463259c/comments", "author": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2aaad4e2288647c5235754a5e1439a5124978fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2aaad4e2288647c5235754a5e1439a5124978fe", "html_url": "https://github.com/rust-lang/rust/commit/c2aaad4e2288647c5235754a5e1439a5124978fe"}], "stats": {"total": 2502, "additions": 1368, "deletions": 1134}, "files": [{"sha": "406f5380d4693625b9b6975ead0a3200212d3a71", "filename": "src/etc/unicode.py", "status": "modified", "additions": 107, "deletions": 4, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/4864e0e90b8b10c80e3898e270ecde81b463259c/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/4864e0e90b8b10c80e3898e270ecde81b463259c/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=4864e0e90b8b10c80e3898e270ecde81b463259c", "patch": "@@ -307,12 +307,114 @@ def emit_table(f, name, t_data, t_type = \"&'static [(char, char)]\", is_pub=True,\n     format_table_content(f, data, 8)\n     f.write(\"\\n    ];\\n\\n\")\n \n+def emit_trie_lookup_range_table(f):\n+    f.write(\"\"\"\n+pub struct BoolTrie {\n+    // 0..0x800 (corresponding to 1 and 2 byte utf-8 sequences)\n+    r1: [u64; 32],   // leaves\n+\n+    // 0x800..0x10000 (corresponding to 3 byte utf-8 sequences)\n+    r2: [u8; 1024],      // first level\n+    r3: &'static [u64],  // leaves\n+\n+    // 0x10000..0x110000 (corresponding to 4 byte utf-8 sequences)\n+    r4: [u8; 272],       // first level\n+    r5: &'static [u8],   // second level\n+    r6: &'static [u64],  // leaves\n+}\n+\n+fn trie_range_leaf(c: usize, bitmap_chunk: u64) -> bool {\n+    ((bitmap_chunk >> (c & 63)) & 1) != 0\n+}\n+\n+fn trie_lookup_range_table(c: char, r: &'static BoolTrie) -> bool {\n+    let c = c as usize;\n+    if c < 0x800 {\n+        trie_range_leaf(c, r.r1[c >> 8])\n+    } else if c < 0x10000 {\n+        let child = r.r2[c >> 6];\n+        trie_range_leaf(c, r.r3[child as usize])\n+    } else {\n+        let child = r.r4[c >> 12];\n+        let leaf = r.r5[((child as usize) << 6) + ((c >> 6) & 0x3f)];\n+        trie_range_leaf(c, r.r6[leaf as usize])\n+    }\n+}\\n\n+\"\"\")\n+\n+def compute_trie(rawdata, chunksize):\n+    root = []\n+    childmap = {}\n+    child_data = []\n+    for i in range(len(rawdata) / chunksize):\n+        data = rawdata[i * chunksize: (i + 1) * chunksize]\n+        child = '|'.join(map(str, data))\n+        if child not in childmap:\n+            childmap[child] = len(childmap)\n+            child_data.extend(data)\n+        root.append(childmap[child])\n+    return (root, child_data)\n+\n+def emit_bool_trie(f, name, t_data, is_pub=True):\n+    CHUNK = 64\n+    rawdata = [False] * 0x110000;\n+    for (lo, hi) in t_data:\n+        for cp in range(lo, hi + 1):\n+            rawdata[cp] = True\n+\n+    # convert to bitmap chunks of 64 bits each\n+    chunks = []\n+    for i in range(0x110000 / CHUNK):\n+        chunk = 0\n+        for j in range(64):\n+            if rawdata[i * 64 + j]:\n+                chunk |= 1 << j\n+        chunks.append(chunk)\n+\n+    pub_string = \"\"\n+    if is_pub:\n+        pub_string = \"pub \"\n+    f.write(\"    %sconst %s: &'static super::BoolTrie = &super::BoolTrie {\\n\" % (pub_string, name))\n+    f.write(\"        r1: [\\n\")\n+    data = ','.join('0x%016x' % chunk for chunk in chunks[0:0x800 / CHUNK])\n+    format_table_content(f, data, 12)\n+    f.write(\"\\n        ],\\n\")\n+\n+    # 0x800..0x10000 trie\n+    (r2, r3) = compute_trie(chunks[0x800 / CHUNK : 0x10000 / CHUNK], 64 / CHUNK)\n+    f.write(\"        r2: [\\n\")\n+    data = ','.join(str(node) for node in [255] * 32 + r2)\n+    format_table_content(f, data, 12)\n+    f.write(\"\\n        ],\\n\")\n+    f.write(\"        r3: &[\\n\")\n+    data = ','.join('0x%016x' % chunk for chunk in r3)\n+    format_table_content(f, data, 12)\n+    f.write(\"\\n        ],\\n\")\n+\n+    # 0x10000..0x110000 trie\n+    (mid, r6) = compute_trie(chunks[0x10000 / CHUNK : 0x110000 / CHUNK], 64 / CHUNK)\n+    (r4, r5) = compute_trie(mid, 64)\n+    f.write(\"        r4: [\\n\")\n+    data = ','.join(str(node) for node in [255] * 16 + r4)\n+    format_table_content(f, data, 12)\n+    f.write(\"\\n        ],\\n\")\n+    f.write(\"        r5: &[\\n\")\n+    data = ','.join(str(node) for node in r5)\n+    format_table_content(f, data, 12)\n+    f.write(\"\\n        ],\\n\")\n+    f.write(\"        r6: &[\\n\")\n+    data = ','.join('0x%016x' % chunk for chunk in r6)\n+    format_table_content(f, data, 12)\n+    f.write(\"\\n        ],\\n\")\n+\n+    f.write(\"    };\\n\\n\")\n+\n def emit_property_module(f, mod, tbl, emit):\n     f.write(\"pub mod %s {\\n\" % mod)\n     for cat in sorted(emit):\n-        emit_table(f, \"%s_table\" % cat, tbl[cat])\n+        emit_bool_trie(f, \"%s_table\" % cat, tbl[cat])\n         f.write(\"    pub fn %s(c: char) -> bool {\\n\" % cat)\n-        f.write(\"        super::bsearch_range_table(c, %s_table)\\n\" % cat)\n+        f.write(\"        super::trie_lookup_range_table(c, %s_table)\\n\" % cat)\n         f.write(\"    }\\n\\n\")\n     f.write(\"}\\n\\n\")\n \n@@ -402,8 +504,9 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n         norm_props = load_properties(\"DerivedNormalizationProps.txt\",\n                      [\"Full_Composition_Exclusion\"])\n \n-        # bsearch_range_table is used in all the property modules below\n-        emit_bsearch_range_table(rf)\n+        # trie_lookup_table is used in all the property modules below\n+        emit_trie_lookup_range_table(rf)\n+        # emit_bsearch_range_table(rf)\n \n         # category tables\n         for (name, cat, pfuns) in (\"general_category\", gencats, [\"N\", \"Cc\"]), \\"}, {"sha": "a3afa3b56ec9edd8606b03d0cefb1905da453055", "filename": "src/librustc_unicode/tables.rs", "status": "modified", "additions": 1261, "deletions": 1130, "changes": 2391, "blob_url": "https://github.com/rust-lang/rust/blob/4864e0e90b8b10c80e3898e270ecde81b463259c/src%2Flibrustc_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4864e0e90b8b10c80e3898e270ecde81b463259c/src%2Flibrustc_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Ftables.rs?ref=4864e0e90b8b10c80e3898e270ecde81b463259c"}]}