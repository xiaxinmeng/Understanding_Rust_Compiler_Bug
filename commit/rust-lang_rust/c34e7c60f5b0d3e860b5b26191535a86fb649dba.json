{"sha": "c34e7c60f5b0d3e860b5b26191535a86fb649dba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNGU3YzYwZjViMGQzZTg2MGI1YjI2MTkxNTM1YTg2ZmI2NDlkYmE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-05-11T23:20:52Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-05-13T20:11:38Z"}, "message": "Fix v0 symbol mangling bug", "tree": {"sha": "b3cfc2e465cc1b32fba4bce42184faa794b2d77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cfc2e465cc1b32fba4bce42184faa794b2d77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34e7c60f5b0d3e860b5b26191535a86fb649dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34e7c60f5b0d3e860b5b26191535a86fb649dba", "html_url": "https://github.com/rust-lang/rust/commit/c34e7c60f5b0d3e860b5b26191535a86fb649dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34e7c60f5b0d3e860b5b26191535a86fb649dba/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bafe96272bf22cd191c6a01741184b60063292d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bafe96272bf22cd191c6a01741184b60063292d", "html_url": "https://github.com/rust-lang/rust/commit/2bafe96272bf22cd191c6a01741184b60063292d"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "c0690d93c967b7f4ac89d425fa80a2bdeaf3eb3d", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c34e7c60f5b0d3e860b5b26191535a86fb649dba/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34e7c60f5b0d3e860b5b26191535a86fb649dba/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=c34e7c60f5b0d3e860b5b26191535a86fb649dba", "patch": "@@ -485,27 +485,37 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         mut self,\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        for predicate in predicates {\n-            self = self.in_binder(&predicate, |mut cx, predicate| {\n-                match predicate {\n-                    ty::ExistentialPredicate::Trait(trait_ref) => {\n+        let mut predicate_iter = predicates.iter().peekable();\n+        while let Some(predicate) = predicate_iter.next() {\n+            match predicate.as_ref().skip_binder() {\n+                ty::ExistentialPredicate::Trait(trait_ref) => {\n+                    self = self.in_binder(&predicate, |mut cx, _predicate| {\n                         // Use a type that can't appear in defaults of type parameters.\n                         let dummy_self = cx.tcx.mk_ty_infer(ty::FreshTy(0));\n                         let trait_ref = trait_ref.with_self_ty(cx.tcx, dummy_self);\n                         cx = cx.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n-                    }\n-                    ty::ExistentialPredicate::Projection(projection) => {\n-                        let name = cx.tcx.associated_item(projection.item_def_id).ident;\n-                        cx.push(\"p\");\n-                        cx.push_ident(&name.as_str());\n-                        cx = projection.ty.print(cx)?;\n-                    }\n-                    ty::ExistentialPredicate::AutoTrait(def_id) => {\n-                        cx = cx.print_def_path(*def_id, &[])?;\n-                    }\n+                        while let Some(projection_pred) = predicate_iter.next_if(|p| {\n+                            matches!(p.skip_binder(), ty::ExistentialPredicate::Projection(_))\n+                        }) {\n+                            let projection = match projection_pred.skip_binder() {\n+                                ty::ExistentialPredicate::Projection(projection) => projection,\n+                                _ => unreachable!(),\n+                            };\n+                            let name = cx.tcx.associated_item(projection.item_def_id).ident;\n+                            cx.push(\"p\");\n+                            cx.push_ident(&name.as_str());\n+                            cx = projection.ty.print(cx)?;\n+                        }\n+                        Ok(cx)\n+                    })?;\n                 }\n-                Ok(cx)\n-            })?;\n+                ty::ExistentialPredicate::Projection(_) => {\n+                    unreachable!(\"handled in trait predicate arm\")\n+                }\n+                ty::ExistentialPredicate::AutoTrait(def_id) => {\n+                    self = self.print_def_path(*def_id, &[])?;\n+                }\n+            }\n         }\n         self.push(\"E\");\n         Ok(self)"}]}