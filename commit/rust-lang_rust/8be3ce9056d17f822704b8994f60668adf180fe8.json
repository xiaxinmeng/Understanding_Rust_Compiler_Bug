{"sha": "8be3ce9056d17f822704b8994f60668adf180fe8", "node_id": "C_kwDOAAsO6NoAKDhiZTNjZTkwNTZkMTdmODIyNzA0Yjg5OTRmNjA2NjhhZGYxODBmZTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-16T10:10:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-16T10:10:44Z"}, "message": "Auto merge of #102334 - compiler-errors:rpitit-substs-issue, r=cjgillot\n\nFix subst issues with return-position `impl Trait` in trait\n\n1. Fix an issue where we were rebase impl substs onto trait method substs, instead of trait substs\n2. Fix an issue where early-bound regions aren't being mapped correctly for RPITIT hidden types\n\nFixes #102301\nFixes #102310\nFixes #102334\nFixes #102918", "tree": {"sha": "2e44c4254de7ba9ece84cee75e90a3ce92bf2617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e44c4254de7ba9ece84cee75e90a3ce92bf2617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be3ce9056d17f822704b8994f60668adf180fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3ce9056d17f822704b8994f60668adf180fe8", "html_url": "https://github.com/rust-lang/rust/commit/8be3ce9056d17f822704b8994f60668adf180fe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be3ce9056d17f822704b8994f60668adf180fe8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11432fe952cdc531785bd1bf7dc4e8a15da6daab", "url": "https://api.github.com/repos/rust-lang/rust/commits/11432fe952cdc531785bd1bf7dc4e8a15da6daab", "html_url": "https://github.com/rust-lang/rust/commit/11432fe952cdc531785bd1bf7dc4e8a15da6daab"}, {"sha": "4259f333054033b603d9ba80962bd28fa1eee3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/4259f333054033b603d9ba80962bd28fa1eee3af", "html_url": "https://github.com/rust-lang/rust/commit/4259f333054033b603d9ba80962bd28fa1eee3af"}], "stats": {"total": 140, "additions": 117, "deletions": 23}, "files": [{"sha": "60eaad9b498fc49d90be5429be15ed8c799f15f8", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 64, "deletions": 19, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8be3ce9056d17f822704b8994f60668adf180fe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3ce9056d17f822704b8994f60668adf180fe8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=8be3ce9056d17f822704b8994f60668adf180fe8", "patch": "@@ -465,30 +465,30 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     let ocx = ObligationCtxt::new(infcx);\n \n     let norm_cause = ObligationCause::misc(return_span, impl_m_hir_id);\n-    let impl_return_ty = ocx.normalize(\n+    let impl_sig = ocx.normalize(\n         norm_cause.clone(),\n         param_env,\n-        infcx\n-            .replace_bound_vars_with_fresh_vars(\n-                return_span,\n-                infer::HigherRankedType,\n-                tcx.fn_sig(impl_m.def_id),\n-            )\n-            .output(),\n+        infcx.replace_bound_vars_with_fresh_vars(\n+            return_span,\n+            infer::HigherRankedType,\n+            tcx.fn_sig(impl_m.def_id),\n+        ),\n     );\n+    let impl_return_ty = impl_sig.output();\n \n     let mut collector = ImplTraitInTraitCollector::new(&ocx, return_span, param_env, impl_m_hir_id);\n-    let unnormalized_trait_return_ty = tcx\n+    let unnormalized_trait_sig = tcx\n         .liberate_late_bound_regions(\n             impl_m.def_id,\n             tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n-        .output()\n         .fold_with(&mut collector);\n-    let trait_return_ty =\n-        ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_return_ty);\n+    let trait_sig = ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_sig);\n+    let trait_return_ty = trait_sig.output();\n \n-    let wf_tys = FxHashSet::from_iter([unnormalized_trait_return_ty, trait_return_ty]);\n+    let wf_tys = FxHashSet::from_iter(\n+        unnormalized_trait_sig.inputs_and_output.iter().chain(trait_sig.inputs_and_output.iter()),\n+    );\n \n     match infcx.at(&cause, param_env).eq(trait_return_ty, impl_return_ty) {\n         Ok(infer::InferOk { value: (), obligations }) => {\n@@ -521,6 +521,26 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n         }\n     }\n \n+    // Unify the whole function signature. We need to do this to fully infer\n+    // the lifetimes of the return type, but do this after unifying just the\n+    // return types, since we want to avoid duplicating errors from\n+    // `compare_predicate_entailment`.\n+    match infcx\n+        .at(&cause, param_env)\n+        .eq(tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig)), tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig)))\n+    {\n+        Ok(infer::InferOk { value: (), obligations }) => {\n+            ocx.register_obligations(obligations);\n+        }\n+        Err(terr) => {\n+            let guar = tcx.sess.delay_span_bug(\n+                return_span,\n+                format!(\"could not unify `{trait_sig}` and `{impl_sig}`: {terr:?}\"),\n+            );\n+            return Err(guar);\n+        }\n+    }\n+\n     // Check that all obligations are satisfied by the implementation's\n     // RPITs.\n     let errors = ocx.select_all_or_error();\n@@ -551,15 +571,40 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 let id_substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 debug!(?id_substs, ?substs);\n                 let map: FxHashMap<ty::GenericArg<'tcx>, ty::GenericArg<'tcx>> =\n-                    substs.iter().enumerate().map(|(index, arg)| (arg, id_substs[index])).collect();\n+                    std::iter::zip(substs, id_substs).collect();\n                 debug!(?map);\n \n+                // NOTE(compiler-errors): RPITITs, like all other RPITs, have early-bound\n+                // region substs that are synthesized during AST lowering. These are substs\n+                // that are appended to the parent substs (trait and trait method). However,\n+                // we're trying to infer the unsubstituted type value of the RPITIT inside\n+                // the *impl*, so we can later use the impl's method substs to normalize\n+                // an RPITIT to a concrete type (`confirm_impl_trait_in_trait_candidate`).\n+                //\n+                // Due to the design of RPITITs, during AST lowering, we have no idea that\n+                // an impl method corresponds to a trait method with RPITITs in it. Therefore,\n+                // we don't have a list of early-bound region substs for the RPITIT in the impl.\n+                // Since early region parameters are index-based, we can't just rebase these\n+                // (trait method) early-bound region substs onto the impl, and there's no\n+                // guarantee that the indices from the trait substs and impl substs line up.\n+                // So to fix this, we subtract the number of trait substs and add the number of\n+                // impl substs to *renumber* these early-bound regions to their corresponding\n+                // indices in the impl's substitutions list.\n+                //\n+                // Also, we only need to account for a difference in trait and impl substs,\n+                // since we previously enforce that the trait method and impl method have the\n+                // same generics.\n+                let num_trait_substs = trait_to_impl_substs.len();\n+                let num_impl_substs = tcx.generics_of(impl_m.container_id(tcx)).params.len();\n                 let ty = tcx.fold_regions(ty, |region, _| {\n-                    if let ty::ReFree(_) = region.kind() {\n-                        map[&region.into()].expect_region()\n-                    } else {\n-                        region\n-                    }\n+                    let ty::ReFree(_) = region.kind() else { return region; };\n+                    let ty::ReEarlyBound(e) = map[&region.into()].expect_region().kind()\n+                        else { bug!(\"expected ReFree to map to ReEarlyBound\"); };\n+                    tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                        def_id: e.def_id,\n+                        name: e.name,\n+                        index: (e.index as usize - num_trait_substs + num_impl_substs) as u32,\n+                    }))\n                 });\n                 debug!(%ty);\n                 collected_tys.insert(def_id, ty);"}, {"sha": "e552d3f1cc551d0edcd26bd7fa6298a179d82a76", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8be3ce9056d17f822704b8994f60668adf180fe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3ce9056d17f822704b8994f60668adf180fe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=8be3ce9056d17f822704b8994f60668adf180fe8", "patch": "@@ -606,9 +606,21 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         #[cold]\n         #[inline(never)]\n-        fn region_param_out_of_range(data: ty::EarlyBoundRegion) -> ! {\n+        fn region_param_out_of_range(data: ty::EarlyBoundRegion, substs: &[GenericArg<'_>]) -> ! {\n             bug!(\n-                \"Region parameter out of range when substituting in region {} (index={})\",\n+                \"Region parameter out of range when substituting in region {} (index={}, substs = {:?})\",\n+                data.name,\n+                data.index,\n+                substs,\n+            )\n+        }\n+\n+        #[cold]\n+        #[inline(never)]\n+        fn region_param_invalid(data: ty::EarlyBoundRegion, other: GenericArgKind<'_>) -> ! {\n+            bug!(\n+                \"Unexpected parameter {:?} when substituting in region {} (index={})\",\n+                other,\n                 data.name,\n                 data.index\n             )\n@@ -624,7 +636,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 let rk = self.substs.get(data.index as usize).map(|k| k.unpack());\n                 match rk {\n                     Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),\n-                    _ => region_param_out_of_range(data),\n+                    Some(other) => region_param_invalid(data, other),\n+                    None => region_param_out_of_range(data, self.substs),\n                 }\n             }\n             _ => r,"}, {"sha": "693c1728931549d83126278c6693ce511123a83a", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8be3ce9056d17f822704b8994f60668adf180fe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3ce9056d17f822704b8994f60668adf180fe8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8be3ce9056d17f822704b8994f60668adf180fe8", "patch": "@@ -2254,7 +2254,10 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     }\n \n     let impl_fn_def_id = leaf_def.item.def_id;\n-    let impl_fn_substs = obligation.predicate.substs.rebase_onto(tcx, trait_fn_def_id, data.substs);\n+    // Rebase from {trait}::{fn}::{opaque} to {impl}::{fn}::{opaque},\n+    // since `data.substs` are the impl substs.\n+    let impl_fn_substs =\n+        obligation.predicate.substs.rebase_onto(tcx, tcx.parent(trait_fn_def_id), data.substs);\n \n     let cause = ObligationCause::new(\n         obligation.cause.span,"}, {"sha": "49c3e9feeb4c4fab1080fcc7768dd5f29731eb6c", "filename": "src/test/ui/async-await/in-trait/issue-102310.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8be3ce9056d17f822704b8994f60668adf180fe8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102310.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3ce9056d17f822704b8994f60668adf180fe8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102310.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102310.rs?ref=8be3ce9056d17f822704b8994f60668adf180fe8", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait SpiDevice {\n+    async fn transaction<F, R>(&mut self);\n+}\n+\n+impl SpiDevice for () {\n+    async fn transaction<F, R>(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "a93714a658ef0046a6e4d6f3a5f406c7ae6273ab", "filename": "src/test/ui/impl-trait/in-trait/issue-102301.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8be3ce9056d17f822704b8994f60668adf180fe8/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3ce9056d17f822704b8994f60668adf180fe8/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102301.rs?ref=8be3ce9056d17f822704b8994f60668adf180fe8", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<T> {\n+    fn foo<F2: Foo<T>>(self) -> impl Foo<T>;\n+}\n+\n+struct Bar;\n+\n+impl Foo<u8> for Bar {\n+    fn foo<F2: Foo<u8>>(self) -> impl Foo<u8> {\n+        self\n+    }\n+}\n+\n+fn main() {}"}]}