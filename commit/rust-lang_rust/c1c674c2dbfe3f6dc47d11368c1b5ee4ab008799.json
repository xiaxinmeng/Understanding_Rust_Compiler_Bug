{"sha": "c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzY3NGMyZGJmZTNmNmRjNDdkMTEzNjhjMWI1ZWU0YWIwMDg3OTk=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-06-29T08:36:18Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-06-29T08:36:18Z"}, "message": "stabilize const_saturating_int_methods", "tree": {"sha": "e3a9ae977e1bba5d7d4b3a2f8f1bf11d46ceae79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a9ae977e1bba5d7d4b3a2f8f1bf11d46ceae79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "html_url": "https://github.com/rust-lang/rust/commit/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9739b512a892628534e730ffcd9756b3218c8de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9739b512a892628534e730ffcd9756b3218c8de8", "html_url": "https://github.com/rust-lang/rust/commit/9739b512a892628534e730ffcd9756b3218c8de8"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "a156edd516056d93961f5b2abb91a4ff797487c9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "patch": "@@ -78,7 +78,6 @@\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n-#![feature(const_saturating_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_int_pow)]\n #![feature(constctlz)]"}, {"sha": "c4d574c5bc59c5d1f25e1e8cb3be915e48f13e85", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "patch": "@@ -1129,7 +1129,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1155,7 +1155,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_sub(-1), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1183,7 +1183,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[inline]\n             pub const fn saturating_neg(self) -> Self {\n                 intrinsics::saturating_sub(0, self)\n@@ -1209,7 +1209,8 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn saturating_abs(self) -> Self {\n                 if self.is_negative() {\n@@ -1236,9 +1237,10 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn saturating_mul(self, rhs: Self) -> Self {\n                 match self.checked_mul(rhs) {\n@@ -3330,7 +3332,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -3352,7 +3354,7 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -3374,9 +3376,10 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn saturating_mul(self, rhs: Self) -> Self {\n                 match self.checked_mul(rhs) {"}, {"sha": "9b2e30961aae601efce00c830a0d5038bd0e239d", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "patch": "@@ -3,7 +3,6 @@\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n-#![feature(const_saturating_int_methods)]\n #![feature(const_wrapping_int_methods)]\n \n use std::{i8, i128};"}, {"sha": "7edbdd4cec5a549c603f806b3de7c53b8a4cfc74", "filename": "src/test/ui/consts/const-int-saturating-arith.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs?ref=c1c674c2dbfe3f6dc47d11368c1b5ee4ab008799", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_saturating_int_methods)]\n \n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n const INT_U32: u32 = u32::MAX.saturating_add(1);"}]}