{"sha": "a1df1329ced590a287558510878feb17509e09b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZGYxMzI5Y2VkNTkwYTI4NzU1ODUxMDg3OGZlYjE3NTA5ZTA5YjU=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2019-07-17T16:43:10Z"}, "committer": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2019-07-30T15:43:08Z"}, "message": "Deduplicate some error messages", "tree": {"sha": "bad823a79dce9fc965aec168a23e8dbd6ed35563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad823a79dce9fc965aec168a23e8dbd6ed35563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1df1329ced590a287558510878feb17509e09b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1df1329ced590a287558510878feb17509e09b5", "html_url": "https://github.com/rust-lang/rust/commit/a1df1329ced590a287558510878feb17509e09b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1df1329ced590a287558510878feb17509e09b5/comments", "author": null, "committer": null, "parents": [{"sha": "f690098e6d65ad7b33dc7fdefccc387806782027", "url": "https://api.github.com/repos/rust-lang/rust/commits/f690098e6d65ad7b33dc7fdefccc387806782027", "html_url": "https://github.com/rust-lang/rust/commit/f690098e6d65ad7b33dc7fdefccc387806782027"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "78be2de019ab74abadbe71e4057c47a62e9d0ee4", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1df1329ced590a287558510878feb17509e09b5/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1df1329ced590a287558510878feb17509e09b5/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=a1df1329ced590a287558510878feb17509e09b5", "patch": "@@ -527,6 +527,12 @@ pub fn error_to_const_error<'mir, 'tcx>(\n     ConstEvalErr { error: error.kind, stacktrace, span: ecx.tcx.span }\n }\n \n+pub fn note_on_undefined_behavior_error() -> &'static str {\n+    \"The rules on what exactly is undefined behavior aren't clear, \\\n+    so this check might be overzealous. Please open an issue on the rust compiler \\\n+    repository if you believe it should not be considered undefined behavior\"\n+}\n+\n fn validate_and_turn_into_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     constant: RawConst<'tcx>,\n@@ -567,10 +573,7 @@ fn validate_and_turn_into_const<'tcx>(\n         let err = error_to_const_error(&ecx, error);\n         match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\") {\n             Ok(mut diag) => {\n-                diag.note(\"The rules on what exactly is undefined behavior aren't clear, \\\n-                    so this check might be overzealous. Please open an issue on the rust compiler \\\n-                    repository if you believe it should not be considered undefined behavior\",\n-                );\n+                diag.note(note_on_undefined_behavior_error());\n                 diag.emit();\n                 ErrorHandled::Reported\n             }"}, {"sha": "ea32bd0d52ae1f261e09dadcff5bc1d8781dfabf", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1df1329ced590a287558510878feb17509e09b5/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1df1329ced590a287558510878feb17509e09b5/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=a1df1329ced590a287558510878feb17509e09b5", "patch": "@@ -297,11 +297,7 @@ pub fn intern_const_alloc_recursive(\n                 let err = crate::const_eval::error_to_const_error(&ecx, error);\n                 match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\") {\n                     Ok(mut diag) => {\n-                        diag.note(\"The rules on what exactly is undefined behavior aren't clear, \\\n-                            so this check might be overzealous. Please open an issue on the rust \\\n-                            compiler repository if you believe it should not be considered \\\n-                            undefined behavior\",\n-                        );\n+                        diag.note(crate::const_eval::note_on_undefined_behavior_error());\n                         diag.emit();\n                     }\n                     Err(ErrorHandled::TooGeneric) |"}]}