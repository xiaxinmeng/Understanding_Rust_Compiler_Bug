{"sha": "98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjA2Y2ZlMTI2YjFhYzdiNjhlMjU4MTRjM2UyMGM2YjBiM2IxN2M=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-24T08:02:47Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-24T09:34:55Z"}, "message": "Rollup merge of #51011 - QuietMisdreavus:duplicitous-macros, r=ollie27\n\n rustdoc: hide macro export statements from docs\n\nAs mentioned in https://github.com/rust-lang/rust/issues/50647, rustdoc now prints both the import statement and the macro itself when re-exporting macros. This is a stopgap solution to clean up the std docs and get something small backported into beta.\n\nWhat this does: When rustdoc finds an export statement for a macro, instead of printing the export and bailing, now it will instead hide the export and bail. Until we can solve https://github.com/rust-lang/rust/issues/34843 or have a better way to find the attributes on an export statement when inlining macros, this will at least match the current behavior and clean up the re-export statements from the docs.", "tree": {"sha": "009bf1f3c8262b10eb34b91615ee3a53f26cc256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009bf1f3c8262b10eb34b91615ee3a53f26cc256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlsGhz8ACgkQ/vbIBR0O\nATw9hw/6A+GpxrylscM3dFZ6wy2ZH+9AzXNjr6DjpLrQVARcoHwcDW+52j9elfYA\nJfWGZN6282ILoCEMp3sxCaRdVqc5g1t9FwhzihNNg8kjVxJUGxNgDoSbUt7GHrUH\nbkPjPA2+jVtut8RPVQ3NJrz/Jr5OuK+3bQS1kjGIt1uiPv7BImFbef3jEOc0hQtx\nuEjGeSv2pSHtNHobKH6LElkB1del+JiTrClqph185jlvebyGWDCcfsQwE/HekN+/\npeBsNhHRDY813xN00VXQpCQzUffCcQasYQoEsnrkJSGtUagNNhW9Futb5LYCUiLA\ne9+kIPlru7Ae1sA8JaVEH5PF06iiiG0nmKSJ/OXcs5CsduopLXxM43PxUZtdGGpm\niVwMxs1Qom4opO4f//PFpMDfExK5QvGruVAwbDoToSHZavVa/TJDkUPvNX8NE0Zu\nF+qyb9yN3a5gBnSiOuZ++NK2V5qbKscmVRZtoPAoPv+Yn6cZZWTMzyv4IUnAmoTi\nIDX0qzjHLwZ3DXg9SoUfBGmOmcPb0pT5Z89TJqS6aBRhejaY+3+pqHfF65lX6gPo\n6GwQER3b/L9GvggilrzJAElP8OM9TR/oAzyrQfYj72zvgAy8T3Un4dvRh9OL7fZ6\nTiyTkMqnciMLb5BYFhFG9LN3Qg/itbh06UBLOQ8CDEB3aTO7qiw=\n=3UwR\n-----END PGP SIGNATURE-----", "payload": "tree 009bf1f3c8262b10eb34b91615ee3a53f26cc256\nparent 99de8ab38b282b83553a10e5dd0e83976ee33af0\nparent 4cf0c5fa329011b5e8059185d00dc069616c8979\nauthor kennytm <kennytm@gmail.com> 1527148967 +0800\ncommitter kennytm <kennytm@gmail.com> 1527154495 +0800\n\nRollup merge of #51011 - QuietMisdreavus:duplicitous-macros, r=ollie27\n\n rustdoc: hide macro export statements from docs\n\nAs mentioned in https://github.com/rust-lang/rust/issues/50647, rustdoc now prints both the import statement and the macro itself when re-exporting macros. This is a stopgap solution to clean up the std docs and get something small backported into beta.\n\nWhat this does: When rustdoc finds an export statement for a macro, instead of printing the export and bailing, now it will instead hide the export and bail. Until we can solve https://github.com/rust-lang/rust/issues/34843 or have a better way to find the attributes on an export statement when inlining macros, this will at least match the current behavior and clean up the re-export statements from the docs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "html_url": "https://github.com/rust-lang/rust/commit/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99de8ab38b282b83553a10e5dd0e83976ee33af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/99de8ab38b282b83553a10e5dd0e83976ee33af0", "html_url": "https://github.com/rust-lang/rust/commit/99de8ab38b282b83553a10e5dd0e83976ee33af0"}, {"sha": "4cf0c5fa329011b5e8059185d00dc069616c8979", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf0c5fa329011b5e8059185d00dc069616c8979", "html_url": "https://github.com/rust-lang/rust/commit/4cf0c5fa329011b5e8059185d00dc069616c8979"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "f112f3ca2ae53038691efed628e811fda429860d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "patch": "@@ -97,6 +97,9 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n             record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, did))\n         }\n+        // Macros are eagerly inlined back in visit_ast, don't show their export statements\n+        // FIXME(50647): the eager inline does not take doc(hidden)/doc(no_inline) into account\n+        Def::Macro(..) => return Some(Vec::new()),\n         _ => return None,\n     };\n     cx.renderinfo.borrow_mut().inlined.insert(did);"}, {"sha": "8c2555c4b3de27ce9cd9cbf7dd7239be25f0ebda", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "patch": "@@ -219,6 +219,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         if let Some(exports) = self.cx.tcx.module_exports(def_id) {\n             for export in exports.iter().filter(|e| e.vis == Visibility::Public) {\n                 if let Def::Macro(def_id, ..) = export.def {\n+                    // FIXME(50647): this eager macro inlining does not take\n+                    // doc(hidden)/doc(no_inline) into account\n                     if def_id.krate == LOCAL_CRATE {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }\n@@ -237,6 +239,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                         unreachable!()\n                     };\n \n+                    debug!(\"inlining macro {}\", def.ident.name);\n                     om.macros.push(Macro {\n                         def_id,\n                         attrs: def.attrs.clone().into(),\n@@ -561,6 +564,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n \n     // convert each exported_macro into a doc item\n     fn visit_local_macro(&self, def: &hir::MacroDef) -> Macro {\n+        debug!(\"visit_local_macro: {}\", def.name);\n         let tts = def.body.trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();"}, {"sha": "a6e707cc2adea7bc28bc4cb87df31cf7c339f10e", "filename": "src/test/rustdoc/pub-use-extern-macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs?ref=98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "patch": "@@ -15,14 +15,15 @@\n extern crate macros;\n \n // @has pub_use_extern_macros/macro.bar.html\n+// @!has pub_use_extern_macros/index.html '//code' 'pub use macros::bar;'\n pub use macros::bar;\n \n // @has pub_use_extern_macros/macro.baz.html\n-// @!has pub_use_extern_macros/index.html 'pub use macros::baz;'\n+// @!has pub_use_extern_macros/index.html '//code' 'pub use macros::baz;'\n #[doc(inline)]\n pub use macros::baz;\n \n // @has pub_use_extern_macros/macro.quux.html\n-// @!has pub_use_extern_macros/index.html 'pub use macros::quux;'\n+// @!has pub_use_extern_macros/index.html '//code' 'pub use macros::quux;'\n #[doc(hidden)]\n pub use macros::quux;"}]}