{"sha": "801a1a0fc10706ac908e29d66a598ff121a923cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMWExYTBmYzEwNzA2YWM5MDhlMjlkNjZhNTk4ZmYxMjFhOTIzY2Q=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-10-10T19:04:13Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:43:56Z"}, "message": "rustc_trans: remove type_is_fat_ptr and its uses.", "tree": {"sha": "2881b861d552a202bdef91ec95a0a7187ba9f879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2881b861d552a202bdef91ec95a0a7187ba9f879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801a1a0fc10706ac908e29d66a598ff121a923cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801a1a0fc10706ac908e29d66a598ff121a923cd", "html_url": "https://github.com/rust-lang/rust/commit/801a1a0fc10706ac908e29d66a598ff121a923cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801a1a0fc10706ac908e29d66a598ff121a923cd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa67abd12707c34a2def10247c22c336f82cd2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa67abd12707c34a2def10247c22c336f82cd2c2", "html_url": "https://github.com/rust-lang/rust/commit/fa67abd12707c34a2def10247c22c336f82cd2c2"}], "stats": {"total": 74, "additions": 27, "deletions": 47}, "files": [{"sha": "7bd8a0c81ee3438d6c3eac4b9c30e315709a8bef", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/801a1a0fc10706ac908e29d66a598ff121a923cd/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a1a0fc10706ac908e29d66a598ff121a923cd/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=801a1a0fc10706ac908e29d66a598ff121a923cd", "patch": "@@ -41,19 +41,6 @@ use syntax_pos::{Span, DUMMY_SP};\n \n pub use context::{CrateContext, SharedCrateContext};\n \n-pub fn type_is_fat_ptr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.sty {\n-        ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n-        ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n-            !ccx.shared().type_is_sized(ty)\n-        }\n-        ty::TyAdt(def, _) if def.is_box() => {\n-            !ccx.shared().type_is_sized(ty.boxed_ty())\n-        }\n-        _ => false\n-    }\n-}\n-\n pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.needs_drop(tcx, ty::ParamEnv::empty(traits::Reveal::All))\n }"}, {"sha": "0423a684399c2db47d9e8487797711511bd5d053", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/801a1a0fc10706ac908e29d66a598ff121a923cd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a1a0fc10706ac908e29d66a598ff121a923cd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=801a1a0fc10706ac908e29d66a598ff121a923cd", "patch": "@@ -674,10 +674,6 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         operand.llval\n                     }\n                     mir::CastKind::Unsize => {\n-                        // unsize targets other than to a fat pointer currently\n-                        // can't be in constants.\n-                        assert!(common::type_is_fat_ptr(self.ccx, cast_ty));\n-\n                         let pointee_ty = operand.ty.builtin_deref(true, ty::NoPreference)\n                             .expect(\"consts: unsizing got non-pointer type\").ty;\n                         let (base, old_info) = if !self.ccx.shared().type_is_sized(pointee_ty) {\n@@ -760,19 +756,18 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         }\n                     }\n                     mir::CastKind::Misc => { // Casts from a fat-ptr.\n-                        if common::type_is_fat_ptr(self.ccx, operand.ty) {\n+                        let l = self.ccx.layout_of(operand.ty);\n+                        let cast = self.ccx.layout_of(cast_ty);\n+                        if l.is_llvm_scalar_pair() {\n                             let (data_ptr, meta) = operand.get_fat_ptr(self.ccx);\n-                            if common::type_is_fat_ptr(self.ccx, cast_ty) {\n-                                let thin_ptr = self.ccx.layout_of(cast_ty)\n-                                    .field(self.ccx, abi::FAT_PTR_ADDR);\n+                            if cast.is_llvm_scalar_pair() {\n                                 let data_cast = consts::ptrcast(data_ptr,\n-                                    thin_ptr.llvm_type(self.ccx));\n+                                    cast.scalar_pair_element_llvm_type(self.ccx, 0));\n                                 C_fat_ptr(self.ccx, data_cast, meta)\n                             } else { // cast to thin-ptr\n                                 // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n                                 // pointer-cast of that pointer to desired pointer type.\n-                                let llcast_ty = self.ccx.layout_of(cast_ty)\n-                                    .immediate_llvm_type(self.ccx);\n+                                let llcast_ty = cast.immediate_llvm_type(self.ccx);\n                                 consts::ptrcast(data_ptr, llcast_ty)\n                             }\n                         } else {"}, {"sha": "4781425f491f8ef8978eb9626638bdf3d6633ead", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/801a1a0fc10706ac908e29d66a598ff121a923cd/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a1a0fc10706ac908e29d66a598ff121a923cd/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=801a1a0fc10706ac908e29d66a598ff121a923cd", "patch": "@@ -18,7 +18,6 @@ use rustc_apfloat::{ieee, Float, Status, Round};\n use rustc_const_math::MAX_F32_PLUS_HALF_ULP;\n use std::{u128, i128};\n \n-use abi;\n use base;\n use builder::Builder;\n use callee;\n@@ -54,10 +53,10 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                bcx\n            }\n \n-            mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, cast_ty) => {\n-                let cast_ty = self.monomorphize(&cast_ty);\n-\n-                if common::type_is_fat_ptr(bcx.ccx, cast_ty) {\n+            mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, _) => {\n+                // The destination necessarily contains a fat pointer, so if\n+                // it's a scalar pair, it's a fat pointer or newtype thereof.\n+                if dest.layout.is_llvm_scalar_pair() {\n                     // into-coerce of a thin pointer to a fat pointer - just\n                     // use the operand path.\n                     let (bcx, temp) = self.trans_rvalue_operand(bcx, rvalue);\n@@ -223,6 +222,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         operand.val\n                     }\n                     mir::CastKind::Unsize => {\n+                        assert!(cast.is_llvm_scalar_pair());\n                         match operand.val {\n                             OperandValue::Pair(lldata, llextra) => {\n                                 // unsize from a fat pointer - this is a\n@@ -248,12 +248,11 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::Misc if common::type_is_fat_ptr(bcx.ccx, operand.layout.ty) => {\n+                    mir::CastKind::Misc if operand.layout.is_llvm_scalar_pair() => {\n                         if let OperandValue::Pair(data_ptr, meta) = operand.val {\n-                            if common::type_is_fat_ptr(bcx.ccx, cast.ty) {\n-                                let thin_ptr = cast.field(bcx.ccx, abi::FAT_PTR_ADDR);\n+                            if cast.is_llvm_scalar_pair() {\n                                 let data_cast = bcx.pointercast(data_ptr,\n-                                    thin_ptr.llvm_type(bcx.ccx));\n+                                    cast.scalar_pair_element_llvm_type(bcx.ccx, 0));\n                                 OperandValue::Pair(data_cast, meta)\n                             } else { // cast to thin-ptr\n                                 // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n@@ -368,22 +367,21 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n                 let lhs = self.trans_operand(&bcx, lhs);\n                 let rhs = self.trans_operand(&bcx, rhs);\n-                let llresult = if common::type_is_fat_ptr(bcx.ccx, lhs.layout.ty) {\n-                    match (lhs.val, rhs.val) {\n-                        (OperandValue::Pair(lhs_addr, lhs_extra),\n-                         OperandValue::Pair(rhs_addr, rhs_extra)) => {\n-                            self.trans_fat_ptr_binop(&bcx, op,\n-                                                     lhs_addr, lhs_extra,\n-                                                     rhs_addr, rhs_extra,\n-                                                     lhs.layout.ty)\n-                        }\n-                        _ => bug!()\n+                let llresult = match (lhs.val, rhs.val) {\n+                    (OperandValue::Pair(lhs_addr, lhs_extra),\n+                     OperandValue::Pair(rhs_addr, rhs_extra)) => {\n+                        self.trans_fat_ptr_binop(&bcx, op,\n+                                                 lhs_addr, lhs_extra,\n+                                                 rhs_addr, rhs_extra,\n+                                                 lhs.layout.ty)\n                     }\n \n-                } else {\n-                    self.trans_scalar_binop(&bcx, op,\n-                                            lhs.immediate(), rhs.immediate(),\n-                                            lhs.layout.ty)\n+                    (OperandValue::Immediate(lhs_val),\n+                     OperandValue::Immediate(rhs_val)) => {\n+                        self.trans_scalar_binop(&bcx, op, lhs_val, rhs_val, lhs.layout.ty)\n+                    }\n+\n+                    _ => bug!()\n                 };\n                 let operand = OperandRef {\n                     val: OperandValue::Immediate(llresult),"}]}