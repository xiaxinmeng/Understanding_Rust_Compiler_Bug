{"sha": "a6bcf7a2b6c6bc9557791d3075bb376196945727", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmNmN2EyYjZjNmJjOTU1Nzc5MWQzMDc1YmIzNzYxOTY5NDU3Mjc=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-11-23T01:04:37Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-11-23T01:04:37Z"}, "message": "const_int_pow will be stabilized in 1.50.0, not in 1.49.0\n\nSame for constctlz.", "tree": {"sha": "98d6ee7cf6cf6a289dc15a7eaf98741ca631fe0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98d6ee7cf6cf6a289dc15a7eaf98741ca631fe0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bcf7a2b6c6bc9557791d3075bb376196945727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bcf7a2b6c6bc9557791d3075bb376196945727", "html_url": "https://github.com/rust-lang/rust/commit/a6bcf7a2b6c6bc9557791d3075bb376196945727", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bcf7a2b6c6bc9557791d3075bb376196945727/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca37b65f10e9aff3dfc04dcf273b6cd2112b052", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca37b65f10e9aff3dfc04dcf273b6cd2112b052", "html_url": "https://github.com/rust-lang/rust/commit/aca37b65f10e9aff3dfc04dcf273b6cd2112b052"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "5a5aa76a076272210aef2da9248f209f1e896592", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6bcf7a2b6c6bc9557791d3075bb376196945727/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bcf7a2b6c6bc9557791d3075bb376196945727/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a6bcf7a2b6c6bc9557791d3075bb376196945727", "patch": "@@ -1486,7 +1486,7 @@ extern \"rust-intrinsic\" {\n     /// let num_leading = unsafe { ctlz_nonzero(x) };\n     /// assert_eq!(num_leading, 3);\n     /// ```\n-    #[rustc_const_stable(feature = \"constctlz\", since = \"1.49.0\")]\n+    #[rustc_const_stable(feature = \"constctlz\", since = \"1.50.0\")]\n     pub fn ctlz_nonzero<T: Copy>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`."}, {"sha": "33eefe5d26580d8150658b884690af0c3fa17339", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6bcf7a2b6c6bc9557791d3075bb376196945727/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bcf7a2b6c6bc9557791d3075bb376196945727/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=a6bcf7a2b6c6bc9557791d3075bb376196945727", "patch": "@@ -791,7 +791,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -974,7 +974,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1340,7 +1340,7 @@ assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1707,7 +1707,7 @@ assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1757,7 +1757,7 @@ assert_eq!(x.pow(5), 32);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]"}, {"sha": "390c1b7e9e8710f3ea415f61e7509fce07b29c7b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6bcf7a2b6c6bc9557791d3075bb376196945727/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bcf7a2b6c6bc9557791d3075bb376196945727/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=a6bcf7a2b6c6bc9557791d3075bb376196945727", "patch": "@@ -749,7 +749,7 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::MAX.checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -865,7 +865,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1159,7 +1159,7 @@ Basic usage:\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1484,7 +1484,7 @@ Basic usage:\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1532,7 +1532,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".pow(5), 32);\", $EndFeature, \"\n ```\"),\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n@@ -1648,7 +1648,7 @@ assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n         // overflow cases it instead ends up returning the maximum value\n         // of the type, and can return 0 for 0.\n         #[inline]\n-        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         const fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n@@ -1677,7 +1677,7 @@ Basic usage:\n assert_eq!(3\", stringify!($SelfT), \".next_power_of_two(), 4);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn next_power_of_two(self) -> Self {\n@@ -1703,7 +1703,7 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             pub const fn checked_next_power_of_two(self) -> Option<Self> {\n                 self.one_less_than_next_power_of_two().checked_add(1)\n             }\n@@ -1728,7 +1728,7 @@ $EndFeature, \"\n ```\"),\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n-            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.49.0\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             pub const fn wrapping_next_power_of_two(self) -> Self {\n                 self.one_less_than_next_power_of_two().wrapping_add(1)\n             }"}]}