{"sha": "3e61492dc5196ea5806cacd56a87db3484e2495b", "node_id": "C_kwDOAAsO6NoAKDNlNjE0OTJkYzUxOTZlYTU4MDZjYWNkNTZhODdkYjM0ODRlMjQ5NWI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-26T01:37:20Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-26T01:37:20Z"}, "message": "Add feature gate", "tree": {"sha": "9f6de457afeaf194e122bae842bdb5aacbc6a021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f6de457afeaf194e122bae842bdb5aacbc6a021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e61492dc5196ea5806cacd56a87db3484e2495b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e61492dc5196ea5806cacd56a87db3484e2495b", "html_url": "https://github.com/rust-lang/rust/commit/3e61492dc5196ea5806cacd56a87db3484e2495b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e61492dc5196ea5806cacd56a87db3484e2495b/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830a821b9b8fadd4ee1c779f1776ab38e18f09a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/830a821b9b8fadd4ee1c779f1776ab38e18f09a2", "html_url": "https://github.com/rust-lang/rust/commit/830a821b9b8fadd4ee1c779f1776ab38e18f09a2"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "0635ad2e0c7b883d2e6d82fa7b8a8822a7734318", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e61492dc5196ea5806cacd56a87db3484e2495b/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e61492dc5196ea5806cacd56a87db3484e2495b/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=3e61492dc5196ea5806cacd56a87db3484e2495b", "patch": "@@ -14,6 +14,7 @@ use rustc_span::{Span, Symbol, sym};\n use rustc_target::abi::Align;\n \n use crate::builder::Builder;\n+#[cfg(feature=\"master\")]\n use crate::context::CodegenCx;\n \n pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>, name: Symbol, callee_ty: Ty<'tcx>, args: &[OperandRef<'tcx, RValue<'gcc>>], ret_ty: Ty<'tcx>, llret_ty: Type<'gcc>, span: Span) -> Result<RValue<'gcc>, ()> {\n@@ -508,6 +509,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         return simd_simple_float_intrinsic(name, in_elem, in_ty, in_len, bx, span, args);\n     }\n \n+    #[cfg(feature=\"master\")]\n     fn vector_ty<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, elem_ty: Ty<'tcx>, vec_len: u64) -> Type<'gcc> {\n         // FIXME: use cx.layout_of(ty).llvm_type() ?\n         let elem_ty = match *elem_ty.kind() {\n@@ -519,6 +521,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         cx.type_vector(elem_ty, vec_len)\n     }\n \n+    #[cfg(feature=\"master\")]\n     fn gather<'a, 'gcc, 'tcx>(default: RValue<'gcc>, pointers: RValue<'gcc>, mask: RValue<'gcc>, pointer_count: usize, bx: &mut Builder<'a, 'gcc, 'tcx>, in_len: u64, underlying_ty: Ty<'tcx>, invert: bool) -> RValue<'gcc> {\n         let vector_type =\n             if pointer_count > 1 {\n@@ -563,6 +566,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         }\n     }\n \n+    #[cfg(feature=\"master\")]\n     if name == sym::simd_gather {\n         // simd_gather(values: <N x T>, pointers: <N x *_ T>,\n         //             mask: <N x i{M}>) -> <N x T>\n@@ -663,6 +667,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         return Ok(gather(args[0].immediate(), args[1].immediate(), args[2].immediate(), pointer_count, bx, in_len, underlying_ty, false));\n     }\n \n+    #[cfg(feature=\"master\")]\n     if name == sym::simd_scatter {\n         // simd_scatter(values: <N x T>, pointers: <N x *mut T>,\n         //             mask: <N x i{M}>) -> ()"}]}