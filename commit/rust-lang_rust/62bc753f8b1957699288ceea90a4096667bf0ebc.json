{"sha": "62bc753f8b1957699288ceea90a4096667bf0ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmM3NTNmOGIxOTU3Njk5Mjg4Y2VlYTkwYTQwOTY2NjdiZjBlYmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-20T20:17:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-20T20:17:14Z"}, "message": "Merge #7732\n\n7732: Don't lower TypeBound::Lifetime as GenericPredicate::Error r=flodiebold a=Veykril\n\nBasically we just discard the typebound for now instead when lowering to `GenericPredicate`. I think this shouldn't have any other side effects?\r\n\r\nFixes #7683(hopefully for real this time)\r\n\r\nI also played around with introducing `GenericPredicate::LifetimeOutlives` and `GenericPredicate::TypeOutlives`(see https://github.com/Veykril/rust-analyzer/commit/b9d69048451a5f2e9c5a72c800369bbeef36fdcf) but that won't fix this issue(at least not for now) due to lifetime predicate mismatches when resolving methods so I figure this is a good way to fix it for now.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "3e21520683ad2fce54368614ff7e6b8b5ea62642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e21520683ad2fce54368614ff7e6b8b5ea62642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bc753f8b1957699288ceea90a4096667bf0ebc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMW5KCRBK7hj4Ov3rIwAAdHIIAE/CnqVcYrm7DdoWnJUuZurv\nsSjy9EE5bx4q9ZLCahmVYJqaRM3h9sJXW9KxFw+T64fXRV5KObOOfaclXYr+Z/wK\nOUH9Syo1ODOQrXSityaQ20QIxQM1lLdM7fjURQakqPzr3W93JwV+oRxTJbwei36u\nhpN0Rrjl491UkH6ROpI0Jf5ZDCEg5yUFJ6fSVhgp3Euiv1Vy21jTsyp2ZBFYg85r\nw/tXLtpzl3Y8TxQ7he5uQfbSobXUNtLP8ELS7CWf34iEggVaBGAAJLMVkKIbu/cv\nw8J2z3s6ABiX4m7/2F0n7k2kRKc0VDvW2iGYkwksSMrjV9ax8jJLAV/XGDQbY+k=\n=aF+g\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e21520683ad2fce54368614ff7e6b8b5ea62642\nparent d0a787152d9f226707168f65ebfb215e23cedeed\nparent 0799288f0189c07907a30787e7d2f5f0bf960996\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613852234 +0000\ncommitter GitHub <noreply@github.com> 1613852234 +0000\n\nMerge #7732\n\n7732: Don't lower TypeBound::Lifetime as GenericPredicate::Error r=flodiebold a=Veykril\n\nBasically we just discard the typebound for now instead when lowering to `GenericPredicate`. I think this shouldn't have any other side effects?\r\n\r\nFixes #7683(hopefully for real this time)\r\n\r\nI also played around with introducing `GenericPredicate::LifetimeOutlives` and `GenericPredicate::TypeOutlives`(see https://github.com/Veykril/rust-analyzer/commit/b9d69048451a5f2e9c5a72c800369bbeef36fdcf) but that won't fix this issue(at least not for now) due to lifetime predicate mismatches when resolving methods so I figure this is a good way to fix it for now.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bc753f8b1957699288ceea90a4096667bf0ebc", "html_url": "https://github.com/rust-lang/rust/commit/62bc753f8b1957699288ceea90a4096667bf0ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bc753f8b1957699288ceea90a4096667bf0ebc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a787152d9f226707168f65ebfb215e23cedeed", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a787152d9f226707168f65ebfb215e23cedeed", "html_url": "https://github.com/rust-lang/rust/commit/d0a787152d9f226707168f65ebfb215e23cedeed"}, {"sha": "0799288f0189c07907a30787e7d2f5f0bf960996", "url": "https://api.github.com/repos/rust-lang/rust/commits/0799288f0189c07907a30787e7d2f5f0bf960996", "html_url": "https://github.com/rust-lang/rust/commit/0799288f0189c07907a30787e7d2f5f0bf960996"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "b3218833d0bf36bdc7fd8f6d5610a87030da6e2c", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=62bc753f8b1957699288ceea90a4096667bf0ebc", "patch": "@@ -28,7 +28,7 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef,\n-    display::{write_bounds_like_dyn_trait, HirDisplayError, HirFormatter},\n+    display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n     method_resolution,\n     traits::{FnTrait, Solution, SolutionVariables},\n     ApplicationTy, BoundVar, CallableDefId, Canonical, DebruijnIndex, FnSig, GenericPredicate,\n@@ -1379,8 +1379,7 @@ impl HirDisplay for TypeParam {\n         let substs = Substs::type_params(f.db, self.id.parent);\n         let predicates = bounds.iter().cloned().map(|b| b.subst(&substs)).collect::<Vec<_>>();\n         if !(predicates.is_empty() || f.omit_verbose_types()) {\n-            write!(f, \": \")?;\n-            write_bounds_like_dyn_trait(&predicates, f)?;\n+            write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, f)?;\n         }\n         Ok(())\n     }"}, {"sha": "271fcbfaff21007514b65dd18b7f2e17040d88c6", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=62bc753f8b1957699288ceea90a4096667bf0ebc", "patch": "@@ -467,8 +467,7 @@ impl HirDisplay for ApplicationTy {\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n                         let bounds = data.subst(&self.parameters);\n-                        write!(f, \"impl \")?;\n-                        write_bounds_like_dyn_trait(&bounds.value, f)?;\n+                        write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                         // FIXME: it would maybe be good to distinguish this from the alias type (when debug printing), and to show the substitution\n                     }\n                     OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n@@ -548,10 +547,10 @@ impl HirDisplay for Ty {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        write!(f, \"impl \")?;\n                         let bounds = f.db.generic_predicates_for_param(*id);\n                         let substs = Substs::type_params_for_generics(&generics);\n-                        write_bounds_like_dyn_trait(\n+                        write_bounds_like_dyn_trait_with_prefix(\n+                            \"impl\",\n                             &bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(),\n                             f,\n                         )?;\n@@ -560,8 +559,7 @@ impl HirDisplay for Ty {\n             }\n             Ty::Bound(idx) => write!(f, \"?{}.{}\", idx.debruijn.depth(), idx.index)?,\n             Ty::Dyn(predicates) => {\n-                write!(f, \"dyn \")?;\n-                write_bounds_like_dyn_trait(predicates, f)?;\n+                write_bounds_like_dyn_trait_with_prefix(\"dyn\", predicates, f)?;\n             }\n             Ty::Opaque(opaque_ty) => {\n                 match opaque_ty.opaque_ty_id {\n@@ -572,8 +570,7 @@ impl HirDisplay for Ty {\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n                         let bounds = data.subst(&opaque_ty.parameters);\n-                        write!(f, \"impl \")?;\n-                        write_bounds_like_dyn_trait(&bounds.value, f)?;\n+                        write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                     }\n                     OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n                         write!(f, \"{{async block}}\")?;\n@@ -627,7 +624,21 @@ fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = Trai\n     ArrayVec::from(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n }\n \n-pub fn write_bounds_like_dyn_trait(\n+pub fn write_bounds_like_dyn_trait_with_prefix(\n+    prefix: &str,\n+    predicates: &[GenericPredicate],\n+    f: &mut HirFormatter,\n+) -> Result<(), HirDisplayError> {\n+    write!(f, \"{}\", prefix)?;\n+    if !predicates.is_empty() {\n+        write!(f, \" \")?;\n+        write_bounds_like_dyn_trait(predicates, f)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn write_bounds_like_dyn_trait(\n     predicates: &[GenericPredicate],\n     f: &mut HirFormatter,\n ) -> Result<(), HirDisplayError> {"}, {"sha": "99b0ecf3b55f163c95075c09c9fed604e21e95f9", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=62bc753f8b1957699288ceea90a4096667bf0ebc", "patch": "@@ -655,17 +655,6 @@ impl TraitRef {\n     ) -> Substs {\n         substs_from_path_segment(ctx, segment, Some(resolved.into()), false)\n     }\n-\n-    pub(crate) fn from_type_bound(\n-        ctx: &TyLoweringContext<'_>,\n-        bound: &TypeBound,\n-        self_ty: Ty,\n-    ) -> Option<TraitRef> {\n-        match bound {\n-            TypeBound::Path(path) => TraitRef::from_path(ctx, path, Some(self_ty)),\n-            TypeBound::Lifetime(_) | TypeBound::Error => None,\n-        }\n-    }\n }\n \n impl GenericPredicate {\n@@ -705,13 +694,22 @@ impl GenericPredicate {\n         bound: &'a TypeBound,\n         self_ty: Ty,\n     ) -> impl Iterator<Item = GenericPredicate> + 'a {\n-        let trait_ref = TraitRef::from_type_bound(ctx, bound, self_ty);\n-        iter::once(trait_ref.clone().map_or(GenericPredicate::Error, GenericPredicate::Implemented))\n-            .chain(\n-                trait_ref\n-                    .into_iter()\n-                    .flat_map(move |tr| assoc_type_bindings_from_type_bound(ctx, bound, tr)),\n-            )\n+        let mut bindings = None;\n+        let trait_ref = match bound {\n+            TypeBound::Path(path) => {\n+                bindings = TraitRef::from_path(ctx, path, Some(self_ty));\n+                Some(\n+                    bindings.clone().map_or(GenericPredicate::Error, GenericPredicate::Implemented),\n+                )\n+            }\n+            TypeBound::Lifetime(_) => None,\n+            TypeBound::Error => Some(GenericPredicate::Error),\n+        };\n+        trait_ref.into_iter().chain(\n+            bindings\n+                .into_iter()\n+                .flat_map(move |tr| assoc_type_bindings_from_type_bound(ctx, bound, tr)),\n+        )\n     }\n }\n "}, {"sha": "659b8fce9ce5e126529591cb2381e1b0961df3c6", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=62bc753f8b1957699288ceea90a4096667bf0ebc", "patch": "@@ -1114,14 +1114,14 @@ fn method_on_dyn_impl() {\n trait Foo {}\n \n impl Foo for u32 {}\n-impl dyn Foo {\n+impl dyn Foo + '_ {\n     pub fn dyn_foo(&self) -> u32 {\n         0\n     }\n }\n \n fn main() {\n-    let f = &42u32 as &dyn Foo<u32>;\n+    let f = &42u32 as &dyn Foo;\n     f.dyn_foo();\n   // ^u32\n }"}, {"sha": "1298e5a8831382c454c5d1771a58350989c6c16c", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=62bc753f8b1957699288ceea90a4096667bf0ebc", "patch": "@@ -1409,10 +1409,10 @@ fn weird_bounds() {\n         fn test(a: impl Trait + 'lifetime, b: impl 'lifetime, c: impl (Trait), d: impl ('lifetime), e: impl ?Sized, f: impl Trait + ?Sized) {}\n         \"#,\n         expect![[r#\"\n-            23..24 'a': impl Trait + {error}\n-            50..51 'b': impl {error}\n+            23..24 'a': impl Trait\n+            50..51 'b': impl\n             69..70 'c': impl Trait\n-            86..87 'd': impl {error}\n+            86..87 'd': impl\n             107..108 'e': impl {error}\n             123..124 'f': impl Trait + {error}\n             147..149 '{}': ()"}, {"sha": "9a605b09d08a1d46f4dd4edc45c4d1b455ae29f1", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc753f8b1957699288ceea90a4096667bf0ebc/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=62bc753f8b1957699288ceea90a4096667bf0ebc", "patch": "@@ -3417,7 +3417,7 @@ impl<T> Foo<T$0> {}\n                 ```\n                 \"#]],\n         );\n-        // lifetimes aren't being substituted yet\n+        // lifetimes bounds arent being tracked yet\n         check(\n             r#\"\n struct Foo<T>(T);\n@@ -3427,7 +3427,7 @@ impl<T: 'static> Foo<T$0> {}\n                 *T*\n \n                 ```rust\n-                T: {error}\n+                T\n                 ```\n                 \"#]],\n         );"}]}