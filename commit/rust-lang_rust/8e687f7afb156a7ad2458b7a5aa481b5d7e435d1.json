{"sha": "8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "node_id": "C_kwDOAAsO6NoAKDhlNjg3ZjdhZmIxNTZhN2FkMjQ1OGI3YTVhYTQ4MWI1ZDdlNDM1ZDE", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-05T17:57:01Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:59:31Z"}, "message": "improving code to work with multi-workspaces", "tree": {"sha": "5c2c855dd08623d1fef1db36593a4864d3d98164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2c855dd08623d1fef1db36593a4864d3d98164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "html_url": "https://github.com/rust-lang/rust/commit/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8288ff966bcabadf8f15d71511ff96184e81ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8288ff966bcabadf8f15d71511ff96184e81ea", "html_url": "https://github.com/rust-lang/rust/commit/1b8288ff966bcabadf8f15d71511ff96184e81ea"}], "stats": {"total": 112, "additions": 89, "deletions": 23}, "files": [{"sha": "5750d6b426124769f947fcbf23c43b0b65584d2a", "filename": "crates/ide/src/fetch_crates.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffetch_crates.rs?ref=8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "patch": "@@ -1,9 +1,9 @@\n use ide_db::{\n     base_db::{CrateOrigin, SourceDatabase, SourceDatabaseExt},\n-    RootDatabase,\n+    FxIndexSet, RootDatabase,\n };\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateInfo {\n     pub name: String,\n     pub version: String,\n@@ -16,7 +16,7 @@ pub struct CrateInfo {\n //\n // |===\n // image::https://user-images.githubusercontent.com/5748995/229394139-2625beab-f4c9-484b-84ed-ad5dee0b1e1a.png[]\n-pub(crate) fn fetch_crates(db: &RootDatabase) -> Vec<CrateInfo> {\n+pub(crate) fn fetch_crates(db: &RootDatabase) -> FxIndexSet<CrateInfo> {\n     let crate_graph = db.crate_graph();\n     crate_graph\n         .iter()"}, {"sha": "24e2aed65a5beebe2391c00ca976bba5028d22cf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "patch": "@@ -70,7 +70,7 @@ use ide_db::{\n         salsa::{self, ParallelDatabase},\n         CrateOrigin, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n     },\n-    symbol_index, FxHashMap, LineIndexDatabase,\n+    symbol_index, FxHashMap, FxIndexSet, LineIndexDatabase,\n };\n use syntax::SourceFile;\n \n@@ -333,7 +333,7 @@ impl Analysis {\n         self.with_db(|db| view_crate_graph::view_crate_graph(db, full))\n     }\n \n-    pub fn fetch_crates(&self) -> Cancellable<Vec<CrateInfo>> {\n+    pub fn fetch_crates(&self) -> Cancellable<FxIndexSet<CrateInfo>> {\n         self.with_db(|db| fetch_crates::fetch_crates(db))\n     }\n "}, {"sha": "4393d5fccbcc4673b8b4c89ea30cffcc2a159278", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "patch": "@@ -8,7 +8,15 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n import { AstInspector } from \"./ast_inspector\";\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from \"./util\";\n+import {\n+    isRustDocument,\n+    isCargoTomlDocument,\n+    sleep,\n+    isRustEditor,\n+    RustEditor,\n+    RustDocument,\n+    closeDocument,\n+} from \"./util\";\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n import { LINKED_COMMANDS } from \"./client\";\n@@ -269,27 +277,63 @@ export function openCargoToml(ctx: CtxInit): Cmd {\n \n export function revealDependency(ctx: CtxInit): Cmd {\n     return async (editor: RustEditor) => {\n-        const rootPath = vscode.workspace.workspaceFolders![0].uri.fsPath;\n         const documentPath = editor.document.uri.fsPath;\n-        if (documentPath.startsWith(rootPath)) return;\n         const dep = ctx.dependencies?.getDependency(documentPath);\n         if (dep) {\n             await ctx.treeView?.reveal(dep, { select: true, expand: true });\n         } else {\n-            let documentPath = editor.document.uri.fsPath;\n-            const parentChain: DependencyId[] = [{ id: documentPath.toLowerCase() }];\n-            do {\n-                documentPath = path.dirname(documentPath);\n-                parentChain.push({ id: documentPath.toLowerCase() });\n-            } while (!ctx.dependencies?.contains(documentPath));\n-            parentChain.reverse();\n-            for (const idx in parentChain) {\n-                await ctx.treeView?.reveal(parentChain[idx], { select: true, expand: true });\n-            }\n+            await revealParentChain(editor.document, ctx);\n         }\n     };\n }\n \n+/**\n+ * This function calculates the parent chain of a given file until it reaches it crate root contained in ctx.dependencies.\n+ * This is need because the TreeView is Lazy, so at first it only has the root dependencies: For example if we have the following crates:\n+ * - core\n+ * - alloc\n+ * - std\n+ *\n+ * if I want to reveal alloc/src/str.rs, I have to:\n+\n+ * 1. reveal every children of alloc\n+ * - core\n+ * - alloc\\\n+ * &emsp;|-beches\\\n+ * &emsp;|-src\\\n+ * &emsp;|- ...\n+ * - std\n+ * 2. reveal every children of src:\n+ * core\n+ * alloc\\\n+ * &emsp;|-beches\\\n+ * &emsp;|-src\\\n+ * &emsp;&emsp;|- lib.rs\\\n+ * &emsp;&emsp;|- str.rs <------- FOUND IT!\\\n+ * &emsp;&emsp;|- ...\\\n+ * &emsp;|- ...\\\n+ * std\n+ */\n+async function revealParentChain(document: RustDocument, ctx: CtxInit) {\n+    let documentPath = document.uri.fsPath;\n+    const maxDepth = documentPath.split(path.sep).length - 1;\n+    const parentChain: DependencyId[] = [{ id: documentPath.toLowerCase() }];\n+    do {\n+        documentPath = path.dirname(documentPath);\n+        parentChain.push({ id: documentPath.toLowerCase() });\n+        if (parentChain.length >= maxDepth) {\n+            // this is an odd case that can happen when we change a crate version but we'd still have\n+            // a open file referencing the old version\n+            await closeDocument(document);\n+            return;\n+        }\n+    } while (!ctx.dependencies?.contains(documentPath));\n+    parentChain.reverse();\n+    for (const idx in parentChain) {\n+        await ctx.treeView?.reveal(parentChain[idx], { select: true, expand: true });\n+    }\n+}\n+\n export async function execRevealDependency(e: RustEditor): Promise<void> {\n     await vscode.commands.executeCommand(\"rust-analyzer.revealDependency\", e);\n }"}, {"sha": "dd2373d58473e824b6ad71931c8b2b8474bc02d9", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "patch": "@@ -7,6 +7,7 @@ import { Config, prepareVSCodeConfig } from \"./config\";\n import { createClient } from \"./client\";\n import {\n     executeDiscoverProject,\n+    isDocumentInWorkspace,\n     isRustDocument,\n     isRustEditor,\n     LazyOutputChannel,\n@@ -277,15 +278,16 @@ export class Ctx {\n             ...this,\n             client: client,\n         };\n-        const rootPath = vscode.workspace.workspaceFolders![0].uri.fsPath;\n-        this._dependencies = new RustDependenciesProvider(rootPath, ctxInit);\n+        this._dependencies = new RustDependenciesProvider(ctxInit);\n         this._treeView = vscode.window.createTreeView(\"rustDependencies\", {\n             treeDataProvider: this._dependencies,\n             showCollapseAll: true,\n         });\n \n+        this.pushExtCleanup(this._treeView);\n         vscode.window.onDidChangeActiveTextEditor((e) => {\n-            if (e && isRustEditor(e)) {\n+            // we should skip documents that belong to the current workspace\n+            if (e && isRustEditor(e) && !isDocumentInWorkspace(e.document)) {\n                 execRevealDependency(e).catch((reason) => {\n                     void vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n                 });"}, {"sha": "3edbb3168143ba53db05420f4097390ab09334aa", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "patch": "@@ -15,7 +15,7 @@ export class RustDependenciesProvider\n     dependenciesMap: { [id: string]: Dependency | DependencyFile };\n     ctx: CtxInit;\n \n-    constructor(private readonly workspaceRoot: string,ctx: CtxInit) {\n+    constructor(ctx: CtxInit) {\n         this.dependenciesMap = {};\n         this.ctx = ctx;\n     }\n@@ -37,6 +37,7 @@ export class RustDependenciesProvider\n     }\n \n     refresh(): void {\n+        this.dependenciesMap = {};\n         this._onDidChangeTreeData.fire();\n     }\n \n@@ -56,7 +57,7 @@ export class RustDependenciesProvider\n         element?: Dependency | DependencyFile\n     ): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n         return new Promise((resolve, _reject) => {\n-            if (!this.workspaceRoot) {\n+            if (!vscode.workspace.workspaceFolders) {\n                 void vscode.window.showInformationMessage(\"No dependency in empty workspace\");\n                 return Promise.resolve([]);\n             }\n@@ -108,6 +109,7 @@ export class Dependency extends vscode.TreeItem {\n         public readonly collapsibleState: vscode.TreeItemCollapsibleState\n     ) {\n         super(label, collapsibleState);\n+        this.id = this.dependencyPath.toLowerCase();\n         this.tooltip = `${this.label}-${this.version}`;\n         this.description = this.version;\n         this.resourceUri = vscode.Uri.file(dependencyPath);"}, {"sha": "0196b37b8b6547f8227de0958bacde6480c2d38a", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8e687f7afb156a7ad2458b7a5aa481b5d7e435d1/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=8e687f7afb156a7ad2458b7a5aa481b5d7e435d1", "patch": "@@ -112,6 +112,24 @@ export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n     return isRustDocument(editor.document);\n }\n \n+export function isDocumentInWorkspace(document: RustDocument): boolean {\n+    const workspaceFolders = vscode.workspace.workspaceFolders;\n+    if (!workspaceFolders) {\n+        return false;\n+    }\n+    for (const folder of workspaceFolders) {\n+        if (document.uri.fsPath.startsWith(folder.uri.fsPath)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+export async function closeDocument(document: RustDocument) {\n+    await vscode.window.showTextDocument(document, { preview: true, preserveFocus: false });\n+    await vscode.commands.executeCommand(\"workbench.action.closeActiveEditor\");\n+}\n+\n export function isValidExecutable(path: string): boolean {\n     log.debug(\"Checking availability of a binary at\", path);\n "}]}