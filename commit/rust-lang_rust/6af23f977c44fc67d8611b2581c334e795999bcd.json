{"sha": "6af23f977c44fc67d8611b2581c334e795999bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjIzZjk3N2M0NGZjNjdkODYxMWIyNTgxYzMzNGU3OTU5OTliY2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-20T07:26:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-20T07:27:32Z"}, "message": "add Iterator::flatten and redefine flat_map(f) in terms of map(f).flatten()", "tree": {"sha": "c8ae05717111be12e050055b380d893f711d4e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ae05717111be12e050055b380d893f711d4e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af23f977c44fc67d8611b2581c334e795999bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af23f977c44fc67d8611b2581c334e795999bcd", "html_url": "https://github.com/rust-lang/rust/commit/6af23f977c44fc67d8611b2581c334e795999bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af23f977c44fc67d8611b2581c334e795999bcd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 131, "additions": 84, "deletions": 47}, "files": [{"sha": "8ed3450dc3ac4ee2456faffc4850036cd397cc9b", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=6af23f977c44fc67d8611b2581c334e795999bcd", "patch": "@@ -12,7 +12,7 @@ use cmp::Ordering;\n use ops::Try;\n \n use super::{AlwaysOk, LoopState};\n-use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, FlatMap, Fuse};\n+use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, Flatten, FlatMap, Fuse};\n use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile, Rev};\n use super::{Zip, Sum, Product};\n use super::{ChainState, FromIterator, ZipImpl};\n@@ -997,11 +997,15 @@ pub trait Iterator {\n     /// an extra layer of indirection. `flat_map()` will remove this extra layer\n     /// on its own.\n     ///\n+    /// You can think of [`flat_map(f)`][flat_map] as the equivalent of\n+    /// [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n+    ///\n     /// Another way of thinking about `flat_map()`: [`map`]'s closure returns\n     /// one item for each element, and `flat_map()`'s closure returns an\n     /// iterator for each element.\n     ///\n     /// [`map`]: #method.map\n+    /// [`flatten`]: #method.flatten\n     ///\n     /// # Examples\n     ///\n@@ -1021,7 +1025,46 @@ pub trait Iterator {\n     fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n         where Self: Sized, U: IntoIterator, F: FnMut(Self::Item) -> U,\n     {\n-        FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n+        self.map(f).flatten()\n+    }\n+\n+    /// Creates an iterator that flattens nested structure.\n+    ///\n+    /// This is useful when you have an iterator of iterators or an iterator of\n+    /// things that can be turned into iterators and you want to remove one\n+    /// level of indirection.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_flatten)]\n+    ///\n+    /// let data = vec![vec![1, 2, 3, 4], vec![5, 6]];\n+    /// let flattened = data.into_iter().flatten().collect::<Vec<u8>>();\n+    /// assert_eq!(flattened, &[1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    ///\n+    /// Mapping and then flattening:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_flatten)]\n+    ///\n+    /// let words = [\"alpha\", \"beta\", \"gamma\"];\n+    ///\n+    /// // chars() returns an iterator\n+    /// let merged: String = words.iter()\n+    ///                           .map(|s| s.chars())\n+    ///                           .flatten()\n+    ///                           .collect();\n+    /// assert_eq!(merged, \"alphabetagamma\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_flatten\", issue = \"0\")]\n+    fn flatten(self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>\n+    where Self: Sized, Self::Item: IntoIterator {\n+        Flatten { iter: self, frontiter: None, backiter: None }\n     }\n \n     /// Creates an iterator which ends after the first [`None`]."}, {"sha": "bd801d2ae69c8caf9879c67c43b9b5c41c102c1a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=6af23f977c44fc67d8611b2581c334e795999bcd", "patch": "@@ -2403,51 +2403,47 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n /// An iterator that maps each element to an iterator, and yields the elements\n /// of the produced iterators.\n ///\n-/// This `struct` is created by the [`flat_map`] method on [`Iterator`]. See its\n+/// This `type` is created by the [`flat_map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n /// [`flat_map`]: trait.Iterator.html#method.flat_map\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Clone)]\n-pub struct FlatMap<I, U: IntoIterator, F> {\n-    iter: I,\n-    f: F,\n-    frontiter: Option<U::IntoIter>,\n-    backiter: Option<U::IntoIter>,\n-}\n+type FlatMap<I, U, F> = Flatten<Map<I, F>, <U as IntoIterator>::IntoIter>;\n \n-#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<I: fmt::Debug, U: IntoIterator, F> fmt::Debug for FlatMap<I, U, F>\n-    where U::IntoIter: fmt::Debug\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"FlatMap\")\n-            .field(\"iter\", &self.iter)\n-            .field(\"frontiter\", &self.frontiter)\n-            .field(\"backiter\", &self.backiter)\n-            .finish()\n-    }\n+/// An iterator that flattens one level of nesting in an iterator of things\n+/// that can be turned into iterators.\n+///\n+/// This `struct` is created by the [`flatten`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`flatten`]: trait.Iterator.html#method.flatten\n+/// [`Iterator`]: trait.Iterator.html\n+#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[unstable(feature = \"iterator_flatten\", issue = \"0\")]\n+#[derive(Clone, Debug)]\n+pub struct Flatten<I, U> {\n+    iter: I,\n+    frontiter: Option<U>,\n+    backiter: Option<U>,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n-    where F: FnMut(I::Item) -> U,\n+#[unstable(feature = \"iterator_flatten\", issue = \"0\")]\n+impl<I: Iterator, U: Iterator> Iterator for Flatten<I, U>\n+    where I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n {\n     type Item = U::Item;\n \n     #[inline]\n     fn next(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.frontiter {\n-                if let Some(x) = inner.by_ref().next() {\n-                    return Some(x)\n-                }\n+                if let elt@Some(_) = inner.next() { return elt }\n             }\n-            match self.iter.next().map(&mut self.f) {\n+            match self.iter.next() {\n                 None => return self.backiter.as_mut().and_then(|it| it.next()),\n-                next => self.frontiter = next.map(IntoIterator::into_iter),\n+                Some(inner) => self.frontiter = Some(inner.into_iter()),\n             }\n         }\n     }\n@@ -2473,10 +2469,9 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n         self.frontiter = None;\n \n         {\n-            let f = &mut self.f;\n             let frontiter = &mut self.frontiter;\n             init = self.iter.try_fold(init, |acc, x| {\n-                let mut mid = f(x).into_iter();\n+                let mut mid = x.into_iter();\n                 let r = mid.try_fold(acc, &mut fold);\n                 *frontiter = Some(mid);\n                 r\n@@ -2497,27 +2492,24 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         self.frontiter.into_iter()\n-            .chain(self.iter.map(self.f).map(U::into_iter))\n+            .chain(self.iter.map(IntoIterator::into_iter))\n             .chain(self.backiter)\n             .fold(init, |acc, iter| iter.fold(acc, &mut fold))\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> where\n-    F: FnMut(I::Item) -> U,\n-    U: IntoIterator,\n-    U::IntoIter: DoubleEndedIterator\n+#[unstable(feature = \"iterator_flatten\", issue = \"0\")]\n+impl<I, U> DoubleEndedIterator for Flatten<I, U>\n+    where I: DoubleEndedIterator, U: DoubleEndedIterator,\n+          I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.backiter {\n-                if let Some(y) = inner.next_back() {\n-                    return Some(y)\n-                }\n+                if let elt@Some(_) = inner.next_back() { return elt }\n             }\n-            match self.iter.next_back().map(&mut self.f) {\n+            match self.iter.next_back() {\n                 None => return self.frontiter.as_mut().and_then(|it| it.next_back()),\n                 next => self.backiter = next.map(IntoIterator::into_iter),\n             }\n@@ -2534,10 +2526,9 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> wher\n         self.backiter = None;\n \n         {\n-            let f = &mut self.f;\n             let backiter = &mut self.backiter;\n             init = self.iter.try_rfold(init, |acc, x| {\n-                let mut mid = f(x).into_iter();\n+                let mut mid = x.into_iter();\n                 let r = mid.try_rfold(acc, &mut fold);\n                 *backiter = Some(mid);\n                 r\n@@ -2558,15 +2549,15 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> wher\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         self.frontiter.into_iter()\n-            .chain(self.iter.map(self.f).map(U::into_iter))\n+            .chain(self.iter.map(IntoIterator::into_iter))\n             .chain(self.backiter)\n             .rfold(init, |acc, iter| iter.rfold(acc, &mut fold))\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n-impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n-    where I: FusedIterator, U: IntoIterator, F: FnMut(I::Item) -> U {}\n+#[unstable(feature = \"fused\", issue = \"0\")]\n+impl<I: FusedIterator, U: Iterator> FusedIterator for Flatten<I, U>\n+    where I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}\n \n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once."}, {"sha": "3dd30ee1c69e235a5ba2ac9685cf4751d0825fa3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6af23f977c44fc67d8611b2581c334e795999bcd", "patch": "@@ -93,6 +93,7 @@\n #![feature(doc_spotlight)]\n #![feature(rustc_const_unstable)]\n #![feature(iterator_repeat_with)]\n+#![feature(iterator_flatten)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "f28f5ef181ce9c987551c541509d884880bb366c", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af23f977c44fc67d8611b2581c334e795999bcd/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=6af23f977c44fc67d8611b2581c334e795999bcd", "patch": "@@ -836,6 +836,8 @@ fn test_iterator_scan() {\n     assert_eq!(i, ys.len());\n }\n \n+// Note: We test flatten() by testing flat_map().\n+\n #[test]\n fn test_iterator_flat_map() {\n     let xs = [0, 3, 6];"}]}