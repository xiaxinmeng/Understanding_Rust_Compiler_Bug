{"sha": "03417de176f5f3811c5ba7782b9b547fe5be89a5", "node_id": "C_kwDOAAsO6NoAKDAzNDE3ZGUxNzZmNWYzODExYzViYTc3ODJiOWI1NDdmZTViZTg5YTU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T21:55:02Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T21:55:02Z"}, "message": "Use `let = if;` instead of `let; if`.", "tree": {"sha": "4ccbe851372edf3796210d383c10da7becccc769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccbe851372edf3796210d383c10da7becccc769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03417de176f5f3811c5ba7782b9b547fe5be89a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03417de176f5f3811c5ba7782b9b547fe5be89a5", "html_url": "https://github.com/rust-lang/rust/commit/03417de176f5f3811c5ba7782b9b547fe5be89a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03417de176f5f3811c5ba7782b9b547fe5be89a5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5581e338067c5af7937f41d0b6ee55cfc8319cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5581e338067c5af7937f41d0b6ee55cfc8319cc0", "html_url": "https://github.com/rust-lang/rust/commit/5581e338067c5af7937f41d0b6ee55cfc8319cc0"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "9350ad6ba94d45a92864ef65f3db2944adcf533d", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/03417de176f5f3811c5ba7782b9b547fe5be89a5/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03417de176f5f3811c5ba7782b9b547fe5be89a5/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=03417de176f5f3811c5ba7782b9b547fe5be89a5", "patch": "@@ -55,25 +55,23 @@ pub fn futex<'tcx>(\n         op if op & !futex_realtime == futex_wait || op & !futex_realtime == futex_wait_bitset => {\n             let wait_bitset = op & !futex_realtime == futex_wait_bitset;\n \n-            let bitset;\n-\n-            if wait_bitset {\n+            let bitset = if wait_bitset {\n                 if args.len() != 7 {\n                     throw_ub_format!(\n                         \"incorrect number of arguments for `futex` syscall with `op=FUTEX_WAIT_BITSET`: got {}, expected 7\",\n                         args.len()\n                     );\n                 }\n-                bitset = this.read_scalar(&args[6])?.to_u32()?;\n+                this.read_scalar(&args[6])?.to_u32()?\n             } else {\n                 if args.len() < 5 {\n                     throw_ub_format!(\n                         \"incorrect number of arguments for `futex` syscall with `op=FUTEX_WAIT`: got {}, expected at least 5\",\n                         args.len()\n                     );\n                 }\n-                bitset = u32::MAX;\n-            }\n+                u32::MAX\n+            };\n \n             if bitset == 0 {\n                 let einval = this.eval_libc(\"EINVAL\")?;\n@@ -182,18 +180,17 @@ pub fn futex<'tcx>(\n         // FUTEX_WAKE_BITSET: (int *addr, int op = FUTEX_WAKE, int val, const timespect *_unused, int *_unused, unsigned int bitset)\n         // Same as FUTEX_WAKE, but allows you to specify a bitset to select which threads to wake up.\n         op if op == futex_wake || op == futex_wake_bitset => {\n-            let bitset;\n-            if op == futex_wake_bitset {\n+            let bitset = if op == futex_wake_bitset {\n                 if args.len() != 7 {\n                     throw_ub_format!(\n                         \"incorrect number of arguments for `futex` syscall with `op=FUTEX_WAKE_BITSET`: got {}, expected 7\",\n                         args.len()\n                     );\n                 }\n-                bitset = this.read_scalar(&args[6])?.to_u32()?;\n+                this.read_scalar(&args[6])?.to_u32()?\n             } else {\n-                bitset = u32::MAX;\n-            }\n+                u32::MAX\n+            };\n             if bitset == 0 {\n                 let einval = this.eval_libc(\"EINVAL\")?;\n                 this.set_last_error(einval)?;"}]}