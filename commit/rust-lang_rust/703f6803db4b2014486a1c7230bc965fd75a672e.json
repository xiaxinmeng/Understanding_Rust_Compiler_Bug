{"sha": "703f6803db4b2014486a1c7230bc965fd75a672e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwM2Y2ODAzZGI0YjIwMTQ0ODZhMWM3MjMwYmM5NjVmZDc1YTY3MmU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-10T17:00:38Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-15T15:55:19Z"}, "message": "Don't panic if the lhs of a div by zero is not statically known", "tree": {"sha": "fd7aa5135f0db7e98595e0ad7b863410939673b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd7aa5135f0db7e98595e0ad7b863410939673b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/703f6803db4b2014486a1c7230bc965fd75a672e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/703f6803db4b2014486a1c7230bc965fd75a672e", "html_url": "https://github.com/rust-lang/rust/commit/703f6803db4b2014486a1c7230bc965fd75a672e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/703f6803db4b2014486a1c7230bc965fd75a672e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d09331e00b02f81c714b0c41ce3a38380dd36a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "html_url": "https://github.com/rust-lang/rust/commit/9d09331e00b02f81c714b0c41ce3a38380dd36a2"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "237a5a64f8bf851cc600a24ff2f782d48c3dd6b8", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/703f6803db4b2014486a1c7230bc965fd75a672e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703f6803db4b2014486a1c7230bc965fd75a672e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=703f6803db4b2014486a1c7230bc965fd75a672e", "patch": "@@ -484,7 +484,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         lint: &'static lint::Lint,\n         source_info: SourceInfo,\n         message: &'static str,\n-        panic: AssertKind<ConstInt>,\n+        panic: AssertKind<impl std::fmt::Debug>,\n     ) -> Option<()> {\n         let lint_root = self.lint_root(source_info)?;\n         self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n@@ -1004,11 +1004,27 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     let expected = ScalarMaybeUninit::from(Scalar::from_bool(*expected));\n                     let value_const = self.ecx.read_scalar(value).unwrap();\n                     if expected != value_const {\n+                        enum DbgVal<T> {\n+                            Val(T),\n+                            Underscore,\n+                        }\n+                        impl<T: std::fmt::Debug> std::fmt::Debug for DbgVal<T> {\n+                            fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                                match self {\n+                                    Self::Val(val) => val.fmt(fmt),\n+                                    Self::Underscore => fmt.write_str(\"_\"),\n+                                }\n+                            }\n+                        }\n                         let mut eval_to_int = |op| {\n-                            let op = self\n-                                .eval_operand(op, source_info)\n-                                .expect(\"if we got here, it must be const\");\n-                            self.ecx.read_immediate(op).unwrap().to_const_int()\n+                            // This can be `None` if the lhs wasn't const propagated and we just\n+                            // triggered the assert on the value of the rhs.\n+                            match self.eval_operand(op, source_info) {\n+                                Some(op) => {\n+                                    DbgVal::Val(self.ecx.read_immediate(op).unwrap().to_const_int())\n+                                }\n+                                None => DbgVal::Underscore,\n+                            }\n                         };\n                         let msg = match msg {\n                             AssertKind::DivisionByZero(op) => {"}, {"sha": "d19cf00eb9ce4e71ac35985fd6c14a9d99fdd47f", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/703f6803db4b2014486a1c7230bc965fd75a672e/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703f6803db4b2014486a1c7230bc965fd75a672e/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=703f6803db4b2014486a1c7230bc965fd75a672e", "patch": "@@ -1,9 +1,12 @@\n // check-pass\n \n+// compile-flags: --crate-type lib\n+\n+#![warn(unconditional_panic)]\n+\n pub struct Fixed64(i64);\n \n-pub fn div(f: Fixed64) {\n-    f.0 / 0;\n+// HACK: this test passes only because this is a const fn that is written to metadata\n+pub const fn div(f: Fixed64) {\n+    f.0 / 0; //~ WARN will panic at runtime\n }\n-\n-fn main() {}"}, {"sha": "e2a3e4db8abd109edcc5e791a9c2bd2f0a456d84", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/703f6803db4b2014486a1c7230bc965fd75a672e/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703f6803db4b2014486a1c7230bc965fd75a672e/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr?ref=703f6803db4b2014486a1c7230bc965fd75a672e", "patch": "@@ -0,0 +1,14 @@\n+warning: this operation will panic at runtime\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:11:5\n+   |\n+LL |     f.0 / 0;\n+   |     ^^^^^^^ attempt to divide _ by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:5:9\n+   |\n+LL | #![warn(unconditional_panic)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}]}