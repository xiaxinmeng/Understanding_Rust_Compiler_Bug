{"sha": "9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "node_id": "C_kwDOAAsO6NoAKDliNzAxZTdlYWEwOGMyYjJlZjhjNmU1OWI4YjMzNDM2Y2IxMGFhNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T22:10:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T22:10:55Z"}, "message": "Auto merge of #95090 - matthiaskrgr:rollup-pho6x6s, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #94115 (Let `try_collect` take advantage of `try_fold` overrides)\n - #94295 (Always evaluate all cfg predicate in all() and any())\n - #94848 (Compare installed browser-ui-test version to the one used in CI)\n - #94993 (Add test for >65535 hashes in lexing raw string)\n - #95017 (Derive Eq for std::cmp::Ordering, instead of using manual impl.)\n - #95058 (Add use of bool::then in sys/unix/process)\n - #95083 (Document that `Option<extern \"abi\" fn>` discriminant elision applies for any ABI)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a8075a4f5622f9bac265c818615d241790a98310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8075a4f5622f9bac265c818615d241790a98310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "html_url": "https://github.com/rust-lang/rust/commit/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfe40d11c3630254504fb73eeccfca28d50df52", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe40d11c3630254504fb73eeccfca28d50df52", "html_url": "https://github.com/rust-lang/rust/commit/1bfe40d11c3630254504fb73eeccfca28d50df52"}, {"sha": "9c40db22ffd86ddbc185e3dc5f77dd4cb060f0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c40db22ffd86ddbc185e3dc5f77dd4cb060f0b2", "html_url": "https://github.com/rust-lang/rust/commit/9c40db22ffd86ddbc185e3dc5f77dd4cb060f0b2"}], "stats": {"total": 246, "additions": 215, "deletions": 31}, "files": [{"sha": "8a134bf7f9662bff1fa17a77c050487a41ada1f6", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -603,10 +603,18 @@ pub fn eval_condition(\n             match cfg.name_or_empty() {\n                 sym::any => mis\n                     .iter()\n-                    .any(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n+                    // We don't use any() here, because we want to evaluate all cfg condition\n+                    // as eval_condition can (and does) extra checks\n+                    .fold(false, |res, mi| {\n+                        res | eval_condition(mi.meta_item().unwrap(), sess, features, eval)\n+                    }),\n                 sym::all => mis\n                     .iter()\n-                    .all(|mi| eval_condition(mi.meta_item().unwrap(), sess, features, eval)),\n+                    // We don't use all() here, because we want to evaluate all cfg condition\n+                    // as eval_condition can (and does) extra checks\n+                    .fold(true, |res, mi| {\n+                        res & eval_condition(mi.meta_item().unwrap(), sess, features, eval)\n+                    }),\n                 sym::not => {\n                     if mis.len() != 1 {\n                         struct_span_err!("}, {"sha": "548de67449abfcbcf0b3d0f43355c075a61094ed", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -66,6 +66,23 @@ fn test_unterminated_no_pound() {\n     );\n }\n \n+#[test]\n+fn test_too_many_hashes() {\n+    let max_count = u16::MAX;\n+    let mut hashes: String = \"#\".repeat(max_count.into());\n+\n+    // Valid number of hashes (65535 = 2^16 - 1), but invalid string.\n+    check_raw_str(&hashes, max_count, Some(RawStrError::InvalidStarter { bad_char: '\\u{0}' }));\n+\n+    // One more hash sign (65536 = 2^16) becomes too many.\n+    hashes.push('#');\n+    check_raw_str(\n+        &hashes,\n+        0,\n+        Some(RawStrError::TooManyDelimiters { found: usize::from(max_count) + 1 }),\n+    );\n+}\n+\n #[test]\n fn test_valid_shebang() {\n     // https://github.com/rust-lang/rust/issues/70528"}, {"sha": "74328a3607d6447da45a261e05f1d80b7a05dbbc", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -333,7 +333,7 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// let result = 2.cmp(&1);\n /// assert_eq!(Ordering::Greater, result);\n /// ```\n-#[derive(Clone, Copy, PartialEq, Debug, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(i8)]\n pub enum Ordering {\n@@ -861,9 +861,6 @@ pub macro Ord($item:item) {\n     /* compiler built-in */\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Eq for Ordering {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ordering {\n     #[inline]"}, {"sha": "0b5e2a89ef3dedfe43fd6f6b95e638ba14ecb3cd", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -0,0 +1,42 @@\n+use crate::ops::Try;\n+\n+/// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n+///\n+/// Ideally this will no longer be required, eventually, but as can be seen in\n+/// the benchmarks (as of Feb 2022 at least) `by_ref` can have performance cost.\n+pub(crate) struct ByRefSized<'a, I>(pub &'a mut I);\n+\n+impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.0.size_hint()\n+    }\n+\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.0.advance_by(n)\n+    }\n+\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        self.0.nth(n)\n+    }\n+\n+    fn fold<B, F>(self, init: B, f: F) -> B\n+    where\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        self.0.fold(init, f)\n+    }\n+\n+    fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n+    where\n+        F: FnMut(B, Self::Item) -> R,\n+        R: Try<Output = B>,\n+    {\n+        self.0.try_fold(init, f)\n+    }\n+}"}, {"sha": "d82fde4752020226796f4046a1e9a63d2280f952", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -1,6 +1,7 @@\n use crate::iter::{InPlaceIterable, Iterator};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, NeverShortCircuit, Residual, Try};\n \n+mod by_ref_sized;\n mod chain;\n mod cloned;\n mod copied;\n@@ -31,6 +32,8 @@ pub use self::{\n     scan::Scan, skip::Skip, skip_while::SkipWhile, take::Take, take_while::TakeWhile, zip::Zip,\n };\n \n+pub(crate) use self::by_ref_sized::ByRefSized;\n+\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n pub use self::cloned::Cloned;\n "}, {"sha": "145c5ee109d7f96fe9726485a5a4059667439323", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -417,7 +417,7 @@ pub use self::adapters::{\n #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n pub use self::adapters::{Intersperse, IntersperseWith};\n \n-pub(crate) use self::adapters::try_process;\n+pub(crate) use self::adapters::{try_process, ByRefSized};\n \n mod adapters;\n mod range;"}, {"sha": "b62e8dfe1d610f9694047c563fb127cd13013421", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -2,6 +2,7 @@ use crate::cmp::{self, Ordering};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n use super::super::try_process;\n+use super::super::ByRefSized;\n use super::super::TrustedRandomAccessNoCoerce;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n use super::super::{FlatMap, Flatten};\n@@ -1861,7 +1862,7 @@ pub trait Iterator {\n         <<Self as Iterator>::Item as Try>::Residual: Residual<B>,\n         B: FromIterator<<Self::Item as Try>::Output>,\n     {\n-        try_process(self, |i| i.collect())\n+        try_process(ByRefSized(self), |i| i.collect())\n     }\n \n     /// Collects all the items from an iterator into a collection."}, {"sha": "bcba18a4a3e0a932b4a638ed10a14e0eef2210fe", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -80,11 +80,13 @@\n //! * [`Box<U>`]\n //! * `&U`\n //! * `&mut U`\n-//! * `fn`, `extern \"C\" fn`\n+//! * `fn`, `extern \"C\" fn`[^extern_fn]\n //! * [`num::NonZero*`]\n //! * [`ptr::NonNull<U>`]\n //! * `#[repr(transparent)]` struct around one of the types in this list.\n //!\n+//! [^extern_fn]: this remains true for any other ABI: `extern \"abi\" fn` (_e.g._, `extern \"system\" fn`)\n+//!\n //! [`Box<U>`]: ../../std/boxed/struct.Box.html\n //! [`num::NonZero*`]: crate::num\n //! [`ptr::NonNull<U>`]: crate::ptr::NonNull"}, {"sha": "8d0e59d5a4972d5a80a95d205628c664b1f66e76", "filename": "library/core/tests/cmp.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcmp.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -133,6 +133,19 @@ fn ordering_const() {\n     assert_eq!(THEN, Greater);\n }\n \n+#[test]\n+fn ordering_structural_eq() {\n+    // test that consts of type `Ordering` are usable in patterns\n+\n+    const ORDERING: Ordering = Greater;\n+\n+    const REVERSE: Ordering = ORDERING.reverse();\n+    match Ordering::Less {\n+        REVERSE => {}\n+        _ => unreachable!(),\n+    };\n+}\n+\n #[test]\n fn cmp_default() {\n     // Test default methods in PartialOrd and PartialEq"}, {"sha": "731b1592d419382efa4c24e2428827e2d488bbe2", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -551,6 +551,30 @@ fn test_collect_into() {\n     assert!(a == b);\n }\n \n+#[test]\n+fn iter_try_collect_uses_try_fold_not_next() {\n+    // This makes sure it picks up optimizations, and doesn't use the `&mut I` impl.\n+    struct PanicOnNext<I>(I);\n+    impl<I: Iterator> Iterator for PanicOnNext<I> {\n+        type Item = I::Item;\n+        fn next(&mut self) -> Option<Self::Item> {\n+            panic!(\"Iterator::next should not be called!\")\n+        }\n+        fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R\n+        where\n+            Self: Sized,\n+            F: FnMut(B, Self::Item) -> R,\n+            R: std::ops::Try<Output = B>,\n+        {\n+            self.0.try_fold(init, f)\n+        }\n+    }\n+\n+    let it = (0..10).map(Some);\n+    let _ = PanicOnNext(it).try_collect::<Vec<_>>();\n+    // validation is just that it didn't panic.\n+}\n+\n // just tests by whether or not this compiles\n fn _empty_impl_all_auto_traits<T>() {\n     use std::panic::{RefUnwindSafe, UnwindSafe};"}, {"sha": "9d2803b40c445ba5628e3c86920609e6c695d2d0", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -648,19 +648,19 @@ impl ExitStatus {\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        if self.exited() { Some(libc::WEXITSTATUS(self.0)) } else { None }\n+        self.exited().then(|| libc::WEXITSTATUS(self.0))\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n-        if libc::WIFSIGNALED(self.0) { Some(libc::WTERMSIG(self.0)) } else { None }\n+        libc::WIFSIGNALED(self.0).then(|| libc::WTERMSIG(self.0))\n     }\n \n     pub fn core_dumped(&self) -> bool {\n         libc::WIFSIGNALED(self.0) && libc::WCOREDUMP(self.0)\n     }\n \n     pub fn stopped_signal(&self) -> Option<i32> {\n-        if libc::WIFSTOPPED(self.0) { Some(libc::WSTOPSIG(self.0)) } else { None }\n+        libc::WIFSTOPPED(self.0).then(|| libc::WSTOPSIG(self.0))\n     }\n \n     pub fn continued(&self) -> bool {"}, {"sha": "c8b76809abad72aea0344b63258f9225fadbce93", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -836,22 +836,39 @@ impl Step for RustdocJSNotStd {\n     }\n }\n \n-fn check_if_browser_ui_test_is_installed_global(npm: &Path, global: bool) -> bool {\n+fn get_browser_ui_test_version_inner(npm: &Path, global: bool) -> Option<String> {\n     let mut command = Command::new(&npm);\n-    command.arg(\"list\").arg(\"--depth=0\");\n+    command.arg(\"list\").arg(\"--parseable\").arg(\"--long\").arg(\"--depth=0\");\n     if global {\n         command.arg(\"--global\");\n     }\n     let lines = command\n         .output()\n         .map(|output| String::from_utf8_lossy(&output.stdout).into_owned())\n         .unwrap_or(String::new());\n-    lines.contains(&\" browser-ui-test@\")\n+    lines.lines().find_map(|l| l.split(\":browser-ui-test@\").skip(1).next()).map(|v| v.to_owned())\n }\n \n-fn check_if_browser_ui_test_is_installed(npm: &Path) -> bool {\n-    check_if_browser_ui_test_is_installed_global(npm, false)\n-        || check_if_browser_ui_test_is_installed_global(npm, true)\n+fn get_browser_ui_test_version(npm: &Path) -> Option<String> {\n+    get_browser_ui_test_version_inner(npm, false)\n+        .or_else(|| get_browser_ui_test_version_inner(npm, true))\n+}\n+\n+fn compare_browser_ui_test_version(installed_version: &str, src: &Path) {\n+    match fs::read_to_string(\n+        src.join(\"src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version\"),\n+    ) {\n+        Ok(v) => {\n+            if v.trim() != installed_version {\n+                eprintln!(\n+                    \"\u26a0\ufe0f Installed version of browser-ui-test (`{}`) is different than the \\\n+                     one used in the CI (`{}`)\",\n+                    installed_version, v\n+                );\n+            }\n+        }\n+        Err(e) => eprintln!(\"Couldn't find the CI browser-ui-test version: {:?}\", e),\n+    }\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -874,7 +891,7 @@ impl Step for RustdocGUI {\n                     .config\n                     .npm\n                     .as_ref()\n-                    .map(|p| check_if_browser_ui_test_is_installed(p))\n+                    .map(|p| get_browser_ui_test_version(p).is_some())\n                     .unwrap_or(false)\n         }))\n     }\n@@ -892,16 +909,23 @@ impl Step for RustdocGUI {\n \n         // The goal here is to check if the necessary packages are installed, and if not, we\n         // panic.\n-        if !check_if_browser_ui_test_is_installed(&npm) {\n-            eprintln!(\n-                \"error: rustdoc-gui test suite cannot be run because npm `browser-ui-test` \\\n-                 dependency is missing\",\n-            );\n-            eprintln!(\n-                \"If you want to install the `{0}` dependency, run `npm install {0}`\",\n-                \"browser-ui-test\",\n-            );\n-            panic!(\"Cannot run rustdoc-gui tests\");\n+        match get_browser_ui_test_version(&npm) {\n+            Some(version) => {\n+                // We also check the version currently used in CI and emit a warning if it's not the\n+                // same one.\n+                compare_browser_ui_test_version(&version, &builder.build.src);\n+            }\n+            None => {\n+                eprintln!(\n+                    \"error: rustdoc-gui test suite cannot be run because npm `browser-ui-test` \\\n+                     dependency is missing\",\n+                );\n+                eprintln!(\n+                    \"If you want to install the `{0}` dependency, run `npm install {0}`\",\n+                    \"browser-ui-test\",\n+                );\n+                panic!(\"Cannot run rustdoc-gui tests\");\n+            }\n         }\n \n         let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");"}, {"sha": "2358091a6dfbf86cd2847625b48b9c6fdf18738a", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -65,14 +65,20 @@ RUN /scripts/cmake.sh\n COPY host-x86_64/x86_64-gnu-tools/checktools.sh /tmp/\n \n RUN curl -sL https://nodejs.org/dist/v14.4.0/node-v14.4.0-linux-x64.tar.xz | tar -xJ\n-ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n+ENV NODE_FOLDER=/node-v14.4.0-linux-x64/bin\n+ENV PATH=\"$NODE_FOLDER:${PATH}\"\n+\n+COPY host-x86_64/x86_64-gnu-tools/browser-ui-test.version /tmp/\n \n # For now, we need to use `--unsafe-perm=true` to go around an issue when npm tries\n # to create a new folder. For reference:\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.8.3 --unsafe-perm=true\n+#\n+# The `browser-ui-test.version` file is also used by bootstrap to emit warnings in case\n+# the local version of the package is different than the one used by the CI.\n+RUN npm install -g browser-ui-test@$(head -n 1 /tmp/browser-ui-test.version) --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "fab77af2a1a7301ebd696324675e5d81f043b901", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -0,0 +1 @@\n+0.8.3\n\\ No newline at end of file"}, {"sha": "c863f1b68c7fc860257c8fcc11f7c40c67ddf1bc", "filename": "src/ci/scripts/should-skip-this.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -26,6 +26,7 @@ if [[ -n \"${CI_ONLY_WHEN_SUBMODULES_CHANGED-}\" ]]; then\n              src/test/rustdoc-gui \\\n              src/librustdoc \\\n              src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile \\\n+             src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version \\\n              src/tools/rustdoc-gui); then\n         # There was a change in either rustdoc or in its GUI tests.\n         echo \"Rustdoc was updated\""}, {"sha": "5bf80bd74b843aba4c2e54a9b3bf1689c6d9c0e3", "filename": "src/test/ui/cfg/cfg-path-error.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.rs?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -0,0 +1,19 @@\n+// check-fail\n+\n+#[cfg(any(foo, foo::bar))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo1() {}\n+\n+#[cfg(any(foo::bar, foo))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo2() {}\n+\n+#[cfg(all(foo, foo::bar))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo3() {}\n+\n+#[cfg(all(foo::bar, foo))]\n+//~^ERROR `cfg` predicate key must be an identifier\n+fn foo4() {}\n+\n+fn main() {}"}, {"sha": "84b44b2b0c24a021467e56df3772630d07763ada", "filename": "src/test/ui/cfg/cfg-path-error.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-path-error.stderr?ref=9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "patch": "@@ -0,0 +1,26 @@\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:3:16\n+   |\n+LL | #[cfg(any(foo, foo::bar))]\n+   |                ^^^^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:7:11\n+   |\n+LL | #[cfg(any(foo::bar, foo))]\n+   |           ^^^^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:11:16\n+   |\n+LL | #[cfg(all(foo, foo::bar))]\n+   |                ^^^^^^^^\n+\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-path-error.rs:15:11\n+   |\n+LL | #[cfg(all(foo::bar, foo))]\n+   |           ^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}