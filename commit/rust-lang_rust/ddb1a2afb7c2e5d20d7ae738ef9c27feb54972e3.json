{"sha": "ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjFhMmFmYjdjMmU1ZDIwZDdhZTczOGVmOWMyN2ZlYjU0OTcyZTM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-14T09:42:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-21T14:21:36Z"}, "message": "Make `src/test/run-pass/` act like an alternative `ui` test suite.", "tree": {"sha": "b4bfb3c4389f0ee2329aa63d65f9cce60dce328f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4bfb3c4389f0ee2329aa63d65f9cce60dce328f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3", "html_url": "https://github.com/rust-lang/rust/commit/ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1002e404e1ae6b8b907c8655edd41380d0c561cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1002e404e1ae6b8b907c8655edd41380d0c561cb", "html_url": "https://github.com/rust-lang/rust/commit/1002e404e1ae6b8b907c8655edd41380d0c561cb"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "3c18f9bd7c39f079c138c95026eeee1e3e68b276", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ddb1a2afb7c2e5d20d7ae738ef9c27feb54972e3", "patch": "@@ -247,7 +247,6 @@ impl<'test> TestCx<'test> {\n         match self.config.mode {\n             CompileFail | ParseFail => self.run_cfail_test(),\n             RunFail => self.run_rfail_test(),\n-            RunPass => self.run_rpass_test(),\n             RunPassValgrind => self.run_valgrind_test(),\n             Pretty => self.run_pretty_test(),\n             DebugInfoGdb => self.run_debuginfo_gdb_test(),\n@@ -257,13 +256,30 @@ impl<'test> TestCx<'test> {\n             CodegenUnits => self.run_codegen_units_test(),\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n-            Ui => self.run_ui_test(),\n+            RunPass | Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n         }\n     }\n \n+    fn should_run_successfully(&self) -> bool {\n+        match self.config.mode {\n+            RunPass => true,\n+            Ui => self.props.run_pass,\n+            _ => unimplemented!(),\n+        }\n+    }\n+\n+    fn should_compile_successfully(&self) -> bool {\n+        match self.config.mode {\n+            CompileFail => false,\n+            RunPass => true,\n+            Ui => self.props.compile_pass,\n+            mode => panic!(\"unimplemented for mode {:?}\", mode),\n+        }\n+    }\n+\n     fn check_if_test_should_compile(&self, proc_res: &ProcRes) {\n-        if self.props.compile_pass {\n+        if self.should_compile_successfully() {\n             if !proc_res.status.success() {\n                 self.fatal_proc_rec(\"test compilation failed although it shouldn't!\", proc_res);\n             }\n@@ -1677,7 +1693,7 @@ impl<'test> TestCx<'test> {\n                     rustc.arg(\"-Zui-testing\");\n                 }\n             }\n-            Ui => {\n+            RunPass | Ui => {\n                 if !self\n                     .props\n                     .compile_flags\n@@ -1706,7 +1722,7 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n-            RunPass | RunFail | RunPassValgrind | Pretty | DebugInfoGdb | DebugInfoLldb\n+            RunFail | RunPassValgrind | Pretty | DebugInfoGdb | DebugInfoLldb\n             | Codegen | Rustdoc | RunMake | CodegenUnits => {\n                 // do not use JSON output\n             }\n@@ -2691,7 +2707,7 @@ impl<'test> TestCx<'test> {\n \n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n \n-        if self.props.run_pass {\n+        if self.should_run_successfully() {\n             let proc_res = self.exec_compiled_test();\n \n             if !proc_res.status.success() {"}]}