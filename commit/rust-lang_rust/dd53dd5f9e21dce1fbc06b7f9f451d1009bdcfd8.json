{"sha": "dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNTNkZDVmOWUyMWRjZTFmYmMwNmI3ZjlmNDUxZDEwMDliZGNmZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-01T19:59:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-01T19:59:53Z"}, "message": "Auto merge of #43529 - QuietMisdreavus:fn-docs, r=steveklabnik\n\nadd documentation for function pointers as a primitive\n\nThis PR adds a new kind of primitive to the standard library documentation: Function pointers. It's useful to be able to discuss them separately from closure-trait-objects, and to have something to point to when discussing function pointers as a *type* and not a *trait*.\n\nFixes #17104", "tree": {"sha": "7361d01fc125c95abb8dd112a2879c984f1cab0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7361d01fc125c95abb8dd112a2879c984f1cab0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "html_url": "https://github.com/rust-lang/rust/commit/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e772c28d2e1a6eb5e4b13980255300b0ee4d774f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e772c28d2e1a6eb5e4b13980255300b0ee4d774f", "html_url": "https://github.com/rust-lang/rust/commit/e772c28d2e1a6eb5e4b13980255300b0ee4d774f"}, {"sha": "71751db49150b89b917130a68db0d1baef43af33", "url": "https://api.github.com/repos/rust-lang/rust/commits/71751db49150b89b917130a68db0d1baef43af33", "html_url": "https://github.com/rust-lang/rust/commit/71751db49150b89b917130a68db0d1baef43af33"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "a9636c7e2fd739027ac498d33bc0e4592300a9e5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "patch": "@@ -1548,6 +1548,7 @@ pub enum PrimitiveType {\n     Tuple,\n     RawPointer,\n     Reference,\n+    Fn,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n@@ -1583,6 +1584,7 @@ impl Type {\n             Tuple(..) => Some(PrimitiveType::Tuple),\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n+            BareFunction(..) => Some(PrimitiveType::Fn),\n             _ => None,\n         }\n     }\n@@ -1636,6 +1638,7 @@ impl PrimitiveType {\n             \"tuple\" => Some(PrimitiveType::Tuple),\n             \"pointer\" => Some(PrimitiveType::RawPointer),\n             \"reference\" => Some(PrimitiveType::Reference),\n+            \"fn\" => Some(PrimitiveType::Fn),\n             _ => None,\n         }\n     }\n@@ -1665,6 +1668,7 @@ impl PrimitiveType {\n             Tuple => \"tuple\",\n             RawPointer => \"pointer\",\n             Reference => \"reference\",\n+            Fn => \"fn\",\n         }\n     }\n \n@@ -2561,6 +2565,7 @@ fn build_deref_target_impls(cx: &DocContext,\n             Tuple => None,\n             RawPointer => tcx.lang_items.const_ptr_impl(),\n             Reference => None,\n+            Fn => None,\n         };\n         if let Some(did) = did {\n             if !did.is_local() {"}, {"sha": "988890ffedcdd92d0e0cbb15d5e8645d558ce371", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "patch": "@@ -607,11 +607,9 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                        decl.generics,\n                        decl.decl)\n             } else {\n-                write!(f, \"{}{}fn{}{}\",\n-                       UnsafetySpace(decl.unsafety),\n-                       AbiSpace(decl.abi),\n-                       decl.generics,\n-                       decl.decl)\n+                write!(f, \"{}{}\", UnsafetySpace(decl.unsafety), AbiSpace(decl.abi))?;\n+                primitive_link(f, PrimitiveType::Fn, \"fn\")?;\n+                write!(f, \"{}{}\", decl.generics, decl.decl)\n             }\n         }\n         clean::Tuple(ref typs) => {"}, {"sha": "7be319d1954ec361104d5fa5f3d493816fea5a38", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "patch": "@@ -839,3 +839,104 @@ mod prim_usize { }\n /// locally known.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref { }\n+\n+#[doc(primitive = \"fn\")]\n+//\n+/// Function pointers, like `fn(usize) -> bool`.\n+///\n+/// *See also the traits [`Fn`], [`FnMut`], and [`FnOnce`].*\n+///\n+/// [`Fn`]: ops/trait.Fn.html\n+/// [`FnMut`]: ops/trait.FnMut.html\n+/// [`FnOnce`]: ops/trait.FnOnce.html\n+///\n+/// Plain function pointers are obtained by casting either plain functions, or closures that don't\n+/// capture an environment:\n+///\n+/// ```\n+/// fn add_one(x: usize) -> usize {\n+///     x + 1\n+/// }\n+///\n+/// let ptr: fn(usize) -> usize = add_one;\n+/// assert_eq!(ptr(5), 6);\n+///\n+/// let clos: fn(usize) -> usize = |x| x + 5;\n+/// assert_eq!(clos(5), 10);\n+/// ```\n+///\n+/// In addition to varying based on their signature, function pointers come in two flavors: safe\n+/// and unsafe. Plain `fn()` function pointers can only point to safe functions,\n+/// while `unsafe fn()` function pointers can point to safe or unsafe functions.\n+///\n+/// ```\n+/// fn add_one(x: usize) -> usize {\n+///     x + 1\n+/// }\n+///\n+/// unsafe fn add_one_unsafely(x: usize) -> usize {\n+///     x + 1\n+/// }\n+///\n+/// let safe_ptr: fn(usize) -> usize = add_one;\n+///\n+/// //ERROR: mismatched types: expected normal fn, found unsafe fn\n+/// //let bad_ptr: fn(usize) -> usize = add_one_unsafely;\n+///\n+/// let unsafe_ptr: unsafe fn(usize) -> usize = add_one_unsafely;\n+/// let really_safe_ptr: unsafe fn(usize) -> usize = add_one;\n+/// ```\n+///\n+/// On top of that, function pointers can vary based on what ABI they use. This is achieved by\n+/// adding the `extern` keyword to the type name, followed by the ABI in question. For example,\n+/// `fn()` is different from `extern \"C\" fn()`, which itself is different from `extern \"stdcall\"\n+/// fn()`, and so on for the various ABIs that Rust supports.  Non-`extern` functions have an ABI\n+/// of `\"Rust\"`, and `extern` functions without an explicit ABI have an ABI of `\"C\"`. For more\n+/// information, see [the nomicon's section on foreign calling conventions][nomicon-abi].\n+///\n+/// [nomicon-abi]: ../nomicon/ffi.html#foreign-calling-conventions\n+///\n+/// Extern function declarations with the \"C\" or \"cdecl\" ABIs can also be *variadic*, allowing them\n+/// to be called with a variable number of arguments. Normal rust functions, even those with an\n+/// `extern \"ABI\"`, cannot be variadic. For more information, see [the nomicon's section on\n+/// variadic functions][nomicon-variadic].\n+///\n+/// [nomicon-variadic]: ../nomicon/ffi.html#variadic-functions\n+///\n+/// These markers can be combined, so `unsafe extern \"stdcall\" fn()` is a valid type.\n+///\n+/// Like references in rust, function pointers are assumed to not be null, so if you want to pass a\n+/// function pointer over FFI and be able to accomodate null pointers, make your type\n+/// `Option<fn()>` with your required signature.\n+///\n+/// Function pointers implement the following traits:\n+///\n+/// * [`Clone`]\n+/// * [`PartialEq`]\n+/// * [`Eq`]\n+/// * [`PartialOrd`]\n+/// * [`Ord`]\n+/// * [`Hash`]\n+/// * [`Pointer`]\n+/// * [`Debug`]\n+///\n+/// [`Clone`]: clone/trait.Clone.html\n+/// [`PartialEq`]: cmp/trait.PartialEq.html\n+/// [`Eq`]: cmp/trait.Eq.html\n+/// [`PartialOrd`]: cmp/trait.PartialOrd.html\n+/// [`Ord`]: cmp/trait.Ord.html\n+/// [`Hash`]: hash/trait.Hash.html\n+/// [`Pointer`]: fmt/trait.Pointer.html\n+/// [`Debug`]: fmt/trait.Debug.html\n+///\n+/// Due to a temporary restriction in Rust's type system, these traits are only implemented on\n+/// functions that take 12 arguments or less, with the `\"Rust\"` and `\"C\"` ABIs. In the future, this\n+/// may change.\n+///\n+/// In addition, function pointers of *any* signature, ABI, or safety are [`Copy`], and all *safe*\n+/// function pointers implement [`Fn`], [`FnMut`], and [`FnOnce`]. This works because these traits\n+/// are specially known to the compiler.\n+///\n+/// [`Copy`]: marker/trait.Copy.html\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+mod prim_fn { }"}]}