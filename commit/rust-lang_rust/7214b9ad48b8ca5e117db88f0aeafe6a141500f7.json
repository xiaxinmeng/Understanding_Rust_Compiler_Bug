{"sha": "7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTRiOWFkNDhiOGNhNWUxMTdkYjg4ZjBhZWFmZTZhMTQxNTAwZjc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-13T20:48:13Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-13T20:48:13Z"}, "message": "Retire BraceStructTypeFoldableImpl and TupleStructTypeFoldableImpl.", "tree": {"sha": "b606e4ecb626923bd2e680c5243572f298abff24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b606e4ecb626923bd2e680c5243572f298abff24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "html_url": "https://github.com/rust-lang/rust/commit/7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7214b9ad48b8ca5e117db88f0aeafe6a141500f7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f5e706ef84c85dc1d503365f2a61fa4ffcae7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f5e706ef84c85dc1d503365f2a61fa4ffcae7b", "html_url": "https://github.com/rust-lang/rust/commit/d5f5e706ef84c85dc1d503365f2a61fa4ffcae7b"}], "stats": {"total": 57, "additions": 1, "deletions": 56}, "files": [{"sha": "2d0538ad8e0f1c4a8a1836268b443c1c800aec2f", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7214b9ad48b8ca5e117db88f0aeafe6a141500f7/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7214b9ad48b8ca5e117db88f0aeafe6a141500f7/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "patch": "@@ -324,60 +324,6 @@ macro_rules! EnumLiftImpl {\n     };\n }\n \n-#[macro_export]\n-macro_rules! BraceStructTypeFoldableImpl {\n-    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($field:ident),* $(,)?\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn super_fold_with<V: $crate::ty::fold::TypeFolder<$tcx>>(\n-                &self,\n-                folder: &mut V,\n-            ) -> Self {\n-                let $s { $($field,)* } = self;\n-                $s { $($field: $crate::ty::fold::TypeFoldable::fold_with($field, folder),)* }\n-            }\n-\n-            fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n-                &self,\n-                visitor: &mut V,\n-            ) -> bool {\n-                let $s { $($field,)* } = self;\n-                false $(|| $crate::ty::fold::TypeFoldable::visit_with($field, visitor))*\n-            }\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! TupleStructTypeFoldableImpl {\n-    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($field:ident),* $(,)?\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn super_fold_with<V: $crate::ty::fold::TypeFolder<$tcx>>(\n-                &self,\n-                folder: &mut V,\n-            ) -> Self {\n-                let $s($($field,)*)= self;\n-                $s($($crate::ty::fold::TypeFoldable::fold_with($field, folder),)*)\n-            }\n-\n-            fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n-                &self,\n-                visitor: &mut V,\n-            ) -> bool {\n-                let $s($($field,)*) = self;\n-                false $(|| $crate::ty::fold::TypeFoldable::visit_with($field, visitor))*\n-            }\n-        }\n-    };\n-}\n-\n #[macro_export]\n macro_rules! EnumTypeFoldableImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {"}, {"sha": "02232fb7f9f84bc0a4b250440fd77a70e57edb26", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7214b9ad48b8ca5e117db88f0aeafe6a141500f7/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7214b9ad48b8ca5e117db88f0aeafe6a141500f7/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=7214b9ad48b8ca5e117db88f0aeafe6a141500f7", "patch": "@@ -42,8 +42,7 @@ use crate::util::nodemap::FxHashSet;\n /// This trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in `TypeFolder`.\n ///\n-/// To implement this conveniently, use the\n-/// `BraceStructTypeFoldableImpl` etc macros found in `macros.rs`.\n+/// To implement this conveniently, use the derive macro located in librustc_macros.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;\n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {"}]}