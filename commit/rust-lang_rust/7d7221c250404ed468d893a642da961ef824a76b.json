{"sha": "7d7221c250404ed468d893a642da961ef824a76b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNzIyMWMyNTA0MDRlZDQ2OGQ4OTNhNjQyZGE5NjFlZjgyNGE3NmI=", "commit": {"author": {"name": "Azhng", "email": "archer.xn@gmail.com", "date": "2020-06-24T20:33:31Z"}, "committer": {"name": "Azhng", "email": "archer.xn@gmail.com", "date": "2020-06-29T20:46:52Z"}, "message": "typeck: adding type information to projection\n\nThis commit modifies the Place as follow:\n* remove 'ty' from ProjectionKind\n* add type information into to Projection\n* replace 'ty' in Place with 'base_ty'\n* introduce 'ty()' in `Place` to return the final type of the `Place`\n* introduce `ty_before_projection()` in `Place` to return the type of\n  a `Place` before i'th projection is applied\n\nCloses https://github.com/rust-lang/project-rfc-2229/issues/5", "tree": {"sha": "0e65f0075c9f6cff28aa19ead8dc73a3b5e7326a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e65f0075c9f6cff28aa19ead8dc73a3b5e7326a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7221c250404ed468d893a642da961ef824a76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7221c250404ed468d893a642da961ef824a76b", "html_url": "https://github.com/rust-lang/rust/commit/7d7221c250404ed468d893a642da961ef824a76b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7221c250404ed468d893a642da961ef824a76b/comments", "author": {"login": "Azhng", "id": 9267198, "node_id": "MDQ6VXNlcjkyNjcxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9267198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Azhng", "html_url": "https://github.com/Azhng", "followers_url": "https://api.github.com/users/Azhng/followers", "following_url": "https://api.github.com/users/Azhng/following{/other_user}", "gists_url": "https://api.github.com/users/Azhng/gists{/gist_id}", "starred_url": "https://api.github.com/users/Azhng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Azhng/subscriptions", "organizations_url": "https://api.github.com/users/Azhng/orgs", "repos_url": "https://api.github.com/users/Azhng/repos", "events_url": "https://api.github.com/users/Azhng/events{/privacy}", "received_events_url": "https://api.github.com/users/Azhng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Azhng", "id": 9267198, "node_id": "MDQ6VXNlcjkyNjcxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9267198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Azhng", "html_url": "https://github.com/Azhng", "followers_url": "https://api.github.com/users/Azhng/followers", "following_url": "https://api.github.com/users/Azhng/following{/other_user}", "gists_url": "https://api.github.com/users/Azhng/gists{/gist_id}", "starred_url": "https://api.github.com/users/Azhng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Azhng/subscriptions", "organizations_url": "https://api.github.com/users/Azhng/orgs", "repos_url": "https://api.github.com/users/Azhng/repos", "events_url": "https://api.github.com/users/Azhng/events{/privacy}", "received_events_url": "https://api.github.com/users/Azhng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb3dbfc6c6d8992d08431f320ba296a0c2f7498", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498", "html_url": "https://github.com/rust-lang/rust/commit/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "199f49ca323e023c595d45a55509513119c46158", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d7221c250404ed468d893a642da961ef824a76b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7221c250404ed468d893a642da961ef824a76b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=7d7221c250404ed468d893a642da961ef824a76b", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     ) {\n         if let mc::PlaceBase::Rvalue = place_with_id.place.base {\n             if place_with_id.place.projections.is_empty() {\n-                let typ = self.resolve_type(place_with_id.place.ty);\n+                let typ = self.resolve_type(place_with_id.place.ty());\n                 let body_id = self.body_id;\n                 let _ = dropck::check_drop_obligations(self, typ, span, body_id);\n             }\n@@ -640,8 +640,8 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         borrow_kind: ty::BorrowKind,\n         borrow_place: &mc::PlaceWithHirId<'tcx>,\n     ) {\n-        let origin = infer::DataBorrowed(borrow_place.place.ty, span);\n-        self.type_must_outlive(origin, borrow_place.place.ty, borrow_region);\n+        let origin = infer::DataBorrowed(borrow_place.place.ty(), span);\n+        self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);\n \n         for pointer_ty in borrow_place.place.deref_tys() {\n             debug!("}, {"sha": "4e5ef4329c2c612bc68843cf0255d9e0188519f4", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7221c250404ed468d893a642da961ef824a76b/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7221c250404ed468d893a642da961ef824a76b/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=7d7221c250404ed468d893a642da961ef824a76b", "patch": "@@ -384,7 +384,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         // Select just those fields of the `with`\n         // expression that will actually be used\n-        match with_place.place.ty.kind {\n+        match with_place.place.ty().kind {\n             ty::Adt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n                 for (f_index, with_field) in adt.non_enum_variant().fields.iter().enumerate() {\n@@ -583,7 +583,7 @@ fn copy_or_move<'a, 'tcx>(\n     place_with_id: &PlaceWithHirId<'tcx>,\n ) -> ConsumeMode {\n     if !mc.type_is_copy_modulo_regions(\n-        place_with_id.place.ty,\n+        place_with_id.place.ty(),\n         mc.tcx().hir().span(place_with_id.hir_id),\n     ) {\n         Move"}, {"sha": "ac42ce80689ec1a4cdbfafdecc15efd81b85eb41", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7d7221c250404ed468d893a642da961ef824a76b/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7221c250404ed468d893a642da961ef824a76b/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=7d7221c250404ed468d893a642da961ef824a76b", "patch": "@@ -73,27 +73,30 @@ pub enum PlaceBase {\n     Upvar(ty::UpvarId),\n }\n \n-#[derive(Clone, Debug)]\n-pub enum ProjectionKind<'tcx> {\n+#[derive(Clone, Debug, Eq, PartialEq)]\n+pub enum ProjectionKind {\n     /// A dereference of a pointer, reference or `Box<T>` of the given type\n-    Deref(Ty<'tcx>),\n+    Deref,\n     /// An index or a field\n     Other,\n }\n \n #[derive(Clone, Debug)]\n pub struct Projection<'tcx> {\n+    // Type after the projection is being applied.\n+    ty: Ty<'tcx>,\n+\n     /// Defines the type of access\n-    kind: ProjectionKind<'tcx>,\n+    kind: ProjectionKind,\n }\n \n /// A `Place` represents how a value is located in memory.\n ///\n /// This is an HIR version of `mir::Place`\n #[derive(Clone, Debug)]\n pub struct Place<'tcx> {\n-    /// The type of the `Place`\n-    pub ty: Ty<'tcx>,\n+    /// The type of the `PlaceBase`\n+    pub base_ty: Ty<'tcx>,\n     /// The \"outermost\" place that holds this value.\n     pub base: PlaceBase,\n     /// How this place is derived from the base place.\n@@ -115,13 +118,13 @@ pub struct PlaceWithHirId<'tcx> {\n impl<'tcx> PlaceWithHirId<'tcx> {\n     crate fn new(\n         hir_id: hir::HirId,\n-        ty: Ty<'tcx>,\n+        base_ty: Ty<'tcx>,\n         base: PlaceBase,\n         projections: Vec<Projection<'tcx>>,\n     ) -> PlaceWithHirId<'tcx> {\n         PlaceWithHirId {\n             hir_id: hir_id,\n-            place: Place { ty: ty, base: base, projections: projections },\n+            place: Place { base_ty: base_ty, base: base, projections: projections },\n         }\n     }\n }\n@@ -134,10 +137,26 @@ impl<'tcx> Place<'tcx> {\n     /// `x: &*const u32` and the `Place` is `**x`, then the types returned are\n     ///`*const u32` then `&*const u32`.\n     crate fn deref_tys(&self) -> impl Iterator<Item = Ty<'tcx>> + '_ {\n-        self.projections.iter().rev().filter_map(|proj| {\n-            if let ProjectionKind::Deref(deref_ty) = proj.kind { Some(deref_ty) } else { None }\n+        self.projections.iter().enumerate().rev().filter_map(move |(index, proj)| {\n+            if ProjectionKind::Deref == proj.kind {\n+                Some(self.ty_before_projection(index))\n+            } else {\n+                None\n+            }\n         })\n     }\n+\n+    // Returns the type of this `Place` after all projections have been applied.\n+    pub fn ty(&self) -> Ty<'tcx> {\n+        self.projections.last().map_or_else(|| self.base_ty, |proj| proj.ty)\n+    }\n+\n+    // Returns the type of this `Place` immediately before `projection_index`th projection\n+    // is applied.\n+    crate fn ty_before_projection(&self, projection_index: usize) -> Ty<'tcx> {\n+        assert!(projection_index < self.projections.len());\n+        if projection_index == 0 { self.base_ty } else { self.projections[projection_index - 1].ty }\n+    }\n }\n \n crate trait HirNode {\n@@ -516,8 +535,13 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> PlaceWithHirId<'tcx> {\n         let mut projections = base_place.place.projections;\n-        projections.push(Projection { kind: ProjectionKind::Other });\n-        let ret = PlaceWithHirId::new(node.hir_id(), ty, base_place.place.base, projections);\n+        projections.push(Projection { kind: ProjectionKind::Other, ty: ty });\n+        let ret = PlaceWithHirId::new(\n+            node.hir_id(),\n+            base_place.place.base_ty,\n+            base_place.place.base,\n+            projections,\n+        );\n         debug!(\"cat_field ret {:?}\", ret);\n         ret\n     }\n@@ -552,18 +576,23 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     ) -> McResult<PlaceWithHirId<'tcx>> {\n         debug!(\"cat_deref: base_place={:?}\", base_place);\n \n-        let base_ty = base_place.place.ty;\n-        let deref_ty = match base_ty.builtin_deref(true) {\n+        let base_curr_ty = base_place.place.ty();\n+        let deref_ty = match base_curr_ty.builtin_deref(true) {\n             Some(mt) => mt.ty,\n             None => {\n-                debug!(\"explicit deref of non-derefable type: {:?}\", base_ty);\n+                debug!(\"explicit deref of non-derefable type: {:?}\", base_curr_ty);\n                 return Err(());\n             }\n         };\n         let mut projections = base_place.place.projections;\n-        projections.push(Projection { kind: ProjectionKind::Deref(base_ty) });\n-\n-        let ret = PlaceWithHirId::new(node.hir_id(), deref_ty, base_place.place.base, projections);\n+        projections.push(Projection { kind: ProjectionKind::Deref, ty: deref_ty });\n+\n+        let ret = PlaceWithHirId::new(\n+            node.hir_id(),\n+            base_place.place.base_ty,\n+            base_place.place.base,\n+            projections,\n+        );\n         debug!(\"cat_deref ret {:?}\", ret);\n         Ok(ret)\n     }\n@@ -687,7 +716,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             }\n \n             PatKind::Slice(before, ref slice, after) => {\n-                let element_ty = match place_with_id.place.ty.builtin_index() {\n+                let element_ty = match place_with_id.place.ty().builtin_index() {\n                     Some(ty) => ty,\n                     None => {\n                         debug!(\"explicit index of non-indexable type {:?}\", place_with_id);"}, {"sha": "fcb574e43748109097100f82f0696c0dae35d940", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7221c250404ed468d893a642da961ef824a76b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7221c250404ed468d893a642da961ef824a76b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=7d7221c250404ed468d893a642da961ef824a76b", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                     return;\n                 }\n \n-                if is_non_trait_box(cmt.place.ty) && !self.is_large_box(cmt.place.ty) {\n+                if is_non_trait_box(cmt.place.ty()) && !self.is_large_box(cmt.place.ty()) {\n                     self.set.insert(cmt.hir_id);\n                 }\n                 return;"}]}