{"sha": "811b874716210f0e4135cbaa489f8b2857bbb031", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMWI4NzQ3MTYyMTBmMGU0MTM1Y2JhYTQ4OWY4YjI4NTdiYmIwMzE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-02-26T16:05:50Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-04T13:20:10Z"}, "message": "Add Pass manager for MIR", "tree": {"sha": "075fe64d61a246582301d696f4d4633dbe909c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/075fe64d61a246582301d696f4d4633dbe909c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811b874716210f0e4135cbaa489f8b2857bbb031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811b874716210f0e4135cbaa489f8b2857bbb031", "html_url": "https://github.com/rust-lang/rust/commit/811b874716210f0e4135cbaa489f8b2857bbb031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811b874716210f0e4135cbaa489f8b2857bbb031/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b5e52186917502258a9feadc8bf77a89183386b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5e52186917502258a9feadc8bf77a89183386b", "html_url": "https://github.com/rust-lang/rust/commit/5b5e52186917502258a9feadc8bf77a89183386b"}], "stats": {"total": 389, "additions": 177, "deletions": 212}, "files": [{"sha": "3a04b48bb83a46100c5c2abdf3d7b77186a1e213", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -70,6 +70,7 @@ pub enum DepNode {\n     IntrinsicCheck(DefId),\n     MatchCheck(DefId),\n     MirMapConstruction(DefId),\n+    MirPasses,\n     BorrowCheck(DefId),\n     RvalueCheck(DefId),\n     Reachability,"}, {"sha": "1a34699aff491754aea088576fdefa5c47f00106", "filename": "src/librustc/mir/mir_map.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fmir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fmir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmir_map.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -8,31 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepNode;\n use util::nodemap::NodeMap;\n use mir::repr::Mir;\n-use mir::transform::MirPass;\n-use middle::ty::{self, TyCtxt};\n-use middle::infer;\n \n pub struct MirMap<'tcx> {\n     pub map: NodeMap<Mir<'tcx>>,\n }\n-\n-impl<'tcx> MirMap<'tcx> {\n-    pub fn run_passes(&mut self, passes: &mut [Box<MirPass>], tcx: &TyCtxt<'tcx>) {\n-        if passes.is_empty() { return; }\n-\n-        for (&id, mir) in &mut self.map {\n-            let did = tcx.map.local_def_id(id);\n-            let _task = tcx.dep_graph.in_task(DepNode::MirMapConstruction(did));\n-\n-            let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n-            let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env));\n-\n-            for pass in &mut *passes {\n-                pass.run_on_mir(mir, &infcx)\n-            }\n-        }\n-    }\n-}"}, {"sha": "348b496112ca057dd109842d41e318df5f266a02", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -207,7 +207,7 @@ impl Debug for BasicBlock {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// BasicBlock and Terminator\n+// BasicBlockData and Terminator\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct BasicBlockData<'tcx> {"}, {"sha": "5f09fe042a57a1459ae62630de2be71bd4432408", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -8,9 +8,66 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use mir::mir_map::MirMap;\n use mir::repr::Mir;\n-use middle::infer::InferCtxt;\n+use middle::ty::TyCtxt;\n \n-pub trait MirPass {\n-    fn run_on_mir<'a, 'tcx>(&mut self, mir: &mut Mir<'tcx>, infcx: &InferCtxt<'a, 'tcx>);\n+/// Various information about pass.\n+pub trait Pass {\n+    // fn name() for printouts of various sorts?\n+    // fn should_run(Session) to check if pass should run?\n+}\n+\n+/// A pass which inspects the whole MirMap.\n+pub trait MirMapPass<'tcx>: Pass {\n+    fn run_pass(&mut self, cx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>);\n+}\n+\n+pub trait MirPass<'tcx>: Pass {\n+    fn run_pass(&mut self, cx: &TyCtxt<'tcx>, map: &mut Mir<'tcx>);\n+}\n+\n+impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>) {\n+        for (_, mir) in &mut map.map {\n+            MirPass::run_pass(self, tcx, mir);\n+        }\n+    }\n+}\n+\n+/// A manager for MIR passes.\n+pub struct Passes {\n+    passes: Vec<Box<for<'tcx> MirMapPass<'tcx>>>,\n+    plugin_passes: Vec<Box<for<'tcx> MirMapPass<'tcx>>>\n+}\n+\n+impl Passes {\n+    pub fn new() -> Passes {\n+        let passes = Passes {\n+            passes: Vec::new(),\n+            plugin_passes: Vec::new()\n+        };\n+        passes\n+    }\n+\n+    pub fn run_passes<'tcx>(&mut self, pcx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>) {\n+        for pass in &mut self.plugin_passes {\n+            pass.run_pass(pcx, map);\n+        }\n+        for pass in &mut self.passes {\n+            pass.run_pass(pcx, map);\n+        }\n+    }\n+\n+    /// Pushes a built-in pass.\n+    pub fn push_pass(&mut self, pass: Box<for<'a> MirMapPass<'a>>) {\n+        self.passes.push(pass);\n+    }\n+}\n+\n+/// Copies the plugin passes.\n+impl ::std::iter::Extend<Box<for<'a> MirMapPass<'a>>> for Passes {\n+    fn extend<I: IntoIterator<Item=Box<for <'a> MirMapPass<'a>>>>(&mut self, it: I) {\n+        self.plugin_passes.extend(it);\n+    }\n }"}, {"sha": "b198eda181208f2e3a8c7fc52464d017d6200ec4", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -13,7 +13,7 @@ use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeMap, FnvHashMap};\n-use mir::transform::MirPass;\n+use mir::transform as mir_pass;\n \n use syntax::ast::{NodeId, NodeIdAssigner, Name};\n use syntax::codemap::{Span, MultiSpan};\n@@ -60,7 +60,7 @@ pub struct Session {\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n-    pub plugin_mir_passes: RefCell<Vec<Box<MirPass>>>,\n+    pub mir_passes: RefCell<mir_pass::Passes>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n@@ -477,7 +477,7 @@ pub fn build_session_(sopts: config::Options,\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n-        plugin_mir_passes: RefCell::new(Vec::new()),\n+        mir_passes: RefCell::new(mir_pass::Passes::new()),\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FnvHashMap()),"}, {"sha": "d6bbb22c203c80117383cd75061b317a660376fe", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepGraph;\n+use rustc::dep_graph::{DepGraph, DepNode};\n use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n@@ -561,7 +561,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-        *sess.plugin_mir_passes.borrow_mut() = mir_passes;\n+        sess.mir_passes.borrow_mut().extend(mir_passes);\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n     }));\n \n@@ -861,9 +861,20 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                  \"MIR dump\",\n                  || mir::mir_map::build_mir_for_crate(tcx));\n \n-        time(time_passes,\n-             \"MIR passes\",\n-             || mir_map.run_passes(&mut sess.plugin_mir_passes.borrow_mut(), tcx));\n+        time(time_passes, \"MIR passes\", || {\n+            let _task = tcx.dep_graph.in_task(DepNode::MirPasses);\n+            let mut passes = sess.mir_passes.borrow_mut();\n+            // Push all the built-in passes.\n+            passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);\n+            passes.push_pass(box mir::transform::type_check::TypeckMir);\n+            passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg);\n+            // Late passes\n+            passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n+            passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);\n+            passes.push_pass(box mir::transform::erase_regions::EraseRegions);\n+            // And run everything.\n+            passes.run_passes(tcx, &mut mir_map);\n+        });\n \n         time(time_passes,\n              \"borrow checking\",\n@@ -912,9 +923,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n-/// be discarded.\n pub fn phase_4_translate_to_llvm<'tcx>(tcx: &TyCtxt<'tcx>,\n-                                       mut mir_map: MirMap<'tcx>,\n+                                       mir_map: MirMap<'tcx>,\n                                        analysis: ty::CrateAnalysis)\n                                        -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n@@ -923,10 +933,6 @@ pub fn phase_4_translate_to_llvm<'tcx>(tcx: &TyCtxt<'tcx>,\n          \"resolving dependency formats\",\n          || dependency_format::calculate(&tcx.sess));\n \n-    time(time_passes,\n-         \"erasing regions from MIR\",\n-         || mir::transform::erase_regions::erase_regions(tcx, &mut mir_map));\n-\n     // Option dance to work around the lack of stack once closures.\n     time(time_passes,\n          \"translation\","}, {"sha": "400035a15de7519c9cc8f20b47e8ca8a824d68f8", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 5, "deletions": 56, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -20,16 +20,10 @@ extern crate syntax;\n extern crate rustc_front;\n \n use build;\n-use graphviz;\n-use pretty;\n-use transform::{clear_dead_blocks, simplify_cfg, type_check};\n-use transform::{no_landing_pads};\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n-use std::fs::File;\n \n-use rustc::mir::transform::MirPass;\n use rustc::mir::mir_map::MirMap;\n use rustc::middle::infer;\n use rustc::middle::region::CodeExtentData;\n@@ -136,61 +130,16 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n                 body: &'tcx hir::Block,\n                 span: Span,\n                 id: ast::NodeId) {\n-        let (prefix, implicit_arg_tys) = match fk {\n-            intravisit::FnKind::Closure =>\n-                (format!(\"{}-\", id), vec![closure_self_ty(&self.tcx, id, body.id)]),\n-            _ =>\n-                (format!(\"\"), vec![]),\n+        let implicit_arg_tys = if let intravisit::FnKind::Closure = fk {\n+            vec![closure_self_ty(&self.tcx, id, body.id)]\n+        } else {\n+            vec![]\n         };\n \n         let param_env = ty::ParameterEnvironment::for_item(self.tcx, id);\n-\n         let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, Some(param_env));\n-\n         match build_mir(Cx::new(&infcx), implicit_arg_tys, id, span, decl, body) {\n-            Ok(mut mir) => {\n-                clear_dead_blocks::ClearDeadBlocks::new().run_on_mir(&mut mir, &infcx);\n-                type_check::TypeckMir::new().run_on_mir(&mut mir, &infcx);\n-                no_landing_pads::NoLandingPads.run_on_mir(&mut mir, &infcx);\n-                if self.tcx.sess.opts.mir_opt_level > 0 {\n-                    simplify_cfg::SimplifyCfg::new().run_on_mir(&mut mir, &infcx);\n-                }\n-                let meta_item_list = self.attr\n-                                         .iter()\n-                                         .flat_map(|a| a.meta_item_list())\n-                                         .flat_map(|l| l.iter());\n-                for item in meta_item_list {\n-                    if item.check_name(\"graphviz\") || item.check_name(\"pretty\") {\n-                        match item.value_str() {\n-                            Some(s) => {\n-                                let filename = format!(\"{}{}\", prefix, s);\n-                                let result = File::create(&filename).and_then(|ref mut output| {\n-                                    if item.check_name(\"graphviz\") {\n-                                        graphviz::write_mir_graphviz(&mir, output)\n-                                    } else {\n-                                        pretty::write_mir_pretty(&mir, output)\n-                                    }\n-                                });\n-\n-                                if let Err(e) = result {\n-                                    self.tcx.sess.span_fatal(\n-                                        item.span,\n-                                        &format!(\"Error writing MIR {} results to `{}`: {}\",\n-                                                 item.name(), filename, e));\n-                                }\n-                            }\n-                            None => {\n-                                self.tcx.sess.span_err(\n-                                    item.span,\n-                                    &format!(\"{} attribute requires a path\", item.name()));\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                let previous = self.map.map.insert(id, mir);\n-                assert!(previous.is_none());\n-            }\n+            Ok(mir) => assert!(self.map.map.insert(id, mir).is_none()),\n             Err(ErrorReported) => {}\n         }\n "}, {"sha": "2bab0168c52324fa163d88808b87d2b3da5bd91a", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -15,13 +15,7 @@\n use rustc::middle::ty::{self, TyCtxt};\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n-use rustc::mir::mir_map::MirMap;\n-\n-pub fn erase_regions<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &mut MirMap<'tcx>) {\n-    for (_, mir) in &mut mir_map.map {\n-        EraseRegionsVisitor::new(tcx).visit_mir(mir);\n-    }\n-}\n+use rustc::mir::transform::{MirPass, Pass};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n@@ -123,3 +117,13 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n         self.super_constant(constant);\n     }\n }\n+\n+pub struct EraseRegions;\n+\n+impl Pass for EraseRegions {}\n+\n+impl<'tcx> MirPass<'tcx> for EraseRegions {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+        EraseRegionsVisitor::new(tcx).visit_mir(mir);\n+    }\n+}"}, {"sha": "57690caeccb37a4832ec35a2908a3f87b8bb0bea", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub mod clear_dead_blocks;\n+pub mod remove_dead_blocks;\n pub mod simplify_cfg;\n pub mod erase_regions;\n pub mod no_landing_pads;"}, {"sha": "c08f45a8ec4e30f417edc2742e3c08f491434a6b", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -11,10 +11,10 @@\n //! This pass removes the unwind branch of all the terminators when the no-landing-pads option is\n //! specified.\n \n-use rustc::middle::infer;\n+use rustc::middle::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n-use rustc::mir::transform::MirPass;\n+use rustc::mir::transform::{Pass, MirPass};\n \n pub struct NoLandingPads;\n \n@@ -40,11 +40,12 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n     }\n }\n \n-impl MirPass for NoLandingPads {\n-    fn run_on_mir<'a, 'tcx>(&mut self, mir: &mut Mir<'tcx>,\n-                            infcx: &infer::InferCtxt<'a, 'tcx>) {\n-        if infcx.tcx.sess.no_landing_pads() {\n+impl<'tcx> MirPass<'tcx> for NoLandingPads {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+        if tcx.sess.no_landing_pads() {\n             self.visit_mir(mir);\n         }\n     }\n }\n+\n+impl Pass for NoLandingPads {}"}, {"sha": "308e257c20d09b6342647d6b6a3c5dad9c972a29", "filename": "src/librustc_mir/transform/remove_dead_blocks.rs", "status": "renamed", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -32,50 +32,55 @@\n //! this pass just replaces the blocks with empty \"return\" blocks\n //! and does not renumber anything.\n \n-use rustc::middle::infer;\n+use rustc_data_structures::bitvec::BitVector;\n+use rustc::middle::ty::TyCtxt;\n use rustc::mir::repr::*;\n-use rustc::mir::transform::MirPass;\n+use rustc::mir::transform::{Pass, MirPass};\n \n-pub struct ClearDeadBlocks;\n-\n-impl ClearDeadBlocks {\n-    pub fn new() -> ClearDeadBlocks {\n-        ClearDeadBlocks\n-    }\n-\n-    fn clear_dead_blocks(&self, mir: &mut Mir) {\n-        let mut seen = vec![false; mir.basic_blocks.len()];\n+pub struct RemoveDeadBlocks;\n \n+impl<'tcx> MirPass<'tcx> for RemoveDeadBlocks {\n+    fn run_pass(&mut self, _: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+        let mut seen = BitVector::new(mir.basic_blocks.len());\n         // These blocks are always required.\n-        seen[START_BLOCK.index()] = true;\n-        seen[END_BLOCK.index()] = true;\n+        seen.insert(START_BLOCK.index());\n+        seen.insert(END_BLOCK.index());\n \n-        let mut worklist = vec![START_BLOCK];\n+        let mut worklist = Vec::with_capacity(4);\n+        worklist.push(START_BLOCK);\n         while let Some(bb) = worklist.pop() {\n             for succ in mir.basic_block_data(bb).terminator().successors().iter() {\n-                if !seen[succ.index()] {\n-                    seen[succ.index()] = true;\n+                if seen.insert(succ.index()) {\n                     worklist.push(*succ);\n                 }\n             }\n         }\n+        retain_basic_blocks(mir, &seen);\n+    }\n+}\n \n-        for (n, (block, seen)) in mir.basic_blocks.iter_mut().zip(seen).enumerate() {\n-            if !seen {\n-                info!(\"clearing block #{}: {:?}\", n, block);\n-                *block = BasicBlockData {\n-                    statements: vec![],\n-                    terminator: Some(Terminator::Return),\n-                    is_cleanup: false\n-                };\n-            }\n+impl Pass for RemoveDeadBlocks {}\n+\n+/// Mass removal of basic blocks to keep the ID-remapping cheap.\n+fn retain_basic_blocks(mir: &mut Mir, keep: &BitVector) {\n+    let num_blocks = mir.basic_blocks.len();\n+\n+    let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();\n+    let mut used_blocks = 0;\n+    for alive_index in keep.iter() {\n+        replacements[alive_index] = BasicBlock::new(used_blocks);\n+        if alive_index != used_blocks {\n+            // Swap the next alive block data with the current available slot. Since alive_index is\n+            // non-decreasing this is a valid operation.\n+            mir.basic_blocks.swap(alive_index, used_blocks);\n         }\n+        used_blocks += 1;\n     }\n-}\n+    mir.basic_blocks.truncate(used_blocks);\n \n-impl MirPass for ClearDeadBlocks {\n-    fn run_on_mir<'a, 'tcx>(&mut self, mir: &mut Mir<'tcx>, _: &infer::InferCtxt<'a, 'tcx>)\n-    {\n-        self.clear_dead_blocks(mir);\n+    for bb in mir.all_basic_blocks() {\n+        for target in mir.basic_block_data_mut(bb).terminator_mut().successors_mut() {\n+            *target = replacements[target.index()];\n+        }\n     }\n }", "previous_filename": "src/librustc_mir/transform/clear_dead_blocks.rs"}, {"sha": "85f36df7ced8f2b0f35bc19a1445ded215fe8404", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_eval::ConstVal;\n-use rustc::middle::infer;\n+use rustc::middle::ty::TyCtxt;\n use rustc::mir::repr::*;\n-use rustc::mir::transform::MirPass;\n+use rustc::mir::transform::{MirPass, Pass};\n+\n+use super::remove_dead_blocks::RemoveDeadBlocks;\n \n pub struct SimplifyCfg;\n \n@@ -21,26 +22,7 @@ impl SimplifyCfg {\n         SimplifyCfg\n     }\n \n-    fn remove_dead_blocks(&self, mir: &mut Mir) {\n-        let mut seen = BitVector::new(mir.basic_blocks.len());\n-        // These blocks are always required.\n-        seen.insert(START_BLOCK.index());\n-        seen.insert(END_BLOCK.index());\n-\n-        let mut worklist = Vec::with_capacity(4);\n-        worklist.push(START_BLOCK);\n-        while let Some(bb) = worklist.pop() {\n-            for succ in mir.basic_block_data(bb).terminator().successors().iter() {\n-                if seen.insert(succ.index()) {\n-                    worklist.push(*succ);\n-                }\n-            }\n-        }\n-        retain_basic_blocks(mir, &seen);\n-    }\n-\n     fn remove_goto_chains(&self, mir: &mut Mir) -> bool {\n-\n         // Find the target at the end of the jump chain, return None if there is a loop\n         fn final_target(mir: &Mir, mut target: BasicBlock) -> Option<BasicBlock> {\n             // Keep track of already seen blocks to detect loops\n@@ -118,39 +100,17 @@ impl SimplifyCfg {\n     }\n }\n \n-impl MirPass for SimplifyCfg {\n-    fn run_on_mir<'a, 'tcx>(&mut self, mir: &mut Mir<'tcx>, _: &infer::InferCtxt<'a, 'tcx>) {\n+impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n         let mut changed = true;\n         while changed {\n             changed = self.simplify_branches(mir);\n             changed |= self.remove_goto_chains(mir);\n-            self.remove_dead_blocks(mir);\n+            RemoveDeadBlocks.run_pass(tcx, mir);\n         }\n         // FIXME: Should probably be moved into some kind of pass manager\n         mir.basic_blocks.shrink_to_fit();\n     }\n }\n \n-/// Mass removal of basic blocks to keep the ID-remapping cheap.\n-fn retain_basic_blocks(mir: &mut Mir, keep: &BitVector) {\n-    let num_blocks = mir.basic_blocks.len();\n-\n-    let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();\n-    let mut used_blocks = 0;\n-    for alive_index in keep.iter() {\n-        replacements[alive_index] = BasicBlock::new(used_blocks);\n-        if alive_index != used_blocks {\n-            // Swap the next alive block data with the current available slot. Since alive_index is\n-            // non-decreasing this is a valid operation.\n-            mir.basic_blocks.swap(alive_index, used_blocks);\n-        }\n-        used_blocks += 1;\n-    }\n-    mir.basic_blocks.truncate(used_blocks);\n-\n-    for bb in mir.all_basic_blocks() {\n-        for target in mir.basic_block_data_mut(bb).terminator_mut().successors_mut() {\n-            *target = replacements[target.index()];\n-        }\n-    }\n-}\n+impl Pass for SimplifyCfg {}"}, {"sha": "21b3566418cb26186c2ce943c7a41a0d39c306f2", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -16,8 +16,9 @@ use rustc::middle::traits;\n use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::middle::ty::fold::TypeFoldable;\n use rustc::mir::repr::*;\n+use rustc::mir::mir_map::MirMap;\n use rustc::mir::tcx::LvalueTy;\n-use rustc::mir::transform::MirPass;\n+use rustc::mir::transform::{MirMapPass, Pass};\n use rustc::mir::visit::{self, Visitor};\n \n use syntax::codemap::{Span, DUMMY_SP};\n@@ -572,27 +573,29 @@ impl TypeckMir {\n     }\n }\n \n-impl MirPass for TypeckMir {\n-    fn run_on_mir<'a, 'tcx>(&mut self, mir: &mut Mir<'tcx>, infcx: &InferCtxt<'a, 'tcx>)\n-    {\n-        if infcx.tcx.sess.err_count() > 0 {\n+impl<'tcx> MirMapPass<'tcx> for TypeckMir {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>) {\n+        if tcx.sess.err_count() > 0 {\n             // compiling a broken program can obviously result in a\n             // broken MIR, so try not to report duplicate errors.\n             return;\n         }\n-\n-        let mut checker = TypeChecker::new(infcx);\n-\n-        {\n-            let mut verifier = TypeVerifier::new(&mut checker, mir);\n-            verifier.visit_mir(mir);\n-            if verifier.errors_reported {\n-                // don't do further checks to avoid ICEs\n-                return;\n+        for (&id, mir) in &mut map.map {\n+            let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+            let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env));\n+            let mut checker = TypeChecker::new(&infcx);\n+            {\n+                let mut verifier = TypeVerifier::new(&mut checker, mir);\n+                verifier.visit_mir(mir);\n+                if verifier.errors_reported {\n+                    // don't do further checks to avoid ICEs\n+                    continue;\n+                }\n             }\n+            checker.typeck_mir(mir);\n+            checker.verify_obligations(mir);\n         }\n-\n-        checker.typeck_mir(mir);\n-        checker.verify_obligations(mir);\n     }\n }\n+\n+impl Pass for TypeckMir {}"}, {"sha": "3cfd6a76dda63005649773a72f86d92d936d66ca", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -13,7 +13,7 @@\n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n \n-use rustc::mir::transform::MirPass;\n+use rustc::mir::transform::MirMapPass;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n@@ -56,7 +56,7 @@ pub struct Registry<'a> {\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n     #[doc(hidden)]\n-    pub mir_passes: Vec<Box<MirPass>>,\n+    pub mir_passes: Vec<Box<for<'pcx> MirMapPass<'pcx>>>,\n \n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n@@ -141,7 +141,7 @@ impl<'a> Registry<'a> {\n     }\n \n     /// Register a MIR pass\n-    pub fn register_mir_pass(&mut self, pass: Box<MirPass>) {\n+    pub fn register_mir_pass(&mut self, pass: Box<for<'pcx> MirMapPass<'pcx>>) {\n         self.mir_passes.push(pass);\n     }\n "}, {"sha": "aec5165f6cfdd18407a43b0113e54c3d97313a99", "filename": "src/test/auxiliary/dummy_mir_pass.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b874716210f0e4135cbaa489f8b2857bbb031/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs?ref=811b874716210f0e4135cbaa489f8b2857bbb031", "patch": "@@ -18,17 +18,18 @@ extern crate rustc_front;\n extern crate rustc_plugin;\n extern crate syntax;\n \n-use rustc::mir::transform::MirPass;\n+use rustc::mir::transform::{self, MirPass};\n use rustc::mir::repr::{Mir, Literal};\n use rustc::mir::visit::MutVisitor;\n-use rustc::middle::infer::InferCtxt;\n+use rustc::middle::ty;\n use rustc::middle::const_eval::ConstVal;\n use rustc_plugin::Registry;\n \n struct Pass;\n \n-impl MirPass for Pass {\n-    fn run_on_mir<'a, 'tcx>(&mut self, mir: &mut Mir<'tcx>, _: &InferCtxt<'a, 'tcx>) {\n+impl transform::Pass for Pass {}\n+impl<'tcx> MirPass<'tcx> for Pass {\n+    fn run_pass(&mut self, _: &ty::ctxt<'tcx>, mir: &mut Mir<'tcx>) {\n         Visitor.visit_mir(mir)\n     }\n }"}]}