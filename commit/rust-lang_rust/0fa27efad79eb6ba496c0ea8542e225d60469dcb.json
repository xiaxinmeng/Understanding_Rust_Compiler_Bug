{"sha": "0fa27efad79eb6ba496c0ea8542e225d60469dcb", "node_id": "C_kwDOAAsO6NoAKDBmYTI3ZWZhZDc5ZWI2YmE0OTZjMGVhODU0MmUyMjVkNjA0NjlkY2I", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-09T16:43:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T09:52:23Z"}, "message": "Add tests.", "tree": {"sha": "0629071e25ba0b7586a9a0ca5df35de83724a7a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0629071e25ba0b7586a9a0ca5df35de83724a7a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa27efad79eb6ba496c0ea8542e225d60469dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa27efad79eb6ba496c0ea8542e225d60469dcb", "html_url": "https://github.com/rust-lang/rust/commit/0fa27efad79eb6ba496c0ea8542e225d60469dcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa27efad79eb6ba496c0ea8542e225d60469dcb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a08bd7873ac755f93286f087fdc398380c69e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a08bd7873ac755f93286f087fdc398380c69e21", "html_url": "https://github.com/rust-lang/rust/commit/3a08bd7873ac755f93286f087fdc398380c69e21"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "f1144db44ca445c86d63664ae577aaf2e27228c0", "filename": "src/test/ui/associated-consts/issue-88599-ref-self.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs?ref=0fa27efad79eb6ba496c0ea8542e225d60469dcb", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait First {\n+    const CONST: usize;\n+}\n+pub trait Second {}\n+\n+impl<'a> First for dyn Second\n+where\n+    &'a Self: First,\n+{\n+    const CONST: usize = <&Self>::CONST;\n+}\n+\n+trait Third: First\n+where\n+    [u8; Self::CONST]:\n+{\n+    const VAL: [u8; Self::CONST] = [0; Self::CONST];\n+}\n+\n+fn main() {}"}, {"sha": "1c6df0da60c0e773d487de067bf3322a5ca45f70", "filename": "src/test/ui/issues/issue-37725.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs?ref=0fa27efad79eb6ba496c0ea8542e225d60469dcb", "patch": "@@ -1,4 +1,6 @@\n // build-pass\n+// compiler-opts: -Zmir-opt-level=2\n+\n #![allow(dead_code)]\n trait Foo {\n     fn foo(&self);"}, {"sha": "40829f53709e52915879f039e98064591318b02d", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.inline.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr?ref=0fa27efad79eb6ba496c0ea8542e225d60469dcb", "patch": "@@ -0,0 +1,46 @@\n+warning: trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:20:29\n+   |\n+LL |     for<'any> &'any mut (): Clone,\n+   |                             ^^^^^\n+   |\n+   = note: `#[warn(trivial_bounds)]` on by default\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:28:21\n+   |\n+LL | struct S where i32: Foo;\n+   |                     ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:31:28\n+   |\n+LL | impl Foo for () where i32: Foo {\n+   |                            ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:40:19\n+   |\n+LL | fn f() where i32: Foo {\n+   |                   ^^^\n+\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:48:28\n+   |\n+LL | fn g() where &'static str: Foo {\n+   |                            ^^^\n+\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:57:13\n+   |\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:65:10\n+   |\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n+\n+warning: 7 warnings emitted\n+"}, {"sha": "40829f53709e52915879f039e98064591318b02d", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.no-opt.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr?ref=0fa27efad79eb6ba496c0ea8542e225d60469dcb", "patch": "@@ -0,0 +1,46 @@\n+warning: trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:20:29\n+   |\n+LL |     for<'any> &'any mut (): Clone,\n+   |                             ^^^^^\n+   |\n+   = note: `#[warn(trivial_bounds)]` on by default\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:28:21\n+   |\n+LL | struct S where i32: Foo;\n+   |                     ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:31:28\n+   |\n+LL | impl Foo for () where i32: Foo {\n+   |                            ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:40:19\n+   |\n+LL | fn f() where i32: Foo {\n+   |                   ^^^\n+\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:48:28\n+   |\n+LL | fn g() where &'static str: Foo {\n+   |                            ^^^\n+\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:57:13\n+   |\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:65:10\n+   |\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n+\n+warning: 7 warnings emitted\n+"}, {"sha": "ab6677e911b24b944e1d5e576e672abb70f5e31b", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa27efad79eb6ba496c0ea8542e225d60469dcb/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs?ref=0fa27efad79eb6ba496c0ea8542e225d60469dcb", "patch": "@@ -0,0 +1,71 @@\n+// build-pass\n+// revisions: no-opt inline\n+// [inline]compile-flags: -Zmir-opt-level=3 --emit=mir\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait Foo {\n+    fn test(&self);\n+}\n+\n+fn foo<'a>(s: &'a mut ())\n+where\n+    &'a mut (): Foo,\n+{\n+    s.test();\n+}\n+\n+fn clone(it: &mut ()) -> &mut ()\n+where\n+    for<'any> &'any mut (): Clone,\n+    //~^ WARN trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+{\n+    it.clone()\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+struct S where i32: Foo;\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+\n+impl Foo for () where i32: Foo {\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo {\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn g() where &'static str: Foo {\n+//~^ WARN trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+    \"Foo\".test();\n+    Foo::test(&\"Foo\");\n+    generic_function(\"Foo\");\n+}\n+\n+fn use_op(s: String) -> String\n+where\n+    String: ::std::ops::Neg<Output = String>,\n+//~^ WARN trait bound String: Neg does not depend on any type or lifetime parameters\n+{\n+    -s\n+}\n+\n+fn use_for()\n+where\n+    i32: Iterator,\n+//~^ WARN trait bound i32: Iterator does not depend on any type or lifetime parameters\n+{\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}]}