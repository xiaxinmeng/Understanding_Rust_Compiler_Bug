{"sha": "902c7d832b6f355414632ca55dc7c7017fde5250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMmM3ZDgzMmI2ZjM1NTQxNDYzMmNhNTVkYzdjNzAxN2ZkZTUyNTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-14T13:29:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-14T13:29:20Z"}, "message": "fix cc computation in the presence of diverging calls\n\nCFG treats diverging calls as its completely own path out of the function.\nWhile this makes sense, it should also mean that a panic should increase the cyclomatic\ncomplexity. Instead it decreases it.\n\nMinimal example:\n\n```rust\nif a {\n    b\n} else {\n    panic!(\"cake\");\n}\nd\n```\n\ncreates the following graph\n\n```dot\ndigraph G {\n  \"if a\" -> \"b\"\n  \"if a\" -> \"panic!(\\\"cake\\\")\"\n  \"b\" -> c\n}\n```\n\nwhich has a CC of 1 (3 - 4 + 2). A CC of 1 means there is one path through the program.\nObviously that is wrong. There are two paths. One returning normally, and one panicking.", "tree": {"sha": "cf29c367bd9f67037ba4f32a0e74dc943ab5e66d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf29c367bd9f67037ba4f32a0e74dc943ab5e66d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/902c7d832b6f355414632ca55dc7c7017fde5250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/902c7d832b6f355414632ca55dc7c7017fde5250", "html_url": "https://github.com/rust-lang/rust/commit/902c7d832b6f355414632ca55dc7c7017fde5250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/902c7d832b6f355414632ca55dc7c7017fde5250/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2", "html_url": "https://github.com/rust-lang/rust/commit/d7292fe235bc9d72c9c528e2c2bfc5d07ad7baa2"}], "stats": {"total": 187, "additions": 171, "deletions": 16}, "files": [{"sha": "cb391769279d5a410c16e1b21c014387f2284992", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/902c7d832b6f355414632ca55dc7c7017fde5250/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902c7d832b6f355414632ca55dc7c7017fde5250/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=902c7d832b6f355414632ca55dc7c7017fde5250", "patch": "@@ -3,6 +3,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc::middle::cfg::CFG;\n+use rustc::middle::ty;\n use syntax::codemap::Span;\n use syntax::attr::*;\n use syntax::ast::Attribute;\n@@ -32,23 +33,24 @@ impl LintPass for CyclomaticComplexity {\n }\n \n impl CyclomaticComplexity {\n-    fn check(&mut self, cx: &LateContext, block: &Block, span: Span) {\n+    fn check<'a, 'tcx>(&mut self, cx: &'a LateContext<'a, 'tcx>, block: &Block, span: Span) {\n         if in_macro(cx, span) { return; }\n         let cfg = CFG::new(cx.tcx, block);\n         let n = cfg.graph.len_nodes() as u64;\n         let e = cfg.graph.len_edges() as u64;\n         let cc = e + 2 - n;\n         let mut arm_counter = MatchArmCounter(0);\n         arm_counter.visit_block(block);\n-        let mut narms = arm_counter.0;\n-        if narms > 0 {\n-            narms = narms - 1;\n-        }\n-        \n-        if cc < narms {\n-            report_cc_bug(cx, cc, narms, span);\n+        let narms = arm_counter.0;\n+\n+        let mut diverge_counter = DivergenceCounter(0, &cx.tcx);\n+        diverge_counter.visit_block(block);\n+        let divergence = diverge_counter.0;\n+\n+        if cc + divergence < narms {\n+            report_cc_bug(cx, cc, narms, divergence, span);\n         } else {\n-            let rust_cc = cc - narms;\n+            let rust_cc = cc + divergence - narms;\n             if rust_cc > self.limit.limit() {\n                 cx.span_lint_help(CYCLOMATIC_COMPLEXITY, span,\n                 &format!(\"The function has a cyclomatic complexity of {}.\", rust_cc),\n@@ -93,8 +95,28 @@ impl<'a> Visitor<'a> for MatchArmCounter {\n             ExprMatch(_, ref arms, _) => {\n                 walk_expr(self, e);\n                 let arms_n: u64 = arms.iter().map(|arm| arm.pats.len() as u64).sum();\n-                if arms_n > 0 {\n-                    self.0 += arms_n - 1;\n+                if arms_n > 1 {\n+                    self.0 += arms_n - 2;\n+                }\n+            },\n+            ExprClosure(..) => {},\n+            _ => walk_expr(self, e),\n+        }\n+    }\n+}\n+\n+struct DivergenceCounter<'a, 'tcx: 'a>(u64, &'a ty::ctxt<'tcx>);\n+\n+impl<'a, 'b, 'tcx> Visitor<'a> for DivergenceCounter<'b, 'tcx> {\n+    fn visit_expr(&mut self, e: &'a Expr) {\n+        match e.node {\n+            ExprCall(ref callee, _) => {\n+                walk_expr(self, e);\n+                let ty = self.1.node_id_to_type(callee.id);\n+                if let ty::TyBareFn(_, ty) = ty.sty {\n+                    if ty.sig.skip_binder().output.diverges() {\n+                        self.0 += 1;\n+                    }\n                 }\n             },\n             ExprClosure(..) => {},\n@@ -104,15 +126,15 @@ impl<'a> Visitor<'a> for MatchArmCounter {\n }\n \n #[cfg(feature=\"debugging\")]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, span: Span) {\n     cx.sess().span_bug(span, &format!(\"Clippy encountered a bug calculating cyclomatic complexity: \\\n-                                       cc = {}, arms = {}. Please file a bug report.\", cc, narms));;\n+                                       cc = {}, arms = {}, div = {}. Please file a bug report.\", cc, narms, div));;\n }\n #[cfg(not(feature=\"debugging\"))]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, span: Span) {\n     if cx.current_level(CYCLOMATIC_COMPLEXITY) != Level::Allow {\n         cx.sess().span_note(span, &format!(\"Clippy encountered a bug calculating cyclomatic complexity \\\n                                             (hide this message with `#[allow(cyclomatic_complexity)]`): \\\n-                                            cc = {}, arms = {}. Please file a bug report.\", cc, narms));\n+                                            cc = {}, arms = {}, div = {}. Please file a bug report.\", cc, narms, div));\n     }\n }"}, {"sha": "a26731c396a57fc9fc78e021eb6521979bfcfb85", "filename": "tests/cc_seme.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/902c7d832b6f355414632ca55dc7c7017fde5250/tests%2Fcc_seme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902c7d832b6f355414632ca55dc7c7017fde5250/tests%2Fcc_seme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcc_seme.rs?ref=902c7d832b6f355414632ca55dc7c7017fde5250", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(dead_code)]\n+enum Baz {\n+    Baz1,\n+    Baz2,\n+}\n+\n+struct Test {\n+    t: Option<usize>,\n+    b: Baz,\n+}\n+\n+fn main() {\n+    use Baz::*;\n+    let x = Test { t: Some(0), b: Baz1 };\n+\n+    match x {\n+        Test { t: Some(_), b: Baz1 } => unreachable!(),\n+        Test { t: Some(42), b: Baz2 } => unreachable!(),\n+        Test { t: None, .. } => unreachable!(),\n+        Test { .. } => unreachable!(),\n+    }\n+}"}, {"sha": "1a6dfd28728cff861b882a8097f0a16626067b6a", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/902c7d832b6f355414632ca55dc7c7017fde5250/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902c7d832b6f355414632ca55dc7c7017fde5250/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=902c7d832b6f355414632ca55dc7c7017fde5250", "patch": "@@ -89,7 +89,7 @@ fn main() { //~ ERROR: The function has a cyclomatic complexity of 28.\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: The function has a cyclomatic complexity of 6\n+fn kaboom() {  //~ ERROR: The function has a cyclomatic complexity of 8\n     let n = 0;\n     'a: for i in 0..20 {\n         'b: for j in i..20 {\n@@ -170,6 +170,114 @@ fn barr() { //~ ERROR: The function has a cyclomatic complexity of 2\n     }\n }\n \n+#[cyclomatic_complexity = \"0\"]\n+fn barr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => panic!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => panic!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => panic!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => panic!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => panic!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => panic!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn cake() { //~ ERROR: The function has a cyclomatic complexity of 2\n+    if 4 == 5 {\n+        println!(\"yea\");\n+    } else {\n+        panic!(\"meh\");\n+    }\n+    println!(\"whee\");\n+}\n+\n+\n+#[cyclomatic_complexity = \"0\"]\n+pub fn read_file(input_path: &str) -> String { //~ ERROR: The function has a cyclomatic complexity of 4\n+    use std::fs::File;\n+    use std::io::{Read, Write};\n+    use std::path::Path;\n+    let mut file = match File::open(&Path::new(input_path)) {\n+        Ok(f) => f,\n+        Err(err) => {\n+            panic!(\"Can't open {}: {}\", input_path, err);\n+        }\n+    };\n+\n+    let mut bytes = Vec::new();\n+\n+    match file.read_to_end(&mut bytes) {\n+        Ok(..) => {},\n+        Err(_) => {\n+            panic!(\"Can't read {}\", input_path);\n+        }\n+    };\n+\n+    match String::from_utf8(bytes) {\n+        Ok(contents) => contents,\n+        Err(_) => {\n+            panic!(\"{} is not UTF-8 encoded\", input_path);\n+        }\n+    }\n+}\n+\n enum Void {}\n \n #[cyclomatic_complexity = \"0\"]"}]}