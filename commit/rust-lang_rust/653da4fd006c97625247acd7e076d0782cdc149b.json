{"sha": "653da4fd006c97625247acd7e076d0782cdc149b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1M2RhNGZkMDA2Yzk3NjI1MjQ3YWNkN2UwNzZkMDc4MmNkYzE0OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-08T09:38:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-08T09:38:49Z"}, "message": "Auto merge of #55532 - pnkfelix:rustc_error-survey, r=nikomatsakis\n\n#[rustc_error] survey\n\nFix #55505", "tree": {"sha": "acfa346812a2cf2bd37fb0d67a0630939745ca78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acfa346812a2cf2bd37fb0d67a0630939745ca78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653da4fd006c97625247acd7e076d0782cdc149b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653da4fd006c97625247acd7e076d0782cdc149b", "html_url": "https://github.com/rust-lang/rust/commit/653da4fd006c97625247acd7e076d0782cdc149b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653da4fd006c97625247acd7e076d0782cdc149b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d834550d54e4c5211f03f877c1756425f24be98", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d834550d54e4c5211f03f877c1756425f24be98", "html_url": "https://github.com/rust-lang/rust/commit/1d834550d54e4c5211f03f877c1756425f24be98"}, {"sha": "f4da71e04e1929d91a84855940c04d69d6166ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4da71e04e1929d91a84855940c04d69d6166ce3", "html_url": "https://github.com/rust-lang/rust/commit/f4da71e04e1929d91a84855940c04d69d6166ce3"}], "stats": {"total": 1761, "additions": 449, "deletions": 1312}, "files": [{"sha": "543eb2ac84263f70cf6ba80d336051b966d69e5f", "filename": "src/test/ui/asm/asm-bad-clobber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -21,11 +21,11 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm, rustc_attrs)]\n+#![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n-#[rustc_error]\n+\n pub fn main() {\n     unsafe {\n         // clobber formatted as register input/output"}, {"sha": "bb75fbc5bc4ca2a7c793e118853a06ba4175ad0a", "filename": "src/test/ui/asm/asm-misplaced-option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -21,14 +21,14 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm, rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n+#![feature(asm)]\n #![allow(dead_code, non_upper_case_globals)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n-#[rustc_error]\n-pub fn main() { //~ ERROR compilation successful\n+pub fn main() {\n     // assignment not dead\n     let mut x: isize = 0;\n     unsafe {"}, {"sha": "589fd47cc1ed591b853d3482e9ca14b0831baaaf", "filename": "src/test/ui/asm/asm-misplaced-option.stderr", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,17 +10,3 @@ warning: expected a clobber, found an option\n LL |         asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n    |                                                                                ^^^^^^^^^^\n \n-error: compilation successful\n-  --> $DIR/asm-misplaced-option.rs:31:1\n-   |\n-LL | / pub fn main() { //~ ERROR compilation successful\n-LL | |     // assignment not dead\n-LL | |     let mut x: isize = 0;\n-LL | |     unsafe {\n-...  |\n-LL | |     assert_eq!(x, 13);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c4b8164522c0e8dcbaf8048e783406cda1927df9", "filename": "src/test/ui/associated-types/cache/chrono-scan.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n pub type ParseResult<T> = Result<T, ()>;\n \n pub enum Item<'a> {     Literal(&'a str),\n@@ -35,5 +35,5 @@ pub fn parse<'a, I>(mut s: &str, items: I) -> ParseResult<()>\n     Ok(())\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "99281e745656dc0ee51f4c1217ea2f2d453c49d4", "filename": "src/test/ui/associated-types/cache/chrono-scan.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/chrono-scan.rs:39:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "01bf25ba9937f6faa0b7ea848404edfb4d37b6f2", "filename": "src/test/ui/associated-types/cache/elision.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n // Check that you are allowed to implement using elision but write\n // trait without elision (a bug in this cropped up during\n // bootstrapping, so this is a regression test).\n@@ -30,5 +30,5 @@ impl UnicodeStr for str {\n     }\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "c5314b58002c04ab3c060cab31ad487a1cfd7572", "filename": "src/test/ui/associated-types/cache/elision.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/elision.rs:34:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1a8c18db8968a4b45d8fd33ac140be5478843715", "filename": "src/test/ui/bad/bad-lint-cap3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,10 +12,10 @@\n \n #![warn(unused)]\n #![deny(warnings)]\n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n use std::option; //~ WARN\n \n-#[rustc_error]\n-fn main() {} //~ ERROR: compilation successful\n+\n+fn main() {}\n "}, {"sha": "aa455c51932e0d6317000deb2530eb22647f3b4e", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,11 +11,3 @@ LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: #[warn(unused_imports)] implied by #[warn(warnings)]\n \n-error: compilation successful\n-  --> $DIR/bad-lint-cap3.rs:20:1\n-   |\n-LL | fn main() {} //~ ERROR: compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1ce455123aa75237dd4e3f291e4bd952af7a5f6f", "filename": "src/test/ui/coherence/coherence-projection-ok-orphan.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n-\n // Here we do not get a coherence conflict because `Baz: Iterator`\n // does not hold and (due to the orphan rules), we can rely on that.\n \n@@ -25,5 +25,5 @@ impl Foo<i32> for Baz { }\n \n impl<A:Iterator> Foo<A::Item> for A { }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "1b9a32525bfacc16b89c4ad6e51230c8c99dce1b", "filename": "src/test/ui/coherence/coherence-projection-ok-orphan.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/coherence-projection-ok-orphan.rs:29:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "dfb2ef0a2baa3a7f71672a3fa2e0b30cdcb93a0b", "filename": "src/test/ui/coherence/coherence-projection-ok.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n pub trait Foo<P> {}\n \n pub trait Bar {\n@@ -24,5 +24,5 @@ impl Bar for i32 {\n     type Output = u32;\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "945f3b396b7b264e1b3ba8b427d86fb1073e0753", "filename": "src/test/ui/coherence/coherence-projection-ok.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/coherence-projection-ok.rs:28:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7d41fc1fb63c47a6f7da95fdfa33475229215bc5", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,8 +12,8 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-\n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codgen\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -30,5 +30,5 @@ impl<T: lib::MyCopy> MyTrait for T { }\n // Huzzah.\n impl MyTrait for lib::MyFundamentalStruct<MyType> { }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "675dc1b7004d8d1cab6883d827e45793ea75860f", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/coherence_copy_like_err_fundamental_struct.rs:34:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "15acf1a99af236317ab16e097808e94464f1e011", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,8 +12,8 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-\n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -30,5 +30,5 @@ impl<T: lib::MyCopy> MyTrait for T { }\n // Huzzah.\n impl<'a> MyTrait for lib::MyFundamentalStruct<&'a MyType> { }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "5143d4e874b09480d006126c8bd159e39bfb2025", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_ref.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/coherence_copy_like_err_fundamental_struct_ref.rs:34:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ee6a61dca4add7a2649a8404f4f41fd5813cba4b", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n \n // aux-build:coherence_copy_like_lib.rs\n \n-#![feature(rustc_attrs)]\n+\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -26,5 +26,5 @@ impl<T: lib::MyCopy> MyTrait for T { }\n // Tuples are not fundamental.\n impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "7124c05036ce9f3908d21e7fbb5dd145558a7222", "filename": "src/test/ui/coherence/coherence_local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,8 +12,8 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-\n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -29,5 +29,5 @@ impl lib::MyCopy for Box<MyType> { }\n impl lib::MyCopy for lib::MyFundamentalStruct<MyType> { }\n impl lib::MyCopy for lib::MyFundamentalStruct<Box<MyType>> { }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "c4340e8d87686bb27572d8dd5e505d1eeee9f162", "filename": "src/test/ui/coherence/coherence_local.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/coherence_local.rs:33:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "72772a6efbd12055f5aed5ca003f23e5c46facc2", "filename": "src/test/ui/coherence/coherence_local_err_struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n \n // aux-build:coherence_copy_like_lib.rs\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -25,5 +25,5 @@ struct MyType { x: i32 }\n // MyStruct is not fundamental.\n impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "88e98c7ce00117c7e19ba3e725f9b6ebeae8d001", "filename": "src/test/ui/coherence/coherence_local_err_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_tuple.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n \n // aux-build:coherence_copy_like_lib.rs\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -25,5 +25,5 @@ struct MyType { x: i32 }\n // Tuples are not fundamental, so this is not a local impl.\n impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "de26433012d901851258fb05459db7791c16a34e", "filename": "src/test/ui/coherence/coherence_local_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,8 +12,8 @@\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n // aux-build:coherence_copy_like_lib.rs\n-\n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n@@ -23,5 +23,5 @@ struct MyType { x: i32 }\n // naturally, legal\n impl lib::MyCopy for MyType { }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "13d6fdd80f8a1a7883ae5838d8f6078a5bbb812e", "filename": "src/test/ui/coherence/coherence_local_ref.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/coherence_local_ref.rs:27:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b2805d76d8f6b5983b9de840d60db52b59118cf2", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n #![deny(unused_attributes)] // c.f #35584\n-\n mod auxiliary {\n     #[cfg_attr(any(), path = \"nonexistent_file.rs\")] pub mod namespaced_enums;\n     #[cfg_attr(all(), path = \"namespaced_enums.rs\")] pub mod nonexistent_file;\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let _ = auxiliary::namespaced_enums::Foo::A;\n     let _ = auxiliary::nonexistent_file::Foo::A;\n }"}, {"sha": "67e59d054d5c15b766fb1dc3b38dfcdc8194f1e4", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/cfg_attr_path.rs:21:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let _ = auxiliary::namespaced_enums::Foo::A;\n-LL | |     let _ = auxiliary::nonexistent_file::Foo::A;\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "031576dd30830480655873f2b3d10179d6f4abb7", "filename": "src/test/ui/consts/const-fn-stability-calls-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,16 +10,16 @@\n \n // Test use of const fn from another crate without a feature gate.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(unused_variables)]\n-\n // aux-build:const_fn_lib.rs\n \n extern crate const_fn_lib;\n \n use const_fn_lib::foo;\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let x = foo(); // use outside a constant is ok\n }"}, {"sha": "50c959d68053c19355217e2a07dbce4e12944242", "filename": "src/test/ui/consts/const-fn-stability-calls-3.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/const-fn-stability-calls-3.rs:23:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let x = foo(); // use outside a constant is ok\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9fd9f7b85af447a41f7c85806152b0e5ae55bd3b", "filename": "src/test/ui/expanded-cfg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpanded-cfg.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -7,9 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-#![feature(custom_attribute, rustc_attrs)]\n-\n+// skip-codegen\n+// compile-pass\n+#![feature(custom_attribute)]\n macro_rules! mac {\n     {} => {\n         #[cfg(attr)]\n@@ -28,5 +28,5 @@ macro_rules! mac {\n \n mac! {}\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "d7bc47fad276fd245b22bb21424f045f3d3edd9d", "filename": "src/test/ui/expanded-cfg.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fexpanded-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fexpanded-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpanded-cfg.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/expanded-cfg.rs:32:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3f340145acffede8f87bb2dba4e52999a4bfe9b3", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -40,7 +40,7 @@\n // inputs are handled by each, and (2.) to ease searching for related\n // occurrences in the source text.\n \n-#![feature(rustc_attrs)] // For `rustc_error`; see note below.\n+// skip-codegen\n #![warn(unused_attributes, unknown_lints)]\n #![allow(dead_code)]\n #![allow(stable_features)]\n@@ -584,7 +584,7 @@ mod export_name {\n     #[export_name = \"2200\"] impl S { }\n }\n \n-// Note that this test ends with a `#[rustc_error] fn main()`, so it\n+// Note that this test has a `skip-codegen`, so it\n // will never invoke the linker. These are here nonetheless to point\n // out that we allow them at non-crate-level (though I do not know\n // whether they have the same effect here as at crate-level).\n@@ -835,12 +835,12 @@ mod type_length_limit {\n     //~| WARN crate-level attribute should be an inner attribute\n }\n \n-// Since we expect for the mix of attributes used here to compile\n-// successfully, and we are just testing for the expected warnings of\n-// various (mis)uses of attributes, we use the `rustc_error` attribute\n-// on the `fn main()`.\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+\n+\n+\n+\n+fn main() {\n     println!(\"Hello World\");\n }"}, {"sha": "59e327bc1ba6288275abfb33962c9e93eca741cb", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -1303,13 +1303,7 @@ warning: unused attribute\n LL | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: compilation successful\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:844:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     println!(\"Hello World\");\n-LL | | }\n-   | |_^\n+error: invalid windows subsystem `1000`, only `windows` and `console` are allowed\n \n error: aborting due to previous error\n "}, {"sha": "3f423a415cfb80a120b4f077729c80f51daa2065", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-deprecated.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -15,17 +15,17 @@\n //\n // (For non-crate-level cases, see issue-43106-gating-of-builtin-attrs.rs)\n \n-#![feature(rustc_attrs)] // For `rustc_error`; see note below.\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n-\n #![deprecated           = \"1100\"]\n \n // Since we expect for the mix of attributes used here to compile\n // successfully, and we are just testing for the expected warnings of\n // various (mis)uses of attributes, we use the `rustc_error` attribute\n // on the `fn main()`.\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     println!(\"Hello World\");\n }"}, {"sha": "802c5d9384d7575f4264652d949fa924a9ae4123", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-deprecated.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-43106-gating-of-deprecated.rs:29:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     println!(\"Hello World\");\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4371de57776dffcc7f45653d86daea7db7863ac3", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that literals in attributes parse just fine.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -29,5 +29,5 @@\n #[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n struct Q {  }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "d57dad074b27b3fc44d410a70ceb1734e1447114", "filename": "src/test/ui/glob-cycles.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fglob-cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fglob-cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-cycles.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n mod foo {\n     pub use bar::*;\n     pub use main as f;\n@@ -25,5 +25,5 @@ mod baz {\n     pub use super::*;\n }\n \n-#[rustc_error]\n-pub fn main() {} //~ ERROR compilation successful\n+\n+pub fn main() {}"}, {"sha": "a9fd9306e2140911165e5a3f0d32dba5a6a6ce7d", "filename": "src/test/ui/glob-cycles.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fglob-cycles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fglob-cycles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-cycles.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/glob-cycles.rs:29:1\n-   |\n-LL | pub fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "bdf591ba7ab54f581396fa7c0e6c853a657ea697", "filename": "src/test/ui/hygiene/assoc_ty_bindings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,8 +11,8 @@\n // ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro, associated_type_defaults)]\n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n trait Base {\n     type AssocTy;\n     fn f();\n@@ -45,5 +45,5 @@ macro mac() {\n \n mac!();\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "0adf80994f7fc63f0bdff42829f3307139c3a177", "filename": "src/test/ui/hygiene/assoc_ty_bindings.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/assoc_ty_bindings.rs:49:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a52bb7f8a288a268f4f87d2f1a41a162326d61ee", "filename": "src/test/ui/if/if-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fif%2Fif-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fif%2Fif-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-loop.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n // This used to ICE because the \"if\" being unreachable was not handled correctly\n fn err() {\n     if loop {} {}\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "6862560570d73e7d3a1e8a1f7e56e2e6fbaf911c", "filename": "src/test/ui/if/if-loop.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fif%2Fif-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fif%2Fif-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-loop.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/if-loop.rs:20:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "663e1379b40b117a1a08aeb53c4a7281d9217f4b", "filename": "src/test/ui/imports/import-crate-var.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,12 +10,12 @@\n \n // aux-build:import_crate_var.rs\n \n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n #[macro_use] extern crate import_crate_var;\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     m!();\n     //~^ WARN `$crate` may not be imported\n     //~| NOTE `use $crate;` was erroneously allowed and will become a hard error"}, {"sha": "ce4ffe796f3034d06883b5478119af6fde4439b2", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -7,15 +7,3 @@ LL |     m!();\n    = note: `use $crate;` was erroneously allowed and will become a hard error in a future release\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: compilation successful\n-  --> $DIR/import-crate-var.rs:18:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     m!();\n-LL | |     //~^ WARN `$crate` may not be imported\n-LL | |     //~| NOTE `use $crate;` was erroneously allowed and will become a hard error\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b41d81f332c7921fd3e9ebe7affe41ad1ba65ed9", "filename": "src/test/ui/issues/issue-11740.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n struct Attr {\n     name: String,\n     value: String,\n@@ -31,8 +31,8 @@ impl Element {\n     }\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let element = Element { attrs: Vec::new() };\n     let _ = unsafe { element.get_attr(\"foo\") };\n }"}, {"sha": "a1913e0057ca77c0c8fe1b7b0701776595eab439", "filename": "src/test/ui/issues/issue-11740.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-11740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-11740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11740.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-11740.rs:35:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let element = Element { attrs: Vec::new() };\n-LL | |     let _ = unsafe { element.get_attr(\"foo\") };\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d1d129c918a7c54e09f661fada4adaa31e59b73f", "filename": "src/test/ui/issues/issue-16994.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n fn cb<'a,T>(_x: Box<Fn((&'a i32, &'a (Vec<&'static i32>, bool))) -> T>) -> T {\n     panic!()\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     cb(Box::new(|(k, &(ref v, b))| (*k, v.clone(), b)));\n }"}, {"sha": "8392b9da4118b7ffe2b793aaeb5568eafe148be3", "filename": "src/test/ui/issues/issue-16994.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-16994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-16994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16994.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-16994.rs:18:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     cb(Box::new(|(k, &(ref v, b))| (*k, v.clone(), b)));\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d76ded9e679a6eb23df94327b5d7a77dc5542e60", "filename": "src/test/ui/issues/issue-19601.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-19601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-19601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19601.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n trait A<T> {}\n struct B<T> where B<T>: A<B<T>> { t: T }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n }"}, {"sha": "594d76605fe9092acd19db93e002b0503ae1cd9c", "filename": "src/test/ui/issues/issue-19601.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-19601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-19601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19601.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,9 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-19601.rs:18:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "271230ee4279e2de0de30b722cbd70ba57f61e82", "filename": "src/test/ui/issues/issue-22603.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -7,17 +7,17 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-#![feature(unboxed_closures, fn_traits, rustc_attrs)]\n-\n+// skip-codegen\n+// compile-pass\n+#![feature(unboxed_closures, fn_traits)]\n struct Foo;\n \n impl<A> FnOnce<(A,)> for Foo {\n     type Output = ();\n     extern \"rust-call\" fn call_once(self, (_,): (A,)) {\n     }\n }\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     println!(\"{:?}\", Foo(\"bar\"));\n }"}, {"sha": "b50a5a25a7a4628dc110e1f273f4c60fdc49eed2", "filename": "src/test/ui/issues/issue-22603.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-22603.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-22603.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22603.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-22603.rs:21:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     println!(\"{:?}\", Foo(\"bar\"));\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9b4c9eb2d43e0258a7d7c4ec75eb037cd6da3f46", "filename": "src/test/ui/issues/issue-22789.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-22789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-22789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22789.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, fn_traits, rustc_attrs)]\n-\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+// compile-pass\n+// skip-codegen\n+#![feature(unboxed_closures, fn_traits)]\n+fn main() {\n     let k = |x: i32| { x + 1 };\n     Fn::call(&k, (0,));\n }"}, {"sha": "afeae9c78efb89d7f7aaf4a6e728b85bdc9630df", "filename": "src/test/ui/issues/issue-22789.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-22789.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-22789.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22789.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-22789.rs:14:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let k = |x: i32| { x + 1 };\n-LL | |     Fn::call(&k, (0,));\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "41bd5d7188fbfee05ba3b1647696bd1bea1c7be5", "filename": "src/test/ui/issues/issue-22933-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n struct CNFParser {\n     token: char,\n }\n@@ -31,5 +31,5 @@ impl CNFParser {\n     }\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "eaebebe3b111a6d1744243cbb033665e5bec2101", "filename": "src/test/ui/issues/issue-22933-1.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-22933-1.rs:35:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "f047d6e7fffd03ced8ad54825b268aa5c6fdf86e", "filename": "src/test/ui/issues/issue-24883.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-24883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-24883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24883.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n+// compile-pass\n+// skip-codegen\n mod a {\n     pub mod b { pub struct Foo; }\n \n@@ -21,8 +21,8 @@ mod a {\n     pub use self::c::*;\n }\n \n-#[rustc_error]\n-fn main() {  //~ ERROR compilation successful\n+\n+fn main() {\n     let _ = a::c::Bar(a::b::Foo);\n     let _ = a::Bar(a::b::Foo);\n }"}, {"sha": "4b17747f10908886e26c49f08a9c493de55a2b39", "filename": "src/test/ui/issues/issue-24883.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-24883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-24883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24883.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-24883.rs:25:1\n-   |\n-LL | / fn main() {  //~ ERROR compilation successful\n-LL | |     let _ = a::c::Bar(a::b::Foo);\n-LL | |     let _ = a::Bar(a::b::Foo);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c930f26acf4c6e9e9b18883758357bcb5cee8a9d", "filename": "src/test/ui/issues/issue-26614.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-26614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-26614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26614.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n-\n trait Mirror {\n     type It;\n }\n@@ -20,8 +20,8 @@ impl<T> Mirror for T {\n }\n \n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let c: <u32 as Mirror>::It = 5;\n     const CCCC: <u32 as Mirror>::It = 5;\n }"}, {"sha": "1752d80fde3679f44b2c408b5001282e658c70ff", "filename": "src/test/ui/issues/issue-26614.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-26614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-26614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26614.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-26614.rs:24:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let c: <u32 as Mirror>::It = 5;\n-LL | |     const CCCC: <u32 as Mirror>::It = 5;\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9751dae26be05fb3ea5524edf718d3d60e94eef2", "filename": "src/test/ui/issues/issue-26930.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-26930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-26930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26930.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(unused)]\n-\n extern crate core;\n use core as core_export;\n use self::x::*;\n mod x {}\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "f962f4c58c44420d8ef82837329b82cc3886a461", "filename": "src/test/ui/issues/issue-26930.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-26930.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-26930.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26930.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-26930.rs:20:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "be28bf0d272ce8ffa44bfee1049cc0f129ce8589", "filename": "src/test/ui/issues/issue-29857.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-29857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-29857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29857.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n use std::marker::PhantomData;\n \n@@ -27,5 +27,5 @@ pub trait Bar {\n \n impl<T: 'static, W: Bar<Output = T>> Foo<*mut T> for W {}\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "d5ba942b19f26a4806d7268ae82eec250b50a618", "filename": "src/test/ui/issues/issue-29857.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-29857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-29857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29857.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-29857.rs:31:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "f869c89b79cfdc19d197cf333b60f806e81f3344", "filename": "src/test/ui/issues/issue-31924-non-snake-ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![deny(non_snake_case)]\n-\n #[no_mangle]\n pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {}\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "2aaaa1578a5816d73e3a14b386fd460bfc781142", "filename": "src/test/ui/issues/issue-31924-non-snake-ffi.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-31924-non-snake-ffi.rs:18:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "f96f1ae69214bbda519e7b47354ba5a8001d85d9", "filename": "src/test/ui/issues/issue-32119.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32119.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n-\n pub type T = ();\n mod foo { pub use super::T; }\n mod bar { pub use super::T; }\n@@ -25,5 +25,5 @@ mod baz {\n     pub use self::bar::*;\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "04276ec1ffd068002329a776aa329e8d8838aee0", "filename": "src/test/ui/issues/issue-32119.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32119.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32119.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32119.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-32119.rs:29:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c4e8450fabc1782c5c0dc5302417ae97922c2a85", "filename": "src/test/ui/issues/issue-32222.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32222.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n \n mod foo {\n@@ -30,5 +31,5 @@ mod b {\n     pub use a::bar;\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "ba2c5396e4d8c757c744d1fefec181317386b255", "filename": "src/test/ui/issues/issue-32222.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32222.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32222.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32222.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-32222.rs:34:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1061ffe11e1c41194ca5c494d49ee668a186ac14", "filename": "src/test/ui/issues/issue-32797.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32797.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n pub use bar::*;\n mod bar {\n@@ -20,5 +21,5 @@ mod baz {\n     pub use main as f;\n }\n \n-#[rustc_error]\n-pub fn main() {} //~ ERROR compilation successful\n+\n+pub fn main() {}"}, {"sha": "8e1430e505df96ee71ed29c8d5b7a4ef87d3484e", "filename": "src/test/ui/issues/issue-32797.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32797.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32797.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32797.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-32797.rs:24:1\n-   |\n-LL | pub fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c0b14da9b2cd109e0796d91aa77a9b5e22f4f586", "filename": "src/test/ui/issues/issue-32922.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-32922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32922.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n \n macro_rules! foo { () => {\n@@ -31,8 +32,8 @@ macro_rules! baz {\n     }\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     foo! {};\n     bar! {};\n "}, {"sha": "c1e80b0eb78b8a9efb78ec3c13dcdced58b6c8e3", "filename": "src/test/ui/issues/issue-32922.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-32922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32922.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-32922.rs:35:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     foo! {};\n-LL | |     bar! {};\n-LL | |\n-LL | |     let mut a = true;\n-LL | |     baz!(a);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "858c9f4ae3f35fa2b1b42eea8bf09d55a81b443a", "filename": "src/test/ui/issues/issue-33241.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n use std::fmt;\n \n // CoerceUnsized is not implemented for tuples. You can still create\n // an unsized tuple by transmuting a trait object.\n fn any<T>() -> T { unreachable!() }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let t: &(u8, fmt::Debug) = any();\n     println!(\"{:?}\", &t.1);\n }"}, {"sha": "1b6577dc41f06e49d701886b5bc8ca31fcf40854", "filename": "src/test/ui/issues/issue-33241.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-33241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-33241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33241.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-33241.rs:20:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let t: &(u8, fmt::Debug) = any();\n-LL | |     println!(\"{:?}\", &t.1);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "10ae2b8e6dc167adabf61d1a76ac3e9ceb72526e", "filename": "src/test/ui/issues/issue-34028.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34028.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n macro_rules! m {\n     () => { #[cfg(any())] fn f() {} }\n@@ -17,5 +18,5 @@ macro_rules! m {\n trait T {}\n impl T for () { m!(); }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "b715fa84f60184af6f8f0603ae6c7f0972456f09", "filename": "src/test/ui/issues/issue-34028.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34028.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-34028.rs:21:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "55fec30cdde71966a69fe156b3f88f9fcdf025b1", "filename": "src/test/ui/issues/issue-34171.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34171.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34171.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34171.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n macro_rules! null { ($i:tt) => {} }\n macro_rules! apply_null {\n     ($i:item) => { null! { $i } }\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     apply_null!(#[cfg(all())] fn f() {});\n }"}, {"sha": "cb8cfbd8599ce61726db07386b6ac60b9c692f83", "filename": "src/test/ui/issues/issue-34171.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34171.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34171.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34171.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-34171.rs:19:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     apply_null!(#[cfg(all())] fn f() {});\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "394a85f8c89324e2864b9225fb6cea895cce689c", "filename": "src/test/ui/issues/issue-34418.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34418.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(unused)]\n \n macro_rules! make_item {\n@@ -27,5 +28,5 @@ fn g() {\n     make_stmt! {}\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "4cb5ec1ae3b32a4559da727fa7910665e46cc72f", "filename": "src/test/ui/issues/issue-34418.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34418.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-34418.rs:31:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "8aad248dc50f5bf249831cfba23697668b067ac7", "filename": "src/test/ui/issues/issue-34839.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-34839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34839.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(dead_code)]\n \n trait RegularExpression: Sized {\n@@ -27,5 +28,5 @@ enum FindCapturesInner<'r, 't> {\n     Dynamic(FindCaptures<'t, ExecNoSyncStr<'r>>),\n }\n \n-#[rustc_error]\n-fn main() {}    //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "538cc7a581bd6b84ef74e7eccdc78c6a129bb1d7", "filename": "src/test/ui/issues/issue-34839.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-34839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34839.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-34839.rs:31:1\n-   |\n-LL | fn main() {}    //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "57ca2c73d8e47a4fe1338a9b238e7db156e9f981", "filename": "src/test/ui/issues/issue-35570.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n use std::mem;\n \n@@ -34,7 +35,7 @@ fn foo<'a>(x: &'a ()) -> <() as Lifetime<'a>>::Out {\n fn takes_lifetime(_f: for<'a> fn(&'a ()) -> <() as Lifetime<'a>>::Out) {\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     takes_lifetime(foo);\n }"}, {"sha": "349693f29d5feb5e535879a1fd1a7bf16a6d833b", "filename": "src/test/ui/issues/issue-35570.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-35570.rs:38:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     takes_lifetime(foo);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d16aa1acee09c2417bea9e00b8f032b6f5584fc8", "filename": "src/test/ui/issues/issue-36116.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,9 +10,9 @@\n \n // Unnecessary path disambiguator is ok\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(unused)]\n-\n macro_rules! m {\n     ($p: path) => {\n         let _ = $p(0);\n@@ -33,5 +33,5 @@ fn f() {\n     m!(S::<u8>); // OK, no warning\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "5819ea78e2455f53079a0917e8663801d48e57af", "filename": "src/test/ui/issues/issue-36116.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36116.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,11 +10,3 @@ warning: unnecessary path disambiguator\n LL |     let g: Foo::<i32> = Foo { _a: 42 }; //~ WARN unnecessary path disambiguator\n    |               ^^ try removing `::`\n \n-error: compilation successful\n-  --> $DIR/issue-36116.rs:37:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "e2f8c00dfb9bd5311c3fc26b3d1d641f2bcc181e", "filename": "src/test/ui/issues/issue-36379.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36379.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n fn _test() -> impl Default { }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "b06591f411e99187210f4ff0237c5b98b6a6f096", "filename": "src/test/ui/issues/issue-36379.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-36379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-36379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36379.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-36379.rs:16:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9396b7ad1b1eba7fd47145dbb88d3caafb3b9cab", "filename": "src/test/ui/issues/issue-36839.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n pub trait Foo {\n     type Bar;\n@@ -26,7 +27,7 @@ impl<T> Broken for T {\n     }\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let _m: &Broken<Assoc=()> = &();\n }"}, {"sha": "dd78668801c580e839d397ef11f069ebae52831d", "filename": "src/test/ui/issues/issue-36839.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-36839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-36839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36839.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-36839.rs:30:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let _m: &Broken<Assoc=()> = &();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "adbd0c4b7abe5591bf0699f7f8dded8badb4c07a", "filename": "src/test/ui/issues/issue-37051.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, associated_type_defaults)]\n+// compile-pass\n+// skip-codegen\n+#![feature(associated_type_defaults)]\n #![allow(warnings)]\n-\n trait State: Sized {\n     type NextState: State = StateMachineEnded;\n     fn execute(self) -> Option<Self::NextState>;\n@@ -24,6 +25,6 @@ impl State for StateMachineEnded {\n     }\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n }"}, {"sha": "b0404088d4d8af1ab57fba343ecec811cb6dc99e", "filename": "src/test/ui/issues/issue-37051.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-37051.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-37051.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,9 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-37051.rs:28:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3486403f54a9f286f7155829792034a5182c7f51", "filename": "src/test/ui/issues/issue-37366.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n // ignore-emscripten\n-\n-#![feature(rustc_attrs, asm)]\n+// compile-pass\n+// skip-codegen\n+#![feature(asm)]\n \n macro_rules! interrupt_handler {\n     () => {\n@@ -21,6 +22,6 @@ macro_rules! interrupt_handler {\n }\n interrupt_handler!{}\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n }"}, {"sha": "8667feccf9971c2be3e4354720c2c4a91768645b", "filename": "src/test/ui/issues/issue-37366.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-37366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-37366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37366.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,9 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-37366.rs:25:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "44fcc89983751037244fdef8ab3da38fcd19103c", "filename": "src/test/ui/issues/issue-37510.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37510.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n fn foo(_: &mut i32) -> bool { true }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let opt = Some(92);\n     let mut x = 62;\n "}, {"sha": "48db0d5e2023d6ad6906ac7a6b6ec4181f67b5cc", "filename": "src/test/ui/issues/issue-37510.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-37510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-37510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37510.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-37510.rs:16:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let opt = Some(92);\n-LL | |     let mut x = 62;\n-LL | |\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9ceefaf57b75205ae96a3babf10c3776d7313b09", "filename": "src/test/ui/issues/issue-37515.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -7,13 +7,13 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-#![feature(rustc_attrs)]\n+// skip-codegen\n+// compile-pass\n #![warn(unused)]\n \n type Z = for<'x> Send;\n //~^ WARN type alias is never used\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n }"}, {"sha": "3a6e35bb12e0476897e77a28515766d20d4fa775", "filename": "src/test/ui/issues/issue-37515.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,12 +11,3 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(dead_code)] implied by #[warn(unused)]\n \n-error: compilation successful\n-  --> $DIR/issue-37515.rs:18:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "30552c03cde0e470acfb10c1dcf2b361986ecb9e", "filename": "src/test/ui/issues/issue-38160.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-38160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-38160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38160.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_consts, rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n+#![feature(associated_consts)]\n #![allow(warnings)]\n-\n trait MyTrait {\n     const MY_CONST: &'static str;\n }\n@@ -27,5 +28,5 @@ macro_rules! my_macro {\n \n my_macro!();\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "1277d84a0320cbe9ab6301f8b8beac3762806a0b", "filename": "src/test/ui/issues/issue-38160.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-38160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-38160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38160.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-38160.rs:31:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b0b79c1f49d3ef7f6640013d446a28f3e976d1a7", "filename": "src/test/ui/issues/issue-38381.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-38381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-38381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38381.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n \n use std::ops::Deref;\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let _x: fn(&i32) -> <&i32 as Deref>::Target = unimplemented!();\n }"}, {"sha": "baa6338a37ead515d48db74ee1f128f8e5251bba", "filename": "src/test/ui/issues/issue-38381.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-38381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-38381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38381.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-38381.rs:16:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let _x: fn(&i32) -> <&i32 as Deref>::Target = unimplemented!();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0d4ba99c45f0e2fad735ce9cfc1dbe40d14b723d", "filename": "src/test/ui/issues/issue-40350.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40350.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n+// skip-codegen\n #![allow(warnings)]\n \n enum E {\n@@ -18,7 +19,5 @@ enum E {\n     }\n }\n \n-#[rustc_error]\n-fn main() {}\n-//~^ ERROR compilation successful\n \n+fn main() {}"}, {"sha": "ad85bf2a778141287451e96832faa662695fdbd3", "filename": "src/test/ui/issues/issue-40350.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40350.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40350.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40350.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-40350.rs:22:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "723b6f3111c62230a3505767818ed5d3392657e2", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,11 +12,3 @@ LL |         &mut x\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n \n-error: compilation successful\n-  --> $DIR/issue-40510-1.rs:23:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b053f8e7d807a5cf7f78df14aa8b8b2f9277898e", "filename": "src/test/ui/issues/issue-40510-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n fn f() {\n@@ -19,5 +19,5 @@ fn f() {\n     };\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "1f5a41fce968830bdd2a985a5c8514f7cb77d8fd", "filename": "src/test/ui/issues/issue-40510-1.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-40510-1.rs:23:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "74c855476f2f56c5aabee0c4a762254e695f56c0", "filename": "src/test/ui/issues/issue-40510-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n fn f() {\n@@ -19,5 +19,5 @@ fn f() {\n     };\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "03998af50c2d3c165a11865c7d7210ea4e8be28c", "filename": "src/test/ui/issues/issue-40510-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-2.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-40510-2.rs:23:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "e8e82ee8fdae26a5d606e12fb1b68040c35346f2", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -14,11 +14,3 @@ LL | |         }\n            It represents potential unsoundness in your code.\n            This warning will become a hard error in the future.\n \n-error: compilation successful\n-  --> $DIR/issue-40510-3.rs:25:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d4d1d28a1376aeb09fef18dab17066faab13b464", "filename": "src/test/ui/issues/issue-40510-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n fn f() {\n@@ -21,5 +21,5 @@ fn f() {\n     };\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "c77b5cc830365893f17245913e75abb5ffe117d2", "filename": "src/test/ui/issues/issue-40510-3.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-40510-3.rs:25:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "6059f2b82c1b5166705860412735a16705f09c91", "filename": "src/test/ui/issues/issue-40510-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-40510-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-4.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n fn f() {\n@@ -21,5 +21,5 @@ fn f() {\n     };\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "1f3cd00fb483b42a9ce87d94d928a474c86c5309", "filename": "src/test/ui/issues/issue-40510-4.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-40510-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-4.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-40510-4.rs:25:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "57af617c5ff811e6fa6f28451b69a8dee4a50423", "filename": "src/test/ui/issues/issue-41998.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-41998.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fissues%2Fissue-41998.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41998.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     if ('x' as char) < ('y' as char) {\n         print!(\"x\");\n     } else {"}, {"sha": "e757c7f3a44635926f7cd837f78a5b9bf89d7ce3", "filename": "src/test/ui/issues/issue-41998.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-41998.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fissues%2Fissue-41998.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41998.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/issue-41998.rs:14:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     if ('x' as char) < ('y' as char) {\n-LL | |         print!(\"x\");\n-LL | |     } else {\n-LL | |         print!(\"y\");\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "cd0ba5e4a0a5946f41b573fbc2efd59215c60360", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -15,7 +15,7 @@\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n-#![feature(rustc_attrs)]\n+\n \n extern crate lifetime_bound_will_change_warning_lib as lib;\n \n@@ -59,6 +59,6 @@ fn test3cc<'a>(x: &'a Box<Fn()+'static>) {\n     lib::ref_obj(x)\n }\n \n-#[rustc_error]\n+\n fn main() {\n }"}, {"sha": "d29019309abadd9c9822dc0aaebd95553f716202", "filename": "src/test/ui/lint/lint-output-format-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,14 +11,14 @@\n // aux-build:lint_output_format.rs\n \n #![feature(unstable_test_feature)]\n-#![feature(rustc_attrs)]\n+// compile-pass\n \n extern crate lint_output_format;\n use lint_output_format::{foo, bar};\n //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n \n-#[rustc_error]\n-fn main() { //~ ERROR: compilation successful\n+\n+fn main() {\n     let _x = foo();\n     //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n     let _y = bar();"}, {"sha": "a5718fd74b379a3c2f0f2fa37dabee0b6f1bd649", "filename": "src/test/ui/lint/lint-output-format-2.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,15 +12,3 @@ warning: use of deprecated item 'lint_output_format::foo': text\n LL |     let _x = foo();\n    |              ^^^\n \n-error: compilation successful\n-  --> $DIR/lint-output-format-2.rs:21:1\n-   |\n-LL | / fn main() { //~ ERROR: compilation successful\n-LL | |     let _x = foo();\n-LL | |     //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n-LL | |     let _y = bar();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "459eaa14737ac4990a6c023ba3e6f649a0700f58", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n // aux-build:lint_stability.rs\n // aux-build:inherited_stability.rs\n // aux-build:stability_cfg1.rs\n // aux-build:stability_cfg2.rs\n // ignore-tidy-linelength\n-\n #![warn(deprecated)]\n #![allow(dead_code, unused_extern_crates)]\n-#![feature(staged_api, unstable_test_feature, rustc_attrs)]\n+#![feature(staged_api, unstable_test_feature)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -470,4 +470,4 @@ mod this_crate {\n     trait LocalTrait : DeprecatedTrait { } //~ WARN use of deprecated item 'this_crate::DeprecatedTrait'\n }\n \n-#[rustc_error] fn main() {} //~ ERROR: compilation successful\n+fn main() {}"}, {"sha": "a763a994a884b0ea3db2345555a028a56d3d553c", "filename": "src/test/ui/lint/lint-stability-deprecated.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -634,11 +634,3 @@ warning: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n LL |         foo.trait_deprecated_text(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-error: compilation successful\n-  --> $DIR/lint-stability-deprecated.rs:473:16\n-   |\n-LL | #[rustc_error] fn main() {} //~ ERROR: compilation successful\n-   |                ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "82ec3be15969a3b3be39a520b1839b5db5152450", "filename": "src/test/ui/lint/lint-type-overflow2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -7,15 +7,15 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n \n+// compile-flags: -O\n #![warn(overflowing_literals)]\n #![warn(const_err)]\n-#![feature(rustc_attrs)]\n+// compile-pass\n \n #[allow(unused_variables)]\n-#[rustc_error]\n-fn main() { //~ ERROR: compilation successful\n+\n+fn main() {\n     let x2: i8 = --128; //~ warn: literal out of range for i8\n \n     let x = -3.40282357e+38_f32; //~ warn: literal out of range for f32"}, {"sha": "1fb63ac75957983ba70760c4bcdf45ec51198d83", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -34,17 +34,15 @@ warning: literal out of range for f64\n LL |     let x =  1.7976931348623159e+308_f64; //~ warn: literal out of range for f64\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: compilation successful\n-  --> $DIR/lint-type-overflow2.rs:18:1\n-   |\n-LL | / fn main() { //~ ERROR: compilation successful\n-LL | |     let x2: i8 = --128; //~ warn: literal out of range for i8\n-LL | |\n-LL | |     let x = -3.40282357e+38_f32; //~ warn: literal out of range for f32\n-...  |\n-LL | |     let x =  1.7976931348623159e+308_f64; //~ warn: literal out of range for f64\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n+warning: this expression will panic at runtime\n+  --> $DIR/lint-type-overflow2.rs:19:18\n+   |\n+LL |     let x2: i8 = --128; //~ warn: literal out of range for i8\n+   |                  ^^^^^ attempt to negate with overflow\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-type-overflow2.rs:13:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n "}, {"sha": "cfab640ad4e899dbf83dbea3b15a6e88949ec223", "filename": "src/test/ui/lint/lint-unknown-feature-default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature-default.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -14,7 +14,7 @@\n // FIXME(#44232) we should warn that this isn't used.\n #![feature(rust1)]\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n-#[rustc_error]\n-fn main() { } //~ ERROR: compilation successful\n+\n+fn main() { }"}, {"sha": "bd4079ffd2e099d3f76253a9687b5c95801b3306", "filename": "src/test/ui/lint/lint-unknown-feature-default.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature-default.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/lint-unknown-feature-default.rs:20:1\n-   |\n-LL | fn main() { } //~ ERROR: compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7c5878e1729b958a9b928ebee64f0ddedb30b3bd", "filename": "src/test/ui/lint/lint-unknown-feature.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -14,7 +14,7 @@\n // FIXME(#44232) we should warn that this isn't used.\n #![feature(rust1)]\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n-#[rustc_error]\n-fn main() {} //~ ERROR: compilation successful\n+\n+fn main() {}"}, {"sha": "e2744c03872a47adc28f1ef7ceed3947422a7140", "filename": "src/test/ui/lint/lint-unknown-feature.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-feature.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/lint-unknown-feature.rs:20:1\n-   |\n-LL | fn main() {} //~ ERROR: compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "42b4a72a46c1133f775171c5057430097270df2e", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n // ignore-tidy-linelength\n \n@@ -39,7 +39,7 @@ pub fn foo() {\n                                          //~^ WARN label name `'lt` shadows a label name that is already in scope\n }\n \n-#[rustc_error]\n-pub fn main() { //~ ERROR compilation successful\n+\n+pub fn main() {\n     foo();\n }"}, {"sha": "442f1918bd15430a446021e1823711dcdbdbdf57", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -62,13 +62,3 @@ LL |     { 'lt: loop { break; } }\n LL |     { 'lt: while let Some(_) = None::<i32> { break; } }\n    |       ^^^ lifetime 'lt already in scope\n \n-error: compilation successful\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:43:1\n-   |\n-LL | / pub fn main() { //~ ERROR compilation successful\n-LL | |     foo();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "63cb947b49b522672d25bc2dba8dcc56df7ec656", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n // ignore-tidy-linelength\n \n@@ -46,8 +46,8 @@ impl S {\n     fn m2(&self) { 'okay: loop { break 'okay; } }\n }\n \n-#[rustc_error]\n-pub fn main() { //~ ERROR compilation successful\n+\n+pub fn main() {\n     let s = S;\n     s.m1();\n     s.m2();"}, {"sha": "7d556f4f227d44597ae1a098a3df120f25186051", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.stderr", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -62,16 +62,3 @@ LL |     'lt: loop { break; }\n LL |     'lt: while let Some(_) = None::<i32> { break; }\n    |     ^^^ lifetime 'lt already in scope\n \n-error: compilation successful\n-  --> $DIR/loops-reject-duplicate-labels.rs:50:1\n-   |\n-LL | / pub fn main() { //~ ERROR compilation successful\n-LL | |     let s = S;\n-LL | |     s.m1();\n-LL | |     s.m2();\n-LL | |     foo();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "56f8288fa2f2d0574eb5666550373017a6b8dbaa", "filename": "src/test/ui/loops/loops-reject-labels-shadowing-lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Issue #21633: reject duplicate loop labels in function bodies.\n // This is testing interaction between lifetime-params and labels.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n #![allow(dead_code, unused_variables)]\n \n@@ -113,7 +113,7 @@ fn foo() {\n     }\n }\n \n-#[rustc_error]\n-pub fn main() { //~ ERROR compilation successful\n+\n+pub fn main() {\n     foo();\n }"}, {"sha": "d7d3cdb78e14abbab2f1c71907e67ed8fdd48435", "filename": "src/test/ui/loops/loops-reject-labels-shadowing-lifetimes.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -100,13 +100,3 @@ LL |         fn meth_bad<'bad>(&self) {\n LL |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n-error: compilation successful\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:117:1\n-   |\n-LL | / pub fn main() { //~ ERROR compilation successful\n-LL | |     foo();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "09b2c24e2a6a3e98324a789e00f4450be6bfdd48", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n #![allow(dead_code, unused_variables)]\n \n@@ -35,7 +35,7 @@ fn foo() {\n     }\n }\n \n-#[rustc_error]\n-pub fn main() { //~ ERROR compilation successful\n+\n+pub fn main() {\n     foo();\n }"}, {"sha": "ac5c59c044aae09bac150af4be13bc5e827f6c37", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -6,13 +6,3 @@ LL |     'a: loop {\n LL |         let b = Box::new(|x: &i8| *x) as Box<for <'a> Fn(&'a i8) -> i8>;\n    |                                                   ^^ lifetime 'a already in scope\n \n-error: compilation successful\n-  --> $DIR/loops-reject-lifetime-shadowing-label.rs:39:1\n-   |\n-LL | / pub fn main() { //~ ERROR compilation successful\n-LL | |     foo();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "fa3737d6911ab5ea5d050eb96ade0c082ca0fde2", "filename": "src/test/ui/macros/macro-expanded-include/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // ignore-emscripten no asm! support\n-\n-#![feature(asm, rustc_attrs)]\n+// compile-pass\n+#![feature(asm)]\n #![allow(unused)]\n \n #[macro_use]\n@@ -19,5 +19,5 @@ mod foo;\n m!();\n fn f() { n!(); }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "3ef0275cfbeecd8b318512f63d0ab40b2a896846", "filename": "src/test/ui/macros/macro-expanded-include/test.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/test.rs:23:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a1d77515f29d8b78b7e152ba9a05f8f2b092ed75", "filename": "src/test/ui/macros/macro-stmt-matchers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-stmt-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-stmt-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stmt-matchers.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     macro_rules! m { ($s:stmt;) => { $s } }\n     m!(vec![].push(0););\n }"}, {"sha": "ef6210bb6f7e84535d5ed4a74ebc4530c4d47230", "filename": "src/test/ui/macros/macro-stmt-matchers.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-stmt-matchers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-stmt-matchers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stmt-matchers.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/macro-stmt-matchers.rs:14:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     macro_rules! m { ($s:stmt;) => { $s } }\n-LL | |     m!(vec![].push(0););\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "90ac95d54d7d58e0fd9ecd3d208bd8a7e2312c02", "filename": "src/test/ui/macros/macro-tt-matchers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-matchers.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n macro_rules! foo {\n@@ -17,5 +17,5 @@ macro_rules! foo {\n \n foo!(Box);\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "b7551c1bd93b13de0fe86a8e888d3890e10b2a1d", "filename": "src/test/ui/macros/macro-tt-matchers.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-matchers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-matchers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-tt-matchers.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/macro-tt-matchers.rs:21:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b594085333beacbbf4fe0d39f23ef58a5a176c57", "filename": "src/test/ui/macros/macro-use-scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-scope.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n fn f() {\n@@ -28,5 +28,5 @@ macro_rules! m { () => {\n } }\n m!();\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "2e81750d43bbcb6ff9e03ff0d13aafdba4f65ffe", "filename": "src/test/ui/macros/macro-use-scope.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-scope.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/macro-use-scope.rs:32:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "8ba6863167b87230328fbf472f14ea436391093d", "filename": "src/test/ui/maybe-bounds-where-cpass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmaybe-bounds-where-cpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmaybe-bounds-where-cpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where-cpass.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n struct S<T>(*const T) where T: ?Sized;\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let u = vec![1, 2, 3];\n     let _s: S<[u8]> = S(&u[..]);\n }"}, {"sha": "d60e4cdffb4f509e271cdfb372533cbbb4877e4d", "filename": "src/test/ui/maybe-bounds-where-cpass.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmaybe-bounds-where-cpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmaybe-bounds-where-cpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where-cpass.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/maybe-bounds-where-cpass.rs:16:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let u = vec![1, 2, 3];\n-LL | |     let _s: S<[u8]> = S(&u[..]);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "43a18fba9b89faa72582f9bfd167b6f0be1b143d", "filename": "src/test/ui/methods/method-call-lifetime-args-subst-index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-subst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-subst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-subst-index.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n struct S;\n@@ -21,5 +21,5 @@ fn test() {\n     S.early_and_type::<u16>();\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "2848ff88c174c33c8fefe6386a0ce4f52ac09ea8", "filename": "src/test/ui/methods/method-call-lifetime-args-subst-index.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-subst-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-subst-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-subst-index.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/method-call-lifetime-args-subst-index.rs:25:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "219f68877be52b68a65885f5449b413aa519198e", "filename": "src/test/ui/missing/missing-semicolon-warning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(unused)]\n \n macro_rules! m {\n@@ -18,5 +18,5 @@ macro_rules! m {\n     }\n }\n \n-#[rustc_error]\n-fn main() { m!(0, 0; 0, 0); } //~ ERROR compilation successful\n+\n+fn main() { m!(0, 0; 0, 0); }"}, {"sha": "c294e3eaf9c832f72f794a6bf434335e2bcd4244", "filename": "src/test/ui/missing/missing-semicolon-warning.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -4,7 +4,7 @@ warning: expected `;`, found keyword `let`\n LL |         $( let x = $e1 )*; //~ WARN expected `;`\n    |            ^^^\n ...\n-LL | fn main() { m!(0, 0; 0, 0); } //~ ERROR compilation successful\n+LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n    = note: This was erroneously allowed and will become a hard error in a future release\n@@ -15,16 +15,8 @@ warning: expected `;`, found `println`\n LL |         $( println!(\"{}\", $e2) )*; //~ WARN expected `;`\n    |            ^^^^^^^\n ...\n-LL | fn main() { m!(0, 0; 0, 0); } //~ ERROR compilation successful\n+LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n    = note: This was erroneously allowed and will become a hard error in a future release\n \n-error: compilation successful\n-  --> $DIR/missing-semicolon-warning.rs:22:1\n-   |\n-LL | fn main() { m!(0, 0; 0, 0); } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0762e872072277966647104f1483f9f78cd93462", "filename": "src/test/ui/never-assign-dead-code.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,11 +11,11 @@\n // Test that an assignment of type ! makes the rest of the block dead code.\n \n #![feature(never_type)]\n-#![feature(rustc_attrs)]\n+// compile-pass\n #![warn(unused)]\n \n-#[rustc_error]\n-fn main() { //~ ERROR: compilation successful\n+\n+fn main() {\n     let x: ! = panic!(\"aah\"); //~ WARN unused\n     drop(x); //~ WARN unreachable\n     //~^ WARN unreachable"}, {"sha": "a4fd7b1b29681921eeea6f270e76bf89f5aafdf1", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -30,15 +30,3 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n-error: compilation successful\n-  --> $DIR/never-assign-dead-code.rs:18:1\n-   |\n-LL | / fn main() { //~ ERROR: compilation successful\n-LL | |     let x: ! = panic!(\"aah\"); //~ WARN unused\n-LL | |     drop(x); //~ WARN unreachable\n-LL | |     //~^ WARN unreachable\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "891512c9653be861b8f2bb3facf8857429a1e9b7", "filename": "src/test/ui/no-warn-on-field-replace-issue-34101.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fno-warn-on-field-replace-issue-34101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fno-warn-on-field-replace-issue-34101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-warn-on-field-replace-issue-34101.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -20,15 +20,15 @@\n // even though the compiler should enforce an invariant that any drop\n // flag for such subcontent of `Foo` will always have the same value\n // as the drop flag for `Foo` itself.\n-//\n-// This test is structured in a funny way; we cannot test for emission\n-// of the warning in question via the lint system, and therefore\n-// `#![deny(warnings)]` does nothing to detect it.\n-//\n-// So instead we use `#[rustc_error]` and put the test into\n-// `compile_fail`, where the emitted warning *will* be caught.\n \n-#![feature(rustc_attrs)]\n+\n+\n+\n+\n+\n+\n+\n+// compile-pass\n \n struct Foo(String);\n \n@@ -49,8 +49,8 @@ fn outline() {\n     f.0 = String::from(\"bar\");\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     inline();\n     outline();\n }"}, {"sha": "91a90266e5e966927b0e351f1e4baa6506f38e5e", "filename": "src/test/ui/no-warn-on-field-replace-issue-34101.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fno-warn-on-field-replace-issue-34101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fno-warn-on-field-replace-issue-34101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-warn-on-field-replace-issue-34101.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,11 +0,0 @@\n-error: compilation successful\n-  --> $DIR/no-warn-on-field-replace-issue-34101.rs:53:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     inline();\n-LL | |     outline();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "6ec2ecba8cf32ba4e0a211aee4499ea8deaae3c5", "filename": "src/test/ui/object-safety/object-safety-by-value-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that a trait with by-value self is considered object-safe.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n #![allow(trivial_casts)]\n \n@@ -51,6 +51,6 @@ fn make_quux_explicit<T:Quux>(t: &T) -> &Quux {\n     t as &Quux\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n }"}, {"sha": "61259641c0e8412b268cb5537c3fb3c1794392d5", "filename": "src/test/ui/object-safety/object-safety-by-value-self.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,9 +0,0 @@\n-error: compilation successful\n-  --> $DIR/object-safety-by-value-self.rs:55:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "34b66b15e572b2789c4e8bfab2858753bea43969", "filename": "src/test/ui/object-safety/object-safety-phantom-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-phantom-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-phantom-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-phantom-fn.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that `Self` appearing in a phantom fn does not make a trait not object safe.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n trait Baz {\n@@ -27,6 +27,6 @@ fn make_baz<T:Baz>(t: &T) -> &Baz {\n     t\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n }"}, {"sha": "645867f460638b4d16440be803790e1428d924c3", "filename": "src/test/ui/object-safety/object-safety-phantom-fn.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-phantom-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-phantom-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-phantom-fn.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,9 +0,0 @@\n-error: compilation successful\n-  --> $DIR/object-safety-phantom-fn.rs:31:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4467ac4356b6eb5fe77c11d464a8649e171e4df0", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test if the on_unimplemented message override works\n \n #![feature(on_unimplemented)]\n-#![feature(rustc_attrs)]\n+\n \n struct Foo<T>(T);\n struct Bar<T>(T);\n@@ -38,7 +38,7 @@ impl Index<Bar<usize>> for [i32] {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277"}, {"sha": "d104d1ed033eaa1b05c74a9cb55b3be89c7cff72", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test if the on_unimplemented message override works\n \n #![feature(on_unimplemented)]\n-#![feature(rustc_attrs)]\n+\n \n #[rustc_on_unimplemented = \"invalid\"]\n trait Index<Idx: ?Sized> {\n@@ -27,7 +27,7 @@ impl Index<usize> for [i32] {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n     //~^ ERROR E0277"}, {"sha": "79bb277d2c1e6fbbfcd67d74d5e298f1cea946c3", "filename": "src/test/ui/on-unimplemented/slice-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,11 +11,11 @@\n // Test new Index error message for slices\n // ignore-tidy-linelength\n \n-#![feature(rustc_attrs)]\n+\n \n use std::ops::Index;\n \n-#[rustc_error]\n+\n fn main() {\n     let x = &[1, 2, 3] as &[i32];\n     x[1i32]; //~ ERROR E0277"}, {"sha": "1eda959e3f634104433c11def48aa1fac6fd6a7d", "filename": "src/test/ui/privacy/restricted/lookup-ignores-private.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Flookup-ignores-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Flookup-ignores-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Flookup-ignores-private.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(warnings)]\n \n mod foo {\n@@ -36,8 +36,8 @@ mod foo {\n     }\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let s = foo::S::default();\n     let _: bool = s.x;\n     let _: bool = s.f();"}, {"sha": "7fc53e8c324a03dc3a1ca2c7ba283fda6e813b52", "filename": "src/test/ui/privacy/restricted/lookup-ignores-private.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Flookup-ignores-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Flookup-ignores-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Flookup-ignores-private.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,12 +0,0 @@\n-error: compilation successful\n-  --> $DIR/lookup-ignores-private.rs:40:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let s = foo::S::default();\n-LL | |     let _: bool = s.x;\n-LL | |     let _: bool = s.f();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "24a1bcb37cf06208c2e08352f83173aacb93e432", "filename": "src/test/ui/range/range_traits-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frange%2Frange_traits-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frange%2Frange_traits-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-4.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n use std::ops::*;\n \n #[derive(Copy, Clone)]\n struct R(RangeTo<usize>);\n \n-#[rustc_error]\n-fn main() {} //~ ERROR success\n+\n+fn main() {}\n "}, {"sha": "cf8ae671ffc7469e4319d6d7dede48348e3a07c1", "filename": "src/test/ui/range/range_traits-4.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Frange%2Frange_traits-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Frange%2Frange_traits-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-4.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/range_traits-4.rs:19:1\n-   |\n-LL | fn main() {} //~ ERROR success\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "033f06f9cd16ae343dd190540465a142a7b52a17", "filename": "src/test/ui/range/range_traits-5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frange%2Frange_traits-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frange%2Frange_traits-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-5.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n use std::ops::*;\n \n #[derive(Copy, Clone)]\n struct R(RangeFull);\n \n-#[rustc_error]\n-fn main() {} //~ ERROR success\n+\n+fn main() {}\n "}, {"sha": "eadb3a08ba02a2b53530b1d58d30067033f21952", "filename": "src/test/ui/range/range_traits-5.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Frange%2Frange_traits-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Frange%2Frange_traits-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-5.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/range_traits-5.rs:19:1\n-   |\n-LL | fn main() {} //~ ERROR success\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "23fb0a1fc5e1b43ad83bf1a12130d413c7899972", "filename": "src/test/ui/range/range_traits-7.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frange%2Frange_traits-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frange%2Frange_traits-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-7.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n use std::ops::*;\n \n #[derive(Copy, Clone)]\n struct R(RangeToInclusive<usize>);\n \n-#[rustc_error]\n-fn main() {} //~ ERROR success\n+\n+fn main() {}\n "}, {"sha": "516667a11cd34151ca287695894af20df09ed995", "filename": "src/test/ui/range/range_traits-7.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Frange%2Frange_traits-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Frange%2Frange_traits-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-7.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/range_traits-7.rs:19:1\n-   |\n-LL | fn main() {} //~ ERROR success\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "00ca2c7da67191900b3b2192aa9d982f4455ea74", "filename": "src/test/ui/regions/region-bound-extra-bound-in-inherent-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test related to #22779. In this case, the impl is an inherent impl,\n // so it doesn't have to match any trait, so no error results.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n struct MySlice<'a, T:'a>(&'a mut [T]);\n@@ -22,5 +22,5 @@ impl<'a, T> MySlice<'a, T> {\n     }\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "585ccf465d8f4b267060f6f01f73cb660b886172", "filename": "src/test/ui/regions/region-bound-extra-bound-in-inherent-impl.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/region-bound-extra-bound-in-inherent-impl.rs:26:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ff1b74fa020c74fa34de01214fff763d27a57753", "filename": "src/test/ui/regions/region-bound-same-bounds-in-trait-and-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test related to #22779, but where the `'a:'b` relation\n // appears in the trait too. No error here.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n trait Tr<'a, T> {\n     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b;\n@@ -23,5 +23,5 @@ impl<'a, T> Tr<'a, T> for &'a mut [T] {\n     }\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "ce9dd59bbf52538117bf15a15d50fdd68a89683a", "filename": "src/test/ui/regions/region-bound-same-bounds-in-trait-and-impl.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/region-bound-same-bounds-in-trait-and-impl.rs:27:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "36c87b729d8424f3d06bd986a78a5a6f05e03c8c", "filename": "src/test/ui/regions/region-object-lifetime-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(warnings)]\n \n trait Foo {\n@@ -24,5 +24,5 @@ fn borrowed_receiver_same_lifetime<'a>(x: &'a Foo) -> &'a () {\n     x.borrowed()\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "39deed32c7659387e1f98e034a424fed0c12e1c8", "filename": "src/test/ui/regions/region-object-lifetime-1.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/region-object-lifetime-1.rs:28:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d7bfb735e00fd0cf393ce5ac0b2321db5033d802", "filename": "src/test/ui/regions/region-object-lifetime-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(warnings)]\n \n trait Foo {\n@@ -24,5 +24,5 @@ fn borrowed_receiver_related_lifetimes<'a,'b>(x: &'a (Foo+'b)) -> &'a () {\n     x.borrowed()\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "9431e8f52913952f6edd3dec07f431e4ceaab4e0", "filename": "src/test/ui/regions/region-object-lifetime-3.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/region-object-lifetime-3.rs:28:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "09e1634381fed18e4a5d6725e73784c8da879650", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // \"projection gap\": in this test, we know that `T: 'x`, and that is\n // enough to conclude that `T::Foo: 'x`.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -29,5 +29,5 @@ fn func<'x, T:Trait1<'x>>(t: &'x T)\n     wf::<&'x T::Foo>();\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "7a38797e469bc584a34ad9316bfc03b90ebc4f6b", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-implied-bounds-projection-gap-2.rs:33:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "be1987fe87c2d9fd77b63432d7a2db9e4c3b0081", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // \"projection gap\": in this test, we know that `T::Foo: 'x`, and that\n // is (naturally) enough to conclude that `T::Foo: 'x`.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -29,5 +29,5 @@ fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n     wf::<&'x T::Foo>();\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "1a12697a474ae3ee5dd8c4dbb816cd683c431916", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-3.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-implied-bounds-projection-gap-3.rs:33:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d0560d4cd90846765354955de75149c4d7f22c2c", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // \"projection gap\": in this test, we know that `T: 'x`, and that\n // is (naturally) enough to conclude that `T: 'x`.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -29,5 +29,5 @@ fn func<'x, T:Trait1<'x>>(t: &'x T)\n     wf::<&'x T>();\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "85b1702e2a09643519f2b506b146decc7afe9cc8", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-4.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-implied-bounds-projection-gap-4.rs:33:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "270e20f2e6dce4954bba4fc77bb283e9e512e8f6", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // \"outlives\" requirements. Issue #22246.\n \n #![allow(dead_code)]\n-#![feature(rustc_attrs)]\n+\n \n ///////////////////////////////////////////////////////////////////////////\n \n@@ -64,6 +64,6 @@ fn with_assoc_sub<'a,'b>() {\n     //~^ ERROR reference has a longer lifetime\n }\n \n-#[rustc_error]\n+\n fn main() {\n }"}, {"sha": "d6d4e2b0529067f21b46660af8682bc37c375aa0", "filename": "src/test/ui/regions/regions-outlives-projection-hrtype.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -15,7 +15,7 @@\n // `'r` is bound, that leads to badness. This test checks that\n // everything works.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n trait TheTrait {\n@@ -32,5 +32,5 @@ fn foo<'a,'b,T>()\n     wf::< <FnType<T> as TheTrait>::TheType >();\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "ba4e318957e60a411b06c1bb194a480c542ac355", "filename": "src/test/ui/regions/regions-outlives-projection-hrtype.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-outlives-projection-hrtype.rs:36:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b05788dc4136bcf9f70a5fbf29dc73e37aa2aadb", "filename": "src/test/ui/regions/regions-outlives-projection-trait-def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that `<F as Foo<'a>>::Type: 'b`, where `trait Foo<'a> { Type:\n // 'a; }`, does not require that `F: 'b`.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n trait SomeTrait<'a> {\n@@ -27,5 +27,5 @@ impl<'a: 'c, 'c, T> SomeTrait<'a> for &'c T where T: SomeTrait<'a> {\n     // here, then we would require that `T:'a`, which is too strong.\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "0a4cbe64d4638bacf9f1f87c682a69acda5a7b93", "filename": "src/test/ui/regions/regions-outlives-projection-trait-def.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-outlives-projection-trait-def.rs:31:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a203ebd919d7df84fb36d6c7cc5fd80eb8567119", "filename": "src/test/ui/regions/regions-outlives-scalar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,13 +11,13 @@\n // Test that scalar values outlive all regions.\n // Rule OutlivesScalar from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n struct Foo<'a> {\n     x: &'a i32,\n     y: &'static i32\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "d754bdd60320edeefbc74fcda57dc3ccbb3097c4", "filename": "src/test/ui/regions/regions-outlives-scalar.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-outlives-scalar.rs:23:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a4681633326472a2527a8a1ff0d294148e4d27f1", "filename": "src/test/ui/retslot-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fretslot-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fretslot-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fretslot-cast.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(warnings)]\n \n pub fn fail(x: Option<&(Iterator<Item=()>+Send)>)\n@@ -29,5 +29,5 @@ pub fn inner(x: Option<&(Iterator<Item=()>+Send)>)\n     x\n }\n \n-#[rustc_error]\n+\n fn main() {}"}, {"sha": "77b5b401c42f15afe9363f8c105d18ed8f14a7ad", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod rev_variant_struct_region {\n@@ -28,5 +28,5 @@ mod rev_variant_struct_region {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "b6ac7aa3a9cd2ac46ab677592ee6f587f58d9856", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod variant_struct_region {\n@@ -28,5 +28,5 @@ mod variant_struct_region {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "3f7d086a6ae19c4347ceab84de8fa4d6e17b2487", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod variant_struct_type {\n@@ -28,5 +28,5 @@ mod variant_struct_type {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "dff9b8a862f6c74ab8270eb0aee090bbb60de799", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -13,7 +13,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n mod variant_struct_type {\n@@ -28,5 +28,5 @@ mod variant_struct_type {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "b19461b03a0d59c05a1cd761cad83f44f24b8541", "filename": "src/test/ui/span/issue-24690.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,14 +11,14 @@\n //! A test to ensure that helpful `note` messages aren't emitted more often\n //! than necessary.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n \n // Although there are three warnings, we should only get two \"lint level defined\n // here\" notes pointing at the `warnings` span, one for each error type.\n #![warn(unused)]\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+\n+fn main() {\n     let theTwo = 2; //~ WARN should have a snake case name\n     let theOtherTwo = 2; //~ WARN should have a snake case name\n     //~^ WARN unused variable"}, {"sha": "723b7e2c0aaf51515ca73a7daa872ef898101b1a", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -25,16 +25,3 @@ warning: variable `theOtherTwo` should have a snake case name such as `the_other\n LL |     let theOtherTwo = 2; //~ WARN should have a snake case name\n    |         ^^^^^^^^^^^\n \n-error: compilation successful\n-  --> $DIR/issue-24690.rs:21:1\n-   |\n-LL | / fn main() { //~ ERROR compilation successful\n-LL | |     let theTwo = 2; //~ WARN should have a snake case name\n-LL | |     let theOtherTwo = 2; //~ WARN should have a snake case name\n-LL | |     //~^ WARN unused variable\n-LL | |     println!(\"{}\", theTwo);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "85001fc0ff6e9257417d774192c5ef3e9abcc818", "filename": "src/test/ui/traits/trait-privacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ftraits%2Ftrait-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ftraits%2Ftrait-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-privacy.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, get_type_id)]\n+// compile-pass\n+#![feature(get_type_id)]\n #![allow(dead_code)]\n-\n mod foo {\n     pub use self::bar::T;\n     mod bar {\n@@ -31,5 +31,5 @@ fn f() {\n     error.get_type_id(); // Regression test for #21670\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+\n+fn main() {}"}, {"sha": "d38e869df8f517282a4c3e6a9f34c6617228c6ce", "filename": "src/test/ui/traits/trait-privacy.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Ftraits%2Ftrait-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Ftraits%2Ftrait-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-privacy.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/trait-privacy.rs:35:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2f694e3ca7c5ec962e27cb69386cf6615d511712", "filename": "src/test/ui/traits/traits-issue-23003-overflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-23003-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-23003-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-23003-overflow.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // types are required. This test now just compiles fine, since the\n // relevant rules that triggered the overflow were removed.\n \n-#![feature(rustc_attrs)]\n+// compile-pass\n #![allow(dead_code)]\n \n use std::marker::PhantomData;\n@@ -35,5 +35,5 @@ impl<B> Async for Complete<B> {\n \n fn foo(_: Receipt<Complete<()>>) { }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "3c26e426a4e52073184a38dea7676df39103704e", "filename": "src/test/ui/traits/traits-issue-23003-overflow.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-23003-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-23003-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-23003-overflow.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/traits-issue-23003-overflow.rs:39:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2c0690881a1cd4853bbfa5034cb1fdcaad90389a", "filename": "src/test/ui/unreachable/unreachable-try-pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-#![feature(exhaustive_patterns, rustc_attrs)]\n+// compile-pass\n+#![feature(never_type, exhaustive_patterns)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]\n \n@@ -42,8 +42,8 @@ fn vom(x: Result<u32, Void>) -> Result<u32, i32> {\n     Ok(y)\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR: compilation successful\n+\n+fn main() {\n     let _ = bar(Err(123));\n     let _ = foo(Err(123));\n     let _ = qux(Ok(123));"}, {"sha": "1916174142fde50ccad6f1fc3007b7a46c4bacd1", "filename": "src/test/ui/unreachable/unreachable-try-pattern.stderr", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-try-pattern.stderr?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -28,16 +28,3 @@ warning: unreachable pattern\n LL |     let y = (match x { Ok(n) => Ok(n), Err(e) => Err(e) })?;\n    |                                        ^^^^^^\n \n-error: compilation successful\n-  --> $DIR/unreachable-try-pattern.rs:46:1\n-   |\n-LL | / fn main() { //~ ERROR: compilation successful\n-LL | |     let _ = bar(Err(123));\n-LL | |     let _ = foo(Err(123));\n-LL | |     let _ = qux(Ok(123));\n-LL | |     let _ = vom(Ok(123));\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "59fc0136612dd9d5c0c79740b68a128ab73963d1", "filename": "src/test/ui/variance/variance-btree-invariant-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+\n \n use std::collections::btree_map::{IterMut, OccupiedEntry, VacantEntry};\n \n@@ -59,5 +59,5 @@ fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n     v //~ ERROR mismatched types\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "47ecec5a1124e00496c7bd1c65a656ce17326e46", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-#![feature(rustc_attrs)]\n+\n \n struct SomeStruct<T>(fn(T));\n \n@@ -22,5 +22,5 @@ fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n     v //~ ERROR mismatched types\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "88585373847ddbf52f1275b9ba8ca85d834cc3d8", "filename": "src/test/ui/variance/variance-use-contravariant-struct-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // they permit lifetimes to be approximated as expected.\n \n #![allow(dead_code)]\n-#![feature(rustc_attrs)]\n+// compile-pass\n \n struct SomeStruct<T>(fn(T));\n \n@@ -23,5 +23,5 @@ fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n     v\n }\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+\n+fn main() { }"}, {"sha": "e3663eb03450d1fe90378d02cfbf637259df75d1", "filename": "src/test/ui/variance/variance-use-contravariant-struct-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/variance-use-contravariant-struct-2.rs:27:1\n-   |\n-LL | fn main() { } //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "245e21511a6f898d6cb7b922026b21de7028714c", "filename": "src/test/ui/variance/variance-use-covariant-struct-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-2.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // be shortened.\n \n #![allow(dead_code)]\n-#![feature(rustc_attrs)]\n+// compile-pass\n \n struct SomeStruct<T>(T);\n \n@@ -23,4 +23,4 @@ fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n     v\n }\n \n-#[rustc_error] fn main() { } //~ ERROR compilation successful\n+fn main() { }"}, {"sha": "9c3a1cf1cc2c259104b70c2a52ebcf8012aaa854", "filename": "src/test/ui/variance/variance-use-covariant-struct-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d834550d54e4c5211f03f877c1756425f24be98/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-2.stderr?ref=1d834550d54e4c5211f03f877c1756425f24be98", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/variance-use-covariant-struct-2.rs:26:16\n-   |\n-LL | #[rustc_error] fn main() { } //~ ERROR compilation successful\n-   |                ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2e6c0c16dcd0d04a50a5ba58d9f0f2aa5c8b2d1b", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-#![feature(rustc_attrs)]\n+\n \n struct SomeStruct<T>(*mut T);\n \n@@ -29,5 +29,5 @@ fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n     v //~ ERROR mismatched types\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "36e9226ae3f8106712aa832989c9b102bfea59a4", "filename": "src/test/ui/wf/wf-array-elem-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,12 +10,12 @@\n \n // Check that array elemen types must be Sized. Issue #25692.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct Foo {\n     foo: [[u8]], //~ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "bc14ce46ff1992e2309a44296807b54c3b8e2a7a", "filename": "src/test/ui/wf/wf-const-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check the types of constants are well-formed.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> { t: T }\n@@ -20,5 +20,5 @@ struct NotCopy;\n const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n //~^ ERROR E0277\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "6c08f5a4a547e1cc15129f652d6cc8a69e265282", "filename": "src/test/ui/wf/wf-enum-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check enum bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -22,5 +22,5 @@ enum SomeEnum<T,U> //~ ERROR E0277\n     SomeVariant(T,U)\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "572b609fe2ef225908f1bc680a1d2b277c12233b", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct fields for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> {\n@@ -24,5 +24,5 @@ enum AnotherEnum<A> {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "32e870e9e1b5b586c4d987ab0c8254cbb249c5f2", "filename": "src/test/ui/wf/wf-enum-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct fields for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> {\n@@ -22,5 +22,5 @@ enum SomeEnum<A> {\n     SomeVariant(IsCopy<A>) //~ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "3d97bdb521fa8c32bab88bb9023bc98907d42152", "filename": "src/test/ui/wf/wf-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we check where-clauses on fn items.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -23,5 +23,5 @@ fn bar() where Vec<dyn Copy>:, {}\n //~^ ERROR E0277\n //~| ERROR E0038\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "aa88b3d7377e0cea80c37cca00eabde7764b3fdb", "filename": "src/test/ui/wf/wf-impl-associated-type-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we require that associated types in an impl are well-formed.\n \n-#![feature(rustc_attrs)]\n+\n \n pub trait Foo<'a> {\n     type Bar;\n@@ -20,5 +20,5 @@ impl<'a, T> Foo<'a> for T {\n     type Bar = &'a T; //~ ERROR E0309\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "0b5a76db262668ee13bd478bb86ddbfe2c2a6833", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we require that associated types in an impl are well-formed.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n pub trait MyHash { }\n@@ -28,5 +28,5 @@ impl<T> Foo for T {\n     //~^ ERROR the trait bound `T: MyHash` is not satisfied\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "dfe6688c0b7f2080142e14f695d4bc177a8001c5", "filename": "src/test/ui/wf/wf-in-fn-type-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -12,7 +12,7 @@\n // types in fns.\n \n #![allow(dead_code)]\n-#![feature(rustc_attrs)]\n+\n \n struct MustBeCopy<T:Copy> {\n     t: T\n@@ -28,5 +28,5 @@ struct Bar<T> {\n     x: fn(&'static T) //~ ERROR E0310\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "f6f14099e738ea8078beb211ffd51b0efb169667", "filename": "src/test/ui/wf/wf-in-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we enforce WF conditions also for where clauses in fn items.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait MustBeCopy<T:Copy> {\n@@ -21,5 +21,5 @@ fn bar<T,U>() //~ ERROR E0277\n {\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "7cbcf99af3c680ff37c6ba208105b4f70780ff70", "filename": "src/test/ui/wf/wf-in-obj-type-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we enforce WF conditions also for types in fns.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait Object<T> { }\n@@ -24,5 +24,5 @@ struct Foo<T> {\n     x: Object<&'static T> //~ ERROR E0310\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "8b65b2e1626679c62e59ad9a8b0524122291a2ea", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check where-clauses on inherent impl methods.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -23,5 +23,5 @@ impl<T,U> Foo<T,U> {\n     {}\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "ee929282849026103ca3b336c20897316e92091d", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check where-clauses on inherent impls.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -22,5 +22,5 @@ impl<T,U> Foo<T,U> where T: ExtraCopy<U> //~ ERROR E0277\n {\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "91943b44d97adc8f99618d81f7bb35226bf278a0", "filename": "src/test/ui/wf/wf-static-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check the types of statics are well-formed.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> { t: T }\n@@ -20,5 +20,5 @@ struct NotCopy;\n static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n //~^ ERROR E0277\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "c4a15bbe5407c589c4672c94dd272d26ad5772c8", "filename": "src/test/ui/wf/wf-struct-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -22,5 +22,5 @@ struct SomeStruct<T,U> //~ ERROR E0277\n     data: (T,U)\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "4d1e42829d88bfd31b5bead839472ba040aa91a8", "filename": "src/test/ui/wf/wf-struct-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check struct fields for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> {\n@@ -22,5 +22,5 @@ struct SomeStruct<A> {\n     data: IsCopy<A> //~ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "eaeffa017400e75a8975514a777b2bfdc7805f8d", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check associated type bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -20,5 +20,5 @@ trait SomeTrait<T> { //~ ERROR E0277\n     type Type1: ExtraCopy<T>;\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "61cdbe5e49128d2afb0004a4e14a1d3d448fd21e", "filename": "src/test/ui/wf/wf-trait-associated-type-region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check associated type default values for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait SomeTrait<'a> {\n@@ -20,5 +20,5 @@ trait SomeTrait<'a> {\n     //~^ ERROR E0309\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "e752c0a9077ce1c1672a94fa1eed8f510433f5c5", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check associated type default values for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n struct IsCopy<T:Copy> { x: T }\n@@ -22,5 +22,5 @@ trait SomeTrait {\n     //~^ ERROR E0277\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "c02281ab4f9502215c3bf4b0b71050155f4765ef", "filename": "src/test/ui/wf/wf-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Test that we check supertrait bounds for WFedness.\n \n #![feature(associated_type_defaults)]\n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n \n trait ExtraCopy<T:Copy> { }\n@@ -21,5 +21,5 @@ trait SomeTrait<T,U> //~ ERROR E0277\n {\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "8577bc8963826b6c595f862f138323541a5e803f", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Check that we test WF conditions for fn arguments. Because the\n // current code is so goofy, this is only a warning for now.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -25,5 +25,5 @@ trait Foo {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "b15767198704182fe2959d2c3264156358d53f87", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -11,7 +11,7 @@\n // Check that we test WF conditions for fn arguments. Because the\n // current code is so goofy, this is only a warning for now.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -25,5 +25,5 @@ trait Foo {\n     }\n }\n \n-#[rustc_error]\n+\n fn main() { }"}, {"sha": "44e3d6bda5cd8b782ecd36199aea119714d70ae9", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653da4fd006c97625247acd7e076d0782cdc149b/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.rs?ref=653da4fd006c97625247acd7e076d0782cdc149b", "patch": "@@ -10,7 +10,7 @@\n \n // Check that we test WF conditions for fn where clauses in a trait definition.\n \n-#![feature(rustc_attrs)]\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n@@ -23,5 +23,5 @@ trait Foo {\n         // Here, Eq ought to be implemented.\n }\n \n-#[rustc_error]\n+\n fn main() { }"}]}