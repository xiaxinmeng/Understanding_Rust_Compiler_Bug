{"sha": "33806d2599017a3534bcd23d4ae91d7b060b18d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODA2ZDI1OTkwMTdhMzUzNGJjZDIzZDRhZTkxZDdiMDYwYjE4ZDc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-31T21:20:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-31T21:20:59Z"}, "message": "Rollup merge of #80548 - JohnTitor:wfcheck-foreign-fn-ice, r=davidtwco\n\nFIx ICE on wf check for foreign fns\n\nFixes #80468\n\nr? `@davidtwco` `@lcnr`", "tree": {"sha": "b08aebec32a8dea10f033b8d4c44eff82b87f9d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08aebec32a8dea10f033b8d4c44eff82b87f9d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33806d2599017a3534bcd23d4ae91d7b060b18d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7kC7CRBK7hj4Ov3rIwAAdHIIAEJglPxdMZttlpHKmBkU6pQG\nNrzcCNA1YQXTfLM3F/Ox+/rTnvoqOg6CdXf4B9JNxCldgzZLhryzaXHKIvjRXGwT\na4hrQ1phOf4llPXnvaI+Bgo1+LgLV5ZHIPf1YBZvoD+6b29PMN3RxoLoPc0pF5+Y\neeJQnCs8UvzFs4JbOYff/FG/aqIiOm1KCL9Gq2De/mz6v17mcXnFGzltv8ap0cNC\nCrkRmHI5u0WYtYJN3GKs0n7IvED9CGi8dV0evCpjNFAFkViw8p11i29eK+JSk6pj\nCqJaNAR9qSiCWKj7MiRtKHya782lZXOEmzXF/5NXPNwuPXbGqQo/uX5uB5eeN+o=\n=QVAG\n-----END PGP SIGNATURE-----\n", "payload": "tree b08aebec32a8dea10f033b8d4c44eff82b87f9d7\nparent 30c4e6da857885334f8a9144a9269afea62afced\nparent 70089110803f7548e161503964794667c33547cc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1609449659 +0100\ncommitter GitHub <noreply@github.com> 1609449659 +0100\n\nRollup merge of #80548 - JohnTitor:wfcheck-foreign-fn-ice, r=davidtwco\n\nFIx ICE on wf check for foreign fns\n\nFixes #80468\n\nr? `@davidtwco` `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33806d2599017a3534bcd23d4ae91d7b060b18d7", "html_url": "https://github.com/rust-lang/rust/commit/33806d2599017a3534bcd23d4ae91d7b060b18d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33806d2599017a3534bcd23d4ae91d7b060b18d7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c4e6da857885334f8a9144a9269afea62afced", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c4e6da857885334f8a9144a9269afea62afced", "html_url": "https://github.com/rust-lang/rust/commit/30c4e6da857885334f8a9144a9269afea62afced"}, {"sha": "70089110803f7548e161503964794667c33547cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/70089110803f7548e161503964794667c33547cc", "html_url": "https://github.com/rust-lang/rust/commit/70089110803f7548e161503964794667c33547cc"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "777107ed863109854043de0ba6bd3dcf133b53ad", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33806d2599017a3534bcd23d4ae91d7b060b18d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33806d2599017a3534bcd23d4ae91d7b060b18d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=33806d2599017a3534bcd23d4ae91d7b060b18d7", "patch": "@@ -153,6 +153,7 @@ fn msg_span_from_early_bound_and_free_regions(\n         Some(Node::Item(it)) => item_scope_tag(&it),\n         Some(Node::TraitItem(it)) => trait_item_scope_tag(&it),\n         Some(Node::ImplItem(it)) => impl_item_scope_tag(&it),\n+        Some(Node::ForeignItem(it)) => foreign_item_scope_tag(&it),\n         _ => unreachable!(),\n     };\n     let (prefix, span) = match *region {\n@@ -233,6 +234,13 @@ fn impl_item_scope_tag(item: &hir::ImplItem<'_>) -> &'static str {\n     }\n }\n \n+fn foreign_item_scope_tag(item: &hir::ForeignItem<'_>) -> &'static str {\n+    match item.kind {\n+        hir::ForeignItemKind::Fn(..) => \"method body\",\n+        hir::ForeignItemKind::Static(..) | hir::ForeignItemKind::Type => \"associated item\",\n+    }\n+}\n+\n fn explain_span(tcx: TyCtxt<'tcx>, heading: &str, span: Span) -> (String, Option<Span>) {\n     let lo = tcx.sess.source_map().lookup_char_pos(span.lo());\n     (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1), Some(span))"}, {"sha": "2ae9ded3fa0cf47e9fbec66693f88ab9c157dbc7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33806d2599017a3534bcd23d4ae91d7b060b18d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33806d2599017a3534bcd23d4ae91d7b060b18d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=33806d2599017a3534bcd23d4ae91d7b060b18d7", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n             let fcx = FnCtxt::new(&inh, param_env, id);\n             if !inh.tcx.features().trivial_bounds {\n                 // As predicates are cached rather than obligations, this\n-                // needsto be called first so that they are checked with an\n+                // needs to be called first so that they are checked with an\n                 // empty `param_env`.\n                 check_false_global_bounds(&fcx, span, id);\n             }"}, {"sha": "8386959cfb3a83327850c86e6386ffb8ed97c185", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33806d2599017a3534bcd23d4ae91d7b060b18d7/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33806d2599017a3534bcd23d4ae91d7b060b18d7/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.rs?ref=33806d2599017a3534bcd23d4ae91d7b060b18d7", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for #80468.\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Trait {}\n+\n+#[repr(transparent)]\n+pub struct Wrapper<T: Trait>(T);\n+\n+#[repr(transparent)]\n+pub struct Ref<'a>(&'a u8);\n+\n+impl Trait for Ref {} //~ ERROR:  implicit elided lifetime not allowed here\n+\n+extern \"C\" {\n+    pub fn repro(_: Wrapper<Ref>); //~ ERROR: mismatched types\n+}"}, {"sha": "bb839d0a5eca685438a24a35def594c617ddc182", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33806d2599017a3534bcd23d4ae91d7b060b18d7/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33806d2599017a3534bcd23d4ae91d7b060b18d7/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=33806d2599017a3534bcd23d4ae91d7b060b18d7", "patch": "@@ -0,0 +1,24 @@\n+error[E0726]: implicit elided lifetime not allowed here\n+  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:13:16\n+   |\n+LL | impl Trait for Ref {}\n+   |                ^^^- help: indicate the anonymous lifetime: `<'_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:21\n+   |\n+LL |     pub fn repro(_: Wrapper<Ref>);\n+   |                     ^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Trait`\n+              found trait `Trait`\n+note: the anonymous lifetime #1 defined on the method body at 16:5...\n+  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:5\n+   |\n+LL |     pub fn repro(_: Wrapper<Ref>);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}