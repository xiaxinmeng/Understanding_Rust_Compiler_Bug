{"sha": "648d644c602406eb003dde56e7fd48effce07f15", "node_id": "C_kwDOAAsO6NoAKDY0OGQ2NDRjNjAyNDA2ZWIwMDNkZGU1NmU3ZmQ0OGVmZmNlMDdmMTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-07T09:17:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-07T09:17:13Z"}, "message": "Rollup merge of #95189 - fmease:fix-issue-94340, r=estebank\n\nStop flagging unexpected inner attributes as outer ones in certain diagnostics\n\nFixes #94340.\n\nIn the issue to-be-fixed I write that the general message _an inner attribute is not permitted in this context_ should be more specific noting that the \u201ccontext\u201d is the `include` macro. This, however, cannot be achieved without touching a lot of things and passing a flag to the `parse_expr` and `parse_item` calls in `expand_include`. This seems rather hacky to me. That's why I left it as it. `Span::from_expansion` does not apply either AFAIK.\n\n`@rustbot` label A-diagnostics T-compiler", "tree": {"sha": "069e38c5e03b69164c67e99f9507242375d4a847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/069e38c5e03b69164c67e99f9507242375d4a847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/648d644c602406eb003dde56e7fd48effce07f15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTqwZCRBK7hj4Ov3rIwAAVvEIADGz1gj0+nqXFEqltVJBuHn9\nfMipP+PnVZcoNM38IYu+TSZq0cnZAec4ZVYhf9Q0ra3uN06hT44cdMx59GeWPaze\na2WqDS5Afgq4tTheLNMaankLO5BEtLnPFTc0+p80PJeWW1Vjx5ymdDU/4NkAVPg4\ntcUniiYcWpi5JN4UMb3T2EmkTg8fnwHRbXyxwB4GrZwtNd4zOBQ2v/n0xcvcFiDO\nY2Njfj1v2en13HV6xW/vMx0h8bCTYZD9jMaVQNGsTVBeY48MqLJMKZQV+FnJZkHB\n/ZQci4V3sSuw0bvjowS7DVWCEaNEMfaL8rgbwy4pQg+SHBs9lmjAnEbJUZz3JcE=\n=iRu3\n-----END PGP SIGNATURE-----\n", "payload": "tree 069e38c5e03b69164c67e99f9507242375d4a847\nparent 8cd6080f6c778f6664ea3d12ca7848231707a627\nparent 5ab0548500a30134496ba28eb2291b0523b7346a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649323033 +0200\ncommitter GitHub <noreply@github.com> 1649323033 +0200\n\nRollup merge of #95189 - fmease:fix-issue-94340, r=estebank\n\nStop flagging unexpected inner attributes as outer ones in certain diagnostics\n\nFixes #94340.\n\nIn the issue to-be-fixed I write that the general message _an inner attribute is not permitted in this context_ should be more specific noting that the \u201ccontext\u201d is the `include` macro. This, however, cannot be achieved without touching a lot of things and passing a flag to the `parse_expr` and `parse_item` calls in `expand_include`. This seems rather hacky to me. That's why I left it as it. `Span::from_expansion` does not apply either AFAIK.\n\n`@rustbot` label A-diagnostics T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/648d644c602406eb003dde56e7fd48effce07f15", "html_url": "https://github.com/rust-lang/rust/commit/648d644c602406eb003dde56e7fd48effce07f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/648d644c602406eb003dde56e7fd48effce07f15/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd6080f6c778f6664ea3d12ca7848231707a627", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd6080f6c778f6664ea3d12ca7848231707a627", "html_url": "https://github.com/rust-lang/rust/commit/8cd6080f6c778f6664ea3d12ca7848231707a627"}, {"sha": "5ab0548500a30134496ba28eb2291b0523b7346a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab0548500a30134496ba28eb2291b0523b7346a", "html_url": "https://github.com/rust-lang/rust/commit/5ab0548500a30134496ba28eb2291b0523b7346a"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "ece250f61d54f4b710edb29e3f57d6fa99235cbf", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -141,17 +141,20 @@ pub fn expand_include<'cx>(\n \n         fn make_items(mut self: Box<ExpandResult<'a>>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n             let mut ret = SmallVec::new();\n-            while self.p.token != token::Eof {\n+            loop {\n                 match self.p.parse_item(ForceCollect::No) {\n                     Err(mut err) => {\n                         err.emit();\n                         break;\n                     }\n                     Ok(Some(item)) => ret.push(item),\n                     Ok(None) => {\n-                        let token = pprust::token_to_string(&self.p.token);\n-                        let msg = format!(\"expected item, found `{}`\", token);\n-                        self.p.struct_span_err(self.p.token.span, &msg).emit();\n+                        if self.p.token != token::Eof {\n+                            let token = pprust::token_to_string(&self.p.token);\n+                            let msg = format!(\"expected item, found `{}`\", token);\n+                            self.p.struct_span_err(self.p.token.span, &msg).emit();\n+                        }\n+\n                         break;\n                     }\n                 }"}, {"sha": "1724bab5caa430f7d64a34ccecf0190d2260c1bb", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -13,7 +13,7 @@ use tracing::debug;\n #[derive(Debug)]\n pub enum InnerAttrPolicy<'a> {\n     Permitted,\n-    Forbidden { reason: &'a str, saw_doc_comment: bool, prev_attr_sp: Option<Span> },\n+    Forbidden { reason: &'a str, saw_doc_comment: bool, prev_outer_attr_sp: Option<Span> },\n }\n \n const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n@@ -22,7 +22,7 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n pub(super) const DEFAULT_INNER_ATTR_FORBIDDEN: InnerAttrPolicy<'_> = InnerAttrPolicy::Forbidden {\n     reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG,\n     saw_doc_comment: false,\n-    prev_attr_sp: None,\n+    prev_outer_attr_sp: None,\n };\n \n enum OuterAttributeType {\n@@ -34,22 +34,24 @@ enum OuterAttributeType {\n impl<'a> Parser<'a> {\n     /// Parses attributes that appear before an item.\n     pub(super) fn parse_outer_attributes(&mut self) -> PResult<'a, AttrWrapper> {\n-        let mut attrs: Vec<ast::Attribute> = Vec::new();\n+        let mut outer_attrs: Vec<ast::Attribute> = Vec::new();\n         let mut just_parsed_doc_comment = false;\n         let start_pos = self.token_cursor.num_next_calls;\n         loop {\n             let attr = if self.check(&token::Pound) {\n+                let prev_outer_attr_sp = outer_attrs.last().map(|attr| attr.span);\n+\n                 let inner_error_reason = if just_parsed_doc_comment {\n                     \"an inner attribute is not permitted following an outer doc comment\"\n-                } else if !attrs.is_empty() {\n+                } else if prev_outer_attr_sp.is_some() {\n                     \"an inner attribute is not permitted following an outer attribute\"\n                 } else {\n                     DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n                 };\n                 let inner_parse_policy = InnerAttrPolicy::Forbidden {\n                     reason: inner_error_reason,\n                     saw_doc_comment: just_parsed_doc_comment,\n-                    prev_attr_sp: attrs.last().map(|a| a.span),\n+                    prev_outer_attr_sp,\n                 };\n                 just_parsed_doc_comment = false;\n                 Some(self.parse_attribute(inner_parse_policy)?)\n@@ -97,12 +99,14 @@ impl<'a> Parser<'a> {\n             };\n \n             if let Some(attr) = attr {\n-                attrs.push(attr);\n+                if attr.style == ast::AttrStyle::Outer {\n+                    outer_attrs.push(attr);\n+                }\n             } else {\n                 break;\n             }\n         }\n-        Ok(AttrWrapper::new(attrs.into(), start_pos))\n+        Ok(AttrWrapper::new(outer_attrs.into(), start_pos))\n     }\n \n     /// Matches `attribute = # ! [ meta_item ]`.\n@@ -215,15 +219,15 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn error_on_forbidden_inner_attr(&self, attr_sp: Span, policy: InnerAttrPolicy<'_>) {\n-        if let InnerAttrPolicy::Forbidden { reason, saw_doc_comment, prev_attr_sp } = policy {\n-            let prev_attr_note =\n+        if let InnerAttrPolicy::Forbidden { reason, saw_doc_comment, prev_outer_attr_sp } = policy {\n+            let prev_outer_attr_note =\n                 if saw_doc_comment { \"previous doc comment\" } else { \"previous outer attribute\" };\n \n             let mut diag = self.struct_span_err(attr_sp, reason);\n \n-            if let Some(prev_attr_sp) = prev_attr_sp {\n+            if let Some(prev_outer_attr_sp) = prev_outer_attr_sp {\n                 diag.span_label(attr_sp, \"not permitted following an outer attribute\")\n-                    .span_label(prev_attr_sp, prev_attr_note);\n+                    .span_label(prev_outer_attr_sp, prev_outer_attr_note);\n             }\n \n             diag.note("}, {"sha": "42b2dfde85577e4beacf75be3b8ddf2887a129b1", "filename": "src/test/ui/parser/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr.rs?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -3,5 +3,4 @@\n fn main() {}\n \n #![lang = \"foo\"] //~ ERROR an inner attribute is not permitted in this context\n-                 //~| ERROR definition of an unknown language item: `foo`\n fn foo() {}"}, {"sha": "3527274bd0f8c954f79f05de405f4bb6059cdda1", "filename": "src/test/ui/parser/attr.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr.stderr?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -3,7 +3,6 @@ error: an inner attribute is not permitted in this context\n    |\n LL | #![lang = \"foo\"]\n    | ^^^^^^^^^^^^^^^^\n-LL |\n LL | fn foo() {}\n    | ----------- the inner attribute doesn't annotate this function\n    |\n@@ -14,12 +13,5 @@ LL - #![lang = \"foo\"]\n LL + #[lang = \"foo\"]\n    | \n \n-error[E0522]: definition of an unknown language item: `foo`\n-  --> $DIR/attr.rs:5:1\n-   |\n-LL | #![lang = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^ definition of unknown language item `foo`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0522`."}, {"sha": "9429e514339cf5deb38393ca14d549e70978eb2f", "filename": "src/test/ui/parser/issues/auxiliary/issue-94340-inc.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fissues%2Fauxiliary%2Fissue-94340-inc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fissues%2Fauxiliary%2Fissue-94340-inc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fauxiliary%2Fissue-94340-inc.rs?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -0,0 +1,3 @@\n+// include file for issue-94340.rs\n+#![deny(rust_2018_idioms)]\n+#![deny(unused_must_use)]"}, {"sha": "d0fb84a689a33a6449c8dc7f7d5f1870bfeee3ad", "filename": "src/test/ui/parser/issues/issue-94340.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-94340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-94340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-94340.rs?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -0,0 +1,8 @@\n+// Make sure that unexpected inner attributes are not labeled as outer ones in diagnostics when\n+// trying to parse an item and that they are subsequently ignored not triggering confusing extra\n+// diagnostics like \"expected item after attributes\" which is not true for `include!` which can\n+// include empty files.\n+\n+include!(\"auxiliary/issue-94340-inc.rs\");\n+\n+fn main() {}"}, {"sha": "9fd7c38a80b77baa627f95375613d5c3d879207c", "filename": "src/test/ui/parser/issues/issue-94340.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-94340.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/648d644c602406eb003dde56e7fd48effce07f15/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-94340.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-94340.stderr?ref=648d644c602406eb003dde56e7fd48effce07f15", "patch": "@@ -0,0 +1,20 @@\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/auxiliary/issue-94340-inc.rs:2:1\n+   |\n+LL | #![deny(rust_2018_idioms)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n+\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/auxiliary/issue-94340-inc.rs:3:1\n+   |\n+LL | #![deny(unused_must_use)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+   = note: outer attributes, like `#[test]`, annotate the item following them\n+\n+error: aborting due to 2 previous errors\n+"}]}