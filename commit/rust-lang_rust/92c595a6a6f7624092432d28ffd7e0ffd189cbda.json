{"sha": "92c595a6a6f7624092432d28ffd7e0ffd189cbda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYzU5NWE2YTZmNzYyNDA5MjQzMmQyOGZmZDdlMGZmZDE4OWNiZGE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T19:42:43Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T20:13:08Z"}, "message": "Handle extern crates better, so they work correctly in 2015 edition\n\n(see the removed comment.)", "tree": {"sha": "a4a697b02219c22d4be726cf05e68dfb4ba2b108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4a697b02219c22d4be726cf05e68dfb4ba2b108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92c595a6a6f7624092432d28ffd7e0ffd189cbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92c595a6a6f7624092432d28ffd7e0ffd189cbda", "html_url": "https://github.com/rust-lang/rust/commit/92c595a6a6f7624092432d28ffd7e0ffd189cbda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92c595a6a6f7624092432d28ffd7e0ffd189cbda/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "url": "https://api.github.com/repos/rust-lang/rust/commits/70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "html_url": "https://github.com/rust-lang/rust/commit/70839b7ef8217fd019ce5bd3a643a8a16f5fa829"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "cd7b41cff15058e8e6741a415793f0c3972465b9", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/92c595a6a6f7624092432d28ffd7e0ffd189cbda/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c595a6a6f7624092432d28ffd7e0ffd189cbda/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=92c595a6a6f7624092432d28ffd7e0ffd189cbda", "patch": "@@ -287,12 +287,18 @@ where\n     ) -> ReachedFixedPoint {\n         log::debug!(\"resolving import: {:?} ({:?})\", import, self.result.edition);\n         let original_module = Module { krate: self.krate, module_id };\n-        let (def, reached_fixedpoint) = self.result.resolve_path_fp(\n-            self.db,\n-            ResolveMode::Import,\n-            original_module,\n-            &import.path,\n-        );\n+\n+        let (def, reached_fixedpoint) = if import.is_extern_crate {\n+            let res = self.result.resolve_name_in_extern_prelude(\n+                &import\n+                    .path\n+                    .as_ident()\n+                    .expect(\"extern crate should have been desugared to one-element path\"),\n+            );\n+            (res, if res.is_none() { ReachedFixedPoint::No } else { ReachedFixedPoint::Yes })\n+        } else {\n+            self.result.resolve_path_fp(self.db, ResolveMode::Import, original_module, &import.path)\n+        };\n \n         if reached_fixedpoint != ReachedFixedPoint::Yes {\n             return reached_fixedpoint;\n@@ -502,6 +508,10 @@ impl ItemMap {\n         from_scope.or(from_extern_prelude).or(from_prelude)\n     }\n \n+    fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs<ModuleDef> {\n+        self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it))\n+    }\n+\n     fn resolve_name_in_crate_root_or_extern_prelude(\n         &self,\n         db: &impl PersistentHirDatabase,\n@@ -511,8 +521,7 @@ impl ItemMap {\n         let crate_root = module.crate_root(db);\n         let from_crate_root =\n             self[crate_root.module_id].items.get(name).map_or(PerNs::none(), |it| it.def);\n-        let from_extern_prelude =\n-            self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n+        let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n \n         from_crate_root.or(from_extern_prelude)\n     }"}, {"sha": "81d80654c969e8012cb69e7ea6e0f39294b74063", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/92c595a6a6f7624092432d28ffd7e0ffd189cbda/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c595a6a6f7624092432d28ffd7e0ffd189cbda/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=92c595a6a6f7624092432d28ffd7e0ffd189cbda", "patch": "@@ -8,7 +8,7 @@ use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    SourceItemId, Path, PathKind, ModuleSource, Name,\n+    SourceItemId, Path, ModuleSource, Name,\n     HirFileId, MacroCallLoc, AsName, PerNs, Function,\n     ModuleDef, Module, Struct, Enum, Const, Static, Trait, Type,\n     ids::LocationCtx, PersistentHirDatabase,\n@@ -180,13 +180,8 @@ impl LoweredModule {\n                 self.add_use_item(source_map, it);\n             }\n             ast::ModuleItemKind::ExternCrateItem(it) => {\n-                // Lower `extern crate x` to `use ::x`. This is kind of cheating\n-                // and only works if we always interpret absolute paths in the\n-                // 2018 style; otherwise `::x` could also refer to a module in\n-                // the crate root.\n                 if let Some(name_ref) = it.name_ref() {\n-                    let mut path = Path::from_name_ref(name_ref);\n-                    path.kind = PathKind::Abs;\n+                    let path = Path::from_name_ref(name_ref);\n                     let alias = it.alias().and_then(|a| a.name()).map(AsName::as_name);\n                     self.imports.alloc(ImportData {\n                         path,"}, {"sha": "6402c89c08b623453292f3d6be647a9e69825572", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/92c595a6a6f7624092432d28ffd7e0ffd189cbda/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c595a6a6f7624092432d28ffd7e0ffd189cbda/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=92c595a6a6f7624092432d28ffd7e0ffd189cbda", "patch": "@@ -542,6 +542,42 @@ fn extern_crate_rename() {\n     );\n }\n \n+#[test]\n+fn extern_crate_rename_2015_edition() {\n+    let mut db = MockDatabase::with_files(\n+        \"\n+        //- /main.rs\n+        extern crate alloc as alloc_crate;\n+\n+        mod alloc;\n+        mod sync;\n+\n+        //- /sync.rs\n+        use alloc_crate::Arc;\n+\n+        //- /lib.rs\n+        struct Arc;\n+        \",\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", \"2015\", [\"alloc\"]),\n+        \"alloc\": (\"/lib.rs\", []),\n+    });\n+    let sync_id = db.file_id_of(\"/sync.rs\");\n+\n+    let module = crate::source_binder::module_from_file_id(&db, sync_id).unwrap();\n+    let krate = module.krate(&db).unwrap();\n+    let item_map = db.item_map(krate);\n+\n+    check_module_item_map(\n+        &item_map,\n+        module.module_id,\n+        \"\n+        Arc: t v\n+        \",\n+    );\n+}\n+\n #[test]\n fn import_across_source_roots() {\n     let mut db = MockDatabase::with_files("}]}