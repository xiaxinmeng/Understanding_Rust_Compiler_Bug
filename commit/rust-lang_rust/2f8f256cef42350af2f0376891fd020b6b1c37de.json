{"sha": "2f8f256cef42350af2f0376891fd020b6b1c37de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOGYyNTZjZWY0MjM1MGFmMmYwMzc2ODkxZmQwMjBiNmIxYzM3ZGU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-04-21T23:31:04Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-03T15:30:10Z"}, "message": "require the existential bounds of an object type to be object-safe\n\nThis is required, as Copy and Sized are object-unsafe.\n\nAs a soundness fix, this is a [breaking-change]\n\nFixes #32963", "tree": {"sha": "2b0185237a64ee442e9a76994a0eb137cb597d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0185237a64ee442e9a76994a0eb137cb597d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f8f256cef42350af2f0376891fd020b6b1c37de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8f256cef42350af2f0376891fd020b6b1c37de", "html_url": "https://github.com/rust-lang/rust/commit/2f8f256cef42350af2f0376891fd020b6b1c37de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f8f256cef42350af2f0376891fd020b6b1c37de/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6dfc51777eb388b6e795399bf1d3f8aac57db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6dfc51777eb388b6e795399bf1d3f8aac57db8", "html_url": "https://github.com/rust-lang/rust/commit/0a6dfc51777eb388b6e795399bf1d3f8aac57db8"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "738ed85ae6d8a7a2fe68f9d518661d431f141060", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2f8f256cef42350af2f0376891fd020b6b1c37de", "patch": "@@ -2408,9 +2408,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // T -> Trait.\n             (_, &ty::TyTrait(ref data)) => {\n-                let object_did = data.principal_def_id();\n-                if !object_safety::is_object_safe(tcx, object_did) {\n-                    return Err(TraitNotObjectSafe(object_did));\n+                let mut object_dids =\n+                    data.bounds.builtin_bounds.iter().flat_map(|bound| {\n+                        tcx.lang_items.from_builtin_kind(bound).ok()\n+                    })\n+                    .chain(Some(data.principal_def_id()));\n+                if let Some(did) = object_dids.find(|did| {\n+                    !object_safety::is_object_safe(tcx, *did)\n+                }) {\n+                    return Err(TraitNotObjectSafe(did))\n                 }\n \n                 let cause = ObligationCause::new(obligation.cause.span,"}, {"sha": "316a81e8f6245d723bea34bd4c8c0393c1c1a072", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=2f8f256cef42350af2f0376891fd020b6b1c37de", "patch": "@@ -301,6 +301,7 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n     /// is WF. Returns false if `ty0` is an unresolved type variable,\n     /// in which case we are not able to simplify at all.\n     fn compute(&mut self, ty0: Ty<'tcx>) -> bool {\n+        let tcx = self.infcx.tcx;\n         let mut subtys = ty0.walk();\n         while let Some(ty) = subtys.next() {\n             match ty.sty {\n@@ -385,10 +386,20 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n                     // checking those\n \n                     let cause = self.cause(traits::MiscObligation);\n-                    self.out.push(\n-                        traits::Obligation::new(\n-                            cause,\n-                            ty::Predicate::ObjectSafe(data.principal_def_id())));\n+\n+                    let component_traits =\n+                        data.bounds.builtin_bounds.iter().flat_map(|bound| {\n+                            tcx.lang_items.from_builtin_kind(bound).ok()\n+                        })\n+                        .chain(Some(data.principal_def_id()));\n+                    self.out.extend(\n+                        component_traits.map(|did| {\n+                            traits::Obligation::new(\n+                                cause.clone(),\n+                                ty::Predicate::ObjectSafe(did)\n+                            )\n+                        })\n+                    );\n                 }\n \n                 // Inference variables are the complicated case, since we don't"}, {"sha": "ba0a6f19f07161cfbd8b6b173b629482d8a44ec0", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=2f8f256cef42350af2f0376891fd020b6b1c37de", "patch": "@@ -15,4 +15,5 @@ pub fn main() {\n     //~^ ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n     //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n     //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~| ERROR `std::marker::Sized` cannot be made into an object\n }"}, {"sha": "d0434384cd047c76fa84c3f41719400fb0b0abad", "filename": "src/test/compile-fail/issue-32963.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=2f8f256cef42350af2f0376891fd020b6b1c37de", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+trait Misc {}\n+\n+fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n+\n+fn main() {\n+    size_of_copy::<Misc+Copy>();\n+    //~^ ERROR `std::marker::Copy` cannot be made into an object\n+    //~| ERROR `Misc + Copy: std::marker::Copy` is not satisfied\n+}"}, {"sha": "747fe2d2046aecc75a3578d64fc9c62e0309f9e0", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8f256cef42350af2f0376891fd020b6b1c37de/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=2f8f256cef42350af2f0376891fd020b6b1c37de", "patch": "@@ -45,15 +45,15 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n-    assert_copy::<&'a (Dummy+Copy)>();\n-    assert_copy::<&'static (Dummy+Copy)>();\n+    assert_copy::<&'a (Dummy+Send)>();\n+    assert_copy::<&'static (Dummy+Send)>();\n \n     // owned object types are not ok\n     assert_copy::<Box<Dummy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n-    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<Dummy+Send>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<&'a mut (Dummy+Send)>();  //~ ERROR : std::marker::Copy` is not satisfied\n \n     // unsafe ptrs are ok\n     assert_copy::<*const isize>();"}]}