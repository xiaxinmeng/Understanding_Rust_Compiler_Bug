{"sha": "f08b51759763e44fc59b56584b640c2d2ccff0a0", "node_id": "C_kwDOAAsO6NoAKGYwOGI1MTc1OTc2M2U0NGZjNTliNTY1ODRiNjQwYzJkMmNjZmYwYTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-17T10:19:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-12T10:24:03Z"}, "message": "Require `impl Trait` in associated types to appear in method signatures", "tree": {"sha": "a92628d0ba91c465c0ba55e98da3d76f073d94f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a92628d0ba91c465c0ba55e98da3d76f073d94f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f08b51759763e44fc59b56584b640c2d2ccff0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f08b51759763e44fc59b56584b640c2d2ccff0a0", "html_url": "https://github.com/rust-lang/rust/commit/f08b51759763e44fc59b56584b640c2d2ccff0a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f08b51759763e44fc59b56584b640c2d2ccff0a0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699a862a3d4e4a2d5603c93297c0c44021ea72f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/699a862a3d4e4a2d5603c93297c0c44021ea72f5", "html_url": "https://github.com/rust-lang/rust/commit/699a862a3d4e4a2d5603c93297c0c44021ea72f5"}], "stats": {"total": 295, "additions": 242, "deletions": 53}, "files": [{"sha": "08ee3761bac2b33141c1206a89b3ff558919ed23", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -305,7 +305,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             );\n                             this.arena.alloc(this.ty(span, hir::TyKind::Err(guar)))\n                         }\n-                        Some(ty) => this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n+                        Some(ty) => this.lower_ty(\n+                            ty,\n+                            &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty: false },\n+                        ),\n                     },\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -852,7 +855,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(\n+                                ty,\n+                                &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty: true },\n+                            );\n                             hir::ImplItemKind::Type(ty)\n                         }\n                     },"}, {"sha": "cd6614a54a4e9a30e172e19a43c4c5efaff40fa6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -247,7 +247,7 @@ enum ImplTraitContext {\n         in_trait: bool,\n     },\n     /// Impl trait in type aliases.\n-    TypeAliasesOpaqueTy,\n+    TypeAliasesOpaqueTy { in_assoc_ty: bool },\n     /// `impl Trait` is unstably accepted in this position.\n     FeatureGated(ImplTraitPosition, Symbol),\n     /// `impl Trait` is not accepted in this position.\n@@ -1407,14 +1407,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             *in_trait,\n                             itctx,\n                         ),\n-                    ImplTraitContext::TypeAliasesOpaqueTy => self.lower_opaque_impl_trait(\n-                        span,\n-                        hir::OpaqueTyOrigin::TyAlias,\n-                        *def_node_id,\n-                        bounds,\n-                        false,\n-                        itctx,\n-                    ),\n+                    &ImplTraitContext::TypeAliasesOpaqueTy { in_assoc_ty } => self\n+                        .lower_opaque_impl_trait(\n+                            span,\n+                            hir::OpaqueTyOrigin::TyAlias { in_assoc_ty },\n+                            *def_node_id,\n+                            bounds,\n+                            false,\n+                            itctx,\n+                        ),\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n                         self.create_def(\n@@ -1534,13 +1535,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // If this came from a TAIT (as opposed to a function that returns an RPIT), we only want\n         // to capture the lifetimes that appear in the bounds. So visit the bounds to find out\n         // exactly which ones those are.\n-        let lifetimes_to_remap = if origin == hir::OpaqueTyOrigin::TyAlias {\n-            // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n-            Vec::new()\n-        } else {\n-            // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n-            // we only keep the lifetimes that appear in the `impl Debug` itself:\n-            lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+        let lifetimes_to_remap = match origin {\n+            hir::OpaqueTyOrigin::TyAlias { .. } => {\n+                // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n+                Vec::new()\n+            }\n+            hir::OpaqueTyOrigin::AsyncFn(..) | hir::OpaqueTyOrigin::FnReturn(..) => {\n+                // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n+                // we only keep the lifetimes that appear in the `impl Debug` itself:\n+                lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+            }\n         };\n         debug!(?lifetimes_to_remap);\n "}, {"sha": "309f23d92261e28b69a0f46125036e7f9434c840", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         // Only check this for TAIT. RPIT already supports `tests/ui/impl-trait/nested-return-type2.rs`\n         // on stable and we'd break that.\n-        let OpaqueTyOrigin::TyAlias = origin else {\n+        let OpaqueTyOrigin::TyAlias { .. } = origin else {\n             return definition_ty;\n         };\n         let def_id = opaque_type_key.def_id;\n@@ -360,7 +360,7 @@ fn check_opaque_type_parameter_valid(\n         // which would error here on all of the `'static` args.\n         OpaqueTyOrigin::FnReturn(..) | OpaqueTyOrigin::AsyncFn(..) => return Ok(()),\n         // Check these\n-        OpaqueTyOrigin::TyAlias => {}\n+        OpaqueTyOrigin::TyAlias { .. } => {}\n     }\n     let opaque_generics = tcx.generics_of(opaque_type_key.def_id);\n     let mut seen_params: FxIndexMap<_, Vec<_>> = FxIndexMap::default();"}, {"sha": "932f0396282fd729e1d52551b851d490703be9c4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -2662,7 +2662,10 @@ pub enum OpaqueTyOrigin {\n     /// `async fn`\n     AsyncFn(LocalDefId),\n     /// type aliases: `type Foo = impl Trait;`\n-    TyAlias,\n+    TyAlias {\n+        /// associated types in impl blocks for traits.\n+        in_assoc_ty: bool,\n+    },\n }\n \n /// The various kinds of types recognized by the compiler."}, {"sha": "b16860907eb226918b9b23cb1bf0538bcbd9a93a", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -397,7 +397,14 @@ fn check_opaque_meets_bounds<'tcx>(\n ) {\n     let defining_use_anchor = match *origin {\n         hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n-        hir::OpaqueTyOrigin::TyAlias => def_id,\n+        hir::OpaqueTyOrigin::TyAlias { .. } => {\n+            let mut def_id = def_id;\n+            // Find the surrounding item (type alias or assoc type)\n+            while let DefKind::OpaqueTy = tcx.def_kind(def_id) {\n+                def_id = tcx.local_parent(def_id);\n+            }\n+            def_id\n+        }\n     };\n     let param_env = tcx.param_env(defining_use_anchor);\n \n@@ -455,10 +462,10 @@ fn check_opaque_meets_bounds<'tcx>(\n         // They can only be referenced as `<Opaque<T> as Trait<&'static T>>::AssocTy`.\n         // We don't have to check them here because their well-formedness follows from the WF of\n         // the projection input types in the defining- and use-sites.\n-        hir::OpaqueTyOrigin::TyAlias\n+        hir::OpaqueTyOrigin::TyAlias { .. }\n             if tcx.def_kind(tcx.parent(def_id.to_def_id())) == DefKind::OpaqueTy => {}\n         // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::TyAlias => {\n+        hir::OpaqueTyOrigin::TyAlias { .. } => {\n             let wf_tys = ocx.assumed_wf_types(param_env, span, def_id);\n             let implied_bounds = infcx.implied_bounds_tys(param_env, def_id, wf_tys);\n             let outlives_env = OutlivesEnvironment::with_bounds(param_env, implied_bounds);"}, {"sha": "2f808d4ce738c55ab4321eb3e76a0369ca59b161", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -1483,7 +1483,7 @@ fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorK\n fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n     match tcx.hir().get_by_def_id(def_id) {\n         Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. }) => {\n-            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias)\n+            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias { .. })\n         }\n         _ => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n     }"}, {"sha": "ed60998ec8dcfebc238d4cc4d17d494564b63d93", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -159,7 +159,10 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 }\n                 Some(fn_def_id.to_def_id())\n             }\n-            ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n+            ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n+            }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 assert_ne!(parent_id, hir::CRATE_OWNER_ID);\n                 debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);"}, {"sha": "a33990813b8206bd8b4b619c290cf8eae30d325f", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -721,7 +721,7 @@ pub(super) fn type_param_predicates(\n                 | ItemKind::TyAlias(_, generics)\n                 | ItemKind::OpaqueTy(OpaqueTy {\n                     generics,\n-                    origin: hir::OpaqueTyOrigin::TyAlias,\n+                    origin: hir::OpaqueTyOrigin::TyAlias { .. },\n                     ..\n                 })\n                 | ItemKind::Enum(_, generics)"}, {"sha": "92ae93cf4cc5db928502269c02359419274a95a3", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -526,7 +526,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 });\n             }\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n             }) => {\n                 // Opaque types are visited when we visit the\n                 // `TyKind::OpaqueDef`, so that they have the lifetimes from\n@@ -707,7 +708,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 let opaque_ty = self.tcx.hir().item(item_id);\n                 match &opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                        origin: hir::OpaqueTyOrigin::TyAlias,\n+                        origin: hir::OpaqueTyOrigin::TyAlias { .. },\n                         ..\n                     }) => {\n                         intravisit::walk_ty(self, ty);"}, {"sha": "6c7c2b9eea25877258f49e37ec359c2bbb91ea77", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -426,9 +426,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n-                    find_opaque_ty_constraints_for_tait(tcx, def_id)\n-                }\n+                ItemKind::OpaqueTy(OpaqueTy {\n+                    origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                    ..\n+                }) => find_opaque_ty_constraints_for_tait(tcx, def_id),\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy {\n                     origin:"}, {"sha": "b7253957edcc4a0321b4f7d0d7ddda33f2611278", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -735,7 +735,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let ty::subst::GenericArgKind::Type(ty) = ty.unpack()\n                     && let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *ty.kind()\n                     && let Some(def_id) = def_id.as_local()\n-                    && self.opaque_type_origin(def_id).is_some() {\n+                    && self.opaque_type_origin(def_id, self.param_env).is_some() {\n                     return None;\n                 }\n             }"}, {"sha": "e9c3726f8c3ae0d65658c686491d524b3b59f4fb", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -1,8 +1,10 @@\n+use crate::infer::opaque_types::may_define_impl_trait_in_assoc_ty_modulo_sig;\n+\n use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n-use rustc_middle::traits::ObligationCauseCode;\n+use rustc_middle::traits::ObligationCauseCode::{self, MiscObligation};\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n use rustc_middle::{\n@@ -256,6 +258,15 @@ impl<T> Trait<T> for X {\n                             );\n                         }\n                     }\n+                    (ty::Alias(ty::Opaque, alias), _) | (_, ty::Alias(ty::Opaque, alias)) if matches!(cause.code(), MiscObligation) => {\n+                        if let Some(def_id) = alias.def_id.as_local() {\n+                            if may_define_impl_trait_in_assoc_ty_modulo_sig(tcx, body_owner_def_id.expect_local(), def_id).is_some() {\n+                                diag.span_note(tcx.def_span(body_owner_def_id), \"\\\n+                                    this item must have the opaque type in its signature \\\n+                                    in order to be able to register hidden types\");\n+                            }\n+                        }\n+                    }\n                     (ty::FnPtr(_), ty::FnDef(def, _))\n                     if let hir::def::DefKind::Fn = tcx.def_kind(def) => {\n                         diag.note("}, {"sha": "0b6f51652fd1d04be7568eb2e34abe6f5887b7bc", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 123, "deletions": 9, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -3,9 +3,10 @@ use super::{DefineOpaqueTypes, InferResult};\n use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n+use hir::def::DefKind;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n-use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_middle::traits::ObligationCause;\n@@ -53,7 +54,9 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n         let mut obligations = vec![];\n         let replace_opaque_type = |def_id: DefId| {\n-            def_id.as_local().map_or(false, |def_id| self.opaque_type_origin(def_id).is_some())\n+            def_id\n+                .as_local()\n+                .map_or(false, |def_id| self.opaque_type_origin(def_id, param_env).is_some())\n         };\n         let value = value.fold_with(&mut BottomUpFolder {\n             tcx: self.tcx,\n@@ -138,7 +141,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                         //     let x = || foo(); // returns the Opaque assoc with `foo`\n                         // }\n                         // ```\n-                        self.opaque_type_origin(def_id)?\n+                        self.opaque_type_origin(def_id, param_env)?\n                     }\n                     DefiningAnchor::Bubble => self.opaque_type_origin_unchecked(def_id),\n                     DefiningAnchor::Error => return None,\n@@ -149,8 +152,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // no one encounters it in practice.\n                     // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n                     // where it is of no concern, so we only check for TAITs.\n-                    if let Some(OpaqueTyOrigin::TyAlias) =\n-                        b_def_id.as_local().and_then(|b_def_id| self.opaque_type_origin(b_def_id))\n+                    if let Some(OpaqueTyOrigin::TyAlias { .. }) = b_def_id\n+                        .as_local()\n+                        .and_then(|b_def_id| self.opaque_type_origin(b_def_id, param_env))\n                     {\n                         self.tcx.sess.emit_err(OpaqueHiddenTypeDiag {\n                             span: cause.span,\n@@ -366,8 +370,12 @@ impl<'tcx> InferCtxt<'tcx> {\n \n     /// Returns the origin of the opaque type `def_id` if we're currently\n     /// in its defining scope.\n-    #[instrument(skip(self), level = \"trace\", ret)]\n-    pub fn opaque_type_origin(&self, def_id: LocalDefId) -> Option<OpaqueTyOrigin> {\n+    #[instrument(skip(self, param_env), level = \"trace\", ret)]\n+    pub fn opaque_type_origin(\n+        &self,\n+        def_id: LocalDefId,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Option<OpaqueTyOrigin> {\n         let opaque_hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let parent_def_id = match self.defining_use_anchor {\n             DefiningAnchor::Bubble | DefiningAnchor::Error => return None,\n@@ -381,8 +389,12 @@ impl<'tcx> InferCtxt<'tcx> {\n             // Anonymous `impl Trait`\n             hir::OpaqueTyOrigin::FnReturn(parent) => parent == parent_def_id,\n             // Named `type Foo = impl Bar;`\n-            hir::OpaqueTyOrigin::TyAlias => {\n-                may_define_opaque_type(self.tcx, parent_def_id, opaque_hir_id)\n+            hir::OpaqueTyOrigin::TyAlias { in_assoc_ty } => {\n+                if in_assoc_ty {\n+                    may_define_impl_trait_in_assoc_ty(self.tcx, parent_def_id, def_id, param_env)\n+                } else {\n+                    may_define_opaque_type(self.tcx, parent_def_id, opaque_hir_id)\n+                }\n             }\n         };\n         in_definition_scope.then_some(origin)\n@@ -642,3 +654,105 @@ fn may_define_opaque_type(tcx: TyCtxt<'_>, def_id: LocalDefId, opaque_hir_id: hi\n     );\n     res\n }\n+\n+#[derive(Debug, TypeVisitable, Clone)]\n+/// Helper datastructure containing the signature\n+/// that the opaque type extraction logic uses for determining\n+/// whether an opaque type may have its hidden types registered\n+/// by an item.\n+enum FnSigOrTy<'tcx> {\n+    FnSig(ty::PolyFnSig<'tcx>),\n+    Ty(Ty<'tcx>),\n+}\n+\n+/// Checks that the item may register hidden types for the\n+/// opaque type, if the opaque type shows up in its signature.\n+#[instrument(level = \"debug\", skip(tcx), ret)]\n+pub fn may_define_impl_trait_in_assoc_ty_modulo_sig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n+    opaque_def_id: LocalDefId,\n+) -> Option<impl TypeVisitable<TyCtxt<'tcx>>> {\n+    let sig = match tcx.def_kind(def_id) {\n+        DefKind::AssocFn => FnSigOrTy::FnSig(tcx.fn_sig(def_id).subst_identity()),\n+        DefKind::AssocConst | DefKind::AssocTy => {\n+            FnSigOrTy::Ty(tcx.type_of(def_id).subst_identity())\n+        }\n+        _ => return None,\n+    };\n+    let impl_id = tcx.local_parent(def_id);\n+    trace!(?impl_id);\n+    let mut assoc_id = opaque_def_id;\n+    // Peel nested opaque types.\n+    while let DefKind::OpaqueTy = tcx.def_kind(assoc_id) {\n+        trace!(?assoc_id);\n+        assoc_id = tcx.local_parent(assoc_id);\n+    }\n+    trace!(?assoc_id);\n+    if !matches!(tcx.def_kind(assoc_id), DefKind::AssocTy) {\n+        tcx.sess\n+            .delay_span_bug(tcx.def_span(opaque_def_id), format!(\"{:?}\", tcx.def_kind(assoc_id)));\n+    }\n+    let assoc_impl_id = tcx.local_parent(assoc_id);\n+    trace!(?assoc_impl_id);\n+\n+    if impl_id != assoc_impl_id {\n+        return None;\n+    }\n+\n+    Some(sig)\n+}\n+\n+#[instrument(level = \"debug\", skip(tcx, param_env), ret)]\n+fn may_define_impl_trait_in_assoc_ty<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n+    opaque_def_id: LocalDefId,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> bool {\n+    let Some(sig) = may_define_impl_trait_in_assoc_ty_modulo_sig(tcx, def_id, opaque_def_id) else {\n+        return false;\n+    };\n+\n+    struct Visitor<'tcx> {\n+        opaque_def_id: LocalDefId,\n+        param_env: ty::ParamEnv<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n+        seen: FxHashSet<LocalDefId>,\n+    }\n+\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for Visitor<'tcx> {\n+        type BreakTy = ();\n+        #[instrument(level = \"trace\", skip(self), ret)]\n+        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+            // FIXME(oli-obk): We should be checking if the associated type\n+            // is mentioned instead of normalizing to find the opaque type.\n+            // But that requires a way to figure out that a projection refers\n+            // to a specific opaque type. That is probably doable by checking for\n+            // `Self` as the `substs[0]`.\n+            let normalized_ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n+            if let ty::Alias(ty::Opaque, alias) = normalized_ty.kind() {\n+                if let Some(def_id) = alias.def_id.as_local() {\n+                    trace!(?alias.def_id);\n+                    if def_id == self.opaque_def_id {\n+                        return ControlFlow::Break(());\n+                    }\n+\n+                    if self.seen.insert(def_id) {\n+                        // Look into nested obligations like `impl Trait<Assoc = impl OtherTrait>`.\n+                        for (pred, _) in self\n+                            .tcx\n+                            .explicit_item_bounds(alias.def_id)\n+                            .subst_iter_copied(self.tcx, alias.substs)\n+                        {\n+                            pred.visit_with(self)?;\n+                        }\n+                    }\n+                }\n+            }\n+            normalized_ty.super_visit_with(self)\n+        }\n+    }\n+    sig.visit_with(&mut Visitor { opaque_def_id, param_env, tcx, seen: Default::default() })\n+        .is_break()\n+}"}, {"sha": "043410c47e0b565618a1391783e47207eeee4875", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -1641,9 +1641,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::OpaqueTy(ref opaque) => {\n                 self.encode_explicit_item_bounds(def_id);\n-                self.tables\n-                    .is_type_alias_impl_trait\n-                    .set(def_id.index, matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias));\n+                self.tables.is_type_alias_impl_trait.set(\n+                    def_id.index,\n+                    matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias { .. }),\n+                );\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set_some(def_id.index, *defaultness);"}, {"sha": "2952217f2675fa469eea1713084ada9db8cef3c4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -2520,7 +2520,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId>\n                 hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {\n                     Some(parent)\n                 }\n-                hir::OpaqueTyOrigin::TyAlias => None,\n+                hir::OpaqueTyOrigin::TyAlias { .. } => None,\n             };\n         }\n     }"}, {"sha": "a0c8d299f48ba164c000d9f4c8861f050101add2", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -32,7 +32,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This should only be used outside of type inference. For example,\n     /// it assumes that normalization will succeed.\n-    #[tracing::instrument(level = \"debug\", skip(self, param_env))]\n+    #[tracing::instrument(level = \"debug\", skip(self, param_env), ret)]\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,"}, {"sha": "ff13daa6db4572eda0008ded02ca9f4b806d51f6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -455,7 +455,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+                origin: hir::OpaqueTyOrigin::TyAlias { .. },\n+                ..\n             })\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)"}, {"sha": "21c1d8bcc9824eb6d9c61c5c6283d12ea86f14a9", "filename": "tests/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -5,15 +5,14 @@\n trait Trait {\n     type Opaque1;\n     type Opaque2;\n-    fn constrain(self);\n+    fn constrain(self) -> (Self::Opaque1, Self::Opaque2);\n }\n \n impl<'a> Trait for &'a () {\n     type Opaque1 = impl Sized;\n     type Opaque2 = impl Sized + 'a;\n-    fn constrain(self) {\n-        let _: Self::Opaque1 = ();\n-        let _: Self::Opaque2 = self;\n+    fn constrain(self) -> (Self::Opaque1, Self::Opaque2) {\n+        ((), self)\n     }\n }\n "}, {"sha": "93c52126d69b00b0d4d866f405fb99709b97e31b", "filename": "tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.rs?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -0,0 +1,16 @@\n+#![feature(impl_trait_in_assoc_type)]\n+\n+trait Foo {\n+    type Foo;\n+    fn bar();\n+}\n+\n+impl Foo for () {\n+    type Foo = impl std::fmt::Debug;\n+    fn bar() {\n+        let x: Self::Foo = ();\n+        //~^ ERROR: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2beed73cb85c3b346246835f5ec4a6100dcb6af6", "filename": "tests/ui/type-alias-impl-trait/invalid_impl_trait_in_assoc_ty.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f08b51759763e44fc59b56584b640c2d2ccff0a0/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b51759763e44fc59b56584b640c2d2ccff0a0/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Finvalid_impl_trait_in_assoc_ty.stderr?ref=f08b51759763e44fc59b56584b640c2d2ccff0a0", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/invalid_impl_trait_in_assoc_ty.rs:11:28\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                -------------------- the expected opaque type\n+LL |     fn bar() {\n+LL |         let x: Self::Foo = ();\n+   |                ---------   ^^ expected opaque type, found `()`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected opaque type `<() as Foo>::Foo`\n+                found unit type `()`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/invalid_impl_trait_in_assoc_ty.rs:10:5\n+   |\n+LL |     fn bar() {\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}