{"sha": "bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNjc1YzhhOGJkZDNmZGEyMzliZWUzZDNmMzFhY2Q4Njc5NjU1Yjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-10T18:34:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-10T18:34:59Z"}, "message": "Merge #8460\n\n8460: Revert \"Rewrite `#[derive]` removal code to be based on AST\" r=jonas-schievink a=jonas-schievink\n\nIt breaks some function-like proc macros: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Proc.20macro.20expansion/near/233971916\r\n\r\nIt also uses attribute indices incorrectly, which causes insufficient attributes to be removed.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "37f9e13ceb4552d68f0ecafefa8fb54a5f5bdae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f9e13ceb4552d68f0ecafefa8fb54a5f5bdae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgce/TCRBK7hj4Ov3rIwAAdHIIAHFrEestHsSRqpSFCI3r1TWc\nf7C8dsFdWePceUgmIoR6Cjd576zyDiMJE5S0xyEE9xgIyiTYegd9NLGFEFshE7hU\noJ02MTX8WZAbnvbjF12W8EJfceNKH6i0Dx65Yco+7+EMwkceP5FP8UR02ednYVyx\nHwWrBeybmUngMegIaf1vBFOu5xQ1Yh9H9fLTttx7FNml6P/SvhN4PCaFMpNeiNya\nAe6xH6aXG+r2RMe8PuxE+DtkaKvyLVveVx4bERDhjMePp4G9VLPiSFqshxxmRITz\nfpZg5KOOZzKztPi0SCYUm/ocWLdU7hrlfOmdsQnW/dG3FnBmdaqGwhahV9bcVYE=\n=wuMu\n-----END PGP SIGNATURE-----\n", "payload": "tree 37f9e13ceb4552d68f0ecafefa8fb54a5f5bdae4\nparent dea3ff609e486b4b1eb8e4f1f88b84b498683b91\nparent 44b04ebe43534f749bc3a8431449bc019cc9c3b2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618079699 +0000\ncommitter GitHub <noreply@github.com> 1618079699 +0000\n\nMerge #8460\n\n8460: Revert \"Rewrite `#[derive]` removal code to be based on AST\" r=jonas-schievink a=jonas-schievink\n\nIt breaks some function-like proc macros: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Proc.20macro.20expansion/near/233971916\r\n\r\nIt also uses attribute indices incorrectly, which causes insufficient attributes to be removed.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "html_url": "https://github.com/rust-lang/rust/commit/bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea3ff609e486b4b1eb8e4f1f88b84b498683b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea3ff609e486b4b1eb8e4f1f88b84b498683b91", "html_url": "https://github.com/rust-lang/rust/commit/dea3ff609e486b4b1eb8e4f1f88b84b498683b91"}, {"sha": "44b04ebe43534f749bc3a8431449bc019cc9c3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b04ebe43534f749bc3a8431449bc019cc9c3b2", "html_url": "https://github.com/rust-lang/rust/commit/44b04ebe43534f749bc3a8431449bc019cc9c3b2"}], "stats": {"total": 205, "additions": 105, "deletions": 100}, "files": [{"sha": "10fe6082153134fe0e14e683f5ee5143f8e5df22", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "patch": "@@ -14,9 +14,9 @@ use syntax::{\n };\n \n use crate::{\n-    ast_id_map::AstIdMap, hygiene::HygieneFrame, input::process_macro_input, BuiltinDeriveExpander,\n-    BuiltinFnLikeExpander, EagerCallLoc, EagerMacroId, HirFileId, HirFileIdRepr, LazyMacroId,\n-    MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n+    ast_id_map::AstIdMap, hygiene::HygieneFrame, BuiltinDeriveExpander, BuiltinFnLikeExpander,\n+    EagerCallLoc, EagerMacroId, HirFileId, HirFileIdRepr, LazyMacroId, MacroCallId, MacroCallLoc,\n+    MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n };\n \n /// Total limit on the number of tokens produced by any macro invocation.\n@@ -191,7 +191,6 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     };\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n-    let arg = process_macro_input(db, arg, id);\n     Some(arg.green())\n }\n "}, {"sha": "d1f22aba4fc9fe08fe5afc578347911f64c65aa5", "filename": "crates/hir_expand/src/input.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/dea3ff609e486b4b1eb8e4f1f88b84b498683b91/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea3ff609e486b4b1eb8e4f1f88b84b498683b91/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=dea3ff609e486b4b1eb8e4f1f88b84b498683b91", "patch": "@@ -1,95 +0,0 @@\n-//! Macro input conditioning.\n-\n-use syntax::{\n-    ast::{self, AttrsOwner},\n-    AstNode, SyntaxNode,\n-};\n-\n-use crate::{\n-    db::AstDatabase,\n-    name::{name, AsName},\n-    AttrId, LazyMacroId, MacroCallKind, MacroCallLoc,\n-};\n-\n-pub(crate) fn process_macro_input(\n-    db: &dyn AstDatabase,\n-    node: SyntaxNode,\n-    id: LazyMacroId,\n-) -> SyntaxNode {\n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n-\n-    match loc.kind {\n-        MacroCallKind::FnLike { .. } => node,\n-        MacroCallKind::Derive { derive_attr, .. } => {\n-            let item = match ast::Item::cast(node.clone()) {\n-                Some(item) => item,\n-                None => return node,\n-            };\n-\n-            remove_derives_up_to(item, derive_attr).syntax().clone()\n-        }\n-    }\n-}\n-\n-/// Removes `#[derive]` attributes from `item`, up to `attr`.\n-fn remove_derives_up_to(item: ast::Item, attr: AttrId) -> ast::Item {\n-    let item = item.clone_for_update();\n-    let idx = attr.0 as usize;\n-    for attr in item.attrs().take(idx + 1) {\n-        if let Some(name) =\n-            attr.path().and_then(|path| path.as_single_segment()).and_then(|seg| seg.name_ref())\n-        {\n-            if name.as_name() == name![derive] {\n-                attr.syntax().detach();\n-            }\n-        }\n-    }\n-    item\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use base_db::fixture::WithFixture;\n-    use base_db::SourceDatabase;\n-    use expect_test::{expect, Expect};\n-\n-    use crate::test_db::TestDB;\n-\n-    use super::*;\n-\n-    fn test_remove_derives_up_to(attr: AttrId, ra_fixture: &str, expect: Expect) {\n-        let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n-        let parsed = db.parse(file_id);\n-\n-        let mut items: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(ast::Item::cast).collect();\n-        assert_eq!(items.len(), 1);\n-\n-        let item = remove_derives_up_to(items.pop().unwrap(), attr);\n-        expect.assert_eq(&item.to_string());\n-    }\n-\n-    #[test]\n-    fn remove_derive() {\n-        test_remove_derives_up_to(\n-            AttrId(2),\n-            r#\"\n-#[allow(unused)]\n-#[derive(Copy)]\n-#[derive(Hello)]\n-#[derive(Clone)]\n-struct A {\n-    bar: u32\n-}\n-        \"#,\n-            expect![[r#\"\n-#[allow(unused)]\n-\n-\n-#[derive(Clone)]\n-struct A {\n-    bar: u32\n-}\"#]],\n-        );\n-    }\n-}"}, {"sha": "a0e6aec62802703feb09ee514802869c86fdbf15", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "patch": "@@ -14,7 +14,6 @@ pub mod builtin_macro;\n pub mod proc_macro;\n pub mod quote;\n pub mod eager;\n-mod input;\n \n use either::Either;\n pub use mbe::{ExpandError, ExpandResult};"}, {"sha": "75e95081609a4d3e29de6efb9fae6878ce4e345f", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd675c8a8bdd3fda239bee3d3f31acd8679655b9/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=bd675c8a8bdd3fda239bee3d3f31acd8679655b9", "patch": "@@ -2,6 +2,7 @@\n \n use crate::db::AstDatabase;\n use base_db::{CrateId, ProcMacroId};\n+use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n@@ -43,6 +44,9 @@ impl ProcMacroExpander {\n                     .clone()\n                     .ok_or_else(|| err!(\"No derive macro found.\"))?;\n \n+                let tt = remove_derive_attrs(tt)\n+                    .ok_or_else(|| err!(\"Fail to remove derive for custom derive\"))?;\n+\n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n \n@@ -52,3 +56,101 @@ impl ProcMacroExpander {\n         }\n     }\n }\n+\n+fn eat_punct(cursor: &mut Cursor, c: char) -> bool {\n+    if let Some(tt::buffer::TokenTreeRef::Leaf(tt::Leaf::Punct(punct), _)) = cursor.token_tree() {\n+        if punct.char == c {\n+            *cursor = cursor.bump();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn eat_subtree(cursor: &mut Cursor, kind: tt::DelimiterKind) -> bool {\n+    if let Some(tt::buffer::TokenTreeRef::Subtree(subtree, _)) = cursor.token_tree() {\n+        if Some(kind) == subtree.delimiter_kind() {\n+            *cursor = cursor.bump_subtree();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn eat_ident(cursor: &mut Cursor, t: &str) -> bool {\n+    if let Some(tt::buffer::TokenTreeRef::Leaf(tt::Leaf::Ident(ident), _)) = cursor.token_tree() {\n+        if t == ident.text.as_str() {\n+            *cursor = cursor.bump();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn remove_derive_attrs(tt: &tt::Subtree) -> Option<tt::Subtree> {\n+    let buffer = TokenBuffer::from_tokens(&tt.token_trees);\n+    let mut p = buffer.begin();\n+    let mut result = tt::Subtree::default();\n+\n+    while !p.eof() {\n+        let curr = p;\n+\n+        if eat_punct(&mut p, '#') {\n+            eat_punct(&mut p, '!');\n+            let parent = p;\n+            if eat_subtree(&mut p, tt::DelimiterKind::Bracket) {\n+                if eat_ident(&mut p, \"derive\") {\n+                    p = parent.bump();\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        result.token_trees.push(curr.token_tree()?.cloned());\n+        p = curr.bump();\n+    }\n+\n+    Some(result)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use test_utils::assert_eq_text;\n+\n+    #[test]\n+    fn test_remove_derive_attrs() {\n+        let tt = mbe::parse_to_token_tree(\n+            r#\"\n+    #[allow(unused)]\n+    #[derive(Copy)]\n+    #[derive(Hello)]\n+    struct A {\n+        bar: u32\n+    }\n+\"#,\n+        )\n+        .unwrap()\n+        .0;\n+        let result = format!(\"{:#?}\", remove_derive_attrs(&tt).unwrap());\n+\n+        assert_eq_text!(\n+            r#\"\n+SUBTREE $\n+  PUNCH   # [alone] 0\n+  SUBTREE [] 1\n+    IDENT   allow 2\n+    SUBTREE () 3\n+      IDENT   unused 4\n+  IDENT   struct 15\n+  IDENT   A 16\n+  SUBTREE {} 17\n+    IDENT   bar 18\n+    PUNCH   : [alone] 19\n+    IDENT   u32 20\n+\"#\n+            .trim(),\n+            &result\n+        );\n+    }\n+}"}]}