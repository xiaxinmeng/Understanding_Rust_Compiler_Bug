{"sha": "c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OTczNWQ3YzQ4NzcwZjIxZDJmZDVlMWU5MmE0MWU3OGQxNTA2ZDI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-20T15:43:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-20T15:43:37Z"}, "message": "Remove last uses of fold from trans.rs", "tree": {"sha": "fedd507b97d510c968cfbb0c79c8fafa58d955a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fedd507b97d510c968cfbb0c79c8fafa58d955a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "html_url": "https://github.com/rust-lang/rust/commit/c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c49735d7c48770f21d2fd5e1e92a41e78d1506d2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c470cd2d662dfff155503813d1139799c60bdd04", "url": "https://api.github.com/repos/rust-lang/rust/commits/c470cd2d662dfff155503813d1139799c60bdd04", "html_url": "https://github.com/rust-lang/rust/commit/c470cd2d662dfff155503813d1139799c60bdd04"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "8352853111d534a149f809debcb1e5a37115315a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c49735d7c48770f21d2fd5e1e92a41e78d1506d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49735d7c48770f21d2fd5e1e92a41e78d1506d2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c49735d7c48770f21d2fd5e1e92a41e78d1506d2", "patch": "@@ -6586,6 +6586,10 @@ fn decl_native_fn_and_pair(@crate_ctxt ccx,\n }\n \n type walk_ctxt = rec(mutable vec[str] path);\n+fn new_walk_ctxt() -> @walk_ctxt {\n+    let vec[str] path = vec();\n+    ret @rec(mutable path=path);\n+}\n \n fn enter_item(@walk_ctxt cx, @ast.item item) {\n     alt (item.node) {\n@@ -6679,9 +6683,7 @@ fn collect_item_2(@crate_ctxt ccx, @walk_ctxt wcx, @ast.item i) {\n }\n \n fn collect_items(@crate_ctxt ccx, @ast.crate crate) {\n-    let vec[str] path = vec();\n-    auto wcx = @rec(mutable path=path);\n-\n+    auto wcx = new_walk_ctxt();\n     auto visitor0 = walk.default_visitor();\n     auto visitor1 = rec(visit_native_item_pre = \n                           bind collect_native_item(ccx, wcx, _),\n@@ -6695,14 +6697,14 @@ fn collect_items(@crate_ctxt ccx, @ast.crate crate) {\n     walk.walk_crate(visitor2, *crate);\n }\n \n-fn collect_tag_ctor(&@local_ctxt cx, @ast.item i) -> @local_ctxt {\n+fn collect_tag_ctor(@crate_ctxt ccx, @walk_ctxt wcx, @ast.item i) {\n+    enter_item(wcx, i);\n \n     alt (i.node) {\n-\n         case (ast.item_tag(_, ?variants, ?tps, _, _)) {\n             for (ast.variant variant in variants) {\n                 if (_vec.len[ast.variant_arg](variant.node.args) != 0u) {\n-                    decl_fn_and_pair(cx.ccx, cx.path + vec(variant.node.name),\n+                    decl_fn_and_pair(ccx, wcx.path + vec(variant.node.name),\n                                      \"tag\", tps, variant.node.ann,\n                                      variant.node.id);\n                 }\n@@ -6711,23 +6713,21 @@ fn collect_tag_ctor(&@local_ctxt cx, @ast.item i) -> @local_ctxt {\n \n         case (_) { /* fall through */ }\n     }\n-    ret cx;\n }\n \n-fn collect_tag_ctors(@local_ctxt cx, @ast.crate crate) {\n-\n-    let fold.ast_fold[@local_ctxt] fld =\n-        fold.new_identity_fold[@local_ctxt]();\n-\n-    fld = @rec( update_env_for_item = bind collect_tag_ctor(_,_)\n-                with *fld );\n-\n-    fold.fold_crate[@local_ctxt](cx, fld, crate);\n+fn collect_tag_ctors(@crate_ctxt ccx, @ast.crate crate) {\n+    auto wcx = new_walk_ctxt();\n+    auto visitor = rec(visit_item_pre = bind collect_tag_ctor(ccx, wcx, _),\n+                       visit_item_post = bind leave_item(wcx, _)\n+                       with walk.default_visitor());\n+    walk.walk_crate(visitor, *crate);\n }\n \n // The constant translation pass.\n \n-fn trans_constant(&@local_ctxt cx, @ast.item it) -> @local_ctxt {\n+fn trans_constant(@crate_ctxt ccx, @walk_ctxt wcx, @ast.item it) {\n+    enter_item(wcx, it);\n+    \n     alt (it.node) {\n         case (ast.item_tag(?ident, ?variants, _, ?tag_id, _)) {\n             auto i = 0u;\n@@ -6737,17 +6737,17 @@ fn trans_constant(&@local_ctxt cx, @ast.item it) -> @local_ctxt {\n \n                 auto discrim_val = C_int(i as int);\n \n-                auto s = mangle_name_by_seq(cx.ccx, cx.path,\n+                auto s = mangle_name_by_seq(ccx, wcx.path,\n                                             #fmt(\"_rust_tag_discrim_%s_%u\",\n                                                  ident, i));\n-                auto discrim_gvar = llvm.LLVMAddGlobal(cx.ccx.llmod, T_int(),\n+                auto discrim_gvar = llvm.LLVMAddGlobal(ccx.llmod, T_int(),\n                                                        _str.buf(s));\n \n                 llvm.LLVMSetInitializer(discrim_gvar, discrim_val);\n                 llvm.LLVMSetGlobalConstant(discrim_gvar, True);\n \n-                cx.ccx.discrims.insert(variant.node.id, discrim_gvar);\n-                cx.ccx.discrim_symbols.insert(variant.node.id, s);\n+                ccx.discrims.insert(variant.node.id, discrim_gvar);\n+                ccx.discrim_symbols.insert(variant.node.id, s);\n \n                 i += 1u;\n             }\n@@ -6757,27 +6757,22 @@ fn trans_constant(&@local_ctxt cx, @ast.item it) -> @local_ctxt {\n             // FIXME: The whole expr-translation system needs cloning to deal\n             // with consts.\n             auto v = C_int(1);\n-            cx.ccx.item_ids.insert(cid, v);\n-            auto s = mangle_name_by_type(cx.ccx, cx.path + vec(name),\n-                                         node_ann_type(cx.ccx, ann));\n-            cx.ccx.item_symbols.insert(cid, s);\n+            ccx.item_ids.insert(cid, v);\n+            auto s = mangle_name_by_type(ccx, wcx.path + vec(name),\n+                                         node_ann_type(ccx, ann));\n+            ccx.item_symbols.insert(cid, s);\n         }\n \n-        case (_) {\n-            // empty\n-        }\n+        case (_) {}\n     }\n-\n-    ret cx;\n }\n \n-fn trans_constants(@local_ctxt cx, @ast.crate crate) {\n-    let fold.ast_fold[@local_ctxt] fld =\n-        fold.new_identity_fold[@local_ctxt]();\n-\n-    fld = @rec(update_env_for_item = bind trans_constant(_,_) with *fld);\n-\n-    fold.fold_crate[@local_ctxt](cx, fld, crate);\n+fn trans_constants(@crate_ctxt ccx, @ast.crate crate) {\n+    auto wcx = new_walk_ctxt();\n+    auto visitor = rec(visit_item_pre = bind trans_constant(ccx, wcx, _),\n+                       visit_item_post = bind leave_item(wcx, _)\n+                       with walk.default_visitor());\n+    walk.walk_crate(visitor, *crate);\n }\n \n \n@@ -7517,8 +7512,8 @@ fn trans_crate(session.session sess, @ast.crate crate,\n     create_typedefs(ccx);\n \n     collect_items(ccx, crate);\n-    collect_tag_ctors(cx, crate);\n-    trans_constants(cx, crate);\n+    collect_tag_ctors(ccx, crate);\n+    trans_constants(ccx, crate);\n     trans_mod(cx, crate.node.module);\n     trans_vec_append_glue(cx);\n     auto crate_map = create_crate_map(ccx);"}]}