{"sha": "a320149dcce2eb27d3014113cbf87aacc04d24eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjAxNDlkY2NlMmViMjdkMzAxNDExM2NiZjg3YWFjYzA0ZDI0ZWI=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-01-10T09:13:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-19T13:22:17Z"}, "message": "ugly hack to convert BadHashMapKey error to general fmt::Error", "tree": {"sha": "30d6e774c468374501ce1dda0134570b11724fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d6e774c468374501ce1dda0134570b11724fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a320149dcce2eb27d3014113cbf87aacc04d24eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a320149dcce2eb27d3014113cbf87aacc04d24eb", "html_url": "https://github.com/rust-lang/rust/commit/a320149dcce2eb27d3014113cbf87aacc04d24eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a320149dcce2eb27d3014113cbf87aacc04d24eb/comments", "author": null, "committer": null, "parents": [{"sha": "0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "url": "https://api.github.com/repos/rust-lang/rust/commits/0478a8c1d73ab936bcfb762ce8f31ab9f642f462", "html_url": "https://github.com/rust-lang/rust/commit/0478a8c1d73ab936bcfb762ce8f31ab9f642f462"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "77e1ebc5ef342ce2ff6707a5ed869a73701dc367", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a320149dcce2eb27d3014113cbf87aacc04d24eb/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a320149dcce2eb27d3014113cbf87aacc04d24eb/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=a320149dcce2eb27d3014113cbf87aacc04d24eb", "patch": "@@ -2512,7 +2512,10 @@ struct FormatShim<'a, 'b: 'a> {\n \n impl<'a, 'b> fmt::Writer for FormatShim<'a, 'b> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n-        self.inner.write_str(s)\n+        match self.inner.write_str(s) {\n+            Ok(_) => Ok(()),\n+            Err(_) => Err(fmt::Error)\n+        }\n     }\n }\n \n@@ -2521,7 +2524,10 @@ impl fmt::String for Json {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n         let mut encoder = Encoder::new(&mut shim);\n-        self.encode(&mut encoder)\n+        match self.encode(&mut encoder) {\n+            Ok(_) => Ok(()),\n+            Err(_) => Err(fmt::Error)\n+        }\n     }\n }\n \n@@ -2530,7 +2536,10 @@ impl<'a> fmt::String for PrettyJson<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n         let mut encoder = PrettyEncoder::new(&mut shim);\n-        self.inner.encode(&mut encoder)\n+        match self.inner.encode(&mut encoder) {\n+            Ok(_) => Ok(()),\n+            Err(_) => Err(fmt::Error)\n+        }\n     }\n }\n \n@@ -2539,7 +2548,10 @@ impl<'a, T: Encodable> fmt::String for AsJson<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut shim = FormatShim { inner: f };\n         let mut encoder = Encoder::new(&mut shim);\n-        self.inner.encode(&mut encoder)\n+        match self.inner.encode(&mut encoder) {\n+            Ok(_) => Ok(()),\n+            Err(_) => Err(fmt::Error)\n+        }\n     }\n }\n \n@@ -2560,7 +2572,10 @@ impl<'a, T: Encodable> fmt::String for AsPrettyJson<'a, T> {\n             Some(n) => encoder.set_indent(n),\n             None => {}\n         }\n-        self.inner.encode(&mut encoder)\n+        match self.inner.encode(&mut encoder) {\n+            Ok(_) => Ok(()),\n+            Err(_) => Err(fmt::Error)\n+        }\n     }\n }\n "}]}