{"sha": "a7b1d31a9f358747221e8eb9986bb8303d5d6586", "node_id": "C_kwDOAAsO6NoAKGE3YjFkMzFhOWYzNTg3NDcyMjFlOGViOTk4NmJiODMwM2Q1ZDY1ODY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-01T06:32:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T08:36:39Z"}, "message": "Don't repeat `AssertParamIs{Clone,Eq}` assertions.\n\nIt's common to see repeated assertions like this in derived `clone` and\n`eq` methods:\n```\nlet _: ::core::clone::AssertParamIsClone<u32>;\nlet _: ::core::clone::AssertParamIsClone<u32>;\n```\nThis commit avoids them.", "tree": {"sha": "800969fe38a3592be6582cc24567496b42a92a85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/800969fe38a3592be6582cc24567496b42a92a85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b1d31a9f358747221e8eb9986bb8303d5d6586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b1d31a9f358747221e8eb9986bb8303d5d6586", "html_url": "https://github.com/rust-lang/rust/commit/a7b1d31a9f358747221e8eb9986bb8303d5d6586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b1d31a9f358747221e8eb9986bb8303d5d6586/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5762d2385ebdd735b110ab82e80eed6efa7d7c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/5762d2385ebdd735b110ab82e80eed6efa7d7c55", "html_url": "https://github.com/rust-lang/rust/commit/5762d2385ebdd735b110ab82e80eed6efa7d7c55"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "bb0b8121cac224f7eea7d63bc1b33e59c2ce1805", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7b1d31a9f358747221e8eb9986bb8303d5d6586/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b1d31a9f358747221e8eb9986bb8303d5d6586/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a7b1d31a9f358747221e8eb9986bb8303d5d6586", "patch": "@@ -2036,6 +2036,14 @@ impl TyKind {\n     pub fn is_unit(&self) -> bool {\n         matches!(self, TyKind::Tup(tys) if tys.is_empty())\n     }\n+\n+    pub fn is_simple_path(&self) -> Option<Symbol> {\n+        if let TyKind::Path(None, Path { segments, .. }) = &self && segments.len() == 1 {\n+            Some(segments[0].ident.name)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n /// Syntax used to declare a trait object."}, {"sha": "0a55d4e0ce0a638287fea46d604df06727104de5", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a7b1d31a9f358747221e8eb9986bb8303d5d6586/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b1d31a9f358747221e8eb9986bb8303d5d6586/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=a7b1d31a9f358747221e8eb9986bb8303d5d6586", "patch": "@@ -3,6 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_ast::{self as ast, Generics, ItemKind, MetaItem, VariantData};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n@@ -99,20 +100,29 @@ fn cs_clone_simple(\n     is_union: bool,\n ) -> BlockOrExpr {\n     let mut stmts = Vec::new();\n+    let mut seen_type_names = FxHashSet::default();\n     let mut process_variant = |variant: &VariantData| {\n         for field in variant.fields() {\n-            // let _: AssertParamIsClone<FieldTy>;\n-            super::assert_ty_bounds(\n-                cx,\n-                &mut stmts,\n-                field.ty.clone(),\n-                field.span,\n-                &[sym::clone, sym::AssertParamIsClone],\n-            );\n+            // This basic redundancy checking only prevents duplication of\n+            // assertions like `AssertParamIsClone<Foo>` where the type is a\n+            // simple name. That's enough to get a lot of cases, though.\n+            if let Some(name) = field.ty.kind.is_simple_path() && !seen_type_names.insert(name) {\n+                // Already produced an assertion for this type.\n+            } else {\n+                // let _: AssertParamIsClone<FieldTy>;\n+                super::assert_ty_bounds(\n+                    cx,\n+                    &mut stmts,\n+                    field.ty.clone(),\n+                    field.span,\n+                    &[sym::clone, sym::AssertParamIsClone],\n+                );\n+            }\n         }\n     };\n \n     if is_union {\n+        // Just a single assertion for unions, that the union impls `Copy`.\n         // let _: AssertParamIsCopy<Self>;\n         let self_ty = cx.ty_path(cx.path_ident(trait_span, Ident::with_dummy_span(kw::SelfUpper)));\n         super::assert_ty_bounds("}, {"sha": "c1a2ebcc14601e5d384de4a2ad54be2395f3c590", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7b1d31a9f358747221e8eb9986bb8303d5d6586/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b1d31a9f358747221e8eb9986bb8303d5d6586/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=a7b1d31a9f358747221e8eb9986bb8303d5d6586", "patch": "@@ -3,6 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_ast::{self as ast, MetaItem};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -53,16 +54,24 @@ fn cs_total_eq_assert(\n     substr: &Substructure<'_>,\n ) -> BlockOrExpr {\n     let mut stmts = Vec::new();\n+    let mut seen_type_names = FxHashSet::default();\n     let mut process_variant = |variant: &ast::VariantData| {\n         for field in variant.fields() {\n-            // let _: AssertParamIsEq<FieldTy>;\n-            super::assert_ty_bounds(\n-                cx,\n-                &mut stmts,\n-                field.ty.clone(),\n-                field.span,\n-                &[sym::cmp, sym::AssertParamIsEq],\n-            );\n+            // This basic redundancy checking only prevents duplication of\n+            // assertions like `AssertParamIsEq<Foo>` where the type is a\n+            // simple name. That's enough to get a lot of cases, though.\n+            if let Some(name) = field.ty.kind.is_simple_path() && !seen_type_names.insert(name) {\n+                // Already produced an assertion for this type.\n+            } else {\n+                // let _: AssertParamIsEq<FieldTy>;\n+                super::assert_ty_bounds(\n+                    cx,\n+                    &mut stmts,\n+                    field.ty.clone(),\n+                    field.span,\n+                    &[sym::cmp, sym::AssertParamIsEq],\n+                );\n+            }\n         }\n     };\n "}, {"sha": "7713627be5e6a47633c117aeabf45f28720fdb6f", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7b1d31a9f358747221e8eb9986bb8303d5d6586/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a7b1d31a9f358747221e8eb9986bb8303d5d6586/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=a7b1d31a9f358747221e8eb9986bb8303d5d6586", "patch": "@@ -95,7 +95,6 @@ struct Point {\n impl ::core::clone::Clone for Point {\n     #[inline]\n     fn clone(&self) -> Point {\n-        let _: ::core::clone::AssertParamIsClone<u32>;\n         let _: ::core::clone::AssertParamIsClone<u32>;\n         *self\n     }\n@@ -152,7 +151,6 @@ impl ::core::cmp::Eq for Point {\n     #[no_coverage]\n     fn assert_receiver_is_total_eq(&self) -> () {\n         let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n     }\n }\n #[automatically_derived]\n@@ -291,13 +289,6 @@ impl ::core::cmp::Eq for Big {\n     #[no_coverage]\n     fn assert_receiver_is_total_eq(&self) -> () {\n         let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n     }\n }\n #[automatically_derived]\n@@ -773,8 +764,6 @@ enum Mixed {\n impl ::core::clone::Clone for Mixed {\n     #[inline]\n     fn clone(&self) -> Mixed {\n-        let _: ::core::clone::AssertParamIsClone<u32>;\n-        let _: ::core::clone::AssertParamIsClone<u32>;\n         let _: ::core::clone::AssertParamIsClone<u32>;\n         *self\n     }\n@@ -871,8 +860,6 @@ impl ::core::cmp::Eq for Mixed {\n     #[no_coverage]\n     fn assert_receiver_is_total_eq(&self) -> () {\n         let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n-        let _: ::core::cmp::AssertParamIsEq<u32>;\n     }\n }\n #[automatically_derived]"}]}