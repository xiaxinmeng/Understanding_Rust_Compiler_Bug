{"sha": "218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOGQ5NmVkNmI3ZDU3YmQ1ZDhjMzhmNjQ5YTIyYjhkNGFjMzFjMjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-07T00:45:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-07T00:45:15Z"}, "message": "Rollup merge of #70563 - GuillaumeGomez:page-hash-handling, r=ollie27,kinnison\n\n[rustdoc] Page hash handling\n\nFixes https://github.com/rust-lang/rust/issues/70476\n\nA good example to see the change is to use this URL: https://doc.rust-lang.org/nightly/std/string/struct.String.html#from_iter.v-3\n\nAfter the change, it actually goes to the target element (and change the page hash to something more clear for the users).\n\nr? @kinnison\n\ncc @ollie27", "tree": {"sha": "6d2d88a0dba50110857a25a35ae95e57a5c73b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2d88a0dba50110857a25a35ae95e57a5c73b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfA8WbCRBK7hj4Ov3rIwAAdHIIABZ1bGLdAc5y4oi2h9uP7Bry\ngW6vy+4F2uE+vsPX/LIStU+st9XPF8imB5brJAYJQCTNmR2ARhfGOD2ify78FUmC\nHx7grrAyulxObPFmR5memYtX3Nt8SYm4ch66t3vjI5suSifP+0OsKFDEf7k2LMCo\nttYAeAOETJwfMdDIU4uAWmOPmxezbSRPxGbXjQ/kCQ3ZfvatvgQBVR/Qh7xo60cw\n757B5kO4UZdZUeZKbJUrosz70f+muHQS7aExPlpglJbFLqkC5WosaTH9w4xbzte0\nMIpVPtIMl3xPLn9OqOxoy+Mm6bkmXn11a162ezbztWUpexwaMeeKVE444Tqo1VU=\n=H3At\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d2d88a0dba50110857a25a35ae95e57a5c73b08\nparent 0c03aee8b81185d65b5821518661c30ecdb42de5\nparent e955bebcda257d290278b53c1677e7c54e65f134\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594082715 -0700\ncommitter GitHub <noreply@github.com> 1594082715 -0700\n\nRollup merge of #70563 - GuillaumeGomez:page-hash-handling, r=ollie27,kinnison\n\n[rustdoc] Page hash handling\n\nFixes https://github.com/rust-lang/rust/issues/70476\n\nA good example to see the change is to use this URL: https://doc.rust-lang.org/nightly/std/string/struct.String.html#from_iter.v-3\n\nAfter the change, it actually goes to the target element (and change the page hash to something more clear for the users).\n\nr? @kinnison\n\ncc @ollie27\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "html_url": "https://github.com/rust-lang/rust/commit/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c03aee8b81185d65b5821518661c30ecdb42de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c03aee8b81185d65b5821518661c30ecdb42de5", "html_url": "https://github.com/rust-lang/rust/commit/0c03aee8b81185d65b5821518661c30ecdb42de5"}, {"sha": "e955bebcda257d290278b53c1677e7c54e65f134", "url": "https://api.github.com/repos/rust-lang/rust/commits/e955bebcda257d290278b53c1677e7c54e65f134", "html_url": "https://github.com/rust-lang/rust/commit/e955bebcda257d290278b53c1677e7c54e65f134"}], "stats": {"total": 212, "additions": 48, "deletions": 164}, "files": [{"sha": "8c56cf1cb3414bb1508114f63ce389b9a4fddc20", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -13,7 +13,6 @@ fn main() {\n     let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n-    let mut has_unstable = false;\n \n     use std::str::FromStr;\n \n@@ -55,22 +54,10 @@ fn main() {\n         cmd.arg(\"--crate-version\").arg(version);\n     }\n \n-    // Needed to be able to run all rustdoc tests.\n-    if env::var_os(\"RUSTDOC_GENERATE_REDIRECT_PAGES\").is_some() {\n-        // This \"unstable-options\" can be removed when `--generate-redirect-pages` is stabilized\n-        if !has_unstable {\n-            cmd.arg(\"-Z\").arg(\"unstable-options\");\n-        }\n-        cmd.arg(\"--generate-redirect-pages\");\n-        has_unstable = true;\n-    }\n-\n     // Needed to be able to run all rustdoc tests.\n     if let Some(ref x) = env::var_os(\"RUSTDOC_RESOURCE_SUFFIX\") {\n         // This \"unstable-options\" can be removed when `--resource-suffix` is stabilized\n-        if !has_unstable {\n-            cmd.arg(\"-Z\").arg(\"unstable-options\");\n-        }\n+        cmd.arg(\"-Z\").arg(\"unstable-options\");\n         cmd.arg(\"--resource-suffix\").arg(x);\n     }\n "}, {"sha": "ed351354c441d904dc9a52ad3ceab5b7f2f15dd3", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -451,7 +451,6 @@ impl Step for Std {\n                 .arg(\"--markdown-css\")\n                 .arg(\"rust.css\")\n                 .arg(\"--markdown-no-toc\")\n-                .arg(\"--generate-redirect-pages\")\n                 .arg(\"-Z\")\n                 .arg(\"unstable-options\")\n                 .arg(\"--resource-suffix\")"}, {"sha": "14a6f3c89a3c9486560bb7da93af8f33caba8ea0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -242,8 +242,6 @@ pub struct RenderOptions {\n     /// If false, the `select` element to have search filtering by crates on rendered docs\n     /// won't be generated.\n     pub generate_search_filter: bool,\n-    /// Option (disabled by default) to generate files used by RLS and some other tools.\n-    pub generate_redirect_pages: bool,\n     /// Document items that have lower than `pub` visibility.\n     pub document_private: bool,\n     /// Document items that have `doc(hidden)`.\n@@ -528,7 +526,6 @@ impl Options {\n         let static_root_path = matches.opt_str(\"static-root-path\");\n         let generate_search_filter = !matches.opt_present(\"disable-per-crate-search\");\n         let persist_doctests = matches.opt_str(\"persist-doctests\").map(PathBuf::from);\n-        let generate_redirect_pages = matches.opt_present(\"generate-redirect-pages\");\n         let test_builder = matches.opt_str(\"test-builder\").map(PathBuf::from);\n         let codegen_options_strs = matches.opt_strs(\"C\");\n         let debugging_options_strs = matches.opt_strs(\"Z\");\n@@ -592,7 +589,6 @@ impl Options {\n                 markdown_css,\n                 markdown_playground_url,\n                 generate_search_filter,\n-                generate_redirect_pages,\n                 document_private,\n                 document_hidden,\n             },"}, {"sha": "cc78b4682d231a9d6431a818152fdab3ab34e378", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -154,47 +154,10 @@ impl ItemType {\n             ItemType::TraitAlias => \"traitalias\",\n         }\n     }\n-\n-    pub fn name_space(&self) -> &'static str {\n-        match *self {\n-            ItemType::Struct\n-            | ItemType::Union\n-            | ItemType::Enum\n-            | ItemType::Module\n-            | ItemType::Typedef\n-            | ItemType::Trait\n-            | ItemType::Primitive\n-            | ItemType::AssocType\n-            | ItemType::OpaqueTy\n-            | ItemType::TraitAlias\n-            | ItemType::ForeignType => NAMESPACE_TYPE,\n-\n-            ItemType::ExternCrate\n-            | ItemType::Import\n-            | ItemType::Function\n-            | ItemType::Static\n-            | ItemType::Impl\n-            | ItemType::TyMethod\n-            | ItemType::Method\n-            | ItemType::StructField\n-            | ItemType::Variant\n-            | ItemType::Constant\n-            | ItemType::AssocConst => NAMESPACE_VALUE,\n-\n-            ItemType::Macro | ItemType::ProcAttribute | ItemType::ProcDerive => NAMESPACE_MACRO,\n-\n-            ItemType::Keyword => NAMESPACE_KEYWORD,\n-        }\n-    }\n }\n \n impl fmt::Display for ItemType {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.as_str())\n     }\n }\n-\n-pub const NAMESPACE_TYPE: &str = \"t\";\n-pub const NAMESPACE_VALUE: &str = \"v\";\n-pub const NAMESPACE_MACRO: &str = \"m\";\n-pub const NAMESPACE_KEYWORD: &str = \"k\";"}, {"sha": "69e3540ed625be77c49298ce2a26682fc823550d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 50, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -195,8 +195,6 @@ crate struct SharedContext {\n     /// Optional path string to be used to load static files on output pages. If not set, uses\n     /// combinations of `../` to reach the documentation root.\n     pub static_root_path: Option<String>,\n-    /// Option disabled by default to generate files used by RLS and some other tools.\n-    pub generate_redirect_pages: bool,\n     /// The fs handle we are working with.\n     pub fs: DocFS,\n     /// The default edition used to parse doctests.\n@@ -468,7 +466,6 @@ pub fn run(\n         resource_suffix,\n         static_root_path,\n         generate_search_filter,\n-        generate_redirect_pages,\n         document_private,\n         ..\n     } = options;\n@@ -536,7 +533,6 @@ pub fn run(\n         themes,\n         resource_suffix,\n         static_root_path,\n-        generate_redirect_pages,\n         fs: DocFS::new(&errors),\n         edition,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n@@ -1556,14 +1552,6 @@ impl Context {\n                 if !self.render_redirect_pages {\n                     all.append(full_path(self, &item), &item_type);\n                 }\n-                if self.shared.generate_redirect_pages {\n-                    // Redirect from a sane URL using the namespace to Rustdoc's\n-                    // URL for the page.\n-                    let redir_name = format!(\"{}.{}.html\", name, item_type.name_space());\n-                    let redir_dst = self.dst.join(redir_name);\n-                    let v = layout::redirect(file_name);\n-                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n-                }\n                 // If the item is a macro, redirect from the old macro URL (with !)\n                 // to the new one (without).\n                 if item_type == ItemType::Macro {\n@@ -2586,8 +2574,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let name = m.name.as_ref().unwrap();\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(w, \"<h3 id='{id}' class='method'><code id='{ns_id}'>\", id = id, ns_id = ns_id);\n+        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -2972,20 +2959,14 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n                     ItemType::StructField,\n                     field.name.as_ref().unwrap()\n                 ));\n-                let ns_id = cx.derive_id(format!(\n-                    \"{}.{}\",\n-                    field.name.as_ref().unwrap(),\n-                    ItemType::StructField.name_space()\n-                ));\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n                            <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code id=\\\"{ns_id}\\\">{name}: {ty}</code>\\\n+                           <code>{name}: {ty}</code>\\\n                            </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n-                    ns_id = ns_id,\n                     name = field.name.as_ref().unwrap(),\n                     ty = ty.print()\n                 );\n@@ -3103,18 +3084,12 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n         for variant in &e.variants {\n             let id =\n                 cx.derive_id(format!(\"{}.{}\", ItemType::Variant, variant.name.as_ref().unwrap()));\n-            let ns_id = cx.derive_id(format!(\n-                \"{}.{}\",\n-                variant.name.as_ref().unwrap(),\n-                ItemType::Variant.name_space()\n-            ));\n             write!(\n                 w,\n                 \"<div id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                       <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                       <code id='{ns_id}'>{name}\",\n+                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                    <code>{name}\",\n                 id = id,\n-                ns_id = ns_id,\n                 name = variant.name.as_ref().unwrap()\n             );\n             if let clean::VariantItem(ref var) = variant.inner {\n@@ -3155,21 +3130,13 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n                             variant.name.as_ref().unwrap(),\n                             field.name.as_ref().unwrap()\n                         ));\n-                        let ns_id = cx.derive_id(format!(\n-                            \"{}.{}.{}.{}\",\n-                            variant.name.as_ref().unwrap(),\n-                            ItemType::Variant.name_space(),\n-                            field.name.as_ref().unwrap(),\n-                            ItemType::StructField.name_space()\n-                        ));\n                         write!(\n                             w,\n                             \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                   <code id='{ns_id}'>{f}:&nbsp;{t}\\\n+                                   <code>{f}:&nbsp;{t}\\\n                                    </code></span>\",\n                             id = id,\n-                            ns_id = ns_id,\n                             f = field.name.as_ref().unwrap(),\n                             t = ty.print()\n                         );\n@@ -3661,9 +3628,7 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                    write!(w, \"<code id='{}'>\", ns_id);\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -3679,17 +3644,13 @@ fn render_impl(\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n                 render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -3704,9 +3665,7 @@ fn render_impl(\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }"}, {"sha": "69e2bacc21882e3d81fa18f1ca7838ed97ad7d8f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -112,9 +112,11 @@ function defocusSearchBar() {\n     }\n \n     function getPageId() {\n-        var id = document.location.href.split(\"#\")[1];\n-        if (id) {\n-            return id.split(\"?\")[0].split(\"&\")[0];\n+        if (window.location.hash) {\n+            var tmp = window.location.hash.replace(/^#/, \"\");\n+            if (tmp.length > 0) {\n+                return tmp;\n+            }\n         }\n         return null;\n     }\n@@ -2551,6 +2553,13 @@ function defocusSearchBar() {\n \n         onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n         onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+        var pageId = getPageId();\n+\n+        autoCollapse(pageId, getCurrentValue(\"rustdoc-collapse\") === \"true\");\n+\n+        if (pageId !== null) {\n+            expandSection(pageId);\n+        }\n     }());\n \n     function createToggleWrapper(tog) {\n@@ -2686,12 +2695,6 @@ function defocusSearchBar() {\n         hideSidebar();\n     };\n \n-    autoCollapse(getPageId(), getCurrentValue(\"rustdoc-collapse\") === \"true\");\n-\n-    if (window.location.hash && window.location.hash.length > 0) {\n-        expandSection(window.location.hash.replace(/^#/, \"\"));\n-    }\n-\n     if (main) {\n         onEachLazy(main.getElementsByClassName(\"loading-content\"), function(e) {\n             e.remove();"}, {"sha": "8e2dd77cc115542ff779142ea76c9ac7e1b3f577", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -374,13 +374,6 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"PATH\",\n             )\n         }),\n-        unstable(\"generate-redirect-pages\", |o| {\n-            o.optflag(\n-                \"\",\n-                \"generate-redirect-pages\",\n-                \"Generate extra pages to support legacy URLs and tool links\",\n-            )\n-        }),\n         unstable(\"show-coverage\", |o| {\n             o.optflag(\n                 \"\","}, {"sha": "0e6a6c8a5e699fb7ce861fc29ca0964f63de9a54", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -1069,7 +1069,7 @@ fn handle_variant(\n     };\n     let parent_def = Res::Def(DefKind::Enum, parent);\n     let variant = cx.tcx.expect_variant_res(res);\n-    Ok((parent_def, Some(format!(\"{}.v\", variant.ident.name))))\n+    Ok((parent_def, Some(format!(\"variant.{}\", variant.ident.name))))\n }\n \n const PRIMITIVES: &[(&str, Res)] = &["}, {"sha": "2b2bbc6e9d6ae473a24ca68f6b2676fa0428fffa", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -133,7 +133,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::write`], it is not an error to return a\n     /// short write.\n     ///\n-    /// [`File::write`]: ../../../../std/fs/struct.File.html#write.v\n+    /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n     ///\n     /// # Examples\n     ///"}, {"sha": "b479fbaf34613a422121d674b1f88e522c3395ae", "filename": "src/libstd/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -132,7 +132,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::write`], it is not an error to return a\n     /// short write.\n     ///\n-    /// [`File::write`]: ../../../../std/fs/struct.File.html#write.v\n+    /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n     ///\n     /// # Examples\n     ///"}, {"sha": "5f0fdbb322cad0c269bdd715025f42158160792b", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -5,9 +5,7 @@\n // @has assoc_types/trait.Index.html\n pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n-    // @has - '//code[@id=\"Output.t\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n-    // @has - '//code[@id=\"index.v\"]' 'fn index'\n     // @has - '//*[@id=\"tymethod.index\"]//code' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n     // @has - '//*[@id=\"tymethod.index\"]//code//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' \\"}, {"sha": "638de3292becbafb83eee6c48aecd6370b118f2c", "filename": "src/test/rustdoc/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -3,7 +3,7 @@\n pub struct Foo;\n \n impl Foo {\n-    // @has const/struct.Foo.html '//code[@id=\"new.v\"]' 'const unsafe fn new'\n+    // @has const/struct.Foo.html '//*[@id=\"method.new\"]//code' 'const unsafe fn new'\n     pub const unsafe fn new() -> Foo {\n         Foo\n     }"}, {"sha": "e3a166b3d0e5fba8709f14b999b21d904f3443de", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -31,8 +31,8 @@ pub use impl_trait_aux::func4;\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html\n-// @has - '//code[@id=\"method.v\"]' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n-// @!has - '//code[@id=\"method.v\"]' 'where'\n+// @has - '//*[@id=\"method.method\"]//code' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n+// @!has - '//*[@id=\"method.method\"]//code' 'where'\n pub use impl_trait_aux::Foo;\n \n // @has impl_trait/struct.Bar.html"}, {"sha": "81545fec7411bc0654e6bf399f135759f6e5f1e8", "filename": "src/test/rustdoc/intra-link-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-self.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -40,7 +40,7 @@ pub struct MyStruct {\n }\n \n pub enum MyEnum {\n-    // @has foo/enum.MyEnum.html '//a/@href' '../foo/enum.MyEnum.html#EnumVariant.v'\n+    // @has foo/enum.MyEnum.html '//a/@href' '../foo/enum.MyEnum.html#variant.EnumVariant'\n \n     /// [`EnumVariant`]\n     ///"}, {"sha": "c6725f526aa2aada62cb11a9fc1895dd6051bd6b", "filename": "src/test/rustdoc/intra-links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fintra-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fintra-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-links.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -2,7 +2,7 @@\n // @has - '//a/@href' '../intra_links/struct.ThisType.html'\n // @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n // @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#ThisVariant.v'\n+// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'\n // @has - '//a/@href' '../intra_links/trait.ThisTrait.html'\n // @has - '//a/@href' '../intra_links/trait.ThisTrait.html#tymethod.this_associated_method'\n // @has - '//a/@href' '../intra_links/trait.ThisTrait.html#associatedtype.ThisAssociatedType'\n@@ -73,7 +73,7 @@ pub fn SoAmbiguous() {}\n // @has - '//a/@href' '../intra_links/struct.ThisType.html'\n // @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n // @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#ThisVariant.v'\n+// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'\n /// Shortcut links for:\n /// * [`ThisType`]\n /// * [`ThisType::this_method`]"}, {"sha": "9dac49c6413d803ca7906b8b5dc11864a68e5625", "filename": "src/test/rustdoc/issue-19190.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags:-Z unstable-options --generate-redirect-pages\n-\n use std::ops::Deref;\n \n pub struct Foo;\n@@ -15,9 +13,8 @@ impl Deref for Bar {\n     fn deref(&self) -> &Foo { loop {} }\n }\n \n-// @has issue_19190/Bar.t.html\n // @has issue_19190/struct.Bar.html\n-// @has - '//*[@id=\"foo.v\"]' 'fn foo(&self)'\n+// @has - '//*[@id=\"method.foo\"]//code' 'fn foo(&self)'\n // @has - '//*[@id=\"method.foo\"]' 'fn foo(&self)'\n-// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "e53cf6451353f733a6da031e3b447d9bca4996c6", "filename": "src/test/rustdoc/issue-25001.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-25001.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -9,17 +9,14 @@ pub trait Bar {\n \n impl Foo<u8> {\n     // @has - '//*[@id=\"method.pass\"]//code' 'fn pass()'\n-    // @has - '//code[@id=\"pass.v\"]' 'fn pass()'\n     pub fn pass() {}\n }\n impl Foo<u16> {\n     // @has - '//*[@id=\"method.pass-1\"]//code' 'fn pass() -> usize'\n-    // @has - '//code[@id=\"pass.v-1\"]' 'fn pass() -> usize'\n     pub fn pass() -> usize { 42 }\n }\n impl Foo<u32> {\n     // @has - '//*[@id=\"method.pass-2\"]//code' 'fn pass() -> isize'\n-    // @has - '//code[@id=\"pass.v-2\"]' 'fn pass() -> isize'\n     pub fn pass() -> isize { 42 }\n }\n "}, {"sha": "a688ae48d00ce84bbf01b5908c3be9ae8662f5b2", "filename": "src/test/rustdoc/issue-35169-2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -24,17 +24,17 @@ impl DerefMut for Bar {\n }\n \n // @has issue_35169_2/struct.Bar.html\n-// @has - '//*[@id=\"by_ref.v\"]' 'fn by_ref(&self)'\n+// @has - '//*[@id=\"method.by_ref\"]//code' 'fn by_ref(&self)'\n // @has - '//*[@id=\"method.by_ref\"]' 'fn by_ref(&self)'\n-// @has - '//*[@id=\"by_explicit_ref.v\"]' 'fn by_explicit_ref(self: &Foo)'\n+// @has - '//*[@id=\"method.by_explicit_ref\"]//code' 'fn by_explicit_ref(self: &Foo)'\n // @has - '//*[@id=\"method.by_explicit_ref\"]' 'fn by_explicit_ref(self: &Foo)'\n-// @has - '//*[@id=\"by_mut_ref.v\"]' 'fn by_mut_ref(&mut self)'\n+// @has - '//*[@id=\"method.by_mut_ref\"]//code' 'fn by_mut_ref(&mut self)'\n // @has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n-// @has - '//*[@id=\"by_explicit_mut_ref.v\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @has - '//*[@id=\"method.by_explicit_mut_ref\"]//code' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n-// @!has - '//*[@id=\"by_explicit_box.v\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]//code' 'fn by_explicit_box(self: Box<Foo>)'\n // @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n-// @!has - '//*[@id=\"by_explicit_self_box.v\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]//code' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n-// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "4f10c04a616b382f839978f2a148b8e7ae39b77c", "filename": "src/test/rustdoc/issue-35169.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -19,17 +19,17 @@ impl Deref for Bar {\n }\n \n // @has issue_35169/struct.Bar.html\n-// @has - '//*[@id=\"by_ref.v\"]' 'fn by_ref(&self)'\n+// @has - '//*[@id=\"method.by_ref\"]//code' 'fn by_ref(&self)'\n // @has - '//*[@id=\"method.by_ref\"]' 'fn by_ref(&self)'\n-// @has - '//*[@id=\"by_explicit_ref.v\"]' 'fn by_explicit_ref(self: &Foo)'\n+// @has - '//*[@id=\"method.by_explicit_ref\"]//code' 'fn by_explicit_ref(self: &Foo)'\n // @has - '//*[@id=\"method.by_explicit_ref\"]' 'fn by_explicit_ref(self: &Foo)'\n-// @!has - '//*[@id=\"by_mut_ref.v\"]' 'fn by_mut_ref(&mut self)'\n+// @!has - '//*[@id=\"method.by_mut_ref\"]//code' 'fn by_mut_ref(&mut self)'\n // @!has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n-// @!has - '//*[@id=\"by_explicit_mut_ref.v\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @!has - '//*[@id=\"method.by_explicit_mut_ref\"]//code' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @!has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n-// @!has - '//*[@id=\"by_explicit_box.v\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]//code' 'fn by_explicit_box(self: Box<Foo>)'\n // @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n-// @!has - '//*[@id=\"by_explicit_self_box.v\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]//code' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n-// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "532e29bc691c4265249c3b4122999bd36cb0439a", "filename": "src/test/rustdoc/struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstruct-field.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -4,7 +4,7 @@\n \n // @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/struct.Foo.html#structfield.bar\"]' 'Foo::bar'\n // @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/union.Bar.html#structfield.foo\"]' 'Bar::foo'\n-// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/enum.Uniooon.html#X.v\"]' 'Uniooon::X'\n+// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/enum.Uniooon.html#variant.X\"]' 'Uniooon::X'\n \n //! Test with [Foo::bar], [Bar::foo], [Uniooon::X]\n "}, {"sha": "6de198453cd273d2fde91ceb7580d280a630987e", "filename": "src/test/rustdoc/structfields.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fstructfields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25/src%2Ftest%2Frustdoc%2Fstructfields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstructfields.rs?ref=218d96ed6b7d57bd5d8c38f649a22b8d4ac31c25", "patch": "@@ -1,7 +1,3 @@\n-// compile-flags:-Z unstable-options --generate-redirect-pages\n-\n-// @has structfields/Foo.t.html\n-// @has - struct.Foo.html\n // @has structfields/struct.Foo.html\n pub struct Foo {\n     // @has - //pre \"pub a: ()\"\n@@ -16,17 +12,13 @@ pub struct Foo {\n     pub d: usize,\n }\n \n-// @has structfields/Bar.t.html\n-// @has - struct.Bar.html\n // @has structfields/struct.Bar.html\n pub struct Bar {\n     // @has - //pre \"pub a: ()\"\n     pub a: (),\n     // @!has - //pre \"// some fields omitted\"\n }\n \n-// @has structfields/Qux.t.html\n-// @has - enum.Qux.html\n // @has structfields/enum.Qux.html\n pub enum Qux {\n     Quz {"}]}