{"sha": "4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNWI0ODA3YTViNjIwNjI3Y2Y2ZTc4MjUyNGZiZTZmYzE0NjNjMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-26T14:32:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-26T14:32:14Z"}, "message": "auto merge of #7297 : huonw/rust/strip-expand-strip, r=cmr\n\nThis allows macros to both be conditionally defined, and expand\r\nto items with #[cfg]'s.\r\n\r\nThis seems to have a performance improvement, e.g. for `std`:\r\n\r\n```\r\n# Before \r\ntime: 1.660 s   expansion\r\ntime: 0.125 s   configuration\r\n# After\r\ntime: 0.080 s   configuration 1\r\ntime: 1.127 s   expansion\r\ntime: 0.132 s   configuration 2\r\n```\r\n\r\nAnd for `extra`:\r\n\r\n```\r\n# Before\r\ntime: 0.593 s   expansion\r\ntime: 0.062 s   configuration\r\n# After\r\ntime: 0.047 s   configuration 1\r\ntime: 0.147 s   expansion\r\ntime: 0.058 s   configuration 2\r\n```\r\n\r\n(This seems a little peculiar, but it is possibly because the expansion AST traversal is very slow, so removing as much as possible as early as possible has big benefits.)", "tree": {"sha": "f959815068602829c513a55c32093e7cd8bb8b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f959815068602829c513a55c32093e7cd8bb8b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "html_url": "https://github.com/rust-lang/rust/commit/4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a30ab764e10232d8e9c1f9282c33b65ca9ef7daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a30ab764e10232d8e9c1f9282c33b65ca9ef7daf", "html_url": "https://github.com/rust-lang/rust/commit/a30ab764e10232d8e9c1f9282c33b65ca9ef7daf"}, {"sha": "73e3dbf9c082659d9f7aa9281ef4af4080ed019d", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e3dbf9c082659d9f7aa9281ef4af4080ed019d", "html_url": "https://github.com/rust-lang/rust/commit/73e3dbf9c082659d9f7aa9281ef4af4080ed019d"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "f6b05711c13db404cd9a1cda03cac84d43f9ca57", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "patch": "@@ -188,11 +188,22 @@ pub fn compile_rest(sess: Session,\n         *sess.building_library = session::building_library(\n             sess.opts.crate_type, crate_opt.unwrap(), sess.opts.test);\n \n+        // strip before expansion to allow macros to depend on\n+        // configuration variables e.g/ in\n+        //\n+        //   #[macro_escape] #[cfg(foo)]\n+        //   mod bar { macro_rules! baz!(() => {{}}) }\n+        //\n+        // baz! should not use this definition unless foo is enabled.\n+        crate_opt = Some(time(time_passes, ~\"configuration 1\", ||\n+                     front::config::strip_unconfigured_items(crate_opt.unwrap())));\n+\n         crate_opt = Some(time(time_passes, ~\"expansion\", ||\n                      syntax::ext::expand::expand_crate(sess.parse_sess, copy cfg,\n                                                        crate_opt.unwrap())));\n \n-        crate_opt = Some(time(time_passes, ~\"configuration\", ||\n+        // strip again, in case expansion added anything with a #[cfg].\n+        crate_opt = Some(time(time_passes, ~\"configuration 2\", ||\n                      front::config::strip_unconfigured_items(crate_opt.unwrap())));\n \n         crate_opt = Some(time(time_passes, ~\"maybe building test harness\", ||"}, {"sha": "8dfb7190c218d99bd918723afb73c766c398f278", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast compile-flags directive doesn't work for check-fast\n+// compile-flags: --cfg foo\n+\n+// check that cfg correctly chooses between the macro impls (see also\n+// cfg-macros-notfoo.rs)\n+\n+#[cfg(foo)]\n+#[macro_escape]\n+mod foo {\n+    macro_rules! bar {\n+        () => { true }\n+    }\n+}\n+\n+#[cfg(not(foo))]\n+#[macro_escape]\n+mod foo {\n+    macro_rules! bar {\n+        () => { false }\n+    }\n+}\n+\n+fn main() {\n+    assert!(bar!())\n+}"}, {"sha": "8ede6eff2dd530b0d8c71c9867532f1777149ba2", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5b4807a5b620627cf6e782524fbe6fc1463c2d/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast compile-flags directive doesn't work for check-fast\n+// compile-flags:\n+\n+// check that cfg correctly chooses between the macro impls (see also\n+// cfg-macros-foo.rs)\n+\n+#[cfg(foo)]\n+#[macro_escape]\n+mod foo {\n+    macro_rules! bar {\n+        () => { true }\n+    }\n+}\n+\n+#[cfg(not(foo))]\n+#[macro_escape]\n+mod foo {\n+    macro_rules! bar {\n+        () => { false }\n+    }\n+}\n+\n+fn main() {\n+    assert!(!bar!())\n+}"}]}