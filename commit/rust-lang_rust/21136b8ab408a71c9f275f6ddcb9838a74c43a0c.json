{"sha": "21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMTM2YjhhYjQwOGE3MWM5ZjI3NWY2ZGRjYjk4MzhhNzRjNDNhMGM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-17T15:04:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:46Z"}, "message": "Rename ParenthesizedArgData to ParenthesisedArgs", "tree": {"sha": "814713e7956639e2ba573f73c98c2144318f925e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/814713e7956639e2ba573f73c98c2144318f925e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "html_url": "https://github.com/rust-lang/rust/commit/21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95ce05c586b8d8c97238ca4bedc5b06909bb7090", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ce05c586b8d8c97238ca4bedc5b06909bb7090", "html_url": "https://github.com/rust-lang/rust/commit/95ce05c586b8d8c97238ca4bedc5b06909bb7090"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4e9bf8047e9e8b30e1b21a353c5d989dcba5df1c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "patch": "@@ -1747,7 +1747,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_parenthesized_parameter_data(\n         &mut self,\n-        data: &ParenthesizedArgData,\n+        data: &ParenthesisedArgs,\n     ) -> (hir::GenericArgs, bool) {\n         // Switch to `PassThrough` mode for anonymous lifetimes: this\n         // means that we permit things like `&Ref<T>`, where `Ref` has\n@@ -1758,7 +1758,7 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::PassThrough,\n             |this| {\n                 const DISALLOWED: ImplTraitContext = ImplTraitContext::Disallowed;\n-                let &ParenthesizedArgData { ref inputs, ref output, span } = data;\n+                let &ParenthesisedArgs { ref inputs, ref output, span } = data;\n                 let inputs = inputs.iter().map(|ty| this.lower_ty(ty, DISALLOWED)).collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n                     let LoweredNodeId { node_id, hir_id } = this.next_id();"}, {"sha": "c6de2c4da39cfb59238af3da3e5cd89069f0c09a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "patch": "@@ -146,7 +146,7 @@ pub enum GenericArgs {\n     /// The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`\n     AngleBracketed(AngleBracketedArgs),\n     /// The `(A,B)` and `C` in `Foo(A,B) -> C`\n-    Parenthesized(ParenthesizedArgData),\n+    Parenthesized(ParenthesisedArgs),\n }\n \n impl GenericArgs {\n@@ -183,15 +183,15 @@ impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {\n     }\n }\n \n-impl Into<Option<P<GenericArgs>>> for ParenthesizedArgData {\n+impl Into<Option<P<GenericArgs>>> for ParenthesisedArgs {\n     fn into(self) -> Option<P<GenericArgs>> {\n         Some(P(GenericArgs::Parenthesized(self)))\n     }\n }\n \n /// A path like `Foo(A,B) -> C`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct ParenthesizedArgData {\n+pub struct ParenthesisedArgs {\n     /// Overall span\n     pub span: Span,\n "}, {"sha": "93248fe3bfab0a0ac8971755f3fa73314f0c7c5b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "patch": "@@ -193,8 +193,8 @@ pub trait Folder : Sized {\n         noop_fold_angle_bracketed_parameter_data(p, self)\n     }\n \n-    fn fold_parenthesized_parameter_data(&mut self, p: ParenthesizedArgData)\n-                                         -> ParenthesizedArgData\n+    fn fold_parenthesized_parameter_data(&mut self, p: ParenthesisedArgs)\n+                                         -> ParenthesisedArgs\n     {\n         noop_fold_parenthesized_parameter_data(p, self)\n     }\n@@ -483,12 +483,12 @@ pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedA\n     }\n }\n \n-pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedArgData,\n+pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesisedArgs,\n                                                          fld: &mut T)\n-                                                         -> ParenthesizedArgData\n+                                                         -> ParenthesisedArgs\n {\n-    let ParenthesizedArgData { inputs, output, span } = data;\n-    ParenthesizedArgData {\n+    let ParenthesisedArgs { inputs, output, span } = data;\n+    ParenthesisedArgs {\n         inputs: inputs.move_map(|ty| fld.fold_ty(ty)),\n         output: output.map(|ty| fld.fold_ty(ty)),\n         span: fld.new_span(span)"}, {"sha": "6f78ae9ebca5dd0c2d7f22d1f7c2272ce945b4cb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21136b8ab408a71c9f275f6ddcb9838a74c43a0c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc_target::spec::abi::{self, Abi};\n-use ast::{AngleBracketedArgs, ParenthesizedArgData, AttrStyle, BareFnTy};\n+use ast::{AngleBracketedArgs, ParenthesisedArgs, AttrStyle, BareFnTy};\n use ast::{GenericBound, TraitBoundModifier};\n use ast::Unsafety;\n use ast::{Mod, AnonConst, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n@@ -1988,7 +1988,7 @@ impl<'a> Parser<'a> {\n                     None\n                 };\n                 let span = lo.to(self.prev_span);\n-                ParenthesizedArgData { inputs, output, span }.into()\n+                ParenthesisedArgs { inputs, output, span }.into()\n             };\n \n             PathSegment { ident, args }"}]}