{"sha": "1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "node_id": "C_kwDOAAsO6NoAKDFjNDIxOTljOGY2MmE0YjRkZjZjNzFhMDQ3YjI4ZDFjYmIwNzVjN2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T13:49:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T13:49:38Z"}, "message": "Rollup merge of #91566 - cbeuw:remap-dwo-name, r=davidtwco\n\nApply path remapping to DW_AT_GNU_dwo_name when producing split DWARF\n\n`--remap-path-prefix` doesn't apply to paths to `.o` (in case of packed) or `.dwo` (in case of unpacked) files in `DW_AT_GNU_dwo_name`. GCC also has this bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91888", "tree": {"sha": "caf29580777bb9efb0c9200a8ab92029cd682555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf29580777bb9efb0c9200a8ab92029cd682555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvebzCRBK7hj4Ov3rIwAAvAIIAH/qstk3sbjLliCtp2JLyk+K\nLlc7+2NV5Ny+BAwZ5COCaNR/daJYVoRiRomJRP2XIDuvSKnhDeWuANCAhqmbBeUn\nk9dPd93mvw0+YyXbgQrF4LQJpVgo7E5s/o3GKDUUBEfYL6v4Z7Phyd413ZYhfmQp\nwdK9Efnnbg9JECpXDEq5UeEhjHKsfQh1DiVTpfQRSFFrNOAhvxN314IpPVuekFUr\ndlhOuOAlPPlryBS9W/P6bk9OGar4D/hJlFqHi3XewnfxKzLb3TNs84SulDZ3Q0I2\n22L0Kw/3l6dbYBCRWiE6esEAvIvB+RS+WFWZnb71b2P0QeLzZXBbtLPSqZzpwmg=\n=phrx\n-----END PGP SIGNATURE-----\n", "payload": "tree caf29580777bb9efb0c9200a8ab92029cd682555\nparent d3f300477b89e70dd42379ba53c0e8ff74e9c694\nparent 5e481d07d2f962cda0bdb76a1e6c19d99c1be847\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639835378 +0100\ncommitter GitHub <noreply@github.com> 1639835378 +0100\n\nRollup merge of #91566 - cbeuw:remap-dwo-name, r=davidtwco\n\nApply path remapping to DW_AT_GNU_dwo_name when producing split DWARF\n\n`--remap-path-prefix` doesn't apply to paths to `.o` (in case of packed) or `.dwo` (in case of unpacked) files in `DW_AT_GNU_dwo_name`. GCC also has this bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91888\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "html_url": "https://github.com/rust-lang/rust/commit/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f300477b89e70dd42379ba53c0e8ff74e9c694", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f300477b89e70dd42379ba53c0e8ff74e9c694", "html_url": "https://github.com/rust-lang/rust/commit/d3f300477b89e70dd42379ba53c0e8ff74e9c694"}, {"sha": "5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e481d07d2f962cda0bdb76a1e6c19d99c1be847", "html_url": "https://github.com/rust-lang/rust/commit/5e481d07d2f962cda0bdb76a1e6c19d99c1be847"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "224fcb66df82aed29c04a8d21c998ca43d1dc865", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "patch": "@@ -205,8 +205,11 @@ pub fn target_machine_factory(\n     let use_init_array =\n         !sess.opts.debugging_opts.use_ctors_section.unwrap_or(sess.target.use_ctors_section);\n \n+    let path_mapping = sess.source_map().path_mapping().clone();\n+\n     Arc::new(move |config: TargetMachineFactoryConfig| {\n-        let split_dwarf_file = config.split_dwarf_file.unwrap_or_default();\n+        let split_dwarf_file =\n+            path_mapping.map_prefix(config.split_dwarf_file.unwrap_or_default()).0;\n         let split_dwarf_file = CString::new(split_dwarf_file.to_str().unwrap()).unwrap();\n \n         let tm = unsafe {"}, {"sha": "c2d4621661fc260fb3547805c62bbab1fd01fb01", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "patch": "@@ -1055,11 +1055,11 @@ pub fn compile_unit_metadata(\n     let work_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped);\n     let flags = \"\\0\";\n     let output_filenames = tcx.output_filenames(());\n-    let out_dir = &output_filenames.out_directory;\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {\n         output_filenames\n             .split_dwarf_path(tcx.sess.split_debuginfo(), Some(codegen_unit_name))\n-            .map(|f| out_dir.join(f))\n+            // We get a path relative to the working directory from split_dwarf_path\n+            .map(|f| tcx.sess.source_map().path_mapping().map_prefix(f).0)\n     } else {\n         None\n     }"}, {"sha": "6271d75e635e2762a93201663294cf7dc8ad2247", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "patch": "@@ -32,7 +32,7 @@ use cc::windows_registry;\n use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::lazy::OnceCell;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n@@ -504,17 +504,19 @@ fn escape_stdout_stderr_string(s: &[u8]) -> String {\n \n const LLVM_DWP_EXECUTABLE: &'static str = \"rust-llvm-dwp\";\n \n-/// Invoke `llvm-dwp` (shipped alongside rustc) to link `dwo` files from Split DWARF into a `dwp`\n+/// Invoke `llvm-dwp` (shipped alongside rustc) to link debuginfo in object files into a `dwp`\n /// file.\n-fn link_dwarf_object<'a>(sess: &'a Session, executable_out_filename: &Path) {\n+fn link_dwarf_object<'a, I>(sess: &'a Session, executable_out_filename: &Path, object_files: I)\n+where\n+    I: IntoIterator<Item: AsRef<OsStr>>,\n+{\n     info!(\"preparing dwp to {}.dwp\", executable_out_filename.to_str().unwrap());\n \n     let dwp_out_filename = executable_out_filename.with_extension(\"dwp\");\n     let mut cmd = Command::new(LLVM_DWP_EXECUTABLE);\n-    cmd.arg(\"-e\");\n-    cmd.arg(executable_out_filename);\n     cmd.arg(\"-o\");\n     cmd.arg(&dwp_out_filename);\n+    cmd.args(object_files);\n \n     let mut new_path = sess.get_tools_search_paths(false);\n     if let Some(path) = env::var_os(\"PATH\") {\n@@ -898,7 +900,14 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         SplitDebuginfo::Packed if sess.target.is_like_msvc => {}\n \n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n-        SplitDebuginfo::Packed => link_dwarf_object(sess, &out_filename),\n+        // We cannot rely on the .o paths in the exectuable because they may have been\n+        // remapped by --remap-path-prefix and therefore invalid. So we need to provide\n+        // the .o paths explicitly\n+        SplitDebuginfo::Packed => link_dwarf_object(\n+            sess,\n+            &out_filename,\n+            codegen_results.modules.iter().filter_map(|m| m.object.as_ref()),\n+        ),\n     }\n \n     let strip = strip_value(sess);"}, {"sha": "eef04c767fb7c6bf7871b6997e3f67c274701b9d", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c42199c8f62a4b4df6c71a047b28d1cbb075c7f/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=1c42199c8f62a4b4df6c71a047b28d1cbb075c7f", "patch": "@@ -2,7 +2,16 @@\n \n # only-linux\n \n-all:\n+all: packed remapped\n+\n+remapped:\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n+\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n+\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\n+packed:\n \t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 foo.rs -g\n \trm $(TMPDIR)/foo.dwp\n \trm $(TMPDIR)/$(call BIN,foo)"}]}