{"sha": "c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56", "node_id": "C_kwDOAAsO6NoAKGMzYzlmOGY1ZjhjYjk2ZTA1MzZiYzhkNGU3NmU2NmM1ZTdjYWJhNTY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-04-17T12:34:50Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-04-17T12:34:50Z"}, "message": "Fix invalid handling of nested items with `--document-private-items`", "tree": {"sha": "eb17b32e5b15bbba2b1e656c6c4e590eba3b44f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb17b32e5b15bbba2b1e656c6c4e590eba3b44f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56", "html_url": "https://github.com/rust-lang/rust/commit/c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91d02b153a357b9937d6a5193db931076795deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91d02b153a357b9937d6a5193db931076795deb", "html_url": "https://github.com/rust-lang/rust/commit/f91d02b153a357b9937d6a5193db931076795deb"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "071a85f4da6eaa84327a88b2572add49dee59bc3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c3c9f8f5f8cb96e0536bc8d4e76e66c5e7caba56", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n@@ -87,6 +88,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     inside_public_path: bool,\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n+    is_importable_from_parent: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -107,6 +109,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             inside_public_path: true,\n             exact_paths: Default::default(),\n             modules: vec![om],\n+            is_importable_from_parent: true,\n         }\n     }\n \n@@ -319,11 +322,23 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         renamed: Option<Symbol>,\n         parent_id: Option<LocalDefId>,\n     ) {\n-        self.modules\n-            .last_mut()\n-            .unwrap()\n-            .items\n-            .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n+        if self.is_importable_from_parent\n+            // If we're inside an item, only impl blocks and `macro_rules!` with the `macro_export`\n+            // attribute can still be visible.\n+            || match item.kind {\n+                hir::ItemKind::Impl(..) => true,\n+                hir::ItemKind::Macro(_, MacroKind::Bang) => {\n+                    self.cx.tcx.has_attr(item.owner_id.def_id, sym::macro_export)\n+                }\n+                _ => false,\n+            }\n+        {\n+            self.modules\n+                .last_mut()\n+                .unwrap()\n+                .items\n+                .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n+        }\n     }\n \n     fn visit_item_inner(\n@@ -485,7 +500,22 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n \n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n         self.visit_item_inner(i, None, None);\n+        let new_value = if self.is_importable_from_parent {\n+            matches!(\n+                i.kind,\n+                hir::ItemKind::Mod(..)\n+                    | hir::ItemKind::ForeignMod { .. }\n+                    | hir::ItemKind::Impl(..)\n+                    | hir::ItemKind::Trait(..)\n+            )\n+        } else {\n+            // Whatever the context, if it's an impl block, the items inside it can be used so they\n+            // should be visible.\n+            matches!(i.kind, hir::ItemKind::Impl(..))\n+        };\n+        let prev = mem::replace(&mut self.is_importable_from_parent, new_value);\n         walk_item(self, i);\n+        self.is_importable_from_parent = prev;\n     }\n \n     fn visit_mod(&mut self, _: &hir::Mod<'tcx>, _: Span, _: hir::HirId) {"}]}