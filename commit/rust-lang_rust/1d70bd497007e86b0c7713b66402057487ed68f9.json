{"sha": "1d70bd497007e86b0c7713b66402057487ed68f9", "node_id": "C_kwDOAAsO6NoAKDFkNzBiZDQ5NzAwN2U4NmIwYzc3MTNiNjY0MDIwNTc0ODdlZDY4Zjk", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-13T19:35:24Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-14T07:54:19Z"}, "message": "Further codegen_attrs cleanups", "tree": {"sha": "6f439ed73c9c2e6ccdc0611f03a365c9e4d5adfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f439ed73c9c2e6ccdc0611f03a365c9e4d5adfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d70bd497007e86b0c7713b66402057487ed68f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d70bd497007e86b0c7713b66402057487ed68f9", "html_url": "https://github.com/rust-lang/rust/commit/1d70bd497007e86b0c7713b66402057487ed68f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d70bd497007e86b0c7713b66402057487ed68f9/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ab642e8ce42324798f0ba0e05e139221c2da6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ab642e8ce42324798f0ba0e05e139221c2da6d", "html_url": "https://github.com/rust-lang/rust/commit/e4ab642e8ce42324798f0ba0e05e139221c2da6d"}], "stats": {"total": 125, "additions": 62, "deletions": 63}, "files": [{"sha": "352128da3ef26f38153902c23006d63ff11adcef", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 62, "deletions": 63, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/1d70bd497007e86b0c7713b66402057487ed68f9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d70bd497007e86b0c7713b66402057487ed68f9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=1d70bd497007e86b0c7713b66402057487ed68f9", "patch": "@@ -194,16 +194,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             }\n             sym::cmse_nonsecure_entry => {\n                 if let Some(fn_sig) = fn_sig()\n-                && !matches!(fn_sig.skip_binder().abi(), abi::Abi::C { .. })\n-            {\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0776,\n-                    \"`#[cmse_nonsecure_entry]` requires C ABI\"\n-                )\n-                .emit();\n-            }\n+                    && !matches!(fn_sig.skip_binder().abi(), abi::Abi::C { .. })\n+                {\n+                    struct_span_err!(\n+                        tcx.sess,\n+                        attr.span,\n+                        E0776,\n+                        \"`#[cmse_nonsecure_entry]` requires C ABI\"\n+                    )\n+                    .emit();\n+                }\n                 if !tcx.sess.target.llvm_target.contains(\"thumbv8m\") {\n                     struct_span_err!(tcx.sess, attr.span, E0775, \"`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\")\n                     .emit();\n@@ -215,12 +215,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             }\n             sym::track_caller => {\n                 if !tcx.is_closure(did.to_def_id())\n-                && let Some(fn_sig) = fn_sig()\n-                && fn_sig.skip_binder().abi() != abi::Abi::Rust\n-            {\n-                struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n-                    .emit();\n-            }\n+                    && let Some(fn_sig) = fn_sig()\n+                    && fn_sig.skip_binder().abi() != abi::Abi::Rust\n+                {\n+                    struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n+                        .emit();\n+                }\n                 if tcx.is_closure(did.to_def_id()) && !tcx.features().closure_track_caller {\n                     feature_err(\n                         &tcx.sess.parse_sess,\n@@ -331,28 +331,38 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                 no_sanitize_span = Some(attr.span);\n                 if let Some(list) = attr.meta_item_list() {\n                     for item in list.iter() {\n-                        if item.has_name(sym::address) {\n-                            codegen_fn_attrs.no_sanitize |=\n-                                SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS;\n-                        } else if item.has_name(sym::cfi) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n-                        } else if item.has_name(sym::kcfi) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI;\n-                        } else if item.has_name(sym::memory) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n-                        } else if item.has_name(sym::memtag) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n-                        } else if item.has_name(sym::shadow_call_stack) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK;\n-                        } else if item.has_name(sym::thread) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n-                        } else if item.has_name(sym::hwaddress) {\n-                            codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n-                        } else {\n-                            tcx.sess\n+                        match item.ident().map(|ident| ident.name) {\n+                            Some(sym::address) => {\n+                                codegen_fn_attrs.no_sanitize |=\n+                                    SanitizerSet::ADDRESS | SanitizerSet::KERNELADDRESS;\n+                            }\n+                            Some(sym::cfi) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n+                            }\n+                            Some(sym::kcfi) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI;\n+                            }\n+                            Some(sym::memory) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n+                            }\n+                            Some(sym::memtag) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n+                            }\n+                            Some(sym::shadow_call_stack) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK;\n+                            }\n+                            Some(sym::thread) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n+                            }\n+                            Some(sym::hwaddress) => {\n+                                codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n+                            }\n+                            _ => {\n+                                tcx.sess\n                                 .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n                                 .note(\"expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n                                 .emit();\n+                            }\n                         }\n                     }\n                 }\n@@ -417,34 +427,23 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                     })\n             }\n             sym::repr => {\n-                codegen_fn_attrs.alignment = match attr.meta_item_list() {\n-                    Some(items) => match items.as_slice() {\n-                        [item] => match item.name_value_literal() {\n-                            Some((sym::align, literal)) => {\n-                                let alignment = rustc_attr::parse_alignment(&literal.kind);\n-\n-                                match alignment {\n-                                    Ok(align) => Some(align),\n-                                    Err(msg) => {\n-                                        struct_span_err!(\n-                                            tcx.sess.diagnostic(),\n-                                            attr.span,\n-                                            E0589,\n-                                            \"invalid `repr(align)` attribute: {}\",\n-                                            msg\n-                                        )\n-                                        .emit();\n-\n-                                        None\n-                                    }\n-                                }\n-                            }\n-                            _ => None,\n-                        },\n-                        [] => None,\n-                        _ => None,\n-                    },\n-                    None => None,\n+                codegen_fn_attrs.alignment = if let Some(items) = attr.meta_item_list()\n+                    && let [item] = items.as_slice()\n+                    && let Some((sym::align, literal)) = item.name_value_literal()\n+                {\n+                    rustc_attr::parse_alignment(&literal.kind).map_err(|msg| {\n+                        struct_span_err!(\n+                            tcx.sess.diagnostic(),\n+                            attr.span,\n+                            E0589,\n+                            \"invalid `repr(align)` attribute: {}\",\n+                            msg\n+                        )\n+                        .emit();\n+                    })\n+                    .ok()\n+                } else {\n+                    None\n                 };\n             }\n             _ => {}"}]}