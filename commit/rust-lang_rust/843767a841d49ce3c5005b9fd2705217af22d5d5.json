{"sha": "843767a841d49ce3c5005b9fd2705217af22d5d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Mzc2N2E4NDFkNDljZTNjNTAwNWI5ZmQyNzA1MjE3YWYyMmQ1ZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-03T03:46:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-03T17:55:59Z"}, "message": "Disambiguate unop statements in pretty-printer. Closes #674", "tree": {"sha": "cae8faaad12504f3027b51dc9ac170af9bed049d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cae8faaad12504f3027b51dc9ac170af9bed049d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/843767a841d49ce3c5005b9fd2705217af22d5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/843767a841d49ce3c5005b9fd2705217af22d5d5", "html_url": "https://github.com/rust-lang/rust/commit/843767a841d49ce3c5005b9fd2705217af22d5d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/843767a841d49ce3c5005b9fd2705217af22d5d5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea81c03960264bf590cd99ed2b662243e3db7a7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea81c03960264bf590cd99ed2b662243e3db7a7c", "html_url": "https://github.com/rust-lang/rust/commit/ea81c03960264bf590cd99ed2b662243e3db7a7c"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "f342e0e26a8bfe42e125e2cbfddcf68f51b1116c", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/843767a841d49ce3c5005b9fd2705217af22d5d5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843767a841d49ce3c5005b9fd2705217af22d5d5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=843767a841d49ce3c5005b9fd2705217af22d5d5", "patch": "@@ -595,9 +595,16 @@ fn print_possibly_embedded_block(s: &ps, blk: &ast::blk, embedded: bool,\n     let ann_node = node_block(s, blk);\n     s.ann.pre(ann_node);\n     if embedded { word(s.s, \"#{\"); end(s); } else { bopen(s); }\n-    for st: @ast::stmt  in blk.node.stmts { print_stmt(s, *st) }\n+\n+    let last_stmt = option::none;\n+    for st: @ast::stmt  in blk.node.stmts {\n+        maybe_protect_unop(s, last_stmt, stmt_(st));\n+        print_stmt(s, *st);\n+        last_stmt = option::some(st);\n+    }\n     alt blk.node.expr {\n       some(expr) {\n+        maybe_protect_unop(s, last_stmt, expr_(expr));\n         space_if_not_bol(s);\n         print_expr(s, expr);\n         maybe_print_trailing_comment(s, expr.span, some(blk.span.hi));\n@@ -606,6 +613,42 @@ fn print_possibly_embedded_block(s: &ps, blk: &ast::blk, embedded: bool,\n     }\n     bclose_(s, blk.span, indented);\n     s.ann.post(ann_node);\n+\n+    tag expr_or_stmt { stmt_(@ast::stmt); expr_(@ast::expr); }\n+\n+    // The Rust syntax has an ambiguity when an if, alt, or block statement is\n+    // followed by a unary op statement. In those cases we have to add an\n+    // extra semi to make sure the unop is not parsed as a binop with the\n+    // if/alt/block expression.\n+    fn maybe_protect_unop(s: &ps, last: &option::t[@ast::stmt],\n+                          next: &expr_or_stmt) {\n+        let last_expr_is_block = alt last {\n+          option::some(@{node: ast::stmt_expr(e, _), _}) {\n+            alt e.node {\n+              ast::expr_if(_ ,_ ,_)\n+              | ast::expr_alt(_, _)\n+              | ast::expr_block(_) { true }\n+              _ { false }\n+            }\n+            true\n+          }\n+          _ { false }\n+        };\n+        let next_expr_is_unnop = alt next {\n+          expr_(@{node: ast::expr_unary(_, _), _}) { true }\n+          stmt_(@{node: ast::stmt_expr(e, _), _}) {\n+            alt e.node {\n+              ast::expr_unary(_, _) { true }\n+              _ { false }\n+            }\n+          }\n+          _ { false }\n+        };\n+\n+        if last_expr_is_block && next_expr_is_unnop {\n+            word(s.s, \";\");\n+        }\n+    }\n }\n \n fn print_if(s: &ps, test: &@ast::expr, blk: &ast::blk,"}, {"sha": "79cc24a2f202b5d0beeca28b7d49acea60e65c5f", "filename": "src/test/pretty/unary-op-disambig.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/843767a841d49ce3c5005b9fd2705217af22d5d5/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843767a841d49ce3c5005b9fd2705217af22d5d5/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Funary-op-disambig.rs?ref=843767a841d49ce3c5005b9fd2705217af22d5d5", "patch": "@@ -0,0 +1,35 @@\n+// Preserve semicolons that disambiguate unops\n+\n+fn f() { }\n+\n+fn block_semi() -> int {\n+    { f() };\n+    -1\n+}\n+\n+fn block_nosemi() -> int {\n+    { 0 } - 1\n+}\n+\n+fn if_semi() -> int {\n+    if true { f() } else { f() };\n+    -1\n+}\n+\n+fn if_nosemi() -> int {\n+    if true { 0 } else { 0 } - 1\n+}\n+\n+fn alt_semi() -> int {\n+    alt true { true { f() } };\n+    -1\n+}\n+\n+fn alt_no_semi() -> int {\n+    alt true { true { 0 } } - 1\n+}\n+\n+fn stmt() {\n+    { f() };\n+    -1;\n+}\n\\ No newline at end of file"}, {"sha": "2164ef25a0ae23d2de9741c4b7eb3768c95c9e3d", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/843767a841d49ce3c5005b9fd2705217af22d5d5/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843767a841d49ce3c5005b9fd2705217af22d5d5/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=843767a841d49ce3c5005b9fd2705217af22d5d5", "patch": "@@ -1,4 +1,3 @@\n-// xfail-pretty\n // no-reformat\n \n /*"}]}