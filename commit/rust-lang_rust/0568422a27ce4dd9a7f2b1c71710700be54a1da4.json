{"sha": "0568422a27ce4dd9a7f2b1c71710700be54a1da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Njg0MjJhMjdjZTRkZDlhN2YyYjFjNzE3MTA3MDBiZTU0YTFkYTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T16:41:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T16:41:54Z"}, "message": "rollup merge of #22088: semarie/openbsd-rmake\n\n- c-link-to-rust-staticlib: use `EXTRACFLAGS` defined by tools.mk for\n  choose the good libraries to link to.\n\ntools.mk define a variable `EXTRACFLAGS` that contains the needed library per target. So it is better to use it, instead of duplicate the code here. I keep the `ifndef IS_WINDOWS` has tools.mk define something for WINDOWS... so I don't change things that I couldn't test.\n\n- no-stack-check: disabled for openbsd (no segmented stacks here)\n\n- symbols-are-reasonable: use portable grep pattern\n\n- target-specs: use POSIX form for options when invoking grep\n\n- use-extern-for-plugins: disable as OpenBSD only support x86_64 for now", "tree": {"sha": "a15dbee507c1506ff39869ee5a7d5a0b993d48cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15dbee507c1506ff39869ee5a7d5a0b993d48cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0568422a27ce4dd9a7f2b1c71710700be54a1da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0568422a27ce4dd9a7f2b1c71710700be54a1da4", "html_url": "https://github.com/rust-lang/rust/commit/0568422a27ce4dd9a7f2b1c71710700be54a1da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0568422a27ce4dd9a7f2b1c71710700be54a1da4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "577c51cdc03c7ef95f15e36cf1130080082bce5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/577c51cdc03c7ef95f15e36cf1130080082bce5a", "html_url": "https://github.com/rust-lang/rust/commit/577c51cdc03c7ef95f15e36cf1130080082bce5a"}, {"sha": "8fb426469a4f7b08a240172c8f4295e868c65db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb426469a4f7b08a240172c8f4295e868c65db8", "html_url": "https://github.com/rust-lang/rust/commit/8fb426469a4f7b08a240172c8f4295e868c65db8"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "477b85f362a29876e72d08d651dbdb44e3a6817d", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=0568422a27ce4dd9a7f2b1c71710700be54a1da4", "patch": "@@ -1,9 +1,7 @@\n -include ../tools.mk\n \n ifndef IS_WINDOWS\n-ifneq ($(shell uname),Darwin)\n-\tEXTRAFLAGS := -lm -lrt -ldl -lpthread\n-endif\n+EXTRAFLAGS := $(EXTRACFLAGS)\n endif\n \n # FIXME: ignore freebsd"}, {"sha": "5fce35e2beb87774e7c2218145b923cb4e755d94", "filename": "src/test/run-make/no-stack-check/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fno-stack-check%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fno-stack-check%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-stack-check%2FMakefile?ref=0568422a27ce4dd9a7f2b1c71710700be54a1da4", "patch": "@@ -1,6 +1,7 @@\n -include ../tools.mk\n \n ifndef IS_WINDOWS\n+ifneq ($(UNAME),OpenBSD)\n all:\n \t$(RUSTC) -O --emit asm attr.rs\n \t! grep -q morestack $(TMPDIR)/attr.s\n@@ -9,6 +10,10 @@ all:\n \t$(RUSTC) -O --emit asm -C no-stack-check flag.rs\n \t! grep -q morestack $(TMPDIR)/flag.s\n else\n+# On OpenBSD, morestack isn't used as the segmented stacks are disabled\n+all:\n+endif\n+else\n # On Windows we use __chkstk and it only appears in functions with large allocations,\n # so this test wouldn't be reliable.\n all:"}, {"sha": "89f610dee17d05c809ff1e8a91ec61196d8ded0f", "filename": "src/test/run-make/symbols-are-reasonable/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile?ref=0568422a27ce4dd9a7f2b1c71710700be54a1da4", "patch": "@@ -10,6 +10,6 @@ OUT=$(TMPDIR)/lib.s\n all:\n \t$(RUSTC) lib.rs --emit=asm --crate-type=staticlib\n \t# just check for symbol declarations with the names we're expecting.\n-\tgrep 'str[0-9]\\+:' $(OUT)\n-\tgrep 'binary[0-9]\\+:' $(OUT)\n-\tgrep 'vtable[0-9]\\+' $(OUT)\n+\tgrep 'str[0-9][0-9]*:' $(OUT)\n+\tgrep 'binary[0-9][0-9]*:' $(OUT)\n+\tgrep 'vtable[0-9][0-9]*' $(OUT)"}, {"sha": "db2b253a6f1a7ed9965e2dae62f24ba664b2979f", "filename": "src/test/run-make/target-specs/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile?ref=0568422a27ce4dd9a7f2b1c71710700be54a1da4", "patch": "@@ -1,11 +1,11 @@\n -include ../tools.mk\n all:\n \t$(RUSTC) foo.rs --target=my-awesome-platform.json --crate-type=lib --emit=asm\n-\tgrep --quiet --invert-match morestack < $(TMPDIR)/foo.s\n+\tgrep -q -v morestack < $(TMPDIR)/foo.s\n \t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep --quiet \"Error loading target specification\"\n \t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | grep 'Field llvm-target'\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-awesome-platform --crate-type=lib --emit=asm\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=x86_64-unknown-linux-gnu --crate-type=lib --emit=asm\n \t# The built-in target *should* override the one we have here, and thus we\n \t# should have morestack\n-\tgrep --quiet morestack < $(TMPDIR)/foo.s\n+\tgrep -q morestack < $(TMPDIR)/foo.s"}, {"sha": "bdce7b7810aaf4581c7cc75fd5d25016b6f29e97", "filename": "src/test/run-make/use-extern-for-plugins/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0568422a27ce4dd9a7f2b1c71710700be54a1da4/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile?ref=0568422a27ce4dd9a7f2b1c71710700be54a1da4", "patch": "@@ -1,5 +1,6 @@\n -include ../tools.mk\n \n+ifneq ($(UNAME),OpenBSD)\n HOST := $(shell $(RUSTC) -vV | grep 'host:' | sed 's/host: //')\n ifeq ($(findstring i686,$(HOST)),i686)\n TARGET := $(subst i686,x86_64,$(HOST))\n@@ -11,3 +12,7 @@ all:\n \t$(RUSTC) foo.rs -C extra-filename=-host\n \t$(RUSTC) bar.rs -C extra-filename=-targ --target $(TARGET)\n \t$(RUSTC) baz.rs --extern a=$(TMPDIR)/liba-targ.rlib --target $(TARGET)\n+else\n+# OpenBSD support only x86_64 architecture for now\n+all:\n+endif"}]}