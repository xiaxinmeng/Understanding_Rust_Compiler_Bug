{"sha": "3500e76330c92196064d5ebdee6dfcd3f56c193c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDBlNzYzMzBjOTIxOTYwNjRkNWViZGVlNmRmY2QzZjU2YzE5M2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-04T04:42:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T04:42:56Z"}, "message": "Rollup merge of #85889 - denismerigoux:master, r=petrochenkov\n\nRestoring the `num_def_ids` function in the CStore API\n\n## The context\n\nI am the maintainer of https://github.com/hacspec/hacspec, an embedded Rust DSL aimed at cryptographic specifications. As it is normal for an embedded DSL, Hacspec's compiler relies on being plugged to the internal API of the Rust compiler, which is unstable and subject to changes.\n\n## The problem\n\nThe Hacspec compiler features its own typechecker, that performs an additional, more restrictive typechecking pass over the Rust code of a crate. To complete this typechecking, the Hacspec compiler needs to retrieve the signature of functions defined in non-local imported crates. Rather than retrieving these signatures on-demand, the Hacspec compiler pre-populates its typechecking context with all the Hacspec-compatible symbols defined in non-local crates first. This requires having a way to iterate over all the definitions in a non-local crate.\n\nI used to do this with `CrateMetadata::all_def_path_hashes_and_def_ids`, but this function was deleted in 908bf5a310b7265a3e. Then, I fellback on `CStore::num_def_ids`, exploiting the fact that all the `DefIds` for a crate have the same `krate_num` and range from `0` to `num_def_ids(krate_num)`. But `num_def_ids` was deleted in b6120bfb354c1c1c9fdf.\n\nI looked to the `Cstore::item_children_untracked` function to replicate the feature of traversing through all the `DefId` for a crate, using `CRATE_DEF_INDEX` as the root, but this does not work as recursive `Cstore::item_children_untracked` calls do not reach all the symbols I was able to reach using the two previous methods.\n\n## Description of this PR\n\nThis PR simply restores in the public API of `CStore` the `num_def_ids` function, giving the size of the definition table for a given crate.", "tree": {"sha": "48f9b094510c9bfb8d34ac55b1fe1d9ecca49da1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f9b094510c9bfb8d34ac55b1fe1d9ecca49da1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3500e76330c92196064d5ebdee6dfcd3f56c193c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgua9QCRBK7hj4Ov3rIwAACWMIABW9mfYeZrOEKuxzrQoO59qL\naM3BCoTKZAUyA9wg+8yaa6+36VFPfrIm1R7OZKDGQTOmXXNt+EgSHbB7eLrA2Je6\nh8/zLhju6KpPjlnT50YoepoQVO6zBqOdp6JVn08+e+QKhN/Fb1pxjSHo16lH2jDv\n8HZq2vl5W8LvlJRgS0Kre42UjBGVwJROVmpVSJVTWE7TdFkxSO0AOZTUjaL7bpRO\nhxNcsY5MvY1+mJ82Ll/4bRXipwzyizMOELfXf761mhF0JS3FplwyGN8BZ0LOrF02\nZMfB35+PFFzd0yDZSS18GybKIS+ZnkMxV0uSVKNGdA1GR6TKgGPDLDmcXMxMqqI=\n=HT5c\n-----END PGP SIGNATURE-----\n", "payload": "tree 48f9b094510c9bfb8d34ac55b1fe1d9ecca49da1\nparent f6aaf05363f7040ed9530172b55c9b1f2f9936b3\nparent d4ea9fa3fb400e1c5748489a65859fdead3dd132\nauthor Yuki Okushi <jtitor@2k36.org> 1622781776 +0900\ncommitter GitHub <noreply@github.com> 1622781776 +0900\n\nRollup merge of #85889 - denismerigoux:master, r=petrochenkov\n\nRestoring the `num_def_ids` function in the CStore API\n\n## The context\n\nI am the maintainer of https://github.com/hacspec/hacspec, an embedded Rust DSL aimed at cryptographic specifications. As it is normal for an embedded DSL, Hacspec's compiler relies on being plugged to the internal API of the Rust compiler, which is unstable and subject to changes.\n\n## The problem\n\nThe Hacspec compiler features its own typechecker, that performs an additional, more restrictive typechecking pass over the Rust code of a crate. To complete this typechecking, the Hacspec compiler needs to retrieve the signature of functions defined in non-local imported crates. Rather than retrieving these signatures on-demand, the Hacspec compiler pre-populates its typechecking context with all the Hacspec-compatible symbols defined in non-local crates first. This requires having a way to iterate over all the definitions in a non-local crate.\n\nI used to do this with `CrateMetadata::all_def_path_hashes_and_def_ids`, but this function was deleted in 908bf5a310b7265a3e. Then, I fellback on `CStore::num_def_ids`, exploiting the fact that all the `DefIds` for a crate have the same `krate_num` and range from `0` to `num_def_ids(krate_num)`. But `num_def_ids` was deleted in b6120bfb354c1c1c9fdf.\n\nI looked to the `Cstore::item_children_untracked` function to replicate the feature of traversing through all the `DefId` for a crate, using `CRATE_DEF_INDEX` as the root, but this does not work as recursive `Cstore::item_children_untracked` calls do not reach all the symbols I was able to reach using the two previous methods.\n\n## Description of this PR\n\nThis PR simply restores in the public API of `CStore` the `num_def_ids` function, giving the size of the definition table for a given crate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3500e76330c92196064d5ebdee6dfcd3f56c193c", "html_url": "https://github.com/rust-lang/rust/commit/3500e76330c92196064d5ebdee6dfcd3f56c193c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3500e76330c92196064d5ebdee6dfcd3f56c193c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6aaf05363f7040ed9530172b55c9b1f2f9936b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6aaf05363f7040ed9530172b55c9b1f2f9936b3", "html_url": "https://github.com/rust-lang/rust/commit/f6aaf05363f7040ed9530172b55c9b1f2f9936b3"}, {"sha": "d4ea9fa3fb400e1c5748489a65859fdead3dd132", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ea9fa3fb400e1c5748489a65859fdead3dd132", "html_url": "https://github.com/rust-lang/rust/commit/d4ea9fa3fb400e1c5748489a65859fdead3dd132"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "59fec58f0a1b3037a65f22b28697825be7c8a0ef", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3500e76330c92196064d5ebdee6dfcd3f56c193c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3500e76330c92196064d5ebdee6dfcd3f56c193c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=3500e76330c92196064d5ebdee6dfcd3f56c193c", "patch": "@@ -1931,6 +1931,10 @@ impl CrateMetadata {\n         self.root.hash\n     }\n \n+    fn num_def_ids(&self) -> usize {\n+        self.root.tables.def_keys.size()\n+    }\n+\n     fn local_def_id(&self, index: DefIndex) -> DefId {\n         DefId { krate: self.cnum, index }\n     }"}, {"sha": "9e615e48a3cd0964a1f3300ee696caf13bcda993", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3500e76330c92196064d5ebdee6dfcd3f56c193c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3500e76330c92196064d5ebdee6dfcd3f56c193c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3500e76330c92196064d5ebdee6dfcd3f56c193c", "patch": "@@ -458,6 +458,13 @@ impl CStore {\n         self.get_crate_data(def_id.krate).module_expansion(def_id.index, sess)\n     }\n \n+    /// Only public-facing way to traverse all the definitions in a non-local crate.\n+    /// Critically useful for this third-party project: <https://github.com/hacspec/hacspec>.\n+    /// See <https://github.com/rust-lang/rust/pull/85889> for context.\n+    pub fn num_def_ids_untracked(&self, cnum: CrateNum) -> usize {\n+        self.get_crate_data(cnum).num_def_ids()\n+    }\n+\n     pub fn item_attrs(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n         self.get_crate_data(def_id.krate).get_item_attrs(def_id.index, sess).collect()\n     }"}]}