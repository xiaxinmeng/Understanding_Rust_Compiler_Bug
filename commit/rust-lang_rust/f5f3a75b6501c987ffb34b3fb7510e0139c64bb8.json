{"sha": "f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZjNhNzViNjUwMWM5ODdmZmIzNGIzZmI3NTEwZTAxMzljNjRiYjg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-19T05:44:34Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-13T03:43:37Z"}, "message": "Make moves explicit in bench tests", "tree": {"sha": "2445e2a5d02a920510c9c0512914ef99e1590035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2445e2a5d02a920510c9c0512914ef99e1590035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "html_url": "https://github.com/rust-lang/rust/commit/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18c6bb3b6f9daab455227dae384d9a3b961aa1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18c6bb3b6f9daab455227dae384d9a3b961aa1c", "html_url": "https://github.com/rust-lang/rust/commit/e18c6bb3b6f9daab455227dae384d9a3b961aa1c"}], "stats": {"total": 247, "additions": 124, "deletions": 123}, "files": [{"sha": "c877d1d3657798346fdd4dad299cc1d34e58dae7", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -119,7 +119,7 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n     Q.add_back(key);\n     marks[key] = key;\n \n-    while Q.size() > 0u {\n+    while Q.size() > 0 {\n         let t = Q.pop_front();\n \n         do graph[t].each() |k| {\n@@ -131,7 +131,7 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n         };\n     }\n \n-    vec::from_mut(marks)\n+    vec::from_mut(move marks)\n }\n \n /**\n@@ -167,11 +167,11 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n         }\n     }\n \n-    let mut i = 0u;\n+    let mut i = 0;\n     while vec::any(colors, is_gray) {\n         // Do the BFS.\n         log(info, fmt!(\"PBFS iteration %?\", i));\n-        i += 1u;\n+        i += 1;\n         colors = do colors.mapi() |i, c| {\n             let c : color = *c;\n             match c {\n@@ -245,13 +245,13 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         i += 1;\n         let old_len = colors.len();\n \n-        let color = arc::ARC(colors);\n+        let color = arc::ARC(move colors);\n \n         let color_vec = arc::get(&color); // FIXME #3387 requires this temp\n         colors = do par::mapi_factory(*color_vec) {\n             let colors = arc::clone(&color);\n             let graph = arc::clone(&graph);\n-            fn~(+i: uint, +c: color) -> color {\n+            fn~(move graph, move colors, +i: uint, +c: color) -> color {\n                 let c : color = c;\n                 let colors = arc::get(&colors);\n                 let graph = arc::get(&graph);\n@@ -388,7 +388,7 @@ fn main() {\n     let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"15\", ~\"48\"]\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         ~[~\"\", ~\"10\", ~\"16\"]\n     } else {\n         args\n@@ -400,21 +400,21 @@ fn main() {\n     let do_sequential = true;\n \n     let start = time::precise_time_s();\n-    let edges = make_edges(scale, 16u);\n+    let edges = make_edges(scale, 16);\n     let stop = time::precise_time_s();\n \n     io::stdout().write_line(fmt!(\"Generated %? edges in %? seconds.\",\n                                  vec::len(edges), stop - start));\n \n     let start = time::precise_time_s();\n-    let graph = make_graph(1u << scale, edges);\n+    let graph = make_graph(1 << scale, edges);\n     let stop = time::precise_time_s();\n \n-    let mut total_edges = 0u;\n+    let mut total_edges = 0;\n     vec::each(graph, |edges| { total_edges += edges.len(); true });\n \n     io::stdout().write_line(fmt!(\"Generated graph with %? edges in %? seconds.\",\n-                                 total_edges / 2u,\n+                                 total_edges / 2,\n                                  stop - start));\n \n     let mut total_seq = 0.0;"}, {"sha": "88ca0d3e0c2d606fbe12ed1c76924274cdf3239b", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -19,7 +19,7 @@ use io::WriterUtil;\n use pipes::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n )\n \n enum request {\n@@ -50,26 +50,26 @@ fn run(args: &[~str]) {\n     let (to_parent, from_child) = pipes::stream();\n     let (to_child, from_parent) = pipes::stream();\n \n-    let to_child = SharedChan(to_child);\n+    let to_child = SharedChan(move to_child);\n \n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n     let num_bytes = 100;\n     let start = std::time::precise_time_s();\n     let mut worker_results = ~[];\n-    for uint::range(0u, workers) |i| {\n+    for uint::range(0, workers) |_i| {\n         let to_child = to_child.clone();\n         do task::task().future_result(|+r| {\n-            worker_results.push(r);\n-        }).spawn {\n-            for uint::range(0u, size / workers) |_i| {\n+            worker_results.push(move r);\n+        }).spawn |move to_child| {\n+            for uint::range(0, size / workers) |_i| {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker %? exiting\", i);\n         };\n     }\n-    do task::spawn {\n+    do task::spawn |move from_parent, move to_parent| {\n         server(from_parent, to_parent);\n     }\n "}, {"sha": "ce3fd5134ac5670ddc4af6b99385542fdac7076f", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -15,7 +15,7 @@ use io::WriterUtil;\n use pipes::{Port, PortSet, Chan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n )\n \n enum request {\n@@ -46,27 +46,27 @@ fn run(args: &[~str]) {\n     let (to_parent, from_child) = pipes::stream();\n     let (to_child, from_parent_) = pipes::stream();\n     let from_parent = PortSet();\n-    from_parent.add(from_parent_);\n+    from_parent.add(move from_parent_);\n \n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n     let num_bytes = 100;\n     let start = std::time::precise_time_s();\n     let mut worker_results = ~[];\n-    for uint::range(0u, workers) |i| {\n+    for uint::range(0, workers) |_i| {\n         let (to_child, from_parent_) = pipes::stream();\n-        from_parent.add(from_parent_);\n+        from_parent.add(move from_parent_);\n         do task::task().future_result(|+r| {\n-            worker_results.push(r);\n-        }).spawn {\n-            for uint::range(0u, size / workers) |_i| {\n+            worker_results.push(move r);\n+        }).spawn |move to_child| {\n+            for uint::range(0, size / workers) |_i| {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker %? exiting\", i);\n         };\n     }\n-    do task::spawn {\n+    do task::spawn |move from_parent, move to_parent| {\n         server(from_parent, to_parent);\n     }\n "}, {"sha": "3ec89567d206b43c72a44d23676001c96ded3935", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -33,26 +33,26 @@ fn recv(p: &pipe) -> uint {\n \n fn init() -> (pipe,pipe) {\n     let m = arc::MutexARC(~[]);\n-    ((&m).clone(), m)\n+    ((&m).clone(), move m)\n }\n \n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: pipe,\n                +num_port: pipe) {\n-    let mut num_chan <- Some(num_chan);\n-    let mut num_port <- Some(num_port);\n+    let mut num_chan <- Some(move num_chan);\n+    let mut num_port <- Some(move num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = option::swap_unwrap(&mut num_chan);\n         let mut num_port2 = option::swap_unwrap(&mut num_port);\n         send(&num_chan2, i * j);\n-        num_chan = Some(num_chan2);\n+        num_chan = Some(move num_chan2);\n         let _n = recv(&num_port2);\n         //log(error, _n);\n-        num_port = Some(num_port2);\n+        num_port = Some(move num_port2);\n     };\n }\n \n@@ -70,7 +70,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Some(num_chan);\n+    let mut num_chan = Some(move num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -82,22 +82,22 @@ fn main() {\n         let (new_chan, num_port) = init();\n         let num_chan2 = ~mut None;\n         *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(num_port);\n+        let num_port = ~mut Some(move num_port);\n         let new_future = future::spawn(|move num_chan2, move num_port| {\n             let mut num_chan = None;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = None;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n-                        option::unwrap(num_chan),\n-                        option::unwrap(num_port1))\n+                        option::unwrap(move num_chan),\n+                        option::unwrap(move num_port1))\n         });\n-        futures.push(new_future);\n-        num_chan = Some(new_chan);\n+        futures.push(move new_future);\n+        num_chan = Some(move new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0u, msg_per_task, option::unwrap(num_chan), num_port);\n+    thread_ring(0, msg_per_task, option::unwrap(move num_chan), move num_port);\n \n     // synchronize\n     for futures.each |f| { future::get(f) };"}, {"sha": "68429ee01bb7da7224bd732dc921e560ba30e253", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -24,26 +24,26 @@ proto! ring (\n fn macros() {\n     #macro[\n         [#move_out[x],\n-         unsafe { let y <- *ptr::addr_of(&x); y }]\n+         unsafe { let y <- *ptr::addr_of(&x); move y }]\n     ];\n }\n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: ring::client::num,\n                +num_port: ring::server::num) {\n-    let mut num_chan <- Some(num_chan);\n-    let mut num_port <- Some(num_port);\n+    let mut num_chan <- Some(move num_chan);\n+    let mut num_port <- Some(move num_port);\n     // Send/Receive lots of messages.\n-    for uint::range(0u, count) |j| {\n+    for uint::range(0, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = None;\n         let mut num_port2 = None;\n         num_chan2 <-> num_chan;\n         num_port2 <-> num_port;\n-        num_chan = Some(ring::client::num(option::unwrap(num_chan2), i * j));\n-        let port = option::unwrap(num_port2);\n-        match recv(port) {\n+        num_chan = Some(ring::client::num(option::unwrap(move num_chan2), i * j));\n+        let port = option::unwrap(move num_port2);\n+        match recv(move port) {\n           ring::num(_n, p) => {\n             //log(error, _n);\n             num_port = Some(move_out!(p));\n@@ -66,7 +66,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = ring::init();\n-    let mut num_chan = Some(num_chan);\n+    let mut num_chan = Some(move num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -78,23 +78,23 @@ fn main() {\n         let (new_chan, num_port) = ring::init();\n         let num_chan2 = ~mut None;\n         *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(num_port);\n+        let num_port = ~mut Some(move num_port);\n         let new_future = do future::spawn\n             |move num_chan2, move num_port| {\n             let mut num_chan = None;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = None;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n-                        option::unwrap(num_chan),\n-                        option::unwrap(num_port1))\n+                        option::unwrap(move num_chan),\n+                        option::unwrap(move num_port1))\n         };\n-        futures.push(new_future);\n-        num_chan = Some(new_chan);\n+        futures.push(move new_future);\n+        num_chan = Some(move new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0u, msg_per_task, option::unwrap(num_chan), num_port);\n+    thread_ring(0, msg_per_task, option::unwrap(move num_chan), move num_port);\n \n     // synchronize\n     for futures.each |f| { future::get(f) };"}, {"sha": "5e3d2f7d3e08c9e1a62dee9669773835d57c9e89", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -33,26 +33,26 @@ fn recv(p: &pipe) -> uint {\n \n fn init() -> (pipe,pipe) {\n     let x = arc::RWARC(~[]);\n-    ((&x).clone(), x)\n+    ((&x).clone(), move x)\n }\n \n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: pipe,\n                +num_port: pipe) {\n-    let mut num_chan <- Some(num_chan);\n-    let mut num_port <- Some(num_port);\n+    let mut num_chan <- Some(move num_chan);\n+    let mut num_port <- Some(move num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = option::swap_unwrap(&mut num_chan);\n         let mut num_port2 = option::swap_unwrap(&mut num_port);\n         send(&num_chan2, i * j);\n-        num_chan = Some(num_chan2);\n+        num_chan = Some(move num_chan2);\n         let _n = recv(&num_port2);\n         //log(error, _n);\n-        num_port = Some(num_port2);\n+        num_port = Some(move num_port2);\n     };\n }\n \n@@ -70,7 +70,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Some(num_chan);\n+    let mut num_chan = Some(move num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -82,23 +82,23 @@ fn main() {\n         let (new_chan, num_port) = init();\n         let num_chan2 = ~mut None;\n         *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(num_port);\n+        let num_port = ~mut Some(move num_port);\n         let new_future = do future::spawn\n             |move num_chan2, move num_port| {\n             let mut num_chan = None;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = None;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n-                        option::unwrap(num_chan),\n-                        option::unwrap(num_port1))\n+                        option::unwrap(move num_chan),\n+                        option::unwrap(move num_port1))\n         };\n-        futures.push(new_future);\n-        num_chan = Some(new_chan);\n+        futures.push(move new_future);\n+        num_chan = Some(move new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0u, msg_per_task, option::unwrap(num_chan), num_port);\n+    thread_ring(0, msg_per_task, option::unwrap(move num_chan), move num_port);\n \n     // synchronize\n     for futures.each |f| { future::get(f) };"}, {"sha": "5cb278b0dd2e3339e42c2a99879cb761fbfddcf1", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -52,7 +52,7 @@ fn main() {\n             get_chan_chan.send(Chan(&p));\n             thread_ring(i, msg_per_task, num_chan,  p)\n         };\n-        futures.push(new_future);\n+        futures.push(move new_future);\n         \n         num_chan = get_chan.recv();\n     };"}, {"sha": "6ab22779c55f18e43dafad773ad4587cb21186fa", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -35,12 +35,12 @@ fn run(args: ~[~str]) {\n     let workers = uint::from_str(args[2]).get();\n     let start = std::time::precise_time_s();\n     let mut worker_results = ~[];\n-    for uint::range(0u, workers) |_i| {\n+    for uint::range(0, workers) |_i| {\n         do task::task().future_result(|+r| {\n-            worker_results.push(r);\n+            worker_results.push(move r);\n         }).spawn {\n-            for uint::range(0u, size / workers) |_i| {\n-                comm::send(to_child, bytes(100u));\n+            for uint::range(0, size / workers) |_i| {\n+                comm::send(to_child, bytes(100));\n             }\n         };\n     }"}, {"sha": "e7f9312ce386e6f6557cd6208f7c9113f0ea6068", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -33,7 +33,7 @@ proto! pingpong_unbounded (\n \n // This stuff should go in libcore::pipes\n macro_rules! move_it (\n-    { $x:expr } => { let t <- *ptr::addr_of(&($x)); t }\n+    { $x:expr } => { let t <- *ptr::addr_of(&($x)); move t }\n )\n \n macro_rules! follow (\n@@ -42,8 +42,8 @@ macro_rules! follow (\n     } => (\n         |m| match move m {\n             $(Some($message($($x,)* move next)) => {\n-                let $next = next;\n-                $e })+\n+                let $next = move next;\n+                move $e })+\n                 _ => { fail }\n         }\n     );\n@@ -53,16 +53,16 @@ macro_rules! follow (\n     } => (\n         |m| match move m {\n             $(Some($message(move next)) => {\n-                let $next = next;\n-                $e })+\n+                let $next = move next;\n+                move $e })+\n                 _ => { fail }\n         }\n     )\n )\n \n fn switch<T: Send, Tb: Send, U>(+endp: pipes::RecvPacketBuffered<T, Tb>,\n                       f: fn(+v: Option<T>) -> U) -> U {\n-    f(pipes::try_recv(endp))\n+    f(pipes::try_recv(move endp))\n }\n \n // Here's the benchmark\n@@ -72,10 +72,10 @@ fn bounded(count: uint) {\n \n     let mut ch = do spawn_service(init) |ch| {\n         let mut count = count;\n-        let mut ch = ch;\n+        let mut ch = move ch;\n         while count > 0 {\n-            ch = switch(ch, follow! (\n-                ping -> next { server::pong(next) }\n+            ch = switch(move ch, follow! (\n+                ping -> next { server::pong(move next) }\n             ));\n \n             count -= 1;\n@@ -84,10 +84,10 @@ fn bounded(count: uint) {\n \n     let mut count = count;\n     while count > 0 {\n-        let ch_ = client::ping(ch);\n+        let ch_ = client::ping(move ch);\n \n-        ch = switch(ch_, follow! (\n-            pong -> next { next }\n+        ch = switch(move ch_, follow! (\n+            pong -> next { move next }\n         ));\n \n         count -= 1;\n@@ -99,10 +99,10 @@ fn unbounded(count: uint) {\n \n     let mut ch = do spawn_service(init) |ch| {\n         let mut count = count;\n-        let mut ch = ch;\n+        let mut ch = move ch;\n         while count > 0 {\n-            ch = switch(ch, follow! (\n-                ping -> next { server::pong(next) }\n+            ch = switch(move ch, follow! (\n+                ping -> next { server::pong(move next) }\n             ));\n \n             count -= 1;\n@@ -111,10 +111,10 @@ fn unbounded(count: uint) {\n \n     let mut count = count;\n     while count > 0 {\n-        let ch_ = client::ping(ch);\n+        let ch_ = client::ping(move ch);\n \n-        ch = switch(ch_, follow! (\n-            pong -> next { next }\n+        ch = switch(move ch_, follow! (\n+            pong -> next { move next }\n         ));\n \n         count -= 1;"}, {"sha": "9c5dd084d8492ff12c42b4d6460d374df0a96952", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -124,7 +124,7 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n    };\n \n    //comm::send(to_parent, fmt!(\"yay{%u}\", sz));\n-    to_parent.send(buffer);\n+    to_parent.send(move buffer);\n }\n \n // given a FASTA file on stdin, process sequence THREE\n@@ -143,25 +143,25 @@ fn main() {\n \n \n    // initialize each sequence sorter\n-   let sizes = ~[1u,2u,3u,4u,6u,12u,18u];\n+   let sizes = ~[1,2,3,4,6,12,18];\n     let streams = vec::map(sizes, |_sz| Some(stream()));\n-    let streams = vec::to_mut(streams);\n+    let streams = vec::to_mut(move streams);\n     let mut from_child = ~[];\n     let to_child   = vec::mapi(sizes, |ii, sz| {\n         let sz = *sz;\n         let mut stream = None;\n         stream <-> streams[ii];\n-        let (to_parent_, from_child_) = option::unwrap(stream);\n+        let (to_parent_, from_child_) = option::unwrap(move stream);\n \n-        from_child.push(from_child_);\n+        from_child.push(move from_child_);\n \n         let (to_child, from_parent) = pipes::stream();\n \n-        do task::spawn_with(from_parent) |from_parent| {\n+        do task::spawn_with(move from_parent) |move to_parent_, from_parent| {\n             make_sequence_processor(sz, from_parent, to_parent_);\n         };\n         \n-        to_child\n+        move to_child\n     });\n          \n    "}, {"sha": "a776c1322d380897b011978429b7aecc6a98cce9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -34,15 +34,15 @@ fn fib(n: int) -> int {\n         } else {\n             let p = pipes::PortSet();\n             let ch = p.chan();\n-            task::spawn(|| pfib(ch, n - 1) );\n+            task::spawn(|move ch| pfib(ch, n - 1) );\n             let ch = p.chan();\n-            task::spawn(|| pfib(ch, n - 2) );\n+            task::spawn(|move ch| pfib(ch, n - 2) );\n             c.send(p.recv() + p.recv());\n         }\n     }\n \n     let (ch, p) = pipes::stream();\n-    let t = task::spawn(|| pfib(ch, n) );\n+    let _t = task::spawn(|move ch| pfib(ch, n) );\n     p.recv()\n }\n \n@@ -73,7 +73,7 @@ fn stress(num_tasks: int) {\n     let mut results = ~[];\n     for range(0, num_tasks) |i| {\n         do task::task().future_result(|+r| {\n-            results.push(r);\n+            results.push(move r);\n         }).spawn {\n             stress_task(i);\n         }\n@@ -104,7 +104,7 @@ fn main() {\n         let out = io::stdout();\n \n         for range(1, max + 1) |n| {\n-            for range(0, num_trials) |i| {\n+            for range(0, num_trials) |_i| {\n                 let start = time::precise_time_ns();\n                 let fibn = fib(n);\n                 let stop = time::precise_time_ns();"}, {"sha": "55d75ff7c82d3c9300f6317f4ed80895ac11ad3d", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -78,7 +78,8 @@ fn recurse_or_fail(depth: int, st: Option<st>) {\n                 box: @Cons((), st.box),\n                 unique: ~Cons((), @*st.unique),\n                 fn_box: fn@() -> @nillist { @Cons((), fn_box()) },\n-                fn_unique: fn~() -> ~nillist { ~Cons((), @*fn_unique()) },\n+                fn_unique: fn~(move fn_unique) -> ~nillist\n+                    { ~Cons((), @*fn_unique()) },\n                 tuple: (@Cons((), st.tuple.first()),\n                         ~Cons((), @*st.tuple.second())),\n                 vec: st.vec + ~[@Cons((), st.vec.last())],\n@@ -87,6 +88,6 @@ fn recurse_or_fail(depth: int, st: Option<st>) {\n           }\n         };\n \n-        recurse_or_fail(depth, Some(st));\n+        recurse_or_fail(depth, Some(move st));\n     }\n }"}, {"sha": "09e6f23004a12a06072a604b4e7e653f138da5d4", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -9,14 +9,14 @@ fn child_generation(gens_left: uint, -c: pipes::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    let c = ~mut Some(c);\n-    do task::spawn_supervised {\n+    let c = ~mut Some(move c);\n+    do task::spawn_supervised |move c| {\n         let c = option::swap_unwrap(c);\n         if gens_left & 1 == 1 {\n             task::yield(); // shake things up a bit\n         }\n         if gens_left > 0 {\n-            child_generation(gens_left - 1, c); // recurse\n+            child_generation(gens_left - 1, move c); // recurse\n         } else {\n             c.send(())\n         }\n@@ -27,14 +27,14 @@ fn main() {\n     let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         ~[~\"\", ~\"100\"]\n     } else {\n         copy args\n     };\n \n     let (c,p) = pipes::stream();\n-    child_generation(uint::from_str(args[1]).get(), c);\n+    child_generation(uint::from_str(args[1]).get(), move c);\n     if p.try_recv().is_none() {\n         fail ~\"it happened when we slumbered\";\n     }"}, {"sha": "f148d595f9d5a0a9df1c26c6e3134b5c868de5a2", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -31,9 +31,9 @@ fn grandchild_group(num_tasks: uint) {\n \n fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     let mut res = None;\n-    task::task().future_result(|+r| res = Some(r)).supervised().spawn(f);\n+    task::task().future_result(|+r| res = Some(move r)).supervised().spawn(move f);\n     error!(\"%s group waiting\", myname);\n-    let x = future::get(&option::unwrap(res));\n+    let x = future::get(&option::unwrap(move res));\n     assert x == task::Success;\n }\n "}, {"sha": "3fe192ed36391e3be804bfcc843ca1a6a9ea53a6", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f3a75b6501c987ffb34b3fb7510e0139c64bb8/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=f5f3a75b6501c987ffb34b3fb7510e0139c64bb8", "patch": "@@ -30,7 +30,7 @@ use cmp::Eq;\n use to_bytes::IterBytes;\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n )\n \n trait word_reader {\n@@ -90,19 +90,19 @@ impl<T> box<T> {\n     fn swap(f: fn(+v: T) -> T) {\n         let mut tmp = None;\n         self.contents <-> tmp;\n-        self.contents = Some(f(option::unwrap(tmp)));\n+        self.contents = Some(f(option::unwrap(move tmp)));\n     }\n \n     fn unwrap() -> T {\n         let mut tmp = None;\n         self.contents <-> tmp;\n-        option::unwrap(tmp)\n+        option::unwrap(move tmp)\n     }\n }\n \n fn box<T>(+x: T) -> box<T> {\n     box {\n-        contents: Some(x)\n+        contents: Some(move x)\n     }\n }\n \n@@ -151,13 +151,13 @@ mod map_reduce {\n         let mut tasks = ~[];\n         for inputs.each |i| {\n             let (ctrl, ctrl_server) = ctrl_proto::init();\n-            let ctrl = box(ctrl);\n+            let ctrl = box(move ctrl);\n             let i = copy *i;\n             let m = copy *map;\n-            tasks.push(spawn_joinable(|move i| map_task(m, &ctrl, i)));\n-            ctrls.push(ctrl_server);\n+            tasks.push(spawn_joinable(|move ctrl, move i| map_task(m, &ctrl, i)));\n+            ctrls.push(move ctrl_server);\n         }\n-        return tasks;\n+        move tasks\n     }\n \n     fn map_task<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send, V: Copy Send>(\n@@ -177,8 +177,8 @@ mod map_reduce {\n               Some(_c) => { c = Some(_c); }\n               None => {\n                 do ctrl.swap |ctrl| {\n-                    let ctrl = ctrl_proto::client::find_reducer(ctrl, *key);\n-                    match pipes::recv(ctrl) {\n+                    let ctrl = ctrl_proto::client::find_reducer(move ctrl, *key);\n+                    match pipes::recv(move ctrl) {\n                       ctrl_proto::reducer(c_, ctrl) => {\n                         c = Some(c_);\n                         move_out!(ctrl)\n@@ -250,12 +250,12 @@ mod map_reduce {\n         let mut num_mappers = vec::len(inputs) as int;\n \n         while num_mappers > 0 {\n-            let (_ready, message, ctrls) = pipes::select(ctrl);\n-            match option::unwrap(message) {\n+            let (_ready, message, ctrls) = pipes::select(move ctrl);\n+            match option::unwrap(move message) {\n               ctrl_proto::mapper_done => {\n                 // error!(\"received mapper terminated.\");\n                 num_mappers -= 1;\n-                ctrl = ctrls;\n+                ctrl = move ctrls;\n               }\n               ctrl_proto::find_reducer(k, cc) => {\n                 let c;\n@@ -271,13 +271,13 @@ mod map_reduce {\n                     let p = Port();\n                     let ch = Chan(&p);\n                     let r = reduce, kk = k;\n-                    tasks.push(spawn_joinable(|| reduce_task(~r, kk, ch) ));\n+                    tasks.push(spawn_joinable(|move r| reduce_task(~r, kk, ch) ));\n                     c = recv(p);\n                     reducers.insert(k, c);\n                   }\n                 }\n                 ctrl = vec::append_one(\n-                    ctrls,\n+                    move ctrls,\n                     ctrl_proto::server::reducer(move_out!(cc), c));\n               }\n             }"}]}