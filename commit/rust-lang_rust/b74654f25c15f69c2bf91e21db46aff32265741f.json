{"sha": "b74654f25c15f69c2bf91e21db46aff32265741f", "node_id": "C_kwDOAAsO6NoAKGI3NDY1NGYyNWMxNWY2OWMyYmY5MWUyMWRiNDZhZmYzMjI2NTc0MWY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-08-31T10:27:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-08-31T10:27:50Z"}, "message": "Bump UI test dependency", "tree": {"sha": "2af21ccd4b3a2bd69e876661d645aae6f0a77632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2af21ccd4b3a2bd69e876661d645aae6f0a77632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b74654f25c15f69c2bf91e21db46aff32265741f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b74654f25c15f69c2bf91e21db46aff32265741f", "html_url": "https://github.com/rust-lang/rust/commit/b74654f25c15f69c2bf91e21db46aff32265741f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b74654f25c15f69c2bf91e21db46aff32265741f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/284b59c4dc89ef7fe44ac0b372394081fcbb88f5", "html_url": "https://github.com/rust-lang/rust/commit/284b59c4dc89ef7fe44ac0b372394081fcbb88f5"}], "stats": {"total": 127, "additions": 43, "deletions": 84}, "files": [{"sha": "1ce41f0a85e34a5c10f9c7a8c79122993be15222", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b74654f25c15f69c2bf91e21db46aff32265741f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b74654f25c15f69c2bf91e21db46aff32265741f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b74654f25c15f69c2bf91e21db46aff32265741f", "patch": "@@ -32,15 +32,6 @@ dependencies = [\n  \"memchr\",\n ]\n \n-[[package]]\n-name = \"ansi_term\"\n-version = \"0.12.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\n-dependencies = [\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n@@ -229,21 +220,11 @@ dependencies = [\n  \"lazy_static\",\n ]\n \n-[[package]]\n-name = \"ctor\"\n-version = \"0.1.22\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f877be4f7c9f246b183111634f75baa039715e3f46ce860677d3b19a69fb229c\"\n-dependencies = [\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"diff\"\n-version = \"0.1.12\"\n+version = \"0.1.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n+checksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n \n [[package]]\n name = \"env_logger\"\n@@ -464,15 +445,6 @@ version = \"1.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n \n-[[package]]\n-name = \"output_vt100\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66\"\n-dependencies = [\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"owo-colors\"\n version = \"3.4.0\"\n@@ -525,18 +497,6 @@ version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ed0cfbc8191465bed66e1718596ee0b0b35d5ee1f41c5df2189d0fe8bde535ba\"\n \n-[[package]]\n-name = \"pretty_assertions\"\n-version = \"1.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c89f989ac94207d048d92db058e4f6ec7342b0971fc58d1271ca148b799b3563\"\n-dependencies = [\n- \"ansi_term\",\n- \"ctor\",\n- \"diff\",\n- \"output_vt100\",\n-]\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.39\"\n@@ -794,16 +754,16 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.1.1\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"43a7bfdb147f57c498ca629c7802b57899de0bb82ae36b6f01f1540da41832f1\"\n+checksum = \"ee6b579f4a09b0cf15b910e8edbaaae5bc66d0674a892ec4dbd5e8a5d094d979\"\n dependencies = [\n  \"cargo_metadata\",\n  \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n+ \"diff\",\n  \"lazy_static\",\n- \"pretty_assertions\",\n  \"regex\",\n  \"rustc_version\",\n  \"serde\","}, {"sha": "fee63359005e286bbcd2f4a6ec1496044a3eff94", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b74654f25c15f69c2bf91e21db46aff32265741f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b74654f25c15f69c2bf91e21db46aff32265741f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b74654f25c15f69c2bf91e21db46aff32265741f", "patch": "@@ -40,7 +40,7 @@ libc = \"0.2\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.1\"\n+ui_test = \"0.2\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }\n lazy_static = \"1.4.0\""}, {"sha": "924d253b4cfc035e3a4bbe5a3d97a9c270b80531", "filename": "tests/compiletest.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b74654f25c15f69c2bf91e21db46aff32265741f/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74654f25c15f69c2bf91e21db46aff32265741f/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=b74654f25c15f69c2bf91e21db46aff32265741f", "patch": "@@ -1,7 +1,7 @@\n use colored::*;\n use regex::Regex;\n use std::path::{Path, PathBuf};\n-use std::{env, ffi::OsString, process::Command};\n+use std::{env, process::Command};\n use ui_test::{color_eyre::Result, Config, DependencyBuilder, Mode, OutputConflictHandling};\n \n fn miri_path() -> PathBuf {\n@@ -43,30 +43,40 @@ fn run_tests(\n     target: Option<String>,\n     with_dependencies: bool,\n ) -> Result<()> {\n+    let mut config = Config {\n+        target,\n+        stderr_filters: STDERR.clone(),\n+        stdout_filters: STDOUT.clone(),\n+        root_dir: PathBuf::from(path),\n+        mode,\n+        program: miri_path(),\n+        quiet: false,\n+        ..Config::default()\n+    };\n+\n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n-    let mut flags: Vec<OsString> = Vec::new();\n-    flags.push(\"--edition\".into());\n-    flags.push(\"2018\".into());\n+    config.args.push(\"--edition\".into());\n+    config.args.push(\"2018\".into());\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n         // (We often get warnings when e.g. a feature gets stabilized or some lint gets added/improved.)\n-        flags.push(\"-Astable-features\".into());\n-        flags.push(\"-Aunused\".into());\n+        config.args.push(\"-Astable-features\".into());\n+        config.args.push(\"-Aunused\".into());\n     } else {\n-        flags.push(\"-Dwarnings\".into());\n-        flags.push(\"-Dunused\".into());\n+        config.args.push(\"-Dwarnings\".into());\n+        config.args.push(\"-Dunused\".into());\n     }\n     if let Ok(extra_flags) = env::var(\"MIRIFLAGS\") {\n         for flag in extra_flags.split_whitespace() {\n-            flags.push(flag.into());\n+            config.args.push(flag.into());\n         }\n     }\n-    flags.push(\"-Zui-testing\".into());\n-    if let Some(target) = &target {\n-        flags.push(\"--target\".into());\n-        flags.push(target.into());\n+    config.args.push(\"-Zui-testing\".into());\n+    if let Some(target) = &config.target {\n+        config.args.push(\"--target\".into());\n+        config.args.push(target.into());\n     }\n \n     // If we're on linux, and we're testing the extern-so functionality,\n@@ -76,45 +86,35 @@ fn run_tests(\n         let so_file_path = build_so_for_c_ffi_tests();\n         let mut flag = std::ffi::OsString::from(\"-Zmiri-extern-so-file=\");\n         flag.push(so_file_path.into_os_string());\n-        flags.push(flag);\n+        config.args.push(flag);\n     }\n \n     let skip_ui_checks = env::var_os(\"MIRI_SKIP_UI_CHECKS\").is_some();\n \n-    let output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n+    config.output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n         (false, false) => OutputConflictHandling::Error,\n         (true, false) => OutputConflictHandling::Bless,\n         (false, true) => OutputConflictHandling::Ignore,\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n-    // Pass on all unknown arguments as filters.\n-    let mut quiet = false;\n-    let path_filter = std::env::args().skip(1).filter(|arg| {\n+    // Handle command-line arguments.\n+    config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n         match &**arg {\n             \"--quiet\" => {\n-                quiet = true;\n+                config.quiet = true;\n                 false\n             }\n             _ => true,\n         }\n-    });\n+    }));\n \n     let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n \n-    let config = Config {\n-        args: flags,\n-        target,\n-        stderr_filters: STDERR.clone(),\n-        stdout_filters: STDOUT.clone(),\n-        root_dir: PathBuf::from(path),\n-        mode,\n-        path_filter: path_filter.collect(),\n-        program: miri_path(),\n-        output_conflict_handling,\n-        dependencies_crate_manifest_path: (with_dependencies && use_std)\n-            .then(|| Path::new(\"test_dependencies\").join(\"Cargo.toml\")),\n-        dependency_builder: Some(DependencyBuilder {\n+    if with_dependencies && use_std {\n+        config.dependencies_crate_manifest_path =\n+            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n+        config.dependency_builder = Some(DependencyBuilder {\n             program: std::env::var_os(\"CARGO\").unwrap().into(),\n             args: vec![\n                 \"run\".into(),\n@@ -124,9 +124,8 @@ fn run_tests(\n                 \"miri\".into(),\n             ],\n             envs: vec![],\n-        }),\n-        quiet,\n-    };\n+        });\n+    }\n     ui_test::run_tests(config)\n }\n \n@@ -214,10 +213,10 @@ fn main() -> Result<()> {\n     ui(Mode::Pass, \"tests/pass\", WithoutDependencies)?;\n     ui(Mode::Pass, \"tests/pass-dep\", WithDependencies)?;\n     ui(Mode::Panic, \"tests/panic\", WithDependencies)?;\n-    ui(Mode::Fail, \"tests/fail\", WithDependencies)?;\n+    ui(Mode::Fail { require_patterns: true }, \"tests/fail\", WithDependencies)?;\n     if cfg!(target_os = \"linux\") {\n         ui(Mode::Pass, \"tests/extern-so/pass\", WithoutDependencies)?;\n-        ui(Mode::Fail, \"tests/extern-so/fail\", WithDependencies)?;\n+        ui(Mode::Fail { require_patterns: true }, \"tests/extern-so/fail\", WithDependencies)?;\n     }\n \n     Ok(())"}]}