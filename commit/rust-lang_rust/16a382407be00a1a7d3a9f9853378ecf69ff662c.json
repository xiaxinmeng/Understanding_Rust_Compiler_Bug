{"sha": "16a382407be00a1a7d3a9f9853378ecf69ff662c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YTM4MjQwN2JlMDBhMWE3ZDNhOWY5ODUzMzc4ZWNmNjlmZjY2MmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-12T00:38:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:25:08Z"}, "message": "pass along `user_self_ty`", "tree": {"sha": "2dc27abf92f65a4605a85f9b1a033c4fe1beea18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc27abf92f65a4605a85f9b1a033c4fe1beea18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a382407be00a1a7d3a9f9853378ecf69ff662c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a382407be00a1a7d3a9f9853378ecf69ff662c", "html_url": "https://github.com/rust-lang/rust/commit/16a382407be00a1a7d3a9f9853378ecf69ff662c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a382407be00a1a7d3a9f9853378ecf69ff662c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547182ea9463cdc4cf72f0af1372f4db17f700e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/547182ea9463cdc4cf72f0af1372f4db17f700e8", "html_url": "https://github.com/rust-lang/rust/commit/547182ea9463cdc4cf72f0af1372f4db17f700e8"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "c472aae4f6b72795083c6c25a59196cd074b0a3d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/16a382407be00a1a7d3a9f9853378ecf69ff662c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a382407be00a1a7d3a9f9853378ecf69ff662c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=16a382407be00a1a7d3a9f9853378ecf69ff662c", "patch": "@@ -95,7 +95,8 @@ use rustc::infer::opaque_types::OpaqueTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::mir::interpret::{ConstValue, GlobalId};\n-use rustc::ty::subst::{CanonicalUserSubsts, UnpackedKind, Subst, Substs, UserSubsts};\n+use rustc::ty::subst::{CanonicalUserSubsts, UnpackedKind, Subst, Substs,\n+                       UserSelfTy, UserSubsts};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -2166,7 +2167,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// This should be invoked **before any unifications have\n     /// occurred**, so that annotations like `Vec<_>` are preserved\n     /// properly.\n-    pub fn write_user_substs_from_substs(&self, hir_id: hir::HirId, substs: &'tcx Substs<'tcx>) {\n+    pub fn write_user_substs_from_substs(\n+        &self,\n+        hir_id: hir::HirId,\n+        substs: &'tcx Substs<'tcx>,\n+        user_self_ty: Option<UserSelfTy<'tcx>>,\n+    ) {\n         debug!(\n             \"write_user_substs_from_substs({:?}, {:?}) in fcx {}\",\n             hir_id,\n@@ -2177,7 +2183,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if !substs.is_noop() {\n             let user_substs = self.infcx.canonicalize_response(&UserSubsts {\n                 substs,\n-                user_self_ty: None, // TODO -- fix in future commit\n+                user_self_ty,\n             });\n             debug!(\"instantiate_value_path: user_substs = {:?}\", user_substs);\n             self.write_user_substs(hir_id, user_substs);\n@@ -3623,7 +3629,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some((variant, did, substs)) = variant {\n             debug!(\"check_struct_path: did={:?} substs={:?}\", did, substs);\n             let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n-            self.write_user_substs_from_substs(hir_id, substs);\n+            self.write_user_substs_from_substs(hir_id, substs, None);\n \n             // Check bounds on type arguments used in the path.\n             let bounds = self.instantiate_bounds(path_span, did, substs);\n@@ -5011,7 +5017,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let path_segs = self.def_ids_for_path_segments(segments, def);\n \n-        let mut ufcs_associated = None;\n+        let mut user_self_ty = None;\n         match def {\n             Def::Method(def_id) |\n             Def::AssociatedConst(def_id) => {\n@@ -5020,12 +5026,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::TraitContainer(trait_did) => {\n                         callee::check_legal_trait_for_method_call(self.tcx, span, trait_did)\n                     }\n-                    ty::ImplContainer(_) => {}\n-                }\n-                if segments.len() == 1 {\n-                    // `<T>::assoc` will end up here, and so can `T::assoc`.\n-                    let self_ty = self_ty.expect(\"UFCS sugared assoc missing Self\");\n-                    ufcs_associated = Some((container, self_ty));\n+                    ty::ImplContainer(impl_def_id) => {\n+                        if segments.len() == 1 {\n+                            // `<T>::assoc` will end up here, and so\n+                            // can `T::assoc`. It this came from an\n+                            // inherent impl, we need to record the\n+                            // `T` for posterity (see `UserSelfTy` for\n+                            // details).\n+                            let self_ty = self_ty.expect(\"UFCS sugared assoc missing Self\");\n+                            user_self_ty = Some(UserSelfTy {\n+                                impl_def_id,\n+                                self_ty,\n+                            });\n+                        }\n+                    }\n                 }\n             }\n             _ => {}\n@@ -5179,6 +5193,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         assert!(!substs.has_escaping_regions());\n         assert!(!ty.has_escaping_regions());\n \n+        // Write the \"user substs\" down first thing for later.\n+        let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n+        self.write_user_substs_from_substs(hir_id, substs, user_self_ty);\n+\n         // Add all the obligations that are required, substituting and\n         // normalized appropriately.\n         let bounds = self.instantiate_bounds(span, def_id, &substs);\n@@ -5190,7 +5208,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // the referenced item.\n         let ty_substituted = self.instantiate_type_scheme(span, &substs, &ty);\n \n-        if let Some((ty::ImplContainer(impl_def_id), self_ty)) = ufcs_associated {\n+        if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n             // In the case of `Foo<T>::method` and `<Foo<T>>::method`, if `method`\n             // is inherent, there is no `Self` parameter, instead, the impl needs\n             // type parameters, which we can infer by unifying the provided `Self`\n@@ -5214,16 +5232,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"instantiate_value_path: type of {:?} is {:?}\",\n                node_id,\n                ty_substituted);\n-        let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n         self.write_substs(hir_id, substs);\n \n-        debug!(\n-            \"instantiate_value_path: id={:?} substs={:?}\",\n-            node_id,\n-            substs,\n-        );\n-        self.write_user_substs_from_substs(hir_id, substs);\n-\n         (ty_substituted, new_def)\n     }\n "}]}