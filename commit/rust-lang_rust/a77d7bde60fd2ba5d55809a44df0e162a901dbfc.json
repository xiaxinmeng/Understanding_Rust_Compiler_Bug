{"sha": "a77d7bde60fd2ba5d55809a44df0e162a901dbfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3N2Q3YmRlNjBmZDJiYTVkNTU4MDlhNDRkZjBlMTYyYTkwMWRiZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-18T06:52:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-18T06:52:55Z"}, "message": "Auto merge of #32207 - achanda:ipv6-doc, r=alexcrichton\n\nAdd is_documentation for IPv6\n\nThis function returns true if the given IPv6 is reserved for\ndocumentation. Also, reject this block in the is_global check", "tree": {"sha": "71064ff0378c58d1d90e4cd8bda75be5c8fd7e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71064ff0378c58d1d90e4cd8bda75be5c8fd7e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77d7bde60fd2ba5d55809a44df0e162a901dbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77d7bde60fd2ba5d55809a44df0e162a901dbfc", "html_url": "https://github.com/rust-lang/rust/commit/a77d7bde60fd2ba5d55809a44df0e162a901dbfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77d7bde60fd2ba5d55809a44df0e162a901dbfc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12b4e4e3266644d519647afc2943cefa2026e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12b4e4e3266644d519647afc2943cefa2026e07", "html_url": "https://github.com/rust-lang/rust/commit/b12b4e4e3266644d519647afc2943cefa2026e07"}, {"sha": "aa22b4e7c86729a51cc19d080fa34bbb77bc9cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa22b4e7c86729a51cc19d080fa34bbb77bc9cf9", "html_url": "https://github.com/rust-lang/rust/commit/aa22b4e7c86729a51cc19d080fa34bbb77bc9cf9"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "678b581a9041b9b88c54e6cb26d25a1dc45133eb", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a77d7bde60fd2ba5d55809a44df0e162a901dbfc/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77d7bde60fd2ba5d55809a44df0e162a901dbfc/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=a77d7bde60fd2ba5d55809a44df0e162a901dbfc", "patch": "@@ -363,6 +363,12 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n \n+    /// Returns true if this is an address reserved for documentation\n+    /// This is defined to be 2001:db8::/32 in RFC RFC 3849\n+    pub fn is_documentation(&self) -> bool {\n+        (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n+    }\n+\n     /// Returns true if the address is a globally routable unicast address.\n     ///\n     /// The following return false:\n@@ -372,11 +378,12 @@ impl Ipv6Addr {\n     /// - the (deprecated) site-local addresses\n     /// - unique local addresses\n     /// - the unspecified address\n+    /// - the address range reserved for documentation\n     pub fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n             && !self.is_loopback() && !self.is_unicast_link_local()\n             && !self.is_unicast_site_local() && !self.is_unique_local()\n-            && !self.is_unspecified()\n+            && !self.is_unspecified() && !self.is_documentation()\n     }\n \n     /// Returns the address's multicast scope if the address is multicast.\n@@ -752,7 +759,7 @@ mod tests {\n     fn ipv6_properties() {\n         fn check(str_addr: &str, unspec: bool, loopback: bool,\n                  unique_local: bool, global: bool,\n-                 u_link_local: bool, u_site_local: bool, u_global: bool,\n+                 u_link_local: bool, u_site_local: bool, u_global: bool, u_doc: bool,\n                  m_scope: Option<Ipv6MulticastScope>) {\n             let ip: Ipv6Addr = str_addr.parse().unwrap();\n             assert_eq!(str_addr, ip.to_string());\n@@ -764,43 +771,46 @@ mod tests {\n             assert_eq!(ip.is_unicast_link_local(), u_link_local);\n             assert_eq!(ip.is_unicast_site_local(), u_site_local);\n             assert_eq!(ip.is_unicast_global(), u_global);\n+            assert_eq!(ip.is_documentation(), u_doc);\n             assert_eq!(ip.multicast_scope(), m_scope);\n             assert_eq!(ip.is_multicast(), m_scope.is_some());\n         }\n \n-        //    unspec loopbk uniqlo global unill  unisl  uniglo mscope\n+        //    unspec loopbk uniqlo global unill  unisl  uniglo  doc    mscope\n         check(\"::\",\n-              true,  false, false, false,  false, false, false,  None);\n+              true,  false, false, false,  false, false, false, false, None);\n         check(\"::1\",\n-              false, true,  false, false, false, false, false, None);\n+              false, true,  false, false, false, false,  false, false, None);\n         check(\"::0.0.0.2\",\n-              false, false, false, true,  false, false, true,  None);\n+              false, false, false, true,  false, false, true,  false, None);\n         check(\"1::\",\n-              false, false, false, true,  false, false, true,  None);\n+              false, false, false, true,  false, false, true,  false, None);\n         check(\"fc00::\",\n-              false, false, true,  false, false, false, false, None);\n+              false, false, true,  false, false, false, false, false, None);\n         check(\"fdff:ffff::\",\n-              false, false, true,  false, false, false, false, None);\n+              false, false, true,  false, false, false, false, false, None);\n         check(\"fe80:ffff::\",\n-              false, false, false, false, true,  false, false, None);\n+              false, false, false, false, true,  false, false, false, None);\n         check(\"febf:ffff::\",\n-              false, false, false, false, true,  false, false, None);\n+              false, false, false, false, true,  false, false, false, None);\n         check(\"fec0::\",\n-              false, false, false, false, false, true,  false, None);\n+              false, false, false, false, false, true,  false, false, None);\n         check(\"ff01::\",\n-              false, false, false, false, false, false, false, Some(InterfaceLocal));\n+              false, false, false, false, false, false, false, false, Some(InterfaceLocal));\n         check(\"ff02::\",\n-              false, false, false, false, false, false, false, Some(LinkLocal));\n+              false, false, false, false, false, false, false, false, Some(LinkLocal));\n         check(\"ff03::\",\n-              false, false, false, false, false, false, false, Some(RealmLocal));\n+              false, false, false, false, false, false, false, false, Some(RealmLocal));\n         check(\"ff04::\",\n-              false, false, false, false, false, false, false, Some(AdminLocal));\n+              false, false, false, false, false, false, false, false, Some(AdminLocal));\n         check(\"ff05::\",\n-              false, false, false, false, false, false, false, Some(SiteLocal));\n+              false, false, false, false, false, false, false, false, Some(SiteLocal));\n         check(\"ff08::\",\n-              false, false, false, false, false, false, false, Some(OrganizationLocal));\n+              false, false, false, false, false, false, false, false, Some(OrganizationLocal));\n         check(\"ff0e::\",\n-              false, false, false, true,  false, false, false, Some(Global));\n+              false, false, false, true,  false, false, false, false, Some(Global));\n+        check(\"2001:db8:85a3::8a2e:370:7334\",\n+              false, false, false, false, false, false, false, true, None);\n     }\n \n     #[test]"}]}