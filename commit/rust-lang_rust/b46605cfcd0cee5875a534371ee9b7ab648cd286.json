{"sha": "b46605cfcd0cee5875a534371ee9b7ab648cd286", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NjYwNWNmY2QwY2VlNTg3NWE1MzQzNzFlZTliN2FiNjQ4Y2QyODY=", "commit": {"author": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-03-07T10:18:01Z"}, "committer": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-03-07T10:18:01Z"}, "message": "Update crate graph to only use subcrates of rustc_driver", "tree": {"sha": "a406afa9afec2496180cbe4a281ecea1142846b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a406afa9afec2496180cbe4a281ecea1142846b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46605cfcd0cee5875a534371ee9b7ab648cd286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46605cfcd0cee5875a534371ee9b7ab648cd286", "html_url": "https://github.com/rust-lang/rust/commit/b46605cfcd0cee5875a534371ee9b7ab648cd286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46605cfcd0cee5875a534371ee9b7ab648cd286/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7513867aa21a638eac86c72c8eae0f9ba834380d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7513867aa21a638eac86c72c8eae0f9ba834380d", "html_url": "https://github.com/rust-lang/rust/commit/7513867aa21a638eac86c72c8eae0f9ba834380d"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "695fac3982b0c734698511347494182ed726eb32", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b46605cfcd0cee5875a534371ee9b7ab648cd286/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46605cfcd0cee5875a534371ee9b7ab648cd286/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=b46605cfcd0cee5875a534371ee9b7ab648cd286", "patch": "@@ -2,11 +2,7 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{\n-    fmt, fs,\n-    path::{Component, Path},\n-    process::Command,\n-};\n+use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n \n use anyhow::{Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n@@ -446,37 +442,40 @@ fn cargo_to_crate_graph(\n     let mut rustc_pkg_crates = FxHashMap::default();\n \n     // If the user provided a path to rustc sources, we add all the rustc_private crates\n-    // and create dependencies on them for the crates in the current workspace\n+    // and create dependencies on them for the crates which opt-in to that\n     if let Some(rustc_workspace) = rustc {\n-        for pkg in rustc_workspace.packages() {\n-            for &tgt in rustc_workspace[pkg].targets.iter() {\n-                if rustc_workspace[tgt].kind != TargetKind::Lib {\n-                    continue;\n-                }\n-                // Exclude alloc / core / std\n-                if rustc_workspace[tgt]\n-                    .root\n-                    .components()\n-                    .any(|c| c == Component::Normal(\"library\".as_ref()))\n-                {\n-                    continue;\n+        // rustc-dev crates start from 'rustc_driver'\n+        // Therefore, we collect all crates which are transitive dependencies of rustc_driver\n+        if let Some(root_pkg) = rustc_workspace\n+            .packages()\n+            .find(|package| rustc_workspace[*package].name == \"rustc_driver\")\n+        {\n+            let mut queue = VecDeque::new();\n+            queue.push_back(root_pkg);\n+            while let Some(pkg) = queue.pop_front() {\n+                for dep in &rustc_workspace[pkg].dependencies {\n+                    queue.push_back(dep.pkg);\n                 }\n-\n-                if let Some(file_id) = load(&rustc_workspace[tgt].root) {\n-                    let crate_id = add_target_crate_root(\n-                        &mut crate_graph,\n-                        &rustc_workspace[pkg],\n-                        rustc_build_data_map.and_then(|it| it.get(&rustc_workspace[pkg].id)),\n-                        &cfg_options,\n-                        proc_macro_loader,\n-                        file_id,\n-                    );\n-                    pkg_to_lib_crate.insert(pkg, crate_id);\n-                    // Add dependencies on the core / std / alloc for rustc\n-                    for (name, krate) in public_deps.iter() {\n-                        add_dep(&mut crate_graph, crate_id, name.clone(), *krate);\n+                for &tgt in rustc_workspace[pkg].targets.iter() {\n+                    if rustc_workspace[tgt].kind != TargetKind::Lib {\n+                        continue;\n+                    }\n+                    if let Some(file_id) = load(&rustc_workspace[tgt].root) {\n+                        let crate_id = add_target_crate_root(\n+                            &mut crate_graph,\n+                            &rustc_workspace[pkg],\n+                            rustc_build_data_map.and_then(|it| it.get(&rustc_workspace[pkg].id)),\n+                            &cfg_options,\n+                            proc_macro_loader,\n+                            file_id,\n+                        );\n+                        pkg_to_lib_crate.insert(pkg, crate_id);\n+                        // Add dependencies on the core / std / alloc for rustc\n+                        for (name, krate) in public_deps.iter() {\n+                            add_dep(&mut crate_graph, crate_id, name.clone(), *krate);\n+                        }\n+                        rustc_pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                     }\n-                    rustc_pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                 }\n             }\n         }\n@@ -493,7 +492,7 @@ fn cargo_to_crate_graph(\n             }\n         }\n \n-        // Add dependencies for all the crates of the current workspace to rustc_private libraries\n+        // Add dependencies for all crates which opt in to rustc_private libraries\n         for dep in rustc_workspace.packages() {\n             let name = CrateName::normalize_dashes(&rustc_workspace[dep].name);\n \n@@ -507,13 +506,14 @@ fn cargo_to_crate_graph(\n                         continue;\n                     }\n                     for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+                        // Avoid creating duplicate dependencies\n                         if !crate_graph[from].dependencies.iter().any(|d| d.name == name) {\n                             add_dep(&mut crate_graph, from, name.clone(), to);\n                         } else {\n-                            // eprintln!(\n-                            //     \"Skipped {} for {:?}\",\n-                            //     &name, &crate_graph[from].display_name\n-                            // );\n+                            eprintln!(\n+                                \"Skipped {} for {:?}\",\n+                                &name, &crate_graph[from].display_name\n+                            );\n                         }\n                     }\n                 }"}]}