{"sha": "eea16de9f70738e1ee19d6d73f0c74bc746a9633", "node_id": "C_kwDOAAsO6NoAKGVlYTE2ZGU5ZjcwNzM4ZTFlZTE5ZDZkNzNmMGM3NGJjNzQ2YTk2MzM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-04T20:43:36Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "replace hir().def_kind for def_kind query in rustc_passes\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "100c4386eb8c66285db858c27176d9f873a09c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/100c4386eb8c66285db858c27176d9f873a09c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea16de9f70738e1ee19d6d73f0c74bc746a9633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea16de9f70738e1ee19d6d73f0c74bc746a9633", "html_url": "https://github.com/rust-lang/rust/commit/eea16de9f70738e1ee19d6d73f0c74bc746a9633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea16de9f70738e1ee19d6d73f0c74bc746a9633/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90685c633357054dac6a91ecd0c14cbfc7a726a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90685c633357054dac6a91ecd0c14cbfc7a726a7", "html_url": "https://github.com/rust-lang/rust/commit/90685c633357054dac6a91ecd0c14cbfc7a726a7"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0e4df831f3fe71f4e8d4d16f0f75ce23957db87d", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea16de9f70738e1ee19d6d73f0c74bc746a9633/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea16de9f70738e1ee19d6d73f0c74bc746a9633/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=eea16de9f70738e1ee19d6d73f0c74bc746a9633", "patch": "@@ -88,7 +88,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n \n fn check_item<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n     let _: Option<_> = try {\n-        if !matches!(tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+        if !matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n             None?\n         }\n "}, {"sha": "55a67070a967455fd3586f4bba03cd4f816c0a5a", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eea16de9f70738e1ee19d6d73f0c74bc746a9633/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea16de9f70738e1ee19d6d73f0c74bc746a9633/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=eea16de9f70738e1ee19d6d73f0c74bc746a9633", "patch": "@@ -491,7 +491,7 @@ fn check_item<'tcx>(\n         worklist.push(id.def_id);\n     }\n \n-    match tcx.hir().def_kind(id.def_id) {\n+    match tcx.def_kind(id.def_id) {\n         DefKind::Enum => {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n@@ -544,7 +544,7 @@ fn check_item<'tcx>(\n \n fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, worklist: &mut Vec<LocalDefId>, id: hir::TraitItemId) {\n     use hir::TraitItemKind::{Const, Fn};\n-    if matches!(tcx.hir().def_kind(id.def_id), DefKind::AssocConst | DefKind::AssocFn) {\n+    if matches!(tcx.def_kind(id.def_id), DefKind::AssocConst | DefKind::AssocFn) {\n         let trait_item = tcx.hir().trait_item(id);\n         if matches!(trait_item.kind, Const(_, Some(_)) | Fn(_, hir::TraitFn::Provided(_)))\n             && has_allow_dead_code_or_lang_attr(tcx, trait_item.hir_id())\n@@ -559,7 +559,7 @@ fn check_foreign_item<'tcx>(\n     worklist: &mut Vec<LocalDefId>,\n     id: hir::ForeignItemId,\n ) {\n-    if matches!(tcx.hir().def_kind(id.def_id), DefKind::Static(_) | DefKind::Fn)\n+    if matches!(tcx.def_kind(id.def_id), DefKind::Static(_) | DefKind::Fn)\n         && has_allow_dead_code_or_lang_attr(tcx, id.hir_id())\n     {\n         worklist.push(id.def_id);"}, {"sha": "266e1315ce26df95c0095cacf78f7b79cc569e9b", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea16de9f70738e1ee19d6d73f0c74bc746a9633/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea16de9f70738e1ee19d6d73f0c74bc746a9633/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=eea16de9f70738e1ee19d6d73f0c74bc746a9633", "patch": "@@ -82,7 +82,7 @@ fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n \n     match entry_point_type(ctxt, id, at_root) {\n         EntryPointType::None => (),\n-        _ if !matches!(ctxt.tcx.hir().def_kind(id.def_id), DefKind::Fn) => {\n+        _ if !matches!(ctxt.tcx.def_kind(id.def_id), DefKind::Fn) => {\n             let attrs = ctxt.tcx.hir().attrs(id.hir_id());\n             if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::start) {\n                 throw_attr_err(&ctxt.tcx.sess, attr.span, \"start\");"}]}