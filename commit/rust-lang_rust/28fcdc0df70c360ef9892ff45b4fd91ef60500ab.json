{"sha": "28fcdc0df70c360ef9892ff45b4fd91ef60500ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZmNkYzBkZjcwYzM2MGVmOTg5MmZmNDViNGZkOTFlZjYwNTAwYWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:11:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:11:05Z"}, "message": "rollup merge of #23631: andersk/minstack-dlsym\n\nLinking `__pthread_get_minstack`, even weakly, was causing Debian\u2019s `dpkg-shlibdeps` to detect an unnecessarily strict versioned dependency on libc6.\n\nCloses #23628.", "tree": {"sha": "8f0088e0c58d123110758832560637d0e6a8a2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0088e0c58d123110758832560637d0e6a8a2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28fcdc0df70c360ef9892ff45b4fd91ef60500ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28fcdc0df70c360ef9892ff45b4fd91ef60500ab", "html_url": "https://github.com/rust-lang/rust/commit/28fcdc0df70c360ef9892ff45b4fd91ef60500ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28fcdc0df70c360ef9892ff45b4fd91ef60500ab/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef07e0797f346ead85682a35679a25d3751f526c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef07e0797f346ead85682a35679a25d3751f526c", "html_url": "https://github.com/rust-lang/rust/commit/ef07e0797f346ead85682a35679a25d3751f526c"}, {"sha": "737bb30f0af5b27785a006a91a8792a06478de87", "url": "https://api.github.com/repos/rust-lang/rust/commits/737bb30f0af5b27785a006a91a8792a06478de87", "html_url": "https://github.com/rust-lang/rust/commit/737bb30f0af5b27785a006a91a8792a06478de87"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "c66d86b76250f1221d6e01ce36205f5dc233830c", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/28fcdc0df70c360ef9892ff45b4fd91ef60500ab/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fcdc0df70c360ef9892ff45b4fd91ef60500ab/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=28fcdc0df70c360ef9892ff45b4fd91ef60500ab", "patch": "@@ -13,12 +13,14 @@\n use core::prelude::*;\n \n use cmp;\n+use dynamic_lib::DynamicLibrary;\n use ffi::CString;\n use io;\n use libc::consts::os::posix01::PTHREAD_STACK_MIN;\n use libc;\n use mem;\n use ptr;\n+use sync::{Once, ONCE_INIT};\n use sys::os;\n use thunk::Thunk;\n use time::Duration;\n@@ -314,26 +316,36 @@ pub fn sleep(dur: Duration) {\n // is created in an application with big thread-local storage requirements.\n // See #6233 for rationale and details.\n //\n-// Link weakly to the symbol for compatibility with older versions of glibc.\n-// Assumes that we've been dynamically linked to libpthread but that is\n-// currently always the case.  Note that you need to check that the symbol\n-// is non-null before calling it!\n+// Use dlsym to get the symbol value at runtime, both for\n+// compatibility with older versions of glibc, and to avoid creating\n+// dependencies on GLIBC_PRIVATE symbols.  Assumes that we've been\n+// dynamically linked to libpthread but that is currently always the\n+// case.  We previously used weak linkage (under the same assumption),\n+// but that caused Debian to detect an unnecessarily strict versioned\n+// dependency on libc6 (#23628).\n #[cfg(target_os = \"linux\")]\n fn min_stack_size(attr: *const libc::pthread_attr_t) -> libc::size_t {\n     type F = unsafe extern \"C\" fn(*const libc::pthread_attr_t) -> libc::size_t;\n-    extern {\n-        #[linkage = \"extern_weak\"]\n-        static __pthread_get_minstack: *const ();\n-    }\n-    if __pthread_get_minstack.is_null() {\n-        PTHREAD_STACK_MIN\n-    } else {\n-        unsafe { mem::transmute::<*const (), F>(__pthread_get_minstack)(attr) }\n+    static INIT: Once = ONCE_INIT;\n+    static mut __pthread_get_minstack: Option<F> = None;\n+\n+    INIT.call_once(|| {\n+        let lib = DynamicLibrary::open(None).unwrap();\n+        unsafe {\n+            if let Ok(f) = lib.symbol(\"__pthread_get_minstack\") {\n+                __pthread_get_minstack = Some(mem::transmute::<*const (), F>(f));\n+            }\n+        }\n+    });\n+\n+    match unsafe { __pthread_get_minstack } {\n+        None => PTHREAD_STACK_MIN,\n+        Some(f) => unsafe { f(attr) },\n     }\n }\n \n-// __pthread_get_minstack() is marked as weak but extern_weak linkage is\n-// not supported on OS X, hence this kludge...\n+// No point in looking up __pthread_get_minstack() on non-glibc\n+// platforms.\n #[cfg(not(target_os = \"linux\"))]\n fn min_stack_size(_: *const libc::pthread_attr_t) -> libc::size_t {\n     PTHREAD_STACK_MIN"}]}