{"sha": "ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTdiYzA4YmU5MWQ5MzFiNWM4ZWM2MmJjMzVjNDkxNWI2M2M4ZDU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-04-11T22:44:01Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-04-11T22:44:01Z"}, "message": "Merge pull request #896 from erikjohnston/fn_arg_one_line\n\nAdd fn_arg_one_line option", "tree": {"sha": "dfa15ed81e29ae68e0ab6c622e2eab1ebfab8cb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfa15ed81e29ae68e0ab6c622e2eab1ebfab8cb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "html_url": "https://github.com/rust-lang/rust/commit/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "492b26cf04b62ff372d5af4ba99e5d5f49079fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/492b26cf04b62ff372d5af4ba99e5d5f49079fba", "html_url": "https://github.com/rust-lang/rust/commit/492b26cf04b62ff372d5af4ba99e5d5f49079fba"}, {"sha": "6a82a5fb0eb523b8fda8058ddffa31fa6c25ca87", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a82a5fb0eb523b8fda8058ddffa31fa6c25ca87", "html_url": "https://github.com/rust-lang/rust/commit/6a82a5fb0eb523b8fda8058ddffa31fa6c25ca87"}], "stats": {"total": 459, "additions": 415, "deletions": 44}, "files": [{"sha": "84a23b6425d44e2caed3b86da7a715c7ce9b3179", "filename": "src/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -56,6 +56,17 @@ configuration_option_enum! { StructLitStyle:\n     // FIXME Maybe we should also have an option to align types.\n }\n \n+// How to style fn args.\n+configuration_option_enum! { FnArgLayoutStyle:\n+    // First line on the same line as the opening brace, all lines aligned with\n+    // the first line.\n+    Visual,\n+    // Put args on one line if they fit, or start a new line with block indent.\n+    Block,\n+    // First line is on a new line and all lines align with block indent.\n+    BlockAlways,\n+}\n+\n configuration_option_enum! { BlockIndentStyle:\n     // Same level as parent.\n     Inherit,\n@@ -309,7 +320,7 @@ create_config! {\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, true, \"If function argument parenthesis goes on a newline\";\n     fn_args_density: Density, Density::Tall, \"Argument density in functions\";\n-    fn_args_layout: StructLitStyle, StructLitStyle::Visual, \"Layout of function arguments\";\n+    fn_args_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual, \"Layout of function arguments\";\n     fn_arg_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indent on function arguments\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";"}, {"sha": "e2f41259cefc816e0b95b5215be3399a761b5c41", "filename": "src/items.rs", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -19,7 +19,7 @@ use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n+use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, FnArgLayoutStyle};\n \n use syntax::{ast, abi, ptr, codemap};\n use syntax::codemap::{Span, BytePos, mk_sp};\n@@ -651,8 +651,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         let where_density = if (context.config.where_density == Density::Compressed &&\n                                 (!result.contains('\\n') ||\n-                                 context.config.fn_args_layout == StructLitStyle::Block)) ||\n-                               (context.config.fn_args_layout == StructLitStyle::Block &&\n+                                 context.config.fn_args_layout == FnArgLayoutStyle::Block)) ||\n+                               (context.config.fn_args_layout == FnArgLayoutStyle::Block &&\n                                 result.is_empty()) ||\n                                (context.config.where_density == Density::CompressedIfEmpty &&\n                                 !has_body &&\n@@ -1294,9 +1294,15 @@ fn rewrite_fn_base(context: &RewriteContext,\n     };\n \n     // Args.\n-    let (mut one_line_budget, multi_line_budget, mut arg_indent) =\n+    let (mut one_line_budget, mut multi_line_budget, mut arg_indent) =\n         compute_budgets_for_args(context, &result, indent, ret_str_len, newline_brace);\n \n+    if context.config.fn_args_layout == FnArgLayoutStyle::Block ||\n+       context.config.fn_args_layout == FnArgLayoutStyle::BlockAlways {\n+        arg_indent = indent.block_indent(context.config);\n+        multi_line_budget = context.config.max_width - arg_indent.width();\n+    }\n+\n     debug!(\"rewrite_fn: one_line_budget: {}, multi_line_budget: {}, arg_indent: {:?}\",\n            one_line_budget,\n            multi_line_budget,\n@@ -1313,10 +1319,6 @@ fn rewrite_fn_base(context: &RewriteContext,\n             result.push_str(\"(\\n\");\n             result.push_str(&arg_indent.to_string(context.config));\n         }\n-    } else if context.config.fn_args_layout == StructLitStyle::Block {\n-        arg_indent = indent.block_indent(context.config);\n-        result.push_str(\"(\\n\");\n-        result.push_str(&arg_indent.to_string(context.config));\n     } else {\n         result.push('(');\n     }\n@@ -1340,23 +1342,42 @@ fn rewrite_fn_base(context: &RewriteContext,\n                                         arg_indent,\n                                         args_span,\n                                         fd.variadic));\n-    result.push_str(&arg_str);\n-    if context.config.fn_args_layout == StructLitStyle::Block {\n+\n+    let multi_line_arg_str = arg_str.contains('\\n');\n+\n+    let put_args_in_block = match context.config.fn_args_layout {\n+        FnArgLayoutStyle::Block => multi_line_arg_str,\n+        FnArgLayoutStyle::BlockAlways => true,\n+        _ => false,\n+    } && fd.inputs.len() > 0;\n+\n+    if put_args_in_block {\n+        arg_indent = indent.block_indent(context.config);\n+        result.push('\\n');\n+        result.push_str(&arg_indent.to_string(context.config));\n+        result.push_str(&arg_str);\n         result.push('\\n');\n         result.push_str(&indent.to_string(context.config));\n+        result.push(')');\n+    } else {\n+        result.push_str(&arg_str);\n+        result.push(')');\n     }\n-    result.push(')');\n \n     // Return type.\n     if !ret_str.is_empty() {\n-        // If we've already gone multi-line, or the return type would push\n-        // over the max width, then put the return type on a new line.\n-        // Unless we are formatting args like a block, in which case there\n-        // should always be room for the return type.\n-        let ret_indent = if (result.contains(\"\\n\") || multi_line_ret_str ||\n-                             result.len() + indent.width() + ret_str_len >\n-                             context.config.max_width) &&\n-                            context.config.fn_args_layout != StructLitStyle::Block {\n+        let ret_should_indent = match context.config.fn_args_layout {\n+            // If our args are block layout then we surely must have space.\n+            FnArgLayoutStyle::Block if put_args_in_block => false,\n+            FnArgLayoutStyle::BlockAlways => false,\n+            _ => {\n+                // If we've already gone multi-line, or the return type would push\n+                // over the max width, then put the return type on a new line.\n+                result.contains(\"\\n\") || multi_line_ret_str ||\n+                result.len() + indent.width() + ret_str_len > context.config.max_width\n+            }\n+        };\n+        let ret_indent = if ret_should_indent {\n             let indent = match context.config.fn_return_indent {\n                 ReturnIndent::WithWhereClause => indent + 4,\n                 // Aligning with non-existent args looks silly.\n@@ -1407,13 +1428,13 @@ fn rewrite_fn_base(context: &RewriteContext,\n         }\n     }\n \n-    let where_density = if (context.config.where_density == Density::Compressed &&\n-                            (!result.contains('\\n') ||\n-                             context.config.fn_args_layout == StructLitStyle::Block)) ||\n-                           (context.config.fn_args_layout == StructLitStyle::Block &&\n-                            ret_str.is_empty()) ||\n-                           (context.config.where_density == Density::CompressedIfEmpty &&\n-                            !has_body && !result.contains('\\n')) {\n+    let should_compress_where = match context.config.where_density {\n+        Density::Compressed => !result.contains('\\n') || put_args_in_block,\n+        Density::CompressedIfEmpty => !has_body && !result.contains('\\n'),\n+        _ => false,\n+    } || (put_args_in_block && ret_str.is_empty());\n+\n+    let where_density = if should_compress_where {\n         Density::Compressed\n     } else {\n         Density::Tall\n@@ -1554,8 +1575,10 @@ fn rewrite_args(context: &RewriteContext,\n         _ => multi_line_budget,\n     };\n \n+    debug!(\"rewrite_args: budget: {}, tactic: {:?}\", budget, tactic);\n+\n     let end_with_newline = match context.config.fn_args_layout {\n-        StructLitStyle::Block => true,\n+        FnArgLayoutStyle::Block | FnArgLayoutStyle::BlockAlways => true,\n         _ => false,\n     };\n "}, {"sha": "1f2d740a075da5eeb8211762374e663ccd423e42", "filename": "tests/source/fn-custom-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-6.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Block\n+// rustfmt-fn_args_layout: BlockAlways\n // rustfmt-where_indent: Inherit\n // rustfmt-fn_brace_style: PreferSameLine\n // Test different indents."}, {"sha": "27c97867d265274ea1125121bc9c46122e569138", "filename": "tests/source/fn-custom-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-7.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Block\n+// rustfmt-fn_args_layout: BlockAlways\n // rustfmt-fn_args_density: Vertical\n // rustfmt-fn_arg_indent: Tabbed\n // rustfmt-fn_brace_style: AlwaysNextLine"}, {"sha": "a1aebf1f38c805fe1fb0b8fdaab45e8ce18c67d3", "filename": "tests/source/fn-custom-8.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn-custom-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn-custom-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-8.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -0,0 +1,50 @@\n+// rustfmt-fn_args_layout: Block\n+// rustfmt-where_indent: Inherit\n+// rustfmt-fn_brace_style: PreferSameLine\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) where T: UUUUUUUUUUU {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String where T: UUUUUUUUUUU {\n+    bar();\n+}\n+\n+trait Test {\n+    fn foo(\n+        a: u8) {\n+\n+    }\n+\n+    fn bar(a: u8)\n+    -> String {\n+\n+    }\n+\n+    fn bar(a: u8) -> String where Foo: foooo, Bar: barrr {}\n+}"}, {"sha": "b87158a4d7f8b0a827ce5ed18dd07a794d175045", "filename": "tests/source/fn_args_layout-block.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_args_layout-block.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -1,5 +1,8 @@\n // rustfmt-fn_args_layout: Block\n \n+fn foo() {\n+    foo();\n+}\n \n fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n     foo();\n@@ -17,8 +20,58 @@ fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Ddddddddd\n     bar();\n }\n \n+fn foo(a: u8 /* Comment 1 */, b: u8 /* Comment 2 */) -> u8 {\n+    bar()\n+}\n+\n+fn foo(a: u8 /* Comment 1 */, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee /* Comment 2 */) -> u8 {\n+    bar()\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String where X: Fooooo, Y: Baaar  {\n+    bar();\n+}\n+\n+fn foo() -> T {\n+    foo();\n+}\n+\n+fn foo() -> T where X: Foooo, Y: Baaar {\n+    foo();\n+}\n+\n+fn foo() where X: Foooo {\n+}\n+\n+fn foo() where X: Foooo, Y: Baaar {\n+}\n+\n+fn foo() -> (Loooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiis, Looooooooooooooooong) {\n+    foo();\n+}\n+\n+fn foo<g: G>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>() {\n+    foo();\n+}\n+\n trait Test {\n     fn foo(a: u8) {}\n \n-    fn bar(a: u8) -> String {}\n+    fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {}\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>(a: Aaaaaaaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd) {\n+    foo();\n+}\n+\n+fn foo() -> (Looooooooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiiiiiiis, Loooooooooooooooooooooong) {\n+    foo();\n }"}, {"sha": "d4bb00b914277ecd8534b57acc9df3179d40f302", "filename": "tests/source/fn_args_layout-blockalways.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn_args_layout-blockalways.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Fsource%2Ffn_args_layout-blockalways.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_args_layout-blockalways.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-fn_args_layout: BlockAlways\n+\n+fn foo() {\n+    foo();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {\n+    bar();\n+}\n+\n+trait Test {\n+    fn foo(a: u8) {}\n+\n+    fn bar(a: u8) -> String {}\n+}"}, {"sha": "74e6765847e8cc6edb579c4a2cabc8840b14ca89", "filename": "tests/target/fn-custom-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-6.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Block\n+// rustfmt-fn_args_layout: BlockAlways\n // rustfmt-where_indent: Inherit\n // rustfmt-fn_brace_style: PreferSameLine\n // Test different indents."}, {"sha": "82260d8c8632c0b11d5bb021492a93eb60715d94", "filename": "tests/target/fn-custom-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-7.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Block\n+// rustfmt-fn_args_layout: BlockAlways\n // rustfmt-fn_args_density: Vertical\n // rustfmt-fn_arg_indent: Tabbed\n // rustfmt-fn_brace_style: AlwaysNextLine"}, {"sha": "bd4a379969b0b3a1b86be90c2faba2345bca32b9", "filename": "tests/target/fn-custom-8.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn-custom-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn-custom-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-8.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -0,0 +1,74 @@\n+// rustfmt-fn_args_layout: Block\n+// rustfmt-where_indent: Inherit\n+// rustfmt-fn_brace_style: PreferSameLine\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb)\n+where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) where T: UUUUUUUUUUU {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String\n+where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String\n+where T: UUUUUUUUUUU {\n+    bar();\n+}\n+\n+trait Test {\n+    fn foo(a: u8) {}\n+\n+    fn bar(a: u8) -> String {}\n+\n+    fn bar(a: u8) -> String\n+    where Foo: foooo,\n+          Bar: barrr {\n+    }\n+}"}, {"sha": "cf380c649c8d132586be9f9e7f4d4150ae2e89a0", "filename": "tests/target/fn_args_layout-block.rs", "status": "modified", "additions": 95, "deletions": 11, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-block.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -1,9 +1,10 @@\n // rustfmt-fn_args_layout: Block\n \n+fn foo() {\n+    foo();\n+}\n \n-fn foo(\n-    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n-) {\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n     foo();\n }\n \n@@ -17,9 +18,7 @@ fn bar(\n     bar();\n }\n \n-fn foo(\n-    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n-) -> String {\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n     foo();\n }\n \n@@ -33,14 +32,99 @@ fn bar(\n     bar();\n }\n \n+fn foo(a: u8 /* Comment 1 */, b: u8 /* Comment 2 */) -> u8 {\n+    bar()\n+}\n+\n+fn foo(\n+    a: u8, // Comment 1\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee // Comment 2\n+) -> u8 {\n+    bar()\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String\n+    where X: Fooooo,\n+          Y: Baaar\n+{\n+    bar();\n+}\n+\n+fn foo() -> T {\n+    foo();\n+}\n+\n+fn foo() -> T\n+    where X: Foooo,\n+          Y: Baaar\n+{\n+    foo();\n+}\n+\n+fn foo() where X: Foooo {}\n+\n+fn foo()\n+    where X: Foooo,\n+          Y: Baaar\n+{\n+}\n+\n+fn foo\n+    ()\n+    -> (Loooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiis, Looooooooooooooooong)\n+{\n+    foo();\n+}\n+\n+fn foo<g: G>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>\n+    () {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>() {\n+    foo();\n+}\n+\n trait Test {\n-    fn foo(\n-        a: u8\n-    ) {\n-    }\n+    fn foo(a: u8) {}\n \n     fn bar(\n-        a: u8\n+        a: Aaaaaaaaaaaaaa,\n+        b: Bbbbbbbbbbbbbb,\n+        c: Cccccccccccccccccc,\n+        d: Dddddddddddddddd,\n+        e: Eeeeeeeeeeeeeee\n     ) -> String {\n     }\n }\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>(\n+    a: Aaaaaaaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd\n+) {\n+    foo();\n+}\n+\n+fn foo()\n+    -> (Looooooooooooooooooooooooooong,\n+        Reeeeeeeeeeeeeeeeeeeeeeeeeeeeeturn,\n+        iiiiiiiiiiiiiis,\n+        Loooooooooooooooooooooong)\n+{\n+    foo();\n+}"}, {"sha": "11f04d13ce6f3d6c8d0c5a9d9158a7c0081a4a2c", "filename": "tests/target/fn_args_layout-blockalways.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn_args_layout-blockalways.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97bc08be91d931b5c8ec62bc35c4915b63c8d5/tests%2Ftarget%2Ffn_args_layout-blockalways.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-blockalways.rs?ref=ce97bc08be91d931b5c8ec62bc35c4915b63c8d5", "patch": "@@ -0,0 +1,49 @@\n+// rustfmt-fn_args_layout: BlockAlways\n+\n+fn foo() {\n+    foo();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) {\n+    bar();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) -> String {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String {\n+    bar();\n+}\n+\n+trait Test {\n+    fn foo(\n+        a: u8\n+    ) {\n+    }\n+\n+    fn bar(\n+        a: u8\n+    ) -> String {\n+    }\n+}"}]}