{"sha": "25184da1e722095902725ef520590fc464faf082", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MTg0ZGExZTcyMjA5NTkwMjcyNWVmNTIwNTkwZmM0NjRmYWYwODI=", "commit": {"author": {"name": "John Clements", "email": "clements@brinckerhoff.org", "date": "2013-01-24T01:38:46Z"}, "committer": {"name": "John Clements", "email": "clements@brinckerhoff.org", "date": "2013-01-24T01:38:46Z"}, "message": "Merge pull request #4600 from jbclements/cleanup-and-test-cases\n\ncleaning up, adding tests", "tree": {"sha": "6eddacfea2e40159cc648668a54d441d4b61d6c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eddacfea2e40159cc648668a54d441d4b61d6c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25184da1e722095902725ef520590fc464faf082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25184da1e722095902725ef520590fc464faf082", "html_url": "https://github.com/rust-lang/rust/commit/25184da1e722095902725ef520590fc464faf082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25184da1e722095902725ef520590fc464faf082/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "721c174b6c7e856633577d17f05bdd3fd4fc8a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/721c174b6c7e856633577d17f05bdd3fd4fc8a12", "html_url": "https://github.com/rust-lang/rust/commit/721c174b6c7e856633577d17f05bdd3fd4fc8a12"}, {"sha": "8716005581c83f39d0bfe8c2dff67e9dd1f67b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8716005581c83f39d0bfe8c2dff67e9dd1f67b5b", "html_url": "https://github.com/rust-lang/rust/commit/8716005581c83f39d0bfe8c2dff67e9dd1f67b5b"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "baeb437152cbeb7a1479597bd49620dd0dc7cc7c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25184da1e722095902725ef520590fc464faf082/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25184da1e722095902725ef520590fc464faf082/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=25184da1e722095902725ef520590fc464faf082", "patch": "@@ -172,15 +172,15 @@ fn fun_to_str(decl: ast::fn_decl, name: ast::ident,\n \n #[test]\n fn test_fun_to_str() {\n-    let decl: ast::fn_decl = {\n+    let decl: ast::fn_decl = ast::fn_decl {\n         inputs: ~[],\n-        output: @{id: 0,\n+        output: @ast::Ty {id: 0,\n                   node: ast::ty_nil,\n                   span: ast_util::dummy_sp()},\n-        purity: ast::impure_fn,\n+        //purity: ast::impure_fn,\n         cf: ast::return_val\n     };\n-    assert fun_to_str(decl, \"a\", ~[]) == \"fn a()\";\n+    assert fun_to_str(decl, \"abba\", ~[]) == \"fn abba()\";\n }\n \n fn block_to_str(blk: ast::blk, intr: @ident_interner) -> ~str {\n@@ -214,7 +214,7 @@ fn test_variant_to_str() {\n         attrs: ~[],\n         args: ~[],\n         id: 0,\n-        disr_expr: none\n+        disr_expr: None\n     });\n \n     let varstr = variant_to_str(var);"}, {"sha": "9f0b0a322cd02483edf2c4bfd368cf59141a3dd1", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/25184da1e722095902725ef520590fc464faf082/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25184da1e722095902725ef520590fc464faf082/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=25184da1e722095902725ef520590fc464faf082", "patch": "@@ -29,7 +29,7 @@ fn mk<T:Eq IterBytes Hash Const Copy>() -> Interner<T> {\n     move ((move hi) as Interner::<T>)\n }\n \n-fn mk_prefill<T:Eq IterBytes Hash Const Copy>(init: ~[T]) -> Interner<T> {\n+fn mk_prefill<T:Eq IterBytes Hash Const Copy>(init: &[T]) -> Interner<T> {\n     let rv = mk();\n     for init.each() |v| { rv.intern(*v); }\n     return rv;\n@@ -70,3 +70,45 @@ impl <T:Eq IterBytes Hash Const Copy> hash_interner<T>: Interner<T> {\n \n     fn len() -> uint { return self.vect.len(); }\n }\n+\n+\n+#[test]\n+#[should_fail]\n+fn i1 () {\n+    let i : Interner<@~str> = mk();\n+    i.get(13);\n+} \n+\n+#[test]\n+fn i2 () {\n+    let i : Interner<@~str> = mk();\n+    // first one is zero:\n+    assert i.intern (@~\"dog\") == 0;\n+    // re-use gets the same entry:\n+    assert i.intern (@~\"dog\") == 0;\n+    // different string gets a different #:\n+    assert i.intern (@~\"cat\") == 1;\n+    assert i.intern (@~\"cat\") == 1;\n+    // dog is still at zero\n+    assert i.intern (@~\"dog\") == 0;\n+    // gensym gets 3\n+    assert i.gensym (@~\"zebra\" ) == 2;\n+    // gensym of same string gets new number :\n+    assert i.gensym (@~\"zebra\" ) == 3;\n+    // gensym of *existing* string gets new number:\n+    assert i.gensym (@~\"dog\") == 4;\n+    assert i.get(0) == @~\"dog\";\n+    assert i.get(1) == @~\"cat\";\n+    assert i.get(2) == @~\"zebra\";\n+    assert i.get(3) == @~\"zebra\";\n+    assert i.get(4) == @~\"dog\";\n+} \n+\n+#[test]\n+fn i3 () {\n+    let i : Interner<@~str> = mk_prefill([@~\"Alan\",@~\"Bob\",@~\"Carol\"]);\n+    assert i.get(0) == @~\"Alan\";\n+    assert i.get(1) == @~\"Bob\";\n+    assert i.get(2) == @~\"Carol\";\n+    assert i.intern(@~\"Bob\") == 1;\n+}"}]}