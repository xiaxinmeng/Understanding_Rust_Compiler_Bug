{"sha": "b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyN2NiZGEzMmI2N2I0ZmRkOTExM2VkODk0YjgxMGZjOGYzZTE4MGQ=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-08T03:45:41Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-08T03:45:54Z"}, "message": "make is_normalizable more strict", "tree": {"sha": "870ef000ade4b81254e2351a9a215ade1439b8a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/870ef000ade4b81254e2351a9a215ade1439b8a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "html_url": "https://github.com/rust-lang/rust/commit/b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27cbda32b67b4fdd9113ed894b810fc8f3e180d/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02ca3b81b54aa8d9cf07597297a8d74ebdb7dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d02ca3b81b54aa8d9cf07597297a8d74ebdb7dfe", "html_url": "https://github.com/rust-lang/rust/commit/d02ca3b81b54aa8d9cf07597297a8d74ebdb7dfe"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "999b39852cd5049dc98803085d1f5a05795557c0", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b27cbda32b67b4fdd9113ed894b810fc8f3e180d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27cbda32b67b4fdd9113ed894b810fc8f3e180d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "patch": "@@ -85,6 +85,7 @@ use rustc_trait_selection::traits::query::normalize::AtExt;\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n+use std::collections::HashMap;\n \n pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n     if let Ok(version) = RustcVersion::parse(msrv) {\n@@ -1488,10 +1489,45 @@ pub fn match_function_call<'tcx>(\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`.\n pub fn is_normalizable<'tcx>(cx: &LateContext<'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n+    is_normalizable_helper(cx, param_env, ty, &mut HashMap::new())\n+}\n+\n+fn is_normalizable_helper<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    cache: &mut HashMap<Ty<'tcx>, bool>,\n+) -> bool {\n+    if let Some(&cached_result) = cache.get(ty) {\n+        return cached_result;\n+    }\n+    cache.insert(ty, false); // prevent recursive loops\n+    let result = cx.tcx.infer_ctxt().enter(|infcx| {\n         let cause = rustc_middle::traits::ObligationCause::dummy();\n-        infcx.at(&cause, param_env).normalize(ty).is_ok()\n-    })\n+        if infcx.at(&cause, param_env).normalize(ty).is_err() {\n+            false\n+        } else {\n+            match ty.kind() {\n+                ty::Adt(def, substs) => !def.variants.iter().any(|variant| {\n+                    variant\n+                        .fields\n+                        .iter()\n+                        .any(|field| !is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n+                }),\n+                ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n+                    is_normalizable_helper(cx, param_env, pointee, cache)\n+                },\n+                ty::Array(inner_ty, _) | ty::Slice(inner_ty) => is_normalizable_helper(cx, param_env, inner_ty, cache),\n+                ty::Tuple(tys) => !tys.iter().any(|inner| match inner.unpack() {\n+                    GenericArgKind::Type(inner_ty) => !is_normalizable_helper(cx, param_env, inner_ty, cache),\n+                    _ => false,\n+                }),\n+                _ => true,\n+            }\n+        }\n+    });\n+    cache.insert(ty, result);\n+    result\n }\n \n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {"}, {"sha": "a749eefb6355ad743af258fad2f8b12bcc4cd845", "filename": "tests/ui/crashes/ice-6840.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b27cbda32b67b4fdd9113ed894b810fc8f3e180d/tests%2Fui%2Fcrashes%2Fice-6840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27cbda32b67b4fdd9113ed894b810fc8f3e180d/tests%2Fui%2Fcrashes%2Fice-6840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6840.rs?ref=b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "patch": "@@ -0,0 +1,23 @@\n+//! This is a reproducer for the ICE 6840: https://github.com/rust-lang/rust-clippy/issues/6840.\n+//! The ICE is caused by `TyCtxt::layout_of` and `is_normalizable` not being strict enough\n+#![allow(dead_code)]\n+use std::collections::HashMap;\n+\n+pub trait Rule {\n+    type DependencyKey;\n+}\n+\n+pub struct RuleEdges<R: Rule> {\n+    dependencies: R::DependencyKey,\n+}\n+\n+type RuleDependencyEdges<R> = HashMap<u32, RuleEdges<R>>;\n+\n+// and additional potential variants\n+type RuleDependencyEdgesArray<R> = HashMap<u32, [RuleEdges<R>; 8]>;\n+type RuleDependencyEdgesSlice<R> = HashMap<u32, &'static [RuleEdges<R>]>;\n+type RuleDependencyEdgesRef<R> = HashMap<u32, &'static RuleEdges<R>>;\n+type RuleDependencyEdgesRaw<R> = HashMap<u32, *const RuleEdges<R>>;\n+type RuleDependencyEdgesTuple<R> = HashMap<u32, (RuleEdges<R>, RuleEdges<R>)>;\n+\n+fn main() {}"}]}