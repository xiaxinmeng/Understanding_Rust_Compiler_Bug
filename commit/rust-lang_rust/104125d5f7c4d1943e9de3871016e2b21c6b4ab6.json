{"sha": "104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDEyNWQ1ZjdjNGQxOTQzZTlkZTM4NzEwMTZlMmIyMWM2YjRhYjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-28T19:00:26Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "revamp `Visitor` with a single method for controlling nested visits", "tree": {"sha": "d6dcceb9424517f5bdcffa3a3fd4f9eee762eac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6dcceb9424517f5bdcffa3a3fd4f9eee762eac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "html_url": "https://github.com/rust-lang/rust/commit/104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8575184b394758f00c02517bfb9e8398b92d5d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/8575184b394758f00c02517bfb9e8398b92d5d30", "html_url": "https://github.com/rust-lang/rust/commit/8575184b394758f00c02517bfb9e8398b92d5d30"}], "stats": {"total": 371, "additions": 197, "deletions": 174}, "files": [{"sha": "123f0282f2a38b023231f5d861cc482e79e13315", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -70,9 +70,42 @@ impl<'a> FnKind<'a> {\n /// Specifies what nested things a visitor wants to visit. Currently there are\n /// two modes: `OnlyBodies` descends into item bodies, but not into nested\n /// items; `All` descends into item bodies and nested items.\n-pub enum NestedVisitMode {\n-    OnlyBodies,\n-    All\n+pub enum NestedVisitorMap<'this, 'tcx: 'this> {\n+    /// Do not visit any nested things. When you add a new\n+    /// \"non-nested\" thing, you will want to audit such uses to see if\n+    /// they remain valid.\n+    None,\n+\n+    /// Do not visit nested item-like things, but visit nested things\n+    /// that are inside of an item-like.\n+    ///\n+    /// **This is the default mode.**\n+    OnlyBodies(&'this Map<'tcx>),\n+\n+    /// Visit all nested things, including item-likes.\n+    All(&'this Map<'tcx>),\n+}\n+\n+impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n+    /// Returns the map to use for an \"intra item-like\" thing (if any).\n+    /// e.g., function body.\n+    pub fn intra(self) -> Option<&'this Map<'tcx>> {\n+        match self {\n+            NestedVisitorMap::None => None,\n+            NestedVisitorMap::OnlyBodies(map) => Some(map),\n+            NestedVisitorMap::All(map) => Some(map),\n+        }\n+    }\n+\n+    /// Returns the map to use for an \"item-like\" thing (if any).\n+    /// e.g., item, impl-item.\n+    pub fn inter(self) -> Option<&'this Map<'tcx>> {\n+        match self {\n+            NestedVisitorMap::None => None,\n+            NestedVisitorMap::OnlyBodies(_) => None,\n+            NestedVisitorMap::All(map) => Some(map),\n+        }\n+    }\n }\n \n /// Each method of the Visitor trait is a hook to be potentially\n@@ -109,13 +142,7 @@ pub trait Visitor<'v> : Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map(&mut self) -> Option<&Map<'v>>;\n-\n-    /// Specifies what things nested things this visitor wants to visit. By\n-    /// default, bodies will be visited, but not nested items.\n-    fn nested_visit_mode(&mut self) -> NestedVisitMode {\n-        NestedVisitMode::OnlyBodies\n-    }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v>;\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return\n@@ -127,8 +154,7 @@ pub trait Visitor<'v> : Sized {\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n     #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n-        let opt_item = map_for_item(self)\n-                           .map(|map| map.expect_item(id.id));\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.expect_item(id.id));\n         if let Some(item) = opt_item {\n             self.visit_item(item);\n         }\n@@ -139,8 +165,7 @@ pub trait Visitor<'v> : Sized {\n     /// method.\n     #[allow(unused_variables)]\n     fn visit_nested_impl_item(&mut self, id: ImplItemId) {\n-        let opt_item = map_for_item(self)\n-                           .map(|map| map.impl_item(id));\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.impl_item(id));\n         if let Some(item) = opt_item {\n             self.visit_impl_item(item);\n         }\n@@ -151,8 +176,7 @@ pub trait Visitor<'v> : Sized {\n     /// `nested_visit_map` to return `Some(_)`, in which case it will walk the\n     /// body.\n     fn visit_body(&mut self, id: ExprId) {\n-        let opt_expr = map_for_body(self)\n-                           .map(|map| map.expr(id));\n+        let opt_expr = self.nested_visit_map().intra().map(|map| map.expr(id));\n         if let Some(expr) = opt_expr {\n             self.visit_expr(expr);\n         }\n@@ -302,18 +326,6 @@ pub trait Visitor<'v> : Sized {\n     }\n }\n \n-fn map_for_body<'v, V: Visitor<'v>>(visitor: &mut V) -> Option<&Map<'v>> {\n-    visitor.nested_visit_map()\n-}\n-\n-fn map_for_item<'v, V: Visitor<'v>>(visitor: &mut V) -> Option<&Map<'v>> {\n-    match visitor.nested_visit_mode() {\n-        NestedVisitMode::OnlyBodies => None,\n-        NestedVisitMode::All => Some(visitor.nested_visit_map()\n-                                     .expect(\"NestedVisitMode::All without nested_visit_map\"))\n-    }\n-}\n-\n pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) {\n     if let Some(name) = opt_name {\n         visitor.visit_name(span, name);\n@@ -1061,8 +1073,8 @@ impl<'a, 'ast> IdRangeComputingVisitor<'a, 'ast> {\n }\n \n impl<'a, 'ast> Visitor<'ast> for IdRangeComputingVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<&Map<'ast>> {\n-        Some(&self.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n+        NestedVisitorMap::OnlyBodies(&self.map)\n     }\n \n     fn visit_id(&mut self, id: NodeId) {"}, {"sha": "c46c8f044e0ffc3863feb0bfb7bd85b5fac414dd", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -10,7 +10,7 @@\n \n use super::*;\n \n-use hir::intravisit::Visitor;\n+use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::def_id::DefId;\n use middle::cstore::InlinedItem;\n use std::iter::repeat;\n@@ -91,7 +91,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map(&mut self) -> Option<&map::Map<'ast>> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "273094b735c3a1e9b137915161c25b4887fc85bc", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -11,7 +11,7 @@\n use hir::map::definitions::*;\n \n use hir;\n-use hir::intravisit;\n+use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n \n use middle::cstore::InlinedItem;\n@@ -326,9 +326,10 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n }\n \n // We walk the HIR rather than the AST when reading items from metadata.\n-impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n-        None\n+impl<'ast> Visitor<'ast> for DefCollector<'ast> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n+        // note however that we override `visit_body` below\n+        NestedVisitorMap::None\n     }\n \n     fn visit_body(&mut self, id: hir::ExprId) {"}, {"sha": "fba4f35074dbc062a5f5d7f5716d798ac5bfa8f3", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -791,12 +791,8 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n-    }\n-\n-    fn nested_visit_mode(&mut self) -> hir_visit::NestedVisitMode {\n-        hir_visit::NestedVisitMode::All\n+    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> {\n+        hir_visit::NestedVisitorMap::All(&self.tcx.map)\n     }\n \n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n@@ -1113,8 +1109,8 @@ struct IdVisitor<'a, 'b: 'a, 'tcx: 'a+'b> {\n \n // Output any lints that were previously added to the session.\n impl<'a, 'b, 'tcx> hir_visit::Visitor<'tcx> for IdVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.cx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> {\n+        hir_visit::NestedVisitorMap::OnlyBodies(&self.cx.tcx.map)\n     }\n \n     fn visit_id(&mut self, id: ast::NodeId) {"}, {"sha": "f7a34c43cccbd8335afcbd0dfd85a655e16cd5f4", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -193,7 +193,9 @@ fn build_nodeid_to_index(decl: Option<&hir::FnDecl>,\n         let mut formals = Formals { entry: entry, index: index };\n         intravisit::walk_fn_decl(&mut formals, decl);\n         impl<'a, 'v> intravisit::Visitor<'v> for Formals<'a> {\n-            fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+                panic!(\"should not encounter fn bodies or items\")\n+            }\n \n             fn visit_pat(&mut self, p: &hir::Pat) {\n                 self.index.entry(p.id).or_insert(vec![]).push(self.entry);"}, {"sha": "1bf6b837fd998d2f201540621297a8e8a6839ff2", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -15,7 +15,7 @@\n use dep_graph::DepNode;\n use hir::map as ast_map;\n use hir::{self, PatKind};\n-use hir::intravisit::{self, Visitor, NestedVisitMode};\n+use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir::itemlikevisit::ItemLikeVisitor;\n \n use middle::privacy;\n@@ -221,8 +221,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_variant_data(&mut self, def: &'tcx hir::VariantData, _: ast::Name,\n@@ -510,12 +510,10 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         if self.should_warn_about_item(item) {\n             self.warn_dead_code("}, {"sha": "2ec7aa4c4d9031c316c0ac37d3557008203de98f", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -21,7 +21,7 @@ use syntax::ast;\n use syntax_pos::Span;\n use hir::{self, PatKind};\n use hir::def::Def;\n-use hir::intravisit::{self, FnKind, Visitor};\n+use hir::intravisit::{self, FnKind, Visitor, NestedVisitorMap};\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {\n@@ -93,8 +93,8 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, fn_decl: &'tcx hir::FnDecl,"}, {"sha": "6896c69d7db92249224b4f1a1adf23ca7878668d", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -19,7 +19,7 @@ use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n use syntax::abi::Abi::RustIntrinsic;\n use syntax::ast;\n use syntax_pos::Span;\n-use hir::intravisit::{self, Visitor, FnKind};\n+use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n use hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n@@ -117,8 +117,8 @@ impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     // const, static and N in [T; N].\n@@ -163,8 +163,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for ExprVisitor<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n-        Some(&self.infcx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.infcx.tcx.map)\n     }\n \n     fn visit_expr(&mut self, expr: &'gcx hir::Expr) {"}, {"sha": "445aed8f97d600fe3eeb547b24d2ca96e008d3ee", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -128,7 +128,7 @@ use syntax_pos::Span;\n use hir::Expr;\n use hir;\n use hir::print::{expr_to_string, block_to_string};\n-use hir::intravisit::{self, Visitor, FnKind};\n+use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -183,9 +183,10 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt) -> String {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n+\n     fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,\n                 b: hir::ExprId, s: Span, id: NodeId) {\n         visit_fn(self, fk, fd, b, s, id);\n@@ -352,9 +353,10 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.ir.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.ir.tcx.map)\n     }\n+\n     fn visit_fn(&mut self, _: FnKind<'tcx>, _: &'tcx hir::FnDecl,\n                 _: hir::ExprId, _: Span, _: NodeId) {\n         // do not check contents of nested fns"}, {"sha": "9798b2d587dbf413cb4f3a22578e198b5b34d29b", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -28,7 +28,7 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use hir;\n-use hir::intravisit::{Visitor};\n+use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::itemlikevisit::ItemLikeVisitor;\n use hir::intravisit;\n \n@@ -89,8 +89,8 @@ struct ReachableContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {"}, {"sha": "05fa619ce41e4e8e1b8b5f0e36a55d9ce7772868", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -31,7 +31,7 @@ use syntax::ast::{self, NodeId};\n use syntax_pos::Span;\n \n use hir;\n-use hir::intravisit::{self, Visitor, FnKind};\n+use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n use hir::{Block, Item, FnDecl, Arm, Pat, PatKind, Stmt, Expr, Local};\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n@@ -1170,8 +1170,8 @@ impl<'ast, 'a> RegionResolutionVisitor<'ast, 'a> {\n }\n \n impl<'ast, 'a> Visitor<'ast> for RegionResolutionVisitor<'ast, 'a> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n-        Some(&self.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n+        NestedVisitorMap::OnlyBodies(&self.map)\n     }\n \n     fn visit_block(&mut self, b: &'ast Block) {"}, {"sha": "c5b03a4a32add5b64a3a0309b6d3979cf39e4edb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -34,7 +34,7 @@ use util::nodemap::NodeMap;\n use rustc_data_structures::fx::FxHashSet;\n use hir;\n use hir::print::lifetime_to_string;\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n+use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum DefRegion {\n@@ -132,12 +132,10 @@ pub fn krate(sess: &Session,\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     // Override the nested functions -- lifetimes follow lexical scope,\n     // so it's convenient to walk the tree in lexical order.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.hir_map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.hir_map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         // Save labels for nested items.\n         let saved_labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n@@ -425,7 +423,9 @@ fn extract_labels(ctxt: &mut LifetimeContext, b: hir::ExprId) {\n     return;\n \n     impl<'v, 'a> Visitor<'v> for GatherLabels<'a> {\n-        fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+            NestedVisitorMap::None\n+        }\n \n         fn visit_expr(&mut self, ex: &'v hir::Expr) {\n             // do not recurse into closures defined in the block\n@@ -942,7 +942,9 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+            NestedVisitorMap::None\n+        }\n \n         fn visit_ty(&mut self, ty: &'v hir::Ty) {\n             match ty.node {\n@@ -981,7 +983,9 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+            NestedVisitorMap::None\n+        }\n \n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n             self.regions.insert(lifetime_ref.name);"}, {"sha": "f3890f1c3b7e3c392c84491acb9a119a6d8a3fdc", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -30,8 +30,7 @@ use util::nodemap::{DefIdMap, FxHashSet, FxHashMap};\n \n use hir;\n use hir::{Item, Generics, StructField, Variant};\n-use hir::intravisit::{self, Visitor, NestedVisitMode};\n-use hir::itemlikevisit::DeepVisitor;\n+use hir::intravisit::{self, Visitor, NestedVisitorMap};\n \n use std::mem::replace;\n use std::cmp::Ordering;\n@@ -234,12 +233,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n-\n     fn visit_item(&mut self, i: &'tcx Item) {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let mut kind = AnnotationKind::Required;\n@@ -329,8 +326,8 @@ impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item) {\n@@ -431,8 +428,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// features and possibly prints errors.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut checker = Checker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::StabilityCheck,\n-                                      &mut DeepVisitor::new(&mut checker));\n+    tcx.visit_all_item_likes_in_krate(DepNode::StabilityCheck, &mut checker.as_deep_visitor());\n }\n \n struct Checker<'a, 'tcx: 'a> {\n@@ -540,12 +536,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    /// Because stability levels are scoped lexically, we want to walk\n+    /// nested items in the context of the outer item, so enable\n+    /// deep-walking.\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::OnlyBodies }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n             hir::ItemExternCrate(_) => {\n@@ -653,7 +650,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n         missing.check_missing_stability(ast::CRATE_NODE_ID, krate.span);\n         intravisit::walk_crate(&mut missing, krate);\n-        krate.visit_all_item_likes(&mut DeepVisitor::new(&mut missing));\n+        krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n \n     let ref declared_lib_features = sess.features.borrow().declared_lib_features;"}, {"sha": "c6df1497e681dd3ac3c4587d0c7d45e772ff3c29", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -18,7 +18,7 @@ use rustc_back::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use hir::intravisit::Visitor;\n+use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::intravisit;\n use hir;\n \n@@ -125,7 +125,9 @@ impl<'a> Context<'a> {\n }\n \n impl<'a, 'v> Visitor<'v> for Context<'a> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n         if let Some(lang_item) = lang_items::extract(&i.attrs) {"}, {"sha": "5d59b58b847d9e0eabc99315c5352f0dd67c60d2", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -30,7 +30,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::Expr;\n use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{Visitor};\n+use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n \n use self::restrictions::RestrictionResult;\n \n@@ -521,8 +521,8 @@ struct StaticInitializerCtxt<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for StaticInitializerCtxt<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.bccx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.bccx.tcx.map)\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx Expr) {"}, {"sha": "34e91e60074641723b99ecd679f200457c71b704", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -47,7 +47,7 @@ use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n \n pub mod check_loans;\n \n@@ -63,8 +63,8 @@ pub struct LoanDataFlowOperator;\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,"}, {"sha": "786b59e818da2052de8fc7f4e7e3c65523698cfe", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -29,7 +29,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc_errors::DiagnosticBuilder;\n \n use rustc::hir::def::*;\n-use rustc::hir::intravisit::{self, Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n use rustc::hir::print::pat_to_string;\n use rustc::hir::{self, Pat, PatKind};\n \n@@ -42,7 +42,9 @@ use syntax_pos::Span;\n struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_expr(&mut self, _expr: &'tcx hir::Expr) {\n         return // const, static and N in [T; N] - shouldn't contain anything\n@@ -93,8 +95,8 @@ struct MatchVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n@@ -563,7 +565,9 @@ struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_pat(&mut self, pat: &Pat) {\n         match pat.node {"}, {"sha": "4595a940f100d4e9596d198bd74f359d9b798cad", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -34,7 +34,7 @@ use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit as visit;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::record_time;\n@@ -224,7 +224,9 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n \n \n impl<'a, 'tcx> Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.calculate_node_id(item.id, |v| v.visit_item(item));"}, {"sha": "681ad2efa0c14bf250b216ea03c0728be0e989e5", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -513,11 +513,11 @@ macro_rules! hash_span {\n }\n \n impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n+    fn nested_visit_map<'this>(&'this mut self) -> visit::NestedVisitorMap<'this, 'tcx> {\n         if self.hash_bodies {\n-            Some(&self.tcx.map)\n+            visit::NestedVisitorMap::OnlyBodies(&self.tcx.map)\n         } else {\n-            None\n+            visit::NestedVisitorMap::None\n         }\n     }\n "}, {"sha": "6598b7dcc527faff76d00f6bf3fc19020be69309", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir;\n use rustc::hir::map as ast_map;\n \n-use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange};\n+use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange, NestedVisitorMap};\n \n use cstore::CrateMetadata;\n use encoder::EncodeContext;\n@@ -75,8 +74,8 @@ struct SideTableEncodingIdVisitor<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.ecx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.ecx.tcx.map)\n     }\n \n     fn visit_id(&mut self, id: ast::NodeId) {"}, {"sha": "4839c409335ea8fb5dfbba579cbfca491b10bfd8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -39,7 +39,7 @@ use syntax_pos;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::intravisit::{Visitor};\n+use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc::hir::intravisit;\n \n use super::index_builder::{FromId, IndexBuilder, Untracked};\n@@ -983,8 +983,8 @@ struct EncodeVisitor<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.index.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.index.tcx.map)\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n         intravisit::walk_expr(self, ex);"}, {"sha": "88d02d7d004c9b6f20222122683b70a08202780a", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -30,7 +30,7 @@ use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, FnKind, Visitor};\n+use rustc::hir::intravisit::{self, FnKind, Visitor, NestedVisitorMap};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -144,8 +144,8 @@ impl<'a, 'gcx> BuildMir<'a, 'gcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     // Const and static items."}, {"sha": "86f56d003584155205fe623628809f055c4deefb", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -48,7 +48,7 @@ use rustc::lint::builtin::CONST_ERR;\n use rustc::hir::{self, PatKind};\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, FnKind, Visitor};\n+use rustc::hir::intravisit::{self, FnKind, Visitor, NestedVisitorMap};\n \n use std::collections::hash_map::Entry;\n use std::cmp::Ordering;\n@@ -233,8 +233,8 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item) {"}, {"sha": "b7858013988953dd11f200698545d63ce65d91a7", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -106,7 +106,7 @@ impl<'k> StatCollector<'k> {\n }\n \n impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> {\n+    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'v> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "10f464a9901d0beebb54f19fc72c9852f70447fe", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -13,7 +13,7 @@ use rustc::session::Session;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -60,8 +60,8 @@ pub fn check_crate(sess: &Session, map: &Map) {\n }\n \n impl<'a, 'ast> Visitor<'ast> for CheckLoopVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n-        Some(&self.hir_map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n+        NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n \n     fn visit_item(&mut self, i: &'ast hir::Item) {"}, {"sha": "ddb5af1e80c345a00973628fb3cb1a4a97051034", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::traits::Reveal;\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use syntax::ast;\n use syntax_pos::Span;\n \n@@ -32,8 +32,8 @@ struct RvalueContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for RvalueContext<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self,"}, {"sha": "ffb5045fe3b07efb13a45841c9bd80739672a993", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -20,7 +20,7 @@ use rustc::util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n \n use std::cell::RefCell;\n@@ -36,7 +36,9 @@ struct CheckCrateVisitor<'a, 'ast: 'a> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_item(&mut self, it: &'ast hir::Item) {\n         match it.node {\n@@ -202,8 +204,8 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'ast>> {\n-        Some(&self.ast_map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> {\n+        NestedVisitorMap::OnlyBodies(&self.ast_map)\n     }\n \n     fn visit_item(&mut self, it: &'ast hir::Item) {"}, {"sha": "8b8172bf5b5c203b423950512a0e7e83103f1c01", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -30,7 +30,7 @@ use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::lint;\n@@ -120,12 +120,10 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let inherited_item_level = match item.node {\n             // Impls inherit level from their types and traits\n@@ -434,12 +432,10 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for PrivacyVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let orig_curitem = replace(&mut self.curitem, item.id);\n         intravisit::walk_item(self, item);\n@@ -619,7 +615,9 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_ty(&mut self, ty: &hir::Ty) {\n         if let hir::TyPath(hir::QPath::Resolved(_, ref path)) = ty.node {\n@@ -646,12 +644,10 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.tcx.map)\n     }\n \n-    fn nested_visit_mode(&mut self) -> NestedVisitMode { NestedVisitMode::All }\n-\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n             // contents of a private mod can be reexported, so we need\n@@ -1068,8 +1064,8 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {"}, {"sha": "9ed5a5d148cd62410cd608a546524d3c96db189b", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -15,7 +15,7 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use syntax::ast;\n \n use common::SharedCrateContext;\n@@ -67,7 +67,9 @@ impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SymbolNamesTest<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.process_attrs(item.id);"}, {"sha": "0c4e5e4fa0dfc4d88a1a99370d8ea079ea1ddbb8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -119,7 +119,7 @@ use syntax::symbol::{Symbol, InternedString, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, BytePos, Span};\n \n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, PatKind};\n use rustc::hir::print as pprust;\n@@ -538,8 +538,8 @@ struct CheckItemTypesVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n struct CheckItemBodiesVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.ccx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.ccx.tcx.map)\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n@@ -700,7 +700,9 @@ impl<'a, 'gcx, 'tcx> GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::None\n+    }\n \n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &'gcx hir::Local) {"}, {"sha": "3cc99b6e4e5aa3672821af4ace6ef85739c7f455", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -99,7 +99,7 @@ use std::mem;\n use std::ops::Deref;\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, PatKind};\n \n use self::SubjectNode::Subject;\n@@ -480,8 +480,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.tcx.map)\n     }\n \n     fn visit_fn(&mut self, _fk: intravisit::FnKind<'gcx>, fd: &'gcx hir::FnDecl,"}, {"sha": "63d20416bded57bddc768bd720962c6975df04b9", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -50,7 +50,7 @@ use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::util::nodemap::NodeMap;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -78,8 +78,8 @@ struct SeedBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for SeedBorrowKind<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n-        Some(&self.fcx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.fcx.tcx.map)\n     }\n \n     fn visit_expr(&mut self, expr: &'gcx hir::Expr) {\n@@ -490,8 +490,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for AdjustBorrowKind<'a, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n-        Some(&self.fcx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.fcx.tcx.map)\n     }\n \n     fn visit_fn(&mut self,"}, {"sha": "b6d0ff03a07abb87953446b1b6ba714b5563cbdf", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -23,7 +23,7 @@ use syntax::ast;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n \n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n \n pub struct CheckTypeWellFormedVisitor<'ccx, 'tcx:'ccx> {\n@@ -609,7 +609,9 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, span: Span, def_id: DefId) {\n }\n \n impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> { None }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        NestedVisitorMap::None\n+    }\n \n     fn visit_item(&mut self, i: &hir::Item) {\n         debug!(\"visit_item: {:?}\", i);"}, {"sha": "84b0303e5cfbb4a9fa97b76ff740c188613b07b9", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -27,7 +27,7 @@ use syntax::ast;\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc::hir::print::pat_to_string;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, PatKind};\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -187,8 +187,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'gcx>> {\n-        Some(&self.fcx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.fcx.tcx.map)\n     }\n \n     fn visit_stmt(&mut self, s: &'gcx hir::Stmt) {"}, {"sha": "011c82625186f338320451ed8f8758914289ed96", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104125d5f7c4d1943e9de3871016e2b21c6b4ab6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=104125d5f7c4d1943e9de3871016e2b21c6b4ab6", "patch": "@@ -83,7 +83,7 @@ use syntax::symbol::{Symbol, keywords};\n use syntax_pos::Span;\n \n use rustc::hir::{self, map as hir_map, print as pprust};\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n \n@@ -178,8 +178,8 @@ impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.ccx.tcx.map)\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.ccx.tcx.map)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {"}]}