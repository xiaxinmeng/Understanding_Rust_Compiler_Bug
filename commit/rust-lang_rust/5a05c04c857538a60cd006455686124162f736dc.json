{"sha": "5a05c04c857538a60cd006455686124162f736dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDVjMDRjODU3NTM4YTYwY2QwMDY0NTU2ODYxMjQxNjJmNzM2ZGM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T15:57:12Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T16:14:50Z"}, "message": "Correct name of each shim when erroring", "tree": {"sha": "55c508b1198bf794b612e6f7d1db15716b481268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c508b1198bf794b612e6f7d1db15716b481268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a05c04c857538a60cd006455686124162f736dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a05c04c857538a60cd006455686124162f736dc", "html_url": "https://github.com/rust-lang/rust/commit/5a05c04c857538a60cd006455686124162f736dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a05c04c857538a60cd006455686124162f736dc/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "html_url": "https://github.com/rust-lang/rust/commit/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9f08141eb3b0744421c849c48d707e75ca36c50f", "filename": "src/shims/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a05c04c857538a60cd006455686124162f736dc/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a05c04c857538a60cd006455686124162f736dc/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=5a05c04c857538a60cd006455686124162f736dc", "patch": "@@ -92,7 +92,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         if !this.machine.communicate {\n-            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+            throw_unsup_format!(\"`fcntl` not available when isolation is enabled\")\n         }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n@@ -125,7 +125,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         if !this.machine.communicate {\n-            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+            throw_unsup_format!(\"`close` not available when isolation is enabled\")\n         }\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n@@ -145,7 +145,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         if !this.machine.communicate {\n-            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+            throw_unsup_format!(\"`read` not available when isolation is enabled\")\n         }\n \n         let tcx = &{ this.tcx.tcx };\n@@ -204,7 +204,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Helper function that gets a `FileHandle` immutable reference and allows to manipulate it\n     /// using the `f` closure.\n     ///\n-    /// If the `fd` file descriptor does not corresponds to a file, this functions returns `Ok(-1)`\n+    /// If the `fd` file descriptor does not correspond to a file, this functions returns `Ok(-1)`\n     /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor).\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n@@ -227,7 +227,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// to modify `MiriEvalContext` at the same time, so you can modify the handle and reinsert it\n     /// using `f`.\n     ///\n-    /// If the `fd` file descriptor does not corresponds to a file, this functions returns `Ok(-1)`\n+    /// If the `fd` file descriptor does not correspond to a file, this functions returns `Ok(-1)`\n     /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor).\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related"}]}