{"sha": "248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OGVlMGMzZmUzMzNmOTE4MGY4YzlkOWRmZDRlZmNjNjg4NmI1YmM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-02T15:51:39Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-02T15:51:39Z"}, "message": "Merge #90\n\n90: Inherent traversal r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f94bb3a8bd47e3612ef29e815532c07d7871fa0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94bb3a8bd47e3612ef29e815532c07d7871fa0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "html_url": "https://github.com/rust-lang/rust/commit/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7ffc114dab6d1e25ead195a5937cd4f9ca51ef2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffc114dab6d1e25ead195a5937cd4f9ca51ef2c", "html_url": "https://github.com/rust-lang/rust/commit/7ffc114dab6d1e25ead195a5937cd4f9ca51ef2c"}, {"sha": "1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "html_url": "https://github.com/rust-lang/rust/commit/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b"}], "stats": {"total": 150, "additions": 70, "deletions": 80}, "files": [{"sha": "216d592ff45ab431325baf45fdb9670a31a22060", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -1,15 +1,13 @@\n use join_to_string::join;\n \n use ra_syntax::{\n-    File, TextUnit, TextRange,\n+    File, TextUnit, TextRange, Direction,\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},\n     SyntaxKind::{COMMA, WHITESPACE},\n     SyntaxNodeRef,\n     algo::{\n-        Direction, siblings,\n         find_leaf_at_offset,\n         find_covering_node,\n-        ancestors,\n     },\n };\n \n@@ -25,12 +23,12 @@ pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n     let syntax = file.syntax();\n \n     let comma = find_leaf_at_offset(syntax, offset).find(|leaf| leaf.kind() == COMMA)?;\n-    let left = non_trivia_sibling(comma, Direction::Backward)?;\n-    let right = non_trivia_sibling(comma, Direction::Forward)?;\n+    let prev = non_trivia_sibling(comma, Direction::Prev)?;\n+    let next = non_trivia_sibling(comma, Direction::Next)?;\n     Some(move || {\n         let mut edit = EditBuilder::new();\n-        edit.replace(left.range(), right.text().to_string());\n-        edit.replace(right.range(), left.text().to_string());\n+        edit.replace(prev.range(), next.text().to_string());\n+        edit.replace(next.range(), prev.text().to_string());\n         LocalEdit {\n             edit: edit.finish(),\n             cursor_position: None,\n@@ -101,8 +99,8 @@ pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() ->\n \n pub fn introduce_variable<'a>(file: &'a File, range: TextRange) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let node = find_covering_node(file.syntax(), range);\n-    let expr = ancestors(node).filter_map(ast::Expr::cast).next()?;\n-    let anchor_stmt = ancestors(expr.syntax()).filter_map(ast::Stmt::cast).next()?;\n+    let expr = node.ancestors().filter_map(ast::Expr::cast).next()?;\n+    let anchor_stmt = expr.syntax().ancestors().filter_map(ast::Stmt::cast).next()?;\n     let indent = anchor_stmt.syntax().prev_sibling()?;\n     if indent.kind() != WHITESPACE {\n         return None;\n@@ -130,7 +128,7 @@ pub fn introduce_variable<'a>(file: &'a File, range: TextRange) -> Option<impl F\n }\n \n fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<SyntaxNodeRef> {\n-    siblings(node, direction)\n+    node.siblings(direction)\n         .skip(1)\n         .find(|node| !node.kind().is_trivia())\n }"}, {"sha": "62a63fb04407584a3476b39b6880fbfcf5861527", "filename": "crates/ra_editor/src/completion.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcompletion.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -4,7 +4,6 @@ use ra_syntax::{\n     File, TextUnit, AstNode, SyntaxNodeRef, SyntaxKind::*,\n     ast::{self, LoopBodyOwner, ModuleItemOwner},\n     algo::{\n-        ancestors,\n         visit::{visitor, Visitor, visitor_ctx, VisitorCtx},\n     },\n     text_utils::is_subrange,\n@@ -59,7 +58,7 @@ fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<Completi\n         return;\n     }\n     let mut visited_fn = false;\n-    for node in ancestors(name_ref.syntax()) {\n+    for node in name_ref.syntax().ancestors() {\n         if let Some(items) = visitor()\n             .visit::<ast::Root, _>(|it| Some(it.items()))\n             .visit::<ast::Module, _>(|it| Some(it.item_list()?.items()))\n@@ -92,7 +91,7 @@ fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<Completi\n \n fn param_completions(ctx: SyntaxNodeRef, acc: &mut Vec<CompletionItem>) {\n     let mut params = HashMap::new();\n-    for node in ancestors(ctx) {\n+    for node in ctx.ancestors() {\n         let _ = visitor_ctx(&mut params)\n             .visit::<ast::Root, _>(process)\n             .visit::<ast::ItemList, _>(process)\n@@ -123,7 +122,7 @@ fn param_completions(ctx: SyntaxNodeRef, acc: &mut Vec<CompletionItem>) {\n }\n \n fn is_node<'a, N: AstNode<'a>>(node: SyntaxNodeRef<'a>) -> bool {\n-    match ancestors(node).filter_map(N::cast).next() {\n+    match node.ancestors().filter_map(N::cast).next() {\n         None => false,\n         Some(n) => n.syntax().range() == node.range(),\n     }\n@@ -152,7 +151,7 @@ fn complete_expr_keywords(file: &File, fn_def: ast::FnDef, name_ref: ast::NameRe\n }\n \n fn is_in_loop_body(name_ref: ast::NameRef) -> bool {\n-    for node in ancestors(name_ref.syntax()) {\n+    for node in name_ref.syntax().ancestors() {\n         if node.kind() == FN_DEF || node.kind() == LAMBDA_EXPR {\n             break;\n         }\n@@ -171,7 +170,7 @@ fn is_in_loop_body(name_ref: ast::NameRef) -> bool {\n }\n \n fn complete_return(fn_def: ast::FnDef, name_ref: ast::NameRef) -> Option<CompletionItem> {\n-    // let is_last_in_block = ancestors(name_ref.syntax()).filter_map(ast::Expr::cast)\n+    // let is_last_in_block = name_ref.syntax().ancestors().filter_map(ast::Expr::cast)\n     //     .next()\n     //     .and_then(|it| it.syntax().parent())\n     //     .and_then(ast::Block::cast)\n@@ -181,7 +180,7 @@ fn complete_return(fn_def: ast::FnDef, name_ref: ast::NameRef) -> Option<Complet\n     //     return None;\n     // }\n \n-    let is_stmt = match ancestors(name_ref.syntax()).filter_map(ast::ExprStmt::cast).next() {\n+    let is_stmt = match name_ref.syntax().ancestors().filter_map(ast::ExprStmt::cast).next() {\n         None => false,\n         Some(expr_stmt) => expr_stmt.syntax().range() == name_ref.syntax().range()\n     };"}, {"sha": "b00a457b90184da409bb7b2709b19d13f25d67a6", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n-    File, TextRange, SyntaxNodeRef, TextUnit,\n+    File, TextRange, SyntaxNodeRef, TextUnit, Direction,\n     SyntaxKind::*,\n-    algo::{find_leaf_at_offset, LeafAtOffset, find_covering_node, ancestors, Direction, siblings},\n+    algo::{find_leaf_at_offset, LeafAtOffset, find_covering_node},\n };\n \n pub fn extend_selection(file: &File, range: TextRange) -> Option<TextRange> {\n@@ -30,7 +30,7 @@ pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange>\n         }\n     }\n \n-    match ancestors(node).skip_while(|n| n.range() == range).next() {\n+    match node.ancestors().skip_while(|n| n.range() == range).next() {\n         None => None,\n         Some(parent) => Some(parent.range()),\n     }\n@@ -71,12 +71,12 @@ fn pick_best<'a>(l: SyntaxNodeRef<'a>, r: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a\n }\n \n fn extend_comments(node: SyntaxNodeRef) -> Option<TextRange> {\n-    let left = adj_comments(node, Direction::Backward);\n-    let right = adj_comments(node, Direction::Forward);\n-    if left != right {\n+    let prev = adj_comments(node, Direction::Prev);\n+    let next = adj_comments(node, Direction::Next);\n+    if prev != next {\n         Some(TextRange::from_to(\n-            left.range().start(),\n-            right.range().end(),\n+            prev.range().start(),\n+            next.range().end(),\n         ))\n     } else {\n         None\n@@ -85,7 +85,7 @@ fn extend_comments(node: SyntaxNodeRef) -> Option<TextRange> {\n \n fn adj_comments(node: SyntaxNodeRef, dir: Direction) -> SyntaxNodeRef {\n     let mut res = node;\n-    for node in siblings(node, dir) {\n+    for node in node.siblings(dir) {\n         match node.kind() {\n             COMMENT => res = node,\n             WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),"}, {"sha": "733512368ef574f51a2ffa59962940d7e81e28a6", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -3,7 +3,7 @@ use std::collections::HashSet;\n use ra_syntax::{\n     File, TextRange, SyntaxNodeRef,\n     SyntaxKind,\n-    algo::{walk, Direction, siblings},\n+    Direction,\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -19,12 +19,10 @@ pub struct Fold {\n }\n \n pub fn folding_ranges(file: &File) -> Vec<Fold> {\n-    let syntax = file.syntax();\n-\n     let mut res = vec![];\n     let mut visited = HashSet::new();\n \n-    for node in walk::preorder(syntax) {\n+    for node in file.syntax().descendants() {\n         if visited.contains(&node) {\n             continue;\n         }\n@@ -64,7 +62,7 @@ fn contiguous_range_for<'a>(\n \n     let left = node;\n     let mut right = node;\n-    for node in siblings(node, Direction::Forward) {\n+    for node in node.siblings(Direction::Next) {\n         visited.insert(node);\n         match node.kind() {\n             SyntaxKind::WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),\n@@ -139,4 +137,4 @@ fn main() {\n     }\n \n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "a93924e0051e264e8e7c11f9b49ffed8dcf8f891", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -21,7 +21,7 @@ mod test_utils;\n use ra_syntax::{\n     File, TextUnit, TextRange, SyntaxNodeRef,\n     ast::{self, AstNode, NameOwner},\n-    algo::{walk, find_leaf_at_offset, ancestors},\n+    algo::find_leaf_at_offset,\n     SyntaxKind::{self, *},\n };\n pub use ra_syntax::AtomEdit;\n@@ -86,7 +86,7 @@ pub fn matching_brace(file: &File, offset: TextUnit) -> Option<TextUnit> {\n \n pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n     let mut res = Vec::new();\n-    for node in walk::preorder(file.syntax()) {\n+    for node in file.syntax().descendants() {\n         let tag = match node.kind() {\n             ERROR => \"error\",\n             COMMENT | DOC_COMMENT => \"comment\",\n@@ -110,7 +110,7 @@ pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n pub fn diagnostics(file: &File) -> Vec<Diagnostic> {\n     let mut res = Vec::new();\n \n-    for node in walk::preorder(file.syntax()) {\n+    for node in file.syntax().descendants() {\n         if node.kind() == ERROR {\n             res.push(Diagnostic {\n                 range: node.range(),\n@@ -130,7 +130,7 @@ pub fn syntax_tree(file: &File) -> String {\n }\n \n pub fn runnables(file: &File) -> Vec<Runnable> {\n-    walk::preorder(file.syntax())\n+    file.syntax().descendants()\n         .filter_map(ast::FnDef::cast)\n         .filter_map(|f| {\n             let name = f.name()?.text();\n@@ -159,7 +159,7 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n     let leaf = leaves.clone()\n         .find(|leaf| !leaf.kind().is_trivia())\n         .or_else(|| leaves.right_biased())?;\n-    ancestors(leaf)\n+    leaf.ancestors()\n         .filter_map(N::cast)\n         .next()\n }"}, {"sha": "eddd874956fe76f33062e21fb8d4629450e704d9", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -6,7 +6,7 @@ use std::{\n use ra_syntax::{\n     SyntaxNodeRef, SyntaxNode, SmolStr, AstNode,\n     ast::{self, NameOwner, LoopBodyOwner, ArgListOwner},\n-    algo::{ancestors, generate, walk::preorder}\n+    algo::{generate}\n };\n \n type ScopeId = usize;\n@@ -51,7 +51,7 @@ impl FnScopes {\n         res\n     }\n     fn add_bindings(&mut self, scope: ScopeId, pat: ast::Pat) {\n-        let entries = preorder(pat.syntax())\n+        let entries = pat.syntax().descendants()\n             .filter_map(ast::BindPat::cast)\n             .filter_map(ScopeEntry::new);\n         self.scopes[scope].entries.extend(entries);\n@@ -66,7 +66,7 @@ impl FnScopes {\n         self.scope_for.insert(node.owned(), scope);\n     }\n     fn scope_for(&self, node: SyntaxNodeRef) -> Option<ScopeId> {\n-        ancestors(node)\n+        node.ancestors()\n             .filter_map(|it| self.scope_for.get(&it.owned()).map(|&scope| scope))\n             .next()\n     }"}, {"sha": "e5cc5ca284fe8ce77730471ed6ad49b8b78e2cc3", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     ast::{self, NameOwner},\n     algo::{\n         visit::{visitor, Visitor},\n-        walk::{walk, WalkEvent, preorder},\n+        walk::{walk, WalkEvent},\n     },\n };\n use TextRange;\n@@ -25,7 +25,7 @@ pub struct FileSymbol {\n }\n \n pub fn file_symbols(file: &File) -> Vec<FileSymbol> {\n-    preorder(file.syntax())\n+    file.syntax().descendants()\n         .filter_map(to_symbol)\n         .collect()\n }"}, {"sha": "5120769418ea1dabfda4a5a5a794ee288bddae54", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -4,7 +4,6 @@ use ra_syntax::{\n     TextUnit, TextRange, SyntaxNodeRef, File, AstNode, SyntaxKind,\n     ast,\n     algo::{\n-        walk::preorder,\n         find_covering_node,\n     },\n     text_utils::{intersect, contains_offset_nonstrict},\n@@ -33,7 +32,7 @@ pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n     };\n     let node = find_covering_node(file.syntax(), range);\n     let mut edit = EditBuilder::new();\n-    for node in preorder(node) {\n+    for node in node.descendants() {\n         let text = match node.leaf_text() {\n             Some(text) => text,\n             None => continue,"}, {"sha": "a6678093d9e6a1d6ab5b4c8a393e07118365c449", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -94,29 +94,9 @@ pub fn find_covering_node(root: SyntaxNodeRef, range: TextRange) -> SyntaxNodeRe\n     common_ancestor(left, right)\n }\n \n-pub fn ancestors<'a>(node: SyntaxNodeRef<'a>) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n-    generate(Some(node), |&node| node.parent())\n-}\n-\n-#[derive(Debug)]\n-pub enum Direction {\n-    Forward,\n-    Backward,\n-}\n-\n-pub fn siblings<'a>(\n-    node: SyntaxNodeRef<'a>,\n-    direction: Direction\n-) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n-    generate(Some(node), move |&node| match direction {\n-        Direction::Forward => node.next_sibling(),\n-        Direction::Backward => node.prev_sibling(),\n-    })\n-}\n-\n fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a> {\n-    for p in ancestors(n1) {\n-        if ancestors(n2).any(|a| a == p) {\n+    for p in n1.ancestors() {\n+        if n2.ancestors().any(|a| a == p) {\n             return p;\n         }\n     }"}, {"sha": "8e294d965b01dfdb9256c68ff7e9289a1ac8dc6a", "filename": "crates/ra_syntax/src/algo/walk.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Falgo%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Falgo%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fwalk.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -3,12 +3,6 @@ use {\n     algo::generate,\n };\n \n-pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = SyntaxNodeRef<'a>> {\n-    walk(root).filter_map(|event| match event {\n-        WalkEvent::Enter(node) => Some(node),\n-        WalkEvent::Exit(_) => None,\n-    })\n-}\n \n #[derive(Debug, Copy, Clone)]\n pub enum WalkEvent<'a> {"}, {"sha": "738664afd0acd53ad991e61831a1d10183af325f", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -51,7 +51,7 @@ pub use {\n     ast::AstNode,\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n-    yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError},\n+    yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError, Direction},\n     reparsing::AtomEdit,\n };\n "}, {"sha": "dcafd2c4076c637e721334f1ab2e8328f54566f9", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -112,7 +112,7 @@ fn find_reparsable_node<'node>(\n     range: TextRange,\n ) -> Option<(SyntaxNodeRef<'node>, fn(&mut Parser))> {\n     let node = algo::find_covering_node(node, range);\n-    return algo::ancestors(node)\n+    return node.ancestors()\n         .filter_map(|node| reparser(node).map(|r| (node, r)))\n         .next();\n "}, {"sha": "e274f7471f81dbf9f30103a0b81d95a4be5e11e5", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -1,6 +1,6 @@\n use std::fmt::Write;\n use {\n-    algo::walk::{preorder, walk, WalkEvent},\n+    algo::walk::{walk, WalkEvent},\n     SyntaxKind, File, SyntaxNodeRef\n };\n \n@@ -56,7 +56,7 @@ pub fn check_fuzz_invariants(text: &str) {\n \n pub(crate) fn validate_block_structure(root: SyntaxNodeRef) {\n     let mut stack = Vec::new();\n-    for node in preorder(root) {\n+    for node in root.descendants() {\n         match node.kind() {\n             SyntaxKind::L_CURLY => {\n                 stack.push(node)"}, {"sha": "710320f47ca182bfcbb5166af2f693e9d86768be", "filename": "crates/ra_syntax/src/yellow/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -53,15 +53,37 @@ impl<R: TreeRoot<RaTypes>> Hash for SyntaxNode<R> {\n     }\n }\n \n-impl SyntaxNode<OwnedRoot> {\n+impl SyntaxNode {\n     pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> SyntaxNode {\n         SyntaxNode(::rowan::SyntaxNode::new(green, errors))\n     }\n }\n-impl<'a> SyntaxNode<RefRoot<'a>> {\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum Direction {\n+    Next,\n+    Prev,\n+}\n+\n+impl<'a> SyntaxNodeRef<'a> {\n     pub fn leaf_text(self) -> Option<&'a SmolStr> {\n         self.0.leaf_text()\n     }\n+    pub fn ancestors(self) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+        ::algo::generate(Some(self), |&node| node.parent())\n+    }\n+    pub fn descendants(self) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+        ::algo::walk::walk(self).filter_map(|event| match event {\n+            ::algo::walk::WalkEvent::Enter(node) => Some(node),\n+            ::algo::walk::WalkEvent::Exit(_) => None,\n+        })\n+    }\n+    pub fn siblings(self, direction: Direction) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+        ::algo::generate(Some(self), move |&node| match direction {\n+            Direction::Next => node.next_sibling(),\n+            Direction::Prev => node.prev_sibling(),\n+        })\n+    }\n }\n \n impl<R: TreeRoot<RaTypes>> SyntaxNode<R> {"}, {"sha": "0db1049de9b2ff32e22943d39c6720610a9e3a5b", "filename": "crates/ra_syntax/src/yellow/syntax_text.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_text.rs?ref=248ee0c3fe333f9180f8c9d9dfd4efcc6886b5bc", "patch": "@@ -4,7 +4,6 @@ use std::{\n \n use {\n     SyntaxNodeRef, TextRange, TextUnit,\n-    algo::walk::preorder,\n     text_utils::{intersect, contains_offset_nonstrict},\n };\n \n@@ -23,7 +22,8 @@ impl<'a> SyntaxText<'a> {\n     }\n     pub fn chunks(&self) -> impl Iterator<Item=&'a str> {\n         let range = self.range;\n-        preorder(self.node)\n+        self.node\n+            .descendants()\n             .filter_map(move |node| {\n                 let text = node.leaf_text()?;\n                 let range = intersect(range, node.range())?;"}]}