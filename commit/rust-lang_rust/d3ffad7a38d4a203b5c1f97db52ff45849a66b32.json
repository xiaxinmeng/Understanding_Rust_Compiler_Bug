{"sha": "d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZmZhZDdhMzhkNGEyMDNiNWMxZjk3ZGI1MmZmNDU4NDlhNjZiMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-20T04:48:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-20T04:48:34Z"}, "message": "Auto merge of #31777 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #31721, #31737, #31741, #31750, #31763, #31764, #31765, #31775\n- Failed merges:", "tree": {"sha": "1b45113d2b25640d9d76077aa917acb9d5e3fff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b45113d2b25640d9d76077aa917acb9d5e3fff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "html_url": "https://github.com/rust-lang/rust/commit/d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a212264011289885bdb8b2306a8fdd50e1f83c99", "url": "https://api.github.com/repos/rust-lang/rust/commits/a212264011289885bdb8b2306a8fdd50e1f83c99", "html_url": "https://github.com/rust-lang/rust/commit/a212264011289885bdb8b2306a8fdd50e1f83c99"}, {"sha": "78f6431002b81dc7ef3001965192e6fbfff34d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f6431002b81dc7ef3001965192e6fbfff34d7a", "html_url": "https://github.com/rust-lang/rust/commit/78f6431002b81dc7ef3001965192e6fbfff34d7a"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "e0759cb856381f1643e7aff2772aa77eb5b0f0f5", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -82,7 +82,7 @@ Gareth Daniel Smith <garethdanielsmith@gmail.com> Gareth Smith <garethdanielsmit\n Georges Dubus <georges.dubus@gmail.com> <georges.dubus@compiletoi.net>\n Graham Fawcett <graham.fawcett@gmail.com> Graham Fawcett <fawcett@uwindsor.ca>\n Graydon Hoare <graydon@pobox.com> Graydon Hoare <graydon@mozilla.com>\n-Guillaume Gomez <guillaume1.gomez@gmail.com>\n+Guillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <ggomez@ggo.ifr.lan>\n Heather <heather@cynede.net> <Cynede@Gentoo.org>\n Heather <heather@cynede.net> <Heather@cynede.net>\n Herman J. Radtke III <herman@hermanradtke.com> Herman J. Radtke III <hermanradtke@gmail.com>"}, {"sha": "c96d303e6bb64cffed87e8b11e463744806a24eb", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -45,19 +45,19 @@ extern {}\n // explicitly request it), and on Android we explicitly request it as\n // unprefixing cause segfaults (mismatches in allocators).\n extern {\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n                link_name = \"je_mallocx\")]\n     fn mallocx(size: size_t, flags: c_int) -> *mut c_void;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n                link_name = \"je_rallocx\")]\n     fn rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n                link_name = \"je_xallocx\")]\n     fn xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n                link_name = \"je_sdallocx\")]\n     fn sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n                link_name = \"je_nallocx\")]\n     fn nallocx(size: size_t, flags: c_int) -> size_t;\n }"}, {"sha": "085acc198d16adcdbccd2e1d94ff24b0bd75dc19", "filename": "src/librustc/front/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibrustc%2Ffront%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibrustc%2Ffront%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcheck_attr.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -101,6 +101,7 @@ impl<'a, 'v> Visitor<'v> for CheckAttrVisitor<'a> {\n         for attr in &item.attrs {\n             self.check_attribute(attr, target);\n         }\n+        visit::walk_item(self, item);\n     }\n }\n "}, {"sha": "1b49409970ded6549c6abcf45bfa64b26deea627", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -205,8 +205,8 @@ let f = Bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `Bar::Foo`\n                                 //        is private\n ```\n \n-To fix this error, please ensure that all the fields of the struct, or\n-implement a function for easy instantiation. Examples:\n+To fix this error, please ensure that all the fields of the struct are public,\n+or implement a function for easy instantiation. Examples:\n \n ```\n mod Bar {"}, {"sha": "f0786b9b1fadd283397e631668ea0815280e80b1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -833,7 +833,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             NamedField(name) => format!(\"field `{}` of {} is private\",\n                                         name, struct_desc),\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n-                                         idx + 1, struct_desc),\n+                                         idx, struct_desc),\n         };\n         span_err!(self.tcx.sess, span, E0451,\n                   \"{}\", &msg[..]);"}, {"sha": "f7e13a35e9e502ea57422bdcd70c2d51eb7eb86c", "filename": "src/libstd/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -528,13 +528,13 @@ pub struct ArgsOs { inner: os_imp::Args }\n /// via the command line).\n ///\n /// The first element is traditionally the path to the executable, but it can be\n-/// set to arbitrary text, and it may not even exist, so this property should\n+/// set to arbitrary text, and may not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n /// # Panics\n ///\n /// The returned iterator will panic during iteration if any argument to the\n-/// process is not valid unicode. If this is not desired it is recommended to\n+/// process is not valid unicode. If this is not desired,\n /// use the `args_os` function instead.\n ///\n /// # Examples\n@@ -603,7 +603,7 @@ impl ExactSizeIterator for ArgsOs {\n /// Constants associated with the current target\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {\n-    /// A string describing the architecture of the CPU that this is currently\n+    /// A string describing the architecture of the CPU that is currently\n     /// in use.\n     ///\n     /// Some possible values:"}, {"sha": "bc30c1a7f48eb6c46b13f55e374bd2fc7da42c32", "filename": "src/libstd/os/netbsd/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fraw.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -46,9 +46,9 @@ pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_nlink: u32,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: u32,\n+    pub st_uid: uid_t,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: u32,\n+    pub st_gid: gid_t,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub st_rdev: u64,\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "4b5df7ea53ca1e575108ae4652c5347d9ddac8fb", "filename": "src/test/compile-fail/issue-31769.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    #[inline] struct Foo;  //~ ERROR attribute should be applied to function\n+    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct or enum\n+}"}, {"sha": "588c9be3065f82c32890e1ab1951d99474d71dad", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ffad7a38d4a203b5c1f97db52ff45849a66b32/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "patch": "@@ -63,25 +63,25 @@ fn this_crate() {\n     let c = a::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR: field #1 of struct `a::A` is private\n+    let a::A(()) = a; //~ ERROR: field #0 of struct `a::A` is private\n     let a::A(_) = a;\n-    match a { a::A(()) => {} } //~ ERROR: field #1 of struct `a::A` is private\n+    match a { a::A(()) => {} } //~ ERROR: field #0 of struct `a::A` is private\n     match a { a::A(_) => {} }\n \n     let a::B(_) = b;\n-    let a::B(_b) = b; //~ ERROR: field #1 of struct `a::B` is private\n+    let a::B(_b) = b; //~ ERROR: field #0 of struct `a::B` is private\n     match b { a::B(_) => {} }\n-    match b { a::B(_b) => {} } //~ ERROR: field #1 of struct `a::B` is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #1 of struct `a::B` is private\n+    match b { a::B(_b) => {} } //~ ERROR: field #0 of struct `a::B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field #0 of struct `a::B` is private\n \n     let a::C(_, _) = c;\n     let a::C(_a, _) = c;\n-    let a::C(_, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n-    let a::C(_a, _b) = c; //~ ERROR: field #2 of struct `a::C` is private\n+    let a::C(_, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n+    let a::C(_a, _b) = c; //~ ERROR: field #1 of struct `a::C` is private\n     match c { a::C(_, _) => {} }\n     match c { a::C(_a, _) => {} }\n-    match c { a::C(_, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR: field #2 of struct `a::C` is private\n+    match c { a::C(_, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR: field #1 of struct `a::C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 of struct `other::A` is private\n+    let other::A(()) = a; //~ ERROR: field #0 of struct `other::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #1 of struct `other::A` is private\n+    //~^ ERROR: field #0 of struct `other::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 of struct `other::B` is private\n+    let other::B(_b) = b; //~ ERROR: field #0 of struct `other::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #1 of struct `other::B` is private\n+    //~^ ERROR: field #0 of struct `other::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #1 of struct `other::B` is private\n+    //~^ ERROR: field #0 of struct `other::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #1 of struct `other::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #2 of struct `other::C` is private\n+    //~^ ERROR: field #1 of struct `other::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #2 of struct `other::C` is private\n+    //~^ ERROR: field #1 of struct `other::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}]}