{"sha": "079bf755a3449a61e61714a17d00f21337f2471e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OWJmNzU1YTM0NDlhNjFlNjE3MTRhMTdkMDBmMjEzMzdmMjQ3MWU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-12T12:56:41Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-12T12:56:41Z"}, "message": "Detect fake spans in non_fmt_panic lint.", "tree": {"sha": "c4138ec7eedc8ad66a3eb3fefe9daba7a5bac5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4138ec7eedc8ad66a3eb3fefe9daba7a5bac5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079bf755a3449a61e61714a17d00f21337f2471e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079bf755a3449a61e61714a17d00f21337f2471e", "html_url": "https://github.com/rust-lang/rust/commit/079bf755a3449a61e61714a17d00f21337f2471e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079bf755a3449a61e61714a17d00f21337f2471e/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2226b1f174f3cc644275ef8663be6295a7f704", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2226b1f174f3cc644275ef8663be6295a7f704", "html_url": "https://github.com/rust-lang/rust/commit/eb2226b1f174f3cc644275ef8663be6295a7f704"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "b93158d7812a814b7fdd10c834dd2c364306901d", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/079bf755a3449a61e61714a17d00f21337f2471e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079bf755a3449a61e61714a17d00f21337f2471e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=079bf755a3449a61e61714a17d00f21337f2471e", "patch": "@@ -95,7 +95,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n-        if !span.contains(arg_span) {\n+        if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n             l.emit();\n             return;\n@@ -180,7 +180,7 @@ fn check_panic_str<'tcx>(\n                 _ => \"panic message contains unused formatting placeholders\",\n             });\n             l.note(\"this message is not used as a format string when given without arguments, but will be in Rust 2021\");\n-            if span.contains(arg.span) {\n+            if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_hi(),\n                     &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n@@ -211,7 +211,7 @@ fn check_panic_str<'tcx>(\n         cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n-            if span.contains(arg.span) {\n+            if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n                     \"add a \\\"{}\\\" format string to use the message literally\",\n@@ -259,3 +259,11 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n         if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind { symbol } else { sym::panic };\n     (expn.call_site, panic_macro, macro_symbol.as_str())\n }\n+\n+fn is_arg_inside_call(arg: Span, call: Span) -> bool {\n+    // We only add suggestions if the argument we're looking at appears inside the\n+    // panic call in the source file, to avoid invalid suggestions when macros are involved.\n+    // We specifically check for the spans to not be identical, as that happens sometimes when\n+    // proc_macros lie about spans and apply the same span to all the tokens they produce.\n+    call.contains(arg) && !call.source_equal(&arg)\n+}"}]}