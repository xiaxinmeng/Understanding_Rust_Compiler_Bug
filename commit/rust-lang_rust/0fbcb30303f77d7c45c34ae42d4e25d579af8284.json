{"sha": "0fbcb30303f77d7c45c34ae42d4e25d579af8284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmNiMzAzMDNmNzdkN2M0NWMzNGFlNDJkNGUyNWQ1NzlhZjgyODQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-04-02T05:28:10Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-04-02T05:28:10Z"}, "message": "Merge branch 'master' into dogfood_target_dir", "tree": {"sha": "ba8976ee4ac4894a673e3f415fbac733171efa16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8976ee4ac4894a673e3f415fbac733171efa16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbcb30303f77d7c45c34ae42d4e25d579af8284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbcb30303f77d7c45c34ae42d4e25d579af8284", "html_url": "https://github.com/rust-lang/rust/commit/0fbcb30303f77d7c45c34ae42d4e25d579af8284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbcb30303f77d7c45c34ae42d4e25d579af8284/comments", "author": null, "committer": null, "parents": [{"sha": "fcabbeb251bedabce6b45b8c4db6ec15e6002b82", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcabbeb251bedabce6b45b8c4db6ec15e6002b82", "html_url": "https://github.com/rust-lang/rust/commit/fcabbeb251bedabce6b45b8c4db6ec15e6002b82"}, {"sha": "83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "html_url": "https://github.com/rust-lang/rust/commit/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca"}], "stats": {"total": 193, "additions": 133, "deletions": 60}, "files": [{"sha": "ebdb88a3ba9d60d22ce55d4fa1b71ceeda234716", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0fbcb30303f77d7c45c34ae42d4e25d579af8284/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fbcb30303f77d7c45c34ae42d4e25d579af8284/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=0fbcb30303f77d7c45c34ae42d4e25d579af8284", "patch": "@@ -15,41 +15,41 @@ High level approach:\n \n All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n \n-Some issues are easier than others. The [good first issue](https://github.com/rust-lang-nursery/rust-clippy/labels/good%20first%20issue)\n+Some issues are easier than others. The [`good first issue`](https://github.com/rust-lang-nursery/rust-clippy/labels/good%20first%20issue)\n label can be used to find the easy issues. If you want to work on an issue, please leave a comment\n so that we can assign it to you!\n \n-Issues marked [T-AST](https://github.com/rust-lang-nursery/rust-clippy/labels/T-AST) involve simple\n+Issues marked [`T-AST`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-AST) involve simple\n matching of the syntax tree structure, and are generally easier than\n-[T-middle](https://github.com/rust-lang-nursery/rust-clippy/labels/T-middle) issues, which involve types\n+[`T-middle`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-middle) issues, which involve types\n and resolved paths.\n \n-Issues marked [E-medium](https://github.com/rust-lang-nursery/rust-clippy/labels/E-medium) are generally\n-pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n-as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n-\n-[Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n-to lint-writing, though it does get into advanced stuff. Most lints consist of an implementation of\n-`LintPass` with one or more of its default methods overridden. See the existing lints for examples\n-of this.\n-\n-T-AST issues will generally need you to match against a predefined syntax structure. To figure out\n+[`T-AST`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-AST) issues will generally need you to match against a predefined syntax structure. To figure out\n how this syntax structure is encoded in the AST, it is recommended to run `rustc -Z ast-json` on an\n example of the structure and compare with the\n [nodes in the AST docs](http://manishearth.github.io/rust-internals-docs/syntax/ast/). Usually\n the lint will end up to be a nested series of matches and ifs,\n [like so](https://github.com/rust-lang-nursery/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n \n-T-middle issues can be more involved and require verifying types. The\n+[`E-medium`](https://github.com/rust-lang-nursery/rust-clippy/labels/E-medium) issues are generally\n+pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n+as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n+\n+[`T-middle`](https://github.com/rust-lang-nursery/rust-clippy/labels/T-middle) issues can\n+be more involved and require verifying types. The\n [`ty`](http://manishearth.github.io/rust-internals-docs/rustc/ty) module contains a\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n an AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n \n ### Writing code\n \n-Compiling clippy can take almost a minute or more depending on your machine.\n-You can set the environment flag `CARGO_INCREMENTAL=1` to cut down that time to\n-almost a third on average, depending on the influence your change has.\n+Compiling clippy from scratch can take almost a minute or more depending on your machine.\n+However, since Rust 1.24.0 incremental compilation is enabled by default and compile times for small changes should be quick.\n+\n+[Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n+to lint-writing, though it does get into advanced stuff. Most lints consist of an implementation of\n+`LintPass` with one or more of its default methods overridden. See the existing lints for examples\n+of this.\n \n Please document your lint with a doc comment akin to the following:\n \n@@ -61,8 +61,13 @@ Please document your lint with a doc comment akin to the following:\n /// **Known problems:** None. (Or describe where it could go wrong.)\n ///\n /// **Example:**\n+///\n /// ```rust\n-/// Insert a short example if you have one.\n+/// // Bad\n+/// Insert a short example of code that triggers the lint\n+///\n+/// // Good\n+/// Insert a short example of improved code that doesn't trigger the lint\n /// ```\n ```\n \n@@ -80,12 +85,6 @@ If you don't want to wait for all tests to finish, you can also execute a single\n TESTNAME=ui/empty_line_after_outer_attr cargo test --test compile-test\n ```\n \n-And you can also combine this with `CARGO_INCREMENTAL`:\n-\n-```bash\n-CARGO_INCREMENTAL=1 TESTNAME=ui/doc cargo test --test compile-test\n-```\n-\n ### Testing manually\n \n Manually testing against an example file is useful if you have added some"}, {"sha": "553a98f682dee2f111bacc8a134994c0c729dd04", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fbcb30303f77d7c45c34ae42d4e25d579af8284/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbcb30303f77d7c45c34ae42d4e25d579af8284/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=0fbcb30303f77d7c45c34ae42d4e25d579af8284", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::{self, TyCtxt};\n use semver::Version;\n use syntax::ast::{Attribute, AttrStyle, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n-use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then};\n+use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then, without_block_comments};\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -85,7 +85,11 @@ declare_clippy_lint! {\n /// If it was meant to be an outer attribute, then the following item\n /// should not be separated by empty lines.\n ///\n-/// **Known problems:** None\n+/// **Known problems:** Can cause false positives.\n+///\n+/// From the clippy side it's difficult to detect empty lines between an attributes and the\n+/// following item because empty lines and comments are not part of the AST. The parsing\n+/// currently works for basic cases but is not perfect.\n ///\n /// **Example:**\n /// ```rust\n@@ -105,7 +109,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub EMPTY_LINE_AFTER_OUTER_ATTR,\n-    style,\n+    nursery,\n     \"empty line after outer attribute\"\n }\n \n@@ -276,6 +280,8 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n \n             if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();\n+                let lines = without_block_comments(lines);\n+\n                 if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n                     span_lint(\n                         cx,"}, {"sha": "e3a7fc851b15215dd57da374bc40294cd3a03fdf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0fbcb30303f77d7c45c34ae42d4e25d579af8284/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbcb30303f77d7c45c34ae42d4e25d579af8284/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=0fbcb30303f77d7c45c34ae42d4e25d579af8284", "patch": "@@ -1086,3 +1086,36 @@ pub fn clip(tcx: TyCtxt, u: u128, ity: ast::UintTy) -> u128 {\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }\n+\n+/// Remove block comments from the given Vec of lines\n+///\n+/// # Examples\n+///\n+/// ```rust,ignore\n+/// without_block_comments(vec![\"/*\", \"foo\", \"*/\"]);\n+/// // => vec![]\n+///\n+/// without_block_comments(vec![\"bar\", \"/*\", \"foo\", \"*/\"]);\n+/// // => vec![\"bar\"]\n+/// ```\n+pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n+    let mut without = vec![];\n+\n+    let mut nest_level = 0;\n+\n+    for line in lines.into_iter() {\n+        if line.contains(\"/*\") {\n+            nest_level += 1;\n+            continue;\n+        } else if line.contains(\"*/\") {\n+            nest_level -= 1;\n+            continue;\n+        }\n+\n+        if nest_level == 0 {\n+            without.push(line);\n+        }\n+    }\n+\n+    without\n+}"}, {"sha": "30063dac0a4659ff7c88717df115b86c9b862326", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fbcb30303f77d7c45c34ae42d4e25d579af8284/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbcb30303f77d7c45c34ae42d4e25d579af8284/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=0fbcb30303f77d7c45c34ae42d4e25d579af8284", "patch": "@@ -79,4 +79,16 @@ pub enum FooFighter {\n     Bar4\n }\n \n+// This should not produce a warning because the empty line is inside a block comment\n+#[crate_type = \"lib\"]\n+/*\n+\n+*/\n+pub struct S;\n+\n+// This should not produce a warning\n+#[crate_type = \"lib\"]\n+/* test */\n+pub struct T;\n+\n fn main() { }"}, {"sha": "375df05754497b3e9482bf3d0375f8cf4ef37725", "filename": "tests/without_block_comments.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0fbcb30303f77d7c45c34ae42d4e25d579af8284/tests%2Fwithout_block_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbcb30303f77d7c45c34ae42d4e25d579af8284/tests%2Fwithout_block_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwithout_block_comments.rs?ref=0fbcb30303f77d7c45c34ae42d4e25d579af8284", "patch": "@@ -0,0 +1,29 @@\n+extern crate clippy_lints;\n+use clippy_lints::utils::without_block_comments;\n+\n+#[test]\n+fn test_lines_without_block_comments() {\n+    let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n+    println!(\"result: {:?}\", result);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(\n+        vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]\n+    );\n+    assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n+\n+    let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"/* one-line comment */\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\",  \"comment\",  \"*/\", \"test\", \"*/\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n+    assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n+}"}, {"sha": "c28177e10629c927618cea9bfbc226153e9de0da", "filename": "util/lintlib.py", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0fbcb30303f77d7c45c34ae42d4e25d579af8284/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/0fbcb30303f77d7c45c34ae42d4e25d579af8284/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=0fbcb30303f77d7c45c34ae42d4e25d579af8284", "patch": "@@ -7,12 +7,11 @@\n import logging as log\n log.basicConfig(level=log.INFO, format='%(levelname)s: %(message)s')\n \n-Lint = collections.namedtuple('Lint', 'name level doc sourcefile')\n+Lint = collections.namedtuple('Lint', 'name level doc sourcefile group')\n Config = collections.namedtuple('Config', 'name ty doc default')\n \n lintname_re = re.compile(r'''pub\\s+([A-Z_][A-Z_0-9]*)''')\n-level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n-group_re = re.compile(r'''([a-z_][a-z_0-9]+)''')\n+group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n confvar_re = re.compile(\n     r'''/// Lint: (\\w+). (.*).*\\n\\s*\\([^,]+,\\s+\"([^\"]+)\",\\s+([^=\\)]+)=>\\s+(.*)\\),''', re.MULTILINE)\n@@ -27,6 +26,7 @@\n     \"nursery\": 'Allow',\n }\n \n+\n def parse_lints(lints, filepath):\n     last_comment = []\n     comment = True\n@@ -57,36 +57,30 @@ def parse_lints(lints, filepath):\n                 else:\n                     last_comment = []\n             if not comment:\n-                if name:\n-                    g = group_re.search(line)\n-                    if g:\n-                        group = g.group(1).lower()\n-                        level = lint_levels[group]\n-                        log.info(\"found %s with level %s in %s\",\n-                                name, level, filepath)\n-                        lints.append(Lint(name, level, last_comment, filepath, group))\n-                        last_comment = []\n-                        comment = True\n-                else:\n-                    m = lintname_re.search(line)\n-                    if m:\n-                        name = m.group(1).lower()\n-\n-                        if deprecated:\n-                            level = \"Deprecated\"\n-                        else:\n-                            while True:\n-                                m = level_re.search(line)\n-                                if m:\n-                                    level = m.group(0)\n-                                    break\n-                                line = next(fp)\n-                        if not clippy:\n-                            log.info(\"found %s with level %s in %s\",\n-                                    name, level, filepath)\n-                            lints.append(Lint(name, level, last_comment, filepath, \"deprecated\"))\n-                            last_comment = []\n-                            comment = True\n+                m = lintname_re.search(line)\n+\n+                if m:\n+                    name = m.group(1).lower()\n+                    line = next(fp)\n+\n+                    if deprecated:\n+                        level = \"Deprecated\"\n+                        group = \"deprecated\"\n+                    else:\n+                        while True:\n+                            g = group_re.search(line)\n+                            if g:\n+                                group = g.group(1).lower()\n+                                level = lint_levels[group]\n+                                break\n+                            line = next(fp)\n+\n+                    log.info(\"found %s with level %s in %s\",\n+                             name, level, filepath)\n+                    lints.append(Lint(name, level, last_comment, filepath, group))\n+                    last_comment = []\n+                    comment = True\n+\n                     if \"}\" in line:\n                         log.warn(\"Warning: missing Lint-Name in %s\", filepath)\n                         comment = True"}]}