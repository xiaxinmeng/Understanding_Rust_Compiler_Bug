{"sha": "0b40ae178a4e3dfa8ec5312562cf473adea3989e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNDBhZTE3OGE0ZTNkZmE4ZWM1MzEyNTYyY2Y0NzNhZGVhMzk4OWU=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-04-30T21:54:10Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-04-30T21:54:10Z"}, "message": "fixed tests, added clippy_restrictions lint group", "tree": {"sha": "2906857f0dc17bb182936251e1ef5bb31c6e7a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2906857f0dc17bb182936251e1ef5bb31c6e7a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b40ae178a4e3dfa8ec5312562cf473adea3989e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b40ae178a4e3dfa8ec5312562cf473adea3989e", "html_url": "https://github.com/rust-lang/rust/commit/0b40ae178a4e3dfa8ec5312562cf473adea3989e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b40ae178a4e3dfa8ec5312562cf473adea3989e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96744018670a29b926ee084779a1333c2542915", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96744018670a29b926ee084779a1333c2542915", "html_url": "https://github.com/rust-lang/rust/commit/a96744018670a29b926ee084779a1333c2542915"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "be732740442707bc5db37e96f60f4b8e611e0d6d", "filename": "src/arithmetic.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b40ae178a4e3dfa8ec5312562cf473adea3989e/src%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b40ae178a4e3dfa8ec5312562cf473adea3989e/src%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farithmetic.rs?ref=0b40ae178a4e3dfa8ec5312562cf473adea3989e", "patch": "@@ -15,9 +15,8 @@ use utils::span_lint;\n /// ```\n /// a + 1\n /// ```\n-declare_lint! {\n+declare_restriction_lint! {\n     pub INTEGER_ARITHMETIC,\n-    Allow,\n     \"Any integer arithmetic statement\"\n }\n \n@@ -32,9 +31,8 @@ declare_lint! {\n /// ```\n /// a + 1.0\n /// ```\n-declare_lint! {\n+declare_restriction_lint! {\n     pub FLOAT_ARITHMETIC,\n-    Allow,\n     \"Any floating-point arithmetic statement\"\n }\n \n@@ -55,32 +53,32 @@ impl LateLintPass for Arithmetic {\n         match expr.node {\n             hir::ExprBinary(ref op, ref l, ref r) => {\n                 match op.node {\n-                    hir::BiAnd | hir::BiOr | hir::BiBitAnd | \n-                    hir::BiBitOr | hir::BiBitXor | hir::BiShl | hir::BiShr | \n-                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | \n+                    hir::BiAnd | hir::BiOr | hir::BiBitAnd |\n+                    hir::BiBitOr | hir::BiBitXor | hir::BiShl | hir::BiShr |\n+                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe |\n                     hir::BiGt => return,\n                     _ => ()\n                 }\n                 let (l_ty, r_ty) = (cx.tcx.expr_ty(l), cx.tcx.expr_ty(r));\n                 if l_ty.is_integral() && r_ty.is_integral() {\n-                    span_lint(cx, \n-                              INTEGER_ARITHMETIC, \n+                    span_lint(cx,\n+                              INTEGER_ARITHMETIC,\n                               expr.span,\n                               \"integer arithmetic detected\");\n-                    self.span = Some(expr.span);                    \n+                    self.span = Some(expr.span);\n                 } else if l_ty.is_floating_point() && r_ty.is_floating_point() {\n                     span_lint(cx,\n                               FLOAT_ARITHMETIC,\n                               expr.span,\n                               \"floating-point arithmetic detected\");\n-                    self.span = Some(expr.span);                    \n+                    self.span = Some(expr.span);\n                 }\n             },\n             hir::ExprUnary(hir::UnOp::UnNeg, ref arg) => {\n                 let ty = cx.tcx.expr_ty(arg);\n                 if ty.is_integral() {\n-                    span_lint(cx, \n-                              INTEGER_ARITHMETIC, \n+                    span_lint(cx,\n+                              INTEGER_ARITHMETIC,\n                               expr.span,\n                               \"integer arithmetic detected\");\n                     self.span = Some(expr.span);\n@@ -95,7 +93,7 @@ impl LateLintPass for Arithmetic {\n             _ => ()\n         }\n     }\n-    \n+\n     fn check_expr_post(&mut self, _: &LateContext, expr: &hir::Expr) {\n         if Some(expr.span) == self.span {\n             self.span = None;"}, {"sha": "e22d85a43e1cd43ee2ea7a2ae0a4ac73a67e556f", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b40ae178a4e3dfa8ec5312562cf473adea3989e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b40ae178a4e3dfa8ec5312562cf473adea3989e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0b40ae178a4e3dfa8ec5312562cf473adea3989e", "patch": "@@ -44,6 +44,12 @@ extern crate rustc_const_eval;\n extern crate rustc_const_math;\n use rustc_plugin::Registry;\n \n+macro_rules! declare_restriction_lint {\n+    { pub $name:tt, $description:tt } => {\n+        declare_lint! { pub $name, Allow, $description }\n+    };\n+}\n+\n pub mod consts;\n #[macro_use]\n pub mod utils;\n@@ -242,9 +248,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box mem_forget::MemForget);\n     reg.register_late_lint_pass(box arithmetic::Arithmetic::default());\n \n-    reg.register_lint_group(\"clippy_pedantic\", vec![\n+    reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n+    ]);\n+\n+    reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n         booleans::NONMINIMAL_BOOL,\n         enum_glob_use::ENUM_GLOB_USE,"}, {"sha": "54ac65970ae56e84376cac9fc858fe4cd459d699", "filename": "tests/compile-fail/arithmetic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b40ae178a4e3dfa8ec5312562cf473adea3989e/tests%2Fcompile-fail%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b40ae178a4e3dfa8ec5312562cf473adea3989e/tests%2Fcompile-fail%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farithmetic.rs?ref=0b40ae178a4e3dfa8ec5312562cf473adea3989e", "patch": "@@ -15,7 +15,6 @@ fn main() {\n     i & 1; // no wrapping\n     i | 1; \n     i ^ 1;\n-    i % 7;\n     i >> 1;\n     i << 1;\n     "}, {"sha": "bfed0430abb776bfbda6550d8c046e490964fbdd", "filename": "util/update_lints.py", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0b40ae178a4e3dfa8ec5312562cf473adea3989e/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/0b40ae178a4e3dfa8ec5312562cf473adea3989e/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=0b40ae178a4e3dfa8ec5312562cf473adea3989e", "patch": "@@ -21,12 +21,18 @@\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n ''', re.VERBOSE | re.DOTALL)\n \n+declare_restriction_lint_re = re.compile(r'''\n+    declare_restriction_lint! \\s* [{(] \\s*\n+    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n+    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n+''', re.VERBOSE | re.DOTALL)\n+\n nl_escape_re = re.compile(r'\\\\\\n\\s*')\n \n wiki_link = 'https://github.com/Manishearth/rust-clippy/wiki'\n \n \n-def collect(lints, deprecated_lints, fn):\n+def collect(lints, deprecated_lints, restriction_lints, fn):\n     \"\"\"Collect all lints from a file.\n \n     Adds entries to the lints list as `(module, name, level, desc)`.\n@@ -48,6 +54,14 @@ def collect(lints, deprecated_lints, fn):\n                                 match.group('name').lower(),\n                                 desc.replace('\\\\\"', '\"')))\n \n+    for match in declare_restriction_lint_re.finditer(code):\n+        # remove \\-newline escapes from description string\n+        desc = nl_escape_re.sub('', match.group('desc'))\n+        restriction_lints.append((os.path.splitext(os.path.basename(fn))[0],\n+                                match.group('name').lower(),\n+                                \"allow\",\n+                                desc.replace('\\\\\"', '\"')))\n+        \n \n def gen_table(lints, link=None):\n     \"\"\"Write lint table in Markdown format.\"\"\"\n@@ -86,7 +100,6 @@ def gen_deprecated(lints):\n     for lint in lints:\n         yield '    store.register_removed(\"%s\", \"%s\");\\n' % (lint[1], lint[2])\n \n-\n def replace_region(fn, region_start, region_end, callback,\n                    replace_start=True, write_back=True):\n     \"\"\"Replace a region in a file delimited by two lines matching regexes.\n@@ -128,6 +141,7 @@ def replace_region(fn, region_start, region_end, callback,\n def main(print_only=False, check=False):\n     lints = []\n     deprecated_lints = []\n+    restriction_lints = []\n \n     # check directory\n     if not os.path.isfile('src/lib.rs'):\n@@ -138,22 +152,24 @@ def main(print_only=False, check=False):\n     for root, _, files in os.walk('src'):\n         for fn in files:\n             if fn.endswith('.rs'):\n-                collect(lints, deprecated_lints, os.path.join(root, fn))\n+                collect(lints, deprecated_lints, restriction_lints, \n+                        os.path.join(root, fn))\n \n     if print_only:\n-        sys.stdout.writelines(gen_table(lints))\n+        sys.stdout.writelines(gen_table(lints + restriction_lints))\n         return\n \n     # replace table in README.md\n     changed = replace_region(\n         'README.md', r'^name +\\|', '^$',\n-        lambda: gen_table(lints, link=wiki_link),\n+        lambda: gen_table(lints + restriction_lints, link=wiki_link),\n         write_back=not check)\n \n     changed |= replace_region(\n         'README.md',\n         r'^There are \\d+ lints included in this crate:', \"\",\n-        lambda: ['There are %d lints included in this crate:\\n' % len(lints)],\n+        lambda: ['There are %d lints included in this crate:\\n' % (len(lints)\n+            + len(restriction_lints))],\n         write_back=not check)\n \n     # update the links in the CHANGELOG\n@@ -162,13 +178,14 @@ def main(print_only=False, check=False):\n         \"<!-- begin autogenerated links to wiki -->\",\n         \"<!-- end autogenerated links to wiki -->\",\n         lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], wiki_link) for l in\n-                 sorted(lints + deprecated_lints, key=lambda l: l[1])],\n+                 sorted(lints + restriction_lints + deprecated_lints, \n+                        key=lambda l: l[1])],\n         replace_start=False, write_back=not check)\n \n     # update the `pub mod` list\n     changed |= replace_region(\n         'src/lib.rs', r'begin lints modules', r'end lints modules',\n-        lambda: gen_mods(lints),\n+        lambda: gen_mods(lints + restriction_lints),\n         replace_start=False, write_back=not check)\n \n     # same for \"clippy\" lint collection\n@@ -190,6 +207,12 @@ def main(print_only=False, check=False):\n         lambda: gen_group(lints, levels=('allow',)),\n         replace_start=False, write_back=not check)\n \n+    # same for \"clippy_restrictions\" lint collection\n+    changed |= replace_region(\n+        'src/lib.rs', r'reg.register_lint_group\\(\"clippy_restrictions\"', \n+        r'\\]\\);', lambda: gen_group(restriction_lints),\n+        replace_start=False, write_back=not check)\n+\n     if check and changed:\n         print('Please run util/update_lints.py to regenerate lints lists.')\n         return 1"}]}