{"sha": "d863978f89c74bd5cb90baa47331d421bbfd3936", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NjM5NzhmODljNzRiZDVjYjkwYmFhNDczMzFkNDIxYmJmZDM5MzY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:39:55Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Fix tests after rebase", "tree": {"sha": "eb7b739bd0e73fd7f4b1eda8ae71d1c970c257ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb7b739bd0e73fd7f4b1eda8ae71d1c970c257ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d863978f89c74bd5cb90baa47331d421bbfd3936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d863978f89c74bd5cb90baa47331d421bbfd3936", "html_url": "https://github.com/rust-lang/rust/commit/d863978f89c74bd5cb90baa47331d421bbfd3936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d863978f89c74bd5cb90baa47331d421bbfd3936/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edddb62099056abae853aa1157919d3ec112eeb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/edddb62099056abae853aa1157919d3ec112eeb4", "html_url": "https://github.com/rust-lang/rust/commit/edddb62099056abae853aa1157919d3ec112eeb4"}], "stats": {"total": 133, "additions": 82, "deletions": 51}, "files": [{"sha": "7b1beb1ecda80089bc6df13eceebb3ae39c99b5d", "filename": "src/libstd/future.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -16,9 +16,10 @@ pub use core::future::*;\n ///\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n+// This is `const` to avoid extra errors after we recover from `const async fn`\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-pub fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n+pub const fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n     GenFuture(x)\n }\n "}, {"sha": "57a9f175ca318ca2f30e7959a263513dee779b25", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -3,3 +3,4 @@\n \n pub const async fn x() {}\n //~^ ERROR functions cannot be both `const` and `async`\n+//~| ERROR `impl Trait` in const fn is unstable"}, {"sha": "07559cd240bb6f2fd742ad98b7ff04d9c5eb789a", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -7,5 +7,15 @@ LL | pub const async fn x() {}\n    |     |     `async` because of this\n    |     `const` because of this\n \n-error: aborting due to previous error\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/no-const-async.rs:4:24\n+   |\n+LL | pub const async fn x() {}\n+   |                        ^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "57198cb95e770113955d02388534867706d85f93", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation-impl-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.rs?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -0,0 +1,14 @@\n+#![feature(unboxed_closures)]\n+\n+// Tests that we can't assign to or mutably borrow upvars from `Fn`\n+// closures (issue #17780)\n+\n+fn main() {}\n+\n+fn bar() -> impl Fn() -> usize {\n+    let mut x = 0;\n+    move || {\n+        x += 1; //~ ERROR cannot assign\n+        x\n+    }\n+}"}, {"sha": "003c40d27736d5b3b43c7e689994fb2a381b4d24", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation-impl-trait.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation-impl-trait.stderr?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -0,0 +1,16 @@\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation-impl-trait.rs:11:9\n+   |\n+LL |   fn bar() -> impl Fn() -> usize {\n+   |      ---      ------------------ change this to return `FnMut` instead of `Fn`\n+LL |       let mut x = 0;\n+LL | /     move || {\n+LL | |         x += 1;\n+   | |         ^^^^^^ cannot assign\n+LL | |         x\n+LL | |     }\n+   | |_____- in this closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "e2f016614bf86a4917b1633536de422aec999693", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -3,10 +3,16 @@\n // Tests that we can't assign to or mutably borrow upvars from `Fn`\n // closures (issue #17780)\n \n-fn set(x: &mut usize) { *x = 5; }\n+fn set(x: &mut usize) {\n+    *x = 5;\n+}\n \n-fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n+fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+    f\n+}\n+fn to_fn_mut<A, F: FnMut<A>>(f: F) -> F {\n+    f\n+}\n \n fn main() {\n     // By-ref captures\n@@ -33,7 +39,11 @@ fn main() {\n         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n \n         let mut z = 0;\n-        let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+        let _h = to_fn_mut(move || {\n+            set(&mut z);\n+            to_fn(move || z = 42);\n+            //~^ ERROR cannot assign\n+        });\n     }\n }\n \n@@ -44,11 +54,3 @@ fn foo() -> Box<dyn Fn() -> usize> {\n         x\n     })\n }\n-\n-fn bar() -> impl Fn() -> usize {\n-    let mut x = 0;\n-    move || {\n-        x += 1; //~ ERROR cannot assign\n-        x\n-    }\n-}"}, {"sha": "a28cb7431e6a905abc07ab71dc3b8330279fff41", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d863978f89c74bd5cb90baa47331d421bbfd3936/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=d863978f89c74bd5cb90baa47331d421bbfd3936", "patch": "@@ -1,71 +1,71 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:21:27\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+   |                          - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _f = to_fn(|| x = 42);\n    |                  -----    ^^^^^^ cannot assign\n    |                  |\n    |                  expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:24:31\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+   |                          - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _g = to_fn(|| set(&mut y));\n    |                  -----        ^^^^^^ cannot borrow as mutable\n    |                  |\n    |                  expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:23:22\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:29:22\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+   |                          - change this to accept `FnMut` instead of `Fn`\n ...\n LL |             to_fn(|| z = 42);\n    |             -----    ^^^^^^ cannot assign\n    |             |\n    |             expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:32\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:36:32\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+   |                          - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _f = to_fn(move || x = 42);\n    |                  -----         ^^^^^^ cannot assign\n    |                  |\n    |                  expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:36\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:39:36\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+   |                          - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         let _g = to_fn(move || set(&mut y));\n    |                  -----             ^^^^^^ cannot borrow as mutable\n    |                  |\n    |                  expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:36:65\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:44:27\n    |\n-LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n-   |                        - change this to accept `FnMut` instead of `Fn`\n+LL | fn to_fn<A, F: Fn<A>>(f: F) -> F {\n+   |                          - change this to accept `FnMut` instead of `Fn`\n ...\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                   -----         ^^^^^^ cannot assign\n-   |                                                   |\n-   |                                                   expects `Fn` instead of `FnMut`\n+LL |             to_fn(move || z = 42);\n+   |             -----         ^^^^^^ cannot assign\n+   |             |\n+   |             expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:43:9\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:53:9\n    |\n LL |   fn foo() -> Box<dyn Fn() -> usize> {\n    |      ---      ---------------------- change this to return `FnMut` instead of `Fn`\n@@ -78,20 +78,7 @@ LL | |         x\n LL | |     })\n    | |_____- in this closure\n \n-error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:51:9\n-   |\n-LL |   fn bar() -> impl Fn() -> usize {\n-   |      ---      ------------------ change this to return `FnMut` instead of `Fn`\n-LL |       let mut x = 0;\n-LL | /     move || {\n-LL | |         x += 1;\n-   | |         ^^^^^^ cannot assign\n-LL | |         x\n-LL | |     }\n-   | |_____- in this closure\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}]}