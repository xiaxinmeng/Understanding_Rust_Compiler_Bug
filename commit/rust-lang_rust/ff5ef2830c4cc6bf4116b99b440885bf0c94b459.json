{"sha": "ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWVmMjgzMGM0Y2M2YmY0MTE2Yjk5YjQ0MDg4NWJmMGM5NGI0NTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-10T08:44:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-10T08:44:53Z"}, "message": "Merge #7591 #7622\n\n7591: Fix/no floating promises r=matklad a=sahandevs\n\ncloses #3515\r\n\r\n- added `@typescript-eslint/no-floating-promises: error` rule\r\n- changed `\"no-console\": [\"error\"]` to `\"no-console\": [\"error\", { allow: [\"warn\", \"error\"] }]` (we at least log the error messages of the floating promises)\r\n- fixed lint/compile errors\n\n7622: Resolve TupleStructPat in SourceAnalyzer::resolve_path r=Veykril a=Veykril\n\nCloses #7594\r\nbors r+\n\nCo-authored-by: Sahandevs <sahandevs@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "788553b2462ecd378d52387b8c916dd183b9ffe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/788553b2462ecd378d52387b8c916dd183b9ffe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgI50FCRBK7hj4Ov3rIwAAdHIIAEZAue7G2ryXjQrMWVSmriwn\nMDH5tAsYIgbbP9wm6N1EiMpVlOWKhVCZhbcOI7BO8FI8JKufz7lCmaD+rGhkCqO9\n3D1o4Vk96ARVl46/XZE1hJr7NDxkpHNkDkkVIQDuzwvdd+2aezvQRUKlZnqT42YA\n3kPJp2QrRS2XJiL0P+zKPlbyBJquGJ3YVjDqKSnsw2iLm963XBEOcJBi38EEq8n1\nlIy38sd1Kx/Rc1Lo2MdmQg6LrO2rr3f84QSvthr5fx0fq/BrgSSdh0mbsnb7TFP9\nIM/JUPdyQFNoEXL7jeD/Sin5BoQULRTrrZiDfICM/sguf4ZI3KQ4qFeOfY0IhkY=\n=Qqiw\n-----END PGP SIGNATURE-----\n", "payload": "tree 788553b2462ecd378d52387b8c916dd183b9ffe5\nparent c3e0b3e7b7708ff1f3c42c317171dbab47a825fc\nparent 91dd61b9a662caf628a376d1e3b52b56b7ee8d31\nparent a195711df068a58069236c2f8d99211f6f231987\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612946693 +0000\ncommitter GitHub <noreply@github.com> 1612946693 +0000\n\nMerge #7591 #7622\n\n7591: Fix/no floating promises r=matklad a=sahandevs\n\ncloses #3515\r\n\r\n- added `@typescript-eslint/no-floating-promises: error` rule\r\n- changed `\"no-console\": [\"error\"]` to `\"no-console\": [\"error\", { allow: [\"warn\", \"error\"] }]` (we at least log the error messages of the floating promises)\r\n- fixed lint/compile errors\n\n7622: Resolve TupleStructPat in SourceAnalyzer::resolve_path r=Veykril a=Veykril\n\nCloses #7594\r\nbors r+\n\nCo-authored-by: Sahandevs <sahandevs@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "html_url": "https://github.com/rust-lang/rust/commit/ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3e0b3e7b7708ff1f3c42c317171dbab47a825fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e0b3e7b7708ff1f3c42c317171dbab47a825fc", "html_url": "https://github.com/rust-lang/rust/commit/c3e0b3e7b7708ff1f3c42c317171dbab47a825fc"}, {"sha": "91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "html_url": "https://github.com/rust-lang/rust/commit/91dd61b9a662caf628a376d1e3b52b56b7ee8d31"}, {"sha": "a195711df068a58069236c2f8d99211f6f231987", "url": "https://api.github.com/repos/rust-lang/rust/commits/a195711df068a58069236c2f8d99211f6f231987", "html_url": "https://github.com/rust-lang/rust/commit/a195711df068a58069236c2f8d99211f6f231987"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "bed3fa50fdf73bf352a257283678ebffbf25f49b", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -222,8 +222,9 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         path: &ast::Path,\n     ) -> Option<PathResolution> {\n+        let parent = || path.syntax().parent();\n         let mut prefer_value_ns = false;\n-        if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n+        if let Some(path_expr) = parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.expr_id(db, &path_expr.into())?;\n             let infer = self.infer.as_ref()?;\n             if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n@@ -237,7 +238,7 @@ impl SourceAnalyzer {\n             prefer_value_ns = true;\n         }\n \n-        if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n+        if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n@@ -249,7 +250,7 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordExpr::cast) {\n+        if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n             let expr_id = self.expr_id(db, &rec_lit.into())?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n@@ -258,8 +259,12 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(rec_pat) = path.syntax().parent().and_then(ast::RecordPat::cast) {\n-            let pat_id = self.pat_id(&rec_pat.into())?;\n+        if let Some(pat) = parent()\n+            .and_then(ast::RecordPat::cast)\n+            .map(ast::Pat::from)\n+            .or_else(|| parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from))\n+        {\n+            let pat_id = self.pat_id(&pat)?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n             {\n@@ -272,7 +277,7 @@ impl SourceAnalyzer {\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we\n         // trying to resolve foo::bar.\n-        if let Some(outer_path) = path.syntax().parent().and_then(ast::Path::cast) {\n+        if let Some(outer_path) = parent().and_then(ast::Path::cast) {\n             if let Some(qualifier) = outer_path.qualifier() {\n                 if path == &qualifier {\n                     return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);"}, {"sha": "6999dacee3aae0b2dbf9c5c31f7c8c4d5dbaeb1b", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -1114,4 +1114,27 @@ trait Foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_self_variant_with_payload() {\n+        check(\n+            r#\"\n+enum Foo { Bar() }\n+\n+impl Foo {\n+    fn foo(self) {\n+        match self {\n+            Self::Bar$0() => (),\n+        }\n+    }\n+}\n+\n+\"#,\n+            expect![[r#\"\n+                Bar Variant FileId(0) 11..16 11..14 Other\n+\n+                FileId(0) 89..92 Other\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "b145330a022554004b8bdc1679438e597db857f4", "filename": "editors/code/.eslintrc.js", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.eslintrc.js?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -14,7 +14,7 @@ module.exports = {\n     \"rules\": {\n         \"camelcase\": [\"error\"],\n         \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n-        \"no-console\": [\"error\"],\n+        \"no-console\": [\"error\", { allow: [\"warn\", \"error\"] }],\n         \"prefer-const\": \"error\",\n         \"@typescript-eslint/member-delimiter-style\": [\n             \"error\",\n@@ -33,6 +33,7 @@ module.exports = {\n             \"error\",\n             \"always\"\n         ],\n-        \"@typescript-eslint/no-unnecessary-type-assertion\": \"error\"\n+        \"@typescript-eslint/no-unnecessary-type-assertion\": \"error\",\n+        \"@typescript-eslint/no-floating-promises\": \"error\"\n     }\n };"}, {"sha": "aec5c70c0768a9fe338f088d864e2add89312d9b", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -11,7 +11,7 @@ export interface Env {\n }\n \n function renderCommand(cmd: ra.CommandLink) {\n-    return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(JSON.stringify(cmd.arguments))} '${cmd.tooltip!}')`;\n+    return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(JSON.stringify(cmd.arguments))} '${cmd.tooltip}')`;\n }\n \n function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownString {\n@@ -138,7 +138,7 @@ export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc\n                                 command: \"rust-analyzer.applyActionGroup\",\n                                 title: \"\",\n                                 arguments: [items.map((item) => {\n-                                    return { label: item.title, arguments: item.command!!.arguments!![0] };\n+                                    return { label: item.title, arguments: item.command!.arguments![0] };\n                                 })],\n                             };\n "}, {"sha": "3729a71dea2e77b5f1b65b3cafeeb031f746409a", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -125,7 +125,7 @@ export function joinLines(ctx: Ctx): Cmd {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n             textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n-        editor.edit((builder) => {\n+        await editor.edit((builder) => {\n             client.protocol2CodeConverter.asTextEdits(items).forEach((edit: any) => {\n                 builder.replace(edit.range, edit.newText);\n             });\n@@ -236,7 +236,7 @@ export function ssr(ctx: Ctx): Cmd {\n         const request = await vscode.window.showInputBox(options);\n         if (!request) return;\n \n-        vscode.window.withProgress({\n+        await vscode.window.withProgress({\n             location: vscode.ProgressLocation.Notification,\n             title: \"Structured search replace in progress...\",\n             cancellable: false,\n@@ -457,10 +457,10 @@ export function reloadWorkspace(ctx: Ctx): Cmd {\n }\n \n export function showReferences(ctx: Ctx): Cmd {\n-    return (uri: string, position: lc.Position, locations: lc.Location[]) => {\n+    return async (uri: string, position: lc.Position, locations: lc.Location[]) => {\n         const client = ctx.client;\n         if (client) {\n-            vscode.commands.executeCommand(\n+            await vscode.commands.executeCommand(\n                 'editor.action.showReferences',\n                 vscode.Uri.parse(uri),\n                 client.protocol2CodeConverter.asPosition(position),\n@@ -474,7 +474,7 @@ export function applyActionGroup(_ctx: Ctx): Cmd {\n     return async (actions: { label: string; arguments: lc.CodeAction }[]) => {\n         const selectedAction = await vscode.window.showQuickPick(actions);\n         if (!selectedAction) return;\n-        vscode.commands.executeCommand(\n+        await vscode.commands.executeCommand(\n             'rust-analyzer.resolveCodeAction',\n             selectedAction.arguments,\n         );\n@@ -510,7 +510,7 @@ export function openDocs(ctx: Ctx): Cmd {\n         const doclink = await client.sendRequest(ra.openDocs, { position, textDocument });\n \n         if (doclink != null) {\n-            vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink));\n+            await vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink));\n         }\n     };\n "}, {"sha": "3889a2773045349bc44dd5d3b494f25736bc9c17", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -77,7 +77,7 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     if (!debugEngine) {\n-        vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n+        await vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n             + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n         return;\n     }\n@@ -86,12 +86,14 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     if (ctx.config.debug.openDebugPane) {\n         debugOutput.show(true);\n     }\n-\n-    const isMultiFolderWorkspace = vscode.workspace.workspaceFolders!.length > 1;\n-    const firstWorkspace = vscode.workspace.workspaceFolders![0]; // folder exists or RA is not active.\n+    // folder exists or RA is not active.\n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n+    const workspaceFolders = vscode.workspace.workspaceFolders!;\n+    const isMultiFolderWorkspace = workspaceFolders.length > 1;\n+    const firstWorkspace = workspaceFolders[0];\n     const workspace = !isMultiFolderWorkspace || !runnable.args.workspaceRoot ?\n         firstWorkspace :\n-        vscode.workspace.workspaceFolders!.find(w => runnable.args.workspaceRoot?.includes(w.uri.fsPath)) || firstWorkspace;\n+        workspaceFolders.find(w => runnable.args.workspaceRoot?.includes(w.uri.fsPath)) || firstWorkspace;\n \n     const wsFolder = path.normalize(workspace.uri.fsPath);\n     const workspaceQualifier = isMultiFolderWorkspace ? `:${workspace.name}` : '';"}, {"sha": "61db6b8d0cb762914a48275c5309e8ce4a2a8ae6", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -36,7 +36,7 @@ export function activateInlayHints(ctx: Ctx) {\n         maybeUpdater.onConfigChange, maybeUpdater, ctx.subscriptions\n     );\n \n-    maybeUpdater.onConfigChange();\n+    maybeUpdater.onConfigChange().catch(console.error);\n }\n \n const typeHints = createHintStyle(\"type\");"}, {"sha": "5c0b0be26373eb905cc1489512bae99cf1d72cde", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -76,7 +76,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     // This a horribly, horribly wrong way to deal with this problem.\n     ctx = await Ctx.create(config, context, serverPath, workspaceFolder.uri.fsPath);\n \n-    setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n+    await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n \n@@ -142,7 +142,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n }\n \n export async function deactivate() {\n-    setContextValue(RUST_PROJECT_CONTEXT_NAME, undefined);\n+    await setContextValue(RUST_PROJECT_CONTEXT_NAME, undefined);\n     await ctx?.client.stop();\n     ctx = undefined;\n }\n@@ -183,10 +183,10 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n \n     const release = await downloadWithRetryDialog(state, async () => {\n         return await fetchRelease(\"nightly\", state.githubToken);\n-    }).catch((e) => {\n+    }).catch(async (e) => {\n         log.error(e);\n         if (state.releaseId === undefined) { // Show error only for the initial download\n-            vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n+            await vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n         }\n         return undefined;\n     });\n@@ -298,7 +298,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     };\n     const platform = platforms[`${process.arch} ${process.platform}`];\n     if (platform === undefined) {\n-        vscode.window.showErrorMessage(\n+        await vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n             \"run `cargo xtask install --server` to build the language server from sources. \" +\n@@ -433,6 +433,7 @@ function warnAboutExtensionConflicts() {\n         vscode.window.showWarningMessage(\n             `You have both the ${fst[0]} (${fst[1]}) and ${sec[0]} (${sec[1]}) ` +\n             \"plugins enabled. These are known to conflict and cause various functions of \" +\n-            \"both plugins to not work correctly. You should disable one of them.\", \"Got it\");\n+            \"both plugins to not work correctly. You should disable one of them.\", \"Got it\")\n+            .then(() => { }, console.error);\n     };\n }"}, {"sha": "7ac7ca3cbd4b05ca272554f4b020ab5fa2724501", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -45,7 +45,7 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n     if (items.length === 0) {\n         // it is the debug case, run always has at least 'cargo check ...'\n         // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_runnables\n-        vscode.window.showErrorMessage(\"There's no debug target!\");\n+        await vscode.window.showErrorMessage(\"There's no debug target!\");\n         return;\n     }\n \n@@ -65,8 +65,8 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n         disposables.push(\n             quickPick.onDidHide(() => close()),\n             quickPick.onDidAccept(() => close(quickPick.selectedItems[0])),\n-            quickPick.onDidTriggerButton((_button) => {\n-                (async () => await makeDebugConfig(ctx, quickPick.activeItems[0].runnable))();\n+            quickPick.onDidTriggerButton(async (_button) => {\n+                await makeDebugConfig(ctx, quickPick.activeItems[0].runnable);\n                 close();\n             }),\n             quickPick.onDidChangeActive((active) => {\n@@ -145,6 +145,7 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n         overrideCargo: runnable.args.overrideCargo,\n     };\n \n+    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n     const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()\n     const cargoTask = await tasks.buildCargoTask(target, definition, runnable.label, args, config.cargoRunner, true);\n     cargoTask.presentationOptions.clear = true;"}, {"sha": "dc53ebe2eeb662c3497f0501ef07b62c49783494", "filename": "editors/code/src/snippets.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ff5ef2830c4cc6bf4116b99b440885bf0c94b459/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "patch": "@@ -62,7 +62,9 @@ function parseSnippet(snip: string): [string, [number, number]] | undefined {\n     const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n     if (!m) return undefined;\n     const placeholder = m[2] ?? \"\";\n-    const range: [number, number] = [m.index!!, placeholder.length];\n+    if (m.index == null)\n+        return undefined;\n+    const range: [number, number] = [m.index, placeholder.length];\n     const insert = snip.replace(m[0], placeholder);\n     return [insert, range];\n }"}]}