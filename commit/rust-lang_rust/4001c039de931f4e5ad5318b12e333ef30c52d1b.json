{"sha": "4001c039de931f4e5ad5318b12e333ef30c52d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMDFjMDM5ZGU5MzFmNGU1YWQ1MzE4YjEyZTMzM2VmMzBjNTJkMWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-06T18:36:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:37:25Z"}, "message": "Add unions to HIR", "tree": {"sha": "d3067d31157fcdf3b275407361c44343e8b58484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3067d31157fcdf3b275407361c44343e8b58484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4001c039de931f4e5ad5318b12e333ef30c52d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4001c039de931f4e5ad5318b12e333ef30c52d1b", "html_url": "https://github.com/rust-lang/rust/commit/4001c039de931f4e5ad5318b12e333ef30c52d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4001c039de931f4e5ad5318b12e333ef30c52d1b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db878fd38eb00daf794d87ab04cb50c7fa6e4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db878fd38eb00daf794d87ab04cb50c7fa6e4fc", "html_url": "https://github.com/rust-lang/rust/commit/1db878fd38eb00daf794d87ab04cb50c7fa6e4fc"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "57b5599bd1d7ffd59065f0d20c3077cbc0437f2b", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -761,6 +761,10 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             let struct_def = folder.fold_variant_data(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n+        ItemUnion(struct_def, generics) => {\n+            let struct_def = folder.fold_variant_data(struct_def);\n+            ItemUnion(struct_def, folder.fold_generics(generics))\n+        }\n         ItemDefaultImpl(unsafety, ref trait_ref) => {\n             ItemDefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }"}, {"sha": "62157b1ca36819db1c5c3d6c3ebc8d6aac2a42c7", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -348,7 +348,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item, impl_items);\n         }\n-        ItemStruct(ref struct_definition, ref generics) => {\n+        ItemStruct(ref struct_definition, ref generics) |\n+        ItemUnion(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_id(item.id);\n             visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);"}, {"sha": "389d0a1d50d56049e5ccad6c762dc37ec384ed2f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -302,9 +302,9 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n         let def_data = match i.node {\n             hir::ItemDefaultImpl(..) | hir::ItemImpl(..) =>\n                 DefPathData::Impl,\n-            hir::ItemEnum(..) | hir::ItemStruct(..) | hir::ItemTrait(..) |\n-            hir::ItemExternCrate(..) | hir::ItemMod(..) | hir::ItemForeignMod(..) |\n-            hir::ItemTy(..) =>\n+            hir::ItemEnum(..) | hir::ItemStruct(..) | hir::ItemUnion(..) |\n+            hir::ItemTrait(..) | hir::ItemExternCrate(..) | hir::ItemMod(..) |\n+            hir::ItemForeignMod(..) | hir::ItemTy(..) =>\n                 DefPathData::TypeNs(i.name.as_str()),\n             hir::ItemStatic(..) | hir::ItemConst(..) | hir::ItemFn(..) =>\n                 DefPathData::ValueNs(i.name.as_str()),"}, {"sha": "3ffc95e64f5a755c7bcf52c5da39f74811f24777", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -1030,6 +1030,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemTy(..) => \"ty\",\n                 ItemEnum(..) => \"enum\",\n                 ItemStruct(..) => \"struct\",\n+                ItemUnion(..) => \"union\",\n                 ItemTrait(..) => \"trait\",\n                 ItemImpl(..) => \"impl\",\n                 ItemDefaultImpl(..) => \"default impl\","}, {"sha": "e16005558f82bacd946815d58dd94ee895f4bc3d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -1483,6 +1483,8 @@ pub enum Item_ {\n     ItemEnum(EnumDef, Generics),\n     /// A struct definition, e.g. `struct Foo<A> {x: A}`\n     ItemStruct(VariantData, Generics),\n+    /// A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n+    ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety, Generics, TyParamBounds, HirVec<TraitItem>),\n \n@@ -1512,6 +1514,7 @@ impl Item_ {\n             ItemTy(..) => \"type alias\",\n             ItemEnum(..) => \"enum\",\n             ItemStruct(..) => \"struct\",\n+            ItemUnion(..) => \"union\",\n             ItemTrait(..) => \"trait\",\n             ItemImpl(..) |\n             ItemDefaultImpl(..) => \"item\","}, {"sha": "f236bd4884d5bf70ad8d3d731f117faf9e653970", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -752,7 +752,10 @@ impl<'a> State<'a> {\n                 self.head(&visibility_qualified(&item.vis, \"struct\"))?;\n                 self.print_struct(struct_def, generics, item.name, item.span, true)?;\n             }\n-\n+            hir::ItemUnion(ref struct_def, ref generics) => {\n+                self.head(&visibility_qualified(&item.vis, \"union\"))?;\n+                self.print_struct(struct_def, generics, item.name, item.span, true)?;\n+            }\n             hir::ItemDefaultImpl(unsafety, ref trait_ref) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;"}, {"sha": "0625504af88ea9a8c58b482b14598561fc1b5983", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n-                    hir::ItemDefaultImpl(..) => {}\n+                    hir::ItemUnion(..) | hir::ItemDefaultImpl(..) => {}\n                 }\n             }\n             ast_map::NodeTraitItem(trait_method) => {"}, {"sha": "4d1eed612cfd5420cc321577d3b775ae7d6705da", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -156,6 +156,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n                 hir::ItemTy(_, ref generics) |\n                 hir::ItemEnum(_, ref generics) |\n                 hir::ItemStruct(_, ref generics) |\n+                hir::ItemUnion(_, ref generics) |\n                 hir::ItemTrait(_, ref generics, _, _) |\n                 hir::ItemImpl(_, _, ref generics, _, _, _) => {\n                     // These kinds of items have only early bound lifetime parameters."}, {"sha": "e82742004c39f7d7a6ed38018db86313c4f2d1f2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -1179,6 +1179,9 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n             hir::ItemStruct(ref struct_def, _) => {\n                 self.encode_addl_struct_info(def_id, struct_def.id(), item);\n             }\n+            hir::ItemUnion(..) => {\n+                unimplemented_unions!();\n+            }\n             hir::ItemImpl(_, _, _, _, _, ref ast_items) => {\n                 self.encode_addl_impl_info(def_id, item.id, ast_items);\n             }"}, {"sha": "4b13d13fb70587f1cc686e7a4599cce803fe853d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -234,7 +234,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n             // Visit everything except for private fields\n-            hir::ItemStruct(ref struct_def, ref generics) => {\n+            hir::ItemStruct(ref struct_def, ref generics) |\n+            hir::ItemUnion(ref struct_def, ref generics) => {\n                 if item_level.is_some() {\n                     self.reach().visit_generics(generics);\n                     for field in struct_def.fields() {\n@@ -1067,8 +1068,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n                     check.visit_foreign_item(foreign_item);\n                 }\n             }\n-            // Subitems of structs have their own publicity\n-            hir::ItemStruct(ref struct_def, ref generics) => {\n+            // Subitems of structs and unions have their own publicity\n+            hir::ItemStruct(ref struct_def, ref generics) |\n+            hir::ItemUnion(ref struct_def, ref generics) => {\n                 check.required_visibility = item_visibility;\n                 check.visit_generics(generics);\n "}, {"sha": "bea6f30faec306978fb45e578441613a62ab03d0", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -1121,8 +1121,9 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                 }\n             }\n \n-            hir::ItemEnum(_, ref generics)        |\n-            hir::ItemStruct(_, ref generics)      => {\n+            hir::ItemEnum(_, ref generics) |\n+            hir::ItemStruct(_, ref generics) |\n+            hir::ItemUnion(_, ref generics) => {\n                 if !generics.is_parameterized() {\n                     let ty = {\n                         let tables = self.scx.tcx().tables.borrow();"}, {"sha": "f2f3163dde7c7378f736465de0325c93840edabe", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -1637,7 +1637,8 @@ fn predicates_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         hir::ItemFn(_, _, _, _, ref generics, _) |\n         hir::ItemTy(_, ref generics) |\n         hir::ItemEnum(_, ref generics) |\n-        hir::ItemStruct(_, ref generics) => generics,\n+        hir::ItemStruct(_, ref generics) |\n+        hir::ItemUnion(_, ref generics) => generics,\n         _ => &no_generics\n     };\n "}, {"sha": "888709d257246567ecb8d8c8c3ccd0a3f30af8b4", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n         debug!(\"visit_item item={}\", tcx.map.node_to_string(item.id));\n \n         match item.node {\n-            hir::ItemEnum(..) | hir::ItemStruct(..) => {\n+            hir::ItemEnum(..) | hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                 let scheme = tcx.lookup_item_type(did);\n \n                 // Not entirely obvious: constraints on structs/enums do not"}, {"sha": "1238f7cbcb335cba4540b9100adc588a80c4c02b", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -234,7 +234,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n \n         match item.node {\n             hir::ItemEnum(_, ref generics) |\n-            hir::ItemStruct(_, ref generics) => {\n+            hir::ItemStruct(_, ref generics) |\n+            hir::ItemUnion(_, ref generics) => {\n                 self.add_inferreds_for_item(item.id, false, generics);\n             }\n             hir::ItemTrait(_, ref generics, _, _) => {"}, {"sha": "e70fbf4463a22a4f681e6c93e62077bfd23920ce", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4001c039de931f4e5ad5318b12e333ef30c52d1b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4001c039de931f4e5ad5318b12e333ef30c52d1b", "patch": "@@ -365,6 +365,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n             hir::ItemStruct(ref sd, ref gen) =>\n                 om.structs.push(self.visit_variant_data(item, name, sd, gen)),\n+            hir::ItemUnion(..) =>\n+                unimplemented_unions!(),\n             hir::ItemFn(ref fd, ref unsafety, constness, ref abi, ref gen, _) =>\n                 om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n                                           constness, abi, gen)),"}]}