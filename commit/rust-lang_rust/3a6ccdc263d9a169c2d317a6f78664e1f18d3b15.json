{"sha": "3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNmNjZGMyNjNkOWExNjljMmQzMTdhNmY3ODY2NGUxZjE4ZDNiMTU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-07T01:55:34Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-25T11:19:37Z"}, "message": "Remove Ascii, AsciiCast, OwnedAsciiCast, AsciiStr, IntoBytes, IntoString.\n\nAs a replacement, add is_ascii() to AsciiExt, and implement AsciiExt for u8 and char.\n\n[breaking-change]", "tree": {"sha": "b8a6d0b4ee3fdf62acf30ef38106306d3421ff61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a6d0b4ee3fdf62acf30ef38106306d3421ff61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "html_url": "https://github.com/rust-lang/rust/commit/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e5811ef9271644db0d0ddaae351976b0d4abdd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5811ef9271644db0d0ddaae351976b0d4abdd2", "html_url": "https://github.com/rust-lang/rust/commit/1e5811ef9271644db0d0ddaae351976b0d4abdd2"}], "stats": {"total": 632, "additions": 89, "deletions": 543}, "files": [{"sha": "4e029fc9b54c627aed21c4e6bc9f824378564dd4", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 71, "deletions": 522, "changes": 593, "blob_url": "https://github.com/rust-lang/rust/blob/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "patch": "@@ -16,393 +16,13 @@\n #![allow(deprecated)]\n \n use core::kinds::Sized;\n-use fmt;\n use iter::IteratorExt;\n-use mem;\n use ops::FnMut;\n-use option::Option;\n-use option::Option::{Some, None};\n-use slice::{SliceExt, AsSlice};\n-use str::{Str, StrExt};\n-use string::{String, IntoString};\n+use slice::SliceExt;\n+use str::StrExt;\n+use string::String;\n use vec::Vec;\n \n-/// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq, Hash)]\n-pub struct Ascii { chr: u8 }\n-\n-impl Ascii {\n-    /// Converts an ascii character into a `u8`.\n-    #[inline]\n-    #[unstable = \"recently renamed\"]\n-    pub fn as_byte(&self) -> u8 {\n-        self.chr\n-    }\n-\n-    /// Deprecated: use `as_byte` instead.\n-    #[deprecated = \"use as_byte\"]\n-    pub fn to_byte(self) -> u8 {\n-        self.as_byte()\n-    }\n-\n-    /// Converts an ascii character into a `char`.\n-    #[inline]\n-    #[unstable = \"recently renamed\"]\n-    pub fn as_char(&self) -> char {\n-        self.chr as char\n-    }\n-\n-    /// Deprecated: use `as_char` instead.\n-    #[deprecated = \"use as_char\"]\n-    pub fn to_char(self) -> char {\n-        self.as_char()\n-    }\n-\n-    /// Convert to lowercase.\n-    #[inline]\n-    #[stable]\n-    pub fn to_lowercase(&self) -> Ascii {\n-        Ascii{chr: ASCII_LOWER_MAP[self.chr as uint]}\n-    }\n-\n-    /// Convert to uppercase.\n-    #[inline]\n-    #[stable]\n-    pub fn to_uppercase(&self) -> Ascii {\n-        Ascii{chr: ASCII_UPPER_MAP[self.chr as uint]}\n-    }\n-\n-    /// Compares two ascii characters of equality, ignoring case.\n-    #[inline]\n-    #[deprecated = \"normalize with to_lowercase\"]\n-    pub fn eq_ignore_case(self, other: Ascii) -> bool {\n-        ASCII_LOWER_MAP[self.chr as uint] == ASCII_LOWER_MAP[other.chr as uint]\n-    }\n-\n-    // the following methods are like ctype, and the implementation is inspired by musl\n-\n-    /// Check if the character is a letter (a-z, A-Z)\n-    #[inline]\n-    #[stable]\n-    pub fn is_alphabetic(&self) -> bool {\n-        (self.chr >= 0x41 && self.chr <= 0x5A) || (self.chr >= 0x61 && self.chr <= 0x7A)\n-    }\n-\n-    /// Check if the character is a number (0-9)\n-    #[inline]\n-    #[unstable = \"may be renamed\"]\n-    pub fn is_digit(&self) -> bool {\n-        self.chr >= 0x30 && self.chr <= 0x39\n-    }\n-\n-    /// Check if the character is a letter or number\n-    #[inline]\n-    #[stable]\n-    pub fn is_alphanumeric(&self) -> bool {\n-        self.is_alphabetic() || self.is_digit()\n-    }\n-\n-    /// Check if the character is a space or horizontal tab\n-    #[inline]\n-    #[experimental = \"likely to be removed\"]\n-    pub fn is_blank(&self) -> bool {\n-        self.chr == b' ' || self.chr == b'\\t'\n-    }\n-\n-    /// Check if the character is a control character\n-    #[inline]\n-    #[stable]\n-    pub fn is_control(&self) -> bool {\n-        self.chr < 0x20 || self.chr == 0x7F\n-    }\n-\n-    /// Checks if the character is printable (except space)\n-    #[inline]\n-    #[experimental = \"unsure about naming, or whether this is needed\"]\n-    pub fn is_graph(&self) -> bool {\n-        (self.chr - 0x21) < 0x5E\n-    }\n-\n-    /// Checks if the character is printable (including space)\n-    #[inline]\n-    #[unstable = \"unsure about naming\"]\n-    pub fn is_print(&self) -> bool {\n-        (self.chr - 0x20) < 0x5F\n-    }\n-\n-    /// Checks if the character is alphabetic and lowercase\n-    #[inline]\n-    #[stable]\n-    pub fn is_lowercase(&self) -> bool {\n-        (self.chr - b'a') < 26\n-    }\n-\n-    /// Checks if the character is alphabetic and uppercase\n-    #[inline]\n-    #[stable]\n-    pub fn is_uppercase(&self) -> bool {\n-        (self.chr - b'A') < 26\n-    }\n-\n-    /// Checks if the character is punctuation\n-    #[inline]\n-    #[stable]\n-    pub fn is_punctuation(&self) -> bool {\n-        self.is_graph() && !self.is_alphanumeric()\n-    }\n-\n-    /// Checks if the character is a valid hex digit\n-    #[inline]\n-    #[stable]\n-    pub fn is_hex(&self) -> bool {\n-        self.is_digit() || ((self.chr | 32u8) - b'a') < 6\n-    }\n-}\n-\n-impl<'a> fmt::Show for Ascii {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (self.chr as char).fmt(f)\n-    }\n-}\n-\n-/// Trait for converting into an ascii type.\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-pub trait AsciiCast<T> for Sized? {\n-    /// Convert to an ascii type, panic on non-ASCII input.\n-    #[inline]\n-    fn to_ascii(&self) -> T {\n-        assert!(self.is_ascii());\n-        unsafe {self.to_ascii_nocheck()}\n-    }\n-\n-    /// Convert to an ascii type, return None on non-ASCII input.\n-    #[inline]\n-    fn to_ascii_opt(&self) -> Option<T> {\n-        if self.is_ascii() {\n-            Some(unsafe { self.to_ascii_nocheck() })\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Convert to an ascii type, not doing any range asserts\n-    unsafe fn to_ascii_nocheck(&self) -> T;\n-\n-    /// Check if convertible to ascii\n-    fn is_ascii(&self) -> bool;\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl<'a> AsciiCast<&'a[Ascii]> for [u8] {\n-    #[inline]\n-    unsafe fn to_ascii_nocheck(&self) -> &'a[Ascii] {\n-        mem::transmute(self)\n-    }\n-\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        for b in self.iter() {\n-            if !b.is_ascii() { return false; }\n-        }\n-        true\n-    }\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl<'a> AsciiCast<&'a [Ascii]> for str {\n-    #[inline]\n-    unsafe fn to_ascii_nocheck(&self) -> &'a [Ascii] {\n-        mem::transmute(self)\n-    }\n-\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        self.bytes().all(|b| b.is_ascii())\n-    }\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl AsciiCast<Ascii> for u8 {\n-    #[inline]\n-    unsafe fn to_ascii_nocheck(&self) -> Ascii {\n-        Ascii{ chr: *self }\n-    }\n-\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        *self & 128 == 0u8\n-    }\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl AsciiCast<Ascii> for char {\n-    #[inline]\n-    unsafe fn to_ascii_nocheck(&self) -> Ascii {\n-        Ascii{ chr: *self as u8 }\n-    }\n-\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        *self as u32 - ('\\x7F' as u32 & *self as u32) == 0\n-    }\n-}\n-\n-/// Trait for copyless casting to an ascii vector.\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-pub trait OwnedAsciiCast {\n-    /// Check if convertible to ascii\n-    fn is_ascii(&self) -> bool;\n-\n-    /// Take ownership and cast to an ascii vector.\n-    /// # Panics\n-    ///\n-    /// Panic on non-ASCII input.\n-    #[inline]\n-    fn into_ascii(self) -> Vec<Ascii> {\n-        assert!(self.is_ascii());\n-        unsafe {self.into_ascii_nocheck()}\n-    }\n-\n-    /// Take ownership and cast to an ascii vector. Return None on non-ASCII input.\n-    #[inline]\n-    fn into_ascii_opt(self) -> Option<Vec<Ascii>> {\n-        if self.is_ascii() {\n-            Some(unsafe { self.into_ascii_nocheck() })\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Take ownership and cast to an ascii vector.\n-    /// Does not perform validation checks.\n-    unsafe fn into_ascii_nocheck(self) -> Vec<Ascii>;\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl OwnedAsciiCast for String {\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        self.as_slice().is_ascii()\n-    }\n-\n-    #[inline]\n-    unsafe fn into_ascii_nocheck(self) -> Vec<Ascii> {\n-        self.into_bytes().into_ascii_nocheck()\n-    }\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl OwnedAsciiCast for Vec<u8> {\n-    #[inline]\n-    fn is_ascii(&self) -> bool {\n-        self.as_slice().is_ascii()\n-    }\n-\n-    #[inline]\n-    unsafe fn into_ascii_nocheck(self) -> Vec<Ascii> {\n-        let v = Vec::from_raw_parts(self.as_ptr() as *mut Ascii,\n-                                    self.len(),\n-                                    self.capacity());\n-\n-        // We forget `self` to avoid freeing it at the end of the scope\n-        // Otherwise, the returned `Vec` would point to freed memory\n-        mem::forget(self);\n-        v\n-    }\n-}\n-\n-/// Trait for converting an ascii type to a string. Needed to convert\n-/// `&[Ascii]` to `&str`.\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-pub trait AsciiStr for Sized? {\n-    /// Convert to a string.\n-    fn as_str_ascii<'a>(&'a self) -> &'a str;\n-\n-    /// Deprecated: use `to_lowercase`\n-    #[deprecated=\"renamed `to_lowercase`\"]\n-    fn to_lower(&self) -> Vec<Ascii>;\n-\n-    /// Convert to vector representing a lower cased ascii string.\n-    #[deprecated = \"use iterators instead\"]\n-    fn to_lowercase(&self) -> Vec<Ascii>;\n-\n-    /// Deprecated: use `to_uppercase`\n-    #[deprecated=\"renamed `to_uppercase`\"]\n-    fn to_upper(&self) -> Vec<Ascii>;\n-\n-    /// Convert to vector representing a upper cased ascii string.\n-    #[deprecated = \"use iterators instead\"]\n-    fn to_uppercase(&self) -> Vec<Ascii>;\n-\n-    /// Compares two Ascii strings ignoring case.\n-    #[deprecated = \"use iterators instead\"]\n-    fn eq_ignore_case(&self, other: &[Ascii]) -> bool;\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl AsciiStr for [Ascii] {\n-    #[inline]\n-    fn as_str_ascii<'a>(&'a self) -> &'a str {\n-        unsafe { mem::transmute(self) }\n-    }\n-\n-    #[inline]\n-    fn to_lower(&self) -> Vec<Ascii> {\n-      self.to_lowercase()\n-    }\n-\n-    #[inline]\n-    fn to_lowercase(&self) -> Vec<Ascii> {\n-        self.iter().map(|a| a.to_lowercase()).collect()\n-    }\n-\n-    #[inline]\n-    fn to_upper(&self) -> Vec<Ascii> {\n-      self.to_uppercase()\n-    }\n-\n-    #[inline]\n-    fn to_uppercase(&self) -> Vec<Ascii> {\n-        self.iter().map(|a| a.to_uppercase()).collect()\n-    }\n-\n-    #[inline]\n-    fn eq_ignore_case(&self, other: &[Ascii]) -> bool {\n-        self.iter().zip(other.iter()).all(|(&a, &b)| a.eq_ignore_case(b))\n-    }\n-}\n-\n-impl IntoString for Vec<Ascii> {\n-    #[inline]\n-    fn into_string(self) -> String {\n-        unsafe { String::from_utf8_unchecked(self.into_bytes()) }\n-    }\n-}\n-\n-/// Trait to convert to an owned byte vector by consuming self\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-pub trait IntoBytes {\n-    /// Converts to an owned byte vector by consuming self\n-    fn into_bytes(self) -> Vec<u8>;\n-}\n-\n-#[experimental = \"may be replaced by generic conversion traits\"]\n-impl IntoBytes for Vec<Ascii> {\n-    fn into_bytes(self) -> Vec<u8> {\n-        unsafe {\n-            let v = Vec::from_raw_parts(self.as_ptr() as *mut u8,\n-                                        self.len(),\n-                                        self.capacity());\n-\n-            // We forget `self` to avoid freeing it at the end of the scope\n-            // Otherwise, the returned `Vec` would point to freed memory\n-            mem::forget(self);\n-            v\n-        }\n-    }\n-}\n-\n-\n /// Extension methods for ASCII-subset only operations on owned strings\n #[experimental = \"would prefer to do this in a more general way\"]\n pub trait OwnedAsciiExt {\n@@ -419,7 +39,10 @@ pub trait OwnedAsciiExt {\n \n /// Extension methods for ASCII-subset only operations on string slices\n #[experimental = \"would prefer to do this in a more general way\"]\n-pub trait AsciiExt<T> for Sized? {\n+pub trait AsciiExt<T = Self> for Sized? {\n+    /// Check if within the ASCII range.\n+    fn is_ascii(&self) -> bool;\n+\n     /// Makes a copy of the string in ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n@@ -438,6 +61,11 @@ pub trait AsciiExt<T> for Sized? {\n \n #[experimental = \"would prefer to do this in a more general way\"]\n impl AsciiExt<String> for str {\n+    #[inline]\n+    fn is_ascii(&self) -> bool {\n+        self.bytes().all(|b| b.is_ascii())\n+    }\n+\n     #[inline]\n     fn to_ascii_uppercase(&self) -> String {\n         // Vec<u8>::to_ascii_uppercase() preserves the UTF-8 invariant.\n@@ -473,6 +101,11 @@ impl OwnedAsciiExt for String {\n \n #[experimental = \"would prefer to do this in a more general way\"]\n impl AsciiExt<Vec<u8>> for [u8] {\n+    #[inline]\n+    fn is_ascii(&self) -> bool {\n+        self.iter().all(|b| b.is_ascii())\n+    }\n+\n     #[inline]\n     fn to_ascii_uppercase(&self) -> Vec<u8> {\n         self.iter().map(|&byte| ASCII_UPPER_MAP[byte as uint]).collect()\n@@ -513,6 +146,60 @@ impl OwnedAsciiExt for Vec<u8> {\n     }\n }\n \n+#[experimental = \"would prefer to do this in a more general way\"]\n+impl AsciiExt for u8 {\n+    #[inline]\n+    fn is_ascii(&self) -> bool {\n+        *self & 128 == 0u8\n+    }\n+\n+    #[inline]\n+    fn to_ascii_uppercase(&self) -> u8 {\n+        ASCII_UPPER_MAP[*self as uint]\n+    }\n+\n+    #[inline]\n+    fn to_ascii_lowercase(&self) -> u8 {\n+        ASCII_LOWER_MAP[*self as uint]\n+    }\n+\n+    #[inline]\n+    fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n+        ASCII_LOWER_MAP[*self as uint] == ASCII_LOWER_MAP[*other as uint]\n+    }\n+}\n+\n+#[experimental = \"would prefer to do this in a more general way\"]\n+impl AsciiExt for char {\n+    #[inline]\n+    fn is_ascii(&self) -> bool {\n+        *self as u32 <= 0x7F\n+    }\n+\n+    #[inline]\n+    fn to_ascii_uppercase(&self) -> char {\n+        if self.is_ascii() {\n+            ASCII_UPPER_MAP[*self as uint] as char\n+        } else {\n+            *self\n+        }\n+    }\n+\n+    #[inline]\n+    fn to_ascii_lowercase(&self) -> char {\n+        if self.is_ascii() {\n+            ASCII_UPPER_MAP[*self as uint] as char\n+        } else {\n+            *self\n+        }\n+    }\n+\n+    #[inline]\n+    fn eq_ignore_ascii_case(&self, other: &char) -> bool {\n+        self.to_ascii_lowercase() == other.to_ascii_lowercase()\n+    }\n+}\n+\n /// Returns a 'default' ASCII and C++11-like literal escape of a `u8`\n ///\n /// The default is chosen with a bias toward producing literals that are\n@@ -634,146 +321,20 @@ mod tests {\n     use super::*;\n     use char::from_u32;\n \n-    macro_rules! v2ascii {\n-        ( [$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);\n-        (&[$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);\n-    }\n-\n-    macro_rules! vec2ascii {\n-        ($($e:expr),*) => ([$(Ascii{chr:$e}),*].to_vec());\n-    }\n-\n     #[test]\n     fn test_ascii() {\n-        assert_eq!(65u8.to_ascii().to_byte(), 65u8);\n-        assert_eq!(65u8.to_ascii().to_char(), 'A');\n-        assert_eq!('A'.to_ascii().to_char(), 'A');\n-        assert_eq!('A'.to_ascii().to_byte(), 65u8);\n-\n-        assert_eq!('A'.to_ascii().to_lowercase().to_char(), 'a');\n-        assert_eq!('Z'.to_ascii().to_lowercase().to_char(), 'z');\n-        assert_eq!('a'.to_ascii().to_uppercase().to_char(), 'A');\n-        assert_eq!('z'.to_ascii().to_uppercase().to_char(), 'Z');\n-\n-        assert_eq!('@'.to_ascii().to_lowercase().to_char(), '@');\n-        assert_eq!('['.to_ascii().to_lowercase().to_char(), '[');\n-        assert_eq!('`'.to_ascii().to_uppercase().to_char(), '`');\n-        assert_eq!('{'.to_ascii().to_uppercase().to_char(), '{');\n-\n-        assert!('0'.to_ascii().is_digit());\n-        assert!('9'.to_ascii().is_digit());\n-        assert!(!'/'.to_ascii().is_digit());\n-        assert!(!':'.to_ascii().is_digit());\n-\n-        assert!((0x1fu8).to_ascii().is_control());\n-        assert!(!' '.to_ascii().is_control());\n-        assert!((0x7fu8).to_ascii().is_control());\n-\n         assert!(\"banana\".chars().all(|c| c.is_ascii()));\n         assert!(!\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".chars().all(|c| c.is_ascii()));\n     }\n \n     #[test]\n     fn test_ascii_vec() {\n-        let test = &[40u8, 32u8, 59u8];\n-        let b: &[_] = v2ascii!([40, 32, 59]);\n-        assert_eq!(test.to_ascii(), b);\n-        assert_eq!(\"( ;\".to_ascii(), b);\n-        let v = vec![40u8, 32u8, 59u8];\n-        assert_eq!(v.to_ascii(), b);\n-        assert_eq!(\"( ;\".to_string().to_ascii(), b);\n-\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\");\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\");\n-\n-        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\");\n-        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\");\n-        let mixed = \"abcDEFxyz:.;\".to_ascii();\n-        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\");\n-\n-        assert!(\"aBcDeF&?#\".to_ascii().eq_ignore_case(\"AbCdEf&?#\".to_ascii()));\n-\n         assert!(\"\".is_ascii());\n         assert!(\"a\".is_ascii());\n         assert!(!\"\\u{2009}\".is_ascii());\n \n     }\n \n-    #[test]\n-    fn test_ascii_vec_ng() {\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\");\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\");\n-        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\");\n-        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\");\n-        let mixed = \"abcDEFxyz:.;\".to_ascii();\n-        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\");\n-    }\n-\n-    #[test]\n-    fn test_owned_ascii_vec() {\n-        assert_eq!((\"( ;\".to_string()).into_ascii(), vec2ascii![40, 32, 59]);\n-        assert_eq!((vec![40u8, 32u8, 59u8]).into_ascii(), vec2ascii![40, 32, 59]);\n-    }\n-\n-    #[test]\n-    fn test_ascii_as_str() {\n-        let v = v2ascii!([40, 32, 59]);\n-        assert_eq!(v.as_str_ascii(), \"( ;\");\n-    }\n-\n-    #[test]\n-    fn test_ascii_into_string() {\n-        assert_eq!(vec2ascii![40, 32, 59].into_string(), \"( ;\");\n-        assert_eq!(vec2ascii!(40, 32, 59).into_string(), \"( ;\");\n-    }\n-\n-    #[test]\n-    fn test_ascii_to_bytes() {\n-        assert_eq!(vec2ascii![40, 32, 59].into_bytes(), vec![40u8, 32u8, 59u8]);\n-    }\n-\n-    #[test] #[should_fail]\n-    fn test_ascii_vec_panic_u8_slice()  { (&[127u8, 128u8, 255u8]).to_ascii(); }\n-\n-    #[test] #[should_fail]\n-    fn test_ascii_vec_panic_str_slice() { \"zo\u00e4\u534e\".to_ascii(); }\n-\n-    #[test] #[should_fail]\n-    fn test_ascii_panic_u8_slice() { 255u8.to_ascii(); }\n-\n-    #[test] #[should_fail]\n-    fn test_ascii_panic_char_slice() { '\u03bb'.to_ascii(); }\n-\n-    #[test]\n-    fn test_opt() {\n-        assert_eq!(65u8.to_ascii_opt(), Some(Ascii { chr: 65u8 }));\n-        assert_eq!(255u8.to_ascii_opt(), None);\n-\n-        assert_eq!('A'.to_ascii_opt(), Some(Ascii { chr: 65u8 }));\n-        assert_eq!('\u03bb'.to_ascii_opt(), None);\n-\n-        assert_eq!(\"zo\u00e4\u534e\".to_ascii_opt(), None);\n-\n-        let test1 = &[127u8, 128u8, 255u8];\n-        assert_eq!((test1).to_ascii_opt(), None);\n-\n-        let v = [40u8, 32u8, 59u8];\n-        let v2: &[_] = v2ascii!(&[40, 32, 59]);\n-        assert_eq!(v.to_ascii_opt(), Some(v2));\n-        let v = [127u8, 128u8, 255u8];\n-        assert_eq!(v.to_ascii_opt(), None);\n-\n-        let v = \"( ;\";\n-        assert_eq!(v.to_ascii_opt(), Some(v2));\n-        assert_eq!(\"zo\u00e4\u534e\".to_ascii_opt(), None);\n-\n-        assert_eq!((vec![40u8, 32u8, 59u8]).into_ascii_opt(), Some(vec2ascii![40, 32, 59]));\n-        assert_eq!((vec![127u8, 128u8, 255u8]).into_ascii_opt(), None);\n-\n-        assert_eq!((\"( ;\".to_string()).into_ascii_opt(), Some(vec2ascii![40, 32, 59]));\n-        assert_eq!((\"zo\u00e4\u534e\".to_string()).into_ascii_opt(), None);\n-    }\n-\n     #[test]\n     fn test_to_ascii_uppercase() {\n         assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_uppercase(), \"URL()URL()URL()\u00fcRL\");\n@@ -858,16 +419,4 @@ mod tests {\n             i += 1;\n         }\n     }\n-\n-    #[test]\n-    fn test_to_string() {\n-        let s = Ascii{ chr: b't' }.to_string();\n-        assert_eq!(s, \"t\");\n-    }\n-\n-    #[test]\n-    fn test_show() {\n-        let c = Ascii { chr: b't' };\n-        assert_eq!(format!(\"{}\", c), \"t\");\n-    }\n }"}, {"sha": "83eddbc5da8d7f6fc54574db6aafdf445b28c67e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "patch": "@@ -14,7 +14,7 @@\n \n use self::PathPrefix::*;\n \n-use ascii::AsciiCast;\n+use ascii::AsciiExt;\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n@@ -237,10 +237,10 @@ impl GenericPathUnsafe for Path {\n             let repr = me.repr[];\n             match me.prefix {\n                 Some(DiskPrefix) => {\n-                    repr.as_bytes()[0] == path.as_bytes()[0].to_ascii().to_uppercase().as_byte()\n+                    repr.as_bytes()[0] == path.as_bytes()[0].to_ascii_uppercase()\n                 }\n                 Some(VerbatimDiskPrefix) => {\n-                    repr.as_bytes()[4] == path.as_bytes()[0].to_ascii().to_uppercase().as_byte()\n+                    repr.as_bytes()[4] == path.as_bytes()[0].to_ascii_uppercase()\n                 }\n                 _ => false\n             }\n@@ -673,17 +673,17 @@ impl Path {\n         match (self.prefix, other.prefix) {\n             (Some(DiskPrefix), Some(VerbatimDiskPrefix)) => {\n                 self.is_absolute() &&\n-                    s_repr.as_bytes()[0].to_ascii().to_lowercase() ==\n-                        o_repr.as_bytes()[4].to_ascii().to_lowercase()\n+                    s_repr.as_bytes()[0].to_ascii_lowercase() ==\n+                        o_repr.as_bytes()[4].to_ascii_lowercase()\n             }\n             (Some(VerbatimDiskPrefix), Some(DiskPrefix)) => {\n                 other.is_absolute() &&\n-                    s_repr.as_bytes()[4].to_ascii().to_lowercase() ==\n-                        o_repr.as_bytes()[0].to_ascii().to_lowercase()\n+                    s_repr.as_bytes()[4].to_ascii_lowercase() ==\n+                        o_repr.as_bytes()[0].to_ascii_lowercase()\n             }\n             (Some(VerbatimDiskPrefix), Some(VerbatimDiskPrefix)) => {\n-                s_repr.as_bytes()[4].to_ascii().to_lowercase() ==\n-                    o_repr.as_bytes()[4].to_ascii().to_lowercase()\n+                s_repr.as_bytes()[4].to_ascii_lowercase() ==\n+                    o_repr.as_bytes()[4].to_ascii_lowercase()\n             }\n             (Some(UNCPrefix(_,_)), Some(VerbatimUNCPrefix(_,_))) => {\n                 s_repr[2..self.prefix_len()] == o_repr[8..other.prefix_len()]\n@@ -750,7 +750,7 @@ impl Path {\n                                 let mut s = String::from_str(s[0..len]);\n                                 unsafe {\n                                     let v = s.as_mut_vec();\n-                                    v[0] = (*v)[0].to_ascii().to_uppercase().as_byte();\n+                                    v[0] = (*v)[0].to_ascii_uppercase();\n                                 }\n                                 if is_abs {\n                                     // normalize C:/ to C:\\\n@@ -765,7 +765,7 @@ impl Path {\n                                 let mut s = String::from_str(s[0..len]);\n                                 unsafe {\n                                     let v = s.as_mut_vec();\n-                                    v[4] = (*v)[4].to_ascii().to_uppercase().as_byte();\n+                                    v[4] = (*v)[4].to_ascii_uppercase();\n                                 }\n                                 Some(s)\n                             }\n@@ -786,14 +786,12 @@ impl Path {\n                         let mut s = String::with_capacity(n);\n                         match prefix {\n                             Some(DiskPrefix) => {\n-                                s.push(prefix_.as_bytes()[0].to_ascii()\n-                                                   .to_uppercase().as_char());\n+                                s.push(prefix_.as_bytes()[0].to_ascii_uppercase() as char);\n                                 s.push(':');\n                             }\n                             Some(VerbatimDiskPrefix) => {\n                                 s.push_str(prefix_[0..4]);\n-                                s.push(prefix_.as_bytes()[4].to_ascii()\n-                                                   .to_uppercase().as_char());\n+                                s.push(prefix_.as_bytes()[4].to_ascii_uppercase() as char);\n                                 s.push_str(prefix_[5..]);\n                             }\n                             Some(UNCPrefix(a,b)) => {"}, {"sha": "d1540f98a2355651f7a2bc2738d49f6120989aa2", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "patch": "@@ -56,8 +56,6 @@\n \n // Reexported types and traits\n \n-#[doc(no_inline)] pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n-#[doc(no_inline)] pub use ascii::IntoBytes;\n #[doc(no_inline)] pub use borrow::IntoCow;\n #[doc(no_inline)] pub use c_str::ToCStr;\n #[doc(no_inline)] pub use char::{Char, UnicodeChar};"}, {"sha": "2844c0b523e5d63d54c11e7b16b2602ad5b5dc57", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "patch": "@@ -15,6 +15,7 @@ use codemap::Span;\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n+use std::ascii::AsciiExt;\n \n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,"}, {"sha": "28f7a78ddd08ac149a7bbb36a6f01045ee9868dd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "patch": "@@ -31,6 +31,8 @@ use visit::Visitor;\n use parse::token;\n \n use std::slice;\n+use std::ascii::AsciiExt;\n+\n \n // if you change this list without updating src/doc/reference.md, @cmr will be sad\n static KNOWN_FEATURES: &'static [(&'static str, Status)] = &["}, {"sha": "bac2452524e3eed4878a840e9518e1f36e0286a2", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6ccdc263d9a169c2d317a6f78664e1f18d3b15/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=3a6ccdc263d9a169c2d317a6f78664e1f18d3b15", "patch": "@@ -14,6 +14,7 @@ pub use self::Param::*;\n use self::States::*;\n use self::FormatState::*;\n use self::FormatOp::*;\n+use std::ascii::OwnedAsciiExt;\n use std::mem::replace;\n \n #[deriving(Copy, PartialEq)]\n@@ -530,10 +531,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                     }\n                 }\n                 FormatHEX => {\n-                    s = s.to_ascii()\n-                         .iter()\n-                         .map(|b| b.to_uppercase().as_byte())\n-                         .collect();\n+                    s = s.into_ascii_uppercase();\n                     if flags.alternate {\n                         let s_ = replace(&mut s, vec!(b'0', b'X'));\n                         s.extend(s_.into_iter());"}]}