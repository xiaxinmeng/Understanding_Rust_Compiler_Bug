{"sha": "3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmU5YWI1ZTdiYjcxZTNkZmM4N2JjNTU2ZjNiMGMzN2Q0ZmI4M2E=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-02T18:59:49Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-03T13:02:21Z"}, "message": "rustc: use lowering helpers\n\nThis commit changes the lowering to stop creating HIR statements,\nexpressions and patterns directly and instead uses the pre-existing\nhelper functions.", "tree": {"sha": "2149c1dca512cf6dc1497d2190251fd81dd5e0e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2149c1dca512cf6dc1497d2190251fd81dd5e0e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlz1Gl0ACgkQAXYLT59T\n8VRlrw//enZldGB7v5Li8ifSuagfHUXJC8K4DLkkvORUQqYm6lyxYdKhj4IccrtT\ndcPGMhocpVJcFXmmEUg+yT4ns0qkD8ntXvptHNSCKgmB1Z+mR4ipYerN5a1oHfy0\nzjAu+oq/sRXSurdv7e908r3KLOfX6X4jI7DjYNQ5TB09/Rrj43IQ/JyZnqrSFIm4\ns9vSIyswsNT+CaF8vwHl/MwEyu4bXsl2W5oLuYagZO6fbzkQPpC/iDxa1EJF607R\nuvG3HHwNwjL4XhUGBS6idHz42Fwz4HbN+nTNaxfFpmF5Chy5nqe+MHxMsqWeJNmN\n++RyQVq/dF6SInYrtuL9Y2dYtG8mL5RSsmj7YQf2x5EunE5sOIVqIeYfwNqo7P94\neQk4BMZrEvlvZEohDiUDJgBXqDMI/pG8lFBj6/vB1i3cdaAzHM0JHXI3Xp0Imefv\n8gwN4CWzcHmKfSgxOZleL+9tyxz4aoEPjVFQ2jyDUSBptE9rkplk0ZH+kaSyDpb7\nS+NXBXu4TDalhM4nTa+lZZFG8MwAOIwZmXPsNgN++8i/YLlUsXYG1FeSgmCA/KuN\nNovQQsvLsBfVxz/DkusP2wJ3WPF5eCWYKIDeu9qO8mnvyPHeDlycOgs3MlxfoNUF\nr4SPYi3N0kocaae4Cx/YFZDUedt9WjqJ50jOjtDfsNkgwVgKQLk=\n=zOGD\n-----END PGP SIGNATURE-----", "payload": "tree 2149c1dca512cf6dc1497d2190251fd81dd5e0e5\nparent 5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891\nauthor David Wood <david@davidtw.co> 1559501989 +0100\ncommitter David Wood <david@davidtw.co> 1559566941 +0100\n\nrustc: use lowering helpers\n\nThis commit changes the lowering to stop creating HIR statements,\nexpressions and patterns directly and instead uses the pre-existing\nhelper functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "html_url": "https://github.com/rust-lang/rust/commit/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891", "html_url": "https://github.com/rust-lang/rust/commit/5e3b41e0cb7f8acef84afe3e9d464e67e7b2c891"}], "stats": {"total": 83, "additions": 28, "deletions": 55}, "files": [{"sha": "e9a86f708eff2e4a98dac61b7f60de8a41ff5c48", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 28, "deletions": 55, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3ebe9ab5e7bb71e3dfc87bc556f3b0c37d4fb83a", "patch": "@@ -3039,12 +3039,15 @@ impl<'a> LoweringContext<'a> {\n             // Async function arguments are lowered into the closure body so that they are\n             // captured and so that the drop order matches the equivalent non-async functions.\n             //\n+            // from:\n+            //\n             //     async fn foo(<pattern>: <ty>, <pattern>: <ty>, <pattern>: <ty>) {\n             //       async move {\n             //       }\n             //     }\n             //\n-            //     // ...becomes...\n+            // into:\n+            //\n             //     fn foo(__arg0: <ty>, __arg1: <ty>, __arg2: <ty>) {\n             //       async move {\n             //         let __arg2 = __arg2;\n@@ -3076,61 +3079,29 @@ impl<'a> LoweringContext<'a> {\n                     },\n                 };\n \n+                let desugared_span =\n+                    this.mark_span_with_reason(CompilerDesugaringKind::Async, span, None);\n+\n                 // Construct an argument representing `__argN: <ty>` to replace the argument of the\n                 // async function.\n                 //\n                 // If this is the simple case, this argument will end up being the same as the\n                 // original argument, but with a different pattern id.\n-                let new_argument_id = this.next_id();\n-                let desugared_span =\n-                    this.mark_span_with_reason(CompilerDesugaringKind::Async, span, None);\n+                let (new_argument_pat, new_argument_id) = this.pat_ident(desugared_span, ident);\n                 let new_argument = hir::Arg {\n                     hir_id: argument.hir_id,\n-                    pat: P(hir::Pat {\n-                        hir_id: new_argument_id,\n-                        node: hir::PatKind::Binding(hir::BindingAnnotation::Unannotated,\n-                                                   new_argument_id, ident, None),\n-                        span: desugared_span,\n-                    }),\n-                    source: hir::ArgSource::AsyncFn,\n-                };\n-\n-                let construct_stmt = |this: &mut LoweringContext<'_>, pat: P<hir::Pat>,\n-                                      init_pat_id: hir::HirId| {\n-                    hir::Stmt {\n-                        hir_id: this.next_id(),\n-                        node: hir::StmtKind::Local(P(hir::Local {\n-                            pat,\n-                            // We explicitly do not specify the type for any statements. When the\n-                            // user's argument type is `impl Trait` then this would require the\n-                            // `impl_trait_in_bindings` feature to also be present for that same\n-                            // type to be valid in this binding. At the time of writing (13 Mar 19),\n-                            // `impl_trait_in_bindings` is not stable.\n-                            ty: None,\n-                            init: Some(P(hir::Expr {\n-                                span,\n-                                node: hir::ExprKind::Path(hir::QPath::Resolved(None, P(hir::Path {\n-                                    span,\n-                                    res: Res::Local(init_pat_id),\n-                                    segments: hir_vec![ hir::PathSegment::from_ident(ident) ],\n-                                }))),\n-                                attrs: ThinVec::new(),\n-                                hir_id: this.next_id(),\n-                            })),\n-                            hir_id: this.next_id(),\n-                            span: desugared_span,\n-                            attrs: ThinVec::new(),\n-                            source: hir::LocalSource::AsyncFn,\n-                        })),\n-                        span: desugared_span,\n-                    }\n+                    pat: new_argument_pat,\n+                    source: hir::ArgSource::AsyncFn\n                 };\n \n                 let new_statements = if is_simple_argument {\n                     // If this is the simple case, then we only insert one statement that is\n                     // `let <pat> = <pat>;`. We re-use the original argument's pattern so that\n                     // `HirId`s are densely assigned.\n-                    (construct_stmt(this, argument.pat, new_argument_id), None)\n+                    let expr = this.expr_ident(desugared_span, ident, new_argument_id);\n+                    let stmt = this.stmt_let_pat(\n+                        desugared_span, Some(P(expr)), argument.pat, hir::LocalSource::AsyncFn);\n+                    (stmt, None)\n                 } else {\n                     // If this is not the simple case, then we construct two statements:\n                     //\n@@ -3147,21 +3118,19 @@ impl<'a> LoweringContext<'a> {\n                     // Construct the `let mut __argN = __argN;` statement. It must be a mut binding\n                     // because the user may have specified a `ref mut` binding in the next\n                     // statement.\n-                    let hir_id = this.next_id();\n-                    let move_stmt = construct_stmt(\n-                        this,\n-                        P(hir::Pat {\n-                            hir_id,\n-                            node: hir::PatKind::Binding(hir::BindingAnnotation::Mutable,\n-                                                        hir_id, ident, None),\n-                            span: desugared_span,\n-                        }),\n-                        new_argument_id,\n-                    );\n+                    let (move_pat, move_id) = this.pat_ident_binding_mode(\n+                        desugared_span, ident, hir::BindingAnnotation::Mutable);\n+                    let move_expr = this.expr_ident(desugared_span, ident, new_argument_id);\n+                    let move_stmt = this.stmt_let_pat(\n+                        desugared_span, Some(P(move_expr)), move_pat, hir::LocalSource::AsyncFn);\n \n                     // Construct the `let <pat> = __argN;` statement. We re-use the original\n                     // argument's pattern so that `HirId`s are densely assigned.\n-                    let pattern_stmt = construct_stmt(this, argument.pat, hir_id);\n+                    let pattern_expr = this.expr_ident(desugared_span, ident, move_id);\n+                    let pattern_stmt = this.stmt_let_pat(\n+                        desugared_span, Some(P(pattern_expr)), argument.pat,\n+                        hir::LocalSource::AsyncFn);\n+\n                     (move_stmt, Some(pattern_stmt))\n                 };\n \n@@ -5251,6 +5220,10 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn arg(&mut self, hir_id: hir::HirId, pat: P<hir::Pat>, source: hir::ArgSource) -> hir::Arg {\n+        hir::Arg { hir_id, pat, source }\n+    }\n+\n     fn stmt(&mut self, span: Span, node: hir::StmtKind) -> hir::Stmt {\n         hir::Stmt { span, node, hir_id: self.next_id() }\n     }"}]}