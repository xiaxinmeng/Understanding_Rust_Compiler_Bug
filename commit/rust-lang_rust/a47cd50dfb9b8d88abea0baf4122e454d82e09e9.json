{"sha": "a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0N2NkNTBkZmI5YjhkODhhYmVhMGJhZjQxMjJlNDU0ZDgyZTA5ZTk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-03-25T00:12:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-03-25T18:20:30Z"}, "message": "Parse FP literals without coercing to int. This allows parsing 64-bit\nfloats. However, if someone writes a literal that can't be represented\nprecisely in 64 bits, the front-end will accept it while the back-end\nwill (presumably) complain.", "tree": {"sha": "0a6d53f38d5ef5fc32d4cb78ec125606cd2b328e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6d53f38d5ef5fc32d4cb78ec125606cd2b328e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "html_url": "https://github.com/rust-lang/rust/commit/a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d6475308481a43facb0e95e9535c5602bf54f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d6475308481a43facb0e95e9535c5602bf54f2", "html_url": "https://github.com/rust-lang/rust/commit/e2d6475308481a43facb0e95e9535c5602bf54f2"}], "stats": {"total": 110, "additions": 71, "deletions": 39}, "files": [{"sha": "fd8d8b52923b1f83ff50bdd52df7dc52d71209a2", "filename": "Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "patch": "@@ -572,7 +572,8 @@ docsnap: doc/rust.pdf\n \n FLOAT_XFAILS := $(S)src/test/run-pass/float.rs \\\n                 $(S)src/test/run-pass/float2.rs \\\n-                $(S)src/test/run-pass/float-signature.rs\n+                $(S)src/test/run-pass/float-signature.rs \\\n+                $(S)src/test/run-pass/floatlits.rs\n \n # Temporarily xfail tests broken by the nominal-tags change.\n \n@@ -641,8 +642,7 @@ TEST_XFAILS_BOOT := $(TASK_XFAILS) \\\n                       writing-through-read-alias.rs) \\\n                     $(S)src/test/bench/shootout/nbody.rs\n \n-TEST_XFAILS_STAGE0 := $(FLOAT_XFAILS) \\\n-                      $(addprefix $(S)src/test/run-pass/, \\\n+TEST_XFAILS_STAGE0 := $(addprefix $(S)src/test/run-pass/, \\\n                         acyclic-unwind.rs \\\n                         alt-pattern-drop.rs \\\n                         alt-type-simple.rs \\"}, {"sha": "6975d9c5d6c4fd2df7a7ee5cee24eda1c656fe03", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 59, "deletions": 36, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "patch": "@@ -318,47 +318,65 @@ impure fn consume_block_comment(reader rdr) {\n     be consume_any_whitespace(rdr);\n }\n \n-impure fn scan_dec_digits(reader rdr) -> int {\n-\n-    auto c = rdr.curr();\n+fn digits_to_string(str s) -> int {\n \n     let int accum_int = 0;\n+    let int i = 0;\n \n-    while (is_dec_digit(c) || c == '_') {\n-            if (c != '_') {\n-                accum_int *= 10;\n-                accum_int += dec_digit_val(c);\n-            }\n-            rdr.bump();\n-            c = rdr.curr();\n+    for (u8 c in s) {\n+        accum_int *= 10;\n+        accum_int += dec_digit_val(c as char);\n     }\n \n     ret accum_int;\n }\n \n-impure fn scan_exponent(reader rdr) -> option.t[int] {\n+impure fn scan_exponent(reader rdr) -> option.t[str] {\n     auto c = rdr.curr();\n-    auto sign = 1;\n+    auto res = \"\";\n \n     if (c == 'e' || c == 'E') {\n+        res += _str.from_bytes(vec(c as u8));\n         rdr.bump();\n         c = rdr.curr();\n-        if (c == '-') {\n-            sign = -1;\n-            rdr.bump();\n-        } else if (c == '+') {\n+        if (c == '-' || c == '+') {\n+            res += _str.from_bytes(vec(c as u8));\n             rdr.bump();\n         }\n         auto exponent = scan_dec_digits(rdr);\n-        ret(some(sign * exponent));\n+        if (_str.byte_len(exponent) > 0u) {\n+            ret(some(res + exponent));\n+        }\n+        else {\n+            log (\"scan_exponent: bad fp literal\");\n+            fail;\n+        }\n     }\n     else {\n-        ret none[int];\n+        ret none[str];\n     }\n }\n \n+impure fn scan_dec_digits(reader rdr) -> str {\n+    \n+    auto c = rdr.curr();\n+    let str res = \"\";\n+\n+    while (is_dec_digit (c) || c == '_') {\n+        if (c != '_') {\n+            res += _str.from_bytes(vec(c as u8));\n+        }\n+        rdr.bump();\n+        c = rdr.curr();\n+    }\n+\n+    ret res;\n+}\n+\n impure fn scan_number(mutable char c, reader rdr) -> token.token {\n     auto accum_int = 0;\n+    let str dec_str = \"\";\n+    let bool is_dec_integer = false;\n     auto n = rdr.next();\n \n     if (c == '0' && n == 'x') {\n@@ -386,7 +404,12 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n             c = rdr.curr();\n         }\n     } else {\n-        accum_int = scan_dec_digits(rdr);\n+        dec_str = scan_dec_digits(rdr);\n+        is_dec_integer = true;\n+    }\n+        \n+    if (is_dec_integer) {\n+        accum_int = digits_to_string(dec_str);\n     }\n \n     c = rdr.curr();\n@@ -443,20 +466,19 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n         }\n     }\n     c = rdr.curr();\n+\n     if (c == '.') {\n         // Parse a floating-point number.\n         rdr.bump();\n-        auto accum_int1 = scan_dec_digits(rdr);\n-        auto base_str =   _int.to_str(accum_int, 10u) + \".\"\n-            + _int.to_str(accum_int1, 10u);\n+        auto dec_part = scan_dec_digits(rdr);\n+        auto float_str = dec_str + \".\" + dec_part;\n         c = rdr.curr();\n-        auto exponent_str = \"\";\n-        let option.t[int] maybe_exponent = scan_exponent(rdr);\n-        alt(maybe_exponent) {\n-            case(some[int](?i)) {\n-                exponent_str = \"e\" + _int.to_str(i, 10u);\n+        auto exponent_str = scan_exponent(rdr);\n+        alt (exponent_str) {\n+            case (some[str](?s)) {\n+                float_str += s;\n             }\n-            case(none[int]) {\n+            case (none[str]) {\n             }\n         }\n \n@@ -468,27 +490,28 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n             if (c == '3' && n == '2') {\n                 rdr.bump(); rdr.bump();\n                 ret token.LIT_MACH_FLOAT(util.common.ty_f32,\n-                                         base_str + exponent_str);\n+                                         float_str);\n             }\n             else if (c == '6' && n == '4') {\n                 rdr.bump(); rdr.bump();\n                 ret token.LIT_MACH_FLOAT(util.common.ty_f64,\n-                                         base_str + exponent_str);\n+                                         float_str);\n+                /* FIXME: if this is out of range for either a 32-bit or\n+                   64-bit float, it won't be noticed till the back-end */\n             }\n         }\n         else {\n-            ret token.LIT_FLOAT(base_str + exponent_str);\n+            ret token.LIT_FLOAT(float_str);\n         }\n     }\n \n     auto maybe_exponent = scan_exponent(rdr);\n     alt(maybe_exponent) {\n-        case(some[int](?i)) {\n-            ret token.LIT_FLOAT(_int.to_str(accum_int, 10u)\n-                                + \"e\" + _int.to_str(i, 10u));\n+        case(some[str](?s)) {\n+            ret token.LIT_FLOAT(dec_str + s);\n         }\n-        case(none[int]) {\n-            ret token.LIT_INT(accum_int);\n+        case(none[str]) {\n+                ret token.LIT_INT(accum_int);\n         }\n     }\n }"}, {"sha": "cf10a402c48e1a72397f4986373f42967c4175b4", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "patch": "@@ -44,6 +44,7 @@ upcall_grow_task\n upcall_join\n upcall_kill\n upcall_log_double\n+upcall_log_float\n upcall_log_int\n upcall_log_str\n upcall_malloc"}, {"sha": "db82b486af05a0540c2352324b4d6149bd6338a2", "filename": "src/test/run-pass/floatlits.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47cd50dfb9b8d88abea0baf4122e454d82e09e9/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloatlits.rs?ref=a47cd50dfb9b8d88abea0baf4122e454d82e09e9", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+  auto f = 4.999999999999;\n+  check (f > 4.90);\n+  check (f < 5.0);\n+  auto g = 4.90000000001e-10;\n+  check(g > 5e-11);\n+  check(g < 5e-9);\n+}\n\\ No newline at end of file"}]}