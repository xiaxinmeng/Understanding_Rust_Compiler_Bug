{"sha": "3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "node_id": "C_kwDOAAsO6NoAKDNkYzc5M2U2MjVhMWI1NjZjYTM3YmEwYjEyMjgxZjljZmI0ZWI0NzM", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2023-06-15T21:45:53Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2023-06-16T23:51:01Z"}, "message": "fix ICE on specific malformed asm clobber_abi", "tree": {"sha": "525fed65435455edc1fcc4ad38e38fb319770796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/525fed65435455edc1fcc4ad38e38fb319770796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "html_url": "https://github.com/rust-lang/rust/commit/3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c74a5d27c644a0f7a22bb2fa8dd3ff8257bc220", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c74a5d27c644a0f7a22bb2fa8dd3ff8257bc220", "html_url": "https://github.com/rust-lang/rust/commit/8c74a5d27c644a0f7a22bb2fa8dd3ff8257bc220"}], "stats": {"total": 280, "additions": 184, "deletions": 96}, "files": [{"sha": "9734fc2b36d9435d5b1df48f440aa9a59c516cf0", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "patch": "@@ -379,16 +379,12 @@ fn parse_clobber_abi<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> PResult<'a,\n     }\n \n     let mut new_abis = Vec::new();\n-    loop {\n+    while !p.eat(&token::CloseDelim(Delimiter::Parenthesis)) {\n         match p.parse_str_lit() {\n             Ok(str_lit) => {\n                 new_abis.push((str_lit.symbol_unescaped, str_lit.span));\n             }\n             Err(opt_lit) => {\n-                // If the non-string literal is a closing paren then it's the end of the list and is fine\n-                if p.eat(&token::CloseDelim(Delimiter::Parenthesis)) {\n-                    break;\n-                }\n                 let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n                 let mut err =\n                     p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");"}, {"sha": "9e002b1550f3417dd2509802d561e2181b74872b", "filename": "tests/ui/asm/parse-error.rs", "status": "renamed", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fparse-error.rs?ref=3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "patch": "@@ -1,4 +1,4 @@\n-// only-x86_64\n+// needs-asm-support\n \n #![feature(asm_const)]\n \n@@ -38,6 +38,9 @@ fn main() {\n         //~^ ERROR expected one of\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR attempt to use a non-constant value in a constant\n+\n+        // test that asm!'s clobber_abi doesn't accept non-string literals\n+        // see also https://github.com/rust-lang/rust/issues/112635\n         asm!(\"\", clobber_abi());\n         //~^ ERROR at least one abi must be provided\n         asm!(\"\", clobber_abi(foo));\n@@ -46,6 +49,25 @@ fn main() {\n         //~^ ERROR expected one of `)` or `,`, found `foo`\n         asm!(\"\", clobber_abi(\"C\", foo));\n         //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(1));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(()));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(uwu));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi({}));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(loop {}));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(if));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(do));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(<));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(.));\n+        //~^ ERROR expected string literal\n+\n         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n         //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), clobber_abi(\"C\"));\n@@ -56,15 +78,7 @@ fn main() {\n         //~^^ ERROR argument never used\n         //~^^^ ERROR attempt to use a non-constant value in a constant\n         //~^^^^ ERROR attempt to use a non-constant value in a constant\n-        asm!(\"\", a = in(\"eax\") foo);\n-        //~^ ERROR explicit register arguments cannot have names\n-        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-        asm!(\"{1}\", in(\"eax\") foo, const bar);\n-        //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+\n         asm!(\"\", options(), \"\");\n         //~^ ERROR expected one of\n         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);", "previous_filename": "tests/ui/asm/x86_64/parse-error.rs"}, {"sha": "075d28e176ad89c4e79765624a32cee4b7418821", "filename": "tests/ui/asm/parse-error.stderr", "status": "renamed", "additions": 94, "deletions": 81, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fparse-error.stderr?ref=3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "patch": "@@ -83,239 +83,279 @@ LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 10 possible tokens\n \n error: at least one abi must be provided as an argument to `clobber_abi`\n-  --> $DIR/parse-error.rs:41:30\n+  --> $DIR/parse-error.rs:44:30\n    |\n LL |         asm!(\"\", clobber_abi());\n    |                              ^\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:43:30\n+  --> $DIR/parse-error.rs:46:30\n    |\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `foo`\n-  --> $DIR/parse-error.rs:45:34\n+  --> $DIR/parse-error.rs:48:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n    |                                  ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:47:35\n+  --> $DIR/parse-error.rs:50:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n    |                                   ^^^ not a string literal\n \n+error: expected string literal\n+  --> $DIR/parse-error.rs:52:30\n+   |\n+LL |         asm!(\"\", clobber_abi(1));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:54:30\n+   |\n+LL |         asm!(\"\", clobber_abi(()));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:56:30\n+   |\n+LL |         asm!(\"\", clobber_abi(uwu));\n+   |                              ^^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:58:30\n+   |\n+LL |         asm!(\"\", clobber_abi({}));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:60:30\n+   |\n+LL |         asm!(\"\", clobber_abi(loop {}));\n+   |                              ^^^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:62:30\n+   |\n+LL |         asm!(\"\", clobber_abi(if));\n+   |                              ^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:64:30\n+   |\n+LL |         asm!(\"\", clobber_abi(do));\n+   |                              ^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:66:30\n+   |\n+LL |         asm!(\"\", clobber_abi(<));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:68:30\n+   |\n+LL |         asm!(\"\", clobber_abi(.));\n+   |                              ^ not a string literal\n+\n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:54:36\n+  --> $DIR/parse-error.rs:76:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:54:36\n+  --> $DIR/parse-error.rs:76:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n-error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:59:18\n-   |\n-LL |         asm!(\"\", a = in(\"eax\") foo);\n-   |                  ^^^^^^^^^^^^^^^^^\n-\n-error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:65:36\n-   |\n-LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n-   |                     -------------  ^^^^^^^^^ positional argument\n-   |                     |\n-   |                     explicit register argument\n-\n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:68:29\n+  --> $DIR/parse-error.rs:82:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:70:33\n+  --> $DIR/parse-error.rs:84:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:72:14\n+  --> $DIR/parse-error.rs:86:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:74:21\n+  --> $DIR/parse-error.rs:88:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:76:28\n+  --> $DIR/parse-error.rs:90:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:78:31\n+  --> $DIR/parse-error.rs:92:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:80:35\n+  --> $DIR/parse-error.rs:94:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:87:1\n+  --> $DIR/parse-error.rs:101:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:89:13\n+  --> $DIR/parse-error.rs:103:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:91:18\n+  --> $DIR/parse-error.rs:105:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:93:19\n+  --> $DIR/parse-error.rs:107:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:95:24\n+  --> $DIR/parse-error.rs:109:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:97:30\n+  --> $DIR/parse-error.rs:111:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:99:25\n+  --> $DIR/parse-error.rs:113:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:101:25\n+  --> $DIR/parse-error.rs:115:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:103:25\n+  --> $DIR/parse-error.rs:117:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:106:29\n+  --> $DIR/parse-error.rs:120:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `FOO`\n-  --> $DIR/parse-error.rs:108:33\n+  --> $DIR/parse-error.rs:122:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:110:34\n+  --> $DIR/parse-error.rs:124:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                  ^^^ not a string literal\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:112:19\n+  --> $DIR/parse-error.rs:126:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:114:28\n+  --> $DIR/parse-error.rs:128:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                            ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:116:30\n+  --> $DIR/parse-error.rs:130:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                              ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:118:17\n+  --> $DIR/parse-error.rs:132:17\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                 ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:120:35\n+  --> $DIR/parse-error.rs:134:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:120:35\n+  --> $DIR/parse-error.rs:134:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:123:28\n+  --> $DIR/parse-error.rs:137:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:125:30\n+  --> $DIR/parse-error.rs:139:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:127:13\n+  --> $DIR/parse-error.rs:141:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:129:20\n+  --> $DIR/parse-error.rs:143:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -332,7 +372,7 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:49:44\n+  --> $DIR/parse-error.rs:71:44\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -341,7 +381,7 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:52:55\n+  --> $DIR/parse-error.rs:74:55\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -350,7 +390,7 @@ LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n    |                                                       ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:54:31\n+  --> $DIR/parse-error.rs:76:31\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -359,41 +399,14 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:54:46\n+  --> $DIR/parse-error.rs:76:46\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:61:46\n-   |\n-LL |     let mut bar = 0;\n-   |     ----------- help: consider using `const` instead of `let`: `const bar`\n-...\n-LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-   |                                              ^^^ non-constant value\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:63:46\n-   |\n-LL |     let mut bar = 0;\n-   |     ----------- help: consider using `const` instead of `let`: `const bar`\n-...\n-LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-   |                                              ^^^ non-constant value\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:65:42\n-   |\n-LL |     let mut bar = 0;\n-   |     ----------- help: consider using `const` instead of `let`: `const bar`\n-...\n-LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n-   |                                          ^^^ non-constant value\n-\n-error: aborting due to 59 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0435`.", "previous_filename": "tests/ui/asm/x86_64/parse-error.stderr"}, {"sha": "715a67687d1247c3031bd59d387d27cb73e2ef9e", "filename": "tests/ui/asm/x86_64/x86_64_parse_error.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.rs?ref=3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "patch": "@@ -0,0 +1,21 @@\n+// only-x86_64\n+\n+#![feature(asm_const)]\n+\n+use std::arch::asm;\n+\n+fn main() {\n+    let mut foo = 0;\n+    let mut bar = 0;\n+    unsafe {\n+        asm!(\"\", a = in(\"eax\") foo);\n+        //~^ ERROR explicit register arguments cannot have names\n+        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{1}\", in(\"eax\") foo, const bar);\n+        //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+    }\n+}"}, {"sha": "f2854ae51285163be1b011dba1b8bd2b0e0e4f03", "filename": "tests/ui/asm/x86_64/x86_64_parse_error.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dc793e625a1b566ca37ba0b12281f9cfb4eb473/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.stderr?ref=3dc793e625a1b566ca37ba0b12281f9cfb4eb473", "patch": "@@ -0,0 +1,44 @@\n+error: explicit register arguments cannot have names\n+  --> $DIR/x86_64_parse_error.rs:11:18\n+   |\n+LL |         asm!(\"\", a = in(\"eax\") foo);\n+   |                  ^^^^^^^^^^^^^^^^^\n+\n+error: positional arguments cannot follow named arguments or explicit register arguments\n+  --> $DIR/x86_64_parse_error.rs:17:36\n+   |\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                     -------------  ^^^^^^^^^ positional argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/x86_64_parse_error.rs:13:46\n+   |\n+LL |     let mut bar = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/x86_64_parse_error.rs:15:46\n+   |\n+LL |     let mut bar = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/x86_64_parse_error.rs:17:42\n+   |\n+LL |     let mut bar = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                                          ^^^ non-constant value\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}]}