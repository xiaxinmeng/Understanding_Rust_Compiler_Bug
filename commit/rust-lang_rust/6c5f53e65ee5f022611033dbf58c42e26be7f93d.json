{"sha": "6c5f53e65ee5f022611033dbf58c42e26be7f93d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNWY1M2U2NWVlNWYwMjI2MTEwMzNkYmY1OGM0MmUyNmJlN2Y5M2Q=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-26T22:19:18Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-26T22:43:44Z"}, "message": "Stabilize const-calling existing const-fns in std\n\nFixes #46038", "tree": {"sha": "9da24c4b5df8b773ff53d9fa207fdeb3aebdea42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da24c4b5df8b773ff53d9fa207fdeb3aebdea42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5f53e65ee5f022611033dbf58c42e26be7f93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5f53e65ee5f022611033dbf58c42e26be7f93d", "html_url": "https://github.com/rust-lang/rust/commit/6c5f53e65ee5f022611033dbf58c42e26be7f93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5f53e65ee5f022611033dbf58c42e26be7f93d/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "827cb0d61e22eb6d5c9c5e8e8d05b07108a9968b", "url": "https://api.github.com/repos/rust-lang/rust/commits/827cb0d61e22eb6d5c9c5e8e8d05b07108a9968b", "html_url": "https://github.com/rust-lang/rust/commit/827cb0d61e22eb6d5c9c5e8e8d05b07108a9968b"}], "stats": {"total": 172, "additions": 8, "deletions": 164}, "files": [{"sha": "d4cd3f6264efc9020318e4ef1b102ef6b62b82e5", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -329,7 +329,6 @@ impl<T> Cell<T> {\n     /// let c = Cell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cell_new\")]\n     #[inline]\n     pub const fn new(value: T) -> Cell<T> {\n         Cell {\n@@ -544,7 +543,6 @@ impl<T> RefCell<T> {\n     /// let c = RefCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_refcell_new\")]\n     #[inline]\n     pub const fn new(value: T) -> RefCell<T> {\n         RefCell {\n@@ -1215,7 +1213,6 @@ impl<T> UnsafeCell<T> {\n     /// let uc = UnsafeCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_unsafe_cell_new\")]\n     #[inline]\n     pub const fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value: value }"}, {"sha": "07b45ad6a50f6db62646e014bd2acebd893f1b63", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -85,47 +85,13 @@\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n-#![feature(rustc_const_unstable)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![feature(const_min_value)]\n-#![feature(const_max_value)]\n-#![feature(const_atomic_bool_new)]\n-#![feature(const_atomic_isize_new)]\n-#![feature(const_atomic_usize_new)]\n-#![feature(const_atomic_i8_new)]\n-#![feature(const_atomic_u8_new)]\n-#![feature(const_atomic_i16_new)]\n-#![feature(const_atomic_u16_new)]\n-#![feature(const_atomic_i32_new)]\n-#![feature(const_atomic_u32_new)]\n-#![feature(const_atomic_i64_new)]\n-#![feature(const_atomic_u64_new)]\n-#![feature(const_unsafe_cell_new)]\n-#![feature(const_cell_new)]\n-#![feature(const_nonzero_new)]\n #![cfg_attr(not(stage0), feature(doc_spotlight))]\n \n-#![cfg_attr(not(stage0), feature(const_min_value))]\n-#![cfg_attr(not(stage0), feature(const_max_value))]\n-#![cfg_attr(not(stage0), feature(const_atomic_bool_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_isize_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_usize_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_i8_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_u8_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_i16_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_u16_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_i32_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_u32_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_i64_new))]\n-#![cfg_attr(not(stage0), feature(const_atomic_u64_new))]\n-#![cfg_attr(not(stage0), feature(const_unsafe_cell_new))]\n-#![cfg_attr(not(stage0), feature(const_cell_new))]\n-#![cfg_attr(not(stage0), feature(const_nonzero_new))]\n-\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;"}, {"sha": "5b1a9399c39bfda3932cb975a1817706f85a342d", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -311,7 +311,6 @@ pub fn forget<T>(t: T) {\n /// [alignment]: ./fn.align_of.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_size_of\")]\n pub const fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n@@ -403,7 +402,6 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_align_of\")]\n pub const fn align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }"}, {"sha": "a943adb7540ac7d6a9e77f9a9bfccd9b188da406", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -71,7 +71,6 @@ impl<T: Zeroable> NonZero<T> {\n     #[unstable(feature = \"nonzero\",\n                reason = \"needs an RFC to flesh out the design\",\n                issue = \"27730\")]\n-    #[rustc_const_unstable(feature = \"const_nonzero_new\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(inner: T) -> Self {\n         NonZero(inner)"}, {"sha": "bfa00f895c0b18e54b3de629f03652d16a9f5e7b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -110,7 +110,6 @@ macro_rules! int_impl {\n         /// assert_eq!(i8::min_value(), -128);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_min_value\")]\n         #[inline]\n         pub const fn min_value() -> Self {\n             !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n@@ -124,7 +123,6 @@ macro_rules! int_impl {\n         /// assert_eq!(i8::max_value(), 127);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_max_value\")]\n         #[inline]\n         pub const fn max_value() -> Self {\n             !Self::min_value()\n@@ -1283,7 +1281,6 @@ macro_rules! uint_impl {\n         /// assert_eq!(u8::min_value(), 0);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_min_value\")]\n         #[inline]\n         pub const fn min_value() -> Self { 0 }\n \n@@ -1295,7 +1292,6 @@ macro_rules! uint_impl {\n         /// assert_eq!(u8::max_value(), 255);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_max_value\")]\n         #[inline]\n         pub const fn max_value() -> Self { !0 }\n "}, {"sha": "0c2fcd082ef8e6623265c9b7118045cfaaade493", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -74,7 +74,6 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_null\")]\n pub const fn null<T>() -> *const T { 0 as *const T }\n \n /// Creates a null mutable raw pointer.\n@@ -89,7 +88,6 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_null_mut\")]\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n /// Swaps the values at two mutable locations of the same type, without\n@@ -2339,7 +2337,6 @@ impl<T: ?Sized> Unique<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[unstable(feature = \"unique\", issue = \"27730\")]\n-    #[rustc_const_unstable(feature = \"const_unique_new\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         Unique { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }\n@@ -2474,7 +2471,6 @@ impl<T: ?Sized> Shared<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[unstable(feature = \"shared\", issue = \"27730\")]\n-    #[rustc_const_unstable(feature = \"const_shared_new\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         Shared { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }"}, {"sha": "2cabadebfb7f573faf4ba75a8248df9a0b64a159", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -243,7 +243,6 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_atomic_bool_new\")]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -657,7 +656,6 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_atomic_ptr_new\")]\n     pub const fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n@@ -936,7 +934,7 @@ impl<T> From<*mut T> for AtomicPtr<T> {\n \n #[cfg(target_has_atomic = \"ptr\")]\n macro_rules! atomic_int {\n-    ($stable:meta, $const_unstable:meta,\n+    ($stable:meta,\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n      $stable_access:meta,\n@@ -1005,7 +1003,6 @@ macro_rules! atomic_int {\n             /// ```\n             #[inline]\n             #[$stable]\n-            #[$const_unstable]\n             pub const fn new(v: $int_type) -> Self {\n                 $atomic_type {v: UnsafeCell::new(v)}\n             }\n@@ -1369,7 +1366,6 @@ macro_rules! atomic_int {\n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_i8_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1379,7 +1375,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_u8_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1389,7 +1384,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_i16_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1399,7 +1393,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_u16_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1409,7 +1402,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_i32_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1419,7 +1411,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_u32_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1429,7 +1420,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_i64_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1439,7 +1429,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    rustc_const_unstable(feature = \"const_atomic_u64_new\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1449,7 +1438,6 @@ atomic_int! {\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n-    rustc_const_unstable(feature = \"const_atomic_isize_new\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n@@ -1459,7 +1447,6 @@ atomic_int!{\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n-    rustc_const_unstable(feature = \"const_atomic_usize_new\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),"}, {"sha": "0e445cdac358a1bbe0018816a787f753d0039a56", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -42,10 +42,6 @@\n #![feature(try_trait)]\n #![feature(unique)]\n \n-#![feature(const_atomic_bool_new)]\n-#![feature(const_atomic_usize_new)]\n-#![feature(const_atomic_isize_new)]\n-\n extern crate core;\n extern crate test;\n "}, {"sha": "a8c80aaa0309ed75c5d4714d7ec40a519e4a3de7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -64,7 +64,6 @@\n #![feature(underscore_lifetimes)]\n #![feature(trace_macros)]\n #![feature(test)]\n-#![feature(const_atomic_bool_new)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "7dea3dae0bcd1a3dbd7da417b59fc943eabbbb58", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -45,8 +45,6 @@\n #![deny(warnings)]\n #![forbid(unsafe_code)]\n \n-#![feature(const_max_value)]\n-#![feature(const_min_value)]\n #![feature(i128_type)]\n #![feature(slice_patterns)]\n #![feature(try_from)]"}, {"sha": "5e569e21de7b7bb21090ec53ec6c60b68498872a", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -25,8 +25,6 @@\n #![feature(box_syntax)]\n #![feature(i128_type)]\n \n-#![feature(const_min_value)]\n-\n extern crate arena;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;"}, {"sha": "095b8bb50dc6c20fdd891b61e9c45c613802a207", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -22,9 +22,6 @@\n #![feature(i128)]\n #![feature(i128_type)]\n \n-#![feature(const_min_value)]\n-#![feature(const_max_value)]\n-\n extern crate rustc_apfloat;\n \n extern crate syntax;"}, {"sha": "619c0dc847ebcb0ed71a2ec4beb32cf55bed542e", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -770,8 +770,6 @@ static B: &'static AtomicUsize = &A; // ok!\n You can also have this error while using a cell type:\n \n ```compile_fail,E0492\n-#![feature(const_cell_new)]\n-\n use std::cell::Cell;\n \n const A: Cell<usize> = Cell::new(1);\n@@ -798,8 +796,6 @@ However, if you still wish to use these types, you can achieve this by an unsafe\n wrapper:\n \n ```\n-#![feature(const_cell_new)]\n-\n use std::cell::Cell;\n use std::marker::Sync;\n "}, {"sha": "3d1bd81fe21a31f1aa1fc37e4059e51ad4c87ec4", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -33,9 +33,6 @@\n #![feature(slice_patterns)]\n #![feature(conservative_impl_trait)]\n \n-#![feature(const_atomic_bool_new)]\n-#![feature(const_once_new)]\n-\n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;\n "}, {"sha": "bf177ac7f2c239c6091db5e2cc1db5e09f5ed524", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -256,15 +256,6 @@\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]\n-#![feature(const_max_value)]\n-#![feature(const_atomic_bool_new)]\n-#![feature(const_atomic_isize_new)]\n-#![feature(const_atomic_usize_new)]\n-#![feature(const_unsafe_cell_new)]\n-#![feature(const_cell_new)]\n-#![feature(const_once_new)]\n-#![feature(const_ptr_null)]\n-#![feature(const_ptr_null_mut)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n@@ -306,7 +297,6 @@\n #![feature(repr_align)]\n #![feature(repr_simd)]\n #![feature(rustc_attrs)]\n-#![feature(rustc_const_unstable)]\n #![feature(shared)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n@@ -331,7 +321,6 @@\n #![feature(doc_masked)]\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n-#![cfg_attr(windows, feature(const_atomic_ptr_new))]\n #![cfg_attr(windows, feature(used))]\n \n #![default_lib_allocator]"}, {"sha": "6fd8b6a5bbae43c2f9b3db50638f8f662b494832", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -156,7 +156,6 @@ struct Finish {\n impl Once {\n     /// Creates a new `Once` value.\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n-    #[rustc_const_unstable(feature = \"const_once_new\")]\n     pub const fn new() -> Once {\n         Once {\n             state: AtomicUsize::new(INCOMPLETE),"}, {"sha": "bc88ff9244c99bc39ca393f622654537b02d137d", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -17,7 +17,6 @@\n //  for the error message we see here.)\n \n #![feature(rustc_private)]\n-#![feature(const_atomic_usize_new)]\n \n extern crate arena;\n "}, {"sha": "823cb89b365ca6d580f5aa21a04d4411522f0aec", "filename": "src/test/compile-fail/const-fn-feature-flags.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/827cb0d61e22eb6d5c9c5e8e8d05b07108a9968b/src%2Ftest%2Fcompile-fail%2Fconst-fn-feature-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827cb0d61e22eb6d5c9c5e8e8d05b07108a9968b/src%2Ftest%2Fcompile-fail%2Fconst-fn-feature-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-feature-flags.rs?ref=827cb0d61e22eb6d5c9c5e8e8d05b07108a9968b", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test use of const fns in std using individual feature gates.\n-\n-use std::cell::Cell;\n-\n-const CELL: Cell<i32> = Cell::new(42); //~ERROR not yet stable as a const fn\n-    //~^HELP #![feature(const_cell_new)]\n-\n-fn main() {\n-    let v = CELL.get();\n-    CELL.set(v+1);\n-\n-    assert_eq!(CELL.get(), v);\n-}\n-"}, {"sha": "b6b7fa1a233d7a9d22a8a762a3ac6777f0fdf989", "filename": "src/test/compile-fail/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -13,8 +13,6 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "07123c6949255a84c972cec9937a643c9baa6585", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_unsafe_cell_new)]\n-\n use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);"}, {"sha": "0fd31454596e645ece7c87be14ea4a34f29f3518", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn, const_cell_new, const_unsafe_cell_new)]\n+#![feature(const_fn)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use"}, {"sha": "3979790e3d4c7498cb09516281144873f4968106", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax, const_refcell_new)]\n+#![feature(box_syntax)]\n \n use std::cell::RefCell;\n "}, {"sha": "8fc910d8a6daa46a63be49e2039a6348c8cdc2e4", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -15,7 +15,6 @@\n #![allow(dead_code, unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(const_unsafe_cell_new)]\n #![feature(static_mutex)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign"}, {"sha": "adc72aa0ea23b5fed2f1ed33535e5269165ca50d", "filename": "src/test/run-pass-fulldeps/vector-sort-panic-safe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass-fulldeps%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass-fulldeps%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fvector-sort-panic-safe.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(rustc_private)]\n #![feature(sort_unstable)]\n-#![feature(const_atomic_usize_new)]\n \n extern crate rand;\n "}, {"sha": "4466a95cb39b950655b6fa6a131e61763375874a", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![allow(dead_code)]\n-#![feature(const_atomic_usize_new)]\n \n // check dtor calling order when casting enums.\n "}, {"sha": "5ceb1013ad811dae95339b9f71300b0bac42e718", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -12,8 +12,6 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::marker::{PhantomData};\n use std::sync::atomic::{AtomicUsize};\n use std::sync::atomic::Ordering::SeqCst;"}, {"sha": "2bc8b4b7ba032546c78df44c5c2b6a9493373c3d", "filename": "src/test/run-pass/auxiliary/issue-17718-aux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-17718-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-17718-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-17718-aux.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::sync::atomic;\n \n pub const C1: usize = 1;"}, {"sha": "e9457886be80d890a5e8287823777ab2508e1ed9", "filename": "src/test/run-pass/auxiliary/thread-local-extern-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fthread-local-extern-static.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(cfg_target_thread_local, const_fn, thread_local)]\n-#![feature(const_cell_new)]\n #![crate_type = \"lib\"]\n \n #[cfg(target_thread_local)]"}, {"sha": "db055e6886a83675471159a0eea0527244f66d10", "filename": "src/test/run-pass/box-of-array-of-drop-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -13,8 +13,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};\n "}, {"sha": "9dde53bb31dc57a1fc08e24f2099240d8592fbdd", "filename": "src/test/run-pass/box-of-array-of-drop-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -13,8 +13,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};\n "}, {"sha": "a7736a2eb3431c321afa50e0359e2e2320dcecbc", "filename": "src/test/run-pass/const-fn-feature-flags.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fconst-fn-feature-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fconst-fn-feature-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-feature-flags.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test use of const fns in std using individual feature gates.\n-\n-#![feature(const_cell_new)]\n+// Test use of stabilized const fns in std formerly using individual feature gates.\n \n use std::cell::Cell;\n "}, {"sha": "06fbe9bf4f63958372c055f193e81dd09fe87a97", "filename": "src/test/run-pass/const-size_of-align_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn, const_size_of, const_align_of)]\n+#![feature(const_fn)]\n \n use std::mem;\n "}, {"sha": "5f7629fa267776e2838246a238536ac14aed8c5a", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -10,9 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-#![feature(const_unsafe_cell_new)]\n-\n use std::marker;\n use std::cell::UnsafeCell;\n "}, {"sha": "502e4a816640a152a519e99b400bb06cf3418a32", "filename": "src/test/run-pass/issue-17718.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -10,10 +10,6 @@\n \n // aux-build:issue-17718-aux.rs\n \n-\n-#![feature(core)]\n-#![feature(const_atomic_usize_new)]\n-\n extern crate issue_17718_aux as other;\n \n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "a61f294465d9893f574a82f2cab355512f3365c7", "filename": "src/test/run-pass/issue-21486.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21486.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -12,8 +12,6 @@\n // created via FRU and control-flow breaks in the middle of\n // construction.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::sync::atomic::{Ordering, AtomicUsize};\n \n #[derive(Debug)]"}, {"sha": "6d43451af6b9148fa48a5ec0de5f9841e4139256", "filename": "src/test/run-pass/issue-26655.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-26655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-26655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26655.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -12,8 +12,6 @@\n \n // Check that the destructors of simple enums are run on unwinding\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::sync::atomic::{Ordering, AtomicUsize};\n use std::thread;\n "}, {"sha": "9dba477a7e5e5c0e0085947f9f35146d3b9c45a5", "filename": "src/test/run-pass/issue-27997.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-27997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fissue-27997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27997.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::sync::atomic::{Ordering, AtomicUsize};\n \n use std::mem;"}, {"sha": "d1a63b443927630a1d30d2813f8266bb709016b0", "filename": "src/test/run-pass/nested-vec-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -14,8 +14,6 @@\n // the contents implement Drop and we hit a panic in the middle of\n // construction.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};\n "}, {"sha": "8d692f2241bc79171b1fa139a356788704f18d8e", "filename": "src/test/run-pass/panic-handler-chain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -11,7 +11,6 @@\n // ignore-emscripten no threads support\n \n #![feature(panic_handler, std_panic)]\n-#![feature(const_atomic_usize_new)]\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::panic;"}, {"sha": "81da13afaa59e6b49c6d6a87174b896a3e14f6c6", "filename": "src/test/run-pass/panic-handler-set-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![feature(panic_handler, std_panic)]\n-#![feature(const_atomic_usize_new)]\n \n // ignore-emscripten no threads support\n "}, {"sha": "3059c8e9e89633c44fc757c8c13f6fa13ca630ab", "filename": "src/test/run-pass/struct-order-of-eval-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -11,8 +11,6 @@\n // Checks that functional-record-update order-of-eval is as expected\n // even when no Drop-implementations are involved.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::sync::atomic::{Ordering, AtomicUsize};\n \n struct W { wrapped: u32 }"}, {"sha": "2ae9ebc34e1b3f89e0a2546efae10fba8f6b6a06", "filename": "src/test/run-pass/struct-order-of-eval-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -11,8 +11,6 @@\n // Checks that struct-literal expression order-of-eval is as expected\n // even when no Drop-implementations are involved.\n \n-#![feature(const_atomic_usize_new)]\n-\n use std::sync::atomic::{Ordering, AtomicUsize};\n \n struct W { wrapped: u32 }"}, {"sha": "455c9dc57f52be87c55f713988d8a23da15489e2", "filename": "src/test/ui/span/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -13,7 +13,7 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n-#![feature(const_atomic_usize_new)]\n+\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "5e7cb79680c1e99797d81690cd1973bd993504ae", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -12,7 +12,7 @@\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n \n-#![feature(const_atomic_usize_new)]\n+\n \n use std::cell::Cell;\n use id::Id;"}, {"sha": "c4596e7c3684d26412c34ab40dc169c66fd31251", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5f53e65ee5f022611033dbf58c42e26be7f93d/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.rs?ref=6c5f53e65ee5f022611033dbf58c42e26be7f93d", "patch": "@@ -23,7 +23,7 @@\n // conditions above to be satisfied, meaning that if the dropck is\n // sound, it should reject this code.\n \n-#![feature(const_atomic_usize_new)]\n+\n \n use std::cell::Cell;\n use id::Id;"}]}