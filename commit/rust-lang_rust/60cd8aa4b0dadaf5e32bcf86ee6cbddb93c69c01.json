{"sha": "60cd8aa4b0dadaf5e32bcf86ee6cbddb93c69c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwY2Q4YWE0YjBkYWRhZjVlMzJiY2Y4NmVlNmNiZGRiOTNjNjljMDE=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-26T21:44:59Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Delete a duplicate test.", "tree": {"sha": "b3db13f89f838ad497e8530466e0889d5fb8b09c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3db13f89f838ad497e8530466e0889d5fb8b09c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60cd8aa4b0dadaf5e32bcf86ee6cbddb93c69c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60cd8aa4b0dadaf5e32bcf86ee6cbddb93c69c01", "html_url": "https://github.com/rust-lang/rust/commit/60cd8aa4b0dadaf5e32bcf86ee6cbddb93c69c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60cd8aa4b0dadaf5e32bcf86ee6cbddb93c69c01/comments", "author": null, "committer": null, "parents": [{"sha": "64164b10e8b321745284bf7da7656e464b4ec9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/64164b10e8b321745284bf7da7656e464b4ec9f4", "html_url": "https://github.com/rust-lang/rust/commit/64164b10e8b321745284bf7da7656e464b4ec9f4"}], "stats": {"total": 49, "additions": 0, "deletions": 49}, "files": [{"sha": "6be5538bb444dbe5b6cc54deb861aecd51dfd977", "filename": "tests/compile-fail/concurrency/dangling_tls_lib.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/64164b10e8b321745284bf7da7656e464b4ec9f4/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64164b10e8b321745284bf7da7656e464b4ec9f4/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs?ref=64164b10e8b321745284bf7da7656e464b4ec9f4", "patch": "@@ -1,49 +0,0 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-\n-//! Check that we catch if a thread local is accessed after the thread has\n-//! terminated.\n-\n-#![feature(thread_local_internals)]\n-\n-use std::cell::RefCell;\n-use std::thread;\n-\n-static A: std::thread::LocalKey<RefCell<u8>> = {\n-    #[inline]\n-    fn __init() -> RefCell<u8> {\n-        RefCell::new(0)\n-    }\n-\n-    unsafe fn __getit() -> Option<&'static RefCell<u8>> {\n-        static __KEY: std::thread::__OsLocalKeyInner<RefCell<u8>> =\n-            std::thread::__OsLocalKeyInner::new();\n-        __KEY.get(__init)\n-    }\n-\n-    unsafe { std::thread::LocalKey::new(__getit) }\n-};\n-\n-struct Sender(*mut u8);\n-\n-unsafe impl Send for Sender {}\n-\n-fn main() {\n-    A.with(|f| {\n-        assert_eq!(*f.borrow(), 0);\n-        *f.borrow_mut() = 4;\n-    });\n-\n-    let handle = thread::spawn(|| {\n-        let ptr = A.with(|f| {\n-            assert_eq!(*f.borrow(), 0);\n-            *f.borrow_mut() = 5;\n-            &mut *f.borrow_mut() as *mut u8\n-        });\n-        Sender(ptr)\n-    });\n-    let ptr = handle.join().unwrap().0;\n-    A.with(|f| {\n-        assert_eq!(*f.borrow(), 4);\n-    });\n-    let _x = unsafe { *ptr }; //~ ERROR Undefined Behavior\n-}"}]}