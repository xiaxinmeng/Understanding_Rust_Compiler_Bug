{"sha": "9ecde5712ec5b393c7a0bb0074c957446ed9886b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2RlNTcxMmVjNWIzOTNjN2EwYmIwMDc0Yzk1NzQ0NmVkOTg4NmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T08:00:41Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Move some byte and scalar accessors from `Memory` to `Allocation`", "tree": {"sha": "c194baa223d913ba9f68c0f63fd3783820277b10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c194baa223d913ba9f68c0f63fd3783820277b10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecde5712ec5b393c7a0bb0074c957446ed9886b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecde5712ec5b393c7a0bb0074c957446ed9886b", "html_url": "https://github.com/rust-lang/rust/commit/9ecde5712ec5b393c7a0bb0074c957446ed9886b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecde5712ec5b393c7a0bb0074c957446ed9886b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad11856431ea3c0808951eed9fcbefbd82590ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad11856431ea3c0808951eed9fcbefbd82590ef2", "html_url": "https://github.com/rust-lang/rust/commit/ad11856431ea3c0808951eed9fcbefbd82590ef2"}], "stats": {"total": 397, "additions": 200, "deletions": 197}, "files": [{"sha": "cba51981021a9c9f9161ae0f680678987cf7df02", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/9ecde5712ec5b393c7a0bb0074c957446ed9886b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecde5712ec5b393c7a0bb0074c957446ed9886b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=9ecde5712ec5b393c7a0bb0074c957446ed9886b", "patch": "@@ -86,6 +86,206 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     }\n }\n \n+/// Reading and writing\n+impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n+    pub fn read_c_str(&self, ptr: Pointer<M::PointerTag>) -> EvalResult<'tcx, &[u8]> {\n+        let alloc = self.get(ptr.alloc_id)?;\n+        assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n+        let offset = ptr.offset.bytes() as usize;\n+        match alloc.bytes[offset..].iter().position(|&c| c == 0) {\n+            Some(size) => {\n+                let p1 = Size::from_bytes((size + 1) as u64);\n+                self.check_relocations(ptr, p1)?;\n+                self.check_defined(ptr, p1)?;\n+                Ok(&alloc.bytes[offset..offset + size])\n+            }\n+            None => err!(UnterminatedCString(ptr.erase_tag())),\n+        }\n+    }\n+\n+    pub fn check_bytes(\n+        &self,\n+        ptr: Scalar<M::PointerTag>,\n+        size: Size,\n+        allow_ptr_and_undef: bool,\n+    ) -> EvalResult<'tcx> {\n+        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n+        let align = Align::from_bytes(1).unwrap();\n+        if size.bytes() == 0 {\n+            self.check_align(ptr, align)?;\n+            return Ok(());\n+        }\n+        let ptr = ptr.to_ptr()?;\n+        // Check bounds, align and relocations on the edges\n+        self.get_bytes_with_undef_and_ptr(ptr, size, align)?;\n+        // Check undef and ptr\n+        if !allow_ptr_and_undef {\n+            self.check_defined(ptr, size)?;\n+            self.check_relocations(ptr, size)?;\n+        }\n+        Ok(())\n+    }\n+\n+    pub fn read_bytes(&self, ptr: Scalar<M::PointerTag>, size: Size) -> EvalResult<'tcx, &[u8]> {\n+        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n+        let align = Align::from_bytes(1).unwrap();\n+        if size.bytes() == 0 {\n+            self.check_align(ptr, align)?;\n+            return Ok(&[]);\n+        }\n+        self.get_bytes(ptr.to_ptr()?, size, align)\n+    }\n+\n+    pub fn write_bytes(&mut self, ptr: Scalar<M::PointerTag>, src: &[u8]) -> EvalResult<'tcx> {\n+        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n+        let align = Align::from_bytes(1).unwrap();\n+        if src.is_empty() {\n+            self.check_align(ptr, align)?;\n+            return Ok(());\n+        }\n+        let bytes = self.get_bytes_mut(ptr.to_ptr()?, Size::from_bytes(src.len() as u64), align)?;\n+        bytes.clone_from_slice(src);\n+        Ok(())\n+    }\n+\n+    pub fn write_repeat(\n+        &mut self,\n+        ptr: Scalar<M::PointerTag>,\n+        val: u8,\n+        count: Size\n+    ) -> EvalResult<'tcx> {\n+        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n+        let align = Align::from_bytes(1).unwrap();\n+        if count.bytes() == 0 {\n+            self.check_align(ptr, align)?;\n+            return Ok(());\n+        }\n+        let bytes = self.get_bytes_mut(ptr.to_ptr()?, count, align)?;\n+        for b in bytes {\n+            *b = val;\n+        }\n+        Ok(())\n+    }\n+\n+    /// Read a *non-ZST* scalar\n+    pub fn read_scalar(\n+        &self,\n+        ptr: Pointer<M::PointerTag>,\n+        ptr_align: Align,\n+        size: Size\n+    ) -> EvalResult<'tcx, ScalarMaybeUndef<M::PointerTag>> {\n+        // get_bytes_unchecked tests alignment and relocation edges\n+        let bytes = self.get_bytes_with_undef_and_ptr(\n+            ptr, size, ptr_align.min(self.int_align(size))\n+        )?;\n+        // Undef check happens *after* we established that the alignment is correct.\n+        // We must not return Ok() for unaligned pointers!\n+        if self.check_defined(ptr, size).is_err() {\n+            // this inflates undefined bytes to the entire scalar, even if only a few\n+            // bytes are undefined\n+            return Ok(ScalarMaybeUndef::Undef);\n+        }\n+        // Now we do the actual reading\n+        let bits = read_target_uint(self.tcx.data_layout.endian, bytes).unwrap();\n+        // See if we got a pointer\n+        if size != self.pointer_size() {\n+            // *Now* better make sure that the inside also is free of relocations.\n+            self.check_relocations(ptr, size)?;\n+        } else {\n+            let alloc = self.get(ptr.alloc_id)?;\n+            match alloc.relocations.get(&ptr.offset) {\n+                Some(&(tag, alloc_id)) => {\n+                    let ptr = Pointer::new_with_tag(alloc_id, Size::from_bytes(bits as u64), tag);\n+                    return Ok(ScalarMaybeUndef::Scalar(ptr.into()))\n+                }\n+                None => {},\n+            }\n+        }\n+        // We don't. Just return the bits.\n+        Ok(ScalarMaybeUndef::Scalar(Scalar::from_uint(bits, size)))\n+    }\n+\n+    pub fn read_ptr_sized(\n+        &self,\n+        ptr: Pointer<M::PointerTag>,\n+        ptr_align: Align\n+    ) -> EvalResult<'tcx, ScalarMaybeUndef<M::PointerTag>> {\n+        self.read_scalar(ptr, ptr_align, self.pointer_size())\n+    }\n+\n+    /// Write a *non-ZST* scalar\n+    pub fn write_scalar(\n+        &mut self,\n+        ptr: Pointer<M::PointerTag>,\n+        ptr_align: Align,\n+        val: ScalarMaybeUndef<M::PointerTag>,\n+        type_size: Size,\n+    ) -> EvalResult<'tcx> {\n+        let val = match val {\n+            ScalarMaybeUndef::Scalar(scalar) => scalar,\n+            ScalarMaybeUndef::Undef => return self.mark_definedness(ptr, type_size, false),\n+        };\n+\n+        let bytes = match val {\n+            Scalar::Ptr(val) => {\n+                assert_eq!(type_size, self.pointer_size());\n+                val.offset.bytes() as u128\n+            }\n+\n+            Scalar::Bits { bits, size } => {\n+                assert_eq!(size as u64, type_size.bytes());\n+                debug_assert_eq!(truncate(bits, Size::from_bytes(size.into())), bits,\n+                    \"Unexpected value of size {} when writing to memory\", size);\n+                bits\n+            },\n+        };\n+\n+        {\n+            // get_bytes_mut checks alignment\n+            let endian = self.tcx.data_layout.endian;\n+            let dst = self.get_bytes_mut(ptr, type_size, ptr_align)?;\n+            write_target_uint(endian, dst, bytes).unwrap();\n+        }\n+\n+        // See if we have to also write a relocation\n+        match val {\n+            Scalar::Ptr(val) => {\n+                self.get_mut(ptr.alloc_id)?.relocations.insert(\n+                    ptr.offset,\n+                    (val.tag, val.alloc_id),\n+                );\n+            }\n+            _ => {}\n+        }\n+\n+        Ok(())\n+    }\n+\n+    pub fn write_ptr_sized(\n+        &mut self,\n+        ptr: Pointer<M::PointerTag>,\n+        ptr_align: Align,\n+        val: ScalarMaybeUndef<M::PointerTag>\n+    ) -> EvalResult<'tcx> {\n+        let ptr_size = self.pointer_size();\n+        self.write_scalar(ptr.into(), ptr_align, val, ptr_size)\n+    }\n+\n+    fn int_align(&self, size: Size) -> Align {\n+        // We assume pointer-sized integers have the same alignment as pointers.\n+        // We also assume signed and unsigned integers of the same size have the same alignment.\n+        let ity = match size.bytes() {\n+            1 => layout::I8,\n+            2 => layout::I16,\n+            4 => layout::I32,\n+            8 => layout::I64,\n+            16 => layout::I128,\n+            _ => bug!(\"bad integer size: {}\", size.bytes()),\n+        };\n+        ity.align(self).abi\n+    }\n+}\n+\n /// Byte accessors\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// The last argument controls whether we error out when there are undefined"}, {"sha": "69789637927d94d0969617ca67f488a8337c93dd", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 197, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/9ecde5712ec5b393c7a0bb0074c957446ed9886b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecde5712ec5b393c7a0bb0074c957446ed9886b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9ecde5712ec5b393c7a0bb0074c957446ed9886b", "patch": "@@ -714,203 +714,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n         Ok(())\n     }\n-\n-    pub fn read_c_str(&self, ptr: Pointer<M::PointerTag>) -> EvalResult<'tcx, &[u8]> {\n-        let alloc = self.get(ptr.alloc_id)?;\n-        assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n-        let offset = ptr.offset.bytes() as usize;\n-        match alloc.bytes[offset..].iter().position(|&c| c == 0) {\n-            Some(size) => {\n-                let p1 = Size::from_bytes((size + 1) as u64);\n-                self.check_relocations(ptr, p1)?;\n-                self.check_defined(ptr, p1)?;\n-                Ok(&alloc.bytes[offset..offset + size])\n-            }\n-            None => err!(UnterminatedCString(ptr.erase_tag())),\n-        }\n-    }\n-\n-    pub fn check_bytes(\n-        &self,\n-        ptr: Scalar<M::PointerTag>,\n-        size: Size,\n-        allow_ptr_and_undef: bool,\n-    ) -> EvalResult<'tcx> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1).unwrap();\n-        if size.bytes() == 0 {\n-            self.check_align(ptr, align)?;\n-            return Ok(());\n-        }\n-        let ptr = ptr.to_ptr()?;\n-        // Check bounds, align and relocations on the edges\n-        self.get_bytes_with_undef_and_ptr(ptr, size, align)?;\n-        // Check undef and ptr\n-        if !allow_ptr_and_undef {\n-            self.check_defined(ptr, size)?;\n-            self.check_relocations(ptr, size)?;\n-        }\n-        Ok(())\n-    }\n-\n-    pub fn read_bytes(&self, ptr: Scalar<M::PointerTag>, size: Size) -> EvalResult<'tcx, &[u8]> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1).unwrap();\n-        if size.bytes() == 0 {\n-            self.check_align(ptr, align)?;\n-            return Ok(&[]);\n-        }\n-        self.get_bytes(ptr.to_ptr()?, size, align)\n-    }\n-\n-    pub fn write_bytes(&mut self, ptr: Scalar<M::PointerTag>, src: &[u8]) -> EvalResult<'tcx> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1).unwrap();\n-        if src.is_empty() {\n-            self.check_align(ptr, align)?;\n-            return Ok(());\n-        }\n-        let bytes = self.get_bytes_mut(ptr.to_ptr()?, Size::from_bytes(src.len() as u64), align)?;\n-        bytes.clone_from_slice(src);\n-        Ok(())\n-    }\n-\n-    pub fn write_repeat(\n-        &mut self,\n-        ptr: Scalar<M::PointerTag>,\n-        val: u8,\n-        count: Size\n-    ) -> EvalResult<'tcx> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = Align::from_bytes(1).unwrap();\n-        if count.bytes() == 0 {\n-            self.check_align(ptr, align)?;\n-            return Ok(());\n-        }\n-        let bytes = self.get_bytes_mut(ptr.to_ptr()?, count, align)?;\n-        for b in bytes {\n-            *b = val;\n-        }\n-        Ok(())\n-    }\n-\n-    /// Read a *non-ZST* scalar\n-    pub fn read_scalar(\n-        &self,\n-        ptr: Pointer<M::PointerTag>,\n-        ptr_align: Align,\n-        size: Size\n-    ) -> EvalResult<'tcx, ScalarMaybeUndef<M::PointerTag>> {\n-        // get_bytes_unchecked tests alignment and relocation edges\n-        let bytes = self.get_bytes_with_undef_and_ptr(\n-            ptr, size, ptr_align.min(self.int_align(size))\n-        )?;\n-        // Undef check happens *after* we established that the alignment is correct.\n-        // We must not return Ok() for unaligned pointers!\n-        if self.check_defined(ptr, size).is_err() {\n-            // this inflates undefined bytes to the entire scalar, even if only a few\n-            // bytes are undefined\n-            return Ok(ScalarMaybeUndef::Undef);\n-        }\n-        // Now we do the actual reading\n-        let bits = read_target_uint(self.tcx.data_layout.endian, bytes).unwrap();\n-        // See if we got a pointer\n-        if size != self.pointer_size() {\n-            // *Now* better make sure that the inside also is free of relocations.\n-            self.check_relocations(ptr, size)?;\n-        } else {\n-            let alloc = self.get(ptr.alloc_id)?;\n-            match alloc.relocations.get(&ptr.offset) {\n-                Some(&(tag, alloc_id)) => {\n-                    let ptr = Pointer::new_with_tag(alloc_id, Size::from_bytes(bits as u64), tag);\n-                    return Ok(ScalarMaybeUndef::Scalar(ptr.into()))\n-                }\n-                None => {},\n-            }\n-        }\n-        // We don't. Just return the bits.\n-        Ok(ScalarMaybeUndef::Scalar(Scalar::from_uint(bits, size)))\n-    }\n-\n-    pub fn read_ptr_sized(\n-        &self,\n-        ptr: Pointer<M::PointerTag>,\n-        ptr_align: Align\n-    ) -> EvalResult<'tcx, ScalarMaybeUndef<M::PointerTag>> {\n-        self.read_scalar(ptr, ptr_align, self.pointer_size())\n-    }\n-\n-    /// Write a *non-ZST* scalar\n-    pub fn write_scalar(\n-        &mut self,\n-        ptr: Pointer<M::PointerTag>,\n-        ptr_align: Align,\n-        val: ScalarMaybeUndef<M::PointerTag>,\n-        type_size: Size,\n-    ) -> EvalResult<'tcx> {\n-        let val = match val {\n-            ScalarMaybeUndef::Scalar(scalar) => scalar,\n-            ScalarMaybeUndef::Undef => return self.mark_definedness(ptr, type_size, false),\n-        };\n-\n-        let bytes = match val {\n-            Scalar::Ptr(val) => {\n-                assert_eq!(type_size, self.pointer_size());\n-                val.offset.bytes() as u128\n-            }\n-\n-            Scalar::Bits { bits, size } => {\n-                assert_eq!(size as u64, type_size.bytes());\n-                debug_assert_eq!(truncate(bits, Size::from_bytes(size.into())), bits,\n-                    \"Unexpected value of size {} when writing to memory\", size);\n-                bits\n-            },\n-        };\n-\n-        {\n-            // get_bytes_mut checks alignment\n-            let endian = self.tcx.data_layout.endian;\n-            let dst = self.get_bytes_mut(ptr, type_size, ptr_align)?;\n-            write_target_uint(endian, dst, bytes).unwrap();\n-        }\n-\n-        // See if we have to also write a relocation\n-        match val {\n-            Scalar::Ptr(val) => {\n-                self.get_mut(ptr.alloc_id)?.relocations.insert(\n-                    ptr.offset,\n-                    (val.tag, val.alloc_id),\n-                );\n-            }\n-            _ => {}\n-        }\n-\n-        Ok(())\n-    }\n-\n-    pub fn write_ptr_sized(\n-        &mut self,\n-        ptr: Pointer<M::PointerTag>,\n-        ptr_align: Align,\n-        val: ScalarMaybeUndef<M::PointerTag>\n-    ) -> EvalResult<'tcx> {\n-        let ptr_size = self.pointer_size();\n-        self.write_scalar(ptr.into(), ptr_align, val, ptr_size)\n-    }\n-\n-    fn int_align(&self, size: Size) -> Align {\n-        // We assume pointer-sized integers have the same alignment as pointers.\n-        // We also assume signed and unsigned integers of the same size have the same alignment.\n-        let ity = match size.bytes() {\n-            1 => layout::I8,\n-            2 => layout::I16,\n-            4 => layout::I32,\n-            8 => layout::I64,\n-            16 => layout::I128,\n-            _ => bug!(\"bad integer size: {}\", size.bytes()),\n-        };\n-        ity.align(self).abi\n-    }\n }\n \n /// Undefined bytes"}]}