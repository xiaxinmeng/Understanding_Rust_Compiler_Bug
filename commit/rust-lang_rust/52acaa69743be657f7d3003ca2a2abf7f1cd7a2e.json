{"sha": "52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYWNhYTY5NzQzYmU2NTdmN2QzMDAzY2EyYTJhYmY3ZjFjZDdhMmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T09:19:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:28Z"}, "message": "implement recovery in check_assoc_op", "tree": {"sha": "1bea41c79d2879707293241e37ce5ce037a1fb97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bea41c79d2879707293241e37ce5ce037a1fb97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "html_url": "https://github.com/rust-lang/rust/commit/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903c9dfd1854d652dd5fb3e8c60231baeaec87bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/903c9dfd1854d652dd5fb3e8c60231baeaec87bf", "html_url": "https://github.com/rust-lang/rust/commit/903c9dfd1854d652dd5fb3e8c60231baeaec87bf"}], "stats": {"total": 192, "additions": 100, "deletions": 92}, "files": [{"sha": "8b58fb03bf4374db62d5bfc0f4560ef069a6aa5a", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "patch": "@@ -11,7 +11,7 @@ use syntax::ptr::P;\n use syntax::ThinVec;\n use syntax::util::parser::AssocOp;\n use syntax::struct_span_err;\n-use syntax_pos::symbol::{kw, sym};\n+use syntax_pos::symbol::kw;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n \n use log::{debug, trace};\n@@ -312,22 +312,6 @@ impl<'a> Parser<'a> {\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n         let mut err = self.fatal(&msg_exp);\n-        if self.token.is_ident_named(sym::and) {\n-            err.span_suggestion_short(\n-                self.token.span,\n-                \"use `&&` instead of `and` for the boolean operator\",\n-                \"&&\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n-        if self.token.is_ident_named(sym::or) {\n-            err.span_suggestion_short(\n-                self.token.span,\n-                \"use `||` instead of `or` for the boolean operator\",\n-                \"||\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n         let sp = if self.token == token::Eof {\n             // This is EOF; don't want to point at the following char, but rather the last token.\n             self.prev_span"}, {"sha": "0792f1b3b7f646cd8925b7ca3f7a8ced94aef328", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "patch": "@@ -345,7 +345,31 @@ impl<'a> Parser<'a> {\n     ///\n     /// Also performs recovery for `and` / `or` which are mistaken for `&&` and `||` respectively.\n     fn check_assoc_op(&self) -> Option<AssocOp> {\n-        AssocOp::from_token(&self.token)\n+        match (AssocOp::from_token(&self.token), &self.token.kind) {\n+            (op @ Some(_), _) => op,\n+            (None, token::Ident(sym::and, false)) => {\n+                self.error_bad_logical_op(\"and\", \"&&\", \"conjunction\");\n+                Some(AssocOp::LAnd)\n+            }\n+            (None, token::Ident(sym::or, false)) => {\n+                self.error_bad_logical_op(\"or\", \"||\", \"disjunction\");\n+                Some(AssocOp::LOr)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    /// Error on `and` and `or` suggesting `&&` and `||` respectively.\n+    fn error_bad_logical_op(&self, bad: &str, good: &str, english: &str) {\n+        self.struct_span_err(self.token.span, &format!(\"`{}` is not a logical operator\", bad))\n+            .span_suggestion(\n+                self.token.span,\n+                &format!(\"instead of `{}`, use `{}` to perform logical {}\", bad, good, english),\n+                good.to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .note(\"unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\")\n+            .emit();\n     }\n \n     /// Checks if this expression is a successfully parsed statement."}, {"sha": "036badfe75d9fdd18af9c9b0a089a195d3115e50", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac};\n use syntax::util::classify;\n use syntax::token;\n use syntax_pos::source_map::{respan, Span};\n-use syntax_pos::symbol::{kw, sym};\n+use syntax_pos::symbol::kw;\n \n use std::mem;\n \n@@ -301,25 +301,7 @@ impl<'a> Parser<'a> {\n         let sp = self.token.span;\n         let tok = self.this_token_descr();\n         let mut e = self.span_fatal(sp, &format!(\"expected `{{`, found {}\", tok));\n-        let do_not_suggest_help =\n-            self.token.is_keyword(kw::In) || self.token == token::Colon;\n-\n-        if self.token.is_ident_named(sym::and) {\n-            e.span_suggestion_short(\n-                self.token.span,\n-                \"use `&&` instead of `and` for the boolean operator\",\n-                \"&&\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n-        if self.token.is_ident_named(sym::or) {\n-            e.span_suggestion_short(\n-                self.token.span,\n-                \"use `||` instead of `or` for the boolean operator\",\n-                \"||\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n+        let do_not_suggest_help = self.token.is_keyword(kw::In) || self.token == token::Colon;\n \n         // Check to see if the user has written something like\n         //"}, {"sha": "44421b077fa26eb2c0e75f664c07be4d45cbd76f", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs?ref=52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "patch": "@@ -1,56 +1,57 @@\n+fn main() {}\n+\n fn test_and() {\n     let a = true;\n     let b = false;\n-    if a and b {\n-        //~^ ERROR expected `{`, found `and`\n+\n+    let _ = a and b; //~ ERROR `and` is not a logical operator\n+\n+    if a and b { //~ ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n+\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n }\n \n fn test_or() {\n     let a = true;\n     let b = false;\n-    if a or b {\n-        //~^ ERROR expected `{`, found `or`\n+\n+    let _ = a or b; //~ ERROR `or` is not a logical operator\n+\n+    if a or b { //~ ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n \n fn test_and_par() {\n     let a = true;\n     let b = false;\n-    if (a and b) {\n-        //~^ ERROR expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `and`\n+    if (a and b) {  //~ ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n \n fn test_or_par() {\n     let a = true;\n     let b = false;\n-    if (a or b) {\n-        //~^ ERROR expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `or`\n+    if (a or b) {  //~ ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n \n fn test_while_and() {\n     let a = true;\n     let b = false;\n-    while a and b {\n-        //~^ ERROR expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `and`\n+    while a and b {  //~ ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n \n fn test_while_or() {\n     let a = true;\n     let b = false;\n-    while a or b {\n-        //~^ ERROR expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `or`\n+    while a or b { //~ ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "62c6204fb6f6f8e5ba7c4307873183116f6d9a5f", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "modified", "additions": 56, "deletions": 39, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52acaa69743be657f7d3003ca2a2abf7f1cd7a2e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=52acaa69743be657f7d3003ca2a2abf7f1cd7a2e", "patch": "@@ -1,58 +1,75 @@\n-error: expected `{`, found `and`\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:4:10\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:7:15\n+   |\n+LL |     let _ = a and b;\n+   |               ^^^ help: instead of `and`, use `&&` to perform logical conjunction: `&&`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:9:10\n    |\n LL |     if a and b {\n-   |     --   ^^^\n-   |     |    |\n-   |     |    expected `{`\n-   |     |    help: use `&&` instead of `and` for the boolean operator\n-   |     this `if` statement has a condition, but no block\n+   |          ^^^ help: instead of `and`, use `&&` to perform logical conjunction: `&&`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:20:15\n+   |\n+LL |     let _ = a or b;\n+   |               ^^ help: instead of `or`, use `||` to perform logical disjunction: `||`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: expected `{`, found `or`\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:13:10\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:10\n    |\n LL |     if a or b {\n-   |     --   ^^\n-   |     |    |\n-   |     |    expected `{`\n-   |     |    help: use `||` instead of `or` for the boolean operator\n-   |     this `if` statement has a condition, but no block\n+   |          ^^ help: instead of `or`, use `||` to perform logical disjunction: `||`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `and`\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:11\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:30:11\n    |\n LL |     if (a and b) {\n-   |           ^^^\n-   |           |\n-   |           expected one of 8 possible tokens\n-   |           help: use `&&` instead of `and` for the boolean operator\n+   |           ^^^ help: instead of `and`, use `&&` to perform logical conjunction: `&&`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `or`\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:31:11\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:38:11\n    |\n LL |     if (a or b) {\n-   |           ^^\n-   |           |\n-   |           expected one of 8 possible tokens\n-   |           help: use `||` instead of `or` for the boolean operator\n+   |           ^^ help: instead of `or`, use `||` to perform logical disjunction: `||`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `and`\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:40:13\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:46:13\n    |\n LL |     while a and b {\n-   |             ^^^\n-   |             |\n-   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n-   |             help: use `&&` instead of `and` for the boolean operator\n+   |             ^^^ help: instead of `and`, use `&&` to perform logical conjunction: `&&`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found `or`\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:49:13\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:54:13\n    |\n LL |     while a or b {\n-   |             ^^\n-   |             |\n-   |             expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n-   |             help: use `||` instead of `or` for the boolean operator\n+   |             ^^ help: instead of `or`, use `||` to perform logical disjunction: `||`\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:13:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 9 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}