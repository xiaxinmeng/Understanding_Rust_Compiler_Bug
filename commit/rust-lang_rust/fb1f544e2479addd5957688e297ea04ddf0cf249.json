{"sha": "fb1f544e2479addd5957688e297ea04ddf0cf249", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMWY1NDRlMjQ3OWFkZGQ1OTU3Njg4ZTI5N2VhMDRkZGYwY2YyNDk=", "commit": {"author": {"name": "Alexandru Macovei", "email": "alexnmaco@gmail.com", "date": "2021-03-30T20:06:57Z"}, "committer": {"name": "Alexandru Macovei", "email": "alexnmaco@gmail.com", "date": "2021-04-06T13:01:31Z"}, "message": "Use Box'es to reduce size of hir_def::expr::Expr from 128 to 72 bytes (on 64bit systems)\n\nRationale: only a minority of variants used almost half the size.\nBy keeping large members (especially in Option) behind a box\nthe memory cost is only payed when the large variants are needed.\n\nThis reduces the size Vec<Expr> needs to allocate.", "tree": {"sha": "cad7e5fce89b5b42d46ea5c9fe6f5bc12ed7c03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad7e5fce89b5b42d46ea5c9fe6f5bc12ed7c03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1f544e2479addd5957688e297ea04ddf0cf249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1f544e2479addd5957688e297ea04ddf0cf249", "html_url": "https://github.com/rust-lang/rust/commit/fb1f544e2479addd5957688e297ea04ddf0cf249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1f544e2479addd5957688e297ea04ddf0cf249/comments", "author": {"login": "alexmaco", "id": 24556329, "node_id": "MDQ6VXNlcjI0NTU2MzI5", "avatar_url": "https://avatars.githubusercontent.com/u/24556329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmaco", "html_url": "https://github.com/alexmaco", "followers_url": "https://api.github.com/users/alexmaco/followers", "following_url": "https://api.github.com/users/alexmaco/following{/other_user}", "gists_url": "https://api.github.com/users/alexmaco/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmaco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmaco/subscriptions", "organizations_url": "https://api.github.com/users/alexmaco/orgs", "repos_url": "https://api.github.com/users/alexmaco/repos", "events_url": "https://api.github.com/users/alexmaco/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmaco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexmaco", "id": 24556329, "node_id": "MDQ6VXNlcjI0NTU2MzI5", "avatar_url": "https://avatars.githubusercontent.com/u/24556329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmaco", "html_url": "https://github.com/alexmaco", "followers_url": "https://api.github.com/users/alexmaco/followers", "following_url": "https://api.github.com/users/alexmaco/following{/other_user}", "gists_url": "https://api.github.com/users/alexmaco/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmaco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmaco/subscriptions", "organizations_url": "https://api.github.com/users/alexmaco/orgs", "repos_url": "https://api.github.com/users/alexmaco/repos", "events_url": "https://api.github.com/users/alexmaco/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmaco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc8a018302d53951ae855ba57d07095a16ef182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8a018302d53951ae855ba57d07095a16ef182", "html_url": "https://github.com/rust-lang/rust/commit/4bc8a018302d53951ae855ba57d07095a16ef182"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "73e7aee3356ec17b8bc3b5f06ebdbfc4d6693e75", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb1f544e2479addd5957688e297ea04ddf0cf249/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1f544e2479addd5957688e297ea04ddf0cf249/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=fb1f544e2479addd5957688e297ea04ddf0cf249", "patch": "@@ -322,8 +322,10 @@ impl ExprCollector<'_> {\n                     Vec::new()\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n-                let generic_args =\n-                    e.generic_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n+                let generic_args = e\n+                    .generic_arg_list()\n+                    .and_then(|it| GenericArgs::from_ast(&self.ctx(), it))\n+                    .map(Box::new);\n                 self.alloc_expr(\n                     Expr::MethodCall { receiver, method_name, args, generic_args },\n                     syntax_ptr,\n@@ -385,7 +387,7 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::Yield { expr }, syntax_ptr)\n             }\n             ast::Expr::RecordExpr(e) => {\n-                let path = e.path().and_then(|path| self.expander.parse_path(path));\n+                let path = e.path().and_then(|path| self.expander.parse_path(path)).map(Box::new);\n                 let record_lit = if let Some(nfl) = e.record_expr_field_list() {\n                     let fields = nfl\n                         .fields()\n@@ -430,7 +432,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let type_ref = TypeRef::from_ast_opt(&self.ctx(), e.ty());\n+                let type_ref = Box::new(TypeRef::from_ast_opt(&self.ctx(), e.ty()));\n                 self.alloc_expr(Expr::Cast { expr, type_ref }, syntax_ptr)\n             }\n             ast::Expr::RefExpr(e) => {\n@@ -469,8 +471,10 @@ impl ExprCollector<'_> {\n                         arg_types.push(type_ref);\n                     }\n                 }\n-                let ret_type =\n-                    e.ret_type().and_then(|r| r.ty()).map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                let ret_type = e\n+                    .ret_type()\n+                    .and_then(|r| r.ty())\n+                    .map(|it| Box::new(TypeRef::from_ast(&self.ctx(), it)));\n                 let body = self.collect_expr_opt(e.body());\n                 self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }"}, {"sha": "ba00b9609822000d37ec54ef7deab7cbb92b34ff", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb1f544e2479addd5957688e297ea04ddf0cf249/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1f544e2479addd5957688e297ea04ddf0cf249/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=fb1f544e2479addd5957688e297ea04ddf0cf249", "patch": "@@ -86,7 +86,7 @@ pub enum Expr {\n         receiver: ExprId,\n         method_name: Name,\n         args: Vec<ExprId>,\n-        generic_args: Option<GenericArgs>,\n+        generic_args: Option<Box<GenericArgs>>,\n     },\n     Match {\n         expr: ExprId,\n@@ -106,7 +106,7 @@ pub enum Expr {\n         expr: Option<ExprId>,\n     },\n     RecordLit {\n-        path: Option<Path>,\n+        path: Option<Box<Path>>,\n         fields: Vec<RecordLitField>,\n         spread: Option<ExprId>,\n     },\n@@ -131,7 +131,7 @@ pub enum Expr {\n     },\n     Cast {\n         expr: ExprId,\n-        type_ref: TypeRef,\n+        type_ref: Box<TypeRef>,\n     },\n     Ref {\n         expr: ExprId,\n@@ -162,7 +162,7 @@ pub enum Expr {\n     Lambda {\n         args: Vec<PatId>,\n         arg_types: Vec<Option<TypeRef>>,\n-        ret_type: Option<TypeRef>,\n+        ret_type: Option<Box<TypeRef>>,\n         body: ExprId,\n     },\n     Tuple {"}, {"sha": "2fcc7c5491e6a252fc117eb238108296923c8807", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb1f544e2479addd5957688e297ea04ddf0cf249/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1f544e2479addd5957688e297ea04ddf0cf249/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=fb1f544e2479addd5957688e297ea04ddf0cf249", "patch": "@@ -317,7 +317,13 @@ impl<'a> InferenceContext<'a> {\n                 self.normalize_associated_types_in(ret_ty)\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => self\n-                .infer_method_call(tgt_expr, *receiver, &args, &method_name, generic_args.as_ref()),\n+                .infer_method_call(\n+                    tgt_expr,\n+                    *receiver,\n+                    &args,\n+                    &method_name,\n+                    generic_args.as_deref(),\n+                ),\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n@@ -398,7 +404,7 @@ impl<'a> InferenceContext<'a> {\n                 TyKind::Never.intern(&Interner)\n             }\n             Expr::RecordLit { path, fields, spread } => {\n-                let (ty, def_id) = self.resolve_variant(path.as_ref());\n+                let (ty, def_id) = self.resolve_variant(path.as_deref());\n                 if let Some(variant) = def_id {\n                     self.write_variant_resolution(tgt_expr.into(), variant);\n                 }"}]}