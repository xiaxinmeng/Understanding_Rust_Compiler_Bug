{"sha": "8c2080886fa46434e097c503d3d1ee9309eadc7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMjA4MDg4NmZhNDY0MzRlMDk3YzUwM2QzZDFlZTkzMDllYWRjN2Q=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-16T01:39:45Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-29T16:52:06Z"}, "message": "Write primitive types via array buffers\n\nThis allows a more efficient implementation (avoiding a fallback to memmove,\nwhich is not optimal for short writes).\n\nThis saves 0.29% on diesel.", "tree": {"sha": "3cdbf3455c24eb31a10086d9765bdc8e8d73ef9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cdbf3455c24eb31a10086d9765bdc8e8d73ef9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c2080886fa46434e097c503d3d1ee9309eadc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2080886fa46434e097c503d3d1ee9309eadc7d", "html_url": "https://github.com/rust-lang/rust/commit/8c2080886fa46434e097c503d3d1ee9309eadc7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c2080886fa46434e097c503d3d1ee9309eadc7d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b2894d313b5d514d077bf65560df29cda35d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b2894d313b5d514d077bf65560df29cda35d13", "html_url": "https://github.com/rust-lang/rust/commit/92b2894d313b5d514d077bf65560df29cda35d13"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "717201aef102bf60a78b61837adca7d8961f7e25", "filename": "library/proc_macro/src/bridge/buffer.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c2080886fa46434e097c503d3d1ee9309eadc7d/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2080886fa46434e097c503d3d1ee9309eadc7d/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs?ref=8c2080886fa46434e097c503d3d1ee9309eadc7d", "patch": "@@ -78,8 +78,23 @@ impl<T: Copy> Buffer<T> {\n         mem::take(self)\n     }\n \n+    // We have the array method separate from extending from a slice. This is\n+    // because in the case of small arrays, codegen can be more efficient\n+    // (avoiding a memmove call). With extend_from_slice, LLVM at least\n+    // currently is not able to make that optimization.\n+    pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {\n+        if xs.len() > (self.capacity - self.len) {\n+            let b = self.take();\n+            *self = (b.reserve)(b, xs.len());\n+        }\n+        unsafe {\n+            xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());\n+            self.len += xs.len();\n+        }\n+    }\n+\n     pub(super) fn extend_from_slice(&mut self, xs: &[T]) {\n-        if xs.len() > self.capacity.wrapping_sub(self.len) {\n+        if xs.len() > (self.capacity - self.len) {\n             let b = self.take();\n             *self = (b.reserve)(b, xs.len());\n         }"}, {"sha": "588e6ded0f48068f937b697b1d206ab3f5046113", "filename": "library/proc_macro/src/bridge/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c2080886fa46434e097c503d3d1ee9309eadc7d/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2080886fa46434e097c503d3d1ee9309eadc7d/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs?ref=8c2080886fa46434e097c503d3d1ee9309eadc7d", "patch": "@@ -27,7 +27,7 @@ macro_rules! rpc_encode_decode {\n     (le $ty:ty) => {\n         impl<S> Encode<S> for $ty {\n             fn encode(self, w: &mut Writer, _: &mut S) {\n-                w.write_all(&self.to_le_bytes()).unwrap();\n+                w.extend_from_array(&self.to_le_bytes());\n             }\n         }\n "}]}