{"sha": "4e68093d8c0ad3e58a97069ea85677b8982ea610", "node_id": "C_kwDOAAsO6NoAKDRlNjgwOTNkOGMwYWQzZTU4YTk3MDY5ZWE4NTY3N2I4OTgyZWE2MTA", "commit": {"author": {"name": "Andrew Dona-Couch", "email": "hi@andrewcou.ch", "date": "2021-11-25T04:04:27Z"}, "committer": {"name": "Andrew Dona-Couch", "email": "hi@andrewcou.ch", "date": "2021-12-06T06:02:49Z"}, "message": "Implement inline asm! for AVR platform", "tree": {"sha": "08af6be25f593a34c9ea5dc6dbcc82d756ea526d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08af6be25f593a34c9ea5dc6dbcc82d756ea526d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e68093d8c0ad3e58a97069ea85677b8982ea610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e68093d8c0ad3e58a97069ea85677b8982ea610", "html_url": "https://github.com/rust-lang/rust/commit/4e68093d8c0ad3e58a97069ea85677b8982ea610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e68093d8c0ad3e58a97069ea85677b8982ea610/comments", "author": {"login": "couchand", "id": 793969, "node_id": "MDQ6VXNlcjc5Mzk2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/793969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/couchand", "html_url": "https://github.com/couchand", "followers_url": "https://api.github.com/users/couchand/followers", "following_url": "https://api.github.com/users/couchand/following{/other_user}", "gists_url": "https://api.github.com/users/couchand/gists{/gist_id}", "starred_url": "https://api.github.com/users/couchand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/couchand/subscriptions", "organizations_url": "https://api.github.com/users/couchand/orgs", "repos_url": "https://api.github.com/users/couchand/repos", "events_url": "https://api.github.com/users/couchand/events{/privacy}", "received_events_url": "https://api.github.com/users/couchand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "couchand", "id": 793969, "node_id": "MDQ6VXNlcjc5Mzk2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/793969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/couchand", "html_url": "https://github.com/couchand", "followers_url": "https://api.github.com/users/couchand/followers", "following_url": "https://api.github.com/users/couchand/following{/other_user}", "gists_url": "https://api.github.com/users/couchand/gists{/gist_id}", "starred_url": "https://api.github.com/users/couchand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/couchand/subscriptions", "organizations_url": "https://api.github.com/users/couchand/orgs", "repos_url": "https://api.github.com/users/couchand/repos", "events_url": "https://api.github.com/users/couchand/events{/privacy}", "received_events_url": "https://api.github.com/users/couchand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa64fd1c3f29598b9256d37c3c891fcff04f92d", "html_url": "https://github.com/rust-lang/rust/commit/4fa64fd1c3f29598b9256d37c3c891fcff04f92d"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "7481b5db755e7a4a60f4957329c64afd101dcd1e", "filename": "src/asm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e68093d8c0ad3e58a97069ea85677b8982ea610/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e68093d8c0ad3e58a97069ea85677b8982ea610/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=4e68093d8c0ad3e58a97069ea85677b8982ea610", "patch": "@@ -577,6 +577,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => unimplemented!(),\n+            InlineAsmRegClass::Avr(_) => unimplemented!(),\n             InlineAsmRegClass::Bpf(_) => unimplemented!(),\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => unimplemented!(),\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => unimplemented!(),\n@@ -639,6 +640,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n             unimplemented!()\n         }\n+        InlineAsmRegClass::Avr(_) => unimplemented!(),\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n@@ -747,6 +749,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n             unimplemented!()\n         }\n+        InlineAsmRegClass::Avr(_) => unimplemented!(),\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(_) => unimplemented!(),\n         InlineAsmRegClass::Mips(_) => unimplemented!(),"}]}