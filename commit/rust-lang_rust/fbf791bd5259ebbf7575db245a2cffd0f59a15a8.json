{"sha": "fbf791bd5259ebbf7575db245a2cffd0f59a15a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZjc5MWJkNTI1OWViYmY3NTc1ZGIyNDVhMmNmZmQwZjU5YTE1YTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-05T14:43:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-05T15:08:22Z"}, "message": "explain the types used in the open64 call", "tree": {"sha": "10976399f0a8a83d30eb54821dad46f3d8beb37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10976399f0a8a83d30eb54821dad46f3d8beb37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbf791bd5259ebbf7575db245a2cffd0f59a15a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf791bd5259ebbf7575db245a2cffd0f59a15a8", "html_url": "https://github.com/rust-lang/rust/commit/fbf791bd5259ebbf7575db245a2cffd0f59a15a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbf791bd5259ebbf7575db245a2cffd0f59a15a8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/04689e22e946879f2f5e2c73849d2f4e1f2b4b32", "html_url": "https://github.com/rust-lang/rust/commit/04689e22e946879f2f5e2c73849d2f4e1f2b4b32"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "80cf6a5dbc27b181747f4adc7c80637a9d399fbb", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbf791bd5259ebbf7575db245a2cffd0f59a15a8/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbf791bd5259ebbf7575db245a2cffd0f59a15a8/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=fbf791bd5259ebbf7575db245a2cffd0f59a15a8", "patch": "@@ -703,6 +703,10 @@ impl File {\n             | opts.get_access_mode()?\n             | opts.get_creation_mode()?\n             | (opts.custom_flags as c_int & !libc::O_ACCMODE);\n+        // The third argument of `open64` is documented to have type `mode_t`. On\n+        // some platforms (like macOS, where `open64` is actually `open`), `mode_t` is `u16`.\n+        // However, since this is a variadic function, C integer promotion rules mean that on\n+        // the ABI level, this still gets passed as `c_int` (aka `u32` on Unix platforms).\n         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n         let fd = FileDesc::new(fd);\n "}]}