{"sha": "a70beea9e9c0ffd226708abdb6a2860f7a32be19", "node_id": "C_kwDOAAsO6NoAKGE3MGJlZWE5ZTljMGZmZDIyNjcwOGFiZGI2YTI4NjBmN2EzMmJlMTk", "commit": {"author": {"name": "Wang Ruochen", "email": "wrc@ruo-chen.wang", "date": "2022-05-02T21:45:31Z"}, "committer": {"name": "Wang Ruochen", "email": "wrc@ruo-chen.wang", "date": "2022-05-02T22:20:13Z"}, "message": "Trigger only when cursor is on else", "tree": {"sha": "da1d88ce8226639cd8d8de74c360fd2e6fda545a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da1d88ce8226639cd8d8de74c360fd2e6fda545a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70beea9e9c0ffd226708abdb6a2860f7a32be19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70beea9e9c0ffd226708abdb6a2860f7a32be19", "html_url": "https://github.com/rust-lang/rust/commit/a70beea9e9c0ffd226708abdb6a2860f7a32be19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70beea9e9c0ffd226708abdb6a2860f7a32be19/comments", "author": {"login": "weirane", "id": 37568244, "node_id": "MDQ6VXNlcjM3NTY4MjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/37568244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirane", "html_url": "https://github.com/weirane", "followers_url": "https://api.github.com/users/weirane/followers", "following_url": "https://api.github.com/users/weirane/following{/other_user}", "gists_url": "https://api.github.com/users/weirane/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirane/subscriptions", "organizations_url": "https://api.github.com/users/weirane/orgs", "repos_url": "https://api.github.com/users/weirane/repos", "events_url": "https://api.github.com/users/weirane/events{/privacy}", "received_events_url": "https://api.github.com/users/weirane/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weirane", "id": 37568244, "node_id": "MDQ6VXNlcjM3NTY4MjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/37568244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirane", "html_url": "https://github.com/weirane", "followers_url": "https://api.github.com/users/weirane/followers", "following_url": "https://api.github.com/users/weirane/following{/other_user}", "gists_url": "https://api.github.com/users/weirane/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirane/subscriptions", "organizations_url": "https://api.github.com/users/weirane/orgs", "repos_url": "https://api.github.com/users/weirane/repos", "events_url": "https://api.github.com/users/weirane/events{/privacy}", "received_events_url": "https://api.github.com/users/weirane/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59cdb318740e433f6c459e84c1c79911d9fedd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/59cdb318740e433f6c459e84c1c79911d9fedd8b", "html_url": "https://github.com/rust-lang/rust/commit/59cdb318740e433f6c459e84c1c79911d9fedd8b"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "cfd176fcf253f4dd99a15a37fab6ddef62de0e3e", "filename": "crates/ide-assists/src/handlers/convert_let_else_to_match.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a70beea9e9c0ffd226708abdb6a2860f7a32be19/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_let_else_to_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70beea9e9c0ffd226708abdb6a2860f7a32be19/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_let_else_to_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_let_else_to_match.rs?ref=a70beea9e9c0ffd226708abdb6a2860f7a32be19", "patch": "@@ -1,4 +1,5 @@\n use syntax::ast::{edit::AstNodeEdit, AstNode, HasName, LetStmt, Pat};\n+use syntax::T;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -95,7 +96,7 @@ fn binders_to_str(binders: &[(String, bool)], addmut: bool) -> String {\n //\n // ```\n // fn main() {\n-//     let Ok(mut x) = f() else {$0 return };\n+//     let Ok(mut x) = f() else$0 { return };\n // }\n // ```\n // ->\n@@ -108,7 +109,9 @@ fn binders_to_str(binders: &[(String, bool)], addmut: bool) -> String {\n // }\n // ```\n pub(crate) fn convert_let_else_to_match(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let let_stmt: LetStmt = ctx.find_node_at_offset()?;\n+    // should focus on else token to trigger\n+    let else_token = ctx.find_token_syntax_at_offset(T![else])?;\n+    let let_stmt = LetStmt::cast(else_token.parent()?.parent()?)?;\n     let let_else_block = let_stmt.let_else()?.block_expr()?;\n     let let_init = let_stmt.initializer()?;\n     if let_stmt.ty().is_some() {\n@@ -177,18 +180,30 @@ mod tests {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let 1: u32 = v.iter().sum() else {$0 return };\n+    let 1: u32 = v.iter().sum() else$0 { return };\n }\"#,\n         );\n     }\n \n+    #[test]\n+    fn convert_let_else_to_match_on_else() {\n+        check_assist_not_applicable(\n+            convert_let_else_to_match,\n+            r#\"\n+fn main() {\n+    let Ok(x) = f() else {$0 return };\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn convert_let_else_to_match_no_macropat() {\n         check_assist_not_applicable(\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let m!() = g() else {$0 return };\n+    let m!() = g() else$0 { return };\n }\n             \"#,\n         );\n@@ -200,7 +215,7 @@ fn main() {\n             convert_let_else_to_match,\n             r\"\n fn main() {\n-    let Ok(x) = f() else {$0 continue };\n+    let Ok(x) = f() else$0 { continue };\n }\",\n             \"let Ok(x) = f() else { continue };\",\n         );\n@@ -212,7 +227,7 @@ fn main() {\n             convert_let_else_to_match,\n             r\"\n fn main() {\n-    let Ok(x) = f() else {$0 continue };\n+    let Ok(x) = f() else$0 { continue };\n }\",\n             r\"\n fn main() {\n@@ -230,7 +245,7 @@ fn main() {\n             convert_let_else_to_match,\n             r\"\n fn main() {\n-    let Ok(mut x) = f() else {$0 continue };\n+    let Ok(mut x) = f() el$0se { continue };\n }\",\n             r\"\n fn main() {\n@@ -248,7 +263,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let ControlFlow::Break((x, \"tag\", y, ..)) = f() else {$0 g(); return };\n+    let ControlFlow::Break((x, \"tag\", y, ..)) = f() else$0 { g(); return };\n }\"#,\n             r#\"\n fn main() {\n@@ -266,7 +281,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let [one, 1001, other] = f() else {$0 break };\n+    let [one, 1001, other] = f() else$0 { break };\n }\"#,\n             r#\"\n fn main() {\n@@ -284,7 +299,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let [Struct { inner: Some(it) }, 1001, other] = f() else {$0 break };\n+    let [Struct { inner: Some(it) }, 1001, other] = f() else$0 { break };\n }\"#,\n             r#\"\n fn main() {\n@@ -302,7 +317,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let [Struct { inner }, 1001, other] = f() else {$0 break };\n+    let [Struct { inner }, 1001, other] = f() else$0 { break };\n }\"#,\n             r#\"\n fn main() {\n@@ -320,7 +335,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let (8 | 9) = f() else {$0 panic!() };\n+    let (8 | 9) = f() else$0 { panic!() };\n }\"#,\n             r#\"\n fn main() {\n@@ -338,7 +353,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let 1.. = f() else {$0 return };\n+    let 1.. = f() e$0lse { return };\n }\"#,\n             r#\"\n fn main() {\n@@ -356,7 +371,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let Ok(&mut x) = f(&mut 0) else {$0 return };\n+    let Ok(&mut x) = f(&mut 0) else$0 { return };\n }\"#,\n             r#\"\n fn main() {\n@@ -374,7 +389,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let Ok(ref mut x) = f() else {$0 return };\n+    let Ok(ref mut x) = f() else$0 { return };\n }\"#,\n             r#\"\n fn main() {\n@@ -392,7 +407,7 @@ fn main() {\n             convert_let_else_to_match,\n             r#\"\n fn main() {\n-    let out @ Ok(ins) = f() else {$0 return };\n+    let out @ Ok(ins) = f() else$0 { return };\n }\"#,\n             r#\"\n fn main() {\n@@ -411,7 +426,7 @@ fn main() {\n             r#\"\n fn main() {\n     let v = vec![1, 2, 3];\n-    let &[mut x, y, ..] = &v.iter().collect::<Vec<_>>()[..]$0 else { return };\n+    let &[mut x, y, ..] = &v.iter().collect::<Vec<_>>()[..] else$0 { return };\n }\"#,\n             r#\"\n fn main() {"}, {"sha": "008dd7eec17474d502fb4c16fe710ebd81b26fdd", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a70beea9e9c0ffd226708abdb6a2860f7a32be19/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70beea9e9c0ffd226708abdb6a2860f7a32be19/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a70beea9e9c0ffd226708abdb6a2860f7a32be19", "patch": "@@ -370,7 +370,7 @@ fn doctest_convert_let_else_to_match() {\n         \"convert_let_else_to_match\",\n         r#####\"\n fn main() {\n-    let Ok(mut x) = f() else {$0 return };\n+    let Ok(mut x) = f() else$0 { return };\n }\n \"#####,\n         r#####\""}]}