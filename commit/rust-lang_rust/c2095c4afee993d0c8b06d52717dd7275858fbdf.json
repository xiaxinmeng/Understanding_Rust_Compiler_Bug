{"sha": "c2095c4afee993d0c8b06d52717dd7275858fbdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMDk1YzRhZmVlOTkzZDBjOGIwNmQ1MjcxN2RkNzI3NTg1OGZiZGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-04T17:57:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-04T17:57:09Z"}, "message": "Rustup to rustc 1.35.0-nightly (87a436377 2019-03-03)", "tree": {"sha": "0e752194fba3fab9a111d539c10f206ad1566840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e752194fba3fab9a111d539c10f206ad1566840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2095c4afee993d0c8b06d52717dd7275858fbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2095c4afee993d0c8b06d52717dd7275858fbdf", "html_url": "https://github.com/rust-lang/rust/commit/c2095c4afee993d0c8b06d52717dd7275858fbdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2095c4afee993d0c8b06d52717dd7275858fbdf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "html_url": "https://github.com/rust-lang/rust/commit/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be"}], "stats": {"total": 200, "additions": 33, "deletions": 167}, "files": [{"sha": "9d6221b426ba26c17fe198391064fab57bd7ac09", "filename": "patches/0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/patches%2F0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch", "raw_url": "https://github.com/rust-lang/rust/raw/2ce5387b7c58a241d6b4929b9b8bd9078a7c73be/patches%2F0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0009-Workaround-missing-saturating_-add-sub-intrinsic-imp.patch?ref=2ce5387b7c58a241d6b4929b9b8bd9078a7c73be", "patch": "@@ -1,166 +0,0 @@\n-From a84d00b816c1b771f3990ad5f7ba78981ab9c151 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Wed, 13 Feb 2019 14:54:20 +0100\n-Subject: [PATCH] Workaround missing saturating_{add,sub} intrinsic impl\n-\n----\n- src/libcore/num/mod.rs | 94 --------------------------------------------------\n- 1 file changed, 94 deletions(-)\n-\n-diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 4871b2e..5d5cd61 100644\n---- a/src/libcore/num/mod.rs\n-+++ b/src/libcore/num/mod.rs\n-@@ -880,7 +880,6 @@ $EndFeature, \"\n- ```\"),\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n--            #[cfg(stage0)]\n-             pub fn saturating_add(self, rhs: Self) -> Self {\n-                 match self.checked_add(rhs) {\n-                     Some(x) => x,\n-@@ -892,30 +891,6 @@ $EndFeature, \"\n-         }\n- \n-         doc_comment! {\n--            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at the numeric\n--bounds instead of overflowing.\n--\n--# Examples\n--\n--Basic usage:\n--\n--```\n--\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n--assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n--\"::max_value());\",\n--$EndFeature, \"\n--```\"),\n--\n--            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n--            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n--            #[inline]\n--            #[cfg(not(stage0))]\n--            pub const fn saturating_add(self, rhs: Self) -> Self {\n--                intrinsics::saturating_add(self, rhs)\n--            }\n--        }\n--\n--        doc_comment! {\n-             concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n- numeric bounds instead of overflowing.\n- \n-@@ -931,7 +906,6 @@ $EndFeature, \"\n- ```\"),\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n--            #[cfg(stage0)]\n-             pub fn saturating_sub(self, rhs: Self) -> Self {\n-                 match self.checked_sub(rhs) {\n-                     Some(x) => x,\n-@@ -942,29 +916,6 @@ $EndFeature, \"\n-         }\n- \n-         doc_comment! {\n--            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating at the\n--numeric bounds instead of overflowing.\n--\n--# Examples\n--\n--Basic usage:\n--\n--```\n--\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n--assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n--\"::min_value());\",\n--$EndFeature, \"\n--```\"),\n--            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n--            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n--            #[inline]\n--            #[cfg(not(stage0))]\n--            pub const fn saturating_sub(self, rhs: Self) -> Self {\n--                intrinsics::saturating_sub(self, rhs)\n--            }\n--        }\n--\n--        doc_comment! {\n-             concat!(\"Saturating integer multiplication. Computes `self * rhs`, saturating at the\n- numeric bounds instead of overflowing.\n- \n-@@ -2779,7 +2730,6 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n- ```\"),\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n--            #[cfg(stage0)]\n-             pub fn saturating_add(self, rhs: Self) -> Self {\n-                 match self.checked_add(rhs) {\n-                     Some(x) => x,\n-@@ -2789,28 +2739,6 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n-         }\n- \n-         doc_comment! {\n--            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at\n--the numeric bounds instead of overflowing.\n--\n--# Examples\n--\n--Basic usage:\n--\n--```\n--\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n--assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n--```\"),\n--\n--            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n--            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n--            #[inline]\n--            #[cfg(not(stage0))]\n--            pub const fn saturating_add(self, rhs: Self) -> Self {\n--                intrinsics::saturating_add(self, rhs)\n--            }\n--        }\n--\n--        doc_comment! {\n-             concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n- at the numeric bounds instead of overflowing.\n- \n-@@ -2824,7 +2752,6 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n- ```\"),\n-             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-             #[inline]\n--            #[cfg(stage0)]\n-             pub fn saturating_sub(self, rhs: Self) -> Self {\n-                 match self.checked_sub(rhs) {\n-                     Some(x) => x,\n-@@ -2834,27 +2761,6 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n-         }\n- \n-         doc_comment! {\n--            concat!(\"Saturating integer subtraction. Computes `self - rhs`, saturating\n--at the numeric bounds instead of overflowing.\n--\n--# Examples\n--\n--Basic usage:\n--\n--```\n--\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(27), 73);\n--assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n--```\"),\n--            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n--            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n--            #[inline]\n--            #[cfg(not(stage0))]\n--            pub const fn saturating_sub(self, rhs: Self) -> Self {\n--                intrinsics::saturating_sub(self, rhs)\n--            }\n--        }\n--\n--        doc_comment! {\n-             concat!(\"Saturating integer multiplication. Computes `self * rhs`,\n- saturating at the numeric bounds instead of overflowing.\n- \n--- \n-2.11.0\n-"}, {"sha": "32299aeb68cd53618428ede0107599919b080b6e", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2095c4afee993d0c8b06d52717dd7275858fbdf/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2095c4afee993d0c8b06d52717dd7275858fbdf/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c2095c4afee993d0c8b06d52717dd7275858fbdf", "patch": "@@ -515,7 +515,8 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", ty),\n                     }\n                 }\n-                Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty) => {\n+                Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty)\n+                | Rvalue::Cast(CastKind::MutToConstPointer, operand, ty) => {\n                     let operand = trans_operand(fx, operand);\n                     let layout = fx.layout_of(ty);\n                     lval.write_cvalue(fx, operand.unchecked_cast_to(layout));"}, {"sha": "2abe25381eaec2a38628e37d2655c8f4631eab01", "filename": "src/intrinsics.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c2095c4afee993d0c8b06d52717dd7275858fbdf/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2095c4afee993d0c8b06d52717dd7275858fbdf/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=c2095c4afee993d0c8b06d52717dd7275858fbdf", "patch": "@@ -192,6 +192,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             ret.write_cvalue(fx, type_id);\n         };\n         _ if intrinsic.starts_with(\"unchecked_\") || intrinsic == \"exact_div\", (c x, c y) {\n+            // FIXME trap on overflow\n             let bin_op = match intrinsic {\n                 \"unchecked_div\" | \"exact_div\" => BinOp::Div,\n                 \"unchecked_rem\" => BinOp::Rem,\n@@ -278,6 +279,36 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, res);\n         };\n+        _ if intrinsic.starts_with(\"saturating_\"), <T> (c x, c y) {\n+            // FIXME implement saturating behavior\n+            assert_eq!(x.layout().ty, y.layout().ty);\n+            let bin_op = match intrinsic {\n+                \"saturating_add\" => BinOp::Add,\n+                \"saturating_sub\" => BinOp::Sub,\n+                \"saturating_mul\" => BinOp::Mul,\n+                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+            };\n+            let res = match T.sty {\n+                ty::Uint(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    x,\n+                    y,\n+                    ret.layout().ty,\n+                    false,\n+                ),\n+                ty::Int(_) => crate::base::trans_int_binop(\n+                    fx,\n+                    bin_op,\n+                    x,\n+                    y,\n+                    ret.layout().ty,\n+                    true,\n+                ),\n+                _ => panic!(),\n+            };\n+            ret.write_cvalue(fx, res);\n+        };\n         rotate_left, <T>(v x, v y) {\n             let layout = fx.layout_of(T);\n             let res = fx.bcx.ins().rotl(x, y);"}]}