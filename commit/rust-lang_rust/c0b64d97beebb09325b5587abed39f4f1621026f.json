{"sha": "c0b64d97beebb09325b5587abed39f4f1621026f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYjY0ZDk3YmVlYmIwOTMyNWI1NTg3YWJlZDM5ZjRmMTYyMTAyNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-28T18:57:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-28T18:57:10Z"}, "message": "Auto merge of #81055 - matthewjasper:non-fatal-overflow, r=nikomatsakis\n\nMake hitting the recursion limit in projection non-fatal\n\nThis change was originally made in #80246 to avoid future (effectively) infinite loop bugs in projections,\nbut wundergraph relies on rustc recovering here.\n\ncc #80953\n\nr? `@nikomatsakis`", "tree": {"sha": "13c84de79c90fe8f701624e4f973ecb484357967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13c84de79c90fe8f701624e4f973ecb484357967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0b64d97beebb09325b5587abed39f4f1621026f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b64d97beebb09325b5587abed39f4f1621026f", "html_url": "https://github.com/rust-lang/rust/commit/c0b64d97beebb09325b5587abed39f4f1621026f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0b64d97beebb09325b5587abed39f4f1621026f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf193d69fe48f4ec3cac57ab7abb4e9f2a291661", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf193d69fe48f4ec3cac57ab7abb4e9f2a291661", "html_url": "https://github.com/rust-lang/rust/commit/bf193d69fe48f4ec3cac57ab7abb4e9f2a291661"}, {"sha": "5db5d8f87e2d224df6feea200af371d13394f2be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db5d8f87e2d224df6feea200af371d13394f2be", "html_url": "https://github.com/rust-lang/rust/commit/5db5d8f87e2d224df6feea200af371d13394f2be"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "6908480f431e6d13b5f6dbd77419fdfd1f4da030", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0b64d97beebb09325b5587abed39f4f1621026f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b64d97beebb09325b5587abed39f4f1621026f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c0b64d97beebb09325b5587abed39f4f1621026f", "patch": "@@ -736,14 +736,9 @@ fn project_type<'cx, 'tcx>(\n \n     if !selcx.tcx().sess.recursion_limit().value_within_limit(obligation.recursion_depth) {\n         debug!(\"project: overflow!\");\n-        match selcx.query_mode() {\n-            super::TraitQueryMode::Standard => {\n-                selcx.infcx().report_overflow_error(&obligation, true);\n-            }\n-            super::TraitQueryMode::Canonical => {\n-                return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));\n-            }\n-        }\n+        // This should really be an immediate error, but some existing code\n+        // relies on being able to recover from this.\n+        return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));\n     }\n \n     let obligation_trait_ref = &obligation.predicate.trait_ref(selcx.tcx());"}, {"sha": "87c8099dc3a512ef848b60b2c58937e38a13cdca", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0b64d97beebb09325b5587abed39f4f1621026f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b64d97beebb09325b5587abed39f4f1621026f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c0b64d97beebb09325b5587abed39f4f1621026f", "patch": "@@ -291,10 +291,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub(super) fn query_mode(&self) -> TraitQueryMode {\n-        self.query_mode\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n     // Selection\n     //"}, {"sha": "3e68b1401020f205f712fb7b5fd61866547a4c73", "filename": "src/test/ui/associated-types/project-recursion-limit-non-fatal.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c0b64d97beebb09325b5587abed39f4f1621026f/src%2Ftest%2Fui%2Fassociated-types%2Fproject-recursion-limit-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b64d97beebb09325b5587abed39f4f1621026f/src%2Ftest%2Fui%2Fassociated-types%2Fproject-recursion-limit-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fproject-recursion-limit-non-fatal.rs?ref=c0b64d97beebb09325b5587abed39f4f1621026f", "patch": "@@ -0,0 +1,58 @@\n+// Regression test for #80953. Hitting the recursion limit in projection\n+// is non-fatal. The above code, minimised from wundergraph shows a case\n+// where this is relied on.\n+\n+// check-pass\n+\n+struct AlternateTable {}\n+struct AlternateQuery {}\n+\n+pub trait Query {}\n+pub trait AsQuery {\n+    type Query;\n+}\n+impl<T: Query> AsQuery for T {\n+    type Query = Self;\n+}\n+impl AsQuery for AlternateTable {\n+    type Query = AlternateQuery;\n+}\n+\n+pub trait Table: AsQuery {\n+    type PrimaryKey;\n+}\n+impl Table for AlternateTable {\n+    type PrimaryKey = ();\n+}\n+\n+pub trait FilterDsl<Predicate> {\n+    type Output;\n+}\n+pub type Filter<Source, Predicate> = <Source as FilterDsl<Predicate>>::Output;\n+impl<T, Predicate> FilterDsl<Predicate> for T\n+where\n+    T: Table,\n+    T::Query: FilterDsl<Predicate>,\n+{\n+    type Output = Filter<T::Query, Predicate>;\n+}\n+impl<Predicate> FilterDsl<Predicate> for AlternateQuery {\n+    type Output = &'static str;\n+}\n+\n+pub trait HandleDelete {\n+    type Filter;\n+}\n+impl<T> HandleDelete for T\n+where\n+    T: Table,\n+    T::Query: FilterDsl<T::PrimaryKey>,\n+    Filter<T::Query, T::PrimaryKey>: ,\n+{\n+    type Filter = Filter<T::Query, T::PrimaryKey>;\n+}\n+\n+fn main() {\n+    let x: <AlternateTable as HandleDelete>::Filter = \"Hello, world\";\n+    println!(\"{}\", x);\n+}"}, {"sha": "ce3bffe602ca06721078a9f98297ac05d3e285d9", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0b64d97beebb09325b5587abed39f4f1621026f/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b64d97beebb09325b5587abed39f4f1621026f/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=c0b64d97beebb09325b5587abed39f4f1621026f", "patch": "@@ -1,10 +1,11 @@\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next`\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n   --> $DIR/issue-23122-2.rs:9:5\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n+   = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n \n error: aborting due to previous error\n "}]}