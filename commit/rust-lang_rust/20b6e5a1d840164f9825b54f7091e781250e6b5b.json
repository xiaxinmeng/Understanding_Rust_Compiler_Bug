{"sha": "20b6e5a1d840164f9825b54f7091e781250e6b5b", "node_id": "C_kwDOAAsO6NoAKDIwYjZlNWExZDg0MDE2NGY5ODI1YjU0ZjcwOTFlNzgxMjUwZTZiNWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-23T17:53:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-23T17:53:43Z"}, "message": "Rollup merge of #111851 - rcvalle:rust-cfi-fix-111515, r=bjorn3\n\nCFI: Fix encode_region: unexpected ReEarlyBound(0, 'a)\n\nFixes #111515 and complements #106547 by adding support for encoding early bound regions and also excluding projections when transforming trait objects' traits into their identities before emitting type checks.", "tree": {"sha": "ac67147a69f52329633cd976a57b72929ff34bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac67147a69f52329633cd976a57b72929ff34bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b6e5a1d840164f9825b54f7091e781250e6b5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbP2nCRBK7hj4Ov3rIwAAvtQIABwZZ7FObrZBY8yk+6i+qDFU\nVea1APyHpqcj5MnPWA5TzRcQW5Sr+Xu17dltbiBW0hZADsFkvTDJ5Awre77kFrr5\nb6EAstEw39X0T2Y6CANlCLNwBSUAQmOBmI/zX7KVnoUJAY1PEWGhrltB1efM730r\nHDV0XKHxp4uHE+QHZpGipQ6/ABECt4yBA6X/0oOCaB0q43Ls8KSMZ/NKGk1WtzxU\nKl1X8JXRRwWeYtNSLSO45BZ/SNEHFdrwTPPHJAmJu/Cji20rCLb08RwGGPNcuIOh\nAmJTmfxt7xk9fgvrGBEQ5vnRWYe8AuGcNcUypsjOPDEusEw9ZTAaBT5aqtjRTQ0=\n=d1LG\n-----END PGP SIGNATURE-----\n", "payload": "tree ac67147a69f52329633cd976a57b72929ff34bb6\nparent 416ae3cbd0e54e9aa8e4d4aab650de33651a3124\nparent 9bbdfea23cb14a8e8c68ad3728304a6e7926185e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684864423 +0200\ncommitter GitHub <noreply@github.com> 1684864423 +0200\n\nRollup merge of #111851 - rcvalle:rust-cfi-fix-111515, r=bjorn3\n\nCFI: Fix encode_region: unexpected ReEarlyBound(0, 'a)\n\nFixes #111515 and complements #106547 by adding support for encoding early bound regions and also excluding projections when transforming trait objects' traits into their identities before emitting type checks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b6e5a1d840164f9825b54f7091e781250e6b5b", "html_url": "https://github.com/rust-lang/rust/commit/20b6e5a1d840164f9825b54f7091e781250e6b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b6e5a1d840164f9825b54f7091e781250e6b5b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "416ae3cbd0e54e9aa8e4d4aab650de33651a3124", "url": "https://api.github.com/repos/rust-lang/rust/commits/416ae3cbd0e54e9aa8e4d4aab650de33651a3124", "html_url": "https://github.com/rust-lang/rust/commit/416ae3cbd0e54e9aa8e4d4aab650de33651a3124"}, {"sha": "9bbdfea23cb14a8e8c68ad3728304a6e7926185e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbdfea23cb14a8e8c68ad3728304a6e7926185e", "html_url": "https://github.com/rust-lang/rust/commit/9bbdfea23cb14a8e8c68ad3728304a6e7926185e"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "da8a16dee8ac7abc88c8f7097bc6c262a9ad58de", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20b6e5a1d840164f9825b54f7091e781250e6b5b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b6e5a1d840164f9825b54f7091e781250e6b5b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=20b6e5a1d840164f9825b54f7091e781250e6b5b", "patch": "@@ -272,12 +272,11 @@ fn encode_region<'tcx>(\n             s.push('E');\n             compress(dict, DictKey::Region(region), &mut s);\n         }\n-        RegionKind::ReErased => {\n+        RegionKind::ReEarlyBound(..) | RegionKind::ReErased => {\n             s.push_str(\"u6region\");\n             compress(dict, DictKey::Region(region), &mut s);\n         }\n-        RegionKind::ReEarlyBound(..)\n-        | RegionKind::ReFree(..)\n+        RegionKind::ReFree(..)\n         | RegionKind::ReStatic\n         | RegionKind::ReError(_)\n         | RegionKind::ReVar(..)\n@@ -704,14 +703,15 @@ fn transform_predicates<'tcx>(\n ) -> &'tcx List<ty::PolyExistentialPredicate<'tcx>> {\n     let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> = predicates\n         .iter()\n-        .map(|predicate| match predicate.skip_binder() {\n+        .filter_map(|predicate| match predicate.skip_binder() {\n             ty::ExistentialPredicate::Trait(trait_ref) => {\n                 let trait_ref = ty::TraitRef::identity(tcx, trait_ref.def_id);\n-                ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+                Some(ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n                     ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n-                ))\n+                )))\n             }\n-            _ => predicate,\n+            ty::ExistentialPredicate::Projection(..) => None,\n+            ty::ExistentialPredicate::AutoTrait(..) => Some(predicate),\n         })\n         .collect();\n     tcx.mk_poly_existential_predicates(&predicates)"}, {"sha": "ebb26cd35c09cdc2811ea40f135e4fb438e654bf", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/20b6e5a1d840164f9825b54f7091e781250e6b5b/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b6e5a1d840164f9825b54f7091e781250e6b5b/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs?ref=20b6e5a1d840164f9825b54f7091e781250e6b5b", "patch": "@@ -536,15 +536,15 @@ pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n // CHECK: ![[TYPE93]] = !{i64 0, !\"_ZTSFvPFu3i32S_EE\"}\n // CHECK: ![[TYPE94]] = !{i64 0, !\"_ZTSFvPFu3i32S_ES0_E\"}\n // CHECK: ![[TYPE95]] = !{i64 0, !\"_ZTSFvPFu3i32S_ES0_S0_E\"}\n-// CHECK: ![[TYPE96]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n-// CHECK: ![[TYPE97]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n-// CHECK: ![[TYPE98]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n-// CHECK: ![[TYPE99]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n-// CHECK: ![[TYPE100]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n-// CHECK: ![[TYPE101]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n-// CHECK: ![[TYPE102]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n-// CHECK: ![[TYPE103]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n-// CHECK: ![[TYPE104]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n+// CHECK: ![[TYPE96]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu6regionEEE\"}\n+// CHECK: ![[TYPE97]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu6regionEES3_E\"}\n+// CHECK: ![[TYPE98]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu6regionEES3_S3_E\"}\n+// CHECK: ![[TYPE99]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu6regionEEE\"}\n+// CHECK: ![[TYPE100]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu6regionEES3_E\"}\n+// CHECK: ![[TYPE101]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu6regionEES3_S3_E\"}\n+// CHECK: ![[TYPE102]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu6regionEEE\"}\n+// CHECK: ![[TYPE103]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu6regionEES3_E\"}\n+// CHECK: ![[TYPE104]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu6regionEES3_S3_E\"}\n // CHECK: ![[TYPE105]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEEE\"}\n // CHECK: ![[TYPE106]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEES2_E\"}\n // CHECK: ![[TYPE107]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEES2_S2_E\"}"}, {"sha": "0f79adab7bd6ac8f12d1f0e6321c3e8bb9e33d1a", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-trait-objects.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/20b6e5a1d840164f9825b54f7091e781250e6b5b/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b6e5a1d840164f9825b54f7091e781250e6b5b/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs?ref=20b6e5a1d840164f9825b54f7091e781250e6b5b", "patch": "@@ -39,6 +39,20 @@ impl<T, U> Trait3<U> for T {\n     }\n }\n \n+pub trait Trait4<'a, T> {\n+    type Output: 'a;\n+    fn qux(&self, _: &T) -> Self::Output;\n+}\n+\n+pub struct Type4;\n+\n+impl<'a, T, U> Trait4<'a, U> for T {\n+    type Output = &'a i32;\n+    fn qux(&self, _: &U) -> Self::Output {\n+        &0\n+    }\n+}\n+\n pub fn foo1(a: &dyn Trait1) {\n     a.foo();\n     // CHECK-LABEL: define{{.*}}4foo1{{.*}}!type !{{[0-9]+}}\n@@ -84,6 +98,23 @@ pub fn bar3() {\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE3:[[:print:]]+]]\")\n }\n \n+pub fn foo4<'a>(a: &dyn Trait4<'a, Type4, Output = &'a i32>) {\n+    let b = Type4;\n+    a.qux(&b);\n+    // CHECK-LABEL: define{{.*}}4foo4{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE4:[[:print:]]+]]\")\n+}\n+\n+pub fn bar4<'a>() {\n+    let a = Type4;\n+    foo4(&a);\n+    let b = &a as &dyn Trait4<'a, Type4, Output = &'a i32>;\n+    b.qux(&a);\n+    // CHECK-LABEL: define{{.*}}4bar4{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE4:[[:print:]]+]]\")\n+}\n+\n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE1]]\"}\n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE2]]\"}\n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE3]]\"}\n+// CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE4]]\"}"}, {"sha": "004a67e7df2eefa579962539dedb88c073ac2f85", "filename": "tests/codegen/sanitizer-kcfi-emit-type-metadata-trait-objects.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/20b6e5a1d840164f9825b54f7091e781250e6b5b/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b6e5a1d840164f9825b54f7091e781250e6b5b/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs?ref=20b6e5a1d840164f9825b54f7091e781250e6b5b", "patch": "@@ -63,6 +63,20 @@ impl<T, U> Trait3<U> for T {\n     }\n }\n \n+pub trait Trait4<'a, T> {\n+    type Output: 'a;\n+    fn qux(&self, _: &T) -> Self::Output;\n+}\n+\n+pub struct Type4;\n+\n+impl<'a, T, U> Trait4<'a, U> for T {\n+    type Output = &'a i32;\n+    fn qux(&self, _: &U) -> Self::Output {\n+        &0\n+    }\n+}\n+\n pub fn foo1(a: &dyn Trait1) {\n     a.foo();\n     // CHECK-LABEL: define{{.*}}4foo1{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n@@ -108,6 +122,23 @@ pub fn bar3() {\n     // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type3\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE3:[[:print:]]+]]) ]\n }\n \n+pub fn foo4<'a>(a: &dyn Trait4<'a, Type4, Output = &'a i32>) {\n+    let b = Type4;\n+    a.qux(&b);\n+    // CHECK-LABEL: define{{.*}}4foo4{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call align 4 {{ptr|i32\\*}} %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type4\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE4:[[:print:]]+]]) ]\n+}\n+\n+pub fn bar4<'a>() {\n+    let a = Type4;\n+    foo4(&a);\n+    let b = &a as &dyn Trait4<'a, Type4, Output = &'a i32>;\n+    b.qux(&a);\n+    // CHECK-LABEL: define{{.*}}4bar4{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call align 4 {{ptr|i32\\*}} %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type4\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE4:[[:print:]]+]]) ]\n+}\n+\n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE1]]}\n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE2]]}\n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE3]]}\n+// CHECK: !{{[0-9]+}} = !{i32 [[TYPE4]]}"}]}