{"sha": "2ac6dbc9ba98c68a5362b5493f995291fb413f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzZkYmM5YmE5OGM2OGE1MzYyYjU0OTNmOTk1MjkxZmI0MTNmMjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T02:10:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T07:45:51Z"}, "message": "rustdoc: Refactor markdown_pass", "tree": {"sha": "7c7ffeb38b691276483ac299c9959c7122bd258f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7ffeb38b691276483ac299c9959c7122bd258f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac6dbc9ba98c68a5362b5493f995291fb413f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac6dbc9ba98c68a5362b5493f995291fb413f28", "html_url": "https://github.com/rust-lang/rust/commit/2ac6dbc9ba98c68a5362b5493f995291fb413f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac6dbc9ba98c68a5362b5493f995291fb413f28/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f", "html_url": "https://github.com/rust-lang/rust/commit/2dd5b3ace6562597d7d268eb7a10fc6f1def2d0f"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "d5538689637dfd1596226340c21750eb05c29413", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ac6dbc9ba98c68a5362b5493f995291fb413f28/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac6dbc9ba98c68a5362b5493f995291fb413f28/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=2ac6dbc9ba98c68a5362b5493f995291fb413f28", "patch": "@@ -3,6 +3,7 @@ import std::getopts;\n export output_format::{};\n export output_style::{};\n export config;\n+export default_config;\n export parse_config;\n export usage;\n "}, {"sha": "fdd06f3f9d99dc4dbdaa5fd338e15f73c1ea084b", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2ac6dbc9ba98c68a5362b5493f995291fb413f28/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac6dbc9ba98c68a5362b5493f995291fb413f28/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=2ac6dbc9ba98c68a5362b5493f995291fb413f28", "patch": "@@ -5,40 +5,19 @@ import std::io::writer_util;\n \n export mk_pass;\n \n+fn mk_pass(config: config::config) -> pass {\n+    mk_pass_(config, {|f| f(std::io::stdout()) })\n+}\n+\n // FIXME: This is a really convoluted interface to work around trying\n // to get a writer into a unique closure and then being able to test\n // what was written afterward\n-fn mk_pass(\n+fn mk_pass_(\n+    config: config::config,\n     give_writer: fn~(fn(io::writer))\n ) -> pass {\n-    let f = fn~(\n-        srv: astsrv::srv,\n-        doc: doc::cratedoc\n-    ) -> doc::cratedoc {\n-\n-        fn mods_last(item1: doc::itemtag, item2: doc::itemtag) -> bool {\n-            fn is_mod(item: doc::itemtag) -> bool {\n-                alt item {\n-                  doc::modtag(_) { true }\n-                  _ { false }\n-                }\n-            }\n-\n-            let lteq = !is_mod(item1) || is_mod(item2);\n-            lteq\n-        }\n-\n-        give_writer {|writer|\n-            // Sort the items so mods come last. All mods will be\n-            // output at the same header level so sorting mods last\n-            // makes the headers come out nested correctly.\n-            let sorted_doc = sort_pass::mk_pass(\n-                \"mods last\", mods_last\n-            ).f(srv, doc);\n-\n-            write_markdown(sorted_doc, writer);\n-        }\n-        doc\n+    let f = fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+        run(srv, doc, config, give_writer)\n     };\n \n     {\n@@ -47,6 +26,38 @@ fn mk_pass(\n     }\n }\n \n+fn run(\n+    srv: astsrv::srv,\n+    doc: doc::cratedoc,\n+    _config: config::config,\n+    give_writer: fn~(fn(io::writer))\n+) -> doc::cratedoc {\n+\n+    fn mods_last(item1: doc::itemtag, item2: doc::itemtag) -> bool {\n+        fn is_mod(item: doc::itemtag) -> bool {\n+            alt item {\n+              doc::modtag(_) { true }\n+              _ { false }\n+            }\n+        }\n+\n+        let lteq = !is_mod(item1) || is_mod(item2);\n+        lteq\n+    }\n+\n+    give_writer {|writer|\n+        // Sort the items so mods come last. All mods will be\n+        // output at the same header level so sorting mods last\n+        // makes the headers come out nested correctly.\n+        let sorted_doc = sort_pass::mk_pass(\n+            \"mods last\", mods_last\n+        ).f(srv, doc);\n+\n+        write_markdown(sorted_doc, writer);\n+    }\n+    doc\n+}\n+\n #[test]\n fn should_write_modules_last() {\n     /*\n@@ -858,7 +869,7 @@ mod test {\n         let port = comm::port();\n         let chan = comm::chan(port);\n \n-        let pass = mk_pass {|f|\n+        let pass = mk_pass_(config::default_config(\"\")) {|f|\n             let buffer = io::mk_mem_buffer();\n             let writer = io::mem_buffer_writer(buffer);\n             f(writer);"}, {"sha": "ae450fbac4c721a9e3aa9491b361a0ca102356f7", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ac6dbc9ba98c68a5362b5493f995291fb413f28/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac6dbc9ba98c68a5362b5493f995291fb413f28/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=2ac6dbc9ba98c68a5362b5493f995291fb413f28", "patch": "@@ -108,7 +108,7 @@ fn main(args: [str]) {\n       }\n     };\n \n-    run(config.input_crate);\n+    run(config);\n }\n \n fn time<T>(what: str, f: fn() -> T) -> T {\n@@ -120,14 +120,15 @@ fn time<T>(what: str, f: fn() -> T) -> T {\n }\n \n #[doc = \"Runs rustdoc over the given file\"]\n-fn run(source_file: str) {\n+fn run(config: config::config) {\n \n-    let default_name = source_file;\n+    let source_file = config.input_crate;\n     astsrv::from_file(source_file) {|srv|\n         time(\"wait_ast\") {||\n             astsrv::exec(srv) {|_ctxt| () }\n         };\n         let doc = time(\"extract\") {||\n+            let default_name = source_file;\n             extract::from_srv(srv, default_name)\n         };\n         run_passes(srv, doc, [\n@@ -144,7 +145,7 @@ fn run(source_file: str) {\n             unindent_pass::mk_pass(),\n             sort_item_name_pass::mk_pass(),\n             sort_item_type_pass::mk_pass(),\n-            markdown_pass::mk_pass {|f| f(std::io:: stdout()) }\n+            markdown_pass::mk_pass(config)\n         ]);\n     }\n }\n\\ No newline at end of file"}]}