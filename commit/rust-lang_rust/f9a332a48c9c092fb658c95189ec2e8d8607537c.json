{"sha": "f9a332a48c9c092fb658c95189ec2e8d8607537c", "node_id": "C_kwDOAAsO6NoAKGY5YTMzMmE0OGM5YzA5MmZiNjU4Yzk1MTg5ZWMyZThkODYwNzUzN2M", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T19:24:47Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T20:39:16Z"}, "message": "Simplify creation of `AutoBorrowMutability`", "tree": {"sha": "fae1bfc3f8163729684f673b28bfd426076655d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae1bfc3f8163729684f673b28bfd426076655d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a332a48c9c092fb658c95189ec2e8d8607537c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a332a48c9c092fb658c95189ec2e8d8607537c", "html_url": "https://github.com/rust-lang/rust/commit/f9a332a48c9c092fb658c95189ec2e8d8607537c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a332a48c9c092fb658c95189ec2e8d8607537c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6486ba94a349cff9f07f14781c995ce2fb3de94f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6486ba94a349cff9f07f14781c995ce2fb3de94f", "html_url": "https://github.com/rust-lang/rust/commit/6486ba94a349cff9f07f14781c995ce2fb3de94f"}], "stats": {"total": 82, "additions": 34, "deletions": 48}, "files": [{"sha": "befc0732d0e69b3e1efca2d68d5dbd78bd7ce165", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=f9a332a48c9c092fb658c95189ec2e8d8607537c", "patch": "@@ -258,15 +258,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         return None;\n                     };\n \n-                    let mutbl = match mutbl {\n-                        hir::Mutability::Not => AutoBorrowMutability::Not,\n-                        hir::Mutability::Mut => AutoBorrowMutability::Mut {\n-                            // For initial two-phase borrow\n-                            // deployment, conservatively omit\n-                            // overloaded function call ops.\n-                            allow_two_phase_borrow: AllowTwoPhase::No,\n-                        },\n-                    };\n+                    // For initial two-phase borrow\n+                    // deployment, conservatively omit\n+                    // overloaded function call ops.\n+                    let mutbl = AutoBorrowMutability::new(*mutbl, AllowTwoPhase::No);\n+\n                     autoref = Some(Adjustment {\n                         kind: Adjust::Borrow(AutoBorrow::Ref(*region, mutbl)),\n                         target: method.sig.inputs()[0],"}, {"sha": "7098583908b3556a9c560a3f5930980fda91fa12", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=f9a332a48c9c092fb658c95189ec2e8d8607537c", "patch": "@@ -478,12 +478,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let ty::Ref(r_borrow, _, _) = ty.kind() else {\n             span_bug!(span, \"expected a ref type, got {:?}\", ty);\n         };\n-        let mutbl = match mutbl_b {\n-            hir::Mutability::Not => AutoBorrowMutability::Not,\n-            hir::Mutability::Mut => {\n-                AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }\n-            }\n-        };\n+        let mutbl = AutoBorrowMutability::new(mutbl_b, self.allow_two_phase);\n         adjustments.push(Adjustment {\n             kind: Adjust::Borrow(AutoBorrow::Ref(*r_borrow, mutbl)),\n             target: ty,\n@@ -552,15 +547,12 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 let coercion = Coercion(self.cause.span);\n                 let r_borrow = self.next_region_var(coercion);\n-                let mutbl = match mutbl_b {\n-                    hir::Mutability::Not => AutoBorrowMutability::Not,\n-                    hir::Mutability::Mut => AutoBorrowMutability::Mut {\n-                        // We don't allow two-phase borrows here, at least for initial\n-                        // implementation. If it happens that this coercion is a function argument,\n-                        // the reborrow in coerce_borrowed_ptr will pick it up.\n-                        allow_two_phase_borrow: AllowTwoPhase::No,\n-                    },\n-                };\n+\n+                // We don't allow two-phase borrows here, at least for initial\n+                // implementation. If it happens that this coercion is a function argument,\n+                // the reborrow in coerce_borrowed_ptr will pick it up.\n+                let mutbl = AutoBorrowMutability::new(mutbl_b, AllowTwoPhase::No);\n+\n                 Some((\n                     Adjustment { kind: Adjust::Deref(None), target: ty_a },\n                     Adjustment {"}, {"sha": "b8928305b7c7024495a310618b00545d4e374317", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=f9a332a48c9c092fb658c95189ec2e8d8607537c", "patch": "@@ -170,14 +170,11 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 let base_ty = target;\n \n                 target = self.tcx.mk_ref(region, ty::TypeAndMut { mutbl, ty: target });\n-                let mutbl = match mutbl {\n-                    hir::Mutability::Not => AutoBorrowMutability::Not,\n-                    hir::Mutability::Mut => AutoBorrowMutability::Mut {\n-                        // Method call receivers are the primary use case\n-                        // for two-phase borrows.\n-                        allow_two_phase_borrow: AllowTwoPhase::Yes,\n-                    },\n-                };\n+\n+                // Method call receivers are the primary use case\n+                // for two-phase borrows.\n+                let mutbl = AutoBorrowMutability::new(mutbl, AllowTwoPhase::Yes);\n+\n                 adjustments.push(Adjustment {\n                     kind: Adjust::Borrow(AutoBorrow::Ref(region, mutbl)),\n                     target,"}, {"sha": "b12d84af4adbca81f0e04f1b7e36e092c70a872f", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=f9a332a48c9c092fb658c95189ec2e8d8607537c", "patch": "@@ -263,14 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let by_ref_binop = !op.node.is_by_value();\n                 if is_assign == IsAssign::Yes || by_ref_binop {\n                     if let ty::Ref(region, _, mutbl) = method.sig.inputs()[0].kind() {\n-                        let mutbl = match mutbl {\n-                            hir::Mutability::Not => AutoBorrowMutability::Not,\n-                            hir::Mutability::Mut => AutoBorrowMutability::Mut {\n-                                // Allow two-phase borrows for binops in initial deployment\n-                                // since they desugar to methods\n-                                allow_two_phase_borrow: AllowTwoPhase::Yes,\n-                            },\n-                        };\n+                        let mutbl = AutoBorrowMutability::new(*mutbl, AllowTwoPhase::Yes);\n                         let autoref = Adjustment {\n                             kind: Adjust::Borrow(AutoBorrow::Ref(*region, mutbl)),\n                             target: method.sig.inputs()[0],\n@@ -280,14 +273,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 if by_ref_binop {\n                     if let ty::Ref(region, _, mutbl) = method.sig.inputs()[1].kind() {\n-                        let mutbl = match mutbl {\n-                            hir::Mutability::Not => AutoBorrowMutability::Not,\n-                            hir::Mutability::Mut => AutoBorrowMutability::Mut {\n-                                // Allow two-phase borrows for binops in initial deployment\n-                                // since they desugar to methods\n-                                allow_two_phase_borrow: AllowTwoPhase::Yes,\n-                            },\n-                        };\n+                        // Allow two-phase borrows for binops in initial deployment\n+                        // since they desugar to methods\n+                        let mutbl = AutoBorrowMutability::new(*mutbl, AllowTwoPhase::Yes);\n+\n                         let autoref = Adjustment {\n                             kind: Adjust::Borrow(AutoBorrow::Ref(*region, mutbl)),\n                             target: method.sig.inputs()[1],"}, {"sha": "7036c4a7b27d60b8da7772a1e575c33297736d4d", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a332a48c9c092fb658c95189ec2e8d8607537c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=f9a332a48c9c092fb658c95189ec2e8d8607537c", "patch": "@@ -159,6 +159,18 @@ pub enum AutoBorrowMutability {\n     Not,\n }\n \n+impl AutoBorrowMutability {\n+    /// Creates an `AutoBorrowMutability` from a mutability and allowance of two phase borrows.\n+    ///\n+    /// Note that when `mutbl.is_not()`, `allow_two_phase_borrow` is ignored\n+    pub fn new(mutbl: hir::Mutability, allow_two_phase_borrow: AllowTwoPhase) -> Self {\n+        match mutbl {\n+            hir::Mutability::Not => Self::Not,\n+            hir::Mutability::Mut => Self::Mut { allow_two_phase_borrow },\n+        }\n+    }\n+}\n+\n impl From<AutoBorrowMutability> for hir::Mutability {\n     fn from(m: AutoBorrowMutability) -> Self {\n         match m {"}]}