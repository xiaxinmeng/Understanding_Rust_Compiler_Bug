{"sha": "a28ee25483d92b7924752651d9c751ae2c4f2c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOGVlMjU0ODNkOTJiNzkyNDc1MjY1MWQ5Yzc1MWFlMmM0ZjJjMzQ=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-30T16:46:43Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-31T02:42:11Z"}, "message": "Add more tests to cover more corner cases of type-checking.", "tree": {"sha": "b085c9f7256de7093c2f783227009e91e8d182d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b085c9f7256de7093c2f783227009e91e8d182d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a28ee25483d92b7924752651d9c751ae2c4f2c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a28ee25483d92b7924752651d9c751ae2c4f2c34", "html_url": "https://github.com/rust-lang/rust/commit/a28ee25483d92b7924752651d9c751ae2c4f2c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a28ee25483d92b7924752651d9c751ae2c4f2c34/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb4e0a097238c309220d97d1a62350bafd953083", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4e0a097238c309220d97d1a62350bafd953083", "html_url": "https://github.com/rust-lang/rust/commit/fb4e0a097238c309220d97d1a62350bafd953083"}], "stats": {"total": 342, "additions": 342, "deletions": 0}, "files": [{"sha": "1a0e5072843fe2ac0cd9f362127035f5d589744d", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,33 @@\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+trait Foo: Bar<i32> + Bar<u32> {}\n+trait Bar<T> {\n+    fn bar(&self) -> Option<T> {\n+        None\n+    }\n+}\n+\n+fn test_specific(x: &dyn Foo) {\n+    let _ = x as &dyn Bar<i32>; // FIXME: OK, eventually\n+                                //~^ ERROR non-primitive cast\n+                                //~^^ ERROR the trait bound `&dyn Foo: Bar<i32>` is not satisfied\n+    let _ = x as &dyn Bar<u32>; // FIXME: OK, eventually\n+                                //~^ ERROR non-primitive cast\n+                                //~^^ ERROR the trait bound `&dyn Foo: Bar<u32>` is not satisfied\n+}\n+\n+fn test_unknown_version(x: &dyn Foo) {\n+    let _ = x as &dyn Bar<_>; // Ambiguous\n+                              //~^ ERROR non-primitive cast\n+                              //~^^ ERROR the trait bound `&dyn Foo: Bar<_>` is not satisfied\n+}\n+\n+fn test_infer_version(x: &dyn Foo) {\n+    let a = x as &dyn Bar<_>; // FIXME: OK, eventually\n+                              //~^ ERROR non-primitive cast\n+                              //~^^ ERROR the trait bound `&dyn Foo: Bar<u32>` is not satisfied\n+    let _: Option<u32> = a.bar();\n+}\n+\n+fn main() {}"}, {"sha": "6aaa8a4a90437947272c6a97a8cdea1f40b431c2", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,80 @@\n+error[E0605]: non-primitive cast: `&dyn Foo` as `&dyn Bar<i32>`\n+  --> $DIR/type-checking-test-1.rs:12:13\n+   |\n+LL |     let _ = x as &dyn Bar<i32>; // FIXME: OK, eventually\n+   |             ^^^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &x as &dyn Bar<i32>; // FIXME: OK, eventually\n+   |             ^\n+\n+error[E0605]: non-primitive cast: `&dyn Foo` as `&dyn Bar<u32>`\n+  --> $DIR/type-checking-test-1.rs:15:13\n+   |\n+LL |     let _ = x as &dyn Bar<u32>; // FIXME: OK, eventually\n+   |             ^^^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &x as &dyn Bar<u32>; // FIXME: OK, eventually\n+   |             ^\n+\n+error[E0277]: the trait bound `&dyn Foo: Bar<i32>` is not satisfied\n+  --> $DIR/type-checking-test-1.rs:12:13\n+   |\n+LL |     let _ = x as &dyn Bar<i32>; // FIXME: OK, eventually\n+   |             ^ the trait `Bar<i32>` is not implemented for `&dyn Foo`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<i32>`\n+\n+error[E0277]: the trait bound `&dyn Foo: Bar<u32>` is not satisfied\n+  --> $DIR/type-checking-test-1.rs:15:13\n+   |\n+LL |     let _ = x as &dyn Bar<u32>; // FIXME: OK, eventually\n+   |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<u32>`\n+\n+error[E0605]: non-primitive cast: `&dyn Foo` as `&dyn Bar<_>`\n+  --> $DIR/type-checking-test-1.rs:21:13\n+   |\n+LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n+   |             ^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &x as &dyn Bar<_>; // Ambiguous\n+   |             ^\n+\n+error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n+  --> $DIR/type-checking-test-1.rs:21:13\n+   |\n+LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n+   |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<_>`\n+\n+error[E0605]: non-primitive cast: `&dyn Foo` as `&dyn Bar<u32>`\n+  --> $DIR/type-checking-test-1.rs:27:13\n+   |\n+LL |     let a = x as &dyn Bar<_>; // FIXME: OK, eventually\n+   |             ^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let a = &x as &dyn Bar<_>; // FIXME: OK, eventually\n+   |             ^\n+\n+error[E0277]: the trait bound `&dyn Foo: Bar<u32>` is not satisfied\n+  --> $DIR/type-checking-test-1.rs:27:13\n+   |\n+LL |     let a = x as &dyn Bar<_>; // FIXME: OK, eventually\n+   |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<u32>`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0277, E0605.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "326df74211eff9b0992a8d97aab62e912ae8f8d8", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,34 @@\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<T>: Bar<i32> + Bar<T> {}\n+trait Bar<T> {\n+    fn bar(&self) -> Option<T> {\n+        None\n+    }\n+}\n+\n+fn test_specific(x: &dyn Foo<i32>) {\n+    let _ = x as &dyn Bar<i32>; // OK\n+}\n+\n+fn test_specific2(x: &dyn Foo<u32>) {\n+    let _ = x as &dyn Bar<i32>; // FIXME: OK, eventually\n+                                //~^ ERROR non-primitive cast\n+                                //~^^ ERROR the trait bound `&dyn Foo<u32>: Bar<i32>` is not satisfied\n+}\n+\n+fn test_specific3(x: &dyn Foo<i32>) {\n+    let _ = x as &dyn Bar<u32>; // Error\n+                                //~^ ERROR non-primitive cast\n+                                //~^^ ERROR the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n+}\n+\n+fn test_infer_arg(x: &dyn Foo<u32>) {\n+    let a = x as &dyn Bar<_>; // Ambiguous\n+                              //~^ ERROR non-primitive cast\n+                              //~^^ ERROR the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n+    let _ = a.bar();\n+}\n+\n+fn main() {}"}, {"sha": "a38f8a146043ef45d5beaa9615bc18ba3bad18cf", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,61 @@\n+error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<i32>`\n+  --> $DIR/type-checking-test-2.rs:16:13\n+   |\n+LL |     let _ = x as &dyn Bar<i32>; // FIXME: OK, eventually\n+   |             ^^^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &x as &dyn Bar<i32>; // FIXME: OK, eventually\n+   |             ^\n+\n+error[E0277]: the trait bound `&dyn Foo<u32>: Bar<i32>` is not satisfied\n+  --> $DIR/type-checking-test-2.rs:16:13\n+   |\n+LL |     let _ = x as &dyn Bar<i32>; // FIXME: OK, eventually\n+   |             ^ the trait `Bar<i32>` is not implemented for `&dyn Foo<u32>`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<i32>`\n+\n+error[E0605]: non-primitive cast: `&dyn Foo<i32>` as `&dyn Bar<u32>`\n+  --> $DIR/type-checking-test-2.rs:22:13\n+   |\n+LL |     let _ = x as &dyn Bar<u32>; // Error\n+   |             ^^^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &x as &dyn Bar<u32>; // Error\n+   |             ^\n+\n+error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n+  --> $DIR/type-checking-test-2.rs:22:13\n+   |\n+LL |     let _ = x as &dyn Bar<u32>; // Error\n+   |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<u32>`\n+\n+error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n+  --> $DIR/type-checking-test-2.rs:28:13\n+   |\n+LL |     let a = x as &dyn Bar<_>; // Ambiguous\n+   |             ^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let a = &x as &dyn Bar<_>; // Ambiguous\n+   |             ^\n+\n+error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n+  --> $DIR/type-checking-test-2.rs:28:13\n+   |\n+LL |     let a = x as &dyn Bar<_>; // Ambiguous\n+   |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`\n+   |\n+   = note: required for the cast to the object type `dyn Bar<_>`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0277, E0605.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "49c24e404dc6e68333c853147dec8d0d3ee05275", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,22 @@\n+// ignore-compare-mode-nll\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<'a>: Bar<'a> {}\n+trait Bar<'a> {}\n+\n+fn test_correct(x: &dyn Foo<'static>) {\n+    let _ = x as &dyn Bar<'static>;\n+}\n+\n+fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+    let _ = x as &dyn Bar<'a>; // Error\n+                               //~^ ERROR mismatched types\n+}\n+\n+fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n+    let _ = x as &dyn Bar<'static>; // Error\n+                                    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "593ee0a34300ac5833fdd2404161785900055a28", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-checking-test-3.rs:13:13\n+   |\n+LL |     let _ = x as &dyn Bar<'a>; // Error\n+   |             ^ lifetime mismatch\n+   |\n+   = note: expected trait object `dyn Bar<'a>`\n+              found trait object `dyn Bar<'static>`\n+note: the lifetime `'a` as defined on the function body at 12:16...\n+  --> $DIR/type-checking-test-3.rs:12:16\n+   |\n+LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-checking-test-3.rs:18:13\n+   |\n+LL |     let _ = x as &dyn Bar<'static>; // Error\n+   |             ^ lifetime mismatch\n+   |\n+   = note: expected trait object `dyn Bar<'static>`\n+              found trait object `dyn Bar<'a>`\n+note: the lifetime `'a` as defined on the function body at 17:16...\n+  --> $DIR/type-checking-test-3.rs:17:16\n+   |\n+LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9b27fd46f7acd980e8d1cdbd6fab2aa6d5251156", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,32 @@\n+// ignore-compare-mode-nll\n+#![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<'a>: Bar<'a, 'a> {}\n+trait Bar<'a, 'b> {\n+    fn get_b(&self) -> Option<&'a u32> {\n+        None\n+    }\n+}\n+\n+fn test_correct(x: &dyn Foo<'static>) {\n+    let _ = x as &dyn Bar<'static, 'static>;\n+}\n+\n+fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+    let _ = x as &dyn Bar<'static, 'a>; // Error\n+                                        //~^ ERROR mismatched types\n+}\n+\n+fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+    let _ = x as &dyn Bar<'a, 'static>; // Error\n+                                        //~^ ERROR mismatched types\n+}\n+\n+fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    let y = x as &dyn Bar<'_, '_>;\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+    y.get_b() // ERROR\n+}\n+\n+fn main() {}"}, {"sha": "811e524eda78b9f349949b57d129e21f78807188", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28ee25483d92b7924752651d9c751ae2c4f2c34/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=a28ee25483d92b7924752651d9c751ae2c4f2c34", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-checking-test-4.rs:17:13\n+   |\n+LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n+   |             ^ lifetime mismatch\n+   |\n+   = note: expected trait object `dyn Bar<'static, 'a>`\n+              found trait object `dyn Bar<'static, 'static>`\n+note: the lifetime `'a` as defined on the function body at 16:16...\n+  --> $DIR/type-checking-test-4.rs:16:16\n+   |\n+LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-checking-test-4.rs:22:13\n+   |\n+LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n+   |             ^ lifetime mismatch\n+   |\n+   = note: expected trait object `dyn Bar<'a, 'static>`\n+              found trait object `dyn Bar<'static, 'static>`\n+note: the lifetime `'a` as defined on the function body at 21:16...\n+  --> $DIR/type-checking-test-4.rs:21:16\n+   |\n+LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:27:27\n+   |\n+LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     let y = x as &dyn Bar<'_, '_>;\n+   |             -             ^^\n+   |             |\n+   |             ...is captured here...\n+LL |\n+LL |     y.get_b() // ERROR\n+   |     --------- ...and is required to live as long as `'static` here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0759.\n+For more information about an error, try `rustc --explain E0308`."}]}