{"sha": "186db76159c57f4af442d8aa5e7c1a330ee0004b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NmRiNzYxNTljNTdmNGFmNDQyZDhhYTVlN2MxYTMzMGVlMDAwNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T03:57:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T03:57:22Z"}, "message": "Auto merge of #49664 - alexcrichton:stable-simd, r=BurntSushi\n\nStabilize x86/x86_64 SIMD\n\nThis commit stabilizes the SIMD in Rust for the x86/x86_64 platforms. Notably\nthis commit is stabilizing:\n\n* The `std::arch::{x86, x86_64}` modules and the intrinsics contained inside.\n* The `is_x86_feature_detected!` macro in the standard library\n* The `#[target_feature(enable = \"...\")]` attribute\n* The `#[cfg(target_feature = \"...\")]` matcher\n\nStabilization of the module and intrinsics were primarily done in\nrust-lang-nursery/stdsimd#414 and the two attribute stabilizations are done in\nthis commit. The standard library is also tweaked a bit with the new way that\nstdsimd is integrated.\n\nNote that other architectures like `std::arch::arm` are not stabilized as part\nof this commit, they will likely stabilize in the future after they've been\nimplemented and fleshed out. Similarly the `std::simd` module is also not being\nstabilized in this commit, only `std::arch`. Finally, nothing related to `__m64`\nis stabilized in this commit either (MMX), only SSE and up types and intrinsics\nare stabilized.\n\nCloses #29717\nCloses #44839\nCloses #48556", "tree": {"sha": "83a1c14f92519e4bd4748cf4d7bc4ebc982aac28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83a1c14f92519e4bd4748cf4d7bc4ebc982aac28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186db76159c57f4af442d8aa5e7c1a330ee0004b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186db76159c57f4af442d8aa5e7c1a330ee0004b", "html_url": "https://github.com/rust-lang/rust/commit/186db76159c57f4af442d8aa5e7c1a330ee0004b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186db76159c57f4af442d8aa5e7c1a330ee0004b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94516c5038b1203988a3be1d7912d08a6db86202", "url": "https://api.github.com/repos/rust-lang/rust/commits/94516c5038b1203988a3be1d7912d08a6db86202", "html_url": "https://github.com/rust-lang/rust/commit/94516c5038b1203988a3be1d7912d08a6db86202"}, {"sha": "1217d70465edb2079880347fea4baaac56895f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/1217d70465edb2079880347fea4baaac56895f51", "html_url": "https://github.com/rust-lang/rust/commit/1217d70465edb2079880347fea4baaac56895f51"}], "stats": {"total": 409, "additions": 243, "deletions": 166}, "files": [{"sha": "ea7a46f44ae0f31cb16fa752bcd80debde88afb1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -68,7 +68,6 @@\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n #![feature(attr_literals)]\n-#![feature(cfg_target_feature)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n@@ -96,11 +95,21 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]\n-#![feature(target_feature)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n \n+#![cfg_attr(not(stage0), feature(mmx_target_feature))]\n+#![cfg_attr(not(stage0), feature(tbm_target_feature))]\n+#![cfg_attr(not(stage0), feature(sse4a_target_feature))]\n+#![cfg_attr(not(stage0), feature(arm_target_feature))]\n+#![cfg_attr(not(stage0), feature(powerpc_target_feature))]\n+#![cfg_attr(not(stage0), feature(mips_target_feature))]\n+#![cfg_attr(not(stage0), feature(aarch64_target_feature))]\n+\n+#![cfg_attr(stage0, feature(target_feature))]\n+#![cfg_attr(stage0, feature(cfg_target_feature))]\n+\n #[prelude_import]\n #[allow(unused)]\n use prelude::v1::*;\n@@ -204,6 +213,20 @@ mod unit;\n // things like SIMD and such. Note that the actual source for all this lies in a\n // different repository, rust-lang-nursery/stdsimd. That's why the setup here is\n // a bit wonky.\n+#[allow(unused_macros)]\n+macro_rules! test_v16 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v32 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v64 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v128 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v256 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! test_v512 { ($item:item) => {}; }\n+#[allow(unused_macros)]\n+macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n #[path = \"../stdsimd/coresimd/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n@@ -213,6 +236,6 @@ mod coresimd;\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(not(stage0))]\n pub use coresimd::simd;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n #[cfg(not(stage0))]\n pub use coresimd::arch;"}, {"sha": "2325b1893d996f85a6df0ff90e6662c23f898a14", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -437,7 +437,7 @@ define_maps! { <'tcx>\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n \n     [] fn target_features_whitelist:\n-        target_features_whitelist_node(CrateNum) -> Lrc<FxHashSet<String>>,\n+        target_features_whitelist_node(CrateNum) -> Lrc<FxHashMap<String, Option<String>>>,\n \n     // Get an estimate of the size of an InstanceDef based on its MIR for CGU partitioning.\n     [] fn instance_def_size_estimate: instance_def_size_estimate_dep_node(ty::InstanceDef<'tcx>)"}, {"sha": "eb5c7396ae055606df48efe378bafe04fc417ba7", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -174,12 +174,12 @@ pub fn provide(providers: &mut Providers) {\n             // rustdoc needs to be able to document functions that use all the features, so\n             // whitelist them all\n             Lrc::new(llvm_util::all_known_features()\n-                .map(|c| c.to_string())\n+                .map(|(a, b)| (a.to_string(), b.map(|s| s.to_string())))\n                 .collect())\n         } else {\n             Lrc::new(llvm_util::target_feature_whitelist(tcx.sess)\n                 .iter()\n-                .map(|c| c.to_string())\n+                .map(|&(a, b)| (a.to_string(), b.map(|s| s.to_string())))\n                 .collect())\n         }\n     };"}, {"sha": "bbd1c39a19e0eb95d534cd4cda6e0cebc9d0f7ec", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 94, "deletions": 29, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -15,6 +15,7 @@ use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n use libc::c_int;\n use std::ffi::CString;\n+use syntax::feature_gate::UnstableFeatures;\n \n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::Once;\n@@ -82,40 +83,95 @@ unsafe fn configure_llvm(sess: &Session) {\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n \n-const ARM_WHITELIST: &'static [&'static str] = &[\"neon\", \"v7\", \"vfp2\", \"vfp3\", \"vfp4\"];\n-\n-const AARCH64_WHITELIST: &'static [&'static str] = &[\"fp\", \"neon\", \"sve\", \"crc\", \"crypto\",\n-                                                     \"ras\", \"lse\", \"rdm\", \"fp16\", \"rcpc\",\n-                                                     \"dotprod\", \"v8.1a\", \"v8.2a\", \"v8.3a\"];\n-\n-const X86_WHITELIST: &'static [&'static str] = &[\"aes\", \"avx\", \"avx2\", \"avx512bw\",\n-                                                 \"avx512cd\", \"avx512dq\", \"avx512er\",\n-                                                 \"avx512f\", \"avx512ifma\", \"avx512pf\",\n-                                                 \"avx512vbmi\", \"avx512vl\", \"avx512vpopcntdq\",\n-                                                 \"bmi1\", \"bmi2\", \"fma\", \"fxsr\",\n-                                                 \"lzcnt\", \"mmx\", \"pclmulqdq\",\n-                                                 \"popcnt\", \"rdrand\", \"rdseed\",\n-                                                 \"sha\",\n-                                                 \"sse\", \"sse2\", \"sse3\", \"sse4.1\",\n-                                                 \"sse4.2\", \"sse4a\", \"ssse3\",\n-                                                 \"tbm\", \"xsave\", \"xsavec\",\n-                                                 \"xsaveopt\", \"xsaves\"];\n-\n-const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\", \"hvx-double\"];\n-\n-const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\",\n-                                                     \"power8-altivec\", \"power9-altivec\",\n-                                                     \"power8-vector\", \"power9-vector\",\n-                                                     \"vsx\"];\n-\n-const MIPS_WHITELIST: &'static [&'static str] = &[\"fp64\", \"msa\"];\n+const ARM_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"neon\", Some(\"arm_target_feature\")),\n+    (\"v7\", Some(\"arm_target_feature\")),\n+    (\"vfp2\", Some(\"arm_target_feature\")),\n+    (\"vfp3\", Some(\"arm_target_feature\")),\n+    (\"vfp4\", Some(\"arm_target_feature\")),\n+];\n+\n+const AARCH64_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"fp\", Some(\"aarch64_target_feature\")),\n+    (\"neon\", Some(\"aarch64_target_feature\")),\n+    (\"sve\", Some(\"aarch64_target_feature\")),\n+    (\"crc\", Some(\"aarch64_target_feature\")),\n+    (\"crypto\", Some(\"aarch64_target_feature\")),\n+    (\"ras\", Some(\"aarch64_target_feature\")),\n+    (\"lse\", Some(\"aarch64_target_feature\")),\n+    (\"rdm\", Some(\"aarch64_target_feature\")),\n+    (\"fp16\", Some(\"aarch64_target_feature\")),\n+    (\"rcpc\", Some(\"aarch64_target_feature\")),\n+    (\"dotprod\", Some(\"aarch64_target_feature\")),\n+    (\"v8.1a\", Some(\"aarch64_target_feature\")),\n+    (\"v8.2a\", Some(\"aarch64_target_feature\")),\n+    (\"v8.3a\", Some(\"aarch64_target_feature\")),\n+];\n+\n+const X86_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"aes\", None),\n+    (\"avx\", None),\n+    (\"avx2\", None),\n+    (\"avx512bw\", Some(\"avx512_target_feature\")),\n+    (\"avx512cd\", Some(\"avx512_target_feature\")),\n+    (\"avx512dq\", Some(\"avx512_target_feature\")),\n+    (\"avx512er\", Some(\"avx512_target_feature\")),\n+    (\"avx512f\", Some(\"avx512_target_feature\")),\n+    (\"avx512ifma\", Some(\"avx512_target_feature\")),\n+    (\"avx512pf\", Some(\"avx512_target_feature\")),\n+    (\"avx512vbmi\", Some(\"avx512_target_feature\")),\n+    (\"avx512vl\", Some(\"avx512_target_feature\")),\n+    (\"avx512vpopcntdq\", Some(\"avx512_target_feature\")),\n+    (\"bmi1\", None),\n+    (\"bmi2\", None),\n+    (\"fma\", None),\n+    (\"fxsr\", None),\n+    (\"lzcnt\", None),\n+    (\"mmx\", Some(\"mmx_target_feature\")),\n+    (\"pclmulqdq\", None),\n+    (\"popcnt\", None),\n+    (\"rdrand\", None),\n+    (\"rdseed\", None),\n+    (\"sha\", None),\n+    (\"sse\", None),\n+    (\"sse2\", None),\n+    (\"sse3\", None),\n+    (\"sse4.1\", None),\n+    (\"sse4.2\", None),\n+    (\"sse4a\", Some(\"sse4a_target_feature\")),\n+    (\"ssse3\", None),\n+    (\"tbm\", Some(\"tbm_target_feature\")),\n+    (\"xsave\", None),\n+    (\"xsavec\", None),\n+    (\"xsaveopt\", None),\n+    (\"xsaves\", None),\n+];\n+\n+const HEXAGON_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"hvx\", Some(\"hexagon_target_feature\")),\n+    (\"hvx-double\", Some(\"hexagon_target_feature\")),\n+];\n+\n+const POWERPC_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"altivec\", Some(\"powerpc_target_feature\")),\n+    (\"power8-altivec\", Some(\"powerpc_target_feature\")),\n+    (\"power9-altivec\", Some(\"powerpc_target_feature\")),\n+    (\"power8-vector\", Some(\"powerpc_target_feature\")),\n+    (\"power9-vector\", Some(\"powerpc_target_feature\")),\n+    (\"vsx\", Some(\"powerpc_target_feature\")),\n+];\n+\n+const MIPS_WHITELIST: &[(&str, Option<&str>)] = &[\n+    (\"fp64\", Some(\"mips_target_feature\")),\n+    (\"msa\", Some(\"mips_target_feature\")),\n+];\n \n /// When rustdoc is running, provide a list of all known features so that all their respective\n /// primtives may be documented.\n ///\n /// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n /// iterator!\n-pub fn all_known_features() -> impl Iterator<Item=&'static str> {\n+pub fn all_known_features() -> impl Iterator<Item=(&'static str, Option<&'static str>)> {\n     ARM_WHITELIST.iter().cloned()\n         .chain(AARCH64_WHITELIST.iter().cloned())\n         .chain(X86_WHITELIST.iter().cloned())\n@@ -144,6 +200,13 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_target_machine(sess, true);\n     target_feature_whitelist(sess)\n         .iter()\n+        .filter_map(|&(feature, gate)| {\n+            if UnstableFeatures::from_environment().is_nightly_build() || gate.is_none() {\n+                Some(feature)\n+            } else {\n+                None\n+            }\n+        })\n         .filter(|feature| {\n             let llvm_feature = to_llvm_feature(sess, feature);\n             let cstr = CString::new(llvm_feature).unwrap();\n@@ -152,7 +215,9 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n         .map(|feature| Symbol::intern(feature)).collect()\n }\n \n-pub fn target_feature_whitelist(sess: &Session) -> &'static [&'static str] {\n+pub fn target_feature_whitelist(sess: &Session)\n+    -> &'static [(&'static str, Option<&'static str>)]\n+{\n     match &*sess.target.target.arch {\n         \"arm\" => ARM_WHITELIST,\n         \"aarch64\" => AARCH64_WHITELIST,"}, {"sha": "b7895631c6092dc75cfa2d9ce18cd9c4d0342e42", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -44,7 +44,7 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_back::target::Target;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::monomorphize::collector;\n use link::{build_link_meta, out_filename};\n \n@@ -203,7 +203,7 @@ impl TransCrate for MetadataOnlyTransCrate {\n         ::symbol_names::provide(providers);\n \n         providers.target_features_whitelist = |_tcx, _cnum| {\n-            Lrc::new(FxHashSet()) // Just a dummy\n+            Lrc::new(FxHashMap()) // Just a dummy\n         };\n     }\n     fn provide_extern(&self, _providers: &mut Providers) {}"}, {"sha": "d9e5ac7f7c57195db886ee31e73af2f94260e032", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 54, "deletions": 33, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -37,13 +37,14 @@ use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::util::Discr;\n use rustc::util::captures::Captures;\n-use rustc::util::nodemap::{FxHashSet, FxHashMap};\n+use rustc::util::nodemap::FxHashMap;\n \n use syntax::{abi, ast};\n use syntax::ast::MetaItemKind;\n use syntax::attr::{InlineAttr, list_contains_name, mark_used};\n use syntax::codemap::Spanned;\n use syntax::symbol::{Symbol, keywords};\n+use syntax::feature_gate;\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir::{self, map as hir_map, TransFnAttrs, TransFnAttrFlags, Unsafety};\n@@ -1682,7 +1683,7 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn from_target_feature(\n     tcx: TyCtxt,\n     attr: &ast::Attribute,\n-    whitelist: &FxHashSet<String>,\n+    whitelist: &FxHashMap<String, Option<String>>,\n     target_features: &mut Vec<Symbol>,\n ) {\n     let list = match attr.meta_item_list() {\n@@ -1694,41 +1695,75 @@ fn from_target_feature(\n             return\n         }\n     };\n-\n+    let rust_features = tcx.features();\n     for item in list {\n+        // Only `enable = ...` is accepted in the meta item list\n         if !item.check_name(\"enable\") {\n             let msg = \"#[target_feature(..)] only accepts sub-keys of `enable` \\\n                        currently\";\n             tcx.sess.span_err(item.span, &msg);\n             continue\n         }\n+\n+        // Must be of the form `enable = \"...\"` ( a string)\n         let value = match item.value_str() {\n-            Some(list) => list,\n+            Some(value) => value,\n             None => {\n                 let msg = \"#[target_feature] attribute must be of the form \\\n                            #[target_feature(enable = \\\"..\\\")]\";\n                 tcx.sess.span_err(item.span, &msg);\n                 continue\n             }\n         };\n-        let value = value.as_str();\n-        for feature in value.split(',') {\n-            if whitelist.contains(feature) {\n-                target_features.push(Symbol::intern(feature));\n-                continue\n-            }\n-\n-            let msg = format!(\"the feature named `{}` is not valid for \\\n-                               this target\", feature);\n-            let mut err = tcx.sess.struct_span_err(item.span, &msg);\n \n-            if feature.starts_with(\"+\") {\n-                let valid = whitelist.contains(&feature[1..]);\n-                if valid {\n-                    err.help(\"consider removing the leading `+` in the feature name\");\n+        // We allow comma separation to enable multiple features\n+        for feature in value.as_str().split(',') {\n+\n+            // Only allow whitelisted features per platform\n+            let feature_gate = match whitelist.get(feature) {\n+                Some(g) => g,\n+                None => {\n+                    let msg = format!(\"the feature named `{}` is not valid for \\\n+                                       this target\", feature);\n+                    let mut err = tcx.sess.struct_span_err(item.span, &msg);\n+\n+                    if feature.starts_with(\"+\") {\n+                        let valid = whitelist.contains_key(&feature[1..]);\n+                        if valid {\n+                            err.help(\"consider removing the leading `+` in the feature name\");\n+                        }\n+                    }\n+                    err.emit();\n+                    continue\n                 }\n+            };\n+\n+            // Only allow features whose feature gates have been enabled\n+            let allowed = match feature_gate.as_ref().map(|s| &**s) {\n+                Some(\"arm_target_feature\") => rust_features.arm_target_feature,\n+                Some(\"aarch64_target_feature\") => rust_features.aarch64_target_feature,\n+                Some(\"hexagon_target_feature\") => rust_features.hexagon_target_feature,\n+                Some(\"powerpc_target_feature\") => rust_features.powerpc_target_feature,\n+                Some(\"mips_target_feature\") => rust_features.mips_target_feature,\n+                Some(\"avx512_target_feature\") => rust_features.avx512_target_feature,\n+                Some(\"mmx_target_feature\") => rust_features.mmx_target_feature,\n+                Some(\"sse4a_target_feature\") => rust_features.sse4a_target_feature,\n+                Some(\"tbm_target_feature\") => rust_features.tbm_target_feature,\n+                Some(name) => bug!(\"unknown target feature gate {}\", name),\n+                None => true,\n+            };\n+            if !allowed {\n+                feature_gate::emit_feature_err(\n+                    &tcx.sess.parse_sess,\n+                    feature_gate.as_ref().unwrap(),\n+                    item.span,\n+                    feature_gate::GateIssue::Language,\n+                    &format!(\"the target feature `{}` is currently unstable\",\n+                             feature),\n+                );\n+                continue\n             }\n-            err.emit();\n+            target_features.push(Symbol::intern(feature));\n         }\n     }\n }\n@@ -1835,20 +1870,6 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n                     .emit();\n             }\n         } else if attr.check_name(\"target_feature\") {\n-            // handle deprecated #[target_feature = \"...\"]\n-            if let Some(val) = attr.value_str() {\n-                for feat in val.as_str().split(\",\").map(|f| f.trim()) {\n-                    if !feat.is_empty() && !feat.contains('\\0') {\n-                        trans_fn_attrs.target_features.push(Symbol::intern(feat));\n-                    }\n-                }\n-                let msg = \"#[target_feature = \\\"..\\\"] is deprecated and will \\\n-                           eventually be removed, use \\\n-                           #[target_feature(enable = \\\"..\\\")] instead\";\n-                tcx.sess.span_warn(attr.span, &msg);\n-                continue\n-            }\n-\n             if tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n                 let msg = \"#[target_feature(..)] can only be applied to \\\n                            `unsafe` function\";"}, {"sha": "2745ea74a1651baa37b9a219d11ceba185cdf168", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -526,7 +526,7 @@ mod coresimd {\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(all(not(stage0), not(test)))]\n pub use stdsimd::simd;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n #[cfg(all(not(stage0), not(test)))]\n pub use stdsimd::arch;\n "}, {"sha": "7b7cfe5eea00b72a945a70e0f560de5084e4aa01", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -231,9 +231,6 @@ declare_features! (\n     // allow `repr(simd)`, and importing the various simd intrinsics\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n-    // Allows cfg(target_feature = \"...\").\n-    (active, cfg_target_feature, \"1.4.0\", Some(29717), None),\n-\n     // allow `extern \"platform-intrinsic\" { ... }`\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n@@ -293,9 +290,6 @@ declare_features! (\n \n     (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n \n-    // Allows #[target_feature(...)]\n-    (active, target_feature, \"1.15.0\", None, None),\n-\n     // `extern \"ptx-*\" fn()`\n     (active, abi_ptx, \"1.15.0\", None, None),\n \n@@ -446,6 +440,17 @@ declare_features! (\n \n     // Allows macro invocations in `extern {}` blocks\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n+\n+    // unstable #[target_feature] directives\n+    (active, arm_target_feature, \"1.27.0\", None, None),\n+    (active, aarch64_target_feature, \"1.27.0\", None, None),\n+    (active, hexagon_target_feature, \"1.27.0\", None, None),\n+    (active, powerpc_target_feature, \"1.27.0\", None, None),\n+    (active, mips_target_feature, \"1.27.0\", None, None),\n+    (active, avx512_target_feature, \"1.27.0\", None, None),\n+    (active, mmx_target_feature, \"1.27.0\", None, None),\n+    (active, sse4a_target_feature, \"1.27.0\", None, None),\n+    (active, tbm_target_feature, \"1.27.0\", None, None),\n );\n \n declare_features! (\n@@ -568,6 +573,10 @@ declare_features! (\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n     (accepted, generic_param_attrs, \"1.26.0\", Some(48848), None),\n+    // Allows cfg(target_feature = \"...\").\n+    (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n+    // Allows #[target_feature(...)]\n+    (accepted, target_feature, \"1.27.0\", None, None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -912,10 +921,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n                                  cfg_fn!(naked_functions))),\n-    (\"target_feature\", Whitelisted, Gated(\n-        Stability::Unstable, \"target_feature\",\n-        \"the `#[target_feature]` attribute is an experimental feature\",\n-        cfg_fn!(target_feature))),\n+    (\"target_feature\", Normal, Ungated),\n     (\"export_name\", Whitelisted, Ungated),\n     (\"inline\", Whitelisted, Ungated),\n     (\"link\", Whitelisted, Ungated),\n@@ -1046,7 +1052,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n // cfg(...)'s that are feature gated\n const GATED_CFGS: &[(&str, &str, fn(&Features) -> bool)] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n-    (\"target_feature\", \"cfg_target_feature\", cfg_fn!(cfg_target_feature)),\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(cfg_target_vendor)),\n     (\"target_thread_local\", \"cfg_target_thread_local\", cfg_fn!(cfg_target_thread_local)),\n     (\"target_has_atomic\", \"cfg_target_has_atomic\", cfg_fn!(cfg_target_has_atomic)),"}, {"sha": "effdcd0132d17b6c4badc67b4b6d3fdf749a2d22", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -1 +1 @@\n-Subproject commit bcb720e55861c38db47f2ebdf26b7198338cb39d\n+Subproject commit effdcd0132d17b6c4badc67b4b6d3fdf749a2d22"}, {"sha": "139da046452646b77c1193c8f18691b3ae084a6d", "filename": "src/test/run-pass/simd-target-feature-mixup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -11,6 +11,7 @@\n // ignore-emscripten\n \n #![feature(repr_simd, target_feature, cfg_target_feature)]\n+#![feature(avx512_target_feature)]\n \n use std::process::{Command, ExitStatus};\n use std::env;"}, {"sha": "7832e1c7c51520e7978b491b2bad1426d52f65c2", "filename": "src/test/ui/feature-gate-cfg-target-feature.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs?ref=94516c5038b1203988a3be1d7912d08a6db86202", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[cfg(target_feature = \"x\")] //~ ERROR `cfg(target_feature)` is experimental\n-#[cfg_attr(target_feature = \"x\", x)] //~ ERROR `cfg(target_feature)` is experimental\n-struct Foo(u64, u64);\n-\n-#[cfg(not(any(all(target_feature = \"x\"))))] //~ ERROR `cfg(target_feature)` is experimental\n-fn foo() {}\n-\n-fn main() {\n-    cfg!(target_feature = \"x\");\n-    //~^ ERROR `cfg(target_feature)` is experimental and subject to change\n-}"}, {"sha": "bf9e596e71a7401f98dbaf6428c5667bf74d13ef", "filename": "src/test/ui/feature-gate-cfg-target-feature.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr?ref=94516c5038b1203988a3be1d7912d08a6db86202", "patch": "@@ -1,35 +0,0 @@\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:12:12\n-   |\n-LL | #[cfg_attr(target_feature = \"x\", x)] //~ ERROR `cfg(target_feature)` is experimental\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:11:7\n-   |\n-LL | #[cfg(target_feature = \"x\")] //~ ERROR `cfg(target_feature)` is experimental\n-   |       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:15:19\n-   |\n-LL | #[cfg(not(any(all(target_feature = \"x\"))))] //~ ERROR `cfg(target_feature)` is experimental\n-   |                   ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n-  --> $DIR/feature-gate-cfg-target-feature.rs:19:10\n-   |\n-LL |     cfg!(target_feature = \"x\");\n-   |          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "da2e41a0f5e422347b8643fa42b683f2f517a25b", "filename": "src/test/ui/feature-gate-target_feature.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs?ref=94516c5038b1203988a3be1d7912d08a6db86202", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[target_feature = \"+sse2\"]\n-//~^ the `#[target_feature]` attribute is an experimental feature\n-fn foo() {}"}, {"sha": "0f31abf7b42c8a561b17872dd5d3f1137c4582c2", "filename": "src/test/ui/feature-gate-target_feature.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94516c5038b1203988a3be1d7912d08a6db86202/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr?ref=94516c5038b1203988a3be1d7912d08a6db86202", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: the `#[target_feature]` attribute is an experimental feature\n-  --> $DIR/feature-gate-target_feature.rs:11:1\n-   |\n-LL | #[target_feature = \"+sse2\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(target_feature)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "69208f151360b2e45ccaef5c467ed40771c93c92", "filename": "src/test/ui/target-feature-gate.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-arm\n+// ignore-aarch64\n+// ignore-wasm\n+// ignore-emscripten\n+// gate-test-sse4a_target_feature\n+// gate-test-powerpc_target_feature\n+// gate-test-avx512_target_feature\n+// gate-test-tbm_target_feature\n+// gate-test-arm_target_feature\n+// gate-test-aarch64_target_feature\n+// gate-test-hexagon_target_feature\n+// gate-test-mips_target_feature\n+// gate-test-mmx_target_feature\n+// min-llvm-version 6.0\n+\n+#[target_feature(enable = \"avx512bw\")]\n+//~^ ERROR: currently unstable\n+unsafe fn foo() {\n+}\n+\n+fn main() {}"}, {"sha": "dc5e174984ba0d22ab9b6c0a9bc853b5cfbf22ab", "filename": "src/test/ui/target-feature-gate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: the target feature `avx512bw` is currently unstable\n+  --> $DIR/target-feature-gate.rs:26:18\n+   |\n+LL | #[target_feature(enable = \"avx512bw\")]\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(avx512_target_feature)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0edd51ba779ac4eb0009a15ac3f3aa3a58f654fb", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -19,7 +19,7 @@\n #![feature(target_feature)]\n \n #[target_feature = \"+sse2\"]\n-//~^ WARN: deprecated\n+//~^ ERROR: must be of the form\n #[target_feature(enable = \"foo\")]\n //~^ ERROR: not valid for this target\n #[target_feature(bar)]"}, {"sha": "ed86687bb2fccbec23171b60c6a03989041a6a84", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/186db76159c57f4af442d8aa5e7c1a330ee0004b/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=186db76159c57f4af442d8aa5e7c1a330ee0004b", "patch": "@@ -1,4 +1,4 @@\n-warning: #[target_feature = \"..\"] is deprecated and will eventually be removed, use #[target_feature(enable = \"..\")] instead\n+error: #[target_feature] attribute must be of the form #[target_feature(..)]\n   --> $DIR/target-feature-wrong.rs:21:1\n    |\n LL | #[target_feature = \"+sse2\"]\n@@ -43,5 +43,5 @@ error: cannot use #[inline(always)] with #[target_feature]\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}]}