{"sha": "23c03e499492b6d56c7c15f2868035005067ae21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzAzZTQ5OTQ5MmI2ZDU2YzdjMTVmMjg2ODAzNTAwNTA2N2FlMjE=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-08T00:59:17Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-08T01:19:56Z"}, "message": "Move `transmute_float_to_int` test cases into separate file\n\n`transmute.stderr` file line count exceeded due to the new test\ncases so moving the new test cases into a separate file.", "tree": {"sha": "9057c4ed964352440d5d413d9885747e9e318a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9057c4ed964352440d5d413d9885747e9e318a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c03e499492b6d56c7c15f2868035005067ae21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c03e499492b6d56c7c15f2868035005067ae21", "html_url": "https://github.com/rust-lang/rust/commit/23c03e499492b6d56c7c15f2868035005067ae21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c03e499492b6d56c7c15f2868035005067ae21/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c77fc06d5218d1e5d757fa82eab130e688924f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77fc06d5218d1e5d757fa82eab130e688924f50", "html_url": "https://github.com/rust-lang/rust/commit/c77fc06d5218d1e5d757fa82eab130e688924f50"}], "stats": {"total": 118, "additions": 61, "deletions": 57}, "files": [{"sha": "4f0c2f5a895cbf76a685205a4fddea933d990b83", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=23c03e499492b6d56c7c15f2868035005067ae21", "patch": "@@ -126,16 +126,6 @@ fn int_to_float() {\n     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n }\n \n-#[warn(clippy::transmute_float_to_int)]\n-fn float_to_int() {\n-    let _: u32 = unsafe { std::mem::transmute(1f32) };\n-    let _: i32 = unsafe { std::mem::transmute(1f32) };\n-    let _: u64 = unsafe { std::mem::transmute(1f64) };\n-    let _: i64 = unsafe { std::mem::transmute(1f64) };\n-    let _: u64 = unsafe { std::mem::transmute(1.0) };\n-    let _: u64 = unsafe { std::mem::transmute(-1.0) };\n-}\n-\n fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &str = unsafe { std::mem::transmute(b) };\n     let _: &mut str = unsafe { std::mem::transmute(mb) };"}, {"sha": "f73d72f20bb3fc750922cc999c1c843d4de811f3", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=23c03e499492b6d56c7c15f2868035005067ae21", "patch": "@@ -190,95 +190,57 @@ error: transmute from a `i32` to a `f32`\n LL |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n-error: transmute from a `f32` to a `u32`\n-  --> $DIR/transmute.rs:131:27\n-   |\n-LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n-   |\n-   = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n-\n-error: transmute from a `f32` to a `i32`\n-  --> $DIR/transmute.rs:132:27\n-   |\n-LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n-\n-error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute.rs:133:27\n-   |\n-LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n-\n-error: transmute from a `f64` to a `i64`\n-  --> $DIR/transmute.rs:134:27\n-   |\n-LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n-\n-error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute.rs:135:27\n-   |\n-LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n-\n-error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute.rs:136:27\n-   |\n-LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`\n-\n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:140:28\n+  --> $DIR/transmute.rs:130:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:141:32\n+  --> $DIR/transmute.rs:131:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmute.rs:173:29\n+  --> $DIR/transmute.rs:163:29\n    |\n LL |         let _: *const f32 = std::mem::transmute(ptr);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n    |\n    = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmute.rs:174:27\n+  --> $DIR/transmute.rs:164:27\n    |\n LL |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:176:23\n+  --> $DIR/transmute.rs:166:23\n    |\n LL |         let _: &f32 = std::mem::transmute(&1u32);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:177:23\n+  --> $DIR/transmute.rs:167:23\n    |\n LL |         let _: &f64 = std::mem::transmute(&1f32);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:180:27\n+  --> $DIR/transmute.rs:170:27\n    |\n LL |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:181:37\n+  --> $DIR/transmute.rs:171:37\n    |\n LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 38 previous errors\n "}, {"sha": "ce942751ada82cee06778cf4599528b3073e5397", "filename": "tests/ui/transmute_float_to_int.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.rs?ref=23c03e499492b6d56c7c15f2868035005067ae21", "patch": "@@ -0,0 +1,12 @@\n+#[warn(clippy::transmute_float_to_int)]\n+\n+fn float_to_int() {\n+    let _: u32 = unsafe { std::mem::transmute(1f32) };\n+    let _: i32 = unsafe { std::mem::transmute(1f32) };\n+    let _: u64 = unsafe { std::mem::transmute(1f64) };\n+    let _: i64 = unsafe { std::mem::transmute(1f64) };\n+    let _: u64 = unsafe { std::mem::transmute(1.0) };\n+    let _: u64 = unsafe { std::mem::transmute(-1.0) };\n+}\n+\n+fn main() {}"}, {"sha": "eb786bb39f95aa5c1f7110d053acf78cd96b340b", "filename": "tests/ui/transmute_float_to_int.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute_float_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23c03e499492b6d56c7c15f2868035005067ae21/tests%2Fui%2Ftransmute_float_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.stderr?ref=23c03e499492b6d56c7c15f2868035005067ae21", "patch": "@@ -0,0 +1,40 @@\n+error: transmute from a `f32` to a `u32`\n+  --> $DIR/transmute_float_to_int.rs:4:27\n+   |\n+LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n+   |\n+   = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n+\n+error: transmute from a `f32` to a `i32`\n+  --> $DIR/transmute_float_to_int.rs:5:27\n+   |\n+LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute_float_to_int.rs:6:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n+\n+error: transmute from a `f64` to a `i64`\n+  --> $DIR/transmute_float_to_int.rs:7:27\n+   |\n+LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute_float_to_int.rs:8:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute_float_to_int.rs:9:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`\n+\n+error: aborting due to 6 previous errors\n+"}]}