{"sha": "7d09dba7283f136ab7e4a25b9eb855fc36553a65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDlkYmE3MjgzZjEzNmFiN2U0YTI1YjllYjg1NWZjMzY1NTNhNjU=", "commit": {"author": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-26T19:08:14Z"}, "committer": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-28T10:06:20Z"}, "message": "added methods src_root and location to External crate, remove extern_location function", "tree": {"sha": "be0648411565a4d07c5b4b274fcabba498964a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be0648411565a4d07c5b4b274fcabba498964a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d09dba7283f136ab7e4a25b9eb855fc36553a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d09dba7283f136ab7e4a25b9eb855fc36553a65", "html_url": "https://github.com/rust-lang/rust/commit/7d09dba7283f136ab7e4a25b9eb855fc36553a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d09dba7283f136ab7e4a25b9eb855fc36553a65/comments", "author": null, "committer": null, "parents": [{"sha": "855c2d130fb70da1643cf8f696c7aad7537aef34", "url": "https://api.github.com/repos/rust-lang/rust/commits/855c2d130fb70da1643cf8f696c7aad7537aef34", "html_url": "https://github.com/rust-lang/rust/commit/855c2d130fb70da1643cf8f696c7aad7537aef34"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "ceacb4a4f81bcb04f628078622d7ef6252a647a8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7d09dba7283f136ab7e4a25b9eb855fc36553a65/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d09dba7283f136ab7e4a25b9eb855fc36553a65/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7d09dba7283f136ab7e4a25b9eb855fc36553a65", "patch": "@@ -4,6 +4,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::lazy::SyncOnceCell as OnceCell;\n+use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n@@ -90,6 +91,57 @@ impl ExternalCrate {\n         tcx.crate_name(self.crate_num)\n     }\n \n+    crate fn src_root(&self, tcx: TyCtxt<'_>) -> PathBuf {\n+        match self.src(tcx) {\n+            FileName::Real(ref p) => match p.local_path().parent() {\n+                Some(p) => p.to_path_buf(),\n+                None => PathBuf::new(),\n+            },\n+            _ => PathBuf::new(),\n+        }\n+    }\n+\n+    /// Attempts to find where an external crate is located, given that we're\n+    /// rendering in to the specified source destination.\n+    crate fn location(\n+        &self,\n+        extern_url: Option<&str>,\n+        ast_attrs: &[ast::Attribute],\n+        dst: &std::path::Path,\n+        tcx: TyCtxt<'_>,\n+    ) -> ExternalLocation {\n+        use ExternalLocation::*;\n+        // See if there's documentation generated into the local directory\n+        let local_location = dst.join(&*self.name(tcx).as_str());\n+        if local_location.is_dir() {\n+            return Local;\n+        }\n+\n+        if let Some(url) = extern_url {\n+            let mut url = url.to_string();\n+            if !url.ends_with('/') {\n+                url.push('/');\n+            }\n+            return Remote(url);\n+        }\n+\n+        // Failing that, see if there's an attribute specifying where to find this\n+        // external crate\n+        ast_attrs\n+            .lists(sym::doc)\n+            .filter(|a| a.has_name(sym::html_root_url))\n+            .filter_map(|a| a.value_str())\n+            .map(|url| {\n+                let mut url = url.to_string();\n+                if !url.ends_with('/') {\n+                    url.push('/')\n+                }\n+                Remote(url)\n+            })\n+            .next()\n+            .unwrap_or(Unknown) // Well, at least we tried.\n+    }\n+\n     crate fn keywords(&self, tcx: TyCtxt<'_>) -> ThinVec<(DefId, Symbol)> {\n         let root = self.def_id();\n "}, {"sha": "64deee96a3564fc0d879ef1a338925df8501a2fd", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d09dba7283f136ab7e4a25b9eb855fc36553a65/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d09dba7283f136ab7e4a25b9eb855fc36553a65/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=7d09dba7283f136ab7e4a25b9eb855fc36553a65", "patch": "@@ -6,7 +6,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::source_map::FileName;\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n \n@@ -15,7 +14,7 @@ use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n use crate::html::markdown::short_markdown_summary;\n-use crate::html::render::cache::{extern_location, get_index_search_type, ExternalLocation};\n+use crate::html::render::cache::{get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n \n /// This cache is used to store information about the [`clean::Crate`] being\n@@ -155,21 +154,13 @@ impl Cache {\n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n         for &(n, ref e) in &krate.externs {\n-            let src_root = match e.src(tcx) {\n-                FileName::Real(ref p) => match p.local_path().parent() {\n-                    Some(p) => p.to_path_buf(),\n-                    None => PathBuf::new(),\n-                },\n-                _ => PathBuf::new(),\n-            };\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n             self.extern_locations.insert(\n                 n,\n-                (name, src_root, extern_location(e, extern_url, tcx.get_attrs(did), &dst, tcx)),\n+                (name, e.src_root(tcx), e.location(extern_url, tcx.get_attrs(did), &dst, tcx)),\n             );\n-\n             self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n         }\n "}, {"sha": "27a8065afb6d2e1c1c2961f26c945a4af98b463d", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7d09dba7283f136ab7e4a25b9eb855fc36553a65/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d09dba7283f136ab7e4a25b9eb855fc36553a65/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=7d09dba7283f136ab7e4a25b9eb855fc36553a65", "patch": "@@ -1,15 +1,13 @@\n use std::collections::BTreeMap;\n-use std::path::Path;\n \n-use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n use crate::clean::types::{\n-    AttributesExt, FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n+    FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, WherePredicate,\n };\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -26,47 +24,6 @@ crate enum ExternalLocation {\n     Unknown,\n }\n \n-/// Attempts to find where an external crate is located, given that we're\n-/// rendering in to the specified source destination.\n-crate fn extern_location(\n-    e: &clean::ExternalCrate,\n-    extern_url: Option<&str>,\n-    ast_attrs: &[ast::Attribute],\n-    dst: &Path,\n-    tcx: TyCtxt<'_>,\n-) -> ExternalLocation {\n-    use ExternalLocation::*;\n-    // See if there's documentation generated into the local directory\n-    let local_location = dst.join(&*e.name(tcx).as_str());\n-    if local_location.is_dir() {\n-        return Local;\n-    }\n-\n-    if let Some(url) = extern_url {\n-        let mut url = url.to_string();\n-        if !url.ends_with('/') {\n-            url.push('/');\n-        }\n-        return Remote(url);\n-    }\n-\n-    // Failing that, see if there's an attribute specifying where to find this\n-    // external crate\n-    ast_attrs\n-        .lists(sym::doc)\n-        .filter(|a| a.has_name(sym::html_root_url))\n-        .filter_map(|a| a.value_str())\n-        .map(|url| {\n-            let mut url = url.to_string();\n-            if !url.ends_with('/') {\n-                url.push('/')\n-            }\n-            Remote(url)\n-        })\n-        .next()\n-        .unwrap_or(Unknown) // Well, at least we tried.\n-}\n-\n /// Builds the search index from the collected metadata\n crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<'tcx>) -> String {\n     let mut defid_to_pathid = FxHashMap::default();"}]}