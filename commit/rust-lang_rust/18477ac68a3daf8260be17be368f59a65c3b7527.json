{"sha": "18477ac68a3daf8260be17be368f59a65c3b7527", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDc3YWM2OGEzZGFmODI2MGJlMTdiZTM2OGY1OWE2NWMzYjc1Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-14T14:11:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-14T14:11:43Z"}, "message": "auto merge of #12234 : sfackler/rust/restructure-item-decorator, r=huonw\n\nThe old method of building up a list of items and threading it through\r\nall of the decorators was unwieldy and not really scalable as\r\nnon-deriving ItemDecorators become possible. The API is now that the\r\ndecorator gets an immutable reference to the item it's attached to, and\r\na callback that it can pass new items to. If we want to add syntax\r\nextensions that can modify the item they're attached to, we can add that\r\nlater, but I think it'll have to be separate from ItemDecorator to avoid\r\nstrange ordering issues.\r\n\r\n@huonw", "tree": {"sha": "7952b94baefe1aa1e545dde8c1ce202255c360ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7952b94baefe1aa1e545dde8c1ce202255c360ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18477ac68a3daf8260be17be368f59a65c3b7527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18477ac68a3daf8260be17be368f59a65c3b7527", "html_url": "https://github.com/rust-lang/rust/commit/18477ac68a3daf8260be17be368f59a65c3b7527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18477ac68a3daf8260be17be368f59a65c3b7527/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40b5374055086df88727925872f0733843f9d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40b5374055086df88727925872f0733843f9d2e", "html_url": "https://github.com/rust-lang/rust/commit/d40b5374055086df88727925872f0733843f9d2e"}, {"sha": "3c02749ad873af24c5865e105bd1e6ded1b71409", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c02749ad873af24c5865e105bd1e6ded1b71409", "html_url": "https://github.com/rust-lang/rust/commit/3c02749ad873af24c5865e105bd1e6ded1b71409"}], "stats": {"total": 150, "additions": 76, "deletions": 74}, "files": [{"sha": "3dac82ae3b77f5e6ef0b57ebad59dde4cfbac2b4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -35,7 +35,7 @@ pub struct MacroDef {\n }\n \n pub type ItemDecorator =\n-    fn(&mut ExtCtxt, Span, @ast::MetaItem, ~[@ast::Item]) -> ~[@ast::Item];\n+    fn(&mut ExtCtxt, Span, @ast::MetaItem, @ast::Item, |@ast::Item|);\n \n pub struct BasicMacroExpander {\n     expander: MacroExpanderFn,"}, {"sha": "bd961002f5311b7f669a615298e46107571ab728", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -17,8 +17,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: @MetaItem,\n-                             in_items: ~[@Item])\n-                          -> ~[@Item] {\n+                             item: @Item,\n+                             push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"clone\", \"Clone\"]),\n@@ -38,14 +38,14 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n pub fn expand_deriving_deep_clone(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: @MetaItem,\n-                                  in_items: ~[@Item])\n-    -> ~[@Item] {\n+                                  item: @Item,\n+                                  push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"clone\", \"DeepClone\"]),\n@@ -67,7 +67,7 @@ pub fn expand_deriving_deep_clone(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn cs_clone("}, {"sha": "6592dc97f348eb3dbf6e5daaa8805cf77ab64f9c", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -17,7 +17,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,\n                           mitem: @MetaItem,\n-                          in_items: ~[@Item]) -> ~[@Item] {\n+                          item: @Item,\n+                          push: |@Item|) {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n@@ -54,5 +55,5 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n             md!(\"ne\", cs_ne)\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "c41986fceef64ad546b3a72e8cda6ebc4c27f6fa", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -18,7 +18,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,\n                            mitem: @MetaItem,\n-                           in_items: ~[@Item]) -> ~[@Item] {\n+                           item: @Item,\n+                           push: |@Item|) {\n     macro_rules! md (\n         ($name:expr, $op:expr, $equal:expr) => {\n             MethodDef {\n@@ -46,7 +47,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n             md!(\"ge\", false, true)\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n /// Strict inequality."}, {"sha": "63e13b492020dc32506a994e62ee133257a3dd6f", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -17,7 +17,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                                span: Span,\n                                mitem: @MetaItem,\n-                               in_items: ~[@Item]) -> ~[@Item] {\n+                               item: @Item,\n+                               push: |@Item|) {\n     fn cs_equals(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_and(|cx, span, _, _| cx.expr_bool(span, false),\n                cx, span, substr)\n@@ -41,5 +42,5 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n             }\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "3e58d2edb29603e5763c53f3d02897e1627908b2", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -19,7 +19,8 @@ use std::cmp::{Ordering, Equal, Less, Greater};\n pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                                 span: Span,\n                                 mitem: @MetaItem,\n-                                in_items: ~[@Item]) -> ~[@Item] {\n+                                item: @Item,\n+                                push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"cmp\", \"TotalOrd\"]),\n@@ -39,7 +40,7 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n "}, {"sha": "8b20813e344063cfc5c86d679918bf0de2b83cc1", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -24,7 +24,8 @@ use parse::token;\n pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: @MetaItem,\n-                                 in_items: ~[@Item]) -> ~[@Item] {\n+                                 item: @Item,\n+                                 push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new_(~[\"serialize\", \"Decodable\"], None,\n@@ -49,7 +50,7 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,"}, {"sha": "7ed27168bb60612632e65ebc25e0c510265d3f81", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -17,8 +17,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n-                            in_items: ~[@Item])\n-                               -> ~[@Item] {\n+                            item: @Item,\n+                            push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"default\", \"Default\"]),\n@@ -37,7 +37,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n             },\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {"}, {"sha": "468cb1544a25de7c36617c7c744df080f2c8a16d", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -85,7 +85,8 @@ use parse::token;\n pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: @MetaItem,\n-                                 in_items: ~[@Item]) -> ~[@Item] {\n+                                 item: @Item,\n+                                 push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new_(~[\"serialize\", \"Encodable\"], None,\n@@ -110,7 +111,7 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,"}, {"sha": "3db07b05e527db69f81a5c5d11e2cfb10c15bb64", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -322,27 +322,23 @@ impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n                   _mitem: @ast::MetaItem,\n-                  in_items: ~[@ast::Item]) -> ~[@ast::Item] {\n-        let mut result = ~[];\n-        for item in in_items.iter() {\n-            result.push(*item);\n-            match item.node {\n-                ast::ItemStruct(struct_def, ref generics) => {\n-                    result.push(self.expand_struct_def(cx,\n-                                                       struct_def,\n-                                                       item.ident,\n-                                                       generics));\n-                }\n-                ast::ItemEnum(ref enum_def, ref generics) => {\n-                    result.push(self.expand_enum_def(cx,\n-                                                     enum_def,\n-                                                     item.ident,\n-                                                     generics));\n-                }\n-                _ => ()\n+                  item: @ast::Item,\n+                  push: |@ast::Item|) {\n+        match item.node {\n+            ast::ItemStruct(struct_def, ref generics) => {\n+                push(self.expand_struct_def(cx,\n+                                            struct_def,\n+                                            item.ident,\n+                                            generics));\n+            }\n+            ast::ItemEnum(ref enum_def, ref generics) => {\n+                push(self.expand_enum_def(cx,\n+                                          enum_def,\n+                                          item.ident,\n+                                          generics));\n             }\n+            _ => ()\n         }\n-        result\n     }\n \n     /**"}, {"sha": "b1adf96b90af8957a4aa5ae41f86e59d0ce36a5d", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -18,7 +18,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_iter_bytes(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: @MetaItem,\n-                                  in_items: ~[@Item]) -> ~[@Item] {\n+                                  item: @Item,\n+                                  push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"to_bytes\", \"IterBytes\"]),\n@@ -41,7 +42,7 @@ pub fn expand_deriving_iter_bytes(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn iter_bytes_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {"}, {"sha": "62408d79ee31e077d2cbca3793fa5e0558b86950", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -48,25 +48,24 @@ pub mod generic;\n pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             _span: Span,\n                             mitem: @MetaItem,\n-                            in_items: ~[@Item])\n-                         -> ~[@Item] {\n+                            item: @Item,\n+                            push: |@Item|) {\n     match mitem.node {\n         MetaNameValue(_, ref l) => {\n             cx.span_err(l.span, \"unexpected value in `deriving`\");\n-            in_items\n         }\n         MetaWord(_) | MetaList(_, []) => {\n             cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n-            in_items\n         }\n         MetaList(_, ref titems) => {\n-            titems.rev_iter().fold(in_items, |in_items, &titem| {\n+            for &titem in titems.rev_iter() {\n                 match titem.node {\n                     MetaNameValue(ref tname, _) |\n                     MetaList(ref tname, _) |\n                     MetaWord(ref tname) => {\n                         macro_rules! expand(($func:path) => ($func(cx, titem.span,\n-                                                                   titem, in_items)));\n+                                                                   titem, item,\n+                                                                   |i| push(i))));\n                         match tname.get() {\n                             \"Clone\" => expand!(clone::expand_deriving_clone),\n                             \"DeepClone\" => expand!(clone::expand_deriving_deep_clone),\n@@ -94,12 +93,11 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             ref tname => {\n                                 cx.span_err(titem.span, format!(\"unknown \\\n                                     `deriving` trait: `{}`\", *tname));\n-                                in_items\n                             }\n-                        }\n+                        };\n                     }\n                 }\n-            })\n+            }\n         }\n     }\n }"}, {"sha": "9391c9cd23c7400e912eacdef606baff32a4fa71", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -19,7 +19,8 @@ use parse::token::InternedString;\n pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       span: Span,\n                                       mitem: @MetaItem,\n-                                      in_items: ~[@Item]) -> ~[@Item] {\n+                                      item: @Item,\n+                                      push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"num\", \"FromPrimitive\"]),\n@@ -61,7 +62,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n         ]\n     };\n \n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {"}, {"sha": "351264fed72af051efd51dafe1c7624715323a7c", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -19,8 +19,8 @@ use opt_vec;\n pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n-                            in_items: ~[@Item])\n-                            -> ~[@Item] {\n+                            item: @Item,\n+                            push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"rand\", \"Rand\"]),\n@@ -46,7 +46,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n             }\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {"}, {"sha": "83d327daf17dcca4adb253e707a427ce75696b94", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -23,8 +23,8 @@ use std::hashmap::HashMap;\n pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n-                            in_items: ~[@Item])\n-                            -> ~[@Item] {\n+                            item: @Item,\n+                            push: |@Item|) {\n     // &mut ::std::fmt::Formatter\n     let fmtr = Ptr(~Literal(Path::new(~[\"std\", \"fmt\", \"Formatter\"])),\n                    Borrowed(None, ast::MutMutable));\n@@ -47,7 +47,7 @@ pub fn expand_deriving_show(cx: &mut ExtCtxt,\n             }\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n // we construct a format string and then defer to std::fmt, since that"}, {"sha": "b1c8e62935bdde46c5e803e29b42b1c78d273a51", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -20,8 +20,8 @@ use parse::token;\n pub fn expand_deriving_to_str(cx: &mut ExtCtxt,\n                               span: Span,\n                               mitem: @MetaItem,\n-                              in_items: ~[@Item])\n-                              -> ~[@Item] {\n+                              item: @Item,\n+                              push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"to_str\", \"ToStr\"]),\n@@ -40,7 +40,7 @@ pub fn expand_deriving_to_str(cx: &mut ExtCtxt,\n             }\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n // It used to be the case that this deriving implementation invoked"}, {"sha": "924ab3c9e0020c4f2df93be6ab90ddc6c79061e1", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -17,8 +17,8 @@ use ext::deriving::generic::*;\n pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n-                            in_items: ~[@Item])\n-                            -> ~[@Item] {\n+                            item: @Item,\n+                            push: |@Item|) {\n     let trait_def = TraitDef {\n         span: span,\n         path: Path::new(~[\"std\", \"num\", \"Zero\"]),\n@@ -53,7 +53,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n             }\n         ]\n     };\n-    trait_def.expand(cx, mitem, in_items)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn zero_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {"}, {"sha": "e59afc6ffa6ce7ab1caa02081ffc0c6a7c29c4a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18477ac68a3daf8260be17be368f59a65c3b7527/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=18477ac68a3daf8260be17be368f59a65c3b7527", "patch": "@@ -29,7 +29,6 @@ use visit::Visitor;\n use util::small_vector::SmallVector;\n \n use std::cast;\n-use std::vec;\n use std::unstable::dynamic_lib::DynamicLibrary;\n use std::os;\n \n@@ -220,8 +219,9 @@ pub fn expand_mod_items(module_: &ast::Mod, fld: &mut MacroExpander) -> ast::Mod\n     // For each item, look through the attributes.  If any of them are\n     // decorated with \"item decorators\", then use that function to transform\n     // the item into a new set of items.\n-    let new_items = vec::flat_map(module_.items, |item| {\n-        item.attrs.rev_iter().fold(~[*item], |items, attr| {\n+    let mut new_items = module_.items.clone();\n+    for item in module_.items.iter() {\n+        for attr in item.attrs.rev_iter() {\n             let mname = attr.name();\n \n             match fld.extsbox.find(&intern(mname.get())) {\n@@ -234,14 +234,14 @@ pub fn expand_mod_items(module_: &ast::Mod, fld: &mut MacroExpander) -> ast::Mod\n                           span: None\n                       }\n                   });\n-                  let r = dec_fn(fld.cx, attr.span, attr.node.value, items);\n+                  dec_fn(fld.cx, attr.span, attr.node.value, *item,\n+                         |item| new_items.push(item));\n                   fld.cx.bt_pop();\n-                  r\n               },\n-              _ => items,\n+              _ => {},\n             }\n-        })\n-    });\n+        }\n+    }\n \n     ast::Mod {\n         items: new_items,"}]}