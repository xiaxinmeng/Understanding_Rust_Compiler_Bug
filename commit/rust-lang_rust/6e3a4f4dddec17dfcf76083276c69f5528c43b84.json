{"sha": "6e3a4f4dddec17dfcf76083276c69f5528c43b84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2E0ZjRkZGRlYzE3ZGZjZjc2MDgzMjc2YzY5ZjU1MjhjNDNiODQ=", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2018-07-03T18:24:24Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2018-08-15T00:59:23Z"}, "message": "Add lldb to the build\n\nThis optionally adds lldb (and clang, which it needs) to the build.\n\nBecause rust uses LLVM 7, and because clang 7 is not yet released, a\nrecent git master version of clang is used.\n\nThe lldb that is used includes the Rust plugin.\n\nlldb is only built when asked for, or when doing a nightly build on\nmacOS.  Only macOS is done for now due to difficulties with the Python\ndependency.", "tree": {"sha": "2c54bcb913443aa57b157d1c075a52136f49b589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c54bcb913443aa57b157d1c075a52136f49b589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3a4f4dddec17dfcf76083276c69f5528c43b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a4f4dddec17dfcf76083276c69f5528c43b84", "html_url": "https://github.com/rust-lang/rust/commit/6e3a4f4dddec17dfcf76083276c69f5528c43b84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a4f4dddec17dfcf76083276c69f5528c43b84/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb2094d8934c420dbcc41875dc64eb9d82cbb6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb2094d8934c420dbcc41875dc64eb9d82cbb6f", "html_url": "https://github.com/rust-lang/rust/commit/5bb2094d8934c420dbcc41875dc64eb9d82cbb6f"}], "stats": {"total": 248, "additions": 225, "deletions": 23}, "files": [{"sha": "1631daac76c2ce07b0cc807666e4f2287a9bcfa8", "filename": ".gitmodules", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -56,3 +56,11 @@\n [submodule \"src/libbacktrace\"]\n \tpath = src/libbacktrace\n \turl = https://github.com/rust-lang-nursery/libbacktrace\n+[submodule \"src/tools/lldb\"]\n+\tpath = src/tools/lldb\n+\turl = https://github.com/rust-lang-nursery/lldb/\n+\tbranch = rust-release-70\n+[submodule \"src/tools/clang\"]\n+\tpath = src/tools/clang\n+\turl = https://github.com/rust-lang-nursery/clang/\n+\tbranch = release_70"}, {"sha": "7251a46cc5878156caa21f5881d8b1f9314ce4e0", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -30,7 +30,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler\"\n+        RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler --enable-lldb\"\n         SRC=.\n         DEPLOY_ALT=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -85,7 +85,7 @@ matrix:\n     # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-full-tools --enable-profiler\"\n+        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-full-tools --enable-profiler --enable-lldb\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -99,7 +99,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -233,7 +233,8 @@ install:\n         osx)\n           if [[ \"$RUST_CHECK_TARGET\" == dist ]]; then\n             travis_retry brew update &&\n-            travis_retry brew install xz;\n+            travis_retry brew install xz &&\n+            travis_retry brew install swig;\n           fi &&\n           travis_retry curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin &&\n             chmod +x /usr/local/bin/sccache &&"}, {"sha": "107375ac5cc3a3fa0ce254f11adde571d29d6e60", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -354,6 +354,10 @@\n # sysroot.\n #llvm-tools = false\n \n+# Indicates whether LLDB will be made available in the sysroot.\n+# This is only built if LLVM is also being built.\n+#lldb = false\n+\n # Whether to deny warnings in crates\n #deny-warnings = true\n "}, {"sha": "b94c428cd6ba5076ba631f5e46cf8c43602a3585", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -1015,7 +1015,7 @@ name = \"installer\"\n version = \"0.0.0\"\n dependencies = [\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "d9c66ce2d77905614b5f242c68bfafc123bc7d48", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -721,6 +721,10 @@ def update_submodules(self):\n                 config = self.get_toml('lld')\n                 if config is None or config == 'false':\n                     continue\n+            if module.endswith(\"lldb\") or module.endswith(\"clang\"):\n+                config = self.get_toml('lldb')\n+                if config is None or config == 'false':\n+                    continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)"}, {"sha": "12c1972c22039aa4b4b8a498b326bfc70823269a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -461,6 +461,7 @@ impl<'a> Builder<'a> {\n                 dist::Rustfmt,\n                 dist::Clippy,\n                 dist::LlvmTools,\n+                dist::Lldb,\n                 dist::Extended,\n                 dist::HashSign\n             ),"}, {"sha": "43650332d3b67c901df7c8783b09953cd175401d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -87,6 +87,7 @@ pub struct Config {\n     pub llvm_link_jobs: Option<u32>,\n \n     pub lld_enabled: bool,\n+    pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n \n     // rust codegen options\n@@ -310,6 +311,7 @@ struct Rust {\n     codegen_backends_dir: Option<String>,\n     wasm_syscall: Option<bool>,\n     lld: Option<bool>,\n+    lldb: Option<bool>,\n     llvm_tools: Option<bool>,\n     deny_warnings: Option<bool>,\n     backtrace_on_ice: Option<bool>,\n@@ -538,6 +540,7 @@ impl Config {\n             }\n             set(&mut config.wasm_syscall, rust.wasm_syscall);\n             set(&mut config.lld_enabled, rust.lld);\n+            set(&mut config.lldb_enabled, rust.lldb);\n             set(&mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel_queries = rust.experimental_parallel_queries.unwrap_or(false);\n             config.rustc_default_linker = rust.default_linker.clone();"}, {"sha": "cf7f78eeba04b13b16e3d64de41efd7609c1f8ca", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -68,6 +68,7 @@ def v(*args):\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")\n o(\"emscripten\", None, \"compile the emscripten backend as well as LLVM\")\n o(\"full-tools\", None, \"enable all tools\")\n+o(\"lldb\", \"rust.lldb\", \"build lldb\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc.\n@@ -350,7 +351,7 @@ def set(key, value):\n # all the various comments and whatnot.\n #\n # Note that the `target` section is handled separately as we'll duplicate it\n-# per configure dtarget, so there's a bit of special handling for that here.\n+# per configured target, so there's a bit of special handling for that here.\n sections = {}\n cur_section = None\n sections[None] = []"}, {"sha": "6e473fae3be5c0208279c662f12e0ead34e9bca1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -47,6 +47,8 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n     } else if component == \"llvm-tools\" {\n         format!(\"{}-{}\", component, builder.llvm_tools_package_vers())\n+    } else if component == \"lldb\" {\n+        format!(\"{}-{}\", component, builder.lldb_package_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, builder.rust_package_vers())\n@@ -1396,6 +1398,7 @@ impl Step for Extended {\n         let rls_installer = builder.ensure(Rls { stage, target });\n         let llvm_tools_installer = builder.ensure(LlvmTools { stage, target });\n         let clippy_installer = builder.ensure(Clippy { stage, target });\n+        let lldb_installer = builder.ensure(Lldb { target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n         let analysis_installer = builder.ensure(Analysis {\n             compiler: builder.compiler(stage, self.host),\n@@ -1435,6 +1438,7 @@ impl Step for Extended {\n         tarballs.extend(clippy_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer.clone());\n+        tarballs.extend(lldb_installer.clone());\n         tarballs.push(analysis_installer);\n         tarballs.push(std_installer);\n         if builder.config.docs {\n@@ -1869,6 +1873,7 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"clippy\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n         cmd.arg(builder.llvm_tools_package_vers());\n+        cmd.arg(builder.lldb_package_vers());\n         cmd.arg(addr);\n \n         builder.create_dir(&distdir(builder));\n@@ -1963,3 +1968,121 @@ impl Step for LlvmTools {\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n }\n+\n+#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n+pub struct Lldb {\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Lldb {\n+    type Output = Option<PathBuf>;\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/lldb\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Lldb {\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let target = self.target;\n+\n+        if builder.config.dry_run {\n+            return None;\n+        }\n+\n+        let bindir = builder\n+            .llvm_out(target)\n+            .join(\"bin\");\n+        let lldb_exe = bindir.join(exe(\"lldb\", &target));\n+        if !lldb_exe.exists() {\n+            return None;\n+        }\n+\n+        builder.info(&format!(\"Dist Lldb ({})\", target));\n+        let src = builder.src.join(\"src/tools/lldb\");\n+        let name = pkgname(builder, \"lldb\");\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"lldb-image\");\n+        drop(fs::remove_dir_all(&image));\n+\n+        // Prepare the image directory\n+        let dst = image.join(\"bin\");\n+        t!(fs::create_dir_all(&dst));\n+        for program in &[\"lldb\", \"lldb-argdumper\", \"lldb-mi\", \"lldb-server\"] {\n+            let exe = bindir.join(exe(program, &target));\n+            builder.install(&exe, &dst, 0o755);\n+        }\n+\n+        // The libraries.\n+        let libdir = builder.llvm_out(target).join(\"lib\");\n+        let dst = image.join(\"lib\");\n+        t!(fs::create_dir_all(&dst));\n+        for entry in t!(fs::read_dir(&libdir)) {\n+            // let entry = t!(entry);\n+            let entry = entry.unwrap();\n+            if let Ok(name) = entry.file_name().into_string() {\n+                if name.starts_with(\"liblldb.\") && !name.ends_with(\".a\") {\n+                    if t!(entry.file_type()).is_symlink() {\n+                        builder.copy_to_folder(&entry.path(), &dst);\n+                    } else {\n+                       builder.install(&entry.path(), &dst, 0o755);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // The lldb scripts might be installed in lib/python$version\n+        // or in lib64/python$version.  If lib64 exists, use it;\n+        // otherwise lib.\n+        let libdir = builder.llvm_out(target).join(\"lib64\");\n+        let (libdir, libdir_name) = if libdir.exists() {\n+            (libdir, \"lib64\")\n+        } else {\n+            (builder.llvm_out(target).join(\"lib\"), \"lib\")\n+        };\n+        for entry in t!(fs::read_dir(&libdir)) {\n+            let entry = t!(entry);\n+            if let Ok(name) = entry.file_name().into_string() {\n+                if name.starts_with(\"python\") {\n+                    let dst = image.join(libdir_name)\n+                        .join(entry.file_name());\n+                    t!(fs::create_dir_all(&dst));\n+                    builder.cp_r(&entry.path(), &dst);\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"lldb-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        builder.create_dir(&overlay);\n+        builder.install(&src.join(\"LICENSE.TXT\"), &overlay, 0o644);\n+        builder.create(&overlay.join(\"version\"), &builder.lldb_vers());\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--success-message=lldb-installed.\")\n+            .arg(\"--image-dir\").arg(&image)\n+            .arg(\"--work-dir\").arg(&tmpdir(builder))\n+            .arg(\"--output-dir\").arg(&distdir(builder))\n+            .arg(\"--non-installed-overlay\").arg(&overlay)\n+            .arg(format!(\"--package-name={}-{}\", name, target))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(\"--component-name=lldb-preview\");\n+\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n+    }\n+}"}, {"sha": "5bb475e07ba8db1fb4ae46b6180b96f1a267b12d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -151,6 +151,11 @@ use std::process::{self, Command};\n use std::slice;\n use std::str;\n \n+#[cfg(unix)]\n+use std::os::unix::fs::symlink as symlink_file;\n+#[cfg(windows)]\n+use std::os::windows::fs::symlink_file;\n+\n use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n use filetime::FileTime;\n \n@@ -1005,6 +1010,14 @@ impl Build {\n         self.rust_version()\n     }\n \n+    fn lldb_package_vers(&self) -> String {\n+        self.package_vers(&self.rust_version())\n+    }\n+\n+    fn lldb_vers(&self) -> String {\n+        self.rust_version()\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///\n@@ -1123,20 +1136,24 @@ impl Build {\n     pub fn copy(&self, src: &Path, dst: &Path) {\n         if self.config.dry_run { return; }\n         let _ = fs::remove_file(&dst);\n-        // Attempt to \"easy copy\" by creating a hard link (symlinks don't work on\n-        // windows), but if that fails just fall back to a slow `copy` operation.\n-        if let Ok(()) = fs::hard_link(src, dst) {\n-            return\n-        }\n-        if let Err(e) = fs::copy(src, dst) {\n-            panic!(\"failed to copy `{}` to `{}`: {}\", src.display(),\n-                dst.display(), e)\n+        let metadata = t!(src.symlink_metadata());\n+        if metadata.file_type().is_symlink() {\n+            let link = t!(fs::read_link(src));\n+            t!(symlink_file(link, dst));\n+        } else if let Ok(()) = fs::hard_link(src, dst) {\n+            // Attempt to \"easy copy\" by creating a hard link\n+            // (symlinks don't work on windows), but if that fails\n+            // just fall back to a slow `copy` operation.\n+        } else {\n+            if let Err(e) = fs::copy(src, dst) {\n+                panic!(\"failed to copy `{}` to `{}`: {}\", src.display(),\n+                       dst.display(), e)\n+            }\n+            t!(fs::set_permissions(dst, metadata.permissions()));\n+            let atime = FileTime::from_last_access_time(&metadata);\n+            let mtime = FileTime::from_last_modification_time(&metadata);\n+            t!(filetime::set_file_times(dst, atime, mtime));\n         }\n-        let metadata = t!(src.metadata());\n-        t!(fs::set_permissions(dst, metadata.permissions()));\n-        let atime = FileTime::from_last_access_time(&metadata);\n-        let mtime = FileTime::from_last_modification_time(&metadata);\n-        t!(filetime::set_file_times(dst, atime, mtime));\n     }\n \n     /// Search-and-replaces within a file. (Not maximally efficiently: allocates a"}, {"sha": "c99347aa94e6637548a86f2e49cf15262ad33775", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -149,7 +149,6 @@ impl Step for Llvm {\n            .define(\"WITH_POLLY\", \"OFF\")\n            .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")\n            .define(\"LLVM_ENABLE_LIBEDIT\", \"OFF\")\n-           .define(\"LLVM_ENABLE_LIBXML2\", \"OFF\")\n            .define(\"LLVM_PARALLEL_COMPILE_JOBS\", builder.jobs().to_string())\n            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n@@ -163,19 +162,22 @@ impl Step for Llvm {\n         cfg.define(\"LLVM_OCAML_INSTALL_PATH\",\n             env::var_os(\"LLVM_OCAML_INSTALL_PATH\").unwrap_or_else(|| \"usr/lib/ocaml\".into()));\n \n+        let want_lldb = builder.config.lldb_enabled && !self.emscripten;\n+\n         // This setting makes the LLVM tools link to the dynamic LLVM library,\n         // which saves both memory during parallel links and overall disk space\n         // for the tools.  We don't distribute any of those tools, so this is\n         // just a local concern.  However, it doesn't work well everywhere.\n         //\n         // If we are shipping llvm tools then we statically link them LLVM\n         if (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")) &&\n-            !builder.config.llvm_tools_enabled {\n+            !builder.config.llvm_tools_enabled &&\n+            !want_lldb {\n                 cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n         // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n-        if builder.config.llvm_tools_enabled {\n+        if builder.config.llvm_tools_enabled || want_lldb {\n             if !target.contains(\"windows\") {\n                 if target.contains(\"apple\") {\n                     cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-static-libstdc++\");\n@@ -196,6 +198,17 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_BUILD_32_BITS\", \"ON\");\n         }\n \n+        if want_lldb {\n+            cfg.define(\"LLVM_EXTERNAL_CLANG_SOURCE_DIR\", builder.src.join(\"src/tools/clang\"));\n+            cfg.define(\"LLVM_EXTERNAL_LLDB_SOURCE_DIR\", builder.src.join(\"src/tools/lldb\"));\n+            // For the time being, disable code signing.\n+            cfg.define(\"LLDB_CODESIGN_IDENTITY\", \"\");\n+        } else {\n+            // LLDB requires libxml2; but otherwise we want it to be disabled.\n+            // See https://github.com/rust-lang/rust/pull/50104\n+            cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");\n+        }\n+\n         if let Some(num_linkers) = builder.config.llvm_link_jobs {\n             if num_linkers > 0 {\n                 cfg.define(\"LLVM_PARALLEL_LINK_JOBS\", num_linkers.to_string());"}, {"sha": "ee1345c7f9411caf31d14c0cd2577d721a2c75a5", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -189,6 +189,7 @@ struct Builder {\n     clippy_release: String,\n     rustfmt_release: String,\n     llvm_tools_release: String,\n+    lldb_release: String,\n \n     input: PathBuf,\n     output: PathBuf,\n@@ -203,13 +204,15 @@ struct Builder {\n     clippy_version: Option<String>,\n     rustfmt_version: Option<String>,\n     llvm_tools_version: Option<String>,\n+    lldb_version: Option<String>,\n \n     rust_git_commit_hash: Option<String>,\n     cargo_git_commit_hash: Option<String>,\n     rls_git_commit_hash: Option<String>,\n     clippy_git_commit_hash: Option<String>,\n     rustfmt_git_commit_hash: Option<String>,\n     llvm_tools_git_commit_hash: Option<String>,\n+    lldb_git_commit_hash: Option<String>,\n }\n \n fn main() {\n@@ -223,6 +226,7 @@ fn main() {\n     let clippy_release = args.next().unwrap();\n     let rustfmt_release = args.next().unwrap();\n     let llvm_tools_release = args.next().unwrap();\n+    let lldb_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));\n@@ -234,6 +238,7 @@ fn main() {\n         clippy_release,\n         rustfmt_release,\n         llvm_tools_release,\n+        lldb_release,\n \n         input,\n         output,\n@@ -248,13 +253,15 @@ fn main() {\n         clippy_version: None,\n         rustfmt_version: None,\n         llvm_tools_version: None,\n+        lldb_version: None,\n \n         rust_git_commit_hash: None,\n         cargo_git_commit_hash: None,\n         rls_git_commit_hash: None,\n         clippy_git_commit_hash: None,\n         rustfmt_git_commit_hash: None,\n         llvm_tools_git_commit_hash: None,\n+        lldb_git_commit_hash: None,\n     }.build();\n }\n \n@@ -266,6 +273,7 @@ impl Builder {\n         self.clippy_version = self.version(\"clippy\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_version = self.version(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_version = self.version(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n+        self.lldb_version = self.version(\"lldb\", \"x86_64-unknown-linux-gnu\");\n \n         self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n@@ -274,6 +282,7 @@ impl Builder {\n         self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_git_commit_hash = self.git_commit_hash(\"llvm-tools\",\n                                                                \"x86_64-unknown-linux-gnu\");\n+        self.lldb_git_commit_hash = self.git_commit_hash(\"lldb\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n@@ -312,11 +321,13 @@ impl Builder {\n         self.package(\"rustfmt-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n         self.package(\"llvm-tools-preview\", &mut manifest.pkg, TARGETS);\n+        self.package(\"lldb-preview\", &mut manifest.pkg, TARGETS);\n \n         let clippy_present = manifest.pkg.contains_key(\"clippy-preview\");\n         let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n         let rustfmt_present = manifest.pkg.contains_key(\"rustfmt-preview\");\n         let llvm_tools_present = manifest.pkg.contains_key(\"llvm-tools-preview\");\n+        let lldb_present = manifest.pkg.contains_key(\"lldb-preview\");\n \n         if rls_present {\n             manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n@@ -383,6 +394,12 @@ impl Builder {\n                     target: host.to_string(),\n                 });\n             }\n+            if lldb_present {\n+                extensions.push(Component {\n+                    pkg: \"lldb-preview\".to_string(),\n+                    target: host.to_string(),\n+                });\n+            }\n             extensions.push(Component {\n                 pkg: \"rust-analysis\".to_string(),\n                 target: host.to_string(),\n@@ -496,6 +513,8 @@ impl Builder {\n             format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target)\n         } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n             format!(\"llvm-tools-{}-{}.tar.gz\", self.llvm_tools_release, target)\n+        } else if component == \"lldb\" || component == \"lldb-preview\" {\n+            format!(\"lldb-{}-{}.tar.gz\", self.lldb_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n         }\n@@ -512,6 +531,8 @@ impl Builder {\n             &self.rustfmt_version\n         } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n             &self.llvm_tools_version\n+        } else if component == \"lldb\" || component == \"lldb-preview\" {\n+            &self.lldb_version\n         } else {\n             &self.rust_version\n         }\n@@ -528,6 +549,8 @@ impl Builder {\n             &self.rustfmt_git_commit_hash\n         } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n             &self.llvm_tools_git_commit_hash\n+        } else if component == \"lldb\" || component == \"lldb-preview\" {\n+            &self.lldb_git_commit_hash\n         } else {\n             &self.rust_git_commit_hash\n         }"}, {"sha": "2a284a70e26997273c296afe06586ffdf3a142fd", "filename": "src/tools/clang", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclang?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -0,0 +1 @@\n+Subproject commit 2a284a70e26997273c296afe06586ffdf3a142fd"}, {"sha": "3dbe998969d457c5cef245f61b48bdaed0f5c059", "filename": "src/tools/lldb", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flldb?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -0,0 +1 @@\n+Subproject commit 3dbe998969d457c5cef245f61b48bdaed0f5c059"}, {"sha": "27dec6cae3a8132d8a073aad6775425c85095c99", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -1 +1 @@\n-Subproject commit 89414e44dc94844888e59c08bc31dcccb1792800\n+Subproject commit 27dec6cae3a8132d8a073aad6775425c85095c99"}, {"sha": "f2107f92debd2d915bcc01779f698bb3d9996d02", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a4f4dddec17dfcf76083276c69f5528c43b84/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=6e3a4f4dddec17dfcf76083276c69f5528c43b84", "patch": "@@ -68,12 +68,14 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/vendor\",\n         \"src/rt/hoedown\",\n         \"src/tools/cargo\",\n+        \"src/tools/clang\",\n         \"src/tools/rls\",\n         \"src/tools/clippy\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/tools/miri\",\n         \"src/tools/lld\",\n+        \"src/tools/lldb\",\n         \"src/librustc/mir/interpret\",\n         \"src/librustc_mir/interpret\",\n         \"src/target\","}]}