{"sha": "f080f944f134700c48801a3b826330c9bd3aa5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwODBmOTQ0ZjEzNDcwMGM0ODgwMWEzYjgyNjMzMGM5YmQzYWE1Y2M=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-23T18:16:12Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-23T18:16:12Z"}, "message": "Add const generics test for all range types.\n\nIn addition to the regression test of `RangeInclusive` for #70155, now all range types are checked for usability within const generics:\n\n- `RangeFrom`\n- `RangeFull`\n- `RangeToInclusive`\n- `RangeTo`\n- `Range`\n\nThe test are moved from `test\\ui\\const-generics\\issues\\issue-70155` to `test\\ui\\const-generics\\std\\range` in anticipation of future similar tests for std types.", "tree": {"sha": "aeb927b8608b7b74875a2c691bf0aceabdfc3531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb927b8608b7b74875a2c691bf0aceabdfc3531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f080f944f134700c48801a3b826330c9bd3aa5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f080f944f134700c48801a3b826330c9bd3aa5cc", "html_url": "https://github.com/rust-lang/rust/commit/f080f944f134700c48801a3b826330c9bd3aa5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f080f944f134700c48801a3b826330c9bd3aa5cc/comments", "author": null, "committer": null, "parents": [{"sha": "bd1df4405785a34ac494007f185744d51ddd9138", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1df4405785a34ac494007f185744d51ddd9138", "html_url": "https://github.com/rust-lang/rust/commit/bd1df4405785a34ac494007f185744d51ddd9138"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "487a51ddf25c44ab4b5040f193f254de9b259a29", "filename": "src/test/ui/const-generics/std/range/const-generics-range-from.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-from.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `RangeFrom` should be usable within const generics:\n+\n+struct S<const R: std::ops::RangeFrom<usize>>;\n+\n+const C : S<{ 0 .. }> = S;\n+\n+pub fn main() {}"}, {"sha": "2af2dd8343be3f796340386fa4314000e6cb54b0", "filename": "src/test/ui/const-generics/std/range/const-generics-range-full.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-full.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-full.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-full.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `RangeFull` should be usable within const generics:\n+\n+struct S<const R: std::ops::RangeFull>;\n+\n+const C : S<{ .. }> = S;\n+\n+pub fn main() {}"}, {"sha": "c9f7420f6ac4f8cdf0b0ec4cbbaf167deebc0600", "filename": "src/test/ui/const-generics/std/range/const-generics-range-inclusive.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-inclusive.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -2,8 +2,9 @@\n #![allow(incomplete_features)]\n #![feature(const_generics)]\n \n-// Regression test for #70155:\n-// `RangeInclusive` should be usable with const generics\n+// Regression test for #70155\n+\n+// `RangeInclusive` should be usable within const generics:\n \n struct S<const R: std::ops::RangeInclusive<usize>>;\n ", "previous_filename": "src/test/ui/const-generics/issues/issue-70155.rs"}, {"sha": "dbef24f853c18b993dcac8237f83930eaaf79b2f", "filename": "src/test/ui/const-generics/std/range/const-generics-range-to-inclusive.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to-inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to-inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to-inclusive.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `RangeToInclusive` should be usable within const generics:\n+\n+struct S<const R: std::ops::RangeToInclusive<usize>>;\n+\n+const C : S<{ ..= 999 }> = S;\n+\n+pub fn main() {}"}, {"sha": "ed479316a8239a20e72adf7779e6ce9de7fcc501", "filename": "src/test/ui/const-generics/std/range/const-generics-range-to.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range-to.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `RangeTo` should be usable within const generics:\n+\n+struct S<const R: std::ops::RangeTo<usize>>;\n+\n+const C : S<{ .. 1000 }> = S;\n+\n+pub fn main() {}"}, {"sha": "ea4b72780c9ccf35c72c83bdfe2aff5773c442aa", "filename": "src/test/ui/const-generics/std/range/const-generics-range.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f080f944f134700c48801a3b826330c9bd3aa5cc/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Frange%2Fconst-generics-range.rs?ref=f080f944f134700c48801a3b826330c9bd3aa5cc", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `Range` should be usable within const generics:\n+\n+struct S<const R: std::ops::Range<usize>>;\n+\n+const C : S<{ 0 .. 1000 }> = S;\n+\n+pub fn main() {}"}]}