{"sha": "f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZmE5YWE0YzRkNGZjZmU3ZDZlOTBiYTljZWZjYTkwYmM3YzQ5OTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-08T17:19:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-08T17:19:02Z"}, "message": "Merge #4366\n\n4366: Unified debug lens r=matklad a=vsrs\n\nRight now every debug engine gets the debug executable and exports the errors on its own.\r\n\r\nThis PR unifies the way all engines work. And adds an option to configure each engine separably.\r\nFor example, this adds visualizers for both `CodeLLDB` and `C++ tools Windows debugger`\r\n```json\r\n\"rust-analyzer.debug.engineSettings\": {\r\n    \"cppvsdbg\": {\r\n        \"visualizerFile\": \"${workspaceRoot}/rdisk.natvis\"\r\n    },\r\n    \"lldb\": {\r\n        \"initCommands\": [\r\n            \"command script import ${workspaceRoot}/rdisk.vis.py\"\r\n        ]\r\n    }\r\n}\r\n```\n\nCo-authored-by: vsrs <vit@conrlab.com>\nCo-authored-by: vsrs <62505555+vsrs@users.noreply.github.com>", "tree": {"sha": "c7b13dca2a7de516c8a2d7417a1f71e0aa2946f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b13dca2a7de516c8a2d7417a1f71e0aa2946f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetZSGCRBK7hj4Ov3rIwAAdHIIAEOHDu4EDE48cC2fvPQ3X6Su\nLQuY7FbVFRP39/GAS2kN2j2w5Hg4Qe4cwTwDxBTqYpPu7bRwFymw/sGjUfLjk85c\nyNA6aCcM7Pyc58qjTuCVXoamSmJd2/APCfvPQXpfYtyVwZ/g+3fgEjfX9B8WqC/4\n+DkgaXnJTnXGEB3wRKCuF7hlzFI+Ur85J5iLIO1EN+l1HMJwBpZMqWuvsn0O7z8V\n0Y8maoSdui1+IsAalkjZoSjmesiFKMBtWjZYlxHuYp22xLHlO6N1cjCk6u6yhhaR\n/5a0KfqeXlfSSJuCrMiUIo8OghYA8pbRm5rXmJVBxIB/lfKYvrK8BV9BElknfEc=\n=3QZl\n-----END PGP SIGNATURE-----\n", "payload": "tree c7b13dca2a7de516c8a2d7417a1f71e0aa2946f1\nparent d81e19286f8d944af5697913acd7d25a7ed8c3ad\nparent 0ef17ef1ee9fb0ce7149176d12f4d225f6d01401\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588958342 +0000\ncommitter GitHub <noreply@github.com> 1588958342 +0000\n\nMerge #4366\n\n4366: Unified debug lens r=matklad a=vsrs\n\nRight now every debug engine gets the debug executable and exports the errors on its own.\r\n\r\nThis PR unifies the way all engines work. And adds an option to configure each engine separably.\r\nFor example, this adds visualizers for both `CodeLLDB` and `C++ tools Windows debugger`\r\n```json\r\n\"rust-analyzer.debug.engineSettings\": {\r\n    \"cppvsdbg\": {\r\n        \"visualizerFile\": \"${workspaceRoot}/rdisk.natvis\"\r\n    },\r\n    \"lldb\": {\r\n        \"initCommands\": [\r\n            \"command script import ${workspaceRoot}/rdisk.vis.py\"\r\n        ]\r\n    }\r\n}\r\n```\n\nCo-authored-by: vsrs <vit@conrlab.com>\nCo-authored-by: vsrs <62505555+vsrs@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "html_url": "https://github.com/rust-lang/rust/commit/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81e19286f8d944af5697913acd7d25a7ed8c3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81e19286f8d944af5697913acd7d25a7ed8c3ad", "html_url": "https://github.com/rust-lang/rust/commit/d81e19286f8d944af5697913acd7d25a7ed8c3ad"}, {"sha": "0ef17ef1ee9fb0ce7149176d12f4d225f6d01401", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef17ef1ee9fb0ce7149176d12f4d225f6d01401", "html_url": "https://github.com/rust-lang/rust/commit/0ef17ef1ee9fb0ce7149176d12f4d225f6d01401"}], "stats": {"total": 92, "additions": 60, "deletions": 32}, "files": [{"sha": "c6fc13519e062b0fa9189ea663a9394acc1b6933", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "patch": "@@ -423,6 +423,16 @@\n                     \"default\": {\n                         \"/rustc/<id>\": \"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust\"\n                     }\n+                },\n+                \"rust-analyzer.debug.openDebugPane\": {\n+                    \"description\": \"Whether to open up the Debug Pane on debugging start.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": false\n+                },\n+                \"rust-analyzer.debug.engineSettings\": {\n+                    \"type\": \"object\",\n+                    \"default\": {},\n+                    \"description\": \"Optional settings passed to the debug engine. Example:\\n{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }\"\n                 }\n             }\n         },"}, {"sha": "ae328d2a427a96e72513dca96a136560e3998942", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "patch": "@@ -64,29 +64,20 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-function getLldbDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): vscode.DebugConfiguration {\n+function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: \"lldb\",\n         request: \"launch\",\n         name: config.label,\n-        cargo: {\n-            args: config.args,\n-        },\n+        program: executable,\n         args: config.extraArgs,\n         cwd: config.cwd,\n-        sourceMap: sourceFileMap\n+        sourceMap: sourceFileMap,\n+        sourceLanguages: [\"rust\"]\n     };\n }\n \n-const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-\n-async function getCppvsDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): Promise<vscode.DebugConfiguration> {\n-    debugOutput.clear();\n-\n-    const cargo = new Cargo(config.cwd || '.', debugOutput);\n-    const executable = await cargo.executableFromArgs(config.args);\n-\n-    // if we are here, there were no compilation errors.\n+function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: (os.platform() === \"win32\") ? \"cppvsdbg\" : 'cppdbg',\n         request: \"launch\",\n@@ -98,39 +89,62 @@ async function getCppvsDebugConfig(config: ra.Runnable, sourceFileMap: Record<st\n     };\n }\n \n+const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+\n+async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n+    const cargo = new Cargo(config.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(config.args);\n+\n+    // if we are here, there were no compilation errors.\n+    return executable;\n+}\n+\n+type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+\n export function debugSingle(ctx: Ctx): Cmd {\n     return async (config: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n-        const lldbId = \"vadimcn.vscode-lldb\";\n-        const cpptoolsId = \"ms-vscode.cpptools\";\n+        const knownEngines: Record<string, DebugConfigProvider> = {\n+            \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n+            \"ms-vscode.cpptools\": getCppvsDebugConfig\n+        };\n+        const debugOptions = ctx.config.debug;\n \n-        const debugEngineId = ctx.config.debug.engine;\n         let debugEngine = null;\n-        if (debugEngineId === \"auto\") {\n-            debugEngine = vscode.extensions.getExtension(lldbId);\n-            if (!debugEngine) {\n-                debugEngine = vscode.extensions.getExtension(cpptoolsId);\n+        if (debugOptions.engine === \"auto\") {\n+            for (var engineId in knownEngines) {\n+                debugEngine = vscode.extensions.getExtension(engineId);\n+                if (debugEngine) break;\n             }\n         }\n         else {\n-            debugEngine = vscode.extensions.getExtension(debugEngineId);\n+            debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n         }\n \n         if (!debugEngine) {\n-            vscode.window.showErrorMessage(\n-                `Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=${lldbId}) ` +\n-                `or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) ` +\n-                `extension for debugging.`\n-            );\n+            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n+                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n             return;\n         }\n \n-        const debugConfig = lldbId === debugEngine.id\n-            ? getLldbDebugConfig(config, ctx.config.debug.sourceFileMap)\n-            : await getCppvsDebugConfig(config, ctx.config.debug.sourceFileMap);\n+        debugOutput.clear();\n+        if (ctx.config.debug.openUpDebugPane) {\n+            debugOutput.show(true);\n+        }\n+\n+        const executable = await getDebugExecutable(config);\n+        const debugConfig = knownEngines[debugEngine.id](config, executable, debugOptions.sourceFileMap);\n+        if (debugConfig.type in debugOptions.engineSettings) {\n+            const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n+            for (var key in settingsMap) {\n+                debugConfig[key] = settingsMap[key];\n+            }\n+        }\n \n+        debugOutput.appendLine(\"Launching debug configuration:\");\n+        debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n         return vscode.debug.startDebugging(undefined, debugConfig);\n     };\n }"}, {"sha": "be2e27aeccaa9a67051e88ca5ac9be8abd054498", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=f1fa9aa4c4d4fcfe7d6e90ba9cefca90bc7c4998", "patch": "@@ -109,10 +109,14 @@ export class Config {\n     }\n \n     get debug() {\n+        // \"/rustc/<id>\" used by suggestions only.\n+        const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+\n         return {\n             engine: this.get<string>(\"debug.engine\"),\n-            sourceFileMap: this.get<Record<string, string>>(\"debug.sourceFileMap\"),\n+            engineSettings: this.get<object>(\"debug.engineSettings\"),\n+            openUpDebugPane: this.get<boolean>(\"debug.openUpDebugPane\"),\n+            sourceFileMap: sourceFileMap,\n         };\n     }\n-\n }"}]}