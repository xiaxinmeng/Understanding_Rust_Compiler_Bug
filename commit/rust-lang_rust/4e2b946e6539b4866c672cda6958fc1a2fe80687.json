{"sha": "4e2b946e6539b4866c672cda6958fc1a2fe80687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMmI5NDZlNjUzOWI0ODY2YzY3MmNkYTY5NThmYzFhMmZlODA2ODc=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-08-23T23:37:19Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:25Z"}, "message": "Cleanup FIXMEs", "tree": {"sha": "472436b596dbf5a5df365d16474ac04db1e5a6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472436b596dbf5a5df365d16474ac04db1e5a6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e2b946e6539b4866c672cda6958fc1a2fe80687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2b946e6539b4866c672cda6958fc1a2fe80687", "html_url": "https://github.com/rust-lang/rust/commit/4e2b946e6539b4866c672cda6958fc1a2fe80687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e2b946e6539b4866c672cda6958fc1a2fe80687/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d5be18b702b5fd8b38b67d503860f788a14acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d5be18b702b5fd8b38b67d503860f788a14acd", "html_url": "https://github.com/rust-lang/rust/commit/d4d5be18b702b5fd8b38b67d503860f788a14acd"}], "stats": {"total": 28, "additions": 0, "deletions": 28}, "files": [{"sha": "7af61d6f274026b0b7509dd416a71c935687a991", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b946e6539b4866c672cda6958fc1a2fe80687/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b946e6539b4866c672cda6958fc1a2fe80687/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=4e2b946e6539b4866c672cda6958fc1a2fe80687", "patch": "@@ -31,7 +31,6 @@ pub enum ConstInt {\n     U64(u64),\n     U128(u128),\n     Usize(ConstUsize),\n-    // FIXME: i128\n     Infer(u128),\n     InferSigned(i128),\n }\n@@ -56,7 +55,6 @@ macro_rules! bounds {\n mod ubounds {\n     #![allow(dead_code)]\n     use rustc_i128::{u128, i128};\n-    // FIXME: min are problably all wrong for signed here.\n     bounds!{u128: 0,\n         i8 I8MIN I8MAX i16 I16MIN I16MAX i32 I32MIN I32MAX i64 I64MIN I64MAX i128 I128MIN I128MAX\n         u8 U8MIN U8MAX u16 U16MIN U16MAX u32 U32MIN U32MAX u64 U64MIN U64MAX u128 U128MIN U128MAX\n@@ -155,7 +153,6 @@ impl ConstInt {\n             I16(i) if i < 0 => InferSigned(i as i128),\n             I32(i) if i < 0 => InferSigned(i as i128),\n             I64(i) if i < 0 => InferSigned(i as i128),\n-            // FIXME: 1128, compare with i128\n             I128(i) if i < 0 => InferSigned(i as i128),\n             Isize(Is16(i)) if i < 0 => InferSigned(i as i128),\n             Isize(Is32(i)) if i < 0 => InferSigned(i as i128),\n@@ -165,7 +162,6 @@ impl ConstInt {\n             I16(i) => Infer(i as u128),\n             I32(i) => Infer(i as u128),\n             I64(i) => Infer(i as u128),\n-            // FIXME: i128\n             I128(i) => Infer(i as u128),\n             Isize(Is16(i)) => Infer(i as u128),\n             Isize(Is32(i)) => Infer(i as u128),\n@@ -174,7 +170,6 @@ impl ConstInt {\n             U16(i) => Infer(i as u128),\n             U32(i) => Infer(i as u128),\n             U64(i) => Infer(i as u128),\n-            // FIXME: i128\n             U128(i) => Infer(i as u128),\n             Usize(Us16(i)) => Infer(i as u128),\n             Usize(Us32(i)) => Infer(i as u128),"}, {"sha": "8199a08c852de872c8f96e39ff7a3b8c39cc4990", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b946e6539b4866c672cda6958fc1a2fe80687/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b946e6539b4866c672cda6958fc1a2fe80687/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=4e2b946e6539b4866c672cda6958fc1a2fe80687", "patch": "@@ -375,7 +375,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I16 => ConstInt::I16(i16::min_value()),\n                     ast::IntTy::I32 => ConstInt::I32(i32::min_value()),\n                     ast::IntTy::I64 => ConstInt::I64(i64::min_value()),\n-                    // FIXME: i128\n                     ast::IntTy::I128 => ConstInt::I128(i128::min_value()),\n                     ast::IntTy::Is => {\n                         let int_ty = self.hir.tcx().sess.target.int_type;"}, {"sha": "60402fe1a6607a349d01155e3e77da5d64851db8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b946e6539b4866c672cda6958fc1a2fe80687/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b946e6539b4866c672cda6958fc1a2fe80687/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4e2b946e6539b4866c672cda6958fc1a2fe80687", "patch": "@@ -1207,17 +1207,6 @@ impl IntTy {\n         format!(\"{}{}\", val as u128, self.ty_to_string())\n     }\n \n-    pub fn ty_max(&self) -> u64 {\n-        match *self {\n-            IntTy::I8 => 0x80,\n-            IntTy::I16 => 0x8000,\n-            IntTy::Is | IntTy::I32 => 0x80000000, // FIXME: actually ni about Is\n-            IntTy::I64 => 0x8000000000000000,\n-            // FIXME: i128\n-            IntTy::I128 => !0u64,\n-        }\n-    }\n-\n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n             IntTy::Is => return None,\n@@ -1256,17 +1245,6 @@ impl UintTy {\n         format!(\"{}{}\", val, self.ty_to_string())\n     }\n \n-    pub fn ty_max(&self) -> u64 {\n-        match *self {\n-            UintTy::U8 => 0xff,\n-            UintTy::U16 => 0xffff,\n-            UintTy::Us | UintTy::U32 => 0xffffffff, // FIXME: actually ni about Us\n-            UintTy::U64 => 0xffffffffffffffff,\n-            // FIXME: i128\n-            UintTy::U128 => 0xffffffffffffffff,\n-        }\n-    }\n-\n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n             UintTy::Us => return None,"}]}