{"sha": "5383b6cc17210d0c2038e05d5f03a6abe13b38ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzODNiNmNjMTcyMTBkMGMyMDM4ZTA1ZDVmMDNhNmFiZTEzYjM4ZWE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-05-13T12:08:10Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-05-13T12:08:10Z"}, "message": "Format source code", "tree": {"sha": "cba2fe88b3ad18e13a28a826616ba31ef8db38fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba2fe88b3ad18e13a28a826616ba31ef8db38fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5383b6cc17210d0c2038e05d5f03a6abe13b38ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5383b6cc17210d0c2038e05d5f03a6abe13b38ea", "html_url": "https://github.com/rust-lang/rust/commit/5383b6cc17210d0c2038e05d5f03a6abe13b38ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5383b6cc17210d0c2038e05d5f03a6abe13b38ea/comments", "author": null, "committer": null, "parents": [{"sha": "819a13030f423849848520e9102c625d0cc1b722", "url": "https://api.github.com/repos/rust-lang/rust/commits/819a13030f423849848520e9102c625d0cc1b722", "html_url": "https://github.com/rust-lang/rust/commit/819a13030f423849848520e9102c625d0cc1b722"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "17b1700accddd8c6e96530247a11ad09e4cffbf6", "filename": "src/comment.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5383b6cc17210d0c2038e05d5f03a6abe13b38ea/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5383b6cc17210d0c2038e05d5f03a6abe13b38ea/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=5383b6cc17210d0c2038e05d5f03a6abe13b38ea", "patch": "@@ -52,37 +52,35 @@ pub fn rewrite_comment(orig: &str,\n         return light_rewrite_comment(orig, shape.indent, config);\n     }\n \n-    let (opener, closer, line_start) =\n-        if block_style {\n+    let (opener, closer, line_start) = if block_style {\n+        (\"/* \", \" */\", \" * \")\n+    } else if !config.normalize_comments {\n+        if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n+            (\"/** \", \" **/\", \" ** \")\n+        } else if orig.starts_with(\"/*!\") {\n+            (\"/*! \", \" */\", \" * \")\n+        } else if orig.starts_with(\"/*\") {\n             (\"/* \", \" */\", \" * \")\n-        } else if !config.normalize_comments {\n-            if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n-                (\"/** \", \" **/\", \" ** \")\n-            } else if orig.starts_with(\"/*!\") {\n-                (\"/*! \", \" */\", \" * \")\n-            } else if orig.starts_with(\"/*\") {\n-                (\"/* \", \" */\", \" * \")\n-            } else if orig.starts_with(\"///\") {\n-                (\"/// \", \"\", \"/// \")\n-            } else if orig.starts_with(\"//!\") {\n-                (\"//! \", \"\", \"//! \")\n-            } else {\n-                (\"// \", \"\", \"// \")\n-            }\n-        } else if orig.starts_with(\"///\") ||\n-                  (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n+        } else if orig.starts_with(\"///\") {\n             (\"/// \", \"\", \"/// \")\n-        } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n+        } else if orig.starts_with(\"//!\") {\n             (\"//! \", \"\", \"//! \")\n-        } else if is_custom_comment(orig) {\n-            if orig.chars().nth(3) == Some(' ') {\n-                (&orig[0..4], \"\", &orig[0..4])\n-            } else {\n-                (&orig[0..3], \"\", &orig[0..3])\n-            }\n         } else {\n             (\"// \", \"\", \"// \")\n-        };\n+        }\n+    } else if orig.starts_with(\"///\") || (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n+        (\"/// \", \"\", \"/// \")\n+    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n+        (\"//! \", \"\", \"//! \")\n+    } else if is_custom_comment(orig) {\n+        if orig.chars().nth(3) == Some(' ') {\n+            (&orig[0..4], \"\", &orig[0..4])\n+        } else {\n+            (&orig[0..3], \"\", &orig[0..3])\n+        }\n+    } else {\n+        (\"// \", \"\", \"// \")\n+    };\n \n     let max_chars = shape\n         .width"}]}