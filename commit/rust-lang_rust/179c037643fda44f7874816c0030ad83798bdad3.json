{"sha": "179c037643fda44f7874816c0030ad83798bdad3", "node_id": "C_kwDOAAsO6NoAKDE3OWMwMzc2NDNmZGE0NGY3ODc0ODE2YzAwMzBhZDgzNzk4YmRhZDM", "commit": {"author": {"name": "DevAccentor", "email": "dev.accentor@gmail.com", "date": "2022-06-04T14:48:35Z"}, "committer": {"name": "chansuke", "email": "moonset20@gmail.com", "date": "2023-02-10T09:00:46Z"}, "message": "improve almost swap to look for let statement", "tree": {"sha": "16b7d61a79298b495665b92e4b78829c08e53134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b7d61a79298b495665b92e4b78829c08e53134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179c037643fda44f7874816c0030ad83798bdad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179c037643fda44f7874816c0030ad83798bdad3", "html_url": "https://github.com/rust-lang/rust/commit/179c037643fda44f7874816c0030ad83798bdad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179c037643fda44f7874816c0030ad83798bdad3/comments", "author": {"login": "DevAccentor", "id": 106545343, "node_id": "U_kgDOBlnAvw", "avatar_url": "https://avatars.githubusercontent.com/u/106545343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevAccentor", "html_url": "https://github.com/DevAccentor", "followers_url": "https://api.github.com/users/DevAccentor/followers", "following_url": "https://api.github.com/users/DevAccentor/following{/other_user}", "gists_url": "https://api.github.com/users/DevAccentor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevAccentor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevAccentor/subscriptions", "organizations_url": "https://api.github.com/users/DevAccentor/orgs", "repos_url": "https://api.github.com/users/DevAccentor/repos", "events_url": "https://api.github.com/users/DevAccentor/events{/privacy}", "received_events_url": "https://api.github.com/users/DevAccentor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chansuke", "id": 501052, "node_id": "MDQ6VXNlcjUwMTA1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/501052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chansuke", "html_url": "https://github.com/chansuke", "followers_url": "https://api.github.com/users/chansuke/followers", "following_url": "https://api.github.com/users/chansuke/following{/other_user}", "gists_url": "https://api.github.com/users/chansuke/gists{/gist_id}", "starred_url": "https://api.github.com/users/chansuke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chansuke/subscriptions", "organizations_url": "https://api.github.com/users/chansuke/orgs", "repos_url": "https://api.github.com/users/chansuke/repos", "events_url": "https://api.github.com/users/chansuke/events{/privacy}", "received_events_url": "https://api.github.com/users/chansuke/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adeebf92fd5a639d2cb51c7374fc212e5de568f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adeebf92fd5a639d2cb51c7374fc212e5de568f", "html_url": "https://github.com/rust-lang/rust/commit/5adeebf92fd5a639d2cb51c7374fc212e5de568f"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "5c408a73a55b28df7ff87b5b5319c8348e5a686e", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/179c037643fda44f7874816c0030ad83798bdad3/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179c037643fda44f7874816c0030ad83798bdad3/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=179c037643fda44f7874816c0030ad83798bdad3", "patch": "@@ -172,6 +172,7 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n /// Implementation of the `ALMOST_SWAPPED` lint.\n fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     for w in block.stmts.windows(2) {\n@@ -220,6 +221,79 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                     });\n             }\n         }\n+\n+        let lint_almost_swapped_note = |span, what: String, sugg, lhs, rhs| {\n+            span_lint_and_then(\n+                cx,\n+                ALMOST_SWAPPED,\n+                span,\n+                &format!(\"this looks like you are trying to swap{}\", what),\n+                |diag| {\n+                    if !what.is_empty() {\n+                        diag.note(&format!(\n+                            \"maybe you could use `{sugg}::mem::swap({lhs}, {rhs})` or `{sugg}::mem::replace`?\"\n+                        ));\n+                    }\n+                },\n+            );\n+        };\n+\n+        if let StmtKind::Local(first) = w[0].kind\n+            && let StmtKind::Local(second) = w[1].kind\n+            && first.span.ctxt() == second.span.ctxt()\n+            && let Some(rhs0) = first.init\n+            && let Some(rhs1) = second.init\n+            && let ExprKind::Path(QPath::Resolved(None, path_l)) = rhs0.kind\n+            && let ExprKind::Path(QPath::Resolved(None, path_r)) = rhs1.kind\n+            && let PatKind::Binding(_,_, ident_l,_) = first.pat.kind\n+            && let PatKind::Binding(_,_, ident_r,_) = second.pat.kind\n+            && ident_l.name.as_str() == path_r.segments.iter().map(|el| el.ident.to_string()).collect::<Vec<_>>().join(\"::\")\n+            && ident_r.name.as_str() == path_l.segments.iter().map(|el| el.ident.to_string()).collect::<Vec<_>>().join(\"::\") \n+                {\n+                    let rhs0 = Sugg::hir_opt(cx, rhs0);\n+                    let (what, lhs, rhs) = if let Some(second) = rhs0 {\n+                        (\n+                            format!(\" `{}` and `{}`\", ident_l, second),\n+                            format!(\"&mut {}\", ident_l),\n+                            second.mut_addr().to_string(),\n+                        )\n+                    } else {\n+                        (String::new(), String::new(), String::new())\n+                    };\n+                    let span = first.span.to(second.span);\n+                    let Some(sugg) = std_or_core(cx) else { return };\n+\n+                    lint_almost_swapped_note(span, what, sugg, lhs, rhs);\n+                }\n+\n+        if let StmtKind::Local(first) = w[0].kind\n+            && let StmtKind::Semi(second) = w[1].kind\n+            && first.span.ctxt() == second.span.ctxt()\n+            && let Some(rhs0) = first.init\n+            && let ExprKind::Path(QPath::Resolved(None, path_l)) = rhs0.kind\n+            && let PatKind::Binding(_,_, ident_l,_) = first.pat.kind\n+            && let ExprKind::Assign(lhs1, rhs1, _) = second.kind\n+            && let ExprKind::Path(QPath::Resolved(None, lhs1_path)) = lhs1.kind\n+            && let ExprKind::Path(QPath::Resolved(None, rhs1_path)) = rhs1.kind\n+            && ident_l.name.as_str() == rhs1_path.segments.iter().map(|el| el.ident.to_string()).collect::<Vec<_>>().join(\"::\")\n+            && path_l.segments.iter().map(|el| el.ident.to_string()).collect::<Vec<_>>().join(\"::\") == lhs1_path.segments.iter().map(|el| el.ident.to_string()).collect::<Vec<_>>().join(\"::\") \n+                {\n+                    let lhs1 = Sugg::hir_opt(cx, lhs1);\n+                    let rhs1 = Sugg::hir_opt(cx, rhs1);\n+                    let (what, lhs, rhs) = if let (Some(first),Some(second)) = (lhs1,rhs1) {\n+                        (\n+                            format!(\" `{}` and `{}`\", first, second),\n+                            first.mut_addr().to_string(),\n+                            second.mut_addr().to_string(),\n+                        )\n+                    } else {\n+                        (String::new(), String::new(), String::new())\n+                    };\n+                    let span = first.span.to(second.span);\n+                    let Some(sugg) = std_or_core(cx) else { return };\n+\n+                    lint_almost_swapped_note(span, what, sugg, lhs, rhs);\n+                }\n     }\n }\n "}, {"sha": "8b0740c3209733e12cad8843f0fc3b155cd0380f", "filename": "tests/ui/almost_swapped.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/179c037643fda44f7874816c0030ad83798bdad3/tests%2Fui%2Falmost_swapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179c037643fda44f7874816c0030ad83798bdad3/tests%2Fui%2Falmost_swapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_swapped.rs?ref=179c037643fda44f7874816c0030ad83798bdad3", "patch": "@@ -0,0 +1,32 @@\n+#![allow(clippy::needless_late_init, clippy::manual_swap)]\n+#![allow(unused_variables, unused_assignments)]\n+#![warn(clippy::almost_swapped)]\n+\n+fn main() {\n+    let b = 1;\n+    let a = b;\n+    let b = a;\n+\n+    let mut c = 1;\n+    let mut d = 2;\n+    d = c;\n+    c = d;\n+\n+    let mut b = 1;\n+    let a = b;\n+    b = a;\n+\n+    let b = 1;\n+    let a = 2;\n+\n+    let t = b;\n+    let b = a;\n+    let a = t;\n+\n+    let mut b = 1;\n+    let mut a = 2;\n+\n+    let t = b;\n+    b = a;\n+    a = t;\n+}"}, {"sha": "70788d23f16868dfde21b3942dffbd4304b64d06", "filename": "tests/ui/almost_swapped.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/179c037643fda44f7874816c0030ad83798bdad3/tests%2Fui%2Falmost_swapped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/179c037643fda44f7874816c0030ad83798bdad3/tests%2Fui%2Falmost_swapped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_swapped.stderr?ref=179c037643fda44f7874816c0030ad83798bdad3", "patch": "@@ -0,0 +1,30 @@\n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/almost_swapped.rs:7:5\n+   |\n+LL | /     let a = b;\n+LL | |     let b = a;\n+   | |______________^\n+   |\n+   = note: `-D clippy::almost-swapped` implied by `-D warnings`\n+   = note: maybe you could use `std::mem::swap(&mut a, &mut b)` or `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `d` and `c`\n+  --> $DIR/almost_swapped.rs:12:5\n+   |\n+LL | /     d = c;\n+LL | |     c = d;\n+   | |_________^ help: try: `std::mem::swap(&mut d, &mut c)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `b` and `a`\n+  --> $DIR/almost_swapped.rs:16:5\n+   |\n+LL | /     let a = b;\n+LL | |     b = a;\n+   | |_________^\n+   |\n+   = note: maybe you could use `std::mem::swap(&mut b, &mut a)` or `std::mem::replace`?\n+\n+error: aborting due to 3 previous errors\n+"}]}