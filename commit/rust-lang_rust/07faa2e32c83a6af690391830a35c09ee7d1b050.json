{"sha": "07faa2e32c83a6af690391830a35c09ee7d1b050", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZmFhMmUzMmM4M2E2YWY2OTAzOTE4MzBhMzVjMDllZTdkMWIwNTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-18T05:21:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-18T05:21:57Z"}, "message": "Rollup merge of #87170 - xFrednet:clippy-5393-add-diagnostic-items, r=Manishearth,oli-obk\n\nAdd diagnostic items for Clippy\n\nThis adds a bunch of diagnostic items to `std`/`core`/`alloc` functions, structs and traits used in Clippy. The actual refactorings in Clippy to use these items will be done in a different PR in Clippy after the next sync.\n\nThis PR doesn't include all paths Clippy uses, I've only gone through the first 85 lines of Clippy's [`paths.rs`](https://github.com/rust-lang/rust-clippy/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_utils/src/paths.rs) (after rust-lang/rust-clippy#7466) to get some feedback early on. I've also decided against adding diagnostic items to methods, as it would be nicer and more scalable to access them in a nicer fashion, like adding a `is_diagnostic_assoc_item(did, sym::Iterator, sym::map)` function or something similar (Suggested by `@camsteffen` [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Diagnostic.20Item.20Naming.20Convention.3F/near/225024603))\n\nThere seems to be some different naming conventions when it comes to diagnostic items, some use UpperCamelCase (`BinaryHeap`) and some snake_case (`hashmap_type`). This PR uses UpperCamelCase for structs and traits and snake_case with the module name as a prefix for functions. Any feedback on is this welcome.\n\ncc: rust-lang/rust-clippy#5393\n\nr? `@Manishearth`", "tree": {"sha": "7d14fb25b613aa08df5f3351ac1df663b7d523ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d14fb25b613aa08df5f3351ac1df663b7d523ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07faa2e32c83a6af690391830a35c09ee7d1b050", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg87p2CRBK7hj4Ov3rIwAA77UIACG6U54vyk4yeCC3fJokvwci\nnhXI870CVm8XydFL+BVRG5ky3lZJLNXbLtBoh6/nPOgwIg1mUSia+ABrMVTEt18d\nYabgwpoBgDxOQKTPT7AKc4kWe8UmdqTJIXT3uys5Q2LlyV/lhVHCBIuOVlgXW7jG\nSy60ygYnOdQeQwUx8AQsL6/nRxFoBwMo8VT/5IyelwUmwe1r2LxGktn+dfu19OLj\nbYbyOEK264BP/xvHUasj6dP0TYG+B9ylB9NTArE1EYFdmcoCA3nRW0ZHVgPPQ6N3\n/2NrU8ZDCG5eVVyD57K/YP/0TFptL3gON3NyEpMTEOzwPfozUdY35pbHcj336gk=\n=ASC3\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d14fb25b613aa08df5f3351ac1df663b7d523ed\nparent 81d0b7040233bc306e66d83654b7e969f8057aac\nparent 67002db2cf78f68ff140d32847e41effae9e9408\nauthor Yuki Okushi <jtitor@2k36.org> 1626585717 +0900\ncommitter GitHub <noreply@github.com> 1626585717 +0900\n\nRollup merge of #87170 - xFrednet:clippy-5393-add-diagnostic-items, r=Manishearth,oli-obk\n\nAdd diagnostic items for Clippy\n\nThis adds a bunch of diagnostic items to `std`/`core`/`alloc` functions, structs and traits used in Clippy. The actual refactorings in Clippy to use these items will be done in a different PR in Clippy after the next sync.\n\nThis PR doesn't include all paths Clippy uses, I've only gone through the first 85 lines of Clippy's [`paths.rs`](https://github.com/rust-lang/rust-clippy/blob/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8/clippy_utils/src/paths.rs) (after rust-lang/rust-clippy#7466) to get some feedback early on. I've also decided against adding diagnostic items to methods, as it would be nicer and more scalable to access them in a nicer fashion, like adding a `is_diagnostic_assoc_item(did, sym::Iterator, sym::map)` function or something similar (Suggested by `@camsteffen` [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Diagnostic.20Item.20Naming.20Convention.3F/near/225024603))\n\nThere seems to be some different naming conventions when it comes to diagnostic items, some use UpperCamelCase (`BinaryHeap`) and some snake_case (`hashmap_type`). This PR uses UpperCamelCase for structs and traits and snake_case with the module name as a prefix for functions. Any feedback on is this welcome.\n\ncc: rust-lang/rust-clippy#5393\n\nr? `@Manishearth`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07faa2e32c83a6af690391830a35c09ee7d1b050", "html_url": "https://github.com/rust-lang/rust/commit/07faa2e32c83a6af690391830a35c09ee7d1b050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07faa2e32c83a6af690391830a35c09ee7d1b050/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81d0b7040233bc306e66d83654b7e969f8057aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d0b7040233bc306e66d83654b7e969f8057aac", "html_url": "https://github.com/rust-lang/rust/commit/81d0b7040233bc306e66d83654b7e969f8057aac"}, {"sha": "67002db2cf78f68ff140d32847e41effae9e9408", "url": "https://api.github.com/repos/rust-lang/rust/commits/67002db2cf78f68ff140d32847e41effae9e9408", "html_url": "https://github.com/rust-lang/rust/commit/67002db2cf78f68ff140d32847e41effae9e9408"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "a8f969782b22daeb45d5253b27fa05eff65138b1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -122,10 +122,14 @@ symbols! {\n     // nice to have.\n     Symbols {\n         Alignment,\n+        Any,\n         Arc,\n         Argument,\n         ArgumentV1,\n         Arguments,\n+        AsMut,\n+        AsRef,\n+        BTreeEntry,\n         BTreeMap,\n         BTreeSet,\n         BinaryHeap,\n@@ -139,19 +143,25 @@ symbols! {\n         Continue,\n         Copy,\n         Count,\n+        Cow,\n         Debug,\n         DebugStruct,\n         DebugTuple,\n         Decodable,\n         Decoder,\n         Default,\n         Deref,\n+        DirBuilder,\n+        DoubleEndedIterator,\n+        Duration,\n         Encodable,\n         Encoder,\n         Eq,\n         Equal,\n         Err,\n         Error,\n+        File,\n+        FileType,\n         FormatSpec,\n         Formatter,\n         From,\n@@ -162,11 +172,14 @@ symbols! {\n         GlobalAlloc,\n         Hash,\n         HashMap,\n+        HashMapEntry,\n         HashSet,\n         Hasher,\n         Implied,\n         Input,\n         IntoIterator,\n+        IoRead,\n+        IoWrite,\n         Is,\n         ItemContext,\n         Iterator,\n@@ -369,6 +382,8 @@ symbols! {\n         closure,\n         closure_to_fn_coercion,\n         cmp,\n+        cmp_max,\n+        cmp_min,\n         cmpxchg16b_target_feature,\n         cmse_nonsecure_entry,\n         coerce_unsized,\n@@ -674,6 +689,7 @@ symbols! {\n         item,\n         item_like_imports,\n         iter,\n+        iter_repeat,\n         keyword,\n         kind,\n         kreg,\n@@ -740,6 +756,12 @@ symbols! {\n         maybe_uninit,\n         maybe_uninit_uninit,\n         maybe_uninit_zeroed,\n+        mem_discriminant,\n+        mem_drop,\n+        mem_forget,\n+        mem_replace,\n+        mem_size_of,\n+        mem_size_of_val,\n         mem_uninitialized,\n         mem_zeroed,\n         member_constraints,"}, {"sha": "482a497201de6d54fba41e8ce4876110ce80df0c", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -177,6 +177,7 @@ where\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Cow\")]\n pub enum Cow<'a, B: ?Sized + 'a>\n where\n     B: ToOwned,"}, {"sha": "5fec8dc2d13343a6b45730474d1105b83cd1ce3f", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -14,6 +14,7 @@ use Entry::*;\n ///\n /// [`entry`]: BTreeMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"BTreeEntry\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "19652106b3d01325f5f9f9266b7932447e594cd1", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -108,6 +108,7 @@ use crate::intrinsics;\n // unsafe traits and unsafe methods (i.e., `type_id` would still be safe to call,\n // but we would likely want to indicate as such in documentation).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Any\")]\n pub trait Any: 'static {\n     /// Gets the `TypeId` of `self`.\n     ///"}, {"sha": "79610bb409d37c06b383ea7622452560b179ebf6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -1104,6 +1104,7 @@ pub macro PartialOrd($item:item) {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_min\")]\n pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n }\n@@ -1166,6 +1167,7 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_max\")]\n pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     v1.max(v2)\n }"}, {"sha": "1e512af48051ed9dc7c5627ed29aef8b0906506f", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -152,6 +152,7 @@ pub const fn identity<T>(x: T) -> T {\n /// is_hello(s);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n pub trait AsRef<T: ?Sized> {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -193,6 +194,7 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n pub trait AsMut<T: ?Sized> {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "733142ed01103ce3e41806d56fecf1561a03d00a", "filename": "library/core/src/iter/sources/repeat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -51,6 +51,7 @@ use crate::iter::{FusedIterator, TrustedLen};\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"iter_repeat\")]\n pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n     Repeat { element: elt }\n }"}, {"sha": "9a9cf20077096d4e50cc70664d89de32fa960aed", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -36,6 +36,7 @@ use crate::ops::{ControlFlow, Try};\n /// assert_eq!(None, iter.next_back());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"DoubleEndedIterator\")]\n pub trait DoubleEndedIterator: Iterator {\n     /// Removes and returns an element from the end of the iterator.\n     ///"}, {"sha": "2c75de39ffa2fc3644cdf479786903e046788f7a", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -140,6 +140,7 @@ pub use crate::intrinsics::transmute;\n #[inline]\n #[rustc_const_stable(feature = \"const_forget\", since = \"1.46.0\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_forget\")]\n pub const fn forget<T>(t: T) {\n     let _ = ManuallyDrop::new(t);\n }\n@@ -298,6 +299,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_size_of\", since = \"1.24.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of\")]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n@@ -324,6 +326,7 @@ pub const fn size_of<T>() -> usize {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of_val\")]\n pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n     // SAFETY: `val` is a reference, so it's a valid raw pointer\n     unsafe { intrinsics::size_of_val(val) }\n@@ -814,6 +817,7 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n #[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_replace\")]\n pub const fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n@@ -888,6 +892,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// [`RefCell`]: crate::cell::RefCell\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_drop\")]\n pub fn drop<T>(_x: T) {}\n \n /// Interprets `src` as having type `&U`, and then reads `src` without moving\n@@ -1015,6 +1020,7 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// ```\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_discriminant\")]\n pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n     Discriminant(intrinsics::discriminant_value(v))\n }"}, {"sha": "2d8a1cb1ab01639757cc0efc20ed062da46cdb7c", "filename": "library/core/src/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -61,6 +61,7 @@ const MICROS_PER_SEC: u64 = 1_000_000;\n /// crate to do so.\n #[stable(feature = \"duration\", since = \"1.3.0\")]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Duration\")]\n pub struct Duration {\n     secs: u64,\n     nanos: u32, // Always 0 <= nanos < NANOS_PER_SEC"}, {"sha": "fac285c96f00d3f4e2212d7976ce5181933b23df", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -1829,6 +1829,7 @@ impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n ///\n /// [`entry`]: HashMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"HashMapEntry\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "bbe1ab40537f220b8c821a8211a6edce9b632a87", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -88,6 +88,7 @@ use crate::time::SystemTime;\n /// [`BufReader<R>`]: io::BufReader\n /// [`sync_all`]: File::sync_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"File\")]\n pub struct File {\n     inner: fs_imp::File,\n }\n@@ -183,12 +184,14 @@ pub struct Permissions(fs_imp::FilePermissions);\n /// It is returned by [`Metadata::file_type`] method.\n #[stable(feature = \"file_type\", since = \"1.1.0\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"FileType\")]\n pub struct FileType(fs_imp::FileType);\n \n /// A builder used to create directories in various manners.\n ///\n /// This builder also supports platform-specific options.\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"DirBuilder\")]\n #[derive(Debug)]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,"}, {"sha": "cc615b95f8625eec22a447b9b35033ce565304e9", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07faa2e32c83a6af690391830a35c09ee7d1b050/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=07faa2e32c83a6af690391830a35c09ee7d1b050", "patch": "@@ -514,6 +514,7 @@ pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [\n /// [`File`]: crate::fs::File\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(notable_trait)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"IoRead\")]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -1361,6 +1362,7 @@ impl Initializer {\n /// [`write_all`]: Write::write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(notable_trait)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"IoWrite\")]\n pub trait Write {\n     /// Write a buffer into this writer, returning how many bytes were written.\n     ///"}]}