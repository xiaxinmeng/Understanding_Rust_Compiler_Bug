{"sha": "f23d231c50172cdba8bad01507eb27062134c98d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyM2QyMzFjNTAxNzJjZGJhOGJhZDAxNTA3ZWIyNzA2MjEzNGM5OGQ=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-14T13:22:30Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-14T13:22:30Z"}, "message": "Add tests where asm! is properly in unsafe block", "tree": {"sha": "54c0b0a2d32e1aeb6bb65b8408cd12e984cd0de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c0b0a2d32e1aeb6bb65b8408cd12e984cd0de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23d231c50172cdba8bad01507eb27062134c98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23d231c50172cdba8bad01507eb27062134c98d", "html_url": "https://github.com/rust-lang/rust/commit/f23d231c50172cdba8bad01507eb27062134c98d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23d231c50172cdba8bad01507eb27062134c98d/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116bc6dd76924d5769f88a7a9674caa872c1dbaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/116bc6dd76924d5769f88a7a9674caa872c1dbaf", "html_url": "https://github.com/rust-lang/rust/commit/116bc6dd76924d5769f88a7a9674caa872c1dbaf"}], "stats": {"total": 261, "additions": 235, "deletions": 26}, "files": [{"sha": "d86e53c06267139101b80c201907dfdbf6085622", "filename": "src/test/ui/asm/bad-arch.mirunsafeck.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-arch.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-arch.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.mirunsafeck.stderr?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -1,11 +1,11 @@\n error[E0472]: inline assembly is unsupported on this target\n-  --> $DIR/bad-arch.rs:20:9\n+  --> $DIR/bad-arch.rs:22:9\n    |\n LL |         asm!(\"\");\n    |         ^^^^^^^^^\n \n error[E0472]: inline assembly is unsupported on this target\n-  --> $DIR/bad-arch.rs:25:1\n+  --> $DIR/bad-arch.rs:27:1\n    |\n LL | global_asm!(\"\");\n    | ^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/asm/bad-arch.stderr"}, {"sha": "93309899bf387e2fc4abcd62a55b7975d0c4ca22", "filename": "src/test/ui/asm/bad-arch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.rs?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: --target sparc-unknown-linux-gnu\n // needs-llvm-components: sparc\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![no_core]"}, {"sha": "d86e53c06267139101b80c201907dfdbf6085622", "filename": "src/test/ui/asm/bad-arch.thirunsafeck.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-arch.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-arch.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-arch.thirunsafeck.stderr?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -0,0 +1,16 @@\n+error[E0472]: inline assembly is unsupported on this target\n+  --> $DIR/bad-arch.rs:22:9\n+   |\n+LL |         asm!(\"\");\n+   |         ^^^^^^^^^\n+\n+error[E0472]: inline assembly is unsupported on this target\n+  --> $DIR/bad-arch.rs:27:1\n+   |\n+LL | global_asm!(\"\");\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `global_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "13ef032ab1071a13851d7e4754eb5411598a6fa4", "filename": "src/test/ui/asm/bad-template.mirunsafeck.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-template.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-template.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.mirunsafeck.stderr?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -1,35 +1,35 @@\n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:8:15\n+  --> $DIR/bad-template.rs:10:15\n    |\n LL |         asm!(\"{}\");\n    |               ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:10:15\n+  --> $DIR/bad-template.rs:12:15\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |               ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:10:21\n+  --> $DIR/bad-template.rs:12:21\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |                     ^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:13:15\n+  --> $DIR/bad-template.rs:15:15\n    |\n LL |         asm!(\"{a}\");\n    |               ^^^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:15:15\n+  --> $DIR/bad-template.rs:17:15\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |               ^^   --------------- named argument\n@@ -38,37 +38,37 @@ LL |         asm!(\"{}\", a = in(reg) foo);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:15:20\n+  --> $DIR/bad-template.rs:17:20\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:15:20\n+  --> $DIR/bad-template.rs:17:20\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:18:15\n+  --> $DIR/bad-template.rs:20:15\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |               ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:18:21\n+  --> $DIR/bad-template.rs:20:21\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |                     ^^^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:21:15\n+  --> $DIR/bad-template.rs:23:15\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |               ^^   ------------- explicit register argument\n@@ -77,19 +77,19 @@ LL |         asm!(\"{}\", in(\"eax\") foo);\n    |\n    = note: no positional arguments were given\n note: explicit register arguments cannot be used in the asm template\n-  --> $DIR/bad-template.rs:21:20\n+  --> $DIR/bad-template.rs:23:20\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |                    ^^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:23:17\n+  --> $DIR/bad-template.rs:25:17\n    |\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:25:18\n+  --> $DIR/bad-template.rs:27:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:31:14\n+  --> $DIR/bad-template.rs:33:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:33:14\n+  --> $DIR/bad-template.rs:35:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:33:20\n+  --> $DIR/bad-template.rs:35:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:14\n+  --> $DIR/bad-template.rs:38:14\n    |\n LL | global_asm!(\"{a}\");\n    |              ^^^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:38:14\n+  --> $DIR/bad-template.rs:40:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:38:19\n+  --> $DIR/bad-template.rs:40:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:38:19\n+  --> $DIR/bad-template.rs:40:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:41:14\n+  --> $DIR/bad-template.rs:43:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:41:20\n+  --> $DIR/bad-template.rs:43:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:44:16\n+  --> $DIR/bad-template.rs:46:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:46:17\n+  --> $DIR/bad-template.rs:48:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used", "previous_filename": "src/test/ui/asm/bad-template.stderr"}, {"sha": "5aed2c62f0bddaa29aa0bace25bc869dc64f660e", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -1,4 +1,6 @@\n // only-x86_64\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n #![feature(asm, global_asm)]\n "}, {"sha": "13ef032ab1071a13851d7e4754eb5411598a6fa4", "filename": "src/test/ui/asm/bad-template.thirunsafeck.stderr", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-template.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fbad-template.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.thirunsafeck.stderr?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -0,0 +1,187 @@\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:10:15\n+   |\n+LL |         asm!(\"{}\");\n+   |               ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:12:15\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:12:21\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |                     ^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:15:15\n+   |\n+LL |         asm!(\"{a}\");\n+   |               ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:17:15\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |               ^^   --------------- named argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:17:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:17:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:20:15\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:20:21\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |                     ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:23:15\n+   |\n+LL |         asm!(\"{}\", in(\"eax\") foo);\n+   |               ^^   ------------- explicit register argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: explicit register arguments cannot be used in the asm template\n+  --> $DIR/bad-template.rs:23:20\n+   |\n+LL |         asm!(\"{}\", in(\"eax\") foo);\n+   |                    ^^^^^^^^^^^^^\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:25:17\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |                 ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:27:18\n+   |\n+LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n+   |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                  |\n+   |                  argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:33:14\n+   |\n+LL | global_asm!(\"{}\");\n+   |              ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:35:14\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:35:20\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |                    ^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:38:14\n+   |\n+LL | global_asm!(\"{a}\");\n+   |              ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:40:14\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |              ^^   ------------- named argument\n+   |              |\n+   |              from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:40:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:40:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:43:14\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:43:20\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |                    ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:46:16\n+   |\n+LL | global_asm!(\"{:foo}\", const FOO);\n+   |                ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:48:17\n+   |\n+LL | global_asm!(\"\", const FOO, const FOO);\n+   |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                 |\n+   |                 argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "d4de9abb8caf08a51531274721f73e896d289ffc", "filename": "src/test/ui/asm/const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23d231c50172cdba8bad01507eb27062134c98d/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fconst.rs?ref=f23d231c50172cdba8bad01507eb27062134c98d", "patch": "@@ -1,6 +1,8 @@\n // min-llvm-version: 10.0.1\n // only-x86_64\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n #![feature(asm, global_asm)]\n "}]}