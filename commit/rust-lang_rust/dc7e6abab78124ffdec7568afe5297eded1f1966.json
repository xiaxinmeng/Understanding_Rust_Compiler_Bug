{"sha": "dc7e6abab78124ffdec7568afe5297eded1f1966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjN2U2YWJhYjc4MTI0ZmZkZWM3NTY4YWZlNTI5N2VkZWQxZjE5NjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-17T22:56:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-18T04:09:21Z"}, "message": "Remove the 'uint_bits' constant in bitv", "tree": {"sha": "bb20470f3bbc2d544c05b728ca1d851894477e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb20470f3bbc2d544c05b728ca1d851894477e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7e6abab78124ffdec7568afe5297eded1f1966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7e6abab78124ffdec7568afe5297eded1f1966", "html_url": "https://github.com/rust-lang/rust/commit/dc7e6abab78124ffdec7568afe5297eded1f1966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7e6abab78124ffdec7568afe5297eded1f1966/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01ef8ef87d9697307c5d4fec4d1fa1ede0d65ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01ef8ef87d9697307c5d4fec4d1fa1ede0d65ae", "html_url": "https://github.com/rust-lang/rust/commit/a01ef8ef87d9697307c5d4fec4d1fa1ede0d65ae"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "87cdc04eb0db7db537f70745b9636223a4339aed", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc7e6abab78124ffdec7568afe5297eded1f1966/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7e6abab78124ffdec7568afe5297eded1f1966/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=dc7e6abab78124ffdec7568afe5297eded1f1966", "patch": "@@ -112,8 +112,8 @@ struct BigBitv {\n  */\n #[inline(always)]\n fn big_mask(nbits: uint, elem: uint) -> uint {\n-    let rmd = nbits % uint_bits;\n-    let nelems = nbits/uint_bits + if rmd == 0 {0} else {1};\n+    let rmd = nbits % uint::bits;\n+    let nelems = nbits/uint::bits + if rmd == 0 {0} else {1};\n \n     if elem < nelems - 1 || rmd == 0 {\n         !0\n@@ -184,16 +184,16 @@ impl BigBitv {\n \n     #[inline(always)]\n     pure fn get(&self, i: uint) -> bool {\n-        let w = i / uint_bits;\n-        let b = i % uint_bits;\n+        let w = i / uint::bits;\n+        let b = i % uint::bits;\n         let x = 1 & self.storage[w] >> b;\n         x == 1\n     }\n \n     #[inline(always)]\n     fn set(&mut self, i: uint, x: bool) {\n-        let w = i / uint_bits;\n-        let b = i % uint_bits;\n+        let w = i / uint::bits;\n+        let b = i % uint::bits;\n         let flag = 1 << b;\n         self.storage[w] = if x { self.storage[w] | flag }\n                           else { self.storage[w] & !flag };\n@@ -263,8 +263,8 @@ impl Bitv {\n             Small(~SmallBitv::new(if init {!0} else {0}))\n         }\n         else {\n-            let nelems = nbits/uint_bits +\n-                         if nbits % uint_bits == 0 {0} else {1};\n+            let nelems = nbits/uint::bits +\n+                         if nbits % uint::bits == 0 {0} else {1};\n             let elem = if init {!0} else {0};\n             let s = from_elem(nelems, elem);\n             Big(~BigBitv::new(s))\n@@ -514,7 +514,7 @@ impl Clone for Bitv {\n             Bitv{nbits: self.nbits, rep: Small(~SmallBitv{bits: b.bits})}\n           }\n           Big(ref b) => {\n-            let mut st = from_elem(self.nbits / uint_bits + 1, 0);\n+            let mut st = from_elem(self.nbits / uint::bits + 1, 0);\n             let len = st.len();\n             for uint::range(0, len) |i| { st[i] = b.storage[i]; };\n             Bitv{nbits: self.nbits, rep: Big(~BigBitv{storage: st})}\n@@ -556,8 +556,6 @@ pub fn from_fn(len: uint, f: fn(index: uint) -> bool) -> Bitv {\n     bitv\n }\n \n-const uint_bits: uint = 32u + (1u << 32u >> 27u);\n-\n pure fn lor(w0: uint, w1: uint) -> uint { return w0 | w1; }\n \n pure fn land(w0: uint, w1: uint) -> uint { return w0 & w1; }"}]}