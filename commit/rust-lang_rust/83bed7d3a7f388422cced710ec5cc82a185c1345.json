{"sha": "83bed7d3a7f388422cced710ec5cc82a185c1345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYmVkN2QzYTdmMzg4NDIyY2NlZDcxMGVjNWNjODJhMTg1YzEzNDU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T08:14:37Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T10:25:14Z"}, "message": "Rollup merge of #48126 - newpavlov:patch-1, r=alexcrichton\n\nWhitelist pclmulqdq x86 feature flag\n\nRelevant `stdsimd` [issue](https://github.com/rust-lang-nursery/stdsimd/issues/318).", "tree": {"sha": "87b9bfa971bc6e206537399b32e00ef55bdd49b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87b9bfa971bc6e206537399b32e00ef55bdd49b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83bed7d3a7f388422cced710ec5cc82a185c1345", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqEDooACgkQ/vbIBR0O\nATxfBhAAn6cshZDkXFpcujTnb4OEMST1iGCtdhVJJ8pfnpiNdbDTsGAhODciCdbj\nLgjhPEnwhxAzAC7Ct/rxBcKmz89tSAeB9ZBwN3yZcdPFdO6zIdyX0YoCY29Zop7X\ngY7Ho+MtC98NlTC3ubVOTv2AAesJTp6A56AtFjBBa08iN0LhsUCxR05eNb9Pbk4N\nFKplIu5Ttcdnqnm6ufLRZQbJfZtWUcvpH88RlvXEDGc42OdibyUE2gfKjZqkNYpm\nPdiPCRP895kZS06pa7iyggtg1rkr6FSp9WnIGnMS2aISONtLeGEMcue7Z9qz2Ajb\n92iszbghD9SgVcLL5ZYRGIS0HfZDsNrQE6fqVGCGQERql/c1RjXR2SFfikmMQJjC\nvALCixJwfbt4qJ1uZH2gL1qIoscIcwc0aToNR9lND9ngEcGJ23FygmByaBCfiruW\n3p9lPL6paDr307Ed8JrCtFSG3sAEGL1R2YDU4Nb+nYa2SK5f8lNNpbtA2U9VlTyF\nDcSjVYVZxgBrKd9Alpq9tIiECekCfx7Erb8bF31+g8mk18DiUpLivCrLJNYMRuem\nUCtsmo/G0AdTsXb2LKOuRW0mDUVZ6nbLy+lVvFvkyGCop8fBUWTpJMQk4ucMdA97\nmZKNCPbJhrYo/77lxtEG8aDZmSTJLdtMLnRdVyg3d+lYtatMDLE=\n=j6YC\n-----END PGP SIGNATURE-----", "payload": "tree 87b9bfa971bc6e206537399b32e00ef55bdd49b3\nparent c02c5f4b606782f0885723e8dfb4249a7691dbf8\nparent c2a31dee835c2312a9e527b1f9ea1b77c24beeab\nauthor kennytm <kennytm@gmail.com> 1518596077 +0800\ncommitter kennytm <kennytm@gmail.com> 1518603914 +0800\n\nRollup merge of #48126 - newpavlov:patch-1, r=alexcrichton\n\nWhitelist pclmulqdq x86 feature flag\n\nRelevant `stdsimd` [issue](https://github.com/rust-lang-nursery/stdsimd/issues/318).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83bed7d3a7f388422cced710ec5cc82a185c1345", "html_url": "https://github.com/rust-lang/rust/commit/83bed7d3a7f388422cced710ec5cc82a185c1345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83bed7d3a7f388422cced710ec5cc82a185c1345/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c02c5f4b606782f0885723e8dfb4249a7691dbf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02c5f4b606782f0885723e8dfb4249a7691dbf8", "html_url": "https://github.com/rust-lang/rust/commit/c02c5f4b606782f0885723e8dfb4249a7691dbf8"}, {"sha": "c2a31dee835c2312a9e527b1f9ea1b77c24beeab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a31dee835c2312a9e527b1f9ea1b77c24beeab", "html_url": "https://github.com/rust-lang/rust/commit/c2a31dee835c2312a9e527b1f9ea1b77c24beeab"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "8309c91ab2573bcf4ee7f349cd9e7b45f79b3d05", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83bed7d3a7f388422cced710ec5cc82a185c1345/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bed7d3a7f388422cced710ec5cc82a185c1345/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=83bed7d3a7f388422cced710ec5cc82a185c1345", "patch": "@@ -142,7 +142,7 @@ pub fn provide(providers: &mut Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Rc::new(llvm_util::target_feature_whitelist(tcx.sess)\n             .iter()\n-            .map(|c| c.to_str().unwrap().to_string())\n+            .map(|c| c.to_string())\n             .collect())\n     };\n \n@@ -212,7 +212,8 @@ fn from_target_feature(\n         let value = value.as_str();\n         for feature in value.split(',') {\n             if whitelist.contains(feature) {\n-                target_features.push(format!(\"+{}\", feature));\n+                let llvm_feature = llvm_util::to_llvm_feature(feature);\n+                target_features.push(format!(\"+{}\", llvm_feature));\n                 continue\n             }\n "}, {"sha": "b25562252e72e86cc70585acd9ac74a24faf7986", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/83bed7d3a7f388422cced710ec5cc82a185c1345/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bed7d3a7f388422cced710ec5cc82a185c1345/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=83bed7d3a7f388422cced710ec5cc82a185c1345", "patch": "@@ -14,7 +14,7 @@ use llvm;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n use libc::c_int;\n-use std::ffi::{CStr, CString};\n+use std::ffi::CString;\n \n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::Once;\n@@ -79,57 +79,61 @@ unsafe fn configure_llvm(sess: &Session) {\n // detection code will walk past the end of the feature array,\n // leading to crashes.\n \n-const ARM_WHITELIST: &'static [&'static str] = &[\"neon\\0\", \"v7\\0\", \"vfp2\\0\", \"vfp3\\0\", \"vfp4\\0\"];\n+const ARM_WHITELIST: &'static [&'static str] = &[\"neon\", \"v7\", \"vfp2\", \"vfp3\", \"vfp4\"];\n \n-const AARCH64_WHITELIST: &'static [&'static str] = &[\"neon\\0\", \"v7\\0\"];\n+const AARCH64_WHITELIST: &'static [&'static str] = &[\"neon\", \"v7\"];\n \n-const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bmi2\\0\", \"sse\\0\",\n-                                                 \"sse2\\0\", \"sse3\\0\", \"sse4.1\\0\", \"sse4.2\\0\",\n-                                                 \"ssse3\\0\", \"tbm\\0\", \"lzcnt\\0\", \"popcnt\\0\",\n-                                                 \"sse4a\\0\", \"rdrnd\\0\", \"rdseed\\0\", \"fma\\0\",\n-                                                 \"xsave\\0\", \"xsaveopt\\0\", \"xsavec\\0\",\n-                                                 \"xsaves\\0\", \"aes\\0\",\n-                                                 \"avx512bw\\0\", \"avx512cd\\0\",\n-                                                 \"avx512dq\\0\", \"avx512er\\0\",\n-                                                 \"avx512f\\0\", \"avx512ifma\\0\",\n-                                                 \"avx512pf\\0\", \"avx512vbmi\\0\",\n-                                                 \"avx512vl\\0\", \"avx512vpopcntdq\\0\",\n-                                                 \"mmx\\0\", \"fxsr\\0\"];\n+const X86_WHITELIST: &'static [&'static str] = &[\"avx\", \"avx2\", \"bmi\", \"bmi2\", \"sse\",\n+                                                 \"sse2\", \"sse3\", \"sse4.1\", \"sse4.2\",\n+                                                 \"ssse3\", \"tbm\", \"lzcnt\", \"popcnt\",\n+                                                 \"sse4a\", \"rdrnd\", \"rdseed\", \"fma\",\n+                                                 \"xsave\", \"xsaveopt\", \"xsavec\",\n+                                                 \"xsaves\", \"aes\", \"pclmulqdq\",\n+                                                 \"avx512bw\", \"avx512cd\",\n+                                                 \"avx512dq\", \"avx512er\",\n+                                                 \"avx512f\", \"avx512ifma\",\n+                                                 \"avx512pf\", \"avx512vbmi\",\n+                                                 \"avx512vl\", \"avx512vpopcntdq\",\n+                                                 \"mmx\", \"fxsr\"];\n \n-const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\\0\", \"hvx-double\\0\"];\n+const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\", \"hvx-double\"];\n \n-const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\\0\",\n-                                                     \"power8-altivec\\0\", \"power9-altivec\\0\",\n-                                                     \"power8-vector\\0\", \"power9-vector\\0\",\n-                                                     \"vsx\\0\"];\n+const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\",\n+                                                     \"power8-altivec\", \"power9-altivec\",\n+                                                     \"power8-vector\", \"power9-vector\",\n+                                                     \"vsx\"];\n \n-const MIPS_WHITELIST: &'static [&'static str] = &[\"msa\\0\"];\n+const MIPS_WHITELIST: &'static [&'static str] = &[\"msa\"];\n+\n+pub fn to_llvm_feature(s: &str) -> &str {\n+    match s {\n+        \"pclmulqdq\" => \"pclmul\",\n+        s => s,\n+    }\n+}\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n-    let whitelist = target_feature_whitelist(sess);\n     let target_machine = create_target_machine(sess);\n-    let mut features = Vec::new();\n-    for feat in whitelist {\n-        if unsafe { llvm::LLVMRustHasFeature(target_machine, feat.as_ptr()) } {\n-            features.push(Symbol::intern(feat.to_str().unwrap()));\n-        }\n-    }\n-    features\n+    target_feature_whitelist(sess)\n+        .iter()\n+        .filter(|feature| {\n+            let llvm_feature = to_llvm_feature(feature);\n+            let cstr = CString::new(llvm_feature).unwrap();\n+            unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) }\n+        })\n+        .map(|feature| Symbol::intern(feature)).collect()\n }\n \n-pub fn target_feature_whitelist(sess: &Session) -> Vec<&CStr> {\n-    let whitelist = match &*sess.target.target.arch {\n+pub fn target_feature_whitelist(sess: &Session) -> &'static [&'static str] {\n+    match &*sess.target.target.arch {\n         \"arm\" => ARM_WHITELIST,\n         \"aarch64\" => AARCH64_WHITELIST,\n         \"x86\" | \"x86_64\" => X86_WHITELIST,\n         \"hexagon\" => HEXAGON_WHITELIST,\n         \"mips\" | \"mips64\" => MIPS_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n         _ => &[],\n-    };\n-    whitelist.iter().map(|m| {\n-        CStr::from_bytes_with_nul(m.as_bytes()).unwrap()\n-    }).collect()\n+    }\n }\n \n pub fn print_version() {"}]}