{"sha": "b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "node_id": "C_kwDOAAsO6NoAKGIyYWUyNGU2YTFiY2U5MTk3MjQ2ZTg2MjgxYmE3ZDFiMDQwODRkOWQ", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-06T12:44:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-13T22:47:06Z"}, "message": "Rename `debugging_opts` to `unstable_opts`\n\nThis is no longer used only for debugging options (e.g. `-Zoutput-width`, `-Zallow-features`).\nRename it to be more clear.", "tree": {"sha": "9f512b28c8541a25ad2c0c6b7570b43f04f150ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f512b28c8541a25ad2c0c6b7570b43f04f150ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "html_url": "https://github.com/rust-lang/rust/commit/b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43388812a61d455645acfd3736ab41c0b2f259e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/43388812a61d455645acfd3736ab41c0b2f259e3", "html_url": "https://github.com/rust-lang/rust/commit/43388812a61d455645acfd3736ab41c0b2f259e3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6d321c7b298a730464bbf88e4e723afc52a7e501", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn codegen(\n             unwind_context,\n             kind,\n             tcx.lang_items().oom().is_some(),\n-            tcx.sess.opts.debugging_opts.oom,\n+            tcx.sess.opts.unstable_opts.oom,\n         );\n         true\n     } else {"}, {"sha": "b24e49e94c91ecfa850ec44c48dc5f1b368b7114", "filename": "src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n         };\n \n-        if let Some(false) = fx.tcx.sess.opts.debugging_opts.saturating_float_casts {\n+        if let Some(false) = fx.tcx.sess.opts.unstable_opts.saturating_float_casts {\n             return val;\n         }\n "}, {"sha": "bbcb9591373dd7192f2e8b7f05a1063fbd0ed348", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> DebugContext<'tcx> {\n             // In order to have a good line stepping behavior in debugger, we overwrite debug\n             // locations of macro expansions with that of the outermost expansion site\n             // (unless the crate is being compiled with `-Z debug-macros`).\n-            let span = if !span.from_expansion() || tcx.sess.opts.debugging_opts.debug_macros {\n+            let span = if !span.from_expansion() || tcx.sess.opts.unstable_opts.debug_macros {\n                 span\n             } else {\n                 // Walk up the macro expansion chain until we reach a non-expanded span."}, {"sha": "3cd1ef5639ef9f2e33f9c06e606ce4701fbf1ec2", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "patch": "@@ -33,7 +33,7 @@ fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectM\n     // Unlike cg_llvm, cg_clif defaults to disabling -Zfunction-sections. For cg_llvm binary size\n     // is important, while cg_clif cares more about compilation times. Enabling -Zfunction-sections\n     // can easily double the amount of time necessary to perform linking.\n-    builder.per_function_section(sess.opts.debugging_opts.function_sections.unwrap_or(false));\n+    builder.per_function_section(sess.opts.unstable_opts.function_sections.unwrap_or(false));\n     ObjectModule::new(builder)\n }\n "}, {"sha": "eafae1cdc8af0f2aa3713fd1400e5c7207cf0eee", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ae24e6a1bce9197246e86281ba7d1b04084d9d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=b2ae24e6a1bce9197246e86281ba7d1b04084d9d", "patch": "@@ -676,7 +676,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 && !layout.might_permit_raw_init(\n                     fx,\n                     InitKind::Zero,\n-                    fx.tcx.sess.opts.debugging_opts.strict_init_checks) {\n+                    fx.tcx.sess.opts.unstable_opts.strict_init_checks) {\n \n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n@@ -692,7 +692,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 && !layout.might_permit_raw_init(\n                     fx,\n                     InitKind::Uninit,\n-                    fx.tcx.sess.opts.debugging_opts.strict_init_checks) {\n+                    fx.tcx.sess.opts.unstable_opts.strict_init_checks) {\n \n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic("}]}