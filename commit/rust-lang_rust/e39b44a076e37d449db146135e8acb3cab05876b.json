{"sha": "e39b44a076e37d449db146135e8acb3cab05876b", "node_id": "C_kwDOAAsO6NoAKGUzOWI0NGEwNzZlMzdkNDQ5ZGIxNDYxMzVlOGFjYjNjYWIwNTg3NmI", "commit": {"author": {"name": "David CARLIER", "email": "devnexen@gmail.com", "date": "2022-06-17T19:31:59Z"}, "committer": {"name": "David CARLIER", "email": "devnexen@gmail.com", "date": "2022-07-25T22:25:15Z"}, "message": "Implement `fs::get_path` for FreeBSD.\n\nUsing `F_KINFO` fcntl flag, the kf_structsize field\nneeds to be set beforehand for that effect.", "tree": {"sha": "fa638bded2d89f4e61fae4cd995c91c905e0eb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa638bded2d89f4e61fae4cd995c91c905e0eb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e39b44a076e37d449db146135e8acb3cab05876b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e39b44a076e37d449db146135e8acb3cab05876b", "html_url": "https://github.com/rust-lang/rust/commit/e39b44a076e37d449db146135e8acb3cab05876b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e39b44a076e37d449db146135e8acb3cab05876b/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a990f7c0fe4d00042269beb7ee67d0082de4e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a990f7c0fe4d00042269beb7ee67d0082de4e07", "html_url": "https://github.com/rust-lang/rust/commit/2a990f7c0fe4d00042269beb7ee67d0082de4e07"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "71522865b7dcfda18c64d19ba91ec7b036150f2f", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e39b44a076e37d449db146135e8acb3cab05876b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39b44a076e37d449db146135e8acb3cab05876b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=e39b44a076e37d449db146135e8acb3cab05876b", "patch": "@@ -1126,6 +1126,19 @@ impl fmt::Debug for File {\n             Some(PathBuf::from(OsString::from_vec(buf)))\n         }\n \n+        #[cfg(all(target_os = \"freebsd\", target_arch = \"x86_64\"))]\n+        fn get_path(fd: c_int) -> Option<PathBuf> {\n+            let info = Box::<libc::kinfo_file>::new_zeroed();\n+            let mut info = unsafe { info.assume_init() };\n+            info.kf_structsize = mem::size_of::<libc::kinfo_file>() as libc::c_int;\n+            let n = unsafe { libc::fcntl(fd, libc::F_KINFO, &mut *info) };\n+            if n == -1 {\n+                return None;\n+            }\n+            let buf = unsafe { CStr::from_ptr(info.kf_path.as_mut_ptr()).to_bytes().to_vec() };\n+            Some(PathBuf::from(OsString::from_vec(buf)))\n+        }\n+\n         #[cfg(target_os = \"vxworks\")]\n         fn get_path(fd: c_int) -> Option<PathBuf> {\n             let mut buf = vec![0; libc::PATH_MAX as usize];\n@@ -1142,6 +1155,7 @@ impl fmt::Debug for File {\n             target_os = \"linux\",\n             target_os = \"macos\",\n             target_os = \"vxworks\",\n+            all(target_os = \"freebsd\", target_arch = \"x86_64\"),\n             target_os = \"netbsd\"\n         )))]\n         fn get_path(_fd: c_int) -> Option<PathBuf> {"}]}