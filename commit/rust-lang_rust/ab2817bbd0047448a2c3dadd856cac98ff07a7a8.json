{"sha": "ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjgxN2JiZDAwNDc0NDhhMmMzZGFkZDg1NmNhYzk4ZmYwN2E3YTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T23:49:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T23:49:45Z"}, "message": "Rollup merge of #70264 - tirr-c:issue-69789-mut-suggestion, r=estebank\n\nFix invalid suggestion on `&mut` iterators yielding `&` references\n\nFixes #69789.\n\nrustc suggested an invalid code when `&` reference from `&mut` iterator is mutated. The compiler knew we're mutating a value behind `&` reference, but as the assignment RHS is from desugaring, it could only see the iterator expression from source and inserted `mut` there.\n\nr? @estebank", "tree": {"sha": "3f826a13b1c9c596dcadf3d8cee34b37a517100a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f826a13b1c9c596dcadf3d8cee34b37a517100a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeUsZCRBK7hj4Ov3rIwAAdHIIAIHCirp2hScNVJ/aWRDb6Ui2\nA8l3ZunMpfLF9A4izVEv4ul/jAoKF93+x8jOdnWh3mL7sfErFNEVKaYCF1mMy7RC\n3XluQMCUauymfynsUsClIXSidfGL+EzZAjdIxrQXfmVj0lgk/HvejMLy1AVg8FIv\nWAk7bR5ECjtUEVDzu0dxRE4mzeudt64YEHq6V8SNSF682UPgQmX06EIJQPPuzqLh\nj7x6FNWB/PgWHYoV2puCo0R4UNGLYE6FMBd6k69oLTa7EbC+rj3uQhnGr1QVmL1E\nY60TesYbD12byjmSU5yYrPeGdq3lue8XuxISVVllPoXn2pJPf1WJc9aZ0l+je7U=\n=XyVO\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f826a13b1c9c596dcadf3d8cee34b37a517100a\nparent 7a47df81697ae1db7b7545b11a06e00e989ccd87\nparent 1e5d81de1d8485e9ce2995bc6b1559f25c4d86e5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585007385 +0100\ncommitter GitHub <noreply@github.com> 1585007385 +0100\n\nRollup merge of #70264 - tirr-c:issue-69789-mut-suggestion, r=estebank\n\nFix invalid suggestion on `&mut` iterators yielding `&` references\n\nFixes #69789.\n\nrustc suggested an invalid code when `&` reference from `&mut` iterator is mutated. The compiler knew we're mutating a value behind `&` reference, but as the assignment RHS is from desugaring, it could only see the iterator expression from source and inserted `mut` there.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "html_url": "https://github.com/rust-lang/rust/commit/ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a47df81697ae1db7b7545b11a06e00e989ccd87", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a47df81697ae1db7b7545b11a06e00e989ccd87", "html_url": "https://github.com/rust-lang/rust/commit/7a47df81697ae1db7b7545b11a06e00e989ccd87"}, {"sha": "1e5d81de1d8485e9ce2995bc6b1559f25c4d86e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5d81de1d8485e9ce2995bc6b1559f25c4d86e5", "html_url": "https://github.com/rust-lang/rust/commit/1e5d81de1d8485e9ce2995bc6b1559f25c4d86e5"}], "stats": {"total": 105, "additions": 82, "deletions": 23}, "files": [{"sha": "ee654431d8892854458402238877bd066a13529e", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "patch": "@@ -1,9 +1,10 @@\n-use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location, ReadOnlyBodyAndCache};\n+use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location};\n use rustc::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_index::vec::Idx;\n+use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n \n@@ -338,24 +339,53 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n-                        let suggestion = match local_decl.local_info {\n+                        let label = match local_decl.local_info {\n                             LocalInfo::User(ClearCrossCrate::Set(\n                                 mir::BindingForm::ImplicitSelf(_),\n-                            )) => Some(suggest_ampmut_self(self.infcx.tcx, local_decl)),\n+                            )) => {\n+                                let (span, suggestion) =\n+                                    suggest_ampmut_self(self.infcx.tcx, local_decl);\n+                                Some((true, span, suggestion))\n+                            }\n \n                             LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n                                 mir::VarBindingForm {\n                                     binding_mode: ty::BindingMode::BindByValue(_),\n                                     opt_ty_info,\n                                     ..\n                                 },\n-                            ))) => Some(suggest_ampmut(\n-                                self.infcx.tcx,\n-                                self.body,\n-                                local,\n-                                local_decl,\n-                                opt_ty_info,\n-                            )),\n+                            ))) => {\n+                                // check if the RHS is from desugaring\n+                                let locations = self.body.find_assignments(local);\n+                                let opt_assignment_rhs_span = locations\n+                                    .first()\n+                                    .map(|&location| self.body.source_info(location).span);\n+                                let opt_desugaring_kind =\n+                                    opt_assignment_rhs_span.and_then(|span| span.desugaring_kind());\n+                                match opt_desugaring_kind {\n+                                    // on for loops, RHS points to the iterator part\n+                                    Some(DesugaringKind::ForLoop) => Some((\n+                                        false,\n+                                        opt_assignment_rhs_span.unwrap(),\n+                                        format!(\n+                                            \"this iterator yields `{SIGIL}` {DESC}s\",\n+                                            SIGIL = pointer_sigil,\n+                                            DESC = pointer_desc\n+                                        ),\n+                                    )),\n+                                    // don't create labels for compiler-generated spans\n+                                    Some(_) => None,\n+                                    None => {\n+                                        let (span, suggestion) = suggest_ampmut(\n+                                            self.infcx.tcx,\n+                                            local_decl,\n+                                            opt_assignment_rhs_span,\n+                                            opt_ty_info,\n+                                        );\n+                                        Some((true, span, suggestion))\n+                                    }\n+                                }\n+                            }\n \n                             LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n                                 mir::VarBindingForm {\n@@ -365,7 +395,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             ))) => {\n                                 let pattern_span = local_decl.source_info.span;\n                                 suggest_ref_mut(self.infcx.tcx, pattern_span)\n-                                    .map(|replacement| (pattern_span, replacement))\n+                                    .map(|replacement| (true, pattern_span, replacement))\n                             }\n \n                             LocalInfo::User(ClearCrossCrate::Clear) => {\n@@ -375,13 +405,22 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             _ => unreachable!(),\n                         };\n \n-                        if let Some((err_help_span, suggested_code)) = suggestion {\n-                            err.span_suggestion(\n-                                err_help_span,\n-                                &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n-                                suggested_code,\n-                                Applicability::MachineApplicable,\n-                            );\n+                        match label {\n+                            Some((true, err_help_span, suggested_code)) => {\n+                                err.span_suggestion(\n+                                    err_help_span,\n+                                    &format!(\n+                                        \"consider changing this to be a mutable {}\",\n+                                        pointer_desc\n+                                    ),\n+                                    suggested_code,\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            Some((false, err_label_span, message)) => {\n+                                err.span_label(err_label_span, &message);\n+                            }\n+                            None => {}\n                         }\n                         err.span_label(\n                             span,\n@@ -581,14 +620,11 @@ fn suggest_ampmut_self<'tcx>(\n // by trying (3.), then (2.) and finally falling back on (1.).\n fn suggest_ampmut<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n-    local: Local,\n     local_decl: &mir::LocalDecl<'tcx>,\n+    opt_assignment_rhs_span: Option<Span>,\n     opt_ty_info: Option<Span>,\n ) -> (Span, String) {\n-    let locations = body.find_assignments(local);\n-    if !locations.is_empty() {\n-        let assignment_rhs_span = body.source_info(locations[0]).span;\n+    if let Some(assignment_rhs_span) = opt_assignment_rhs_span {\n         if let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span) {\n             if let (true, Some(ws_pos)) =\n                 (src.starts_with(\"&'\"), src.find(|c: char| -> bool { c.is_whitespace() }))"}, {"sha": "f6d0e9e04d3212472f07cf9eeae7f9a49fae6144", "filename": "src/test/ui/borrowck/issue-69789-iterator-mut-suggestion.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/src%2Ftest%2Fui%2Fborrowck%2Fissue-69789-iterator-mut-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/src%2Ftest%2Fui%2Fborrowck%2Fissue-69789-iterator-mut-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-69789-iterator-mut-suggestion.rs?ref=ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #69789: rustc generated an invalid suggestion\n+// when `&` reference from `&mut` iterator is mutated.\n+\n+fn main() {\n+    for item in &mut std::iter::empty::<&'static ()>() {\n+        //~^ NOTE this iterator yields `&` references\n+        *item = ();\n+        //~^ ERROR cannot assign\n+        //~| NOTE  cannot be written\n+    }\n+}"}, {"sha": "d2865ffd196a50f67d4dd910c772982a975504a2", "filename": "src/test/ui/borrowck/issue-69789-iterator-mut-suggestion.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/src%2Ftest%2Fui%2Fborrowck%2Fissue-69789-iterator-mut-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab2817bbd0047448a2c3dadd856cac98ff07a7a8/src%2Ftest%2Fui%2Fborrowck%2Fissue-69789-iterator-mut-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-69789-iterator-mut-suggestion.stderr?ref=ab2817bbd0047448a2c3dadd856cac98ff07a7a8", "patch": "@@ -0,0 +1,12 @@\n+error[E0594]: cannot assign to `*item` which is behind a `&` reference\n+  --> $DIR/issue-69789-iterator-mut-suggestion.rs:7:9\n+   |\n+LL |     for item in &mut std::iter::empty::<&'static ()>() {\n+   |                 -------------------------------------- this iterator yields `&` references\n+LL |\n+LL |         *item = ();\n+   |         ^^^^^^^^^^ `item` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}]}