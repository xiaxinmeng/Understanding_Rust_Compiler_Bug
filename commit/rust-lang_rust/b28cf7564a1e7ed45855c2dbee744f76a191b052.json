{"sha": "b28cf7564a1e7ed45855c2dbee744f76a191b052", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOGNmNzU2NGExZTdlZDQ1ODU1YzJkYmVlNzQ0Zjc2YTE5MWIwNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-16T17:18:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-16T17:18:23Z"}, "message": "Auto merge of #41853 - Keruspe:install, r=alexcrichton\n\nrustbuild: add support for --bindir and --sysconfdir\n\nThis depends on https://github.com/rust-lang/rust-installer/pull/59 and we'll need to udpate the rust-installer submodule once it gets merged for it to work\n\nFixes #41644", "tree": {"sha": "5673163c2972b74812124bd27f2e5b05b4d0e2a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5673163c2972b74812124bd27f2e5b05b4d0e2a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28cf7564a1e7ed45855c2dbee744f76a191b052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28cf7564a1e7ed45855c2dbee744f76a191b052", "html_url": "https://github.com/rust-lang/rust/commit/b28cf7564a1e7ed45855c2dbee744f76a191b052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28cf7564a1e7ed45855c2dbee744f76a191b052/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d09a0eb5d201c831d19f3fe93fbe636eca7d97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d09a0eb5d201c831d19f3fe93fbe636eca7d97d", "html_url": "https://github.com/rust-lang/rust/commit/4d09a0eb5d201c831d19f3fe93fbe636eca7d97d"}, {"sha": "08cc29e7628628d3511870ef59d4c4b6efe96a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/08cc29e7628628d3511870ef59d4c4b6efe96a74", "html_url": "https://github.com/rust-lang/rust/commit/08cc29e7628628d3511870ef59d4c4b6efe96a74"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "af59d5b0bb88977d2c512af7fa1f1c096ed398ea", "filename": "configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b28cf7564a1e7ed45855c2dbee744f76a191b052/configure", "raw_url": "https://github.com/rust-lang/rust/raw/b28cf7564a1e7ed45855c2dbee744f76a191b052/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=b28cf7564a1e7ed45855c2dbee744f76a191b052", "patch": "@@ -519,6 +519,7 @@ valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n valopt_nosave docdir \"${CFG_PREFIX}/share/doc/rust\" \"install documentation in PATH\"\n+valopt_nosave bindir \"${CFG_PREFIX}/bin\" \"install binaries\"\n \n # On Windows this determines root of the subtree for target libraries.\n # Host runtime libs always go to 'bin'.\n@@ -710,6 +711,7 @@ envopt LDFLAGS\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n CFG_DOCDIR=${CFG_DOCDIR%/}\n+CFG_BINDIR=${CFG_BINDIR%/}\n CFG_HOST=\"$(echo $CFG_HOST | tr ',' ' ')\"\n CFG_TARGET=\"$(echo $CFG_TARGET | tr ',' ' ')\"\n \n@@ -750,6 +752,7 @@ putvar CFG_X86_64_LINUX_ANDROID_NDK\n putvar CFG_NACL_CROSS_PATH\n putvar CFG_MANDIR\n putvar CFG_DOCDIR\n+putvar CFG_BINDIR\n putvar CFG_USING_LIBCPP\n \n msg"}, {"sha": "c9de8f9900865a7f12e1417f8d3955f21a0599d1", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=b28cf7564a1e7ed45855c2dbee744f76a191b052", "patch": "@@ -345,7 +345,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"lzma-sys\"\n-version = \"0.1.3\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1139,7 +1139,7 @@ name = \"xz2\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lzma-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lzma-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1173,7 +1173,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88ee81885f9f04bff991e306fea7c1c60a5f0f9e409e99f6b40e3311a3363135\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n-\"checksum lzma-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c5eaaa53b35fa17482ee2c001b04242827b47ae0faba72663fee3dee32366248\"\n+\"checksum lzma-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedff6a5cbb24494ec6ee4784e9ac5c187161fede04c7767d49bf87544013afa\"\n \"checksum mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1e2e9d848514dcfad4195788d0d42ae5153a477c191d75d5b84fab10f222fbd\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\""}, {"sha": "0fb597564e33de15c2bc6defc8fd35273dfb43df", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b28cf7564a1e7ed45855c2dbee744f76a191b052", "patch": "@@ -99,7 +99,9 @@ pub struct Config {\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n+    pub sysconfdir: Option<PathBuf>,\n     pub docdir: Option<PathBuf>,\n+    pub bindir: Option<PathBuf>,\n     pub libdir: Option<PathBuf>,\n     pub libdir_relative: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n@@ -165,9 +167,11 @@ struct Build {\n #[derive(RustcDecodable, Default, Clone)]\n struct Install {\n     prefix: Option<String>,\n-    mandir: Option<String>,\n+    sysconfdir: Option<String>,\n     docdir: Option<String>,\n+    bindir: Option<String>,\n     libdir: Option<String>,\n+    mandir: Option<String>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -315,9 +319,11 @@ impl Config {\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n-            config.mandir = install.mandir.clone().map(PathBuf::from);\n+            config.sysconfdir = install.sysconfdir.clone().map(PathBuf::from);\n             config.docdir = install.docdir.clone().map(PathBuf::from);\n+            config.bindir = install.bindir.clone().map(PathBuf::from);\n             config.libdir = install.libdir.clone().map(PathBuf::from);\n+            config.mandir = install.mandir.clone().map(PathBuf::from);\n         }\n \n         if let Some(ref llvm) = toml.llvm {\n@@ -523,9 +529,15 @@ impl Config {\n                 \"CFG_PREFIX\" => {\n                     self.prefix = Some(PathBuf::from(value));\n                 }\n+                \"CFG_SYSCONFDIR\" => {\n+                    self.sysconfdir = Some(PathBuf::from(value));\n+                }\n                 \"CFG_DOCDIR\" => {\n                     self.docdir = Some(PathBuf::from(value));\n                 }\n+                \"CFG_BINDIR\" => {\n+                    self.bindir = Some(PathBuf::from(value));\n+                }\n                 \"CFG_LIBDIR\" => {\n                     self.libdir = Some(PathBuf::from(value));\n                 }"}, {"sha": "df180be4e27ab0836b6df75d4b939aeac3c4fe7d", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=b28cf7564a1e7ed45855c2dbee744f76a191b052", "patch": "@@ -160,15 +160,22 @@\n # Instead of installing to /usr/local, install to this path instead.\n #prefix = \"/usr/local\"\n \n+# Where to install system configuration files\n+# If this is a relative path, it will get installed in `prefix` above\n+#sysconfdir = \"/etc\"\n+\n+# Where to install documentation in `prefix` above\n+#docdir = \"share/doc/rust\"\n+\n+# Where to install binaries in `prefix` above\n+#bindir = \"bin\"\n+\n # Where to install libraries in `prefix` above\n #libdir = \"lib\"\n \n # Where to install man pages in `prefix` above\n #mandir = \"share/man\"\n \n-# Where to install documentation in `prefix` above\n-#docdir = \"share/doc/rust\"\n-\n # =============================================================================\n # Options for compiling Rust code itself\n # ============================================================================="}, {"sha": "386b001971bad43c978fc91984b9537c119f41ae", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28cf7564a1e7ed45855c2dbee744f76a191b052/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=b28cf7564a1e7ed45855c2dbee744f76a191b052", "patch": "@@ -24,60 +24,76 @@ use dist::{sanitize_sh, tmpdir};\n /// Installs everything.\n pub fn install(build: &Build, stage: u32, host: &str) {\n     let prefix_default = PathBuf::from(\"/usr/local\");\n+    let sysconfdir_default = PathBuf::from(\"/etc\");\n     let docdir_default = PathBuf::from(\"share/doc/rust\");\n-    let mandir_default = PathBuf::from(\"share/man\");\n+    let bindir_default = PathBuf::from(\"bin\");\n     let libdir_default = PathBuf::from(\"lib\");\n+    let mandir_default = PathBuf::from(\"share/man\");\n     let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n+    let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n     let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n+    let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n     let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n     let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n \n+    let sysconfdir = prefix.join(sysconfdir);\n     let docdir = prefix.join(docdir);\n+    let bindir = prefix.join(bindir);\n     let libdir = prefix.join(libdir);\n     let mandir = prefix.join(mandir);\n \n     let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n \n     let prefix = add_destdir(&prefix, &destdir);\n+    let sysconfdir = add_destdir(&sysconfdir, &destdir);\n     let docdir = add_destdir(&docdir, &destdir);\n+    let bindir = add_destdir(&bindir, &destdir);\n     let libdir = add_destdir(&libdir, &destdir);\n     let mandir = add_destdir(&mandir, &destdir);\n \n     let empty_dir = build.out.join(\"tmp/empty_dir\");\n     t!(fs::create_dir_all(&empty_dir));\n     if build.config.docs {\n         install_sh(&build, \"docs\", \"rust-docs\", &build.rust_package_vers(),\n-                   stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+                   stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n+                   &mandir, &empty_dir);\n     }\n \n     for target in build.config.target.iter() {\n         install_sh(&build, \"std\", \"rust-std\", &build.rust_package_vers(),\n-                   stage, target, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+                   stage, target, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n+                   &mandir, &empty_dir);\n     }\n \n     if build.config.extended {\n         install_sh(&build, \"cargo\", \"cargo\", &build.cargo_package_vers(),\n-                   stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+                   stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n+                   &mandir, &empty_dir);\n         install_sh(&build, \"rls\", \"rls\", &build.rls_package_vers(),\n-                   stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+                   stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n+                   &mandir, &empty_dir);\n     }\n \n     install_sh(&build, \"rustc\", \"rustc\", &build.rust_package_vers(),\n-               stage, host, &prefix, &docdir, &libdir, &mandir, &empty_dir);\n+               stage, host, &prefix, &sysconfdir, &docdir, &bindir, &libdir,\n+               &mandir, &empty_dir);\n \n     t!(fs::remove_dir_all(&empty_dir));\n }\n \n fn install_sh(build: &Build, package: &str, name: &str, version: &str, stage: u32, host: &str,\n-              prefix: &Path, docdir: &Path, libdir: &Path, mandir: &Path, empty_dir: &Path) {\n+              prefix: &Path, sysconfdir: &Path, docdir: &Path, bindir: &Path, libdir: &Path,\n+              mandir: &Path, empty_dir: &Path) {\n     println!(\"Install {} stage{} ({})\", package, stage, host);\n     let package_name = format!(\"{}-{}-{}\", name, version, host);\n \n     let mut cmd = Command::new(\"sh\");\n     cmd.current_dir(empty_dir)\n        .arg(sanitize_sh(&tmpdir(build).join(&package_name).join(\"install.sh\")))\n        .arg(format!(\"--prefix={}\", sanitize_sh(prefix)))\n+       .arg(format!(\"--sysconfdir={}\", sanitize_sh(sysconfdir)))\n        .arg(format!(\"--docdir={}\", sanitize_sh(docdir)))\n+       .arg(format!(\"--bindir={}\", sanitize_sh(bindir)))\n        .arg(format!(\"--libdir={}\", sanitize_sh(libdir)))\n        .arg(format!(\"--mandir={}\", sanitize_sh(mandir)))\n        .arg(\"--disable-ldconfig\");"}]}