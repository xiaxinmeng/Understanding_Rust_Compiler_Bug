{"sha": "a5e8e6ec2df58bd50963af57bbd08d0526f119db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZThlNmVjMmRmNThiZDUwOTYzYWY1N2JiZDA4ZDA1MjZmMTE5ZGI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-19T03:56:14Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-13T03:25:50Z"}, "message": "Pluralize 'parenthesis' correctly\n\nIt's 'parentheses', not 'parenthesis', when you have more than one.", "tree": {"sha": "16658205711b74d5b15d6245d9da8dce3122fde1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16658205711b74d5b15d6245d9da8dce3122fde1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e8e6ec2df58bd50963af57bbd08d0526f119db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e8e6ec2df58bd50963af57bbd08d0526f119db", "html_url": "https://github.com/rust-lang/rust/commit/a5e8e6ec2df58bd50963af57bbd08d0526f119db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e8e6ec2df58bd50963af57bbd08d0526f119db/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d9df54ee682d0b76909d27938b30c51ca5ec70", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d9df54ee682d0b76909d27938b30c51ca5ec70", "html_url": "https://github.com/rust-lang/rust/commit/f3d9df54ee682d0b76909d27938b30c51ca5ec70"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "a7670624f307ce5389b5f794c64478e780a64256", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5e8e6ec2df58bd50963af57bbd08d0526f119db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e8e6ec2df58bd50963af57bbd08d0526f119db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=a5e8e6ec2df58bd50963af57bbd08d0526f119db", "patch": "@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // More generally, the expected type wants a tuple variant with one field of an\n         // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n         // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n-        let missing_parenthesis = match (&expected.kind(), fields, had_err) {\n+        let missing_parentheses = match (&expected.kind(), fields, had_err) {\n             // #67037: only do this if we could successfully type-check the expected type against\n             // the tuple struct pattern. Otherwise the substs could get out of range on e.g.,\n             // `let P() = U;` where `P != U` with `struct P<T>(T);`.\n@@ -1015,13 +1015,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => false,\n         };\n-        if missing_parenthesis {\n+        if missing_parentheses {\n             let (left, right) = match subpats {\n                 // This is the zero case; we aim to get the \"hi\" part of the `QPath`'s\n                 // span as the \"lo\" and then the \"hi\" part of the pattern's span as the \"hi\".\n                 // This looks like:\n                 //\n-                // help: missing parenthesis\n+                // help: missing parentheses\n                 //   |\n                 // L |     let A(()) = A(());\n                 //   |          ^  ^\n@@ -1030,14 +1030,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // last sub-pattern. In the case of `A(x)` the first and last may coincide.\n                 // This looks like:\n                 //\n-                // help: missing parenthesis\n+                // help: missing parentheses\n                 //   |\n                 // L |     let A((x, y)) = A((1, 2));\n                 //   |           ^    ^\n                 [first, ..] => (first.span.shrink_to_lo(), subpats.last().unwrap().span),\n             };\n             err.multipart_suggestion(\n-                \"missing parenthesis\",\n+                \"missing parentheses\",\n                 vec![(left, \"(\".to_string()), (right.shrink_to_hi(), \")\".to_string())],\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "965cf28c79f9115ad1305fef248cb7d1cb991fdb", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5e8e6ec2df58bd50963af57bbd08d0526f119db/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5e8e6ec2df58bd50963af57bbd08d0526f119db/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=a5e8e6ec2df58bd50963af57bbd08d0526f119db", "patch": "@@ -43,7 +43,7 @@ LL |     Orange((String, String)),\n LL |         Fruit::Orange(a, b) => {},\n    |         ^^^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n    |\n-help: missing parenthesis\n+help: missing parentheses\n    |\n LL |         Fruit::Orange((a, b)) => {},\n    |                       ^    ^\n@@ -57,7 +57,7 @@ LL |     Banana(()),\n LL |         Fruit::Banana() => {},\n    |         ^^^^^^^^^^^^^^^ expected 1 field, found 0\n    |\n-help: missing parenthesis\n+help: missing parentheses\n    |\n LL |         Fruit::Banana(()) => {},\n    |                      ^  ^"}]}