{"sha": "6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYzQzZGIwYjc0M2QzZjAzNDVlMjdiMWQ5MDAyZWNkYzdmZjFkZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T00:20:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T22:59:01Z"}, "message": "libsyntax_pos: Unconfigure tests during normal build", "tree": {"sha": "e9acf21d32cd031becb883fd9e04642309064f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9acf21d32cd031becb883fd9e04642309064f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "html_url": "https://github.com/rust-lang/rust/commit/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5947db1c535242a0a83d4e1ad9932044e4a8169b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5947db1c535242a0a83d4e1ad9932044e4a8169b", "html_url": "https://github.com/rust-lang/rust/commit/5947db1c535242a0a83d4e1ad9932044e4a8169b"}], "stats": {"total": 421, "additions": 210, "deletions": 211}, "files": [{"sha": "e01a14f14a8488776904ce0d2100dc5d7881213c", "filename": "src/libsyntax_pos/analyze_source_file.rs", "status": "modified", "additions": 3, "deletions": 152, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fanalyze_source_file.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -1,6 +1,9 @@\n use unicode_width::UnicodeWidthChar;\n use super::*;\n \n+#[cfg(test)]\n+mod tests;\n+\n /// Finds all newlines, multi-byte characters, and non-narrow characters in a\n /// SourceFile.\n ///\n@@ -271,155 +274,3 @@ fn analyze_source_file_generic(src: &str,\n \n     i - scan_len\n }\n-\n-\n-\n-macro_rules! test {\n-    (case: $test_name:ident,\n-     text: $text:expr,\n-     source_file_start_pos: $source_file_start_pos:expr,\n-     lines: $lines:expr,\n-     multi_byte_chars: $multi_byte_chars:expr,\n-     non_narrow_chars: $non_narrow_chars:expr,) => (\n-\n-    #[test]\n-    fn $test_name() {\n-\n-        let (lines, multi_byte_chars, non_narrow_chars) =\n-            analyze_source_file($text, BytePos($source_file_start_pos));\n-\n-        let expected_lines: Vec<BytePos> = $lines\n-            .into_iter()\n-            .map(|pos| BytePos(pos))\n-            .collect();\n-\n-        assert_eq!(lines, expected_lines);\n-\n-        let expected_mbcs: Vec<MultiByteChar> = $multi_byte_chars\n-            .into_iter()\n-            .map(|(pos, bytes)| MultiByteChar {\n-                pos: BytePos(pos),\n-                bytes,\n-            })\n-            .collect();\n-\n-        assert_eq!(multi_byte_chars, expected_mbcs);\n-\n-        let expected_nncs: Vec<NonNarrowChar> = $non_narrow_chars\n-            .into_iter()\n-            .map(|(pos, width)| {\n-                NonNarrowChar::new(BytePos(pos), width)\n-            })\n-            .collect();\n-\n-        assert_eq!(non_narrow_chars, expected_nncs);\n-    })\n-}\n-\n-test!(\n-    case: empty_text,\n-    text: \"\",\n-    source_file_start_pos: 0,\n-    lines: vec![],\n-    multi_byte_chars: vec![],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: newlines_short,\n-    text: \"a\\nc\",\n-    source_file_start_pos: 0,\n-    lines: vec![0, 2],\n-    multi_byte_chars: vec![],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: newlines_long,\n-    text: \"012345678\\nabcdef012345678\\na\",\n-    source_file_start_pos: 0,\n-    lines: vec![0, 10, 26],\n-    multi_byte_chars: vec![],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: newline_and_multi_byte_char_in_same_chunk,\n-    text: \"01234\u03b2789\\nbcdef0123456789abcdef\",\n-    source_file_start_pos: 0,\n-    lines: vec![0, 11],\n-    multi_byte_chars: vec![(5, 2)],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: newline_and_control_char_in_same_chunk,\n-    text: \"01234\\u{07}6789\\nbcdef0123456789abcdef\",\n-    source_file_start_pos: 0,\n-    lines: vec![0, 11],\n-    multi_byte_chars: vec![],\n-    non_narrow_chars: vec![(5, 0)],\n-);\n-\n-test!(\n-    case: multi_byte_char_short,\n-    text: \"a\u03b2c\",\n-    source_file_start_pos: 0,\n-    lines: vec![0],\n-    multi_byte_chars: vec![(1, 2)],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: multi_byte_char_long,\n-    text: \"0123456789abc\u0394f012345\u03b2\",\n-    source_file_start_pos: 0,\n-    lines: vec![0],\n-    multi_byte_chars: vec![(13, 2), (22, 2)],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: multi_byte_char_across_chunk_boundary,\n-    text: \"0123456789abcde\u0394123456789abcdef01234\",\n-    source_file_start_pos: 0,\n-    lines: vec![0],\n-    multi_byte_chars: vec![(15, 2)],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: multi_byte_char_across_chunk_boundary_tail,\n-    text: \"0123456789abcde\u0394....\",\n-    source_file_start_pos: 0,\n-    lines: vec![0],\n-    multi_byte_chars: vec![(15, 2)],\n-    non_narrow_chars: vec![],\n-);\n-\n-test!(\n-    case: non_narrow_short,\n-    text: \"0\\t2\",\n-    source_file_start_pos: 0,\n-    lines: vec![0],\n-    multi_byte_chars: vec![],\n-    non_narrow_chars: vec![(1, 4)],\n-);\n-\n-test!(\n-    case: non_narrow_long,\n-    text: \"01\\t3456789abcdef01234567\\u{07}9\",\n-    source_file_start_pos: 0,\n-    lines: vec![0],\n-    multi_byte_chars: vec![],\n-    non_narrow_chars: vec![(2, 4), (24, 0)],\n-);\n-\n-test!(\n-    case: output_offset_all,\n-    text: \"01\\t345\\n789abc\u0394f01234567\\u{07}9\\nbc\u0394f\",\n-    source_file_start_pos: 1000,\n-    lines: vec![0 + 1000, 7 + 1000, 27 + 1000],\n-    multi_byte_chars: vec![(13 + 1000, 2), (29 + 1000, 2)],\n-    non_narrow_chars: vec![(2 + 1000, 4), (24 + 1000, 0)],\n-);"}, {"sha": "fd485a7f3a92f5f2fe9f61a039746ed727ef89e7", "filename": "src/libsyntax_pos/analyze_source_file/tests.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fanalyze_source_file%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fanalyze_source_file%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fanalyze_source_file%2Ftests.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -0,0 +1,151 @@\n+use super::*;\n+\n+macro_rules! test {\n+    (case: $test_name:ident,\n+     text: $text:expr,\n+     source_file_start_pos: $source_file_start_pos:expr,\n+     lines: $lines:expr,\n+     multi_byte_chars: $multi_byte_chars:expr,\n+     non_narrow_chars: $non_narrow_chars:expr,) => (\n+\n+    #[test]\n+    fn $test_name() {\n+\n+        let (lines, multi_byte_chars, non_narrow_chars) =\n+            analyze_source_file($text, BytePos($source_file_start_pos));\n+\n+        let expected_lines: Vec<BytePos> = $lines\n+            .into_iter()\n+            .map(|pos| BytePos(pos))\n+            .collect();\n+\n+        assert_eq!(lines, expected_lines);\n+\n+        let expected_mbcs: Vec<MultiByteChar> = $multi_byte_chars\n+            .into_iter()\n+            .map(|(pos, bytes)| MultiByteChar {\n+                pos: BytePos(pos),\n+                bytes,\n+            })\n+            .collect();\n+\n+        assert_eq!(multi_byte_chars, expected_mbcs);\n+\n+        let expected_nncs: Vec<NonNarrowChar> = $non_narrow_chars\n+            .into_iter()\n+            .map(|(pos, width)| {\n+                NonNarrowChar::new(BytePos(pos), width)\n+            })\n+            .collect();\n+\n+        assert_eq!(non_narrow_chars, expected_nncs);\n+    })\n+}\n+\n+test!(\n+    case: empty_text,\n+    text: \"\",\n+    source_file_start_pos: 0,\n+    lines: vec![],\n+    multi_byte_chars: vec![],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: newlines_short,\n+    text: \"a\\nc\",\n+    source_file_start_pos: 0,\n+    lines: vec![0, 2],\n+    multi_byte_chars: vec![],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: newlines_long,\n+    text: \"012345678\\nabcdef012345678\\na\",\n+    source_file_start_pos: 0,\n+    lines: vec![0, 10, 26],\n+    multi_byte_chars: vec![],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: newline_and_multi_byte_char_in_same_chunk,\n+    text: \"01234\u03b2789\\nbcdef0123456789abcdef\",\n+    source_file_start_pos: 0,\n+    lines: vec![0, 11],\n+    multi_byte_chars: vec![(5, 2)],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: newline_and_control_char_in_same_chunk,\n+    text: \"01234\\u{07}6789\\nbcdef0123456789abcdef\",\n+    source_file_start_pos: 0,\n+    lines: vec![0, 11],\n+    multi_byte_chars: vec![],\n+    non_narrow_chars: vec![(5, 0)],\n+);\n+\n+test!(\n+    case: multi_byte_char_short,\n+    text: \"a\u03b2c\",\n+    source_file_start_pos: 0,\n+    lines: vec![0],\n+    multi_byte_chars: vec![(1, 2)],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: multi_byte_char_long,\n+    text: \"0123456789abc\u0394f012345\u03b2\",\n+    source_file_start_pos: 0,\n+    lines: vec![0],\n+    multi_byte_chars: vec![(13, 2), (22, 2)],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: multi_byte_char_across_chunk_boundary,\n+    text: \"0123456789abcde\u0394123456789abcdef01234\",\n+    source_file_start_pos: 0,\n+    lines: vec![0],\n+    multi_byte_chars: vec![(15, 2)],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: multi_byte_char_across_chunk_boundary_tail,\n+    text: \"0123456789abcde\u0394....\",\n+    source_file_start_pos: 0,\n+    lines: vec![0],\n+    multi_byte_chars: vec![(15, 2)],\n+    non_narrow_chars: vec![],\n+);\n+\n+test!(\n+    case: non_narrow_short,\n+    text: \"0\\t2\",\n+    source_file_start_pos: 0,\n+    lines: vec![0],\n+    multi_byte_chars: vec![],\n+    non_narrow_chars: vec![(1, 4)],\n+);\n+\n+test!(\n+    case: non_narrow_long,\n+    text: \"01\\t3456789abcdef01234567\\u{07}9\",\n+    source_file_start_pos: 0,\n+    lines: vec![0],\n+    multi_byte_chars: vec![],\n+    non_narrow_chars: vec![(2, 4), (24, 0)],\n+);\n+\n+test!(\n+    case: output_offset_all,\n+    text: \"01\\t345\\n789abc\u0394f01234567\\u{07}9\\nbc\u0394f\",\n+    source_file_start_pos: 1000,\n+    lines: vec![0 + 1000, 7 + 1000, 27 + 1000],\n+    multi_byte_chars: vec![(13 + 1000, 2), (29 + 1000, 2)],\n+    non_narrow_chars: vec![(2 + 1000, 4), (24 + 1000, 0)],\n+);"}, {"sha": "fa6e3609138e6b7513b3199849837c04ab43b0cb", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -42,6 +42,9 @@ use std::hash::{Hasher, Hash};\n use std::ops::{Add, Sub};\n use std::path::PathBuf;\n \n+#[cfg(test)]\n+mod tests;\n+\n pub struct Globals {\n     symbol_interner: Lock<symbol::Interner>,\n     span_interner: Lock<span_encoding::SpanInterner>,\n@@ -1420,25 +1423,3 @@ fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n         Err(line) => line as isize - 1\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::{lookup_line, BytePos};\n-\n-    #[test]\n-    fn test_lookup_line() {\n-\n-        let lines = &[BytePos(3), BytePos(17), BytePos(28)];\n-\n-        assert_eq!(lookup_line(lines, BytePos(0)), -1);\n-        assert_eq!(lookup_line(lines, BytePos(3)),  0);\n-        assert_eq!(lookup_line(lines, BytePos(4)),  0);\n-\n-        assert_eq!(lookup_line(lines, BytePos(16)), 0);\n-        assert_eq!(lookup_line(lines, BytePos(17)), 1);\n-        assert_eq!(lookup_line(lines, BytePos(18)), 1);\n-\n-        assert_eq!(lookup_line(lines, BytePos(28)), 2);\n-        assert_eq!(lookup_line(lines, BytePos(29)), 2);\n-    }\n-}"}, {"sha": "476368e835177e1dad24590893291bdbb81f9800", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -17,6 +17,9 @@ use std::str;\n use crate::hygiene::SyntaxContext;\n use crate::{Span, DUMMY_SP, GLOBALS};\n \n+#[cfg(test)]\n+mod tests;\n+\n symbols! {\n     // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,\n     // this should be rarely necessary though if the keywords are kept in alphabetic order.\n@@ -1345,39 +1348,3 @@ impl Encodable for InternedString {\n         self.with(|string| s.emit_str(string))\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use crate::Globals;\n-    use crate::edition;\n-\n-    #[test]\n-    fn interner_tests() {\n-        let mut i: Interner = Interner::default();\n-        // first one is zero:\n-        assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n-        // re-use gets the same entry:\n-        assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n-        // different string gets a different #:\n-        assert_eq!(i.intern(\"cat\"), Symbol::new(1));\n-        assert_eq!(i.intern(\"cat\"), Symbol::new(1));\n-        // dog is still at zero\n-        assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n-        let z = i.intern(\"zebra\");\n-        assert_eq!(i.gensymed(z), Symbol::new(SymbolIndex::MAX_AS_U32));\n-        // gensym of same string gets new number:\n-        assert_eq!(i.gensymed(z), Symbol::new(SymbolIndex::MAX_AS_U32 - 1));\n-        // gensym of *existing* string gets new number:\n-        let d = i.intern(\"dog\");\n-        assert_eq!(i.gensymed(d), Symbol::new(SymbolIndex::MAX_AS_U32 - 2));\n-    }\n-\n-    #[test]\n-    fn without_first_quote_test() {\n-        GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n-            let i = Ident::from_str(\"'break\");\n-            assert_eq!(i.without_first_quote().name, kw::Break);\n-        });\n-    }\n-}"}, {"sha": "1b91c9bb845a4a660e081dd977fe5730057b7ed0", "filename": "src/libsyntax_pos/symbol/tests.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fsymbol%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Fsymbol%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol%2Ftests.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -0,0 +1,32 @@\n+use super::*;\n+\n+use crate::{edition, Globals};\n+\n+#[test]\n+fn interner_tests() {\n+    let mut i: Interner = Interner::default();\n+    // first one is zero:\n+    assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n+    // re-use gets the same entry:\n+    assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n+    // different string gets a different #:\n+    assert_eq!(i.intern(\"cat\"), Symbol::new(1));\n+    assert_eq!(i.intern(\"cat\"), Symbol::new(1));\n+    // dog is still at zero\n+    assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n+    let z = i.intern(\"zebra\");\n+    assert_eq!(i.gensymed(z), Symbol::new(SymbolIndex::MAX_AS_U32));\n+    // gensym of same string gets new number:\n+    assert_eq!(i.gensymed(z), Symbol::new(SymbolIndex::MAX_AS_U32 - 1));\n+    // gensym of *existing* string gets new number:\n+    let d = i.intern(\"dog\");\n+    assert_eq!(i.gensymed(d), Symbol::new(SymbolIndex::MAX_AS_U32 - 2));\n+}\n+\n+#[test]\n+fn without_first_quote_test() {\n+    GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n+        let i = Ident::from_str(\"'break\");\n+        assert_eq!(i.without_first_quote().name, kw::Break);\n+    });\n+}"}, {"sha": "78c4e18e6aee01f6f16332b8b0eb1bf5cf2e19be", "filename": "src/libsyntax_pos/tests.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Flibsyntax_pos%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Ftests.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -0,0 +1,18 @@\n+use super::*;\n+\n+#[test]\n+fn test_lookup_line() {\n+\n+    let lines = &[BytePos(3), BytePos(17), BytePos(28)];\n+\n+    assert_eq!(lookup_line(lines, BytePos(0)), -1);\n+    assert_eq!(lookup_line(lines, BytePos(3)),  0);\n+    assert_eq!(lookup_line(lines, BytePos(4)),  0);\n+\n+    assert_eq!(lookup_line(lines, BytePos(16)), 0);\n+    assert_eq!(lookup_line(lines, BytePos(17)), 1);\n+    assert_eq!(lookup_line(lines, BytePos(18)), 1);\n+\n+    assert_eq!(lookup_line(lines, BytePos(28)), 2);\n+    assert_eq!(lookup_line(lines, BytePos(29)), 2);\n+}"}, {"sha": "f1822ea34351e38e9b9242241a7839d68f44d35f", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=6cc43db0b743d3f0345e27b1d9002ecdc7ff1df4", "patch": "@@ -33,7 +33,6 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         \"librustdoc\",\n         \"libstd\",\n         \"libsyntax\",\n-        \"libsyntax_pos\",\n     ];\n \n     let mut skip = |path: &Path| {"}]}