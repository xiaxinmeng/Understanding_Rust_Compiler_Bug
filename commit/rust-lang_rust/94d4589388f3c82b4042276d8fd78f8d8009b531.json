{"sha": "94d4589388f3c82b4042276d8fd78f8d8009b531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDQ1ODkzODhmM2M4MmI0MDQyMjc2ZDhmZDc4ZjhkODAwOWI1MzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-25T20:24:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-25T20:24:02Z"}, "message": "Auto merge of #38856 - zackw:process-envs, r=aturon\n\nAdd std::process::Command::envs()\n\n`Command::envs()` adds a vector of key-value pairs to the child\nprocess environment all at once.  Suggested in #38526.\n\nThis is not fully baked and frankly I'm not sure it even _works_, but I need some help finishing it up, and this is the simplest way to show you what I've got.  The problems I know exist and don't know how to solve, from most to least important, are:\n\n* [ ] I don't know if the type signature of the new function is correct.\n* [x] The new test might not be getting run.  I didn't see it go by in the output of `x.py test src/libstd --stage 1`.\n* [x] The tidy check says ``process.rs:402: different `since` than before`` which I don't know what it means.\n\nr? @brson", "tree": {"sha": "1dd9abbdb8090ed6cde6d668eb0bd14fd4d702d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd9abbdb8090ed6cde6d668eb0bd14fd4d702d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d4589388f3c82b4042276d8fd78f8d8009b531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d4589388f3c82b4042276d8fd78f8d8009b531", "html_url": "https://github.com/rust-lang/rust/commit/94d4589388f3c82b4042276d8fd78f8d8009b531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d4589388f3c82b4042276d8fd78f8d8009b531/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc57e40ce703cb70a39249f5cfb661020a1549b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc57e40ce703cb70a39249f5cfb661020a1549b6", "html_url": "https://github.com/rust-lang/rust/commit/fc57e40ce703cb70a39249f5cfb661020a1549b6"}, {"sha": "2580950fcd7c516ebd2fc090443b5406a18f77bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2580950fcd7c516ebd2fc090443b5406a18f77bb", "html_url": "https://github.com/rust-lang/rust/commit/2580950fcd7c516ebd2fc090443b5406a18f77bb"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "5af4ba53bf9a57e2d79325c68f5a8df60e54f5f6", "filename": "src/libstd/process.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/94d4589388f3c82b4042276d8fd78f8d8009b531/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d4589388f3c82b4042276d8fd78f8d8009b531/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=94d4589388f3c82b4042276d8fd78f8d8009b531", "patch": "@@ -352,7 +352,9 @@ impl Command {\n     ///         .expect(\"ls command failed to start\");\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn args<S: AsRef<OsStr>>(&mut self, args: &[S]) -> &mut Command {\n+    pub fn args<I, S>(&mut self, args: I) -> &mut Command\n+        where I: IntoIterator<Item=S>, S: AsRef<OsStr>\n+    {\n         for arg in args {\n             self.arg(arg.as_ref());\n         }\n@@ -384,6 +386,39 @@ impl Command {\n         self\n     }\n \n+    /// Add or update multiple environment variable mappings.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    /// use std::env;\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let filtered_env : HashMap<String, String> =\n+    ///     env::vars().filter(|&(ref k, _)|\n+    ///         k == \"TERM\" || k == \"TZ\" || k == \"LANG\" || k == \"PATH\"\n+    ///     ).collect();\n+    ///\n+    /// Command::new(\"printenv\")\n+    ///         .stdin(Stdio::null())\n+    ///         .stdout(Stdio::inherit())\n+    ///         .env_clear()\n+    ///         .envs(&filtered_env)\n+    ///         .spawn()\n+    ///         .expect(\"printenv failed to start\");\n+    /// ```\n+    #[unstable(feature = \"command_envs\", issue = \"38526\")]\n+    pub fn envs<I, K, V>(&mut self, vars: I) -> &mut Command\n+        where I: IntoIterator<Item=(K, V)>, K: AsRef<OsStr>, V: AsRef<OsStr>\n+    {\n+        for (ref key, ref val) in vars {\n+            self.inner.env(key.as_ref(), val.as_ref());\n+        }\n+        self\n+    }\n+\n     /// Removes an environment variable mapping.\n     ///\n     /// # Examples"}, {"sha": "a131dcbe4ddc3e65d188f6a958d903b706f188c0", "filename": "src/test/run-pass/process-envs.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/94d4589388f3c82b4042276d8fd78f8d8009b531/src%2Ftest%2Frun-pass%2Fprocess-envs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d4589388f3c82b4042276d8fd78f8d8009b531/src%2Ftest%2Frun-pass%2Fprocess-envs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-envs.rs?ref=94d4589388f3c82b4042276d8fd78f8d8009b531", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2014, 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten\n+\n+#![feature(command_envs)]\n+\n+use std::process::Command;\n+use std::env;\n+use std::collections::HashMap;\n+\n+#[cfg(all(unix, not(target_os=\"android\")))]\n+pub fn env_cmd() -> Command {\n+    Command::new(\"env\")\n+}\n+#[cfg(target_os=\"android\")]\n+pub fn env_cmd() -> Command {\n+    let mut cmd = Command::new(\"/system/bin/sh\");\n+    cmd.arg(\"-c\").arg(\"set\");\n+    cmd\n+}\n+\n+#[cfg(windows)]\n+pub fn env_cmd() -> Command {\n+    let mut cmd = Command::new(\"cmd\");\n+    cmd.arg(\"/c\").arg(\"set\");\n+    cmd\n+}\n+\n+fn main() {\n+    // save original environment\n+    let old_env = env::var_os(\"RUN_TEST_NEW_ENV\");\n+\n+    env::set_var(\"RUN_TEST_NEW_ENV\", \"123\");\n+\n+    // create filtered environment vector\n+    let filtered_env : HashMap<String, String> =\n+        env::vars().filter(|&(ref k, _)| k == \"PATH\").collect();\n+\n+    let mut cmd = env_cmd();\n+    cmd.env_clear();\n+    cmd.envs(&filtered_env);\n+\n+    // restore original environment\n+    match old_env {\n+        None => env::remove_var(\"RUN_TEST_NEW_ENV\"),\n+        Some(val) => env::set_var(\"RUN_TEST_NEW_ENV\", &val)\n+    }\n+\n+    let result = cmd.output().unwrap();\n+    let output = String::from_utf8_lossy(&result.stdout);\n+\n+    assert!(!output.contains(\"RUN_TEST_NEW_ENV\"),\n+            \"found RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);\n+}"}, {"sha": "b7f296a65c21696b24d78b9e1d711b9d2e34574f", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94d4589388f3c82b4042276d8fd78f8d8009b531/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d4589388f3c82b4042276d8fd78f8d8009b531/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=94d4589388f3c82b4042276d8fd78f8d8009b531", "patch": "@@ -46,8 +46,7 @@ fn main() {\n         Some(val) => env::set_var(\"RUN_TEST_NEW_ENV\", &val)\n     }\n \n-    let prog = cmd.spawn().unwrap();\n-    let result = prog.wait_with_output().unwrap();\n+    let result = cmd.output().unwrap();\n     let output = String::from_utf8_lossy(&result.stdout);\n \n     assert!(!output.contains(\"RUN_TEST_NEW_ENV\"),"}]}