{"sha": "a7d9025e40a55d5d8ddeb2f35075512055c363ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDkwMjVlNDBhNTVkNWQ4ZGRlYjJmMzUwNzU1MTIwNTVjMzYzY2E=", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2016-12-17T19:09:23Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2016-12-17T19:09:23Z"}, "message": "let BSD to use gmake for GNU-make\n\nthe diff extends build_helper to provide an function to return the\nexpected name of GNU-make on the host: \"make\" or \"gmake\".\n\nFixes #38429", "tree": {"sha": "c410d5cae8e2d0b192415fed520e7dafa90e00b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c410d5cae8e2d0b192415fed520e7dafa90e00b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d9025e40a55d5d8ddeb2f35075512055c363ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d9025e40a55d5d8ddeb2f35075512055c363ca", "html_url": "https://github.com/rust-lang/rust/commit/a7d9025e40a55d5d8ddeb2f35075512055c363ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d9025e40a55d5d8ddeb2f35075512055c363ca/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8c1e28a5c7e042c6522f84a684ad848a200c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8c1e28a5c7e042c6522f84a684ad848a200c30", "html_url": "https://github.com/rust-lang/rust/commit/9f8c1e28a5c7e042c6522f84a684ad848a200c30"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "01a19a0cca862dd797f44ff1458ba5f1894b590e", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -87,6 +87,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"build_helper 0.1.0\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\","}, {"sha": "aa15825d8293c32f96a801ef255eb4af8303e967", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -13,6 +13,8 @@\n //! This file implements the various regression test suites that we execute on\n //! our CI.\n \n+extern crate build_helper;\n+\n use std::collections::HashSet;\n use std::env;\n use std::fmt;\n@@ -543,7 +545,7 @@ pub fn distcheck(build: &Build) {\n     build.run(&mut cmd);\n     build.run(Command::new(\"./configure\")\n                      .current_dir(&dir));\n-    build.run(Command::new(\"make\")\n+    build.run(Command::new(build_helper::make(&build.config.build))\n                      .arg(\"check\")\n                      .current_dir(&dir));\n }"}, {"sha": "d0d588f46a7549a9402f404b395aebe0a2868dde", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -63,6 +63,16 @@ pub fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n     }\n }\n \n+pub fn make(host: &str) -> PathBuf {\n+    if host.contains(\"bitrig\") || host.contains(\"dragonfly\") ||\n+        host.contains(\"freebsd\") || host.contains(\"netbsd\") ||\n+        host.contains(\"openbsd\") {\n+        PathBuf::from(\"gmake\")\n+    } else {\n+        PathBuf::from(\"make\")\n+    }\n+}\n+\n pub fn output(cmd: &mut Command) -> String {\n     let output = match cmd.stderr(Stdio::inherit()).output() {\n         Ok(status) => status,"}, {"sha": "60b7875a97c84dd0cb01acadadda12371ce58abe", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -151,7 +151,7 @@ fn main() {\n     cmd.arg(format!(\"--build={}\", build_helper::gnu_target(&host)));\n \n     run(&mut cmd);\n-    let mut make = Command::new(\"make\");\n+    let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&build_dir)\n         .arg(\"build_lib_static\");\n "}, {"sha": "b3eba508316981682638773827c3e04d9e5d7a82", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -104,7 +104,7 @@ fn build_libbacktrace(host: &str, target: &str) {\n                 .env(\"AR\", &ar)\n                 .env(\"RANLIB\", format!(\"{} s\", ar.display()))\n                 .env(\"CFLAGS\", cflags));\n-    run(Command::new(\"make\")\n+    run(Command::new(build_helper::make(host))\n                 .current_dir(&build_dir)\n                 .arg(format!(\"INCDIR={}\", src_dir.display()))\n                 .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));"}, {"sha": "faf0a0eaa81ee5098e7d0ee18be607e4bec58085", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -8,3 +8,4 @@ build = \"build.rs\"\n log = \"0.3\"\n env_logger = { version = \"0.3.5\", default-features = false }\n serialize = { path = \"../../libserialize\" }\n+build_helper = { path = \"../../build_helper\" }"}, {"sha": "d33a176b9147e341bd890afe02eefad58eef0fa9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d9025e40a55d5d8ddeb2f35075512055c363ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a7d9025e40a55d5d8ddeb2f35075512055c363ca", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate build_helper;\n+\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n@@ -2108,7 +2110,7 @@ actual:\\n\\\n         }\n         self.create_dir_racy(&tmpdir);\n \n-        let mut cmd = Command::new(\"make\");\n+        let mut cmd = Command::new(build_helper::make(&self.config.host));\n         cmd.current_dir(&self.testpaths.file)\n            .env(\"TARGET\", &self.config.target)\n            .env(\"PYTHON\", &self.config.docck_python)"}]}