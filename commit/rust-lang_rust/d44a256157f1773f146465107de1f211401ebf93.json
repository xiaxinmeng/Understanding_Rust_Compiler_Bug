{"sha": "d44a256157f1773f146465107de1f211401ebf93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NGEyNTYxNTdmMTc3M2YxNDY0NjUxMDdkZTFmMjExNDAxZWJmOTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-26T15:31:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T10:55:32Z"}, "message": "Allow building stage 2 compiler libraries", "tree": {"sha": "287830a6718fda5bf9995616c53a674e547a6c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287830a6718fda5bf9995616c53a674e547a6c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d44a256157f1773f146465107de1f211401ebf93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d44a256157f1773f146465107de1f211401ebf93", "html_url": "https://github.com/rust-lang/rust/commit/d44a256157f1773f146465107de1f211401ebf93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d44a256157f1773f146465107de1f211401ebf93/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba53f0be575196083fe52ecd2ec8f1c015664ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba53f0be575196083fe52ecd2ec8f1c015664ce", "html_url": "https://github.com/rust-lang/rust/commit/cba53f0be575196083fe52ecd2ec8f1c015664ce"}], "stats": {"total": 148, "additions": 90, "deletions": 58}, "files": [{"sha": "df9c55ce0be3641c143e93c933c069563164be06", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -159,6 +159,10 @@ fn main() {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n \n+        if cfg!(not(feature=\"llvm\")) && stage != \"0\" {\n+            cmd.arg(\"-Zno-trans\");\n+        }\n+\n         // Set various options from config.toml to configure how we're building\n         // code.\n         if env::var(\"RUSTC_DEBUGINFO\") == Ok(\"true\".to_string()) {"}, {"sha": "de6dd10938e6d2fe8c8c417250a55f86f20f645d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -531,7 +531,7 @@ impl<'a> Builder<'a> {\n         // For other crates, however, we know that we've already got a standard\n         // library up and running, so we can use the normal compiler to compile\n         // build scripts in that situation.\n-        if mode == Mode::Libstd {\n+        if mode == Mode::Libstd || !self.build.config.llvm_enabled {\n             cargo.env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n         } else {"}, {"sha": "335e1690a2ea0252a97860079309257a5aa0e0d4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -104,11 +104,7 @@ impl Step for Std {\n \n         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n-        let mut cargo = if compiler.stage == 0 {\n-            builder.cargo(compiler, Mode::Libstd, target, \"build\")\n-        }else{\n-            builder.cargo(compiler, Mode::Libstd, target, \"check\")\n-        };\n+        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n         std_cargo(build, &compiler, target, &mut cargo);\n         run_cargo(build,\n                 &mut cargo,\n@@ -165,7 +161,6 @@ pub fn std_cargo(build: &Build,\n         // missing\n         // We also only build the runtimes when --enable-sanitizers (or its\n         // config.toml equivalent) is used\n-        //cargo.env(\"RUST_FLAGS\", \"-Zno-trans\");\n         cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n     }\n "}, {"sha": "1b1282eacc0e664971619b7c0f1c22484ecb66a5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -69,7 +69,7 @@ use derive_registrar;\n \n use profile;\n \n-pub fn compile_input(sess: &Session,\n+pub fn compile_input(sess: &mut Session,\n                      cstore: &CStore,\n                      input: &Input,\n                      outdir: &Option<PathBuf>,\n@@ -100,17 +100,32 @@ pub fn compile_input(sess: &Session,\n             sess.err(\"LLVM is not supported by this rustc. Please use -Z no-trans to compile\")\n         }\n \n-        if sess.opts.crate_types.iter().all(|&t|{\n-            t != CrateType::CrateTypeRlib && t != CrateType::CrateTypeExecutable\n-        }) && !sess.opts.crate_types.is_empty() {\n-            sess.err(\n-                \"LLVM is not supported by this rustc, so non rlib libraries are not supported\"\n-            );\n+        for cty in sess.opts.crate_types.iter_mut() {\n+            match *cty {\n+                CrateType::CrateTypeRlib | CrateType::CrateTypeExecutable => {},\n+                CrateType::CrateTypeDylib | CrateType::CrateTypeCdylib |\n+                CrateType::CrateTypeStaticlib => {\n+                    sess.parse_sess.span_diagnostic.warn(\n+                        &format!(\"LLVM unsupported, so non rlib output type {} \\\n+                                  will be treated like rlib lib\", cty)\n+                    );\n+                    *cty = CrateType::CrateTypeRlib;\n+                },\n+                CrateType::CrateTypeProcMacro => {\n+                    sess.parse_sess.span_diagnostic.err(\n+                        \"No LLVM support, so cant compile proc macros\"\n+                    );\n+                }\n+            }\n         }\n \n         sess.abort_if_errors();\n     }\n \n+    // Make sure nobody changes sess after crate types\n+    // have optionally been adjusted for no llvm builds\n+    let sess = &*sess;\n+\n     if sess.profile_queries() {\n         profile::begin();\n     }\n@@ -267,6 +282,10 @@ pub fn compile_input(sess: &Session,\n \n     if cfg!(not(feature=\"llvm\")) {\n         let (_, _) = (outputs, trans);\n+\n+        if sess.opts.crate_types.contains(&CrateType::CrateTypeRlib) {\n+            return Ok(())\n+        }\n         sess.fatal(\"LLVM is not supported by this rustc\");\n     }\n \n@@ -300,9 +319,9 @@ pub fn compile_input(sess: &Session,\n             CompileState::state_when_compilation_done(input, sess, outdir, output),\n             Ok(())\n         );\n-\n-        Ok(())\n     }\n+\n+    Ok(())\n }\n \n fn keep_hygiene_data(sess: &Session) -> bool {"}, {"sha": "c762844ab35156a510f94a174915b862393e41a4", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -457,6 +457,14 @@ impl<'a> Context<'a> {\n         //\n         // The goal of this step is to look at as little metadata as possible.\n         self.filesearch.search(|path, kind| {\n+            let mut path = path.to_owned();\n+            if cfg!(not(feature=\"llvm\")) {\n+                // This is a hack to make crates both defined as dylib\n+                // and rlib to be findable without LLVM\n+                path.set_extension(\"rlib\");\n+            }\n+            let path = &path;\n+\n             let file = match path.file_name().and_then(|s| s.to_str()) {\n                 None => return FileDoesntMatch,\n                 Some(file) => file,\n@@ -745,7 +753,15 @@ impl<'a> Context<'a> {\n         let mut rmetas = FxHashMap();\n         let mut dylibs = FxHashMap();\n         {\n-            let locs = locs.map(|l| PathBuf::from(l)).filter(|loc| {\n+            let locs = locs.map(|l| PathBuf::from(l))\n+                .map(|mut l| {\n+                    if cfg!(not(feature=\"llvm\")) {\n+                        // This is a hack to make crates both defined as dylib\n+                        // and rlib to be findable without LLVM\n+                        l.set_extension(\"rlib\");\n+                    }\n+                    l\n+                }).filter(|loc| {\n                 if !loc.exists() {\n                     sess.err(&format!(\"extern location for {} does not exist: {}\",\n                                       self.crate_name,"}, {"sha": "796e203bd04319bc8240ecd04849c5b29f9014ec", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate rustc_trans_utils;\n-\n use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::linker::Linker;\n use super::command::Command;\n@@ -27,7 +25,6 @@ use {CrateTranslation, CrateInfo};\n use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n-use rustc::hir::svh::Svh;\n use rustc_back::tempdir::TempDir;\n use rustc_back::{PanicStrategy, RelroLevel};\n use context::get_reloc_model;\n@@ -88,9 +85,9 @@ pub const RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET: usize =\n pub const RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: usize =\n     RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET + 8;\n \n-pub use self::rustc_trans_utils::link::{find_crate_name, filename_for_input,\n-                                        default_output_for_target, invalid_output_for_target,\n-                                        build_link_meta};\n+pub use rustc_trans_utils::link::{find_crate_name, filename_for_input, default_output_for_target,\n+                                  invalid_output_for_target, build_link_meta, out_filename,\n+                                  check_file_is_writeable};\n \n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n@@ -218,13 +215,6 @@ pub fn link_binary(sess: &Session,\n     out_filenames\n }\n \n-fn is_writeable(p: &Path) -> bool {\n-    match p.metadata() {\n-        Err(..) => true,\n-        Ok(m) => !m.permissions().readonly()\n-    }\n-}\n-\n fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilenames) -> PathBuf {\n     let out_filename = outputs.single_output_file.clone()\n         .unwrap_or(outputs\n@@ -288,32 +278,6 @@ pub fn ignored_for_lto(info: &CrateInfo, cnum: CrateNum) -> bool {\n     info.is_no_builtins.contains(&cnum) || info.compiler_builtins == Some(cnum)\n }\n \n-fn out_filename(sess: &Session,\n-                crate_type: config::CrateType,\n-                outputs: &OutputFilenames,\n-                crate_name: &str)\n-                -> PathBuf {\n-    let default_filename = filename_for_input(sess, crate_type, crate_name, outputs);\n-    let out_filename = outputs.outputs.get(&OutputType::Exe)\n-                              .and_then(|s| s.to_owned())\n-                              .or_else(|| outputs.single_output_file.clone())\n-                              .unwrap_or(default_filename);\n-\n-    check_file_is_writeable(&out_filename, sess);\n-\n-    out_filename\n-}\n-\n-// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n-// check this already -- however, the Linux linker will happily overwrite a\n-// read-only file.  We should be consistent.\n-fn check_file_is_writeable(file: &Path, sess: &Session) {\n-    if !is_writeable(file) {\n-        sess.fatal(&format!(\"output file {} is not writeable -- check its \\\n-                            permissions\", file.display()));\n-    }\n-}\n-\n fn link_binary_output(sess: &Session,\n                       trans: &CrateTranslation,\n                       crate_type: config::CrateType,"}, {"sha": "7d69db12bd0ca6c68f371cee04ce39d5dbbb5b32", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -938,7 +938,7 @@ pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              rx: mpsc::Receiver<Box<Any + Send>>)\n                              -> OngoingCrateTranslation {\n-    use back::link::rustc_trans_utils::find_exported_symbols;\n+    use rustc_trans_utils::find_exported_symbols;\n \n     check_for_rustc_errors_attr(tcx);\n "}, {"sha": "f45a011e94d8df322ae368b134e90ebe0dab4f31", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -50,6 +50,7 @@ extern crate rustc_incremental;\n extern crate rustc_llvm as llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_const_math;\n+extern crate rustc_trans_utils;\n extern crate rustc_demangle;\n extern crate jobserver;\n extern crate num_cpus;"}, {"sha": "ccd5739efe0211544bf39ee6a4a53b6c0def9782", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44a256157f1773f146465107de1f211401ebf93/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=d44a256157f1773f146465107de1f211401ebf93", "patch": "@@ -14,10 +14,43 @@ use rustc::middle::cstore::{self, LinkMeta};\n use rustc::dep_graph::{DepKind, DepNode};\n use rustc::hir::svh::Svh;\n use rustc_incremental::IncrementalHashesMap;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax_pos::Span;\n \n+pub fn out_filename(sess: &Session,\n+                crate_type: config::CrateType,\n+                outputs: &OutputFilenames,\n+                crate_name: &str)\n+                -> PathBuf {\n+    let default_filename = filename_for_input(sess, crate_type, crate_name, outputs);\n+    let out_filename = outputs.outputs.get(&OutputType::Exe)\n+                              .and_then(|s| s.to_owned())\n+                              .or_else(|| outputs.single_output_file.clone())\n+                              .unwrap_or(default_filename);\n+\n+    check_file_is_writeable(&out_filename, sess);\n+\n+    out_filename\n+}\n+\n+// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n+// check this already -- however, the Linux linker will happily overwrite a\n+// read-only file.  We should be consistent.\n+pub fn check_file_is_writeable(file: &Path, sess: &Session) {\n+    if !is_writeable(file) {\n+        sess.fatal(&format!(\"output file {} is not writeable -- check its \\\n+                            permissions\", file.display()));\n+    }\n+}\n+\n+fn is_writeable(p: &Path) -> bool {\n+    match p.metadata() {\n+        Err(..) => true,\n+        Ok(m) => !m.permissions().readonly()\n+    }\n+}\n+\n pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMeta {\n     let krate_dep_node = &DepNode::new_no_params(DepKind::Krate);\n     let r = LinkMeta {"}]}