{"sha": "686e115e7397028a94bde57df1acf0f066651285", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NmUxMTVlNzM5NzAyOGE5NGJkZTU3ZGYxYWNmMGYwNjY2NTEyODU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-01T08:03:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T08:03:47Z"}, "message": "Merge #5158\n\n5158: Use CrateName correctly r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2a854f0f74ef4865c0b4196ed0a31abd0da74e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a854f0f74ef4865c0b4196ed0a31abd0da74e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686e115e7397028a94bde57df1acf0f066651285", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/ENjCRBK7hj4Ov3rIwAAdHIIAD6F0dz10WtWVcgUYBFYmstG\ns5A0lDXxYsxH+dZJnIAjp5YckGFuES446DXu8m8xg7ctdeFZ95v4nM97a8SWTVPH\njD9K9fyiNWTB2oA+XmbrBa4Zvy0f1GEYqJWHXL7A+ghxhSy5+5nqvkkCM0YH1y4Q\nfu5NrXl2Y+PzS1wHbyBndiDaz1pkRtFKzbvmIHRkaQZQsMr3jLU6ZbGoXi3wF7PY\npJpWMnOlVKeTx+xwbnf9OkgwX4U37c/pkGiKVpQTHMnvkY8wXjy5H/5u5d1Y7psu\nakVjH5oSAPErzDTiEm54Ddgm0nL7FFkGUEsOvdUZIQLo1ncOS0WBB4kKzG3TMgw=\n=EFSe\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a854f0f74ef4865c0b4196ed0a31abd0da74e2d\nparent 30c2e714cc1677cbea40a47d7c0944c92f66b7c9\nparent 80386ca5be78d8ea65483df3edeec1a89b09a5a3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593590627 +0000\ncommitter GitHub <noreply@github.com> 1593590627 +0000\n\nMerge #5158\n\n5158: Use CrateName correctly r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686e115e7397028a94bde57df1acf0f066651285", "html_url": "https://github.com/rust-lang/rust/commit/686e115e7397028a94bde57df1acf0f066651285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686e115e7397028a94bde57df1acf0f066651285/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c2e714cc1677cbea40a47d7c0944c92f66b7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c2e714cc1677cbea40a47d7c0944c92f66b7c9", "html_url": "https://github.com/rust-lang/rust/commit/30c2e714cc1677cbea40a47d7c0944c92f66b7c9"}, {"sha": "80386ca5be78d8ea65483df3edeec1a89b09a5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/80386ca5be78d8ea65483df3edeec1a89b09a5a3", "html_url": "https://github.com/rust-lang/rust/commit/80386ca5be78d8ea65483df3edeec1a89b09a5a3"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "2097139877960dd52a6a6a476b61502f2a6e9aaa", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -149,15 +149,17 @@ fn with_files(\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n                 meta.edition,\n-                Some(CrateName::new(&krate).unwrap()),\n+                Some(krate.clone()),\n                 meta.cfg,\n                 meta.env,\n                 Default::default(),\n             );\n-            let prev = crates.insert(krate.clone(), crate_id);\n+            let crate_name = CrateName::new(&krate).unwrap();\n+            let prev = crates.insert(crate_name.clone(), crate_id);\n             assert!(prev.is_none());\n             for dep in meta.deps {\n-                crate_deps.push((krate.clone(), dep))\n+                let dep = CrateName::new(&dep).unwrap();\n+                crate_deps.push((crate_name.clone(), dep))\n             }\n         } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n             assert!(default_crate_root.is_none());"}, {"sha": "445a1ee48e0a6826f5347a0b4cde4b06f50b8947", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -67,7 +67,7 @@ pub struct CrateGraph {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CrateName(SmolStr);\n \n impl CrateName {\n@@ -94,6 +94,13 @@ impl fmt::Display for CrateName {\n     }\n }\n \n+impl ops::Deref for CrateName {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        &*self.0\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ProcMacroId(pub u32);\n \n@@ -117,7 +124,7 @@ pub struct CrateData {\n     /// The name to display to the end user.\n     /// This actual crate name can be different in a particular dependent crate\n     /// or may even be missing for some cases, such as a dummy crate for the code snippet.\n-    pub display_name: Option<CrateName>,\n+    pub display_name: Option<String>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n@@ -138,15 +145,15 @@ pub struct Env {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Dependency {\n     pub crate_id: CrateId,\n-    pub name: SmolStr,\n+    pub name: CrateName,\n }\n \n impl CrateGraph {\n     pub fn add_crate_root(\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n-        display_name: Option<CrateName>,\n+        display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<(SmolStr, Arc<dyn ra_tt::TokenExpander>)>,\n@@ -178,7 +185,7 @@ impl CrateGraph {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n             return Err(CyclicDependenciesError);\n         }\n-        self.arena.get_mut(&from).unwrap().add_dep(name.0, to);\n+        self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n     }\n \n@@ -247,7 +254,7 @@ impl CrateId {\n }\n \n impl CrateData {\n-    fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n+    fn add_dep(&mut self, name: CrateName, crate_id: CrateId) {\n         self.dependencies.push(Dependency { name, crate_id })\n     }\n }\n@@ -429,7 +436,10 @@ mod tests {\n             .is_ok());\n         assert_eq!(\n             graph[crate1].dependencies,\n-            vec![Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n+            vec![Dependency {\n+                crate_id: crate2,\n+                name: CrateName::new(\"crate_name_with_dashes\").unwrap()\n+            }]\n         );\n     }\n }"}, {"sha": "e09eb77c2c159c4a1acbe7a10c96981b590cfeaf", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -31,7 +31,7 @@ use hir_ty::{\n     ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs, TraitEnvironment, Ty,\n     TyDefId, TypeCtor,\n };\n-use ra_db::{CrateId, CrateName, Edition, FileId};\n+use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n use ra_syntax::ast::{self, AttrsOwner, NameOwner};\n use rustc_hash::FxHashSet;\n@@ -94,8 +94,8 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n-    pub fn display_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n-        db.crate_graph()[self.id].display_name.as_ref().cloned()\n+    pub fn display_name(self, db: &dyn HirDatabase) -> Option<String> {\n+        db.crate_graph()[self.id].display_name.clone()\n     }\n \n     pub fn query_external_importables("}, {"sha": "f2d6648638563cc6be5eff2a6d530cb23a4a17ee", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -161,7 +161,7 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n     // XXX\n     //  All crates except core itself should have a dependency on core,\n     //  We detect `core` by seeing whether it doesn't have such a dependency.\n-    let tt = if cg[krate].dependencies.iter().any(|dep| dep.name == \"core\") {\n+    let tt = if cg[krate].dependencies.iter().any(|dep| &*dep.name == \"core\") {\n         quote! { core }\n     } else {\n         quote! { crate }"}, {"sha": "969a2e5b834eea7e3ebc450d6142bc104f9a4f61", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -117,7 +117,7 @@ impl AsName for ast::FieldKind {\n \n impl AsName for ra_db::Dependency {\n     fn as_name(&self) -> Name {\n-        Name::new_text(self.name.clone())\n+        Name::new_text(SmolStr::new(&*self.name))\n     }\n }\n "}, {"sha": "a393d3dba247548a1d9ce42e84c1b0dfedc7d1bb", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -130,7 +130,7 @@ impl MockAnalysis {\n                 let other_crate = crate_graph.add_crate_root(\n                     file_id,\n                     edition,\n-                    Some(CrateName::new(crate_name).unwrap()),\n+                    Some(crate_name.to_string()),\n                     cfg,\n                     env,\n                     Default::default(),"}, {"sha": "8dbf4e6eadad08778f19c54735b7994b17d934ce", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -288,10 +288,7 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n                         {\n-                            if crate_graph\n-                                .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n-                                .is_err()\n-                            {\n+                            if crate_graph.add_dep(from, dep.name.clone(), to).is_err() {\n                                 log::error!(\n                                     \"cyclic dependency {:?} -> {:?}\",\n                                     from_crate_id,\n@@ -312,13 +309,11 @@ impl ProjectWorkspace {\n \n                         let env = Env::default();\n                         let proc_macro = vec![];\n-                        let crate_name = CrateName::new(&sysroot[krate].name)\n-                            .expect(\"Sysroot crate names should not contain dashes\");\n-\n+                        let name = sysroot[krate].name.clone();\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n-                            Some(crate_name),\n+                            Some(name),\n                             cfg_options.clone(),\n                             env,\n                             proc_macro,\n@@ -392,7 +387,7 @@ impl ProjectWorkspace {\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n-                                Some(CrateName::normalize_dashes(&cargo[pkg].name)),\n+                                Some(cargo[pkg].name.clone()),\n                                 cfg_options,\n                                 env,\n                                 proc_macro.clone(),"}, {"sha": "9fe1e2dcb792d423516e22d27ad83d390857274a", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686e115e7397028a94bde57df1acf0f066651285/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=686e115e7397028a94bde57df1acf0f066651285", "patch": "@@ -4,9 +4,9 @@ use std::path::PathBuf;\n \n use paths::{AbsPath, AbsPathBuf};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateId, Dependency, Edition};\n+use ra_db::{CrateId, CrateName, Dependency, Edition};\n use rustc_hash::FxHashSet;\n-use serde::Deserialize;\n+use serde::{de, Deserialize};\n use stdx::split_delim;\n \n /// Roots and crates that compose this Rust project.\n@@ -50,7 +50,7 @@ impl ProjectJson {\n                         .into_iter()\n                         .map(|dep_data| Dependency {\n                             crate_id: CrateId(dep_data.krate as u32),\n-                            name: dep_data.name.into(),\n+                            name: dep_data.name,\n                         })\n                         .collect::<Vec<_>>(),\n                     cfg: {\n@@ -113,5 +113,14 @@ struct DepData {\n     /// Identifies a crate by position in the crates array.\n     #[serde(rename = \"crate\")]\n     krate: usize,\n-    name: String,\n+    #[serde(deserialize_with = \"deserialize_crate_name\")]\n+    name: CrateName,\n+}\n+\n+fn deserialize_crate_name<'de, D>(de: D) -> Result<CrateName, D::Error>\n+where\n+    D: de::Deserializer<'de>,\n+{\n+    let name = String::deserialize(de)?;\n+    CrateName::new(&name).map_err(|err| de::Error::custom(format!(\"invalid crate name: {:?}\", err)))\n }"}]}