{"sha": "9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4", "node_id": "C_kwDOAAsO6NoAKDlmMTMxZTVhMGJiYWEyZDRhOWNkOGNkMjUyNDY5NTcyNTY4MGNlYjQ", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2022-04-01T04:28:59Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2022-04-14T04:47:08Z"}, "message": "assertions_on_constants: ignore indirect `cfg!`", "tree": {"sha": "dfaba72aa13aedb97eda4da4fa9e1bb0c93841a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfaba72aa13aedb97eda4da4fa9e1bb0c93841a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4", "html_url": "https://github.com/rust-lang/rust/commit/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6645d022e492a20da31123f8aff5b5af3eb31c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6645d022e492a20da31123f8aff5b5af3eb31c9", "html_url": "https://github.com/rust-lang/rust/commit/b6645d022e492a20da31123f8aff5b5af3eb31c9"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "0e916ca81642ecf5f648a48aef7bf5dec40514c1", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4", "patch": "@@ -5,7 +5,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, QPath, UnOp};\n+use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind, Node, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n@@ -400,6 +400,22 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         let res = self.typeck_results.qpath_res(qpath, id);\n         match res {\n             Res::Def(DefKind::Const | DefKind::AssocConst, def_id) => {\n+                // Check if this constant is based on `cfg!(..)`,\n+                // which is NOT constant for our purposes.\n+                if let Some(node) = self.lcx.tcx.hir().get_if_local(def_id) &&\n+                let Node::Item(&Item {\n+                    kind: ItemKind::Const(_, body_id),\n+                    ..\n+                }) = node &&\n+                let Node::Expr(&Expr {\n+                    kind: ExprKind::Lit(_),\n+                    span,\n+                    ..\n+                }) = self.lcx.tcx.hir().get(body_id.hir_id) &&\n+                is_direct_expn_of(span, \"cfg\").is_some() {\n+                    return None;\n+                }\n+\n                 let substs = self.typeck_results.node_substs(id);\n                 let substs = if self.substs.is_empty() {\n                     substs"}, {"sha": "7bea9563d47d3d1f34b81de73794aea329f10520", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=9f131e5a0bbaa2d4a9cd8cd2524695725680ceb4", "patch": "@@ -1,4 +1,4 @@\n-#![allow(non_fmt_panics)]\n+#![allow(non_fmt_panics, clippy::needless_bool)]\n \n macro_rules! assert_const {\n     ($len:expr) => {\n@@ -28,6 +28,12 @@ fn main() {\n     assert_const!(3);\n     assert_const!(-1);\n \n-    // Don't lint on this:\n+    // Don't lint if based on `cfg!(..)`:\n     assert!(cfg!(feature = \"hey\") || cfg!(not(feature = \"asdf\")));\n+\n+    let flag: bool = cfg!(not(feature = \"asdf\"));\n+    assert!(flag);\n+\n+    const CFG_FLAG: &bool = &cfg!(feature = \"hey\");\n+    assert!(!CFG_FLAG);\n }"}]}