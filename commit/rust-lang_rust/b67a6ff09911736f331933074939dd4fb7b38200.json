{"sha": "b67a6ff09911736f331933074939dd4fb7b38200", "node_id": "C_kwDOAAsO6NoAKGI2N2E2ZmYwOTkxMTczNmYzMzE5MzMwNzQ5MzlkZDRmYjdiMzgyMDA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T12:35:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T13:13:38Z"}, "message": "pass clippy::cast_sign_loss and clippy::cast_possible_wrap", "tree": {"sha": "cbabdae81bfbf2a5b67021ad9246bfa2f7027b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbabdae81bfbf2a5b67021ad9246bfa2f7027b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67a6ff09911736f331933074939dd4fb7b38200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67a6ff09911736f331933074939dd4fb7b38200", "html_url": "https://github.com/rust-lang/rust/commit/b67a6ff09911736f331933074939dd4fb7b38200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67a6ff09911736f331933074939dd4fb7b38200/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0fdf290fe523fdbb6be21eafe4915638373fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0fdf290fe523fdbb6be21eafe4915638373fe8", "html_url": "https://github.com/rust-lang/rust/commit/3f0fdf290fe523fdbb6be21eafe4915638373fe8"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "99fc086a229cd2c1c0ac2562925dcfb09cc39f8a", "filename": "src/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=b67a6ff09911736f331933074939dd4fb7b38200", "patch": "@@ -230,6 +230,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n         // Wrapping \"addr - base_addr\"\n         let dl = ecx.data_layout();\n+        #[allow(clippy::cast_possible_wrap)] // we want to wrap here\n         let neg_base_addr = (base_addr as i64).wrapping_neg();\n         Some((\n             alloc_id,"}, {"sha": "c1b0c4afca68c0885177789c3acf4ab6ed5873e2", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b67a6ff09911736f331933074939dd4fb7b38200/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67a6ff09911736f331933074939dd4fb7b38200/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b67a6ff09911736f331933074939dd4fb7b38200", "patch": "@@ -24,7 +24,12 @@\n     clippy::derive_hash_xor_eq,\n     clippy::too_many_arguments\n )]\n-#![warn(rust_2018_idioms, clippy::cast_lossless)]\n+#![warn(\n+    rust_2018_idioms,\n+    clippy::cast_possible_wrap, // unsigned -> signed\n+    clippy::cast_sign_loss, // signed -> unsigned\n+    clippy::cast_lossless,\n+)]\n \n extern crate rustc_apfloat;\n extern crate rustc_ast;"}, {"sha": "db1ddf6291fd912cf52c8944b0561bfbde1d49b1", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b67a6ff09911736f331933074939dd4fb7b38200", "patch": "@@ -459,7 +459,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // The reason we need to do this wacky of a conversion is because\n         // `libc::getpid` returns an i32, however, `std::process::id()` return an u32.\n         // So we un-do the conversion that stdlib does and turn it back into an i32.\n-\n+        #[allow(clippy::cast_possible_wrap)]\n         Ok(std::process::id() as i32)\n     }\n "}, {"sha": "317eab082c0c2c871a6c069721cdae6058e2c9b7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b67a6ff09911736f331933074939dd4fb7b38200", "patch": "@@ -526,8 +526,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"memrchr\" => {\n                 let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let val = this.read_scalar(val)?.to_i32()? as u8;\n+                let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n+                // The docs say val is \"interpreted as unsigned char\".\n+                #[allow(clippy::cast_sign_loss)]\n+                let val = val as u8;\n+\n                 if let Some(idx) = this\n                     .read_bytes_ptr(ptr, Size::from_bytes(num))?\n                     .iter()\n@@ -543,8 +547,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"memchr\" => {\n                 let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let val = this.read_scalar(val)?.to_i32()? as u8;\n+                let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n+                // The docs say val is \"interpreted as unsigned char\".\n+                #[allow(clippy::cast_sign_loss)]\n+                let val = val as u8;\n+\n                 let idx = this\n                     .read_bytes_ptr(ptr, Size::from_bytes(num))?\n                     .iter()"}, {"sha": "3b82cb3c4eb8a9e71553873c344a089b551a9337", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=b67a6ff09911736f331933074939dd4fb7b38200", "patch": "@@ -776,7 +776,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of read bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+        let count = count\n+            .min(u64::try_from(this.machine_isize_max()).unwrap())\n+            .min(u64::try_from(isize::MAX).unwrap());\n         let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n@@ -827,7 +829,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of written bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+        let count = count\n+            .min(u64::try_from(this.machine_isize_max()).unwrap())\n+            .min(u64::try_from(isize::MAX).unwrap());\n         let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {"}, {"sha": "51b0e3b83d4733c19687aad079ef09b85c196fd5", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67a6ff09911736f331933074939dd4fb7b38200/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=b67a6ff09911736f331933074939dd4fb7b38200", "patch": "@@ -102,7 +102,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Return whether this was a success. >= 0 is success.\n                 // For the error code we arbitrarily pick 0xC0000185, STATUS_IO_DEVICE_ERROR.\n                 this.write_scalar(\n-                    Scalar::from_i32(if written.is_some() { 0 } else { 0xC0000185u32 as i32 }),\n+                    Scalar::from_u32(if written.is_some() { 0 } else { 0xC0000185u32 }),\n                     dest,\n                 )?;\n             }"}]}