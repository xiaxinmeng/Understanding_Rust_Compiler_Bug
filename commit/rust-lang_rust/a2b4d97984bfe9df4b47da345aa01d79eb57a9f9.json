{"sha": "a2b4d97984bfe9df4b47da345aa01d79eb57a9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjRkOTc5ODRiZmU5ZGY0YjQ3ZGEzNDVhYTAxZDc5ZWI1N2E5Zjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-29T02:14:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-29T02:14:07Z"}, "message": "Rollup merge of #79327 - TimDiekmann:static-alloc-pin-in-box, r=Mark-Simulacrum\n\nRequire allocator to be static for boxed `Pin`-API\n\nAllocators has to retain their validity until the instance and all of its clones are dropped. When pinning a value, it must live forever, thus, the allocator requires a `'static` lifetime for pinning a value. [Example from reddit](https://www.reddit.com/r/rust/comments/jymzdw/the_story_continues_vec_now_supports_custom/gd7qak2?utm_source=share&utm_medium=web2x&context=3):\n\n```rust\nlet alloc = MyAlloc(/* ... */);\nlet pinned = Box::pin_in(42, alloc);\nmem::forget(pinned); // Now `value` must live forever\n// Otherwise `Pin`'s invariants are violated, storage invalidated\n// before Drop was called.\n// borrow of `memory` can end here, there is no value keeping it.\ndrop(alloc); // Oh, value doesn't live forever.\n```", "tree": {"sha": "2cb54d1c60aa1cedf6aa94ec63f86277cbadf268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb54d1c60aa1cedf6aa94ec63f86277cbadf268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b4d97984bfe9df4b47da345aa01d79eb57a9f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwwPvCRBK7hj4Ov3rIwAAdHIIAGlCWTZImSPMrCmqFb2ur0yQ\nKJUifn4Rnz/LjpYteIBpTTy/+DUjfYKJEjKJTvFS8XsIui5Q1bOpWOiQ1ArAmzJb\naZspCiQ86igaXbGoCgA2l+6fBfONJxiNCLyTq19AlDaRqQ8vrvs+50V16jxgIBex\nYKbEbiu+jTffsNUZ86BN8O4NzQoPIcJiJiDVVghExle6wZMhkysggAUvDS4U8udm\n7z6JFr03LIlO9hrHxs4DbkI1BRzX5OO00X4fTA+CWGVIodHC+3tNYoXxRfH5XKKW\nas+5HXhaZyJJR0nyrDt5iR6uIbsftIQpbsyWxlEAmhLGOzfrQraY+GdvjpN2VEw=\n=RAfO\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cb54d1c60aa1cedf6aa94ec63f86277cbadf268\nparent 914d07ae5f90f01f138e66807873295fceaa9a26\nparent 7387f48e506456b8ca336d5036e380cd61e8c8c7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1606616047 +0100\ncommitter GitHub <noreply@github.com> 1606616047 +0100\n\nRollup merge of #79327 - TimDiekmann:static-alloc-pin-in-box, r=Mark-Simulacrum\n\nRequire allocator to be static for boxed `Pin`-API\n\nAllocators has to retain their validity until the instance and all of its clones are dropped. When pinning a value, it must live forever, thus, the allocator requires a `'static` lifetime for pinning a value. [Example from reddit](https://www.reddit.com/r/rust/comments/jymzdw/the_story_continues_vec_now_supports_custom/gd7qak2?utm_source=share&utm_medium=web2x&context=3):\n\n```rust\nlet alloc = MyAlloc(/* ... */);\nlet pinned = Box::pin_in(42, alloc);\nmem::forget(pinned); // Now `value` must live forever\n// Otherwise `Pin`'s invariants are violated, storage invalidated\n// before Drop was called.\n// borrow of `memory` can end here, there is no value keeping it.\ndrop(alloc); // Oh, value doesn't live forever.\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b4d97984bfe9df4b47da345aa01d79eb57a9f9", "html_url": "https://github.com/rust-lang/rust/commit/a2b4d97984bfe9df4b47da345aa01d79eb57a9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b4d97984bfe9df4b47da345aa01d79eb57a9f9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914d07ae5f90f01f138e66807873295fceaa9a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/914d07ae5f90f01f138e66807873295fceaa9a26", "html_url": "https://github.com/rust-lang/rust/commit/914d07ae5f90f01f138e66807873295fceaa9a26"}, {"sha": "7387f48e506456b8ca336d5036e380cd61e8c8c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7387f48e506456b8ca336d5036e380cd61e8c8c7", "html_url": "https://github.com/rust-lang/rust/commit/7387f48e506456b8ca336d5036e380cd61e8c8c7"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "d814c525ceb6e865479171d5f040dce70d5cf881", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a2b4d97984bfe9df4b47da345aa01d79eb57a9f9/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b4d97984bfe9df4b47da345aa01d79eb57a9f9/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=a2b4d97984bfe9df4b47da345aa01d79eb57a9f9", "patch": "@@ -327,7 +327,10 @@ impl<T, A: AllocRef> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[inline(always)]\n-    pub fn pin_in(x: T, alloc: A) -> Pin<Self> {\n+    pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n+    where\n+        A: 'static,\n+    {\n         Self::new_in(x, alloc).into()\n     }\n \n@@ -802,7 +805,10 @@ impl<T: ?Sized, A: AllocRef> Box<T, A> {\n     ///\n     /// This is also available via [`From`].\n     #[unstable(feature = \"box_into_pin\", issue = \"62370\")]\n-    pub fn into_pin(boxed: Self) -> Pin<Self> {\n+    pub fn into_pin(boxed: Self) -> Pin<Self>\n+    where\n+        A: 'static,\n+    {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n         // when `T: !Unpin`,  so it's safe to pin it directly without any\n         // additional requirements.\n@@ -1010,7 +1016,10 @@ impl<T> From<T> for Box<T> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T: ?Sized, A: AllocRef> From<Box<T, A>> for Pin<Box<T, A>> {\n+impl<T: ?Sized, A: AllocRef> From<Box<T, A>> for Pin<Box<T, A>>\n+where\n+    A: 'static,\n+{\n     /// Converts a `Box<T>` into a `Pin<Box<T>>`\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n@@ -1413,10 +1422,13 @@ impl<T: ?Sized, A: AllocRef> AsMut<T> for Box<T, A> {\n  *  could have a method to project a Pin<T> from it.\n  */\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T: ?Sized, A: AllocRef> Unpin for Box<T, A> {}\n+impl<T: ?Sized, A: AllocRef> Unpin for Box<T, A> where A: 'static {}\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A> {\n+impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A>\n+where\n+    A: 'static,\n+{\n     type Yield = G::Yield;\n     type Return = G::Return;\n \n@@ -1426,7 +1438,10 @@ impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>> {\n+impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>>\n+where\n+    A: 'static,\n+{\n     type Yield = G::Yield;\n     type Return = G::Return;\n \n@@ -1436,7 +1451,10 @@ impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<F: ?Sized + Future + Unpin, A: AllocRef> Future for Box<F, A> {\n+impl<F: ?Sized + Future + Unpin, A: AllocRef> Future for Box<F, A>\n+where\n+    A: 'static,\n+{\n     type Output = F::Output;\n \n     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {"}]}