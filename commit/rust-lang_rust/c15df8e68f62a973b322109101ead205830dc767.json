{"sha": "c15df8e68f62a973b322109101ead205830dc767", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNWRmOGU2OGY2MmE5NzNiMzIyMTA5MTAxZWFkMjA1ODMwZGM3Njc=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-22T02:40:20Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:48Z"}, "message": "libcore: Don't impl RawPtr* traits for NonZero.", "tree": {"sha": "1a7d6edb2b7e97c72e121f7c9b14b7b763d8df48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7d6edb2b7e97c72e121f7c9b14b7b763d8df48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15df8e68f62a973b322109101ead205830dc767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15df8e68f62a973b322109101ead205830dc767", "html_url": "https://github.com/rust-lang/rust/commit/c15df8e68f62a973b322109101ead205830dc767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15df8e68f62a973b322109101ead205830dc767/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2", "html_url": "https://github.com/rust-lang/rust/commit/b44d7cb89c57b1fc0495b337dfddbe5cdc2ed6b2"}], "stats": {"total": 65, "additions": 2, "deletions": 63}, "files": [{"sha": "a45e1aa24163a3fcf6b90b0874f43ba87df0dca8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c15df8e68f62a973b322109101ead205830dc767/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15df8e68f62a973b322109101ead205830dc767/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c15df8e68f62a973b322109101ead205830dc767", "patch": "@@ -1120,7 +1120,7 @@ impl<T> Vec<T> {\n         }\n \n         unsafe {\n-            let end = *self.ptr.offset(self.len as int);\n+            let end = (*self.ptr).offset(self.len as int);\n             ptr::write(&mut *end, value);\n             self.len += 1;\n         }"}, {"sha": "43903871c3f7c1faec8dcb843e2a90429ae63cb8", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 62, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c15df8e68f62a973b322109101ead205830dc767/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15df8e68f62a973b322109101ead205830dc767/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=c15df8e68f62a973b322109101ead205830dc767", "patch": "@@ -10,18 +10,12 @@\n \n //! Exposes the NonZero lang item which provides optimization hints.\n \n-use cmp::Eq;\n-use intrinsics;\n-use kinds::Copy;\n use ops::Deref;\n-use option::Option;\n-use option::Option::Some;\n-use ptr::{null, null_mut, RawPtr, RawMutPtr};\n \n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang=\"non_zero\"]\n-#[deriving(Clone, PartialEq, Eq, PartialOrd)]\n+#[deriving(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Show)]\n #[experimental]\n pub struct NonZero<T>(T);\n \n@@ -34,65 +28,10 @@ impl<T> NonZero<T> {\n     }\n }\n \n-impl<T: Copy> Copy for NonZero<T> {}\n-\n impl<T> Deref<T> for NonZero<T> {\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n         let NonZero(ref inner) = *self;\n         inner\n     }\n }\n-\n-impl<T> RawPtr<T> for NonZero<*const T> {\n-    #[inline]\n-    fn null() -> NonZero<*const T> { NonZero(null()) }\n-\n-    #[inline]\n-    fn is_null(&self) -> bool { false }\n-\n-    #[inline]\n-    fn to_uint(&self) -> uint {\n-        **self as uint\n-    }\n-\n-    #[inline]\n-    unsafe fn offset(self, count: int) -> NonZero<*const T> {\n-        NonZero(intrinsics::offset(*self, count))\n-    }\n-\n-    #[inline]\n-    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n-        Some(&***self)\n-    }\n-}\n-\n-impl<T> RawPtr<T> for NonZero<*mut T> {\n-    #[inline]\n-    fn null() -> NonZero<*mut T> { NonZero(null_mut()) }\n-\n-    #[inline]\n-    fn is_null(&self) -> bool { false }\n-\n-    #[inline]\n-    fn to_uint(&self) -> uint {\n-        **self as uint\n-    }\n-\n-    #[inline]\n-    unsafe fn offset(self, count: int) -> NonZero<*mut T> {\n-        NonZero(intrinsics::offset(*self as *const T, count) as *mut T)\n-    }\n-\n-    #[inline]\n-    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n-        Some(&***self)\n-    }\n-}\n-\n-impl<T> RawMutPtr<T> for NonZero<*mut T> {\n-    #[inline]\n-    unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n-        Some(&mut ***self)\n-    }\n-}"}]}