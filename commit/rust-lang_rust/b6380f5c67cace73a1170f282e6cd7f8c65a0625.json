{"sha": "b6380f5c67cace73a1170f282e6cd7f8c65a0625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MzgwZjVjNjdjYWNlNzNhMTE3MGYyODJlNmNkN2Y4YzY1YTA2MjU=", "commit": {"author": {"name": "JP Sugarbroad", "email": "jpsugar@google.com", "date": "2015-01-20T20:00:12Z"}, "committer": {"name": "JP Sugarbroad", "email": "taral@taral.net", "date": "2015-01-20T20:34:18Z"}, "message": "Kill RacyCell in favor of marking SyncSender explicitly Send.", "tree": {"sha": "9a44872f26b45c087d067a23e8d14aaa2b78e7d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a44872f26b45c087d067a23e8d14aaa2b78e7d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6380f5c67cace73a1170f282e6cd7f8c65a0625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6380f5c67cace73a1170f282e6cd7f8c65a0625", "html_url": "https://github.com/rust-lang/rust/commit/b6380f5c67cace73a1170f282e6cd7f8c65a0625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6380f5c67cace73a1170f282e6cd7f8c65a0625/comments", "author": {"login": "taralx", "id": 1036808, "node_id": "MDQ6VXNlcjEwMzY4MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1036808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taralx", "html_url": "https://github.com/taralx", "followers_url": "https://api.github.com/users/taralx/followers", "following_url": "https://api.github.com/users/taralx/following{/other_user}", "gists_url": "https://api.github.com/users/taralx/gists{/gist_id}", "starred_url": "https://api.github.com/users/taralx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taralx/subscriptions", "organizations_url": "https://api.github.com/users/taralx/orgs", "repos_url": "https://api.github.com/users/taralx/repos", "events_url": "https://api.github.com/users/taralx/events{/privacy}", "received_events_url": "https://api.github.com/users/taralx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taralx", "id": 1036808, "node_id": "MDQ6VXNlcjEwMzY4MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1036808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taralx", "html_url": "https://github.com/taralx", "followers_url": "https://api.github.com/users/taralx/followers", "following_url": "https://api.github.com/users/taralx/following{/other_user}", "gists_url": "https://api.github.com/users/taralx/gists{/gist_id}", "starred_url": "https://api.github.com/users/taralx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taralx/subscriptions", "organizations_url": "https://api.github.com/users/taralx/orgs", "repos_url": "https://api.github.com/users/taralx/repos", "events_url": "https://api.github.com/users/taralx/events{/privacy}", "received_events_url": "https://api.github.com/users/taralx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f86de49748b472d4d189d9688b0d856c000914", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f86de49748b472d4d189d9688b0d856c000914", "html_url": "https://github.com/rust-lang/rust/commit/a0f86de49748b472d4d189d9688b0d856c000914"}], "stats": {"total": 51, "additions": 17, "deletions": 34}, "files": [{"sha": "e1ad02498db2ce4749be81483e896f234ab18353", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b6380f5c67cace73a1170f282e6cd7f8c65a0625/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6380f5c67cace73a1170f282e6cd7f8c65a0625/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=b6380f5c67cace73a1170f282e6cd7f8c65a0625", "patch": "@@ -319,6 +319,7 @@ use prelude::v1::*;\n \n use sync::Arc;\n use fmt;\n+#[cfg(stage0)] // NOTE remove use after next snapshot\n use marker;\n use mem;\n use cell::UnsafeCell;\n@@ -372,7 +373,7 @@ unsafe impl<T:Send> Send for Sender<T> { }\n #[stable]\n #[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct SyncSender<T> {\n-    inner: Arc<RacyCell<sync::Packet<T>>>,\n+    inner: Arc<UnsafeCell<sync::Packet<T>>>,\n     // can't share in an arc\n     _marker: marker::NoSync,\n }\n@@ -382,11 +383,13 @@ pub struct SyncSender<T> {\n #[stable]\n #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n pub struct SyncSender<T> {\n-    inner: Arc<RacyCell<sync::Packet<T>>>,\n+    inner: Arc<UnsafeCell<sync::Packet<T>>>,\n }\n \n+unsafe impl<T:Send> Send for SyncSender<T> {}\n+\n #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-impl<T> !marker::Sync for SyncSender<T> {}\n+impl<T> !Sync for SyncSender<T> {}\n \n /// An error returned from the `send` function on channels.\n ///\n@@ -442,10 +445,10 @@ pub enum TrySendError<T> {\n }\n \n enum Flavor<T> {\n-    Oneshot(Arc<RacyCell<oneshot::Packet<T>>>),\n-    Stream(Arc<RacyCell<stream::Packet<T>>>),\n-    Shared(Arc<RacyCell<shared::Packet<T>>>),\n-    Sync(Arc<RacyCell<sync::Packet<T>>>),\n+    Oneshot(Arc<UnsafeCell<oneshot::Packet<T>>>),\n+    Stream(Arc<UnsafeCell<stream::Packet<T>>>),\n+    Shared(Arc<UnsafeCell<shared::Packet<T>>>),\n+    Sync(Arc<UnsafeCell<sync::Packet<T>>>),\n }\n \n #[doc(hidden)]\n@@ -497,7 +500,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// ```\n #[stable]\n pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n-    let a = Arc::new(RacyCell::new(oneshot::Packet::new()));\n+    let a = Arc::new(UnsafeCell::new(oneshot::Packet::new()));\n     (Sender::new(Flavor::Oneshot(a.clone())), Receiver::new(Flavor::Oneshot(a)))\n }\n \n@@ -537,7 +540,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// ```\n #[stable]\n pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n-    let a = Arc::new(RacyCell::new(sync::Packet::new(bound)));\n+    let a = Arc::new(UnsafeCell::new(sync::Packet::new(bound)));\n     (SyncSender::new(a.clone()), Receiver::new(Flavor::Sync(a)))\n }\n \n@@ -589,7 +592,7 @@ impl<T: Send> Sender<T> {\n                         return (*p).send(t).map_err(SendError);\n                     } else {\n                         let a =\n-                            Arc::new(RacyCell::new(stream::Packet::new()));\n+                            Arc::new(UnsafeCell::new(stream::Packet::new()));\n                         let rx = Receiver::new(Flavor::Stream(a.clone()));\n                         match (*p).upgrade(rx) {\n                             oneshot::UpSuccess => {\n@@ -631,7 +634,7 @@ impl<T: Send> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n-                let a = Arc::new(RacyCell::new(shared::Packet::new()));\n+                let a = Arc::new(UnsafeCell::new(shared::Packet::new()));\n                 unsafe {\n                     let guard = (*a.get()).postinit_lock();\n                     let rx = Receiver::new(Flavor::Shared(a.clone()));\n@@ -643,7 +646,7 @@ impl<T: Send> Clone for Sender<T> {\n                 }\n             }\n             Flavor::Stream(ref p) => {\n-                let a = Arc::new(RacyCell::new(shared::Packet::new()));\n+                let a = Arc::new(UnsafeCell::new(shared::Packet::new()));\n                 unsafe {\n                     let guard = (*a.get()).postinit_lock();\n                     let rx = Receiver::new(Flavor::Shared(a.clone()));\n@@ -690,12 +693,12 @@ impl<T: Send> Drop for Sender<T> {\n \n impl<T: Send> SyncSender<T> {\n     #[cfg(stage0)] // NOTE remove impl after next snapshot\n-    fn new(inner: Arc<RacyCell<sync::Packet<T>>>) -> SyncSender<T> {\n+    fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner, _marker: marker::NoSync }\n     }\n \n     #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-    fn new(inner: Arc<RacyCell<sync::Packet<T>>>) -> SyncSender<T> {\n+    fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }\n \n@@ -978,26 +981,6 @@ impl<T: Send> Drop for Receiver<T> {\n     }\n }\n \n-/// A version of `UnsafeCell` intended for use in concurrent data\n-/// structures (for example, you might put it in an `Arc`).\n-struct RacyCell<T>(pub UnsafeCell<T>);\n-\n-impl<T> RacyCell<T> {\n-\n-    fn new(value: T) -> RacyCell<T> {\n-        RacyCell(UnsafeCell { value: value })\n-    }\n-\n-    unsafe fn get(&self) -> *mut T {\n-        self.0.get()\n-    }\n-\n-}\n-\n-unsafe impl<T:Send> Send for RacyCell<T> { }\n-\n-unsafe impl<T> Sync for RacyCell<T> { } // Oh dear\n-\n impl<T> fmt::Show for SendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"sending on a closed channel\".fmt(f)"}]}