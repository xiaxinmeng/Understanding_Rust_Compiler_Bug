{"sha": "dd6307ddc4535bef09e2b14caff5acfaeb88891e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNjMwN2RkYzQ1MzViZWYwOWUyYjE0Y2FmZjVhY2ZhZWI4ODg5MWU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-12T19:47:51Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-12T20:06:14Z"}, "message": "Add support for container_name in workspace/symbol query", "tree": {"sha": "4e1511826adb09561572ed8eb405f0ad8d84f42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1511826adb09561572ed8eb405f0ad8d84f42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd6307ddc4535bef09e2b14caff5acfaeb88891e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6307ddc4535bef09e2b14caff5acfaeb88891e", "html_url": "https://github.com/rust-lang/rust/commit/dd6307ddc4535bef09e2b14caff5acfaeb88891e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd6307ddc4535bef09e2b14caff5acfaeb88891e/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61324a845bde0959c1f9ac86ce31d022812f4c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/61324a845bde0959c1f9ac86ce31d022812f4c21", "html_url": "https://github.com/rust-lang/rust/commit/61324a845bde0959c1f9ac86ce31d022812f4c21"}], "stats": {"total": 133, "additions": 116, "deletions": 17}, "files": [{"sha": "bcacbe6fc05683c2629721b8932cba43db93ec25", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=dd6307ddc4535bef09e2b14caff5acfaeb88891e", "patch": "@@ -19,13 +19,18 @@ pub struct NavigationTarget {\n     kind: SyntaxKind,\n     full_range: TextRange,\n     focus_range: Option<TextRange>,\n+    container_name: Option<SmolStr>,\n }\n \n impl NavigationTarget {\n     pub fn name(&self) -> &SmolStr {\n         &self.name\n     }\n \n+    pub fn container_name(&self) -> Option<&SmolStr> {\n+        self.container_name.as_ref()\n+    }\n+\n     pub fn kind(&self) -> SyntaxKind {\n         self.kind\n     }\n@@ -53,6 +58,7 @@ impl NavigationTarget {\n             kind: symbol.ptr.kind(),\n             full_range: symbol.ptr.range(),\n             focus_range: None,\n+            container_name: symbol.container_name.map(|v| v.clone()),\n         }\n     }\n \n@@ -67,6 +73,7 @@ impl NavigationTarget {\n             full_range: ptr.range(),\n             focus_range: None,\n             kind: NAME,\n+            container_name: None,\n         }\n     }\n \n@@ -170,6 +177,9 @@ impl NavigationTarget {\n         if let Some(focus_range) = self.focus_range() {\n             buf.push_str(&format!(\" {:?}\", focus_range))\n         }\n+        if let Some(container_name) = self.container_name() {\n+            buf.push_str(&format!(\" {:?}\", container_name))\n+        }\n         buf\n     }\n \n@@ -192,6 +202,7 @@ impl NavigationTarget {\n             full_range: node.range(),\n             focus_range,\n             // ptr: Some(LocalSyntaxPtr::new(node)),\n+            container_name: None,\n         }\n     }\n }"}, {"sha": "62d0979fe52404a00c407981dd9cc4b69b31810d", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=dd6307ddc4535bef09e2b14caff5acfaeb88891e", "patch": "@@ -32,6 +32,7 @@ use ra_syntax::{\n     algo::{visit::{visitor, Visitor}, find_covering_node},\n     SyntaxKind::{self, *},\n     ast::{self, NameOwner},\n+    WalkEvent,\n };\n use ra_db::{\n     SourceRootId, SourceDatabase,\n@@ -62,17 +63,14 @@ pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n     let source_file = db.parse(file_id);\n-    let mut symbols = source_file\n-        .syntax()\n-        .descendants()\n-        .filter_map(to_symbol)\n-        .map(move |(name, ptr)| FileSymbol { name, ptr, file_id })\n-        .collect::<Vec<_>>();\n+\n+    let mut symbols = source_file_to_file_symbols(&source_file, file_id);\n \n     for (name, text_range) in hir::source_binder::macro_symbols(db, file_id) {\n         let node = find_covering_node(source_file.syntax(), text_range);\n         let ptr = SyntaxNodePtr::new(node);\n-        symbols.push(FileSymbol { file_id, name, ptr })\n+        // TODO: Should we get container name for macro symbols?\n+        symbols.push(FileSymbol { file_id, name, ptr, container_name: None })\n     }\n \n     Arc::new(SymbolIndex::new(symbols))\n@@ -158,13 +156,7 @@ impl SymbolIndex {\n         files: impl ParallelIterator<Item = (FileId, TreeArc<SourceFile>)>,\n     ) -> SymbolIndex {\n         let symbols = files\n-            .flat_map(|(file_id, file)| {\n-                file.syntax()\n-                    .descendants()\n-                    .filter_map(to_symbol)\n-                    .map(move |(name, ptr)| FileSymbol { name, ptr, file_id })\n-                    .collect::<Vec<_>>()\n-            })\n+            .flat_map(|(file_id, file)| source_file_to_file_symbols(&file, file_id))\n             .collect::<Vec<_>>();\n         SymbolIndex::new(symbols)\n     }\n@@ -208,19 +200,57 @@ fn is_type(kind: SyntaxKind) -> bool {\n     }\n }\n \n+fn is_symbol_def(kind: SyntaxKind) -> bool {\n+    match kind {\n+        FN_DEF | STRUCT_DEF | ENUM_DEF | TRAIT_DEF | MODULE | TYPE_DEF | CONST_DEF | STATIC_DEF => {\n+            true\n+        }\n+\n+        _ => false,\n+    }\n+}\n+\n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub(crate) struct FileSymbol {\n     pub(crate) file_id: FileId,\n     pub(crate) name: SmolStr,\n     pub(crate) ptr: SyntaxNodePtr,\n+    pub(crate) container_name: Option<SmolStr>,\n+}\n+\n+fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec<FileSymbol> {\n+    let mut symbols = Vec::new();\n+    let mut stack = Vec::new();\n+\n+    for event in source_file.syntax().preorder() {\n+        match event {\n+            WalkEvent::Enter(node) => {\n+                if let Some(mut symbol) = to_file_symbol(node, file_id) {\n+                    symbol.container_name = stack.last().map(|v: &SmolStr| v.clone());\n+\n+                    stack.push(symbol.name.clone());\n+                    symbols.push(symbol);\n+                }\n+            }\n+\n+            WalkEvent::Leave(node) => {\n+                if is_symbol_def(node.kind()) {\n+                    stack.pop();\n+                }\n+            }\n+        }\n+    }\n+\n+    symbols\n }\n \n fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr)> {\n     fn decl<N: NameOwner>(node: &N) -> Option<(SmolStr, SyntaxNodePtr)> {\n         let name = node.name()?.text().clone();\n         let ptr = SyntaxNodePtr::new(node.syntax());\n+\n         Some((name, ptr))\n     }\n     visitor()\n@@ -234,3 +264,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr)> {\n         .visit(decl::<ast::StaticDef>)\n         .accept(node)?\n }\n+\n+fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n+    to_symbol(node).map(move |(name, ptr)| FileSymbol { name, ptr, file_id, container_name: None })\n+}"}, {"sha": "4126bd1609d7085a607e1bd21a0e36b8500c5126", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=dd6307ddc4535bef09e2b14caff5acfaeb88891e", "patch": "@@ -1,9 +1,9 @@\n use insta::assert_debug_snapshot_matches;\n use ra_ide_api::{\n     mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n-    AnalysisChange, CrateGraph, FileId, Query,\n+    AnalysisChange, CrateGraph, FileId, Query, NavigationTarget,\n };\n-use ra_syntax::TextRange;\n+use ra_syntax::{TextRange, SmolStr};\n \n #[test]\n fn test_unresolved_module_diagnostic() {\n@@ -49,6 +49,11 @@ fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n     analysis.find_all_refs(position).unwrap()\n }\n \n+fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n+    let (analysis, _) = single_file(text);\n+    analysis.symbol_search(Query::new(query.into())).unwrap()\n+}\n+\n #[test]\n fn test_find_all_refs_for_local() {\n     let code = r#\"\n@@ -90,6 +95,55 @@ fn test_find_all_refs_for_fn_param() {\n     assert_eq!(refs.len(), 2);\n }\n \n+#[test]\n+fn test_world_symbols_with_no_container() {\n+    {\n+        let code = r#\"\n+        enum FooInner { }\n+        \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert!(s.container_name().is_none());\n+    }\n+}\n+\n+#[test]\n+fn test_world_symbols_include_container_name() {\n+    {\n+        let code = r#\"\n+    fn foo() {\n+        enum FooInner { }\n+    }\n+        \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+    }\n+\n+    {\n+        let code = r#\"\n+    mod foo {\n+        struct FooInner;\n+    }\n+        \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+    }\n+}\n+\n #[test]\n #[ignore]\n fn world_symbols_include_stuff_from_macros() {"}, {"sha": "09d896c40d62a0c658cf2d6d680eade0d031aa8e", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6307ddc4535bef09e2b14caff5acfaeb88891e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=dd6307ddc4535bef09e2b14caff5acfaeb88891e", "patch": "@@ -190,7 +190,7 @@ pub fn handle_workspace_symbol(\n                 name: nav.name().to_string(),\n                 kind: nav.kind().conv(),\n                 location: nav.try_conv_with(world)?,\n-                container_name: None,\n+                container_name: nav.container_name().map(|v| v.to_string()),\n                 deprecated: None,\n             };\n             res.push(info);"}]}