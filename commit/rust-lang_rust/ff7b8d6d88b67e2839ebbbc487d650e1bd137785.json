{"sha": "ff7b8d6d88b67e2839ebbbc487d650e1bd137785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmN2I4ZDZkODhiNjdlMjgzOWViYmJjNDg3ZDY1MGUxYmQxMzc3ODU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-22T01:39:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T01:47:58Z"}, "message": "librustc: Implement lazy module loading.", "tree": {"sha": "214193d788813eb718daf57c9c8fe6e3a23da7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/214193d788813eb718daf57c9c8fe6e3a23da7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff7b8d6d88b67e2839ebbbc487d650e1bd137785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7b8d6d88b67e2839ebbbc487d650e1bd137785", "html_url": "https://github.com/rust-lang/rust/commit/ff7b8d6d88b67e2839ebbbc487d650e1bd137785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff7b8d6d88b67e2839ebbbc487d650e1bd137785/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bbb1e06f114b0a26cd9d9ca35fe1f248c56442a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbb1e06f114b0a26cd9d9ca35fe1f248c56442a", "html_url": "https://github.com/rust-lang/rust/commit/1bbb1e06f114b0a26cd9d9ca35fe1f248c56442a"}], "stats": {"total": 112, "additions": 80, "deletions": 32}, "files": [{"sha": "3174ee33cee297b96aedc43368060032a41a68f1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 80, "deletions": 32, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/ff7b8d6d88b67e2839ebbbc487d650e1bd137785/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7b8d6d88b67e2839ebbbc487d650e1bd137785/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ff7b8d6d88b67e2839ebbbc487d650e1bd137785", "patch": "@@ -471,12 +471,18 @@ pub struct Module {\n \n     // The index of the import we're resolving.\n     resolved_import_count: uint,\n+\n+    // Whether this module is populated. If not populated, any attempt to\n+    // access the children must be preceded with a\n+    // `populate_module_if_necessary` call.\n+    populated: bool,\n }\n \n pub fn Module(parent_link: ParentLink,\n               def_id: Option<def_id>,\n-              kind: ModuleKind)\n-           -> Module {\n+              kind: ModuleKind,\n+              external: bool)\n+              -> Module {\n     Module {\n         parent_link: parent_link,\n         def_id: def_id,\n@@ -488,6 +494,7 @@ pub fn Module(parent_link: ParentLink,\n         import_resolutions: @mut HashMap::new(),\n         glob_count: 0,\n         resolved_import_count: 0,\n+        populated: !external,\n     }\n }\n \n@@ -534,9 +541,10 @@ impl NameBindings {\n                          parent_link: ParentLink,\n                          def_id: Option<def_id>,\n                          kind: ModuleKind,\n+                         external: bool,\n                          sp: span) {\n         // Merges the module with the existing type def or creates a new one.\n-        let module_ = @mut Module(parent_link, def_id, kind);\n+        let module_ = @mut Module(parent_link, def_id, kind, external);\n         match self.type_def {\n             None => {\n                 self.type_def = Some(TypeNsDef {\n@@ -563,10 +571,11 @@ impl NameBindings {\n                            parent_link: ParentLink,\n                            def_id: Option<def_id>,\n                            kind: ModuleKind,\n+                           external: bool,\n                            _sp: span) {\n         match self.type_def {\n             None => {\n-                let module = @mut Module(parent_link, def_id, kind);\n+                let module = @mut Module(parent_link, def_id, kind, external);\n                 self.type_def = Some(TypeNsDef {\n                     privacy: privacy,\n                     module_def: Some(module),\n@@ -577,7 +586,10 @@ impl NameBindings {\n             Some(type_def) => {\n                 match type_def.module_def {\n                     None => {\n-                        let module = @mut Module(parent_link, def_id, kind);\n+                        let module = @mut Module(parent_link,\n+                                                 def_id,\n+                                                 kind,\n+                                                 external);\n                         self.type_def = Some(TypeNsDef {\n                             privacy: privacy,\n                             module_def: Some(module),\n@@ -799,6 +811,7 @@ pub fn Resolver(session: Session,\n                              NoParentLink,\n                              Some(def_id { crate: 0, node: 0 }),\n                              NormalModuleKind,\n+                             false,\n                              crate.span);\n \n     let current_module = graph_root.get_module();\n@@ -1164,6 +1177,7 @@ impl Resolver {\n                                             parent_link,\n                                             Some(def_id),\n                                             NormalModuleKind,\n+                                            false,\n                                             sp);\n \n                 let new_parent =\n@@ -1186,6 +1200,7 @@ impl Resolver {\n                                                     parent_link,\n                                                     Some(def_id),\n                                                     ExternModuleKind,\n+                                                    false,\n                                                     sp);\n \n                         ModuleReducedGraphParent(name_bindings.get_module())\n@@ -1310,6 +1325,7 @@ impl Resolver {\n                                                             parent_link,\n                                                             Some(def_id),\n                                                             ImplModuleKind,\n+                                                            false,\n                                                             sp);\n \n                                 ModuleReducedGraphParent(\n@@ -1367,6 +1383,7 @@ impl Resolver {\n                                             parent_link,\n                                             Some(local_def(item.id)),\n                                             TraitModuleKind,\n+                                            false,\n                                             sp);\n                 let module_parent = ModuleReducedGraphParent(name_bindings.\n                                                              get_module());\n@@ -1556,7 +1573,8 @@ impl Resolver {\n                             (self.get_module_from_parent(parent), name);\n                         let external_module = @mut Module(parent_link,\n                                                           Some(def_id),\n-                                                          NormalModuleKind);\n+                                                          NormalModuleKind,\n+                                                          false);\n \n                         parent.external_module_children.insert(\n                             name,\n@@ -1620,7 +1638,8 @@ impl Resolver {\n             let new_module = @mut Module(\n                 BlockParentLink(parent_module, block_id),\n                 None,\n-                AnonymousModuleKind);\n+                AnonymousModuleKind,\n+                false);\n             parent_module.anonymous_children.insert(block_id, new_module);\n             new_parent = ModuleReducedGraphParent(new_module);\n         } else {\n@@ -1656,6 +1675,7 @@ impl Resolver {\n                                                   parent_link,\n                                                   Some(def_id),\n                                                   NormalModuleKind,\n+                                                  true,\n                                                   dummy_sp());\n               }\n             }\n@@ -1717,6 +1737,7 @@ impl Resolver {\n                                                   parent_link,\n                                                   Some(def_id),\n                                                   TraitModuleKind,\n+                                                  true,\n                                                   dummy_sp())\n           }\n           def_ty(_) => {\n@@ -1755,8 +1776,19 @@ impl Resolver {\n         match def_like {\n             dl_def(def) => {\n                 // Add the new child item, if necessary.\n-                let optional_module = match def {\n-                    def_foreign_mod(*) => Some(root),\n+                match def {\n+                    def_foreign_mod(def_id) => {\n+                        // Foreign modules have no names. Recur and populate\n+                        // eagerly.\n+                        do csearch::each_child_of_item(self.session.cstore,\n+                                                       def_id)\n+                                |def_like, child_ident| {\n+                            self.build_reduced_graph_for_external_crate_def(\n+                                root,\n+                                def_like,\n+                                child_ident)\n+                        }\n+                    }\n                     _ => {\n                         let (child_name_bindings, new_parent) =\n                             self.add_child(ident,\n@@ -1770,28 +1802,6 @@ impl Resolver {\n                                                  self.session.str_of(ident),\n                                                  ident,\n                                                  new_parent);\n-\n-                        /*println(fmt!(\">>> child item added: %s\",\n-                                     self.session.str_of(ident)));*/\n-\n-                        child_name_bindings.get_module_if_available()\n-                    }\n-                };\n-\n-                match optional_module {\n-                    None => {}\n-                    Some(module) => {\n-                        do csearch::each_child_of_item(self.session.cstore,\n-                                                       def_id_of_def(def))\n-                                |def_like, child_ident| {\n-                            /*println(fmt!(\">>> each_child_of_item: %s %s\",\n-                                         self.session.str_of(ident),\n-                                         self.session.str_of(child_ident)));*/\n-                            self.build_reduced_graph_for_external_crate_def(\n-                                module,\n-                                def_like,\n-                                child_ident)\n-                        }\n                     }\n                 }\n             }\n@@ -1844,6 +1854,7 @@ impl Resolver {\n                                             parent_link,\n                                             Some(def),\n                                             ImplModuleKind,\n+                                            true,\n                                             dummy_sp());\n                                         type_module =\n                                             child_name_bindings.\n@@ -1890,6 +1901,31 @@ impl Resolver {\n         }\n     }\n \n+    /// Builds the reduced graph rooted at the given external module.\n+    fn populate_external_module(@mut self, module: @mut Module) {\n+        let def_id = match module.def_id {\n+            None => return,\n+            Some(def_id) => def_id,\n+        };\n+\n+        do csearch::each_child_of_item(self.session.cstore, def_id)\n+                |def_like, child_ident| {\n+            self.build_reduced_graph_for_external_crate_def(module,\n+                                                            def_like,\n+                                                            child_ident)\n+        }\n+        module.populated = true\n+    }\n+\n+    /// Ensures that the reduced graph rooted at the given external module\n+    /// is built, building it if it is not.\n+    fn populate_module_if_necessary(@mut self, module: @mut Module) {\n+        if !module.populated {\n+            self.populate_external_module(module)\n+        }\n+        assert!(module.populated)\n+    }\n+\n     /// Builds the reduced graph rooted at the 'use' directive for an external\n     /// crate.\n     pub fn build_reduced_graph_for_external_crate(@mut self,\n@@ -1999,6 +2035,7 @@ impl Resolver {\n                self.module_to_str(module_));\n         self.resolve_imports_for_module(module_);\n \n+        self.populate_module_if_necessary(module_);\n         for (_, &child_node) in module_.children.iter() {\n             match child_node.get_module_if_available() {\n                 None => {\n@@ -2224,6 +2261,7 @@ impl Resolver {\n         let mut type_result = UnknownResult;\n \n         // Search for direct children of the containing module.\n+        self.populate_module_if_necessary(containing_module);\n         match containing_module.children.find(&source) {\n             None => {\n                 // Continue.\n@@ -2542,6 +2580,7 @@ impl Resolver {\n         };\n \n         // Add all children from the containing module.\n+        self.populate_module_if_necessary(containing_module);\n         for (&ident, name_bindings) in containing_module.children.iter() {\n             merge_import_resolution(ident, *name_bindings);\n         }\n@@ -2775,6 +2814,7 @@ impl Resolver {\n \n         // The current module node is handled specially. First, check for\n         // its immediate children.\n+        self.populate_module_if_necessary(module_);\n         match module_.children.find(&name) {\n             Some(name_bindings)\n                     if name_bindings.defined_in_namespace(namespace) => {\n@@ -3029,6 +3069,7 @@ impl Resolver {\n                self.module_to_str(module_));\n \n         // First, check the direct children of the module.\n+        self.populate_module_if_necessary(module_);\n         match module_.children.find(&name) {\n             Some(name_bindings)\n                     if name_bindings.defined_in_namespace(namespace) => {\n@@ -3118,6 +3159,7 @@ impl Resolver {\n         }\n \n         // Descend into children and anonymous children.\n+        self.populate_module_if_necessary(module_);\n         for (_, &child_node) in module_.children.iter() {\n             match child_node.get_module_if_available() {\n                 None => {\n@@ -3176,6 +3218,7 @@ impl Resolver {\n         }\n \n         self.record_exports_for_module(module_);\n+        self.populate_module_if_necessary(module_);\n \n         for (_, &child_name_bindings) in module_.children.iter() {\n             match child_name_bindings.get_module_if_available() {\n@@ -3289,6 +3332,7 @@ impl Resolver {\n                 // Nothing to do.\n             }\n             Some(name) => {\n+                self.populate_module_if_necessary(orig_module);\n                 match orig_module.children.find(&name) {\n                     None => {\n                         debug!(\"!!! (with scope) didn't find `%s` in `%s`\",\n@@ -4569,6 +4613,7 @@ impl Resolver {\n                                                 xray: XrayFlag)\n                                                 -> NameDefinition {\n         // First, search children.\n+        self.populate_module_if_necessary(containing_module);\n         match containing_module.children.find(&name) {\n             Some(child_name_bindings) => {\n                 match (child_name_bindings.def_for_namespace(namespace),\n@@ -5233,7 +5278,9 @@ impl Resolver {\n                 }\n \n                 // Look for trait children.\n-                for (_, &child_name_bindings) in search_module.children.iter() {\n+                self.populate_module_if_necessary(search_module);\n+                for (_, &child_name_bindings) in\n+                        search_module.children.iter() {\n                     match child_name_bindings.def_for_namespace(TypeNS) {\n                         Some(def) => {\n                             match def {\n@@ -5432,6 +5479,7 @@ impl Resolver {\n         debug!(\"Dump of module `%s`:\", self.module_to_str(module_));\n \n         debug!(\"Children:\");\n+        self.populate_module_if_necessary(module_);\n         for (&name, _) in module_.children.iter() {\n             debug!(\"* %s\", self.session.str_of(name));\n         }"}]}