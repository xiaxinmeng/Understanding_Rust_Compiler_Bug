{"sha": "f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODE4YmY4MTg3YjlhOWQ5Y2U5ODI4YTNmYTEyMTNmYzA4YmRkOTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-19T20:31:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-19T20:31:21Z"}, "message": "fix a warning", "tree": {"sha": "9f49b86eff0294e28e26763b392c82c7724afd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f49b86eff0294e28e26763b392c82c7724afd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "html_url": "https://github.com/rust-lang/rust/commit/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24249530552be849d5e691f93e16c3c4e8bd7915", "url": "https://api.github.com/repos/rust-lang/rust/commits/24249530552be849d5e691f93e16c3c4e8bd7915", "html_url": "https://github.com/rust-lang/rust/commit/24249530552be849d5e691f93e16c3c4e8bd7915"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "f2790bd693653fdd7dcb48191607e0ed695bd86b", "filename": "src/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "patch": "@@ -670,9 +670,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Ref(_, _, ref lvalue) => {\n                 let src = self.eval_lvalue(lvalue)?;\n-                // We ignore the alignment of the lvalue here -- this rvalue produces sth. of type &, which must always be aligned.\n+                // We ignore the alignment of the lvalue here -- special handling for packed structs ends\n+                // at the `&` operator.\n                 let (ptr, extra, _aligned) = self.force_allocation(src)?.to_ptr_extra_aligned();\n-                let ty = self.lvalue_ty(lvalue);\n \n                 let val = match extra {\n                     LvalueExtra::None => ptr.to_value(),"}]}