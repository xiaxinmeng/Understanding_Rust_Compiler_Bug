{"sha": "0d1e365272c3c570dbf2b025ee429fb9ea1e862a", "node_id": "C_kwDOAAsO6NoAKDBkMWUzNjUyNzJjM2M1NzBkYmYyYjAyNWVlNDI5ZmI5ZWExZTg2MmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T13:31:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T13:47:25Z"}, "message": "fix ICE in pointer tracking", "tree": {"sha": "0db1bf63b7e430e0fb31c2732a227aeb21a76484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db1bf63b7e430e0fb31c2732a227aeb21a76484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1e365272c3c570dbf2b025ee429fb9ea1e862a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1e365272c3c570dbf2b025ee429fb9ea1e862a", "html_url": "https://github.com/rust-lang/rust/commit/0d1e365272c3c570dbf2b025ee429fb9ea1e862a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1e365272c3c570dbf2b025ee429fb9ea1e862a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90118a197ba91c248376e1ff72bdf7dc370776f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/90118a197ba91c248376e1ff72bdf7dc370776f6", "html_url": "https://github.com/rust-lang/rust/commit/90118a197ba91c248376e1ff72bdf7dc370776f6"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "9a7b38b13a3ade0d98fd88f702e9f14dfffde491", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d1e365272c3c570dbf2b025ee429fb9ea1e862a/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1e365272c3c570dbf2b025ee429fb9ea1e862a/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs?ref=0d1e365272c3c570dbf2b025ee429fb9ea1e862a", "patch": "@@ -455,23 +455,18 @@ impl<'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'history, 'ecx, 'mir, 'tcx> {\n         if !global.tracked_pointer_tags.contains(&item.tag()) {\n             return;\n         }\n-        let summary = match self.operation {\n-            Operation::Dealloc(_) => None,\n-            Operation::Access(AccessOp { kind, tag, .. }) => Some((tag, kind)),\n+        let cause = match self.operation {\n+            Operation::Dealloc(_) => format!(\" due to deallocation\"),\n+            Operation::Access(AccessOp { kind, tag, .. }) =>\n+                format!(\" due to {kind:?} access for {tag:?}\"),\n             Operation::Retag(RetagOp { orig_tag, permission, .. }) => {\n-                let kind = match permission\n-                    .expect(\"start_grant should set the current permission before popping a tag\")\n-                {\n-                    Permission::SharedReadOnly => AccessKind::Read,\n-                    Permission::Unique => AccessKind::Write,\n-                    Permission::SharedReadWrite | Permission::Disabled => {\n-                        panic!(\"Only SharedReadOnly and Unique retags can pop tags\");\n-                    }\n-                };\n-                Some((orig_tag, kind))\n+                let permission = permission\n+                    .expect(\"start_grant should set the current permission before popping a tag\");\n+                format!(\" due to {permission:?} retag from {orig_tag:?}\")\n             }\n         };\n-        self.machine.emit_diagnostic(NonHaltingDiagnostic::PoppedPointerTag(*item, summary));\n+\n+        self.machine.emit_diagnostic(NonHaltingDiagnostic::PoppedPointerTag(*item, cause));\n     }\n }\n "}, {"sha": "074fa032dcc427537ef840c750aeee4830e657f3", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0d1e365272c3c570dbf2b025ee429fb9ea1e862a/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1e365272c3c570dbf2b025ee429fb9ea1e862a/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=0d1e365272c3c570dbf2b025ee429fb9ea1e862a", "patch": "@@ -6,7 +6,7 @@ use log::trace;\n use rustc_span::{source_map::DUMMY_SP, SpanData, Symbol};\n use rustc_target::abi::{Align, Size};\n \n-use crate::borrow_tracker::{stacked_borrows::diagnostics::TagHistory, AccessKind};\n+use crate::borrow_tracker::stacked_borrows::diagnostics::TagHistory;\n use crate::*;\n \n /// Details of premature program termination.\n@@ -67,9 +67,8 @@ pub enum NonHaltingDiagnostic {\n     ///\n     /// new_kind is `None` for base tags.\n     CreatedPointerTag(NonZeroU64, Option<String>, Option<(AllocId, AllocRange, ProvenanceExtra)>),\n-    /// This `Item` was popped from the borrow stack, either due to an access with the given tag or\n-    /// a deallocation when the second argument is `None`.\n-    PoppedPointerTag(Item, Option<(ProvenanceExtra, AccessKind)>),\n+    /// This `Item` was popped from the borrow stack. The string explains the reason.\n+    PoppedPointerTag(Item, String),\n     CreatedCallId(CallId),\n     CreatedAlloc(AllocId, Size, Align, MemoryKind<MiriMemoryKind>),\n     FreedAlloc(AllocId),\n@@ -399,15 +398,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                 format!(\n                     \"created tag {tag:?} for {kind} at {alloc_id:?}{range:?} derived from {orig_tag:?}\"\n                 ),\n-            PoppedPointerTag(item, tag) =>\n-                match tag {\n-                    None => format!(\"popped tracked tag for item {item:?} due to deallocation\",),\n-                    Some((tag, access)) => {\n-                        format!(\n-                            \"popped tracked tag for item {item:?} due to {access:?} access for {tag:?}\",\n-                        )\n-                    }\n-                },\n+            PoppedPointerTag(item, cause) => format!(\"popped tracked tag for item {item:?}{cause}\"),\n             CreatedCallId(id) => format!(\"function call with id {id}\"),\n             CreatedAlloc(AllocId(id), size, align, kind) =>\n                 format!("}]}