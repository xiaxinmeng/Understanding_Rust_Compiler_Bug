{"sha": "f7a825c6148ab634d2804508118dec939c41136d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YTgyNWM2MTQ4YWI2MzRkMjgwNDUwODExOGRlYzkzOWM0MTEzNmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-17T22:06:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-17T23:36:49Z"}, "message": "Split record_var_binding into methods for expected and actual\n\nThis allows unify to maintain the same subtype relationship between\nexpected and actual throughout unify, which we are going to need\nfor mutable? and for function types.", "tree": {"sha": "36c1adab840ea72956d2007b565a6a49d75e6c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c1adab840ea72956d2007b565a6a49d75e6c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7a825c6148ab634d2804508118dec939c41136d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a825c6148ab634d2804508118dec939c41136d", "html_url": "https://github.com/rust-lang/rust/commit/f7a825c6148ab634d2804508118dec939c41136d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7a825c6148ab634d2804508118dec939c41136d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a64153b244183f215241e8c8c2c115076239ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a64153b244183f215241e8c8c2c115076239ba3", "html_url": "https://github.com/rust-lang/rust/commit/1a64153b244183f215241e8c8c2c115076239ba3"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "fec7f4de06ad33bb06333dbd029ef6ca2af6951d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f7a825c6148ab634d2804508118dec939c41136d/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a825c6148ab634d2804508118dec939c41136d/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f7a825c6148ab634d2804508118dec939c41136d", "patch": "@@ -1840,13 +1840,35 @@ mod unify {\n           }\n         }\n     }\n-    fn record_var_binding(cx: @ctxt, key: int, typ: t) -> result {\n+\n+    fn record_var_binding_for_expected(\n+        cx: @ctxt, key: int, typ: t) -> result {\n+        record_var_binding(\n+            cx, key, typ,\n+            fn (cx: @ctxt, old_type: t, new_type: t) -> result {\n+                unify_step(cx, old_type, new_type)\n+            })\n+    }\n+\n+    fn record_var_binding_for_actual(\n+        cx: @ctxt, key: int, typ: t) -> result {\n+        record_var_binding(\n+            cx, key, typ,\n+            fn (cx: @ctxt, old_type: t, new_type: t) -> result {\n+                unify_step(cx, new_type, old_type)\n+            })\n+    }\n+\n+    fn record_var_binding(\n+        cx: @ctxt, key: int, typ: t,\n+        unify_types: fn(@ctxt, t, t) -> result) -> result {\n+\n         ufind::grow(cx.vb.sets, (key as uint) + 1u);\n         let root = ufind::find(cx.vb.sets, key as uint);\n         let result_type = typ;\n         alt smallintmap::find::<t>(cx.vb.types, root) {\n           some(old_type) {\n-            alt unify_step(cx, old_type, typ) {\n+            alt unify_types(cx, old_type, typ) {\n               ures_ok(unified_type) { result_type = unified_type; }\n               rs { ret rs; }\n             }\n@@ -2099,7 +2121,7 @@ mod unify {\n               }\n               _ {\n                 // Just bind the type variable to the expected type.\n-                alt record_var_binding(cx, actual_id, expected) {\n+                alt record_var_binding_for_actual(cx, actual_id, expected) {\n                   ures_ok(_) {/* fall through */ }\n                   rs { ret rs; }\n                 }\n@@ -2113,7 +2135,7 @@ mod unify {\n           ty::ty_var(expected_id) {\n             // Add a binding. (`actual` can't actually be a var here.)\n \n-            alt record_var_binding(cx, expected_id, actual) {\n+            alt record_var_binding_for_expected(cx, expected_id, actual) {\n               ures_ok(_) {/* fall through */ }\n               rs { ret rs; }\n             }"}]}