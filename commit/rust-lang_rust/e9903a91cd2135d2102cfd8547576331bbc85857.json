{"sha": "e9903a91cd2135d2102cfd8547576331bbc85857", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTAzYTkxY2QyMTM1ZDIxMDJjZmQ4NTQ3NTc2MzMxYmJjODU4NTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T14:51:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T14:51:55Z"}, "message": "flatten", "tree": {"sha": "cd0380327e130fd32b47dbc038975cda3560f531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0380327e130fd32b47dbc038975cda3560f531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9903a91cd2135d2102cfd8547576331bbc85857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9903a91cd2135d2102cfd8547576331bbc85857", "html_url": "https://github.com/rust-lang/rust/commit/e9903a91cd2135d2102cfd8547576331bbc85857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9903a91cd2135d2102cfd8547576331bbc85857/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "html_url": "https://github.com/rust-lang/rust/commit/c8cbd398e4e54059b1594ef934ce96d6fc0c8130"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "d3d8c86b56551f21d5651be0d964c604b6f4f0bb", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e9903a91cd2135d2102cfd8547576331bbc85857/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9903a91cd2135d2102cfd8547576331bbc85857/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=e9903a91cd2135d2102cfd8547576331bbc85857", "patch": "@@ -201,35 +201,42 @@ fn check_expr_field_shorthand(\n     acc: &mut Vec<Diagnostic>,\n     file_id: FileId,\n     record_lit: ast::RecordExpr,\n-) -> Option<()> {\n-    let record_field_list = record_lit.record_expr_field_list()?;\n+) {\n+    let record_field_list = match record_lit.record_expr_field_list() {\n+        Some(it) => it,\n+        None => (),\n+    };\n     for record_field in record_field_list.fields() {\n-        if let (Some(name_ref), Some(expr)) = (record_field.name_ref(), record_field.expr()) {\n-            let field_name = name_ref.syntax().text().to_string();\n-            let field_expr = expr.syntax().text().to_string();\n-            let field_name_is_tup_index = name_ref.as_tuple_field().is_some();\n-            if field_name == field_expr && !field_name_is_tup_index {\n-                let mut edit_builder = TextEdit::builder();\n-                edit_builder.delete(record_field.syntax().text_range());\n-                edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n-                let edit = edit_builder.finish();\n-\n-                let field_range = record_field.syntax().text_range();\n-                acc.push(Diagnostic {\n-                    // name: None,\n-                    range: field_range,\n-                    message: \"Shorthand struct initialization\".to_string(),\n-                    severity: Severity::WeakWarning,\n-                    fix: Some(Fix::new(\n-                        \"Use struct shorthand initialization\",\n-                        SourceFileEdit { file_id, edit }.into(),\n-                        field_range,\n-                    )),\n-                });\n-            }\n+        let (name_ref, expr) = match record_field.name_ref().zip(record_field.expr()) {\n+            Some(it) => it,\n+            None => continue,\n+        };\n+\n+        let field_name = name_ref.syntax().text().to_string();\n+        let field_expr = expr.syntax().text().to_string();\n+        let field_name_is_tup_index = name_ref.as_tuple_field().is_some();\n+        if field_name != field_expr || field_name_is_tup_index {\n+            continue;\n         }\n+\n+        let mut edit_builder = TextEdit::builder();\n+        edit_builder.delete(record_field.syntax().text_range());\n+        edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n+        let edit = edit_builder.finish();\n+\n+        let field_range = record_field.syntax().text_range();\n+        acc.push(Diagnostic {\n+            // name: None,\n+            range: field_range,\n+            message: \"Shorthand struct initialization\".to_string(),\n+            severity: Severity::WeakWarning,\n+            fix: Some(Fix::new(\n+                \"Use struct shorthand initialization\",\n+                SourceFileEdit { file_id, edit }.into(),\n+                field_range,\n+            )),\n+        });\n     }\n-    Some(())\n }\n \n #[cfg(test)]"}]}