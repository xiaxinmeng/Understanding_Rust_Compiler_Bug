{"sha": "dac81d867b64ce043dbb7708cf1fdf8b6ef10560", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzgxZDg2N2I2NGNlMDQzZGJiNzcwOGNmMWZkZjhiNmVmMTA1NjA=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-08-28T08:41:32Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-08-29T15:34:03Z"}, "message": "Use the spans returned by utils::method_calls", "tree": {"sha": "29bf4441577da8f31e7b06e6ddd86af4b013817f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29bf4441577da8f31e7b06e6ddd86af4b013817f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac81d867b64ce043dbb7708cf1fdf8b6ef10560", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl1n8GsACgkQaTCGhp1Q\nZjerKA//WWmLmn3tvuSZerNfVvFMP+x/tbV9QwFdE2C/Uw0SIiPrcnEAoBRGRrER\n1FZu+7JFvbPQzizhXy+IOv6YrY9m2RBhzfOp5JjsNXtraiSpp18bRijhiZmH1rZd\nDZIBsEBulfQWHLM0tx5aqCklobk5w0C4VjucNej/JxDcJQs7rebfpFvdqilxrNZE\n/tUJkOUXm78egv2LvdmMOtTDfUtVXBkG9K/KRqRNUpil5cIX/TIPKzTi137UFAtr\nizkuXBy2xWeC/sHP6lyXy+jqh2C6vjvqQ4mjWjxKjwAXudRyrzIOPKoOZ765f/s+\n+9SV9hv33ExdoEri5VMk/TwTiBT0FLdKs+0gVefAF4GdBUuuAZg8QjiXekA42Ies\nhIKF6UTTy565n+3YrdeiDYPejXV/gZuJOrz8WYV0MKO2UcOeqPql7QXffLGUD3Tg\nfgNGn9x/QijY03r2FVjqo8B/qA7KM5s03yMBI4naOnIWfk4qVv4KMx9RgZ4qPynf\nTEopFEuCTihh1NRYR1hCinBgLRq4Ot3WtXZzJ7qlhElYK2u8wkXhkcLz0Jpyfz02\nhnbvC7DZWbAP+/12MI63mO6dp9hX3O04WOKwWJpjLjh7UY3t6KxSsZSTRntQMEZX\nqE3Z0koV0BdzUm0n6jfVHYkBm4oOe5WvsQxZPd9VqccSIbCil3k=\n=WLRm\n-----END PGP SIGNATURE-----", "payload": "tree 29bf4441577da8f31e7b06e6ddd86af4b013817f\nparent 832c0830ec3d6be0f406cc76611975a1cb8bd8bc\nauthor flip1995 <hello@philkrones.com> 1566981692 +0200\ncommitter flip1995 <hello@philkrones.com> 1567092843 +0200\n\nUse the spans returned by utils::method_calls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac81d867b64ce043dbb7708cf1fdf8b6ef10560", "html_url": "https://github.com/rust-lang/rust/commit/dac81d867b64ce043dbb7708cf1fdf8b6ef10560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac81d867b64ce043dbb7708cf1fdf8b6ef10560/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832c0830ec3d6be0f406cc76611975a1cb8bd8bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/832c0830ec3d6be0f406cc76611975a1cb8bd8bc", "html_url": "https://github.com/rust-lang/rust/commit/832c0830ec3d6be0f406cc76611975a1cb8bd8bc"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "3708a370936b96e756363c6f7deb9d280384fde3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dac81d867b64ce043dbb7708cf1fdf8b6ef10560/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac81d867b64ce043dbb7708cf1fdf8b6ef10560/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=dac81d867b64ce043dbb7708cf1fdf8b6ef10560", "patch": "@@ -1000,7 +1000,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             return;\n         }\n \n-        let (method_names, arg_lists) = method_calls(expr, 2);\n+        let (method_names, arg_lists, method_spans) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n \n@@ -1020,7 +1020,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0]),\n+            [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n             [\"flatten\", \"map\"] => lint_map_flatten(cx, expr, arg_lists[1]),\n             [\"is_some\", \"find\"] => lint_search_is_some(cx, expr, \"find\", arg_lists[1], arg_lists[0]),\n             [\"is_some\", \"position\"] => lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0]),\n@@ -1035,7 +1035,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n             [\"as_ref\"] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n             [\"as_mut\"] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n-            [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0]),\n+            [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0], method_spans[0]),\n             [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n             _ => {},\n@@ -1712,11 +1712,12 @@ fn lint_iter_cloned_collect<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Ex\n     }\n }\n \n-fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n+fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr], fold_span: Span) {\n     fn check_fold_with_op(\n         cx: &LateContext<'_, '_>,\n         expr: &hir::Expr,\n         fold_args: &[hir::Expr],\n+        fold_span: Span,\n         op: hir::BinOpKind,\n         replacement_method_name: &str,\n         replacement_has_args: bool,\n@@ -1738,8 +1739,6 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n             if match_var(&*left_expr, first_arg_ident);\n             if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n \n-            if let hir::ExprKind::MethodCall(_, span, _) = &expr.node;\n-\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if replacement_has_args {\n@@ -1759,7 +1758,7 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n                 span_lint_and_sugg(\n                     cx,\n                     UNNECESSARY_FOLD,\n-                    span.with_hi(expr.span.hi()),\n+                    fold_span.with_hi(expr.span.hi()),\n                     // TODO #2371 don't suggest e.g., .any(|x| f(x)) if we can suggest .any(f)\n                     \"this `.fold` can be written more succinctly using another method\",\n                     \"try\",\n@@ -1783,10 +1782,18 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n     // Check if the first argument to .fold is a suitable literal\n     if let hir::ExprKind::Lit(ref lit) = fold_args[1].node {\n         match lit.node {\n-            ast::LitKind::Bool(false) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Or, \"any\", true),\n-            ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::And, \"all\", true),\n-            ast::LitKind::Int(0, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Add, \"sum\", false),\n-            ast::LitKind::Int(1, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Mul, \"product\", false),\n+            ast::LitKind::Bool(false) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Or, \"any\", true)\n+            },\n+            ast::LitKind::Bool(true) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::And, \"all\", true)\n+            },\n+            ast::LitKind::Int(0, _) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Add, \"sum\", false)\n+            },\n+            ast::LitKind::Int(1, _) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Mul, \"product\", false)\n+            },\n             _ => (),\n         }\n     }\n@@ -2323,22 +2330,21 @@ fn lint_flat_map_identity<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr,\n     flat_map_args: &'tcx [hir::Expr],\n+    flat_map_span: Span,\n ) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let arg_node = &flat_map_args[1].node;\n \n         let apply_lint = |message: &str| {\n-            if let hir::ExprKind::MethodCall(_, span, _) = &expr.node {\n-                span_lint_and_sugg(\n-                    cx,\n-                    FLAT_MAP_IDENTITY,\n-                    span.with_hi(expr.span.hi()),\n-                    message,\n-                    \"try\",\n-                    \"flatten()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+            span_lint_and_sugg(\n+                cx,\n+                FLAT_MAP_IDENTITY,\n+                flat_map_span.with_hi(expr.span.hi()),\n+                message,\n+                \"try\",\n+                \"flatten()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n         };\n \n         if_chain! {"}, {"sha": "48400593b9d2e1f3b5d0c659d569f5ac9fbe2a2f", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dac81d867b64ce043dbb7708cf1fdf8b6ef10560/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac81d867b64ce043dbb7708cf1fdf8b6ef10560/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=dac81d867b64ce043dbb7708cf1fdf8b6ef10560", "patch": "@@ -280,7 +280,7 @@ impl_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        let (method_names, arg_lists) = method_calls(expr, 2);\n+        let (method_names, arg_lists, spans) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n         if_chain! {\n@@ -294,10 +294,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n                 span_lint_and_sugg(\n                     cx,\n                     OUTER_EXPN_EXPN_DATA,\n-                    expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n+                    spans[1].with_hi(expr.span.hi()),\n                     \"usage of `outer_expn().expn_data()`\",\n                     \"try\",\n-                    \".outer_expn_data()\".to_string(),\n+                    \"outer_expn_data()\".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n             }"}]}