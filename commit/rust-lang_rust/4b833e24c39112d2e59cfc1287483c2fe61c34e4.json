{"sha": "4b833e24c39112d2e59cfc1287483c2fe61c34e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODMzZTI0YzM5MTEyZDJlNTljZmMxMjg3NDgzYzJmZTYxYzM0ZTQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-26T01:15:07Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-28T04:41:16Z"}, "message": "make fold_attribute part of Folder trait", "tree": {"sha": "c55d7818fe81aef0b682bd2a8c67082eb2396493", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55d7818fe81aef0b682bd2a8c67082eb2396493"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b833e24c39112d2e59cfc1287483c2fe61c34e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b833e24c39112d2e59cfc1287483c2fe61c34e4", "html_url": "https://github.com/rust-lang/rust/commit/4b833e24c39112d2e59cfc1287483c2fe61c34e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b833e24c39112d2e59cfc1287483c2fe61c34e4/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c5e4650598f43a2e362bcf6f4e919440a997bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c5e4650598f43a2e362bcf6f4e919440a997bb", "html_url": "https://github.com/rust-lang/rust/commit/b8c5e4650598f43a2e362bcf6f4e919440a997bb"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "01742ca131e9263928f22d23ec810649a5989daf", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4b833e24c39112d2e59cfc1287483c2fe61c34e4/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b833e24c39112d2e59cfc1287483c2fe61c34e4/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4b833e24c39112d2e59cfc1287483c2fe61c34e4", "patch": "@@ -86,7 +86,7 @@ pub trait Folder {\n                 kind: sf.node.kind,\n                 id: id,\n                 ty: self.fold_ty(sf.node.ty),\n-                attrs: sf.node.attrs.iter().map(|e| fold_attribute_(*e, self)).collect()\n+                attrs: sf.node.attrs.iter().map(|e| self.fold_attribute(*e)).collect()\n             },\n             span: self.new_span(sf.span)\n         }\n@@ -118,7 +118,7 @@ pub trait Folder {\n \n     fn fold_arm(&mut self, a: &Arm) -> Arm {\n         Arm {\n-            attrs: a.attrs.iter().map(|x| fold_attribute_(*x, self)).collect(),\n+            attrs: a.attrs.iter().map(|x| self.fold_attribute(*x)).collect(),\n             pats: a.pats.iter().map(|x| self.fold_pat(*x)).collect(),\n             guard: a.guard.map(|x| self.fold_expr(x)),\n             body: self.fold_expr(a.body),\n@@ -251,7 +251,7 @@ pub trait Folder {\n             }\n         }\n \n-        let attrs = v.node.attrs.iter().map(|x| fold_attribute_(*x, self)).collect();\n+        let attrs = v.node.attrs.iter().map(|x| self.fold_attribute(*x)).collect();\n \n         let de = match v.node.disr_expr {\n           Some(e) => Some(self.fold_expr(e)),\n@@ -344,6 +344,21 @@ pub trait Folder {\n     fn fold_lifetime(&mut self, l: &Lifetime) -> Lifetime {\n         noop_fold_lifetime(l, self)\n     }\n+\n+    //used in noop_fold_item and noop_fold_crate\n+    fn fold_attribute(&mut self, at: Attribute) -> Attribute {\n+        Spanned {\n+            span: self.new_span(at.span),\n+            node: ast::Attribute_ {\n+                id: at.node.id,\n+                style: at.node.style,\n+                value: fold_meta_item_(at.node.value, self),\n+                is_sugared_doc: at.node.is_sugared_doc\n+            }\n+        }\n+    }\n+\n+\n }\n \n /* some little folds that probably aren't useful to have in Folder itself*/\n@@ -364,19 +379,6 @@ fn fold_meta_item_<T: Folder>(mi: Gc<MetaItem>, fld: &mut T) -> Gc<MetaItem> {\n         span: fld.new_span(mi.span) }\n }\n \n-//used in noop_fold_item and noop_fold_crate\n-fn fold_attribute_<T: Folder>(at: Attribute, fld: &mut T) -> Attribute {\n-    Spanned {\n-        span: fld.new_span(at.span),\n-        node: ast::Attribute_ {\n-            id: at.node.id,\n-            style: at.node.style,\n-            value: fold_meta_item_(at.node.value, fld),\n-            is_sugared_doc: at.node.is_sugared_doc\n-        }\n-    }\n-}\n-\n //used in noop_fold_foreign_item and noop_fold_fn_decl\n fn fold_arg_<T: Folder>(a: &Arg, fld: &mut T) -> Arg {\n     let id = fld.new_id(a.id); // Needs to be first, for ast_map.\n@@ -526,7 +528,7 @@ fn fold_struct_field<T: Folder>(f: &StructField, fld: &mut T) -> StructField {\n             kind: f.node.kind,\n             id: id,\n             ty: fld.fold_ty(f.node.ty),\n-            attrs: f.node.attrs.iter().map(|a| fold_attribute_(*a, fld)).collect(),\n+            attrs: f.node.attrs.iter().map(|a| fld.fold_attribute(*a)).collect(),\n         },\n         span: fld.new_span(f.span),\n     }\n@@ -578,7 +580,7 @@ pub fn noop_fold_view_item<T: Folder>(vi: &ViewItem, folder: &mut T)\n     };\n     ViewItem {\n         node: inner_view_item,\n-        attrs: vi.attrs.iter().map(|a| fold_attribute_(*a, folder)).collect(),\n+        attrs: vi.attrs.iter().map(|a| folder.fold_attribute(*a)).collect(),\n         vis: vi.vis,\n         span: folder.new_span(vi.span),\n     }\n@@ -658,7 +660,7 @@ pub fn noop_fold_type_method<T: Folder>(m: &TypeMethod, fld: &mut T) -> TypeMeth\n     TypeMethod {\n         id: id,\n         ident: fld.fold_ident(m.ident),\n-        attrs: m.attrs.iter().map(|a| fold_attribute_(*a, fld)).collect(),\n+        attrs: m.attrs.iter().map(|a| fld.fold_attribute(*a)).collect(),\n         fn_style: m.fn_style,\n         decl: fld.fold_fn_decl(&*m.decl),\n         generics: fold_generics(&m.generics, fld),\n@@ -681,7 +683,7 @@ pub fn noop_fold_mod<T: Folder>(m: &Mod, folder: &mut T) -> Mod {\n pub fn noop_fold_crate<T: Folder>(c: Crate, folder: &mut T) -> Crate {\n     Crate {\n         module: folder.fold_mod(&c.module),\n-        attrs: c.attrs.iter().map(|x| fold_attribute_(*x, folder)).collect(),\n+        attrs: c.attrs.iter().map(|x| folder.fold_attribute(*x)).collect(),\n         config: c.config.iter().map(|x| fold_meta_item_(*x, folder)).collect(),\n         span: folder.new_span(c.span),\n     }\n@@ -702,7 +704,7 @@ pub fn noop_fold_item<T: Folder>(i: &Item,\n     SmallVector::one(box(GC) Item {\n         id: id,\n         ident: folder.fold_ident(ident),\n-        attrs: i.attrs.iter().map(|e| fold_attribute_(*e, folder)).collect(),\n+        attrs: i.attrs.iter().map(|e| folder.fold_attribute(*e)).collect(),\n         node: node,\n         vis: i.vis,\n         span: folder.new_span(i.span)\n@@ -715,7 +717,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: &ForeignItem,\n     box(GC) ForeignItem {\n         id: id,\n         ident: folder.fold_ident(ni.ident),\n-        attrs: ni.attrs.iter().map(|x| fold_attribute_(*x, folder)).collect(),\n+        attrs: ni.attrs.iter().map(|x| folder.fold_attribute(*x)).collect(),\n         node: match ni.node {\n             ForeignItemFn(ref fdec, ref generics) => {\n                 ForeignItemFn(P(FnDecl {\n@@ -739,7 +741,7 @@ pub fn noop_fold_method<T: Folder>(m: &Method, folder: &mut T) -> Gc<Method> {\n     box(GC) Method {\n         id: id,\n         ident: folder.fold_ident(m.ident),\n-        attrs: m.attrs.iter().map(|a| fold_attribute_(*a, folder)).collect(),\n+        attrs: m.attrs.iter().map(|a| folder.fold_attribute(*a)).collect(),\n         generics: fold_generics(&m.generics, folder),\n         explicit_self: folder.fold_explicit_self(&m.explicit_self),\n         fn_style: m.fn_style,"}]}