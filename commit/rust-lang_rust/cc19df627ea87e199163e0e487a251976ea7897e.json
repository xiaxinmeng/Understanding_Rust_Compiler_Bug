{"sha": "cc19df627ea87e199163e0e487a251976ea7897e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMTlkZjYyN2VhODdlMTk5MTYzZTBlNDg3YTI1MTk3NmVhNzg5N2U=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-26T19:32:34Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-02T22:57:03Z"}, "message": "revert #75443 update mir validator", "tree": {"sha": "b094dabf8bd8320f7528028d99991bd3882a6dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b094dabf8bd8320f7528028d99991bd3882a6dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc19df627ea87e199163e0e487a251976ea7897e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc19df627ea87e199163e0e487a251976ea7897e", "html_url": "https://github.com/rust-lang/rust/commit/cc19df627ea87e199163e0e487a251976ea7897e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc19df627ea87e199163e0e487a251976ea7897e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5b7c3c96a86c96f1fbf1441475028df94d165a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5b7c3c96a86c96f1fbf1441475028df94d165a", "html_url": "https://github.com/rust-lang/rust/commit/1d5b7c3c96a86c96f1fbf1441475028df94d165a"}], "stats": {"total": 127, "additions": 23, "deletions": 104}, "files": [{"sha": "c9905b34a12ed5ffd155de44678a414ac3434d6b", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 21, "deletions": 75, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/cc19df627ea87e199163e0e487a251976ea7897e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc19df627ea87e199163e0e487a251976ea7897e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=cc19df627ea87e199163e0e487a251976ea7897e", "patch": "@@ -6,15 +6,16 @@ use crate::util::storage::AlwaysLiveLocals;\n \n use super::MirPass;\n use rustc_index::bit_set::BitSet;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceRef,\n     Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n };\n-use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::fold::BottomUpFolder;\n+use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_target::abi::Size;\n \n #[derive(Copy, Clone, Debug)]\n@@ -77,79 +78,24 @@ pub fn equal_up_to_regions(\n         return true;\n     }\n \n-    struct LifetimeIgnoreRelation<'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    }\n-\n-    impl TypeRelation<'tcx> for LifetimeIgnoreRelation<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n-            self.tcx\n-        }\n-\n-        fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-            self.param_env\n-        }\n-\n-        fn tag(&self) -> &'static str {\n-            \"librustc_mir::transform::validate\"\n-        }\n-\n-        fn a_is_expected(&self) -> bool {\n-            true\n-        }\n-\n-        fn relate_with_variance<T: Relate<'tcx>>(\n-            &mut self,\n-            _: ty::Variance,\n-            a: T,\n-            b: T,\n-        ) -> RelateResult<'tcx, T> {\n-            // Ignore variance, require types to be exactly the same.\n-            self.relate(a, b)\n-        }\n-\n-        fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-            if a == b {\n-                // Short-circuit.\n-                return Ok(a);\n-            }\n-            ty::relate::super_relate_tys(self, a, b)\n-        }\n-\n-        fn regions(\n-            &mut self,\n-            a: ty::Region<'tcx>,\n-            _b: ty::Region<'tcx>,\n-        ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-            // Ignore regions.\n-            Ok(a)\n-        }\n-\n-        fn consts(\n-            &mut self,\n-            a: &'tcx ty::Const<'tcx>,\n-            b: &'tcx ty::Const<'tcx>,\n-        ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-            ty::relate::super_relate_consts(self, a, b)\n-        }\n-\n-        fn binders<T>(\n-            &mut self,\n-            a: ty::Binder<T>,\n-            b: ty::Binder<T>,\n-        ) -> RelateResult<'tcx, ty::Binder<T>>\n-        where\n-            T: Relate<'tcx>,\n-        {\n-            self.relate(a.skip_binder(), b.skip_binder())?;\n-            Ok(a)\n-        }\n-    }\n-\n-    // Instantiate and run relation.\n-    let mut relator: LifetimeIgnoreRelation<'tcx> = LifetimeIgnoreRelation { tcx: tcx, param_env };\n-    relator.relate(src, dest).is_ok()\n+    // Normalize lifetimes away on both sides, then compare.\n+    let param_env = param_env.with_reveal_all_normalized(tcx);\n+    let normalize = |ty: Ty<'tcx>| {\n+        tcx.normalize_erasing_regions(\n+            param_env,\n+            ty.fold_with(&mut BottomUpFolder {\n+                tcx,\n+                // We just erase all late-bound lifetimes, but this is not fully correct (FIXME):\n+                // lifetimes in invariant positions could matter (e.g. through associated types).\n+                // We rely on the fact that layout was confirmed to be equal above.\n+                lt_op: |_| tcx.lifetimes.re_erased,\n+                // Leave consts and types unchanged.\n+                ct_op: |ct| ct,\n+                ty_op: |ty| ty,\n+            }),\n+        )\n+    };\n+    tcx.infer_ctxt().enter(|infcx| infcx.can_eq(param_env, normalize(src), normalize(dest)).is_ok())\n }\n \n struct TypeChecker<'a, 'tcx> {"}, {"sha": "a85ffd3c961b7e5d872c2a87ec3e2b192eb267c9", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc19df627ea87e199163e0e487a251976ea7897e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc19df627ea87e199163e0e487a251976ea7897e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cc19df627ea87e199163e0e487a251976ea7897e", "patch": "@@ -338,7 +338,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n \n         let ty = ty.super_fold_with(self);\n         match *ty.kind() {\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty,"}, {"sha": "42a598ce3a00845a002ef27b0bca1d2c8d3ffd5a", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc19df627ea87e199163e0e487a251976ea7897e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc19df627ea87e199163e0e487a251976ea7897e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=cc19df627ea87e199163e0e487a251976ea7897e", "patch": "@@ -108,7 +108,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n \n         let ty = ty.super_fold_with(self);\n         let res = (|| match *ty.kind() {\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty,"}, {"sha": "e643a8cab5b027c19e20b131063706f55945a60a", "filename": "src/test/ui/type-alias-impl-trait/issue-72793.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-72793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-72793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-72793.rs?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -1,27 +0,0 @@\n-// build-pass\n-\n-// Regression test for #72793.\n-// FIXME: This still shows ICE with `-Zmir-opt-level=2`.\n-\n-#![feature(type_alias_impl_trait)]\n-\n-trait T { type Item; }\n-\n-type Alias<'a> = impl T<Item = &'a ()>;\n-\n-struct S;\n-impl<'a> T for &'a S {\n-    type Item = &'a ();\n-}\n-\n-fn filter_positive<'a>() -> Alias<'a> {\n-    &S\n-}\n-\n-fn with_positive(fun: impl Fn(Alias<'_>)) {\n-    fun(filter_positive());\n-}\n-\n-fn main() {\n-    with_positive(|_| ());\n-}"}]}