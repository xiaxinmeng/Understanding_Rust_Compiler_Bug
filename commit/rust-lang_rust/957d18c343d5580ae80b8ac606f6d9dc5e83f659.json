{"sha": "957d18c343d5580ae80b8ac606f6d9dc5e83f659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1N2QxOGMzNDNkNTU4MGFlODBiOGFjNjA2ZjZkOWRjNWU4M2Y2NTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-22T06:39:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-22T06:41:01Z"}, "message": "Merge remote-tracking branch 'origin/master' into rustup", "tree": {"sha": "00374a928ada4e167b9f1f099afa428eda29adf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00374a928ada4e167b9f1f099afa428eda29adf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957d18c343d5580ae80b8ac606f6d9dc5e83f659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957d18c343d5580ae80b8ac606f6d9dc5e83f659", "html_url": "https://github.com/rust-lang/rust/commit/957d18c343d5580ae80b8ac606f6d9dc5e83f659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957d18c343d5580ae80b8ac606f6d9dc5e83f659/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb1d80703f272a5592ceeb3832a489776512251", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb1d80703f272a5592ceeb3832a489776512251", "html_url": "https://github.com/rust-lang/rust/commit/bbb1d80703f272a5592ceeb3832a489776512251"}, {"sha": "53dc505592723e124c134e4bc4f9aa380bbb5a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/53dc505592723e124c134e4bc4f9aa380bbb5a3e", "html_url": "https://github.com/rust-lang/rust/commit/53dc505592723e124c134e4bc4f9aa380bbb5a3e"}], "stats": {"total": 268, "additions": 115, "deletions": 153}, "files": [{"sha": "d2315c7e9538e5c8081d7a390a607d6f3094e7da", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -50,9 +50,9 @@ script:\n   # test `cargo miri`\n   cd cargo-miri-test &&\n   if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n-    cargo miri -q -- -Zmiri-start-fn\n+    cargo miri -q\n   else\n-    cargo miri -q -- -Zmiri-start-fn >stdout.real 2>stderr.real &&\n+    cargo miri -q >stdout.real 2>stderr.real &&\n     cat stdout.real stderr.real &&\n     # Test `cargo miri` output. Not on mac because output redirecting doesn't\n     # work. There is no error. It just stops CI."}, {"sha": "3deb5b5a314aaba112a89c1dbbc75d25cd2cdd5f", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -99,6 +99,7 @@ fn main() {\n             );\n             match (test, &kind[..]) {\n                 (true, \"test\") => {\n+                    // For test binaries we call `cargo rustc --test target -- <rustc args>`\n                     if let Err(code) = process(\n                         vec![\"--test\".to_string(), target.name].into_iter().chain(\n                             args,\n@@ -109,6 +110,11 @@ fn main() {\n                     }\n                 }\n                 (true, \"lib\") => {\n+                    // For libraries we call `cargo rustc -- --test <rustc args>`\n+                    // Notice now that `--test` is a rustc arg rather than a cargo arg. This tells\n+                    // rustc to build a test harness which calls all #[test] functions. We don't\n+                    // use the harness since we execute each #[test] function's MIR ourselves before\n+                    // compilation even completes, but this option is necessary to build the library.\n                     if let Err(code) = process(\n                         vec![\"--\".to_string(), \"--test\".to_string()].into_iter().chain(\n                             args,\n@@ -119,6 +125,7 @@ fn main() {\n                     }\n                 }\n                 (false, \"bin\") => {\n+                    // For ordinary binaries we call `cargo rustc --bin target -- <rustc args>`\n                     if let Err(code) = process(\n                         vec![\"--bin\".to_string(), target.name].into_iter().chain(\n                             args,"}, {"sha": "fb3b231d41cef092f477c4c21f7b7c5fe7ae5f9d", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -95,7 +95,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n                     if i.attrs.iter().any(|attr| attr.name() == \"test\") {\n                         let did = self.0.hir.body_owner_def_id(body_id);\n                         println!(\"running test: {}\", self.0.def_path_debug_str(did));\n-                        miri::eval_main(self.0, did, None, /*validate*/true);\n+                        miri::eval_main(self.0, did, /*validate*/true);\n                         self.1.session.abort_if_errors();\n                     }\n                 }\n@@ -106,7 +106,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(tcx, state));\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        miri::eval_main(tcx, entry_def_id, None, /*validate*/true);\n+        miri::eval_main(tcx, entry_def_id, /*validate*/true);\n \n         state.session.abort_if_errors();\n     } else {"}, {"sha": "d4494a838852797aeee6741781e24473b4645fe8", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -26,11 +26,6 @@ use std::path::PathBuf;\n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n \n-    /// Whether to begin interpretation at the start_fn lang item or not.\n-    ///\n-    /// If false, the interpretation begins at the `main` function.\n-    start_fn: bool,\n-\n     /// Whether to enforce the validity invariant.\n     validate: bool,\n }\n@@ -90,10 +85,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let this = *self;\n         let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n-        let start_fn = this.start_fn;\n         let validate = this.validate;\n         control.after_analysis.callback =\n-            Box::new(move |state| after_analysis(state, start_fn, validate));\n+            Box::new(move |state| after_analysis(state, validate));\n         control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n@@ -109,7 +103,6 @@ fn after_hir_lowering(state: &mut CompileState) {\n \n fn after_analysis<'a, 'tcx>(\n     state: &mut CompileState<'a, 'tcx>,\n-    use_start_fn: bool,\n     validate: bool,\n ) {\n     state.session.abort_if_errors();\n@@ -134,7 +127,7 @@ fn after_analysis<'a, 'tcx>(\n                             \"running test: {}\",\n                             self.tcx.def_path_debug_str(did),\n                         );\n-                        miri::eval_main(self.tcx, did, None, self.validate);\n+                        miri::eval_main(self.tcx, did, self.validate);\n                         self.state.session.abort_if_errors();\n                     }\n                 }\n@@ -147,13 +140,7 @@ fn after_analysis<'a, 'tcx>(\n         );\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        // Use start_fn lang item if we have -Zmiri-start-fn set\n-        let start_wrapper = if use_start_fn {\n-            Some(tcx.lang_items().start_fn().unwrap())\n-        } else {\n-            None\n-        };\n-        miri::eval_main(tcx, entry_def_id, start_wrapper, validate);\n+        miri::eval_main(tcx, entry_def_id, validate);\n \n         state.session.abort_if_errors();\n     } else {\n@@ -231,14 +218,9 @@ fn main() {\n         args.push(find_sysroot());\n     }\n \n-    let mut start_fn = false;\n     let mut validate = true;\n     args.retain(|arg| {\n         match arg.as_str() {\n-            \"-Zmiri-start-fn\" => {\n-                start_fn = true;\n-                false\n-            },\n             \"-Zmiri-disable-validation\" => {\n                 validate = false;\n                 false\n@@ -251,7 +233,6 @@ fn main() {\n     let result = rustc_driver::run(move || {\n         rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n             default: Box::new(RustcDefaultCalls),\n-            start_fn,\n             validate,\n         }), None, None)\n     });"}, {"sha": "0cbd891a34e4c6127786e367c89cc56c4a617a70", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,11 +1,9 @@\n use rustc::ty;\n use rustc::ty::layout::{Align, LayoutOf, Size};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::DefId;\n use rustc::mir;\n use syntax::attr;\n \n-use std::mem;\n-\n use super::*;\n \n pub trait EvalContextExt<'tcx, 'mir> {\n@@ -19,8 +17,6 @@ pub trait EvalContextExt<'tcx, 'mir> {\n         ret: mir::BasicBlock,\n     ) -> EvalResult<'tcx>;\n \n-    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>>;\n-\n     /// Emulate a function that should have MIR but does not.\n     /// This is solely to support execution without full MIR.\n     /// Fail if emulating this function is not supported.\n@@ -643,40 +639,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n         Ok(())\n     }\n \n-    /// Get an instance for a path.\n-    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n-        self.tcx\n-            .crates()\n-            .iter()\n-            .find(|&&krate| self.tcx.original_crate_name(krate) == path[0])\n-            .and_then(|krate| {\n-                let krate = DefId {\n-                    krate: *krate,\n-                    index: CRATE_DEF_INDEX,\n-                };\n-                let mut items = self.tcx.item_children(krate);\n-                let mut path_it = path.iter().skip(1).peekable();\n-\n-                while let Some(segment) = path_it.next() {\n-                    for item in mem::replace(&mut items, Default::default()).iter() {\n-                        if item.ident.name == *segment {\n-                            if path_it.peek().is_none() {\n-                                return Some(ty::Instance::mono(self.tcx.tcx, item.def.def_id()));\n-                            }\n-\n-                            items = self.tcx.item_children(item.def.def_id());\n-                            break;\n-                        }\n-                    }\n-                }\n-                None\n-            })\n-            .ok_or_else(|| {\n-                let path = path.iter().map(|&s| s.to_owned()).collect();\n-                EvalErrorKind::PathNotFound(path).into()\n-            })\n-    }\n-\n     fn emulate_missing_fn(\n         &mut self,\n         path: String,\n@@ -704,7 +666,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             \"std::io::_print\" |\n             \"std::io::_eprint\" => {\n                 warn!(\n-                    \"Ignoring output.  To run programs that print, make sure you have a libstd with full MIR.\"\n+                    \"Ignoring output.  To run programs that prints, make sure you have a libstd with full MIR.\"\n                 );\n             }\n             \"std::thread::Builder::new\" => {"}, {"sha": "c4aad2033e570c2a85a736234a3101aff1a735e7", "filename": "src/helpers.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,13 +1,18 @@\n-use super::{Scalar, ScalarMaybeUndef, EvalResult};\n+use std::mem;\n \n-pub trait FalibleScalarExt {\n+use rustc::ty;\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+\n+use super::*;\n+\n+pub trait ScalarExt {\n     /// HACK: this function just extracts all bits if `defined != 0`\n     /// Mainly used for args of C-functions and we should totally correctly fetch the size\n     /// of their arguments\n     fn to_bytes(self) -> EvalResult<'static, u128>;\n }\n \n-impl<Tag> FalibleScalarExt for Scalar<Tag> {\n+impl<Tag> ScalarExt for Scalar<Tag> {\n     fn to_bytes(self) -> EvalResult<'static, u128> {\n         match self {\n             Scalar::Bits { bits, size } => {\n@@ -19,8 +24,49 @@ impl<Tag> FalibleScalarExt for Scalar<Tag> {\n     }\n }\n \n-impl<Tag> FalibleScalarExt for ScalarMaybeUndef<Tag> {\n+impl<Tag> ScalarExt for ScalarMaybeUndef<Tag> {\n     fn to_bytes(self) -> EvalResult<'static, u128> {\n         self.not_undef()?.to_bytes()\n     }\n }\n+\n+pub trait EvalContextExt<'tcx> {\n+    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>>;\n+}\n+\n+\n+impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super::Evaluator<'tcx>> {\n+    /// Get an instance for a path.\n+    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n+        self.tcx\n+            .crates()\n+            .iter()\n+            .find(|&&krate| self.tcx.original_crate_name(krate) == path[0])\n+            .and_then(|krate| {\n+                let krate = DefId {\n+                    krate: *krate,\n+                    index: CRATE_DEF_INDEX,\n+                };\n+                let mut items = self.tcx.item_children(krate);\n+                let mut path_it = path.iter().skip(1).peekable();\n+\n+                while let Some(segment) = path_it.next() {\n+                    for item in mem::replace(&mut items, Default::default()).iter() {\n+                        if item.ident.name == *segment {\n+                            if path_it.peek().is_none() {\n+                                return Some(ty::Instance::mono(self.tcx.tcx, item.def.def_id()));\n+                            }\n+\n+                            items = self.tcx.item_children(item.def.def_id());\n+                            break;\n+                        }\n+                    }\n+                }\n+                None\n+            })\n+            .ok_or_else(|| {\n+                let path = path.iter().map(|&s| s.to_owned()).collect();\n+                EvalErrorKind::PathNotFound(path).into()\n+            })\n+    }\n+}"}, {"sha": "5c86075883b0b9b11c3b1a597de143adbf0adc1c", "filename": "src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -6,7 +6,7 @@ use rustc::mir::interpret::{EvalResult, PointerArithmetic};\n \n use super::{\n     PlaceTy, OpTy, Value, Scalar, ScalarMaybeUndef, Borrow,\n-    FalibleScalarExt, OperatorEvalContextExt\n+    ScalarExt, OperatorEvalContextExt\n };\n \n pub trait EvalContextExt<'tcx> {"}, {"sha": "ed23eef3f550054cc616d50f36924861a1bd543b", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -41,14 +41,14 @@ use operator::EvalContextExt as OperatorEvalContextExt;\n use intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n use tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n use range_map::RangeMap;\n-use helpers::FalibleScalarExt;\n+#[allow(unused_imports)] // FIXME rustc bug https://github.com/rust-lang/rust/issues/53682\n+use helpers::{ScalarExt, EvalContextExt as HelpersEvalContextExt};\n use mono_hash_map::MonoHashMap;\n use stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Borrow};\n \n pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    start_wrapper: Option<DefId>,\n     validate: bool,\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n     let mut ecx = EvalContext::new(\n@@ -67,8 +67,14 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         ));\n     }\n \n-    if let Some(start_id) = start_wrapper {\n-        let main_ret_ty = ecx.tcx.fn_sig(main_id).output();\n+    let libstd_has_mir = {\n+        let rustc_panic = ecx.resolve_path(&[\"std\", \"panicking\", \"rust_panic\"])?;\n+        ecx.load_mir(rustc_panic.def).is_ok()\n+    };\n+\n+    if libstd_has_mir {\n+        let start_id = tcx.lang_items().start_fn().unwrap();\n+        let main_ret_ty = tcx.fn_sig(main_id).output();\n         let main_ret_ty = main_ret_ty.no_late_bound_regions().unwrap();\n         let start_instance = ty::Instance::resolve(\n             ecx.tcx.tcx,\n@@ -143,10 +149,9 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    start_wrapper: Option<DefId>,\n     validate: bool,\n ) {\n-    let mut ecx = create_ecx(tcx, main_id, start_wrapper, validate).expect(\"Couldn't create ecx\");\n+    let mut ecx = create_ecx(tcx, main_id, validate).expect(\"Couldn't create ecx\");\n \n     let res: EvalResult = (|| {\n         ecx.run()?;"}, {"sha": "1e2178811ea3ab5babedceeb0b7b7f4ad63adc84", "filename": "tests/compile-fail-fullmir/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -9,7 +9,6 @@ fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n-        let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error\n-        //~^ NOTE dangling pointer was dereferenced\n+        let _z = *(x.as_ptr() as *mut u8); //~ ERROR dangling pointer was dereferenced\n     }\n }"}, {"sha": "4faaa359df6244fe57a8d6c00301d735f0dfbafe", "filename": "tests/compile-fail/alignment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falignment.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -5,8 +5,7 @@ fn main() {\n     let x_ptr: *mut u8 = &mut x[0];\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n-        *y_ptr = 42; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to access memory with alignment 1, but alignment\n+        *y_ptr = 42; //~ ERROR tried to access memory with alignment 1, but alignment\n     }\n     panic!(\"unreachable in miri\");\n }"}, {"sha": "3026124e1f9aff69ac8e4b5f5777f7bd019b3bf1", "filename": "tests/compile-fail/assume.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ ERROR constant evaluation error\n-    //~^ NOTE `assume` argument was false\n+        std::intrinsics::assume(x > 42); //~ `assume` argument was false\n     }\n }"}, {"sha": "a30c054ab5d0486fd57255dd86bebc03a2918c25", "filename": "tests/compile-fail/bitop-beyond-alignment.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -28,11 +28,10 @@ fn mk_rec() -> Rec {\n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n     let p: usize = unsafe { mem::transmute(u) };\n     let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0; //~ ERROR constant evaluation error\n-    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n+    return (p & (u64_align + 1)) == 0; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }\n \n pub fn main() {\n     let x = mk_rec();\n-    assert!(is_u64_aligned(&x.t)); //~ NOTE inside call to `is_u64_aligned\n+    assert!(is_u64_aligned(&x.t));\n }"}, {"sha": "c3b1fa595888519c45cea7f3e62858138482be85", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -7,6 +7,5 @@ fn main() {\n         std::mem::transmute::<&usize, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR constant evaluation error\n-    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n+    (*g)(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "1971ce1557e7957e3cf6a40608f0690721204c8a", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -6,6 +6,5 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR constant evaluation error\n-    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n+    g(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "e8072077305730ef3a7a17ee09760c533ee0290f", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -3,7 +3,6 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR constant evaluation error\n-    //~^ NOTE dangling pointer was dereferenced\n+    let x = unsafe { *p }; //~ ERROR dangling pointer was dereferenced\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "181a41ce3b23e2b44d0fb6740fca8d8fcafba879", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -11,6 +11,5 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 1 / 0; //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to divide by zero\n+    let _n = 1 / 0; //~ ERROR attempt to divide by zero\n }"}, {"sha": "d859e9072e3246f2a9692bd3c95c491f64ab4f0a", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -7,7 +7,6 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR constant evaluation error\n-        //~^ NOTE tried to treat a memory pointer as a function pointer\n+        f() //~ ERROR tried to treat a memory pointer as a function pointer\n     }\n }"}, {"sha": "cccb21790d6505eda4c4dada728c57c10f1cbd2b", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -10,6 +10,5 @@ fn main() {\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x : fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR constant evaluation error\n-    //~^ NOTE tried to use a function pointer after offsetting it\n+    x(); //~ ERROR tried to use a function pointer after offsetting it\n }"}, {"sha": "27c74e8dc87ee27b640f5c03c35e0bb6019d52a0", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -2,7 +2,6 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42;  //~ ERROR constant evaluation error\n-    //~^ NOTE tried to modify constant memory\n+    *y = 42;  //~ ERROR tried to modify constant memory\n     assert_eq!(*x, 42);\n }"}, {"sha": "634488489b539a0d2f911f0f243e769353ba8cf6", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -7,8 +7,7 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !)  //~ ERROR constant evaluation error\n-        //~^ NOTE entered unreachable code\n+        *(y as *const _ as *const !)  //~ ERROR entered unreachable code\n     };\n     f(x)\n }"}, {"sha": "5620b6559cfde40a7d0abf7decd1c584951c0f3a", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -8,8 +8,7 @@\n enum Void {}\n \n fn f(v: Void) -> ! {\n-    match v {} //~ ERROR constant evaluation error\n-    //~^ NOTE entered unreachable code\n+    match v {} //~ ERROR  entered unreachable code\n }\n \n fn main() {"}, {"sha": "1ab2d9714779273262c2d666111ec4d25ec0546d", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error\n-    //~^ NOTE which has size 2\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "1ab2d9714779273262c2d666111ec4d25ec0546d", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error\n-    //~^ NOTE outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "8c70c9c7df7ddfd5c3192ec81bca0480227be8f0", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -12,6 +12,5 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 2i64 << -1; //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to shift left with overflow\n+    let _n = 2i64 << -1; //~ ERROR attempt to shift left with overflow\n }"}, {"sha": "7b7486343c3358de3531561e1a999ff4d78c33fe", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -12,6 +12,5 @@\n \n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n-    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to shift right with overflow\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR attempt to shift right with overflow\n }"}, {"sha": "355cbd86988883983f695193223923fafce6e549", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -11,6 +11,5 @@\n #![allow(exceeding_bitshifts)]\n \n fn main() {\n-    let _n = 1i64 >> 64; //~ ERROR constant evaluation error\n-    //~^ NOTE attempt to shift right with overflow\n+    let _n = 1i64 >> 64; //~ ERROR attempt to shift right with overflow\n }"}, {"sha": "5c0d5b463d51f4502a318537d3e17f5bf6a61b67", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -6,7 +6,6 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR constant evaluation error\n-    //~^ NOTE attempted to read undefined bytes\n+    let x = *p; //~ ERROR attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "5df8c4782c7f88fcc2e00b102d38d5d836c6871b", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -3,6 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access part of a pointer value as raw bytes\n+    let _ = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n }"}, {"sha": "124f84de5bf45b6186719f3e39f204bde9051e64", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,8 +1,7 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR constant evaluation error\n-    //~^ NOTE attempted to do invalid arithmetic on pointers\n+    if x < y { //~ ERROR attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }\n }"}, {"sha": "576f0c333d189d3992177c9750a03c8054552389", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -2,8 +2,7 @@ fn main() {\n     let x = &1;\n     // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n     let x = x as *const i32;\n-    let x = x as u8; //~ ERROR constant evaluation error\n-    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n+    let x = x as u8; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n     let _ = unsafe { *x };\n }"}, {"sha": "049dfca340ed986b13e7a9e593165e75eedb52e0", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -24,7 +24,6 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to access part of a pointer value as raw bytes\n+        let _x = *d_alias; //~ ERROR tried to access part of a pointer value as raw bytes\n     }\n }"}, {"sha": "14a2afc33f7fec26f376d0699e05707dcdd757ee", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -15,6 +15,5 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "304ab6c6b7409310c42d3c906135fb1d4445ebce", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -3,8 +3,7 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     unsafe {\n-        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to modify constant memory\n+        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR tried to modify constant memory\n         assert_eq!(X, 6);\n     }\n }"}, {"sha": "01c3b9bb2d8da9395e11fc07d601ce1d40beaad9", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -7,7 +7,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR tried to modify constant memory\n     }\n }"}, {"sha": "ff09aad1bd5643e6da5e108cd89a065660b0d24c", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -4,7 +4,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR constant evaluation error\n-        //~^ NOTE tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR tried to modify constant memory\n     }\n }"}, {"sha": "acc6098af7ee04a2c638d71b23fab120e9e91d78", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -16,6 +16,5 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    if v == 0 {} //~ ERROR constant evaluation error\n-    //~^ NOTE attempted to read undefined bytes\n+    if v == 0 {} //~ ERROR attempted to read undefined bytes\n }"}, {"sha": "e1f916910d732f52d066e7e0e69ac35e1a425644", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -10,6 +10,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n     };\n-    let _ = bad[0] + bad[bad.len()-1]; //~ ERROR constant evaluation error\n-    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n+    let _ = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "3121a139d9204878d352c79417a57eba36c13d18", "filename": "tests/compile-fail/transmute_fat2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -7,6 +7,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n-    bad[0]; //~ ERROR constant evaluation error\n-    //~^ NOTE index out of bounds: the len is 0 but the index is 0\n+    bad[0]; //~ ERROR index out of bounds: the len is 0 but the index is 0\n }"}, {"sha": "88285dc69f3176b9e2ea6d27a1283fbf9b611af4", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -2,6 +2,5 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "7541079def2c0dc0ac8f079ed050b6840ae74998", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -3,6 +3,5 @@ fn main() {\n     let x = x as *const _ as *const *const u8;\n     // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n     // in miri's memory.\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 2, but alignment\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment\n }"}, {"sha": "1b9b55c6be1f2eb73c004289e8105d6e4c2a141f", "filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -2,6 +2,5 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated.  Test specifically for loading ZST.\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "1f092936148e0bd0aefaefb0b2e0d78d13a1f40c", "filename": "tests/compile-fail/undefined_byte_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_byte_read.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -4,7 +4,6 @@\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR: error\n-    //~^ NOTE attempted to read undefined bytes\n+    let x = undef + 1; //~ ERROR attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "8eec9737546b308a3c92d7a0b97f0821952c8552", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR constant evaluation error\n-    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n+    let x = unsafe { *p }; //~ ERROR a memory access tried to interpret some bytes as a pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "2b179dcc8a452d63740c27ae34db991a6b4a2501", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR constant evaluation error\n-    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n+    let _ = unsafe { *x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "7a7d7e49b2db5a2fc95c8f8b13355719f89be459", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957d18c343d5580ae80b8ac606f6d9dc5e83f659/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=957d18c343d5580ae80b8ac606f6d9dc5e83f659", "patch": "@@ -101,9 +101,6 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    if have_fullmir() {\n-        flags.push(\"-Zmiri-start-fn\".to_owned());\n-    }\n     if opt {\n         // FIXME: Using level 1 (instead of 3) for now, as the optimizer is pretty broken\n         // and crashes..."}]}