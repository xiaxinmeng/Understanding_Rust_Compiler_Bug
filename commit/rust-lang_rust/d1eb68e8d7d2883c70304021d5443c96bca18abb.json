{"sha": "d1eb68e8d7d2883c70304021d5443c96bca18abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWI2OGU4ZDdkMjg4M2M3MDMwNDAyMWQ1NDQzYzk2YmNhMThhYmI=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-09T06:15:45Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:02:44Z"}, "message": "Create UnsignedInt trait and deprecate free functions", "tree": {"sha": "fcbd0118799d497f3b4eeac80dc8881532261447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcbd0118799d497f3b4eeac80dc8881532261447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1eb68e8d7d2883c70304021d5443c96bca18abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1eb68e8d7d2883c70304021d5443c96bca18abb", "html_url": "https://github.com/rust-lang/rust/commit/d1eb68e8d7d2883c70304021d5443c96bca18abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1eb68e8d7d2883c70304021d5443c96bca18abb/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe94bd995ab13afab7078a708b01f365740d2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe94bd995ab13afab7078a708b01f365740d2cd", "html_url": "https://github.com/rust-lang/rust/commit/9fe94bd995ab13afab7078a708b01f365740d2cd"}], "stats": {"total": 122, "additions": 71, "deletions": 51}, "files": [{"sha": "fb091ec7f8421f26ce21a68ee8469ca2cebaa3f5", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -38,7 +38,7 @@ use std::cmp;\n use std::intrinsics::{TyDesc, get_tydesc};\n use std::intrinsics;\n use std::mem;\n-use std::num;\n+use std::num::UnsignedInt;\n use std::ptr;\n use std::rc::Rc;\n use std::rt::heap::{allocate, deallocate};\n@@ -187,7 +187,7 @@ impl Arena {\n         self.chunks.borrow_mut().push(self.copy_head.borrow().clone());\n \n         *self.copy_head.borrow_mut() =\n-            chunk(num::next_power_of_two(new_min_chunk_size + 1u), true);\n+            chunk((new_min_chunk_size + 1u).next_power_of_two(), true);\n \n         return self.alloc_copy_inner(n_bytes, align);\n     }\n@@ -228,7 +228,7 @@ impl Arena {\n         self.chunks.borrow_mut().push(self.head.borrow().clone());\n \n         *self.head.borrow_mut() =\n-            chunk(num::next_power_of_two(new_min_chunk_size + 1u), false);\n+            chunk((new_min_chunk_size + 1u).next_power_of_two(), false);\n \n         return self.alloc_noncopy_inner(n_bytes, align);\n     }"}, {"sha": "3ef7667dd8f179fd979f3532798af402e576b12c", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -21,7 +21,7 @@ use core::default::Default;\n use core::fmt;\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n-use core::num;\n+use core::num::UnsignedInt;\n use core::ops;\n use core::ptr;\n use core::raw::Slice as RawSlice;\n@@ -605,7 +605,7 @@ impl<T> Vec<T> {\n                 None => panic!(\"Vec::reserve: `uint` overflow\"),\n                 // if the checked_add\n                 Some(new_cap) => {\n-                    let amort_cap = num::next_power_of_two(new_cap);\n+                    let amort_cap = new_cap.next_power_of_two();\n                     // next_power_of_two will overflow to exactly 0 for really big capacities\n                     if amort_cap == 0 {\n                         self.grow_capacity(new_cap);"}, {"sha": "8bab90c57e253c3fa34e2811d2a1dd7dc82df061", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 50, "deletions": 29, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -621,40 +621,47 @@ int_cast_impl!(i64, u64)\n #[cfg(target_word_size = \"32\")] int_cast_impl!(int, u32)\n #[cfg(target_word_size = \"64\")] int_cast_impl!(int, u64)\n \n-/// Returns the smallest power of 2 greater than or equal to `n`.\n-#[inline]\n-pub fn next_power_of_two<T: Unsigned + Int>(n: T) -> T {\n-    let halfbits = size_of::<T>() * 4;\n-    let mut tmp: T = n - one();\n-    let mut shift = 1u;\n-    while shift <= halfbits {\n-        tmp = tmp | (tmp >> shift);\n-        shift = shift << 1u;\n+/// Unsigned integers\n+pub trait UnsignedInt: Int {\n+    /// Returns `true` iff `self == 2^k` for some `k`.\n+    fn is_power_of_two(self) -> bool {\n+        (self - one()) & self == zero()\n     }\n-    tmp + one()\n-}\n \n-// Returns `true` iff `n == 2^k` for some k.\n-#[inline]\n-pub fn is_power_of_two<T: Unsigned + Int>(n: T) -> bool {\n-    (n - one()) & n == zero()\n-}\n+    /// Returns the smallest power of two greater than or equal to `self`.\n+    #[inline]\n+    fn next_power_of_two(self) -> Self {\n+        let halfbits = size_of::<Self>() * 4;\n+        let mut tmp = self - one();\n+        let mut shift = 1u;\n+        while shift <= halfbits {\n+            tmp = tmp | (tmp >> shift);\n+            shift = shift << 1u;\n+        }\n+        tmp + one()\n+    }\n \n-/// Returns the smallest power of 2 greater than or equal to `n`. If the next\n-/// power of two is greater than the type's maximum value, `None` is returned,\n-/// otherwise the power of 2 is wrapped in `Some`.\n-#[inline]\n-pub fn checked_next_power_of_two<T: Unsigned + Int>(n: T) -> Option<T> {\n-    let halfbits = size_of::<T>() * 4;\n-    let mut tmp: T = n - one();\n-    let mut shift = 1u;\n-    while shift <= halfbits {\n-        tmp = tmp | (tmp >> shift);\n-        shift = shift << 1u;\n+    /// Returns the smallest power of two greater than or equal to `n`. If the\n+    /// next power of two is greater than the type's maximum value, `None` is\n+    /// returned, otherwise the power of two is wrapped in `Some`.\n+    fn checked_next_power_of_two(self) -> Option<Self> {\n+        let halfbits = size_of::<Self>() * 4;\n+        let mut tmp = self - one();\n+        let mut shift = 1u;\n+        while shift <= halfbits {\n+            tmp = tmp | (tmp >> shift);\n+            shift = shift << 1u;\n+        }\n+        tmp.checked_add(&one())\n     }\n-    tmp.checked_add(&one())\n }\n \n+impl UnsignedInt for uint {}\n+impl UnsignedInt for u8 {}\n+impl UnsignedInt for u16 {}\n+impl UnsignedInt for u32 {}\n+impl UnsignedInt for u64 {}\n+\n /// A generic trait for converting a value to a number.\n pub trait ToPrimitive {\n     /// Converts the value of `self` to an `int`.\n@@ -1525,4 +1532,18 @@ pub trait Float: Signed + Primitive {\n // DEPRECATED\n \n #[deprecated = \"Use `Signed::abs`\"]\n-pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n+pub fn abs<T: Signed>(value: T) -> T {\n+    value.abs()\n+}\n+#[deprecated = \"Use `UnsignedInt::next_power_of_two`\"]\n+pub fn next_power_of_two<T: UnsignedInt>(n: T) -> T {\n+    n.next_power_of_two()\n+}\n+#[deprecated = \"Use `UnsignedInt::is_power_of_two`\"]\n+pub fn is_power_of_two<T: UnsignedInt>(n: T) -> bool {\n+    n.is_power_of_two()\n+}\n+#[deprecated = \"Use `UnsignedInt::checked_next_power_of_two`\"]\n+pub fn checked_next_power_of_two<T: UnsignedInt>(n: T) -> Option<T> {\n+    n.checked_next_power_of_two()\n+}"}, {"sha": "68c428f456db2b21d35b142177d7d7b8ba30699e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -18,7 +18,7 @@ use hash::{Hash, Hasher, RandomSipHasher};\n use iter::{mod, Iterator, FromIterator, Extend};\n use kinds::Sized;\n use mem::{mod, replace};\n-use num;\n+use num::UnsignedInt;\n use ops::{Deref, Index, IndexMut};\n use option::{Some, None, Option};\n use result::{Result, Ok, Err};\n@@ -549,7 +549,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// ```\n     #[inline]\n     pub fn with_capacity_and_hasher(capacity: uint, hasher: H) -> HashMap<K, V, H> {\n-        let cap = num::next_power_of_two(max(INITIAL_CAPACITY, capacity));\n+        let cap = max(INITIAL_CAPACITY, capacity).next_power_of_two();\n         HashMap {\n             hasher:        hasher,\n             resize_policy: DefaultResizePolicy::new(cap),\n@@ -572,8 +572,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// map.reserve(10);\n     /// ```\n     pub fn reserve(&mut self, new_minimum_capacity: uint) {\n-        let cap = num::next_power_of_two(\n-            max(INITIAL_CAPACITY, new_minimum_capacity));\n+        let cap = max(INITIAL_CAPACITY, new_minimum_capacity).next_power_of_two();\n \n         self.resize_policy.reserve(cap);\n \n@@ -588,7 +587,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///   2) Ensure new_capacity is a power of two.\n     fn resize(&mut self, new_capacity: uint) {\n         assert!(self.table.size() <= new_capacity);\n-        assert!(num::is_power_of_two(new_capacity));\n+        assert!(new_capacity.is_power_of_two());\n \n         let mut old_table = replace(&mut self.table, RawTable::new(new_capacity));\n         let old_size = old_table.size();"}, {"sha": "b39b15b3eb938a261af251859dfbdbcc7e6120f6", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -17,7 +17,7 @@ use iter::{Iterator, count};\n use kinds::{Sized, marker};\n use mem::{min_align_of, size_of};\n use mem;\n-use num::{CheckedAdd, CheckedMul, is_power_of_two};\n+use num::{CheckedAdd, CheckedMul, UnsignedInt};\n use ops::{Deref, DerefMut, Drop};\n use option::{Some, None, Option};\n use ptr::{RawPtr, copy_nonoverlapping_memory, zero_memory};\n@@ -516,7 +516,7 @@ impl<K, V, M: Deref<RawTable<K, V>>> GapThenFull<K, V, M> {\n ///\n /// Fails if `target_alignment` is not a power of two.\n fn round_up_to_next(unrounded: uint, target_alignment: uint) -> uint {\n-    assert!(is_power_of_two(target_alignment));\n+    assert!(target_alignment.is_power_of_two());\n     (unrounded + target_alignment - 1) & !(target_alignment - 1)\n }\n "}, {"sha": "509de4787d78df26b3116d056372464b0afb7c0c", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -23,7 +23,7 @@ use option::Option;\n pub use core::num::{Num, div_rem, Zero, zero, One, one};\n pub use core::num::{Signed, abs, signum};\n pub use core::num::{Unsigned, pow, Bounded};\n-pub use core::num::{Primitive, Int, Saturating};\n+pub use core::num::{Primitive, Int, UnsignedInt, Saturating};\n pub use core::num::{CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n pub use core::num::{cast, FromPrimitive, NumCast, ToPrimitive};\n pub use core::num::{next_power_of_two, is_power_of_two};\n@@ -672,10 +672,10 @@ mod tests {\n         ($test_name:ident, $T:ident) => (\n             fn $test_name() {\n                 #![test]\n-                assert_eq!(next_power_of_two::<$T>(0), 0);\n+                assert_eq!((0 as $T).next_power_of_two(), 0);\n                 let mut next_power = 1;\n                 for i in range::<$T>(1, 40) {\n-                     assert_eq!(next_power_of_two(i), next_power);\n+                     assert_eq!(i.next_power_of_two(), next_power);\n                      if i == next_power { next_power *= 2 }\n                 }\n             }\n@@ -692,15 +692,15 @@ mod tests {\n         ($test_name:ident, $T:ident) => (\n             fn $test_name() {\n                 #![test]\n-                assert_eq!(checked_next_power_of_two::<$T>(0), None);\n+                assert_eq!((0 as $T).checked_next_power_of_two(), None);\n                 let mut next_power = 1;\n                 for i in range::<$T>(1, 40) {\n-                     assert_eq!(checked_next_power_of_two(i), Some(next_power));\n+                     assert_eq!(i.checked_next_power_of_two(), Some(next_power));\n                      if i == next_power { next_power *= 2 }\n                 }\n-                assert!(checked_next_power_of_two::<$T>($T::MAX / 2).is_some());\n-                assert_eq!(checked_next_power_of_two::<$T>($T::MAX - 1), None);\n-                assert_eq!(checked_next_power_of_two::<$T>($T::MAX), None);\n+                assert!(($T::MAX / 2).checked_next_power_of_two().is_some());\n+                assert_eq!(($T::MAX - 1).checked_next_power_of_two(), None);\n+                assert_eq!($T::MAX.checked_next_power_of_two(), None);\n             }\n         )\n     )"}, {"sha": "4414f710b15646376acdc140067c42fd6840bed0", "filename": "src/libsync/mpmc_bounded_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eb68e8d7d2883c70304021d5443c96bca18abb/src%2Flibsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpmc_bounded_queue.rs?ref=d1eb68e8d7d2883c70304021d5443c96bca18abb", "patch": "@@ -34,7 +34,7 @@ use core::prelude::*;\n \n use alloc::arc::Arc;\n use collections::Vec;\n-use core::num::next_power_of_two;\n+use core::num::UnsignedInt;\n use core::cell::UnsafeCell;\n \n use atomic::{AtomicUint,Relaxed,Release,Acquire};\n@@ -66,7 +66,7 @@ impl<T: Send> State<T> {\n                 2u\n             } else {\n                 // use next power of 2 as capacity\n-                next_power_of_two(capacity)\n+                capacity.next_power_of_two()\n             }\n         } else {\n             capacity"}]}