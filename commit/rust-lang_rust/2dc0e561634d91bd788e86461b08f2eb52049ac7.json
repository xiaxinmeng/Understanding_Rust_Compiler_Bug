{"sha": "2dc0e561634d91bd788e86461b08f2eb52049ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzBlNTYxNjM0ZDkxYmQ3ODhlODY0NjFiMDhmMmViNTIwNDlhYzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-05T22:19:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-05T22:21:52Z"}, "message": "rustc: Fix more verbatim paths leaking to gcc\n\nTurns out that a verbatim path was leaking through to gcc via the PATH\nenvironment variable (pointing to the bundled gcc provided by the main\ndistribution) which was wreaking havoc when gcc itself was run. The fix here is\nto just stop passing verbatim paths down by adding more liberal uses of\n`fix_windows_verbatim_for_gcc`.\n\nCloses #25072", "tree": {"sha": "ca51ec0f4981f1e924ef793da8bb562bd49ed018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca51ec0f4981f1e924ef793da8bb562bd49ed018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc0e561634d91bd788e86461b08f2eb52049ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc0e561634d91bd788e86461b08f2eb52049ac7", "html_url": "https://github.com/rust-lang/rust/commit/2dc0e561634d91bd788e86461b08f2eb52049ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc0e561634d91bd788e86461b08f2eb52049ac7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70db76602e0fbd88c718e4f564b90a8819978773", "url": "https://api.github.com/repos/rust-lang/rust/commits/70db76602e0fbd88c718e4f564b90a8819978773", "html_url": "https://github.com/rust-lang/rust/commit/70db76602e0fbd88c718e4f564b90a8819978773"}], "stats": {"total": 82, "additions": 51, "deletions": 31}, "files": [{"sha": "35abbc77c12b16cf3342401542ac1536fa5ee591", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2dc0e561634d91bd788e86461b08f2eb52049ac7", "patch": "@@ -147,6 +147,7 @@ pub mod util {\n     pub mod nodemap;\n     pub mod lev_distance;\n     pub mod num;\n+    pub mod fs;\n }\n \n pub mod lib {"}, {"sha": "311ab1cbd0ce02269a5aea17ee01880dab254cb5", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=2dc0e561634d91bd788e86461b08f2eb52049ac7", "patch": "@@ -19,6 +19,7 @@ use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n \n use session::search_paths::{SearchPaths, PathKind};\n+use util::fs as rustcfs;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {\n@@ -191,7 +192,10 @@ pub fn get_or_default_sysroot() -> PathBuf {\n     fn canonicalize(path: Option<PathBuf>) -> Option<PathBuf> {\n         path.and_then(|path| {\n             match fs::canonicalize(&path) {\n-                Ok(canon) => Some(canon),\n+                // See comments on this target function, but the gist is that\n+                // gcc chokes on verbatim paths which fs::canonicalize generates\n+                // so we try to avoid those kinds of paths.\n+                Ok(canon) => Some(rustcfs::fix_windows_verbatim_for_gcc(&canon)),\n                 Err(e) => panic!(\"failed to get realpath: {}\", e),\n             }\n         })"}, {"sha": "7a8ce1bf48e47d283e7e285315987658c5073d4e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2dc0e561634d91bd788e86461b08f2eb52049ac7", "patch": "@@ -46,8 +46,9 @@ pub struct Session {\n     pub entry_type: Cell<Option<config::EntryFnType>>,\n     pub plugin_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<PathBuf>,\n-    // The name of the root source file of the crate, in the local file system. The path is always\n-    // expected to be absolute. `None` means that there is no source file.\n+    // The name of the root source file of the crate, in the local file system.\n+    // The path is always expected to be absolute. `None` means that there is no\n+    // source file.\n     pub local_crate_source_file: Option<PathBuf>,\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,"}, {"sha": "3ae78fa7c19048157619e40d683735edc823ce42", "filename": "src/librustc/util/fs.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Futil%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc%2Futil%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ffs.rs?ref=2dc0e561634d91bd788e86461b08f2eb52049ac7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::path::{self, Path, PathBuf};\n+use std::ffi::OsString;\n+\n+// Unfortunately, on windows, gcc cannot accept paths of the form `\\\\?\\C:\\...`\n+// (a verbatim path). This form of path is generally pretty rare, but the\n+// implementation of `fs::canonicalize` currently generates paths of this form,\n+// meaning that we're going to be passing quite a few of these down to gcc.\n+//\n+// For now we just strip the \"verbatim prefix\" of `\\\\?\\` from the path. This\n+// will probably lose information in some cases, but there's not a whole lot\n+// more we can do with a buggy gcc...\n+pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n+    if !cfg!(windows) {\n+        return p.to_path_buf()\n+    }\n+    let mut components = p.components();\n+    let prefix = match components.next() {\n+        Some(path::Component::Prefix(p)) => p,\n+        _ => return p.to_path_buf(),\n+    };\n+    let disk = match prefix.kind() {\n+        path::Prefix::VerbatimDisk(disk) => disk,\n+        _ => return p.to_path_buf(),\n+    };\n+    let mut base = OsString::from(format!(\"{}:\", disk as char));\n+    base.push(components.as_path());\n+    PathBuf::from(base)\n+}"}, {"sha": "45d81ff0f65297f9e7811c3528a9bd0b89345df5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2dc0e561634d91bd788e86461b08f2eb52049ac7", "patch": "@@ -479,7 +479,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             let mut _old_path = OsString::new();\n             if cfg!(windows) {\n                 _old_path = env::var_os(\"PATH\").unwrap_or(_old_path);\n-                let mut new_path = sess.host_filesearch(PathKind::All).get_dylib_search_paths();\n+                let mut new_path = sess.host_filesearch(PathKind::All)\n+                                       .get_dylib_search_paths();\n                 new_path.extend(env::split_paths(&_old_path));\n                 env::set_var(\"PATH\", &env::join_paths(new_path.iter()).unwrap());\n             }"}, {"sha": "8830cd13052a5be8b6d737c6d87e9139ddaa67e3", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc0e561634d91bd788e86461b08f2eb52049ac7/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=2dc0e561634d91bd788e86461b08f2eb52049ac7", "patch": "@@ -26,13 +26,14 @@ use middle::ty::{self, Ty};\n use util::common::time;\n use util::ppaux;\n use util::sha2::{Digest, Sha256};\n+use util::fs::fix_windows_verbatim_for_gcc;\n use rustc_back::tempdir::TempDir;\n \n use std::ffi::OsString;\n use std::fs::{self, PathExt};\n use std::io::{self, Read, Write};\n use std::mem;\n-use std::path::{self, Path, PathBuf};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n use flate;\n@@ -1333,29 +1334,3 @@ fn add_upstream_native_libraries(cmd: &mut Command, sess: &Session) {\n         }\n     }\n }\n-\n-// Unfortunately, on windows, gcc cannot accept paths of the form `\\\\?\\C:\\...`\n-// (a verbatim path). This form of path is generally pretty rare, but the\n-// implementation of `fs::canonicalize` currently generates paths of this form,\n-// meaning that we're going to be passing quite a few of these down to gcc.\n-//\n-// For now we just strip the \"verbatim prefix\" of `\\\\?\\` from the path. This\n-// will probably lose information in some cases, but there's not a whole lot\n-// more we can do with a buggy gcc...\n-fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n-    if !cfg!(windows) {\n-        return p.to_path_buf()\n-    }\n-    let mut components = p.components();\n-    let prefix = match components.next() {\n-        Some(path::Component::Prefix(p)) => p,\n-        _ => return p.to_path_buf(),\n-    };\n-    let disk = match prefix.kind() {\n-        path::Prefix::VerbatimDisk(disk) => disk,\n-        _ => return p.to_path_buf(),\n-    };\n-    let mut base = OsString::from(format!(\"{}:\", disk as char));\n-    base.push(components.as_path());\n-    PathBuf::from(base)\n-}"}]}