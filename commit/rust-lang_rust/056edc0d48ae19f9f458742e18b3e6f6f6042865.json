{"sha": "056edc0d48ae19f9f458742e18b3e6f6f6042865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NmVkYzBkNDhhZTE5ZjlmNDU4NzQyZTE4YjNlNmY2ZjYwNDI4NjU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-14T17:15:23Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-15T18:33:52Z"}, "message": "Use a bespoke type for the result of `mir_const_qualif`", "tree": {"sha": "c1a75797a20436ee75f0e56ad24fb91190b009e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a75797a20436ee75f0e56ad24fb91190b009e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056edc0d48ae19f9f458742e18b3e6f6f6042865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056edc0d48ae19f9f458742e18b3e6f6f6042865", "html_url": "https://github.com/rust-lang/rust/commit/056edc0d48ae19f9f458742e18b3e6f6f6042865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056edc0d48ae19f9f458742e18b3e6f6f6042865/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4ce2011cb0191e3be3dde2bca27b5c1ea4aadf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ce2011cb0191e3be3dde2bca27b5c1ea4aadf2", "html_url": "https://github.com/rust-lang/rust/commit/a4ce2011cb0191e3be3dde2bca27b5c1ea4aadf2"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "8a847115c9faf5d0a4c379fdbdb57f322c95991d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=056edc0d48ae19f9f458742e18b3e6f6f6042865", "patch": "@@ -2769,6 +2769,13 @@ pub struct BorrowCheckResult<'tcx> {\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n }\n \n+/// The result of the `mir_const_qualif` query.\n+#[derive(Clone, Copy, Debug, Default, RustcEncodable, RustcDecodable, HashStable)]\n+pub struct QualifSet {\n+    pub has_mut_interior: bool,\n+    pub needs_drop: bool,\n+}\n+\n /// After we borrow check a closure, we are left with various\n /// requirements that we have inferred between the free regions that\n /// appear in the closure's signature or on its field types. These"}, {"sha": "421d942373a0ea34b30f0403e38f4535457fac30", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=056edc0d48ae19f9f458742e18b3e6f6f6042865", "patch": "@@ -93,7 +93,7 @@ rustc_queries! {\n         /// Maps DefId's that have an associated `mir::Body` to the result\n         /// of the MIR qualify_consts pass. The actual meaning of\n         /// the value isn't known except to the pass itself.\n-        query mir_const_qualif(key: DefId) -> u8 {\n+        query mir_const_qualif(key: DefId) -> mir::QualifSet {\n             desc { |tcx| \"const checking `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }"}, {"sha": "e3218eebcf05c300e17baedf7cbeee873d02afb1", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=056edc0d48ae19f9f458742e18b3e6f6f6042865", "patch": "@@ -952,7 +952,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .decode((self, tcx))\n     }\n \n-    fn mir_const_qualif(&self, id: DefIndex) -> u8 {\n+    fn mir_const_qualif(&self, id: DefIndex) -> mir::QualifSet {\n         match self.kind(id) {\n             EntryKind::Const(qualif, _) |\n             EntryKind::AssocConst(AssocContainer::ImplDefault, qualif, _) |"}, {"sha": "633b3daa8fa884ae907c9978e02e9155f396a5c9", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=056edc0d48ae19f9f458742e18b3e6f6f6042865", "patch": "@@ -875,7 +875,11 @@ impl EncodeContext<'tcx> {\n                     hir::print::to_string(self.tcx.hir(), |s| s.print_trait_item(ast_item));\n                 let rendered_const = self.lazy(RenderedConst(rendered));\n \n-                EntryKind::AssocConst(container, ConstQualif { mir: 0 }, rendered_const)\n+                EntryKind::AssocConst(\n+                    container,\n+                    ConstQualif { mir: Default::default() },\n+                    rendered_const,\n+                )\n             }\n             ty::AssocKind::Method => {\n                 let fn_data = if let hir::TraitItemKind::Method(m_sig, m) = &ast_item.kind {"}, {"sha": "b2fb725a11844d8fc55752e4d37f2fd7ee840c83", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=056edc0d48ae19f9f458742e18b3e6f6f6042865", "patch": "@@ -295,7 +295,7 @@ enum EntryKind<'tcx> {\n /// Additional data for EntryKind::Const and EntryKind::AssocConst\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable)]\n struct ConstQualif {\n-    mir: u8,\n+    mir: mir::QualifSet,\n }\n \n /// Contains a constant which has been rendered to a String."}, {"sha": "32ccf961e396386c539ad7329a822edfa07b1c76", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056edc0d48ae19f9f458742e18b3e6f6f6042865/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=056edc0d48ae19f9f458742e18b3e6f6f6042865", "patch": "@@ -1,7 +1,7 @@\n use crate::{build, shim};\n use rustc_index::vec::IndexVec;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::{Body, MirPhase, Promoted};\n+use rustc::mir::{Body, MirPhase, Promoted, QualifSet};\n use rustc::ty::{TyCtxt, InstanceDef, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -184,12 +184,12 @@ pub fn run_passes(\n     body.phase = mir_phase;\n }\n \n-fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> u8 {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> QualifSet {\n     let const_kind = check_consts::ConstKind::for_item(tcx, def_id);\n \n     // No need to const-check a non-const `fn`.\n     if const_kind.is_none() {\n-        return 0;\n+        return Default::default();\n     }\n \n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n@@ -200,7 +200,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> u8 {\n \n     if body.return_ty().references_error() {\n         tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");\n-        return 0;\n+        return Default::default();\n     }\n \n     let item = check_consts::Item {"}]}