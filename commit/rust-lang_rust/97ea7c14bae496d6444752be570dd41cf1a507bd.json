{"sha": "97ea7c14bae496d6444752be570dd41cf1a507bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZWE3YzE0YmFlNDk2ZDY0NDQ3NTJiZTU3MGRkNDFjZjFhNTA3YmQ=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-04-21T11:32:25Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-05-06T05:22:26Z"}, "message": "core: fixed a slight bug.\n\nThe bug involves the incorrect logic for `core::num::flt2dec::decoder`.\nThis makes some numbers in the form of 2^n missing one final digits,\nwhich breaks the bijectivity criterion. The regression tests have been\nadded, and f32 exhaustive test is rerun to get the updated result.", "tree": {"sha": "0a0b52c4568cf5ccd53faa2f8662cc6c37b2adc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0b52c4568cf5ccd53faa2f8662cc6c37b2adc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ea7c14bae496d6444752be570dd41cf1a507bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ea7c14bae496d6444752be570dd41cf1a507bd", "html_url": "https://github.com/rust-lang/rust/commit/97ea7c14bae496d6444752be570dd41cf1a507bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ea7c14bae496d6444752be570dd41cf1a507bd/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a195f075417ad78084ef2e1c5e294ac35d6cafa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a195f075417ad78084ef2e1c5e294ac35d6cafa", "html_url": "https://github.com/rust-lang/rust/commit/8a195f075417ad78084ef2e1c5e294ac35d6cafa"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "d4473e6bc0c4a33dcd28cf91e094a23fb1064001", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97ea7c14bae496d6444752be570dd41cf1a507bd/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ea7c14bae496d6444752be570dd41cf1a507bd/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=97ea7c14bae496d6444752be570dd41cf1a507bd", "patch": "@@ -75,21 +75,21 @@ pub fn decode<T: DecodableFloat>(v: T) -> (/*negative?*/ bool, FullDecoded) {\n         FpCategory::Infinite => FullDecoded::Infinite,\n         FpCategory::Zero => FullDecoded::Zero,\n         FpCategory::Subnormal => {\n-            // (mant - 2, exp) -- (mant, exp) -- (mant + 2, exp)\n+            // neighbors: (mant - 2, exp) -- (mant, exp) -- (mant + 2, exp)\n             // Float::integer_decode always preserves the exponent,\n             // so the mantissa is scaled for subnormals.\n             FullDecoded::Finite(Decoded { mant: mant, minus: 1, plus: 1,\n                                           exp: exp, inclusive: even })\n         }\n         FpCategory::Normal => {\n             let minnorm = <T as DecodableFloat>::min_pos_norm_value().integer_decode();\n-            if mant == minnorm.0 && exp == minnorm.1 {\n-                // (maxmant, exp - 1) -- (minnormmant, exp) -- (minnormmant + 1, exp)\n+            if mant == minnorm.0 {\n+                // neighbors: (maxmant, exp - 1) -- (minnormmant, exp) -- (minnormmant + 1, exp)\n                 // where maxmant = minnormmant * 2 - 1\n-                FullDecoded::Finite(Decoded { mant: mant << 1, minus: 1, plus: 2,\n-                                              exp: exp - 1, inclusive: even })\n+                FullDecoded::Finite(Decoded { mant: mant << 2, minus: 1, plus: 2,\n+                                              exp: exp - 2, inclusive: even })\n             } else {\n-                // (mant - 1, exp) -- (mant, exp) -- (mant + 1, exp)\n+                // neighbors: (mant - 1, exp) -- (mant, exp) -- (mant + 1, exp)\n                 FullDecoded::Finite(Decoded { mant: mant << 1, minus: 1, plus: 1,\n                                               exp: exp - 1, inclusive: even })\n             }"}, {"sha": "95f9eeec2c87fd129a65c24d497938c0c0f0e2c1", "filename": "src/libcoretest/num/flt2dec/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97ea7c14bae496d6444752be570dd41cf1a507bd/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ea7c14bae496d6444752be570dd41cf1a507bd/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs?ref=97ea7c14bae496d6444752be570dd41cf1a507bd", "patch": "@@ -216,6 +216,13 @@ pub fn f32_shortest_sanity_test<F>(mut f: F) where F: FnMut(&Decoded, &mut [u8])\n     // 10^18 * 0.314159231156617216\n     check_shortest!(f(3.141592e17f32) => b\"3141592\", 18);\n \n+    // regression test for decoders\n+    // 10^8 * 0.3355443\n+    // 10^8 * 0.33554432\n+    // 10^8 * 0.33554436\n+    let twoto25: f32 = StdFloat::ldexp(1.0, 25);\n+    check_shortest!(f(twoto25) => b\"33554432\", 8);\n+\n     // 10^39 * 0.340282326356119256160033759537265639424\n     // 10^39 * 0.34028234663852885981170418348451692544\n     // 10^39 * 0.340282366920938463463374607431768211456\n@@ -308,6 +315,13 @@ pub fn f64_shortest_sanity_test<F>(mut f: F) where F: FnMut(&Decoded, &mut [u8])\n     // 10^18 * 0.314159200000000064\n     check_shortest!(f(3.141592e17f64) => b\"3141592\", 18);\n \n+    // regression test for decoders\n+    // 10^20 * 0.18446744073709549568\n+    // 10^20 * 0.18446744073709551616\n+    // 10^20 * 0.18446744073709555712\n+    let twoto64: f64 = StdFloat::ldexp(1.0, 64);\n+    check_shortest!(f(twoto64) => b\"18446744073709552\", 20);\n+\n     // pathological case: high = 10^23 (exact). tie breaking should always prefer that.\n     // 10^24 * 0.099999999999999974834176\n     // 10^24 * 0.099999999999999991611392\n@@ -492,15 +506,15 @@ pub fn f32_exhaustive_equivalence_test<F, G>(f: F, g: G, k: usize)\n     // so why not simply testing all of them?\n     //\n     // this is of course very stressful (and thus should be behind an `#[ignore]` attribute),\n-    // but with `-O3 -C lto` this only takes about two hours or so.\n+    // but with `-C opt-level=3 -C lto` this only takes about an hour or so.\n \n     // iterate from 0x0000_0001 to 0x7f7f_ffff, i.e. all finite ranges\n     let (npassed, nignored) = iterate(\"f32_exhaustive_equivalence_test\",\n                                       k, 0x7f7f_ffff, f, g, |i: usize| {\n         let x: f32 = unsafe {mem::transmute(i as u32 + 1)};\n         decode_finite(x)\n     });\n-    assert_eq!((npassed, nignored), (2121451879, 17643160));\n+    assert_eq!((npassed, nignored), (2121451881, 17643158));\n }\n \n fn to_string_with_parts<F>(mut f: F) -> String"}, {"sha": "e5b8a9dcc38fcc9e8b085821dd2ba87d56e55323", "filename": "src/libcoretest/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ea7c14bae496d6444752be570dd41cf1a507bd/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ea7c14bae496d6444752be570dd41cf1a507bd/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=97ea7c14bae496d6444752be570dd41cf1a507bd", "patch": "@@ -60,7 +60,7 @@ fn shortest_f32_exhaustive_equivalence_test() {\n     //\n     // this reports the progress and the number of f32 values returned `None`.\n     // with `--nocapture` (and plenty of time and appropriate rustc flags), this should print:\n-    // `done, ignored=17643160 passed=2121451879 failed=0`.\n+    // `done, ignored=17643158 passed=2121451881 failed=0`.\n \n     use core::num::flt2dec::strategy::dragon::format_shortest as fallback;\n     f32_exhaustive_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS);"}]}