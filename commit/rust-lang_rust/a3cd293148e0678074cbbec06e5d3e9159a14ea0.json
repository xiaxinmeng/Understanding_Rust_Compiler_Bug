{"sha": "a3cd293148e0678074cbbec06e5d3e9159a14ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzY2QyOTMxNDhlMDY3ODA3NGNiYmVjMDZlNWQzZTkxNTlhMTRlYTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-24T10:10:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-24T10:10:20Z"}, "message": "Don't perform a double substitution in some cases", "tree": {"sha": "9b329dd71c612ffcfd998511c0dae7712ddbf1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b329dd71c612ffcfd998511c0dae7712ddbf1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3cd293148e0678074cbbec06e5d3e9159a14ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cd293148e0678074cbbec06e5d3e9159a14ea0", "html_url": "https://github.com/rust-lang/rust/commit/a3cd293148e0678074cbbec06e5d3e9159a14ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3cd293148e0678074cbbec06e5d3e9159a14ea0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c83d21f55b5b66e55f6908f31dbd0cd1a96f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c83d21f55b5b66e55f6908f31dbd0cd1a96f59", "html_url": "https://github.com/rust-lang/rust/commit/98c83d21f55b5b66e55f6908f31dbd0cd1a96f59"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "1d69018be50a4f82e47391d669028165ef18a400", "filename": "src/common.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3cd293148e0678074cbbec06e5d3e9159a14ea0/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cd293148e0678074cbbec06e5d3e9159a14ea0/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a3cd293148e0678074cbbec06e5d3e9159a14ea0", "patch": "@@ -305,13 +305,17 @@ impl<'tcx, B: Backend + 'static> HasTargetSpec for FunctionCx<'_, 'tcx, B> {\n impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     pub(crate) fn monomorphize<T>(&self, value: &T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx> + Copy,\n     {\n-        self.tcx.subst_and_normalize_erasing_regions(\n-            self.instance.substs,\n-            ty::ParamEnv::reveal_all(),\n-            value,\n-        )\n+        if let Some(substs) = self.instance.substs_for_mir_body() {\n+            self.tcx.subst_and_normalize_erasing_regions(\n+                substs,\n+                ty::ParamEnv::reveal_all(),\n+                value,\n+            )\n+        } else {\n+            self.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), *value)\n+        }\n     }\n \n     pub(crate) fn clif_type(&self, ty: Ty<'tcx>) -> Option<Type> {"}]}