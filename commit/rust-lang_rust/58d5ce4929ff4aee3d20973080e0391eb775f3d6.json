{"sha": "58d5ce4929ff4aee3d20973080e0391eb775f3d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDVjZTQ5MjlmZjRhZWUzZDIwOTczMDgwZTAzOTFlYjc3NWYzZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T15:42:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T15:42:29Z"}, "message": "Auto merge of #76197 - Mark-Simulacrum:no-llvm-no-ninja, r=pietroalbini\n\nMove ninja requirements to a dynamic check, when actually building\n\nIt isn't practical to determine whether we'll build LLVM very early in the\npipeline, so move the ninja checking to a dynamic check.\n\nr? @pietroalbini -- this should fix nightlies", "tree": {"sha": "a2244ce670466bcb61dfd136c7e4117539eaab01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2244ce670466bcb61dfd136c7e4117539eaab01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d5ce4929ff4aee3d20973080e0391eb775f3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d5ce4929ff4aee3d20973080e0391eb775f3d6", "html_url": "https://github.com/rust-lang/rust/commit/58d5ce4929ff4aee3d20973080e0391eb775f3d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d5ce4929ff4aee3d20973080e0391eb775f3d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397db054cb1f3d98e3d2809d25c60f1979cd5a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/397db054cb1f3d98e3d2809d25c60f1979cd5a97", "html_url": "https://github.com/rust-lang/rust/commit/397db054cb1f3d98e3d2809d25c60f1979cd5a97"}, {"sha": "d77c351c893b29167df0ccbfca3fe77334e7f89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77c351c893b29167df0ccbfca3fe77334e7f89b", "html_url": "https://github.com/rust-lang/rust/commit/d77c351c893b29167df0ccbfca3fe77334e7f89b"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "aeb0d713ef05134f78208b5e48ca3efa1a3b4a5e", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=58d5ce4929ff4aee3d20973080e0391eb775f3d6", "patch": "@@ -8,7 +8,7 @@ fn configure(host: &[&str], target: &[&str]) -> Config {\n     config.save_toolstates = None;\n     config.skip_only_host_steps = false;\n     config.dry_run = true;\n-    config.ninja = false;\n+    config.ninja_in_file = false;\n     // try to avoid spurious failures in dist where we create/delete each others file\n     let dir = config\n         .out"}, {"sha": "ad2f48778674f192bda9b4c5f797578b852aa758", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=58d5ce4929ff4aee3d20973080e0391eb775f3d6", "patch": "@@ -32,7 +32,8 @@ use serde::Deserialize;\n #[derive(Default)]\n pub struct Config {\n     pub ccache: Option<String>,\n-    pub ninja: bool,\n+    /// Call Build::ninja() instead of this.\n+    pub ninja_in_file: bool,\n     pub verbose: usize,\n     pub submodules: bool,\n     pub fast_submodules: bool,\n@@ -450,7 +451,7 @@ impl Config {\n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n-        config.ninja = true;\n+        config.ninja_in_file = true;\n         config.llvm_version_check = true;\n         config.backtrace = true;\n         config.rust_optimize = true;\n@@ -606,7 +607,7 @@ impl Config {\n                 }\n                 Some(StringOrBool::Bool(false)) | None => {}\n             }\n-            set(&mut config.ninja, llvm.ninja);\n+            set(&mut config.ninja_in_file, llvm.ninja);\n             llvm_assertions = llvm.assertions;\n             llvm_skip_rebuild = llvm_skip_rebuild.or(llvm.skip_rebuild);\n             set(&mut config.llvm_optimize, llvm.optimize);"}, {"sha": "54651214363ba5831c9d6d63d80fe790339e3912", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=58d5ce4929ff4aee3d20973080e0391eb775f3d6", "patch": "@@ -650,7 +650,7 @@ impl Build {\n             }\n         } else {\n             let base = self.llvm_out(self.config.build).join(\"build\");\n-            let base = if !self.config.ninja && self.config.build.contains(\"msvc\") {\n+            let base = if !self.ninja() && self.config.build.contains(\"msvc\") {\n                 if self.config.llvm_optimize {\n                     if self.config.llvm_release_debuginfo {\n                         base.join(\"RelWithDebInfo\")\n@@ -1328,6 +1328,43 @@ impl Build {\n         }\n         fs::remove_file(f).unwrap_or_else(|_| panic!(\"failed to remove {:?}\", f));\n     }\n+\n+    /// Returns if config.ninja is enabled, and checks for ninja existence,\n+    /// exiting with a nicer error message if not.\n+    fn ninja(&self) -> bool {\n+        let mut cmd_finder = crate::sanity::Finder::new();\n+\n+        if self.config.ninja_in_file {\n+            // Some Linux distros rename `ninja` to `ninja-build`.\n+            // CMake can work with either binary name.\n+            if cmd_finder.maybe_have(\"ninja-build\").is_none()\n+                && cmd_finder.maybe_have(\"ninja\").is_none()\n+            {\n+                eprintln!(\n+                    \"\n+Couldn't find required command: ninja\n+You should install ninja, or set ninja=false in config.toml\n+\"\n+                );\n+                std::process::exit(1);\n+            }\n+        }\n+\n+        // If ninja isn't enabled but we're building for MSVC then we try\n+        // doubly hard to enable it. It was realized in #43767 that the msbuild\n+        // CMake generator for MSVC doesn't respect configuration options like\n+        // disabling LLVM assertions, which can often be quite important!\n+        //\n+        // In these cases we automatically enable Ninja if we find it in the\n+        // environment.\n+        if !self.config.ninja_in_file && self.config.build.contains(\"msvc\") {\n+            if cmd_finder.maybe_have(\"ninja\").is_some() {\n+                return true;\n+            }\n+        }\n+\n+        self.config.ninja_in_file\n+    }\n }\n \n #[cfg(unix)]"}, {"sha": "a0c79e38f9d8c135c7997ea8012c72c4f912fd3a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=58d5ce4929ff4aee3d20973080e0391eb775f3d6", "patch": "@@ -56,7 +56,7 @@ pub fn prebuilt_llvm_config(\n     let out_dir = builder.llvm_out(target);\n \n     let mut llvm_config_ret_dir = builder.llvm_out(builder.config.build);\n-    if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n+    if !builder.config.build.contains(\"msvc\") || builder.ninja() {\n         llvm_config_ret_dir.push(\"build\");\n     }\n     llvm_config_ret_dir.push(\"bin\");\n@@ -363,7 +363,7 @@ fn configure_cmake(\n     // own build directories.\n     cfg.env(\"DESTDIR\", \"\");\n \n-    if builder.config.ninja {\n+    if builder.ninja() {\n         cfg.generator(\"Ninja\");\n     }\n     cfg.target(&target.triple).host(&builder.config.build.triple);\n@@ -395,7 +395,7 @@ fn configure_cmake(\n     // MSVC with CMake uses msbuild by default which doesn't respect these\n     // vars that we'd otherwise configure. In that case we just skip this\n     // entirely.\n-    if target.contains(\"msvc\") && !builder.config.ninja {\n+    if target.contains(\"msvc\") && !builder.ninja() {\n         return;\n     }\n \n@@ -405,7 +405,7 @@ fn configure_cmake(\n     };\n \n     // Handle msvc + ninja + ccache specially (this is what the bots use)\n-    if target.contains(\"msvc\") && builder.config.ninja && builder.config.ccache.is_some() {\n+    if target.contains(\"msvc\") && builder.ninja() && builder.config.ccache.is_some() {\n         let mut wrap_cc = env::current_exe().expect(\"failed to get cwd\");\n         wrap_cc.set_file_name(\"sccache-plus-cl.exe\");\n "}, {"sha": "4d6612a376a34993abd26f523228961663371d04", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5ce4929ff4aee3d20973080e0391eb775f3d6/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=58d5ce4929ff4aee3d20973080e0391eb775f3d6", "patch": "@@ -20,17 +20,17 @@ use build_helper::{output, t};\n use crate::config::Target;\n use crate::Build;\n \n-struct Finder {\n+pub struct Finder {\n     cache: HashMap<OsString, Option<PathBuf>>,\n     path: OsString,\n }\n \n impl Finder {\n-    fn new() -> Self {\n+    pub fn new() -> Self {\n         Self { cache: HashMap::new(), path: env::var_os(\"PATH\").unwrap_or_default() }\n     }\n \n-    fn maybe_have<S: AsRef<OsStr>>(&mut self, cmd: S) -> Option<PathBuf> {\n+    pub fn maybe_have<S: AsRef<OsStr>>(&mut self, cmd: S) -> Option<PathBuf> {\n         let cmd: OsString = cmd.as_ref().into();\n         let path = &self.path;\n         self.cache\n@@ -54,7 +54,7 @@ impl Finder {\n             .clone()\n     }\n \n-    fn must_have<S: AsRef<OsStr>>(&mut self, cmd: S) -> PathBuf {\n+    pub fn must_have<S: AsRef<OsStr>>(&mut self, cmd: S) -> PathBuf {\n         self.maybe_have(&cmd).unwrap_or_else(|| {\n             panic!(\"\\n\\ncouldn't find required command: {:?}\\n\\n\", cmd.as_ref());\n         })\n@@ -95,38 +95,6 @@ pub fn check(build: &mut Build) {\n         cmd_finder.must_have(\"cmake\");\n     }\n \n-    // Ninja is currently only used for LLVM itself.\n-    if building_llvm {\n-        if build.config.ninja {\n-            // Some Linux distros rename `ninja` to `ninja-build`.\n-            // CMake can work with either binary name.\n-            if cmd_finder.maybe_have(\"ninja-build\").is_none()\n-                && cmd_finder.maybe_have(\"ninja\").is_none()\n-            {\n-                eprintln!(\n-                    \"\n-Couldn't find required command: ninja\n-You should install ninja, or set ninja=false in config.toml\n-\"\n-                );\n-                std::process::exit(1);\n-            }\n-        }\n-\n-        // If ninja isn't enabled but we're building for MSVC then we try\n-        // doubly hard to enable it. It was realized in #43767 that the msbuild\n-        // CMake generator for MSVC doesn't respect configuration options like\n-        // disabling LLVM assertions, which can often be quite important!\n-        //\n-        // In these cases we automatically enable Ninja if we find it in the\n-        // environment.\n-        if !build.config.ninja && build.config.build.contains(\"msvc\") {\n-            if cmd_finder.maybe_have(\"ninja\").is_some() {\n-                build.config.ninja = true;\n-            }\n-        }\n-    }\n-\n     build.config.python = build\n         .config\n         .python"}]}