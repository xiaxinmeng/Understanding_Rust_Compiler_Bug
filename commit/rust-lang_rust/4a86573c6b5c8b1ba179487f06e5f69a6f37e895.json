{"sha": "4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhODY1NzNjNmI1YzhiMWJhMTc5NDg3ZjA2ZTVmNjlhNmYzN2U4OTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-22T21:50:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-22T21:50:21Z"}, "message": "Auto merge of #74404 - lcnr:ty-dep-path-cleanup-aaaaa, r=eddyb\n\nremove some const arg in ty dep path boilerplate\n\nfollowup to #74113, together with #74376, this closes #74360.\n\nr? @eddyb", "tree": {"sha": "313bb6fd61616c092dab49792b61e26bac243c29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313bb6fd61616c092dab49792b61e26bac243c29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "html_url": "https://github.com/rust-lang/rust/commit/4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbebe7351fcd29af1eb9a35e315369b15887ea09", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbebe7351fcd29af1eb9a35e315369b15887ea09", "html_url": "https://github.com/rust-lang/rust/commit/bbebe7351fcd29af1eb9a35e315369b15887ea09"}, {"sha": "4bffe8f00d39ad754758fb0eb38f9f9be54c9928", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bffe8f00d39ad754758fb0eb38f9f9be54c9928", "html_url": "https://github.com/rust-lang/rust/commit/4bffe8f00d39ad754758fb0eb38f9f9be54c9928"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "5316649d0e28af0010416e737db77c754fb9e4ea", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "patch": "@@ -1617,12 +1617,33 @@ pub struct WithOptConstParam<T> {\n \n impl<T> WithOptConstParam<T> {\n     /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.\n+    #[inline(always)]\n     pub fn unknown(did: T) -> WithOptConstParam<T> {\n         WithOptConstParam { did, const_param_did: None }\n     }\n }\n \n impl WithOptConstParam<LocalDefId> {\n+    /// Returns `Some((did, param_did))` if `def_id` is a const argument,\n+    /// `None` otherwise.\n+    #[inline(always)]\n+    pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {\n+        tcx.opt_const_param_of(did).map(|param_did| (did, param_did))\n+    }\n+\n+    /// In case `self` is unknown but `self.did` is a const argument, this returns\n+    /// a `WithOptConstParam` with the correct `const_param_did`.\n+    #[inline(always)]\n+    pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {\n+        if self.const_param_did.is_none() {\n+            if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {\n+                return Some(WithOptConstParam { did: self.did, const_param_did });\n+            }\n+        }\n+\n+        None\n+    }\n+\n     pub fn to_global(self) -> WithOptConstParam<DefId> {\n         WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }\n     }"}, {"sha": "76cc03fa60909ba58b605fa105b6928bac3a6ea0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "patch": "@@ -88,7 +88,13 @@ const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n-        mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptConstParam::unknown(did)),\n+        mir_borrowck: |tcx, did| {\n+            if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+                tcx.mir_borrowck_const_arg(def)\n+            } else {\n+                mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))\n+            }\n+        },\n         mir_borrowck_const_arg: |tcx, (did, param_did)| {\n             mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n         },\n@@ -100,12 +106,6 @@ fn mir_borrowck<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx BorrowCheckResult<'tcx> {\n-    if def.const_param_did.is_none() {\n-        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_borrowck_const_arg((def.did, param_did));\n-        }\n-    }\n-\n     let (input_body, promoted) = tcx.mir_validated(def);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.did.to_def_id()));\n "}, {"sha": "9c06e173bcd5713b2b946af7faa85dd4a341614b", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "patch": "@@ -439,7 +439,11 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         unsafety_check_result: |tcx, def_id| {\n-            unsafety_check_result(tcx, ty::WithOptConstParam::unknown(def_id))\n+            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n+                tcx.unsafety_check_result_for_const_arg(def)\n+            } else {\n+                unsafety_check_result(tcx, ty::WithOptConstParam::unknown(def_id))\n+            }\n         },\n         unsafety_check_result_for_const_arg: |tcx, (did, param_did)| {\n             unsafety_check_result(\n@@ -499,12 +503,6 @@ fn unsafety_check_result<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx UnsafetyCheckResult {\n-    if def.const_param_did.is_none() {\n-        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n-            return tcx.unsafety_check_result_for_const_arg((def.did, param_did));\n-        }\n-    }\n-\n     debug!(\"unsafety_violations({:?})\", def);\n \n     // N.B., this borrow is valid because all the consumers of"}, {"sha": "283e4b289f286925979d94c6733fe9c7867cb058", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "patch": "@@ -48,8 +48,13 @@ pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         mir_keys,\n         mir_const,\n-        mir_const_qualif: |tcx, did| {\n-            mir_const_qualif(tcx, ty::WithOptConstParam::unknown(did.expect_local()))\n+        mir_const_qualif: |tcx, def_id| {\n+            let def_id = def_id.expect_local();\n+            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n+                tcx.mir_const_qualif_const_arg(def)\n+            } else {\n+                mir_const_qualif(tcx, ty::WithOptConstParam::unknown(def_id))\n+            }\n         },\n         mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n             mir_const_qualif(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n@@ -60,7 +65,12 @@ pub(crate) fn provide(providers: &mut Providers) {\n         optimized_mir_of_const_arg,\n         is_mir_available,\n         promoted_mir: |tcx, def_id| {\n-            promoted_mir(tcx, ty::WithOptConstParam::unknown(def_id.expect_local()))\n+            let def_id = def_id.expect_local();\n+            if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n+                tcx.promoted_mir_of_const_arg(def)\n+            } else {\n+                promoted_mir(tcx, ty::WithOptConstParam::unknown(def_id))\n+            }\n         },\n         promoted_mir_of_const_arg: |tcx, (did, param_did)| {\n             promoted_mir(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n@@ -221,12 +231,6 @@ pub fn run_passes(\n }\n \n fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> ConstQualifs {\n-    if def.const_param_did.is_none() {\n-        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_const_qualif_const_arg((def.did, param_did));\n-        }\n-    }\n-\n     let const_kind = tcx.hir().body_const_context(def.did);\n \n     // No need to const-check a non-const `fn`.\n@@ -266,10 +270,8 @@ fn mir_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx Steal<Body<'tcx>> {\n-    if def.const_param_did.is_none() {\n-        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_const(ty::WithOptConstParam { const_param_did, ..def });\n-        }\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_const(def);\n     }\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n@@ -312,10 +314,8 @@ fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n-    if def.const_param_did.is_none() {\n-        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_validated(ty::WithOptConstParam { const_param_did, ..def });\n-        }\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_validated(def);\n     }\n \n     // Ensure that we compute the `mir_const_qualif` for constants at\n@@ -357,13 +357,8 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx Steal<Body<'tcx>> {\n-    if def.const_param_did.is_none() {\n-        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam {\n-                const_param_did,\n-                ..def\n-            });\n-        }\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n \n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n@@ -490,8 +485,8 @@ fn run_optimization_passes<'tcx>(\n \n fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     let did = did.expect_local();\n-    if let Some(param_did) = tcx.opt_const_param_of(did) {\n-        tcx.optimized_mir_of_const_arg((did, param_did))\n+    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+        tcx.optimized_mir_of_const_arg(def)\n     } else {\n         tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::unknown(did)))\n     }\n@@ -528,12 +523,6 @@ fn promoted_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n-    if def.const_param_did.is_none() {\n-        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n-            return tcx.promoted_mir_of_const_arg((def.did, param_did));\n-        }\n-    }\n-\n     if tcx.is_constructor(def.did.to_def_id()) {\n         return tcx.arena.alloc(IndexVec::new());\n     }"}, {"sha": "1e677f3d2aba82693e775972cefab82ce3a1dc38", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a86573c6b5c8b1ba179487f06e5f69a6f37e895/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=4a86573c6b5c8b1ba179487f06e5f69a6f37e895", "patch": "@@ -25,10 +25,8 @@ crate fn mir_built<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx ty::steal::Steal<Body<'tcx>> {\n-    if def.const_param_did.is_none() {\n-        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_built(ty::WithOptConstParam { const_param_did, ..def });\n-        }\n+    if let Some(def) = def.try_upgrade(tcx) {\n+        return tcx.mir_built(def);\n     }\n \n     tcx.alloc_steal_mir(mir_build(tcx, def))"}]}