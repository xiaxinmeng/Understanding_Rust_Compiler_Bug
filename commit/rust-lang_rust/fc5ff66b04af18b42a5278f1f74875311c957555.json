{"sha": "fc5ff66b04af18b42a5278f1f74875311c957555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNWZmNjZiMDRhZjE4YjQyYTUyNzhmMWY3NDg3NTMxMWM5NTc1NTU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-05T23:01:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-05T23:01:07Z"}, "message": "Rollup merge of #40927 - stjepang:docs-atomic-overflow-note, r=alexcrichton\n\nAdd a note about overflow for fetch_add/fetch_sub\n\nFixes #40916\nFixes #34618\n\nr? @steveklabnik", "tree": {"sha": "32ef9f788db8a4a7322ac183454cf6c233be0d07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ef9f788db8a4a7322ac183454cf6c233be0d07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5ff66b04af18b42a5278f1f74875311c957555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5ff66b04af18b42a5278f1f74875311c957555", "html_url": "https://github.com/rust-lang/rust/commit/fc5ff66b04af18b42a5278f1f74875311c957555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5ff66b04af18b42a5278f1f74875311c957555/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "html_url": "https://github.com/rust-lang/rust/commit/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2"}, {"sha": "2946c41c05c8bfbad04a431c4a4603127630367d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2946c41c05c8bfbad04a431c4a4603127630367d", "html_url": "https://github.com/rust-lang/rust/commit/2946c41c05c8bfbad04a431c4a4603127630367d"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "4e5ddfb541e8913aafa28a928b7a43f91be7fa25", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc5ff66b04af18b42a5278f1f74875311c957555/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5ff66b04af18b42a5278f1f74875311c957555/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=fc5ff66b04af18b42a5278f1f74875311c957555", "patch": "@@ -321,7 +321,7 @@ impl AtomicBool {\n         }\n     }\n \n-    /// Stores a value into the bool, returning the old value.\n+    /// Stores a value into the bool, returning the previous value.\n     ///\n     /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n     /// of this operation.\n@@ -732,7 +732,7 @@ impl<T> AtomicPtr<T> {\n         }\n     }\n \n-    /// Stores a value into the pointer, returning the old value.\n+    /// Stores a value into the pointer, returning the previous value.\n     ///\n     /// `swap` takes an [`Ordering`] argument which describes the memory ordering\n     /// of this operation.\n@@ -1047,7 +1047,7 @@ macro_rules! atomic_int {\n                 unsafe { atomic_store(self.v.get(), val, order); }\n             }\n \n-            /// Stores a value into the atomic integer, returning the old value.\n+            /// Stores a value into the atomic integer, returning the previous value.\n             ///\n             /// `swap` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n@@ -1201,7 +1201,9 @@ macro_rules! atomic_int {\n                 }\n             }\n \n-            /// Add to the current value, returning the previous value.\n+            /// Adds to the current value, returning the previous value.\n+            ///\n+            /// This operation wraps around on overflow.\n             ///\n             /// # Examples\n             ///\n@@ -1218,7 +1220,9 @@ macro_rules! atomic_int {\n                 unsafe { atomic_add(self.v.get(), val, order) }\n             }\n \n-            /// Subtract from the current value, returning the previous value.\n+            /// Subtracts from the current value, returning the previous value.\n+            ///\n+            /// This operation wraps around on overflow.\n             ///\n             /// # Examples\n             ///\n@@ -1235,7 +1239,12 @@ macro_rules! atomic_int {\n                 unsafe { atomic_sub(self.v.get(), val, order) }\n             }\n \n-            /// Bitwise and with the current value, returning the previous value.\n+            /// Bitwise \"and\" with the current value.\n+            ///\n+            /// Performs a bitwise \"and\" operation on the current value and the argument `val`, and\n+            /// sets the new value to the result.\n+            ///\n+            /// Returns the previous value.\n             ///\n             /// # Examples\n             ///\n@@ -1251,7 +1260,12 @@ macro_rules! atomic_int {\n                 unsafe { atomic_and(self.v.get(), val, order) }\n             }\n \n-            /// Bitwise or with the current value, returning the previous value.\n+            /// Bitwise \"or\" with the current value.\n+            ///\n+            /// Performs a bitwise \"or\" operation on the current value and the argument `val`, and\n+            /// sets the new value to the result.\n+            ///\n+            /// Returns the previous value.\n             ///\n             /// # Examples\n             ///\n@@ -1267,7 +1281,12 @@ macro_rules! atomic_int {\n                 unsafe { atomic_or(self.v.get(), val, order) }\n             }\n \n-            /// Bitwise xor with the current value, returning the previous value.\n+            /// Bitwise \"xor\" with the current value.\n+            ///\n+            /// Performs a bitwise \"xor\" operation on the current value and the argument `val`, and\n+            /// sets the new value to the result.\n+            ///\n+            /// Returns the previous value.\n             ///\n             /// # Examples\n             ///\n@@ -1415,7 +1434,7 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-/// Returns the old value (like __sync_fetch_and_add).\n+/// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -1428,7 +1447,7 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-/// Returns the old value (like __sync_fetch_and_sub).\n+/// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {"}]}