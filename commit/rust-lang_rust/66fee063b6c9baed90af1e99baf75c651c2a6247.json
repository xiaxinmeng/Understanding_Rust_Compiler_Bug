{"sha": "66fee063b6c9baed90af1e99baf75c651c2a6247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZmVlMDYzYjZjOWJhZWQ5MGFmMWU5OWJhZjc1YzY1MWMyYTYyNDc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-01T20:47:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-29T17:44:03Z"}, "message": "Use a newtype_index instead of a u32.", "tree": {"sha": "f3806436200de265b713494add61f00781e62856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3806436200de265b713494add61f00781e62856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66fee063b6c9baed90af1e99baf75c651c2a6247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66fee063b6c9baed90af1e99baf75c651c2a6247", "html_url": "https://github.com/rust-lang/rust/commit/66fee063b6c9baed90af1e99baf75c651c2a6247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66fee063b6c9baed90af1e99baf75c651c2a6247/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51c57fb7abf801a5bc29b3bb487c7eb5c7ffe9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51c57fb7abf801a5bc29b3bb487c7eb5c7ffe9d", "html_url": "https://github.com/rust-lang/rust/commit/f51c57fb7abf801a5bc29b3bb487c7eb5c7ffe9d"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "d190be24b60a5ab8fa25c2898e9614cf72beb0bb", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66fee063b6c9baed90af1e99baf75c651c2a6247/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fee063b6c9baed90af1e99baf75c651c2a6247/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=66fee063b6c9baed90af1e99baf75c651c2a6247", "patch": "@@ -11,7 +11,8 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n-    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n+    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet, LintStackIndex,\n+    COMMAND_LINE,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -50,15 +51,15 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n pub struct LintLevelsBuilder<'s> {\n     sess: &'s Session,\n     sets: LintLevelSets,\n-    id_to_set: FxHashMap<HirId, u32>,\n-    cur: u32,\n+    id_to_set: FxHashMap<HirId, LintStackIndex>,\n+    cur: LintStackIndex,\n     warn_about_weird_lints: bool,\n     store: &'s LintStore,\n     crate_attrs: &'s [ast::Attribute],\n }\n \n pub struct BuilderPush {\n-    prev: u32,\n+    prev: LintStackIndex,\n     pub changed: bool,\n }\n \n@@ -72,7 +73,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         let mut builder = LintLevelsBuilder {\n             sess,\n             sets: LintLevelSets::new(),\n-            cur: 0,\n+            cur: COMMAND_LINE,\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n             store,\n@@ -120,7 +121,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n-        self.sets.list.push(LintSet::CommandLine { specs });\n+        self.cur = self.sets.list.push(LintSet::CommandLine { specs });\n     }\n \n     /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n@@ -523,8 +524,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n         let prev = self.cur;\n         if !specs.is_empty() {\n-            self.cur = self.sets.list.len() as u32;\n-            self.sets.list.push(LintSet::Node { specs, parent: prev });\n+            self.cur = self.sets.list.push(LintSet::Node { specs, parent: prev });\n         }\n \n         BuilderPush { prev, changed: prev != self.cur }"}, {"sha": "bd1817684dc840f8f5250b1e6801a35080a8d28f", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66fee063b6c9baed90af1e99baf75c651c2a6247/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fee063b6c9baed90af1e99baf75c651c2a6247/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=66fee063b6c9baed90af1e99baf75c651c2a6247", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n+use rustc_index::vec::IndexVec;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     FutureIncompatibilityReason, Level, Lint, LintId,\n@@ -53,10 +54,17 @@ pub type LevelAndSource = (Level, LintLevelSource);\n \n #[derive(Debug, HashStable)]\n pub struct LintLevelSets {\n-    pub list: Vec<LintSet>,\n+    pub list: IndexVec<LintStackIndex, LintSet>,\n     pub lint_cap: Level,\n }\n \n+rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n+    pub struct LintStackIndex {\n+        const COMMAND_LINE = 0,\n+    }\n+}\n+\n #[derive(Debug, HashStable)]\n pub enum LintSet {\n     CommandLine {\n@@ -67,19 +75,19 @@ pub enum LintSet {\n \n     Node {\n         specs: FxHashMap<LintId, LevelAndSource>,\n-        parent: u32,\n+        parent: LintStackIndex,\n     },\n }\n \n impl LintLevelSets {\n     pub fn new() -> Self {\n-        LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n+        LintLevelSets { list: IndexVec::new(), lint_cap: Level::Forbid }\n     }\n \n     pub fn get_lint_level(\n         &self,\n         lint: &'static Lint,\n-        idx: u32,\n+        idx: LintStackIndex,\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n     ) -> LevelAndSource {\n@@ -122,7 +130,7 @@ impl LintLevelSets {\n     pub fn get_lint_id_level(\n         &self,\n         id: LintId,\n-        mut idx: u32,\n+        mut idx: LintStackIndex,\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n     ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n@@ -131,7 +139,7 @@ impl LintLevelSets {\n             }\n         }\n         loop {\n-            match self.list[idx as usize] {\n+            match self.list[idx] {\n                 LintSet::CommandLine { ref specs } => {\n                     if let Some(&(level, src)) = specs.get(&id) {\n                         return (Some(level), src);\n@@ -152,7 +160,7 @@ impl LintLevelSets {\n #[derive(Debug)]\n pub struct LintLevelMap {\n     pub sets: LintLevelSets,\n-    pub id_to_set: FxHashMap<HirId, u32>,\n+    pub id_to_set: FxHashMap<HirId, LintStackIndex>,\n }\n \n impl LintLevelMap {"}]}