{"sha": "f88a737a439f7801b7521c66c124ea5a44736e13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OGE3MzdhNDM5Zjc4MDFiNzUyMWM2NmMxMjRlYTVhNDQ3MzZlMTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T08:52:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T08:52:18Z"}, "message": "Mismatched arg count works for lambdas", "tree": {"sha": "02010047cd9d144c73f0c90a6d47ac8021b43d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02010047cd9d144c73f0c90a6d47ac8021b43d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f88a737a439f7801b7521c66c124ea5a44736e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f88a737a439f7801b7521c66c124ea5a44736e13", "html_url": "https://github.com/rust-lang/rust/commit/f88a737a439f7801b7521c66c124ea5a44736e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f88a737a439f7801b7521c66c124ea5a44736e13/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e932f33391bd78a43a06d275a4d2f93fe3d7e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e932f33391bd78a43a06d275a4d2f93fe3d7e8d", "html_url": "https://github.com/rust-lang/rust/commit/7e932f33391bd78a43a06d275a4d2f93fe3d7e8d"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "fd930eab1a58b250624389aadc6830a843630dda", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f88a737a439f7801b7521c66c124ea5a44736e13/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88a737a439f7801b7521c66c124ea5a44736e13/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=f88a737a439f7801b7521c66c124ea5a44736e13", "patch": "@@ -158,28 +158,32 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         let is_method_call = matches!(expr, Expr::MethodCall { .. });\n-        let (callee, args) = match expr {\n+        let (sig, args) = match expr {\n             Expr::Call { callee, args } => {\n                 let callee = &self.infer.type_of_expr[*callee];\n-                let (callable, _) = callee.as_callable()?;\n-\n-                (callable, args.clone())\n+                let sig = callee.callable_sig(db)?;\n+                (sig, args.clone())\n             }\n             Expr::MethodCall { receiver, args, .. } => {\n-                let callee = self.infer.method_resolution(call_id)?;\n                 let mut args = args.clone();\n                 args.insert(0, *receiver);\n-                (callee.into(), args)\n+\n+                // FIXME: note that we erase information about substs here. This\n+                // is not right, but, luckily, doesn't matter as we care only\n+                // about the number of params\n+                let callee = self.infer.method_resolution(call_id)?;\n+                let sig = db.callable_item_signature(callee.into()).value;\n+\n+                (sig, args)\n             }\n             _ => return None,\n         };\n \n-        let sig = db.callable_item_signature(callee);\n-        if sig.value.is_varargs {\n+        if sig.is_varargs {\n             return None;\n         }\n \n-        let params = sig.value.params();\n+        let params = sig.params();\n \n         let mut param_count = params.len();\n         let mut arg_count = args.len();\n@@ -542,4 +546,20 @@ fn f() {\n         \"#,\n         )\n     }\n+\n+    #[test]\n+    fn arg_count_lambda() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    let f = |()| ();\n+    f();\n+  //^^^ Expected 1 argument, found 0\n+    f(());\n+    f((), ());\n+  //^^^^^^^^^ Expected 1 argument, found 2\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "1f6626c46fe1d8e926972791317f243931e02847", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f88a737a439f7801b7521c66c124ea5a44736e13/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88a737a439f7801b7521c66c124ea5a44736e13/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=f88a737a439f7801b7521c66c124ea5a44736e13", "patch": "@@ -807,7 +807,7 @@ impl Ty {\n         }\n     }\n \n-    fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n+    pub(crate) fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::FnPtr { is_varargs, .. } => {"}]}