{"sha": "fdd6af14a1006c196c5859904f2096ee4e32de85", "node_id": "C_kwDOAAsO6NoAKGZkZDZhZjE0YTEwMDZjMTk2YzU4NTk5MDRmMjA5NmVlNGUzMmRlODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-15T14:23:30Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-15T14:23:30Z"}, "message": "rustdoc: simplify some & ref erences", "tree": {"sha": "fb9c733488e49d99dc0e7e4603e92bb995149ae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9c733488e49d99dc0e7e4603e92bb995149ae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd6af14a1006c196c5859904f2096ee4e32de85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd6af14a1006c196c5859904f2096ee4e32de85", "html_url": "https://github.com/rust-lang/rust/commit/fdd6af14a1006c196c5859904f2096ee4e32de85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd6af14a1006c196c5859904f2096ee4e32de85/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb36fe5455ee56cdeec0a5d12015ac7ae77a6a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb36fe5455ee56cdeec0a5d12015ac7ae77a6a7", "html_url": "https://github.com/rust-lang/rust/commit/bbb36fe5455ee56cdeec0a5d12015ac7ae77a6a7"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "a302750aa1aea341359cb95ad12d718bc501eec2", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=fdd6af14a1006c196c5859904f2096ee4e32de85", "patch": "@@ -402,15 +402,13 @@ where\n                     bound_params: Vec::new(),\n                 })\n             })\n-            .chain(\n-                lifetime_to_bounds.into_iter().filter(|&(_, ref bounds)| !bounds.is_empty()).map(\n-                    |(lifetime, bounds)| {\n-                        let mut bounds_vec = bounds.into_iter().collect();\n-                        self.sort_where_bounds(&mut bounds_vec);\n-                        WherePredicate::RegionPredicate { lifetime, bounds: bounds_vec }\n-                    },\n-                ),\n-            )\n+            .chain(lifetime_to_bounds.into_iter().filter(|(_, bounds)| !bounds.is_empty()).map(\n+                |(lifetime, bounds)| {\n+                    let mut bounds_vec = bounds.into_iter().collect();\n+                    self.sort_where_bounds(&mut bounds_vec);\n+                    WherePredicate::RegionPredicate { lifetime, bounds: bounds_vec }\n+                },\n+            ))\n             .collect()\n     }\n "}, {"sha": "dbbc25739aa078fa002422c3439b1376c6224283", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=fdd6af14a1006c196c5859904f2096ee4e32de85", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> ThinVec<WP\n \n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates.\n-    equalities.retain(|&(ref lhs, ref rhs, ref bound_params)| {\n+    equalities.retain(|(lhs, rhs, bound_params)| {\n         let Some((ty, trait_did, name)) = lhs.projection() else { return true; };\n         let Some((bounds, _)) = tybounds.get_mut(ty) else { return true };\n         let bound_params = bound_params"}, {"sha": "1c78c5b8d280bce1edaf0a8ffcb50a641adcdba7", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=fdd6af14a1006c196c5859904f2096ee4e32de85", "patch": "@@ -296,7 +296,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             // for where the type was defined. On the other\n                             // hand, `paths` always has the right\n                             // information if present.\n-                            Some(&(ref fqp, _)) => Some(&fqp[..fqp.len() - 1]),\n+                            Some((fqp, _)) => Some(&fqp[..fqp.len() - 1]),\n                             None => None,\n                         };\n                         ((did, path), true)"}, {"sha": "d3dc4065dfc7230d98cc259d7853633a4f2236a4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fdd6af14a1006c196c5859904f2096ee4e32de85", "patch": "@@ -962,7 +962,7 @@ fn fmt_type<'cx>(\n         clean::Tuple(ref typs) => {\n             match &typs[..] {\n                 &[] => primitive_link(f, PrimitiveType::Unit, \"()\", cx),\n-                &[ref one] => {\n+                [one] => {\n                     if let clean::Generic(name) = one {\n                         primitive_link(f, PrimitiveType::Tuple, &format!(\"({name},)\"), cx)\n                     } else {"}, {"sha": "5b0caac099bc3010c7cb9873dc7a8dba990e3d80", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6af14a1006c196c5859904f2096ee4e32de85/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=fdd6af14a1006c196c5859904f2096ee4e32de85", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn build_index<'tcx>(\n     // Attach all orphan items to the type's definition if the type\n     // has since been learned.\n     for &OrphanImplItem { parent, ref item, ref impl_generics } in &cache.orphan_impl_items {\n-        if let Some(&(ref fqp, _)) = cache.paths.get(&parent) {\n+        if let Some((fqp, _)) = cache.paths.get(&parent) {\n             let desc = item\n                 .doc_value()\n                 .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(cache)));\n@@ -573,7 +573,7 @@ fn get_fn_inputs_and_outputs<'tcx>(\n     let decl = &func.decl;\n \n     let combined_generics;\n-    let (self_, generics) = if let Some(&(ref impl_self, ref impl_generics)) = impl_generics {\n+    let (self_, generics) = if let Some((impl_self, impl_generics)) = impl_generics {\n         match (impl_generics.is_empty(), func.generics.is_empty()) {\n             (true, _) => (Some(impl_self), &func.generics),\n             (_, true) => (Some(impl_self), impl_generics),"}]}