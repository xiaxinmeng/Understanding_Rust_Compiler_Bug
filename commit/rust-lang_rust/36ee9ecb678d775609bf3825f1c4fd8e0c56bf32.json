{"sha": "36ee9ecb678d775609bf3825f1c4fd8e0c56bf32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZWU5ZWNiNjc4ZDc3NTYwOWJmMzgyNWYxYzRmZDhlMGM1NmJmMzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T10:51:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T11:30:39Z"}, "message": "Cleanup early return assist", "tree": {"sha": "b5e467df6bf55bcd6fcdb849e5422f3720ec7006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5e467df6bf55bcd6fcdb849e5422f3720ec7006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32", "html_url": "https://github.com/rust-lang/rust/commit/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "html_url": "https://github.com/rust-lang/rust/commit/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "8f30dc586088050c555ad66a55dd03f777d6a3e3", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=36ee9ecb678d775609bf3825f1c4fd8e0c56bf32", "patch": "@@ -10,6 +10,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n+    assists::invert_if::invert_boolean_expression,\n     AssistId,\n };\n \n@@ -99,9 +100,13 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n         let new_block = match if_let_pat {\n             None => {\n                 // If.\n-                let early_expression = &(early_expression.syntax().to_string() + \";\");\n-                let new_expr = if_indent_level\n-                    .increase_indent(make::if_expression(cond_expr, early_expression));\n+                let new_expr = {\n+                    let then_branch =\n+                        make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n+                    let cond = invert_boolean_expression(cond_expr);\n+                    let e = make::expr_if(cond, then_branch);\n+                    if_indent_level.increase_indent(e)\n+                };\n                 replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n             }\n             Some((path, bound_ident)) => {"}, {"sha": "862eb11728cd491527f71e2220b8e56e8ec6ac52", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ee9ecb678d775609bf3825f1c4fd8e0c56bf32/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=36ee9ecb678d775609bf3825f1c4fd8e0c56bf32", "patch": "@@ -33,6 +33,21 @@ pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordF\n     }\n }\n \n+pub fn block_expr(\n+    stmts: impl IntoIterator<Item = ast::Stmt>,\n+    tail_expr: Option<ast::Expr>,\n+) -> ast::BlockExpr {\n+    let mut text = \"{\\n\".to_string();\n+    for stmt in stmts.into_iter() {\n+        text += &format!(\"    {}\\n\", stmt.syntax());\n+    }\n+    if let Some(tail_expr) = tail_expr {\n+        text += &format!(\"    {}\\n\", tail_expr.syntax())\n+    }\n+    text += \"}\";\n+    ast_from_text(&format!(\"fn f() {}\", text))\n+}\n+\n pub fn block_from_expr(e: ast::Expr) -> ast::Block {\n     return from_text(&format!(\"{{ {} }}\", e.syntax()));\n \n@@ -62,6 +77,9 @@ pub fn expr_return() -> ast::Expr {\n pub fn expr_match(expr: ast::Expr, match_arm_list: ast::MatchArmList) -> ast::Expr {\n     expr_from_text(&format!(\"match {} {}\", expr.syntax(), match_arm_list.syntax()))\n }\n+pub fn expr_if(condition: ast::Expr, then_branch: ast::BlockExpr) -> ast::Expr {\n+    expr_from_text(&format!(\"if {} {}\", condition.syntax(), then_branch.syntax()))\n+}\n pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n     let token = token(op);\n     expr_from_text(&format!(\"{}{}\", token, expr.syntax()))\n@@ -162,21 +180,16 @@ pub fn where_clause(preds: impl IntoIterator<Item = ast::WherePred>) -> ast::Whe\n     }\n }\n \n-pub fn if_expression(condition: ast::Expr, statement: &str) -> ast::IfExpr {\n-    ast_from_text(&format!(\n-        \"fn f() {{ if !{} {{\\n    {}\\n}}\\n}}\",\n-        condition.syntax().text(),\n-        statement\n-    ))\n-}\n-\n pub fn let_stmt(pattern: ast::Pat, initializer: Option<ast::Expr>) -> ast::LetStmt {\n     let text = match initializer {\n         Some(it) => format!(\"let {} = {};\", pattern.syntax(), it.syntax()),\n         None => format!(\"let {};\", pattern.syntax()),\n     };\n     ast_from_text(&format!(\"fn f() {{ {} }}\", text))\n }\n+pub fn expr_stmt(expr: ast::Expr) -> ast::ExprStmt {\n+    ast_from_text(&format!(\"fn f() {{ {}; }}\", expr.syntax()))\n+}\n \n pub fn token(kind: SyntaxKind) -> SyntaxToken {\n     tokens::SOURCE_FILE"}]}