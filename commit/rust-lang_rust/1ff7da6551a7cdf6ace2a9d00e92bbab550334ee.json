{"sha": "1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZjdkYTY1NTFhN2NkZjZhY2UyYTlkMDBlOTJiYmFiNTUwMzM0ZWU=", "commit": {"author": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2020-09-18T16:17:51Z"}, "committer": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2020-09-18T16:17:51Z"}, "message": "Move `slice::check_range` to `RangeBounds`", "tree": {"sha": "83dfb35cedd5a32e6044bfb12c03d38a907b5b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83dfb35cedd5a32e6044bfb12c03d38a907b5b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "html_url": "https://github.com/rust-lang/rust/commit/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/comments", "author": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c69266c0697b0c0b34abea62cba1a1d3c59c90c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c69266c0697b0c0b34abea62cba1a1d3c59c90c", "html_url": "https://github.com/rust-lang/rust/commit/2c69266c0697b0c0b34abea62cba1a1d3c59c90c"}], "stats": {"total": 205, "additions": 104, "deletions": 101}, "files": [{"sha": "0cb8d7a891a0d53d27e7fa5c3c8bedf6841b4b2d", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -1089,7 +1089,7 @@ impl<T> VecDeque<T> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        let Range { start, end } = slice::check_range(self.len(), range);\n+        let Range { start, end } = range.for_length(self.len());\n         let tail = self.wrap_add(self.tail, start);\n         let head = self.wrap_add(self.tail, end);\n         (tail, head)"}, {"sha": "002c770277970217b70b899a54374966f58a00e2", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -116,11 +116,11 @@\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n+#![feature(range_bounds_for_length)]\n #![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![feature(min_specialization)]\n-#![feature(slice_check_range)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n #![feature(staged_api)]"}, {"sha": "93501ef40852ae7ab6a0b820be94e3c4ac958053", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -91,8 +91,6 @@ use crate::borrow::ToOwned;\n use crate::boxed::Box;\n use crate::vec::Vec;\n \n-#[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n-pub use core::slice::check_range;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use core::slice::ArrayChunks;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]"}, {"sha": "26124e301115a807470eb5486d50d48e26408875", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -49,7 +49,6 @@ use core::iter::{FromIterator, FusedIterator};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Add, AddAssign, Index, IndexMut, Range, RangeBounds};\n use core::ptr;\n-use core::slice;\n use core::str::{lossy, pattern::Pattern};\n \n use crate::borrow::{Cow, ToOwned};\n@@ -1507,14 +1506,14 @@ impl String {\n         // of the vector version. The data is just plain bytes.\n         // Because the range removal happens in Drop, if the Drain iterator is leaked,\n         // the removal will not happen.\n-        let Range { start, end } = slice::check_range(self.len(), range);\n+        let Range { start, end } = range.for_length(self.len());\n         assert!(self.is_char_boundary(start));\n         assert!(self.is_char_boundary(end));\n \n         // Take out two simultaneous borrows. The &mut String won't be accessed\n         // until iteration is over, in Drop.\n         let self_ptr = self as *mut _;\n-        // SAFETY: `check_range` and `is_char_boundary` do the appropriate bounds checks.\n+        // SAFETY: `for_length` and `is_char_boundary` do the appropriate bounds checks.\n         let chars_iter = unsafe { self.get_unchecked(start..end) }.chars();\n \n         Drain { start, end, iter: chars_iter, string: self_ptr }"}, {"sha": "e668b17c46c0eeda38b5f37b5e10f68d53804c3c", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -1312,7 +1312,7 @@ impl<T> Vec<T> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let Range { start, end } = slice::check_range(len, range);\n+        let Range { start, end } = range.for_length(len);\n \n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked"}, {"sha": "6ad55786176c15ddd0a6fe9495cb0b98a468a096", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -1,5 +1,9 @@\n use crate::fmt;\n use crate::hash::Hash;\n+use crate::slice::index::{\n+    slice_end_index_len_fail, slice_end_index_overflow_fail, slice_index_order_fail,\n+    slice_start_index_overflow_fail,\n+};\n \n /// An unbounded range (`..`).\n ///\n@@ -729,6 +733,84 @@ pub trait RangeBounds<T: ?Sized> {\n             Unbounded => true,\n         })\n     }\n+\n+    /// Performs bounds-checking of this range.\n+    ///\n+    /// The returned [`Range`] is safe to pass to [`slice::get_unchecked`] and\n+    /// [`slice::get_unchecked_mut`] for slices of the given length.\n+    ///\n+    /// [`slice::get_unchecked`]: crate::slice::get_unchecked\n+    /// [`slice::get_unchecked_mut`]: crate::slice::get_unchecked_mut\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the range would be out of bounds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_bounds_for_length)]\n+    ///\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(1..2, (1..2).for_length(v.len()));\n+    /// assert_eq!(0..2, (..2).for_length(v.len()));\n+    /// assert_eq!(1..3, (1..).for_length(v.len()));\n+    /// ```\n+    ///\n+    /// Panics when [`Index::index`] would panic:\n+    ///\n+    /// ```should_panic\n+    /// #![feature(range_bounds_for_length)]\n+    ///\n+    /// (2..1).for_length(3);\n+    /// ```\n+    ///\n+    /// ```should_panic\n+    /// #![feature(range_bounds_for_length)]\n+    ///\n+    /// (1..4).for_length(3);\n+    /// ```\n+    ///\n+    /// ```should_panic\n+    /// #![feature(range_bounds_for_length)]\n+    ///\n+    /// (1..=usize::MAX).for_length(3);\n+    /// ```\n+    ///\n+    /// [`Index::index`]: crate::ops::Index::index\n+    #[track_caller]\n+    #[unstable(feature = \"range_bounds_for_length\", issue = \"76393\")]\n+    fn for_length(self, len: usize) -> Range<usize>\n+    where\n+        Self: RangeBounds<usize>,\n+    {\n+        let start: Bound<&usize> = self.start_bound();\n+        let start = match start {\n+            Bound::Included(&start) => start,\n+            Bound::Excluded(start) => {\n+                start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n+            }\n+            Bound::Unbounded => 0,\n+        };\n+\n+        let end: Bound<&usize> = self.end_bound();\n+        let end = match end {\n+            Bound::Included(end) => {\n+                end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n+            }\n+            Bound::Excluded(&end) => end,\n+            Bound::Unbounded => len,\n+        };\n+\n+        if start > end {\n+            slice_index_order_fail(start, end);\n+        }\n+        if end > len {\n+            slice_end_index_len_fail(end, len);\n+        }\n+\n+        Range { start, end }\n+    }\n }\n \n use self::Bound::{Excluded, Included, Unbounded};"}, {"sha": "f1f21c1d24b0b5295d1943456818f8092fb26e3c", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 5, "deletions": 78, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -1,6 +1,6 @@\n //! Indexing implementations for `[T]`.\n \n-use crate::ops::{self, Bound, Range, RangeBounds};\n+use crate::ops;\n use crate::ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -37,104 +37,31 @@ fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(super) fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+pub(crate) fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(super) fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+pub(crate) fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(super) fn slice_start_index_overflow_fail() -> ! {\n+pub(crate) fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n #[inline(never)]\n #[cold]\n #[track_caller]\n-pub(super) fn slice_end_index_overflow_fail() -> ! {\n+pub(crate) fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n-/// Performs bounds-checking of the given range.\n-/// The returned [`Range`] is safe to pass to [`get_unchecked`] and [`get_unchecked_mut`]\n-/// for slices of the given length.\n-///\n-/// [`get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n-/// [`get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n-///\n-/// # Panics\n-///\n-/// Panics if the range is out of bounds.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// #![feature(slice_check_range)]\n-/// use std::slice;\n-///\n-/// let v = [10, 40, 30];\n-/// assert_eq!(1..2, slice::check_range(v.len(), 1..2));\n-/// assert_eq!(0..2, slice::check_range(v.len(), ..2));\n-/// assert_eq!(1..3, slice::check_range(v.len(), 1..));\n-/// ```\n-///\n-/// Panics when [`Index::index`] would panic:\n-///\n-/// ```should_panic\n-/// #![feature(slice_check_range)]\n-///\n-/// std::slice::check_range(3, 2..1);\n-/// ```\n-///\n-/// ```should_panic\n-/// #![feature(slice_check_range)]\n-///\n-/// std::slice::check_range(3, 1..4);\n-/// ```\n-///\n-/// ```should_panic\n-/// #![feature(slice_check_range)]\n-///\n-/// std::slice::check_range(3, 1..=usize::MAX);\n-/// ```\n-///\n-/// [`Index::index`]: ops::Index::index\n-#[track_caller]\n-#[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n-pub fn check_range<R: RangeBounds<usize>>(len: usize, range: R) -> Range<usize> {\n-    let start = match range.start_bound() {\n-        Bound::Included(&start) => start,\n-        Bound::Excluded(start) => {\n-            start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())\n-        }\n-        Bound::Unbounded => 0,\n-    };\n-\n-    let end = match range.end_bound() {\n-        Bound::Included(end) => {\n-            end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())\n-        }\n-        Bound::Excluded(&end) => end,\n-        Bound::Unbounded => len,\n-    };\n-\n-    if start > end {\n-        slice_index_order_fail(start, end);\n-    }\n-    if end > len {\n-        slice_end_index_len_fail(end, len);\n-    }\n-\n-    Range { start, end }\n-}\n-\n mod private_slice_index {\n     use super::ops;\n     #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"}, {"sha": "5ad57b23c4a40af72278fda69687820afc70dbab", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -29,7 +29,7 @@ pub mod memchr;\n \n mod ascii;\n mod cmp;\n-mod index;\n+pub(crate) mod index;\n mod iter;\n mod raw;\n mod rotate;\n@@ -75,9 +75,6 @@ pub use sort::heapsort;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use index::SliceIndex;\n \n-#[unstable(feature = \"slice_check_range\", issue = \"76393\")]\n-pub use index::check_range;\n-\n #[lang = \"slice\"]\n #[cfg(not(test))]\n impl<T> [T] {\n@@ -2758,7 +2755,7 @@ impl<T> [T] {\n     where\n         T: Copy,\n     {\n-        let Range { start: src_start, end: src_end } = check_range(self.len(), src);\n+        let Range { start: src_start, end: src_end } = src.for_length(self.len());\n         let count = src_end - src_start;\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         // SAFETY: the conditions for `ptr::copy` have all been checked above,"}, {"sha": "47a1bd8dff1b8218773cfda909e08fe945d9a12b", "filename": "src/doc/unstable-book/src/library-features/range-bounds-for-length.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-for-length.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ff7da6551a7cdf6ace2a9d00e92bbab550334ee/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-for-length.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-for-length.md?ref=1ff7da6551a7cdf6ace2a9d00e92bbab550334ee", "patch": "@@ -0,0 +1,10 @@\n+# `range_bounds_for_length`\n+\n+The tracking issue for this feature is: [#76393]\n+\n+------------------------\n+\n+This adds [`RangeBounds::for_length`].\n+\n+[#76393]: https://github.com/rust-lang/rust/issues/76393\n+[`RangeBounds::for_length`]: https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html#method.for_length"}, {"sha": "83e5738cf5412ef48433fbe8be9f129c95dad872", "filename": "src/doc/unstable-book/src/library-features/slice-check-range.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c69266c0697b0c0b34abea62cba1a1d3c59c90c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-check-range.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c69266c0697b0c0b34abea62cba1a1d3c59c90c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-check-range.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-check-range.md?ref=2c69266c0697b0c0b34abea62cba1a1d3c59c90c", "patch": "@@ -1,10 +0,0 @@\n-# `slice_check_range`\n-\n-The tracking issue for this feature is: [#76393]\n-\n-------------------------\n-\n-This adds [`slice::check_range`].\n-\n-[#76393]: https://github.com/rust-lang/rust/issues/76393\n-[`slice::check_range`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.check_range"}]}