{"sha": "f9300871595196f31305dacd95d53245fd6c0214", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzAwODcxNTk1MTk2ZjMxMzA1ZGFjZDk1ZDUzMjQ1ZmQ2YzAyMTQ=", "commit": {"author": {"name": "Kazuyoshi Kato", "email": "kato.kazuyoshi@gmail.com", "date": "2018-10-11T05:54:04Z"}, "committer": {"name": "Kazuyoshi Kato", "email": "kato.kazuyoshi@gmail.com", "date": "2018-10-11T05:55:12Z"}, "message": "Fix slice's benchmarks\n\nFixes #54013.", "tree": {"sha": "4a353e534a48ac754b23b45f92b9093d31763a8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a353e534a48ac754b23b45f92b9093d31763a8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9300871595196f31305dacd95d53245fd6c0214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9300871595196f31305dacd95d53245fd6c0214", "html_url": "https://github.com/rust-lang/rust/commit/f9300871595196f31305dacd95d53245fd6c0214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9300871595196f31305dacd95d53245fd6c0214/comments", "author": {"login": "kzys", "id": 19111, "node_id": "MDQ6VXNlcjE5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/19111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzys", "html_url": "https://github.com/kzys", "followers_url": "https://api.github.com/users/kzys/followers", "following_url": "https://api.github.com/users/kzys/following{/other_user}", "gists_url": "https://api.github.com/users/kzys/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzys/subscriptions", "organizations_url": "https://api.github.com/users/kzys/orgs", "repos_url": "https://api.github.com/users/kzys/repos", "events_url": "https://api.github.com/users/kzys/events{/privacy}", "received_events_url": "https://api.github.com/users/kzys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kzys", "id": 19111, "node_id": "MDQ6VXNlcjE5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/19111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzys", "html_url": "https://github.com/kzys", "followers_url": "https://api.github.com/users/kzys/followers", "following_url": "https://api.github.com/users/kzys/following{/other_user}", "gists_url": "https://api.github.com/users/kzys/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzys/subscriptions", "organizations_url": "https://api.github.com/users/kzys/orgs", "repos_url": "https://api.github.com/users/kzys/repos", "events_url": "https://api.github.com/users/kzys/events{/privacy}", "received_events_url": "https://api.github.com/users/kzys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42c510f2f952a6eba80e6448b46e83bfcc04e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42c510f2f952a6eba80e6448b46e83bfcc04e44", "html_url": "https://github.com/rust-lang/rust/commit/f42c510f2f952a6eba80e6448b46e83bfcc04e44"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "490320f57cbf79bd9ca681285f9f504764679095", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f9300871595196f31305dacd95d53245fd6c0214/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9300871595196f31305dacd95d53245fd6c0214/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=f9300871595196f31305dacd95d53245fd6c0214", "patch": "@@ -13,6 +13,7 @@ use std::mem;\n use std::ptr;\n \n use rand::{Rng, SeedableRng, XorShiftRng};\n+use rand::distributions::{Standard, Alphanumeric};\n use test::{Bencher, black_box};\n \n #[bench]\n@@ -192,18 +193,20 @@ fn gen_descending(len: usize) -> Vec<u64> {\n     (0..len as u64).rev().collect()\n }\n \n+const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n+\n fn gen_random(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n-    rng.gen_iter::<u64>().take(len).collect()\n+    let mut rng = XorShiftRng::from_seed(SEED);\n+    rng.sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_random_bytes(len: usize) -> Vec<u8> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n-    rng.gen_iter::<u8>().take(len).collect()\n+    let mut rng = XorShiftRng::from_seed(SEED);\n+    rng.sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n+    let mut rng = XorShiftRng::from_seed(SEED);\n     let mut v = gen_ascending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -214,7 +217,7 @@ fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n }\n \n fn gen_mostly_descending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n+    let mut rng = XorShiftRng::from_seed(SEED);\n     let mut v = gen_descending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -225,18 +228,18 @@ fn gen_mostly_descending(len: usize) -> Vec<u64> {\n }\n \n fn gen_strings(len: usize) -> Vec<String> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n+    let mut rng = XorShiftRng::from_seed(SEED);\n     let mut v = vec![];\n     for _ in 0..len {\n         let n = rng.gen::<usize>() % 20 + 1;\n-        v.push(rng.gen_ascii_chars().take(n).collect());\n+        v.push(rng.sample_iter(&Alphanumeric).take(n).collect());\n     }\n     v\n }\n \n fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n-    rng.gen_iter().map(|x| [x; 16]).take(len).collect()\n+    let mut rng = XorShiftRng::from_seed(SEED);\n+    rng.sample_iter(&Standard).map(|x| [x; 16]).take(len).collect()\n }\n \n macro_rules! sort {"}]}