{"sha": "da9467d1470a8f81519d5e428d8cec90950007f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOTQ2N2QxNDcwYThmODE1MTlkNWU0MjhkOGNlYzkwOTUwMDA3Zjk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-28T21:11:00Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:16Z"}, "message": "Handle sub-typing in chalk-engine", "tree": {"sha": "fb3883ec15ea6158502b8a9d5231d89de814580e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3883ec15ea6158502b8a9d5231d89de814580e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9467d1470a8f81519d5e428d8cec90950007f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9467d1470a8f81519d5e428d8cec90950007f9", "html_url": "https://github.com/rust-lang/rust/commit/da9467d1470a8f81519d5e428d8cec90950007f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9467d1470a8f81519d5e428d8cec90950007f9/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6314a0d6b269de822bd2eeb7a0fca2798de51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6314a0d6b269de822bd2eeb7a0fca2798de51c", "html_url": "https://github.com/rust-lang/rust/commit/ba6314a0d6b269de822bd2eeb7a0fca2798de51c"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "f19238140b8069008cbee0814140de7325be884a", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -273,7 +273,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.8.0\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2067,7 +2067,7 @@ dependencies = [\n  \"backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -2640,7 +2640,7 @@ name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -3403,7 +3403,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d8dfe3adeb30f7938e6c1dd5327f29235d8ada3e898aeb08c343005ec2915a2\"\n \"checksum cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f159dfd43363c4d08055a07703eb7a3406b0dac4d0584d96965a3262db3c9d16\"\n \"checksum cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"082bb9b28e00d3c9d39cc03e64ce4cea0f1bb9b3fde493f0cbc008472d22bdf4\"\n-\"checksum chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6749eb72e7d4355d944a99f15fbaea701b978c18c5e184a025fcde942b0c9779\"\n+\"checksum chalk-engine 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17ec698a6f053a23bfbe646d9f2fde4b02abc19125595270a99e6f44ae0bdd1a\"\n \"checksum chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"295635afd6853aa9f20baeb7f0204862440c0fe994c5a253d5f479dac41d047e\"\n \"checksum chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45912881121cb26fad7c38c17ba7daa18764771836b34fab7d3fbd93ed633878\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\""}, {"sha": "8604efbc5742dd4ae0d0898b4976079d0d9169bc", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -30,7 +30,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.6\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n-chalk-engine = { version = \"0.8.0\", default-features=false }\n+chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n "}, {"sha": "65b8f04e30a12f2c51a8955315a5c8973eebdfa5", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -1195,6 +1195,10 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n                 quantifier.hash_stable(hcx, hasher);\n                 goal.hash_stable(hcx, hasher);\n             },\n+            Subtype(a, b) => {\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher);\n+            }\n             CannotProve => { },\n         }\n     }"}, {"sha": "49bd04782b28e66a8fefdc66b00e85f2abe74d70", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -324,6 +324,7 @@ pub enum GoalKind<'tcx> {\n     Not(Goal<'tcx>),\n     DomainGoal(DomainGoal<'tcx>),\n     Quantified(QuantifierKind, ty::Binder<Goal<'tcx>>),\n+    Subtype(Ty<'tcx>, Ty<'tcx>),\n     CannotProve,\n }\n "}, {"sha": "ae2b83e105773ac3c31b8df5cc83c3e842edf339", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -395,6 +395,7 @@ impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n \n                 Ok(())\n             }\n+            Subtype(a, b) => write!(fmt, \"{} <: {}\", a, b),\n             CannotProve => write!(fmt, \"CannotProve\"),\n         }\n     }\n@@ -668,6 +669,7 @@ EnumLiftImpl! {\n         (traits::GoalKind::Not)(goal),\n         (traits::GoalKind::DomainGoal)(domain_goal),\n         (traits::GoalKind::Quantified)(kind, goal),\n+        (traits::GoalKind::Subtype)(a, b),\n         (traits::GoalKind::CannotProve),\n     }\n }\n@@ -864,6 +866,7 @@ EnumTypeFoldableImpl! {\n         (traits::GoalKind::Not)(goal),\n         (traits::GoalKind::DomainGoal)(domain_goal),\n         (traits::GoalKind::Quantified)(qkind, goal),\n+        (traits::GoalKind::Subtype)(a, b),\n         (traits::GoalKind::CannotProve),\n     }\n }"}, {"sha": "bf946d39806ecd1991791856a4fc0a91f7387907", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -17,5 +17,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-chalk-engine = { version = \"0.8.0\", default-features=false }\n+chalk-engine = { version = \"0.9.0\", default-features=false }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "303920b5842c969636ad962d4da249299f3e3b02", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -116,6 +116,8 @@ impl context::Context for ChalkArenas<'tcx> {\n \n     type UnificationResult = UnificationResult<'tcx>;\n \n+    type Variance = ty::Variance;\n+\n     fn goal_in_environment(\n         env: &Environment<'tcx>,\n         goal: Goal<'tcx>,\n@@ -332,6 +334,11 @@ impl context::InferenceTable<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n             GoalKind::DomainGoal(d) => HhGoal::DomainGoal(d),\n             GoalKind::Quantified(QuantifierKind::Universal, binder) => HhGoal::ForAll(binder),\n             GoalKind::Quantified(QuantifierKind::Existential, binder) => HhGoal::Exists(binder),\n+            GoalKind::Subtype(a, b) => HhGoal::Unify(\n+                ty::Variance::Covariant,\n+                a.into(),\n+                b.into()\n+            ),\n             GoalKind::CannotProve => HhGoal::CannotProve,\n         }\n     }\n@@ -444,11 +451,13 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n     fn unify_parameters(\n         &mut self,\n         environment: &Environment<'tcx>,\n+        variance: ty::Variance,\n         a: &Kind<'tcx>,\n         b: &Kind<'tcx>,\n     ) -> Fallible<UnificationResult<'tcx>> {\n         self.infcx.commit_if_ok(|_| {\n-            unify(self.infcx, *environment, a, b).map_err(|_| chalk_engine::fallible::NoSolution)\n+            unify(self.infcx, *environment, variance, a, b)\n+                .map_err(|_| chalk_engine::fallible::NoSolution)\n         })\n     }\n \n@@ -673,6 +682,13 @@ crate fn evaluate_goal<'a, 'tcx>(\n                 GoalKind::DomainGoal(DomainGoal::WellFormed(WellFormed::Ty(ty)))\n             ),\n \n+            ty::Predicate::Subtype(predicate) => tcx.mk_goal(\n+                GoalKind::Quantified(\n+                    QuantifierKind::Universal,\n+                    predicate.map_bound(|pred| tcx.mk_goal(GoalKind::Subtype(pred.a, pred.b)))\n+                )\n+            ),\n+\n             other => tcx.mk_goal(\n                 GoalKind::from_poly_domain_goal(other.lower(), tcx)\n             ),"}, {"sha": "f7bbf621c09734bff8d46d4a09410aac4581590b", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -51,8 +51,13 @@ impl context::ResolventOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n                 ).0,\n             };\n \n-            let result = unify(self.infcx, *environment, goal, &consequence)\n-                .map_err(|_| NoSolution)?;\n+            let result = unify(\n+                self.infcx,\n+                *environment,\n+                ty::Variance::Invariant,\n+                goal,\n+                &consequence\n+            ).map_err(|_| NoSolution)?;\n \n             let mut ex_clause = ExClause {\n                 subst: subst.clone(),\n@@ -139,7 +144,7 @@ impl AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n         );\n \n         super::into_ex_clause(\n-            unify(self.infcx, self.environment, answer_param, pending)?,\n+            unify(self.infcx, self.environment, ty::Variance::Invariant, answer_param, pending)?,\n             &mut self.ex_clause\n         );\n "}, {"sha": "abb4812734123c5d9b35dff708bbcc14e270132a", "filename": "src/librustc_traits/chalk_context/unify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9467d1470a8f81519d5e428d8cec90950007f9/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs?ref=da9467d1470a8f81519d5e428d8cec90950007f9", "patch": "@@ -13,6 +13,7 @@ crate struct UnificationResult<'tcx> {\n crate fn unify<'me, 'gcx, 'tcx, T: Relate<'tcx>>(\n     infcx: &'me InferCtxt<'me, 'gcx, 'tcx>,\n     environment: Environment<'tcx>,\n+    variance: ty::Variance,\n     a: &T,\n     b: &T\n ) -> RelateResult<'tcx, UnificationResult<'tcx>> {\n@@ -30,7 +31,7 @@ crate fn unify<'me, 'gcx, 'tcx, T: Relate<'tcx>>(\n     TypeRelating::new(\n         infcx,\n         &mut delegate,\n-        ty::Variance::Invariant\n+        variance\n     ).relate(a, b)?;\n \n     debug!(\"unify: goals = {:?}, constraints = {:?}\", delegate.goals, delegate.constraints);"}]}