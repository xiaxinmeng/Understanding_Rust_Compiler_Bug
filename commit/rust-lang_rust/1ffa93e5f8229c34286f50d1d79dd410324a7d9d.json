{"sha": "1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZmE5M2U1ZjgyMjljMzQyODZmNTBkMWQ3OWRkNDEwMzI0YTdkOWQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-05T08:50:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-05T08:50:00Z"}, "message": "Rollup merge of #66096 - ecstatic-morse:const-loop-test, r=Centril\n\nAdd a failing UI test for multiple loops of all kinds in a `const`\n\nThis simply demonstrates the current behavior and ensures we don't allow anything by accident.\n\nThe new const checker will be able to improve the diagnostics here. While working on it, I didn't see very many tests with non-`while` loops in a `const`, and there were no tests with multiple loops.", "tree": {"sha": "789b6d6c4f82556994df5f3655ca9db80e7500f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789b6d6c4f82556994df5f3655ca9db80e7500f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwTe4CRBK7hj4Ov3rIwAAdHIIAJdkARUYxH9ZRU69nLNKK0kt\nq/YYpLJ4HZc+mmIHQptwRZcmtp08PcfD0oxMt7W38VUODlaflEL8qUYjCZUA20wt\n/aZOFs1Tt1KUhGJkTMXQccXe8hAOn16vzvAgXAbkSzRhkCIAS9rIaXcTkRnMIxnk\nr9FBBY936dJnP8+HB6Z4zKGZUksYNJgPk8o6/SwwAY12jAPcBwtlW6f7HyKRXcBj\nISx0xV+bNK90QOO/16HpayCvQcBqAcqwS3yW5vrtawswpILuR7jE3oQ8inBDcj/u\n3c2WYDneVIRm/YqL5ydDOnVPDJPFxdTPiC93si2wKvk1RHSFiC/QlPSpGVQ5gCA=\n=Nlk1\n-----END PGP SIGNATURE-----\n", "payload": "tree 789b6d6c4f82556994df5f3655ca9db80e7500f0\nparent dc40c9389a02fa0cff6ac15402c787e4b5ab260a\nparent c8ae2819c5e8eeaa9a1f6435148f8d05fb5f8c56\nauthor Pietro Albini <pietro@pietroalbini.org> 1572943800 +0100\ncommitter GitHub <noreply@github.com> 1572943800 +0100\n\nRollup merge of #66096 - ecstatic-morse:const-loop-test, r=Centril\n\nAdd a failing UI test for multiple loops of all kinds in a `const`\n\nThis simply demonstrates the current behavior and ensures we don't allow anything by accident.\n\nThe new const checker will be able to improve the diagnostics here. While working on it, I didn't see very many tests with non-`while` loops in a `const`, and there were no tests with multiple loops.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "html_url": "https://github.com/rust-lang/rust/commit/1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffa93e5f8229c34286f50d1d79dd410324a7d9d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc40c9389a02fa0cff6ac15402c787e4b5ab260a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc40c9389a02fa0cff6ac15402c787e4b5ab260a", "html_url": "https://github.com/rust-lang/rust/commit/dc40c9389a02fa0cff6ac15402c787e4b5ab260a"}, {"sha": "c8ae2819c5e8eeaa9a1f6435148f8d05fb5f8c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ae2819c5e8eeaa9a1f6435148f8d05fb5f8c56", "html_url": "https://github.com/rust-lang/rust/commit/c8ae2819c5e8eeaa9a1f6435148f8d05fb5f8c56"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "954f269d30e59e4ae1a281474081b3ab3e06d6c7", "filename": "src/test/ui/consts/const-loop.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1ffa93e5f8229c34286f50d1d79dd410324a7d9d/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffa93e5f8229c34286f50d1d79dd410324a7d9d/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs?ref=1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "patch": "@@ -0,0 +1,58 @@\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    while x < 4 {\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n+        x += 1;\n+    }\n+\n+    while x < 8 {\n+        x += 1;\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    for i in 0..4 {\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR references in constants may only refer to immutable values\n+        //~| ERROR calls in constants are limited to constant functions, tuple\n+        //         structs and tuple variants\n+        x += i;\n+    }\n+\n+    for i in 0..4 {\n+        x += i;\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    loop {\n+        x += 1;\n+        if x == 4 {\n+            //~^ ERROR constant contains unimplemented expression type\n+            //~| ERROR constant contains unimplemented expression type\n+            break;\n+        }\n+    }\n+\n+    loop {\n+        x += 1;\n+        if x == 8 {\n+            break;\n+        }\n+    }\n+\n+    x\n+};\n+\n+fn main() {}"}, {"sha": "e6e4e2f5bb80881a88e0963b789fa7586791108f", "filename": "src/test/ui/consts/const-loop.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1ffa93e5f8229c34286f50d1d79dd410324a7d9d/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ffa93e5f8229c34286f50d1d79dd410324a7d9d/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr?ref=1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "patch": "@@ -0,0 +1,60 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:4:11\n+   |\n+LL |     while x < 4 {\n+   |           ^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:4:5\n+   |\n+LL | /     while x < 4 {\n+LL | |\n+LL | |\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/const-loop.rs:20:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:20:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^\n+\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/const-loop.rs:20:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^ constants require immutable values\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:20:9\n+   |\n+LL |     for i in 0..4 {\n+   |         ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:41:12\n+   |\n+LL |         if x == 4 {\n+   |            ^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:41:9\n+   |\n+LL | /         if x == 4 {\n+LL | |\n+LL | |\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0015, E0017, E0019.\n+For more information about an error, try `rustc --explain E0015`."}]}