{"sha": "6808b0a2b77448585dff3e0bfdd72a16ed5dab9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDhiMGEyYjc3NDQ4NTg1ZGZmM2UwYmZkZDcyYTE2ZWQ1ZGFiOWI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-11T03:21:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-11T03:28:54Z"}, "message": "Check for shadowing errors after all invocations have been expanded.", "tree": {"sha": "50a548d285550efc20dbf92ff55daf088b8b90c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a548d285550efc20dbf92ff55daf088b8b90c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b", "html_url": "https://github.com/rust-lang/rust/commit/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53fd3b0acc42c8c038382bcbc5e4ba7869178228", "url": "https://api.github.com/repos/rust-lang/rust/commits/53fd3b0acc42c8c038382bcbc5e4ba7869178228", "html_url": "https://github.com/rust-lang/rust/commit/53fd3b0acc42c8c038382bcbc5e4ba7869178228"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "fb18615263cf34fcee61eb51bb63ac71143e3a06", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6808b0a2b77448585dff3e0bfdd72a16ed5dab9b", "patch": "@@ -78,7 +78,7 @@ use std::mem::replace;\n use std::rc::Rc;\n \n use resolve_imports::{ImportDirective, NameResolution};\n-use macros::{InvocationData, LegacyBinding};\n+use macros::{InvocationData, LegacyBinding, LegacyScope};\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n@@ -1073,7 +1073,7 @@ pub struct Resolver<'a> {\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n-    macro_shadowing_errors: FnvHashSet<Span>,\n+    disallowed_shadowing: Vec<(Name, Span, LegacyScope<'a>)>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1260,7 +1260,7 @@ impl<'a> Resolver<'a> {\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n-            macro_shadowing_errors: FnvHashSet(),\n+            disallowed_shadowing: Vec::new(),\n \n             arenas: arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n@@ -3353,7 +3353,8 @@ impl<'a> Resolver<'a> {\n         vis.is_accessible_from(module.normal_ancestor_id.unwrap(), self)\n     }\n \n-    fn report_errors(&self) {\n+    fn report_errors(&mut self) {\n+        self.report_shadowing_errors();\n         let mut reported_spans = FnvHashSet();\n \n         for &AmbiguityError { span, name, b1, b2 } in &self.ambiguity_errors {\n@@ -3381,6 +3382,20 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn report_shadowing_errors(&mut self) {\n+        let mut reported_errors = FnvHashSet();\n+        for (name, span, scope) in replace(&mut self.disallowed_shadowing, Vec::new()) {\n+            if self.resolve_macro_name(scope, name, false).is_some() &&\n+               reported_errors.insert((name, span)) {\n+                let msg = format!(\"`{}` is already in scope\", name);\n+                self.session.struct_span_err(span, &msg)\n+                    .note(\"macro-expanded `macro_rules!`s and `#[macro_use]`s \\\n+                           may not shadow existing macros (see RFC 1560)\")\n+                    .emit();\n+            }\n+        }\n+    }\n+\n     fn report_conflict(&self,\n                        parent: Module,\n                        name: Name,"}, {"sha": "1c36b2452a4eaafb0ed1cfeebee97f6669e7f8a9", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6808b0a2b77448585dff3e0bfdd72a16ed5dab9b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=6808b0a2b77448585dff3e0bfdd72a16ed5dab9b", "patch": "@@ -207,20 +207,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n }\n \n impl<'a> Resolver<'a> {\n-    fn resolve_macro_name(&mut self,\n-                          mut scope: LegacyScope<'a>,\n-                          name: ast::Name,\n-                          record_used: bool)\n-                          -> Option<Rc<SyntaxExtension>> {\n+    pub fn resolve_macro_name(&mut self,\n+                              mut scope: LegacyScope<'a>,\n+                              name: ast::Name,\n+                              record_used: bool)\n+                              -> Option<Rc<SyntaxExtension>> {\n         let check_shadowing = |this: &mut Self, relative_depth, scope, span| {\n-            if record_used && relative_depth > 0 &&\n-               this.resolve_macro_name(scope, name, false).is_some() &&\n-               this.macro_shadowing_errors.insert(span) {\n-                let msg = format!(\"`{}` is already in scope\", name);\n-                this.session.struct_span_err(span, &msg)\n-                    .note(\"macro-expanded `macro_rules!`s and `#[macro_use]`s \\\n-                           may not shadow existing macros (see RFC 1560)\")\n-                    .emit();\n+            if record_used && relative_depth > 0 {\n+                this.disallowed_shadowing.push((name, span, scope));\n             }\n         };\n "}]}