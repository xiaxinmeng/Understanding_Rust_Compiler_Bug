{"sha": "006b48279431cab16d2b5d522151b6eae459e835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNmI0ODI3OTQzMWNhYjE2ZDJiNWQ1MjIxNTFiNmVhZTQ1OWU4MzU=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-13T19:18:50Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:04:30Z"}, "message": "Add compare-mode=chalk and add a little bit more implementations and fixmes", "tree": {"sha": "541483b95272c1fc4af2ce1e87e0a51141c2edf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541483b95272c1fc4af2ce1e87e0a51141c2edf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/006b48279431cab16d2b5d522151b6eae459e835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/006b48279431cab16d2b5d522151b6eae459e835", "html_url": "https://github.com/rust-lang/rust/commit/006b48279431cab16d2b5d522151b6eae459e835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/006b48279431cab16d2b5d522151b6eae459e835/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72417d84fb51495a4f1d007fb2397a0b2609ab63", "url": "https://api.github.com/repos/rust-lang/rust/commits/72417d84fb51495a4f1d007fb2397a0b2609ab63", "html_url": "https://github.com/rust-lang/rust/commit/72417d84fb51495a4f1d007fb2397a0b2609ab63"}], "stats": {"total": 126, "additions": 91, "deletions": 35}, "files": [{"sha": "e3ecea69da660d0884e66f69f0101bd86077efc4", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -32,12 +32,10 @@ pub enum RustDefId {\n     RawPtr,\n \n     Trait(DefId),\n-\n     Impl(DefId),\n-\n     FnDef(DefId),\n-\n     AssocTy(DefId),\n+    Opaque(DefId),\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "cbbff82d35f731892f1a2caad37039f8171d1230", "filename": "src/librustc_trait_selection/traits/chalk_fulfill.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -87,7 +87,9 @@ fn environment<'tcx>(\n         NodeKind::TraitImpl => {\n             let trait_ref = tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n \n-            inputs.extend(trait_ref.substs.iter().flat_map(|arg| arg.walk()));\n+            // FIXME(chalk): this has problems because of late-bound regions\n+            //inputs.extend(trait_ref.substs.iter().flat_map(|arg| arg.walk()));\n+            inputs.extend(trait_ref.substs.iter());\n         }\n \n         // In an inherent impl, we assume that the receiver type and all its\n@@ -136,6 +138,8 @@ fn in_environment(\n     let environment = match obligation.param_env.def_id {\n         Some(def_id) => environment(infcx.tcx, def_id),\n         None if obligation.param_env.caller_bounds.is_empty() => ty::List::empty(),\n+        // FIXME(chalk): this is hit in ui/where-clauses/where-clause-constraints-are-local-for-trait-impl\n+        // and ui/generics/generic-static-methods\n         _ => bug!(\"non-empty `ParamEnv` with no def-id\"),\n     };\n "}, {"sha": "18c690a2f513854bfcf4a803135639571c0c60a1", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -168,7 +168,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 });\n                 struct_datum\n             }\n-            RustDefId::Ref(_) => Arc::new(chalk_rust_ir::StructDatum {\n+            RustDefId::Ref(_) | RustDefId::RawPtr => Arc::new(chalk_rust_ir::StructDatum {\n                 id: struct_id,\n                 binders: chalk_ir::Binders::new(\n                     chalk_ir::ParameterKinds::from(\n@@ -204,7 +204,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 })\n             }\n \n-            _ => bug!(\"Used not struct variant when expecting struct variant.\"),\n+            v => bug!(\"Used not struct variant ({:?}) when expecting struct variant.\", v),\n         }\n     }\n \n@@ -283,6 +283,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             RustDefId::Trait(def_id) => def_id,\n             _ => bug!(\"Did not use `Trait` variant when expecting trait.\"),\n         };\n+        // FIXME(chalk): this match can be removed when builtin types supported\n+        match struct_id.0 {\n+            RustDefId::Adt(_) => {}\n+            RustDefId::Str => return false,\n+            RustDefId::Never => return false,\n+            RustDefId::Slice => return false,\n+            RustDefId::Array => return false,\n+            RustDefId::Ref(_) => return false,\n+            RustDefId::RawPtr => return false,\n+            _ => bug!(\"Did not use `Adt` variant when expecting adt.\"),\n+        }\n         let adt_def_id: DefId = match struct_id.0 {\n             RustDefId::Adt(def_id) => def_id,\n             _ => bug!(\"Did not use `Adt` variant when expecting adt.\"),\n@@ -347,9 +358,19 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n     fn opaque_ty_data(\n         &self,\n-        _id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n+        opaque_ty_id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_rust_ir::OpaqueTyDatum<RustInterner<'tcx>>> {\n-        unimplemented!()\n+        // FIXME(chalk): actually lower opaque ty\n+        let hidden_ty =\n+            self.tcx.mk_ty(ty::Tuple(self.tcx.intern_substs(&[]))).lower_into(&self.interner);\n+        let value = chalk_rust_ir::OpaqueTyDatumBound {\n+            hidden_ty,\n+            bounds: chalk_ir::Binders::new(chalk_ir::ParameterKinds::new(&self.interner), vec![]),\n+        };\n+        Arc::new(chalk_rust_ir::OpaqueTyDatum {\n+            opaque_ty_id,\n+            bound: chalk_ir::Binders::new(chalk_ir::ParameterKinds::new(&self.interner), value),\n+        })\n     }\n \n     /// Since Chalk can't handle all Rust types currently, we have to handle\n@@ -386,7 +407,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n                             Str | Slice => Some(false),\n \n-                            Trait(_) | Impl(_) | AssocTy(_) => panic!(),\n+                            Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n                     _ => None,\n@@ -416,7 +437,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                                     }\n                                 }\n                             }\n-                            Trait(_) | Impl(_) | AssocTy(_) => panic!(),\n+                            Trait(_) | Impl(_) | AssocTy(_) | Opaque(_) => panic!(),\n                         }\n                     }\n                     _ => None,"}, {"sha": "8a36ad3b1163367058758d0a7b2704257d6fbe2b", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -352,7 +352,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 })\n                 .intern(interner)\n             }\n-            Dynamic(_, _) => unimplemented!(),\n+            // FIXME(chalk): add region\n+            Dynamic(predicates, _region) => {\n+                TyData::Dyn(chalk_ir::DynTy { bounds: predicates.lower_into(interner) })\n+                    .intern(interner)\n+            }\n             Closure(_def_id, _) => unimplemented!(),\n             Generator(_def_id, _substs, _) => unimplemented!(),\n             GeneratorWitness(_) => unimplemented!(),\n@@ -361,7 +365,13 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 apply(chalk_ir::TypeName::Tuple(substs.len()), substs.lower_into(interner))\n             }\n             Projection(proj) => TyData::Alias(proj.lower_into(interner)).intern(interner),\n-            Opaque(_def_id, _substs) => unimplemented!(),\n+            Opaque(def_id, substs) => {\n+                TyData::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n+                    opaque_ty_id: chalk_ir::OpaqueTyId(RustDefId::Opaque(def_id)),\n+                    substitution: substs.lower_into(interner),\n+                }))\n+                .intern(interner)\n+            }\n             // This should have been done eagerly prior to this, and all Params\n             // should have been substituted to placeholders\n             Param(_) => panic!(\"Lowering Param when not expected.\"),\n@@ -376,7 +386,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             })\n             .intern(interner),\n             Infer(_infer) => unimplemented!(),\n-            Error(_) => unimplemented!(),\n+            Error(_) => apply(chalk_ir::TypeName::Error, empty()),\n         }\n     }\n }\n@@ -401,6 +411,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 ty::BrEnv => unimplemented!(),\n             },\n             ReFree(_) => unimplemented!(),\n+            // FIXME(chalk): need to handle ReStatic\n             ReStatic => unimplemented!(),\n             ReVar(_) => unimplemented!(),\n             RePlaceholder(placeholder_region) => {\n@@ -411,6 +422,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 .intern(interner)\n             }\n             ReEmpty(_) => unimplemented!(),\n+            // FIXME(chalk): need to handle ReErased\n             ReErased => unimplemented!(),\n         }\n     }\n@@ -472,6 +484,39 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n     }\n }\n \n+impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<RustInterner<'tcx>>>>\n+    for Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>\n+{\n+    fn lower_into(\n+        self,\n+        interner: &RustInterner<'tcx>,\n+    ) -> chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<RustInterner<'tcx>>> {\n+        let (predicates, binders, _named_regions) =\n+            collect_bound_vars(interner, interner.tcx, &self);\n+        let where_clauses = predicates.into_iter().map(|predicate| match predicate {\n+            ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef { def_id, substs }) => {\n+                chalk_ir::Binders::new(\n+                    chalk_ir::ParameterKinds::new(interner),\n+                    chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n+                        trait_id: chalk_ir::TraitId(RustDefId::Trait(*def_id)),\n+                        substitution: substs.lower_into(interner),\n+                    }),\n+                )\n+            }\n+            ty::ExistentialPredicate::Projection(_predicate) => unimplemented!(),\n+            ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n+                chalk_ir::ParameterKinds::new(interner),\n+                chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n+                    trait_id: chalk_ir::TraitId(RustDefId::Trait(*def_id)),\n+                    substitution: chalk_ir::Substitution::empty(interner),\n+                }),\n+            ),\n+        });\n+        let value = chalk_ir::QuantifiedWhereClauses::from(interner, where_clauses);\n+        chalk_ir::Binders::new(binders, value)\n+    }\n+}\n+\n /// To collect bound vars, we have to do two passes. In the first pass, we\n /// collect all `BoundRegion`s and `ty::Bound`s. In the second pass, we then\n /// replace `BrNamed` into `BrAnon`. The two separate passes are important,"}, {"sha": "b3c2f4516349e84861d07fae1cc13af310d39306", "filename": "src/test/ui/coherence/coherence-subtyping.re.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72417d84fb51495a4f1d007fb2397a0b2609ab63/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72417d84fb51495a4f1d007fb2397a0b2609ab63/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr?ref=72417d84fb51495a4f1d007fb2397a0b2609ab63", "patch": "@@ -1,16 +0,0 @@\n-warning: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n-  --> $DIR/coherence-subtyping.rs:16:1\n-   |\n-LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n-   | ---------------------------------------------------------- first implementation here\n-LL | \n-LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n-   |\n-   = note: `#[warn(coherence_leak_check)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b3ed728a81c062c8c81aba2ab9123d2e04f7d3f5", "filename": "src/test/ui/coherence/coherence-subtyping.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -4,7 +4,6 @@\n // Note: This scenario is currently accepted, but as part of the\n // universe transition (#56105) may eventually become an error.\n \n-// revisions: old re\n // check-pass\n \n trait TheTrait {\n@@ -14,10 +13,8 @@ trait TheTrait {\n impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n \n impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n-    //[re]~^ WARNING conflicting implementation\n-    //[re]~^^ WARNING this was previously accepted by the compiler but is being phased out\n-    //[old]~^^^ WARNING conflicting implementation\n-    //[old]~^^^^ WARNING this was previously accepted by the compiler but is being phased out\n+    //~^ WARNING conflicting implementation\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out\n }\n \n fn main() {}"}, {"sha": "7f751a24c75c95d6e5c384f7f0d223c240eeb2e0", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n-  --> $DIR/coherence-subtyping.rs:16:1\n+  --> $DIR/coherence-subtyping.rs:15:1\n    |\n LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n    | ---------------------------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-subtyping.old.stderr"}, {"sha": "703b87634cec37042e95db4d6428a3eccb47e187", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -123,20 +123,23 @@ pub enum FailMode {\n pub enum CompareMode {\n     Nll,\n     Polonius,\n+    Chalk,\n }\n \n impl CompareMode {\n     pub(crate) fn to_str(&self) -> &'static str {\n         match *self {\n             CompareMode::Nll => \"nll\",\n             CompareMode::Polonius => \"polonius\",\n+            CompareMode::Chalk => \"chalk\",\n         }\n     }\n \n     pub fn parse(s: String) -> CompareMode {\n         match s.as_str() {\n             \"nll\" => CompareMode::Nll,\n             \"polonius\" => CompareMode::Polonius,\n+            \"chalk\" => CompareMode::Chalk,\n             x => panic!(\"unknown --compare-mode option: {}\", x),\n         }\n     }"}, {"sha": "7d2c83881d13b2503d21891a9390308a5a925d90", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -875,6 +875,7 @@ impl Config {\n             match self.compare_mode {\n                 Some(CompareMode::Nll) => name == \"compare-mode-nll\",\n                 Some(CompareMode::Polonius) => name == \"compare-mode-polonius\",\n+                Some(CompareMode::Chalk) => name == \"compare-mode-chalk\",\n                 None => false,\n             } ||\n             (cfg!(debug_assertions) && name == \"debug\") ||"}, {"sha": "95ea4fb078955990b37c64c901dc400a1c18473f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006b48279431cab16d2b5d522151b6eae459e835/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=006b48279431cab16d2b5d522151b6eae459e835", "patch": "@@ -1985,6 +1985,9 @@ impl<'test> TestCx<'test> {\n             Some(CompareMode::Polonius) => {\n                 rustc.args(&[\"-Zpolonius\", \"-Zborrowck=mir\"]);\n             }\n+            Some(CompareMode::Chalk) => {\n+                rustc.args(&[\"-Zchalk\"]);\n+            }\n             None => {}\n         }\n "}]}