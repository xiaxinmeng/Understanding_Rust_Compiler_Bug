{"sha": "4459e720bee5a741b962cfcd6f0593b32dc19009", "node_id": "C_kwDOAAsO6NoAKDQ0NTllNzIwYmVlNWE3NDFiOTYyY2ZjZDZmMDU5M2IzMmRjMTkwMDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T11:22:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T11:22:02Z"}, "message": "Auto merge of #91656 - matthiaskrgr:rollup-lk96y6d, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #83744 (Deprecate crate_type and crate_name nested inside #![cfg_attr])\n - #90550 (Update certificates in some Ubuntu 16 images.)\n - #91272 (Print a suggestion when comparing references to primitive types in `const fn`)\n - #91467 (Emphasise that an OsStr[ing] is not necessarily a platform string)\n - #91531 (Do not add `;` to expected tokens list when it's wrong)\n - #91577 (Address some FIXMEs left over from #91475)\n - #91638 (Remove `in_band_lifetimes` from `rustc_mir_transform`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8f971851dcee5e588231ca5d7af66e223af47b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f971851dcee5e588231ca5d7af66e223af47b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4459e720bee5a741b962cfcd6f0593b32dc19009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4459e720bee5a741b962cfcd6f0593b32dc19009", "html_url": "https://github.com/rust-lang/rust/commit/4459e720bee5a741b962cfcd6f0593b32dc19009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4459e720bee5a741b962cfcd6f0593b32dc19009/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0f7baf5651606c706b7014b5abdaa930cf2600", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0f7baf5651606c706b7014b5abdaa930cf2600", "html_url": "https://github.com/rust-lang/rust/commit/ce0f7baf5651606c706b7014b5abdaa930cf2600"}, {"sha": "90690dae69b5213fb04b88408ad4d18a7130f40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90690dae69b5213fb04b88408ad4d18a7130f40c", "html_url": "https://github.com/rust-lang/rust/commit/90690dae69b5213fb04b88408ad4d18a7130f40c"}], "stats": {"total": 843, "additions": 624, "deletions": 219}, "files": [{"sha": "4a02e0595376b7f1bd1bbe0718f689ade9e114d3", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -801,7 +801,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n                     if !self.tcx.features().const_trait_impl {\n-                        self.check_op(ops::FnCallNonConst);\n+                        self.check_op(ops::FnCallNonConst(Some((callee, substs))));\n                         return;\n                     }\n \n@@ -857,7 +857,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                             }\n \n                             if !nonconst_call_permission {\n-                                self.check_op(ops::FnCallNonConst);\n+                                self.check_op(ops::FnCallNonConst(None));\n                                 return;\n                             }\n                         }\n@@ -926,7 +926,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     }\n \n                     if !nonconst_call_permission {\n-                        self.check_op(ops::FnCallNonConst);\n+                        self.check_op(ops::FnCallNonConst(None));\n                         return;\n                     }\n                 }"}, {"sha": "421c559474a97d642b1720367355187aa556d5cd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,12 +1,14 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::mir;\n+use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::{mir, ty::AssocKind};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{symbol::Ident, Span, Symbol};\n+use rustc_span::{BytePos, Pos};\n \n use super::ConstCx;\n \n@@ -72,17 +74,71 @@ impl NonConstOp for FnCallIndirect {\n \n /// A function call where the callee is not marked as `const`.\n #[derive(Debug)]\n-pub struct FnCallNonConst;\n-impl NonConstOp for FnCallNonConst {\n+pub struct FnCallNonConst<'tcx>(pub Option<(DefId, SubstsRef<'tcx>)>);\n+impl<'a> NonConstOp for FnCallNonConst<'a> {\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0015,\n             \"calls in {}s are limited to constant functions, \\\n              tuple structs and tuple variants\",\n             ccx.const_kind(),\n-        )\n+        );\n+\n+        if let FnCallNonConst(Some((callee, substs))) = *self {\n+            if let Some(trait_def_id) = ccx.tcx.lang_items().eq_trait() {\n+                if let Some(eq_item) = ccx.tcx.associated_items(trait_def_id).find_by_name_and_kind(\n+                    ccx.tcx,\n+                    Ident::with_dummy_span(sym::eq),\n+                    AssocKind::Fn,\n+                    trait_def_id,\n+                ) {\n+                    if callee == eq_item.def_id && substs.len() == 2 {\n+                        match (substs[0].unpack(), substs[1].unpack()) {\n+                            (GenericArgKind::Type(self_ty), GenericArgKind::Type(rhs_ty))\n+                                if self_ty == rhs_ty\n+                                    && self_ty.is_ref()\n+                                    && self_ty.peel_refs().is_primitive() =>\n+                            {\n+                                let mut num_refs = 0;\n+                                let mut tmp_ty = self_ty;\n+                                while let rustc_middle::ty::Ref(_, inner_ty, _) = tmp_ty.kind() {\n+                                    num_refs += 1;\n+                                    tmp_ty = inner_ty;\n+                                }\n+                                let deref = \"*\".repeat(num_refs);\n+\n+                                if let Ok(call_str) =\n+                                    ccx.tcx.sess.source_map().span_to_snippet(span)\n+                                {\n+                                    if let Some(eq_idx) = call_str.find(\"==\") {\n+                                        if let Some(rhs_idx) = call_str[(eq_idx + 2)..]\n+                                            .find(|c: char| !c.is_whitespace())\n+                                        {\n+                                            let rhs_pos = span.lo()\n+                                                + BytePos::from_usize(eq_idx + 2 + rhs_idx);\n+                                            let rhs_span = span.with_lo(rhs_pos).with_hi(rhs_pos);\n+                                            err.multipart_suggestion(\n+                                                \"consider dereferencing here\",\n+                                                vec![\n+                                                    (span.shrink_to_lo(), deref.clone()),\n+                                                    (rhs_span, deref),\n+                                                ],\n+                                                Applicability::MachineApplicable,\n+                                            );\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        err\n     }\n }\n "}, {"sha": "5221ab4b6133a67a228d26c3d6a9bcde24f22c60", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -402,7 +402,24 @@ impl<'a> StripUnconfigured<'a> {\n                 );\n                 trees.push((bracket_group, Spacing::Alone));\n                 let tokens = Some(LazyTokenStream::new(AttrAnnotatedTokenStream::new(trees)));\n-                self.process_cfg_attr(attr::mk_attr_from_item(item, tokens, attr.style, span))\n+                let attr = attr::mk_attr_from_item(item, tokens, attr.style, span);\n+                if attr.has_name(sym::crate_type) {\n+                    self.sess.parse_sess.buffer_lint(\n+                        rustc_lint_defs::builtin::DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+                        attr.span,\n+                        ast::CRATE_NODE_ID,\n+                        \"`crate_type` within an `#![cfg_attr] attribute is deprecated`\",\n+                    );\n+                }\n+                if attr.has_name(sym::crate_name) {\n+                    self.sess.parse_sess.buffer_lint(\n+                        rustc_lint_defs::builtin::DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+                        attr.span,\n+                        ast::CRATE_NODE_ID,\n+                        \"`crate_name` within an `#![cfg_attr] attribute is deprecated`\",\n+                    );\n+                }\n+                self.process_cfg_attr(attr)\n             })\n             .collect()\n     }"}, {"sha": "c9294c68a7dc9b4999c73143d451f49edc92d3a5", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -2960,6 +2960,41 @@ declare_lint! {\n     \"detects large moves or copies\",\n }\n \n+declare_lint! {\n+    /// The `deprecated_cfg_attr_crate_type_name` lint detects uses of the\n+    /// `#![cfg_attr(..., crate_type = \"...\")]` and\n+    /// `#![cfg_attr(..., crate_name = \"...\")]` attributes to conditionally\n+    /// specify the crate type and name in the source code.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![cfg_attr(debug_assertions, crate_type = \"lib\")]\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The `#![crate_type]` and `#![crate_name]` attributes require a hack in\n+    /// the compiler to be able to change the used crate type and crate name\n+    /// after macros have been expanded. Neither attribute works in combination\n+    /// with Cargo as it explicitly passes `--crate-type` and `--crate-name` on\n+    /// the commandline. These values must match the value used in the source\n+    /// code to prevent an error.\n+    ///\n+    /// To fix the warning use `--crate-type` on the commandline when running\n+    /// rustc instead of `#![cfg_attr(..., crate_type = \"...\")]` and\n+    /// `--crate-name` instead of `#![cfg_attr(..., crate_name = \"...\")]`.\n+    pub DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+    Warn,\n+    \"detects usage of `#![cfg_attr(..., crate_type/crate_name = \\\"...\\\")]`\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #91632 <https://github.com/rust-lang/rust/issues/91632>\",\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3056,6 +3091,7 @@ declare_lint_pass! {\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n         DEREF_INTO_DYN_SUPERTRAIT,\n+        DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n     ]\n }\n "}, {"sha": "28a5a22dd9d5d1558acf329222a4366d26462e47", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -34,7 +34,7 @@ fn is_stable(place: PlaceRef<'_>) -> bool {\n }\n \n /// Determine whether this type may be a reference (or box), and thus needs retagging.\n-fn may_be_reference(ty: Ty<'tcx>) -> bool {\n+fn may_be_reference(ty: Ty<'_>) -> bool {\n     match ty.kind() {\n         // Primitive types that are not references\n         ty::Bool"}, {"sha": "a19a3c8b1d50609b4712eee6683bd8090507da79", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -23,7 +23,7 @@ struct ConstMutationChecker<'a, 'tcx> {\n     target_local: Option<Local>,\n }\n \n-impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n+impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n     fn is_const_item(&self, local: Local) -> Option<DefId> {\n         if let Some(box LocalInfo::ConstRef { def_id }) = self.body.local_decls[local].local_info {\n             Some(def_id)\n@@ -95,7 +95,7 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for ConstMutationChecker<'_, 'tcx> {\n     fn visit_statement(&mut self, stmt: &Statement<'tcx>, loc: Location) {\n         if let StatementKind::Assign(box (lhs, _)) = &stmt.kind {\n             // Check for assignment to fields of a constant"}, {"sha": "c6661e9c74e9b0a51d280474fce5aa991c1a118f", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -66,7 +66,7 @@ fn builtin_derive_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for PackedRefChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         // Make sure we know where in the MIR we are.\n         self.source_info = terminator.source_info;"}, {"sha": "2dda19badd7c15afd23480b45e53986bd66fab1a", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         self.source_info = terminator.source_info;\n         match terminator.kind {\n@@ -244,7 +244,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n+impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n     fn require_unsafe(&mut self, kind: UnsafetyViolationKind, details: UnsafetyViolationDetails) {\n         // Violations can turn out to be `UnsafeFn` during analysis, but they should not start out as such.\n         assert_ne!(kind, UnsafetyViolationKind::UnsafeFn);\n@@ -397,7 +397,7 @@ struct UnusedUnsafeVisitor<'a> {\n     unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n }\n \n-impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n+impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "839d94167fecdfbc90717b6849c745c781c211af", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -89,7 +89,7 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n     eligable_locals\n }\n \n-impl<'tcx> Visitor<'tcx> for LocalUseVisitor {\n+impl Visitor<'_> for LocalUseVisitor {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n         if context.is_mutating_use() {\n             self.local_mutating_uses[*local] = self.local_mutating_uses[*local].saturating_add(1);"}, {"sha": "905173b0457191022d8288a3bbdf012ecf7b2742", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> MirPass<'tcx> for ConstGoto {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for ConstGotoOptimizationFinder<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         let _: Option<_> = try {\n             let target = terminator.kind.as_goto()?;"}, {"sha": "e897e89982c0d8ad0518acdfdc405d5527c360f5", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -171,7 +171,7 @@ struct ConstPropMachine<'mir, 'tcx> {\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n }\n \n-impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n+impl ConstPropMachine<'_, '_> {\n     fn new(\n         only_propagate_inside_block_locals: BitSet<Local>,\n         can_const_prop: IndexVec<Local, ConstPropMode>,\n@@ -308,14 +308,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     #[inline(always)]\n-    fn stack(\n+    fn stack<'a>(\n         ecx: &'a InterpCx<'mir, 'tcx, Self>,\n     ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n         &ecx.machine.stack\n     }\n \n     #[inline(always)]\n-    fn stack_mut(\n+    fn stack_mut<'a>(\n         ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n     ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n         &mut ecx.machine.stack\n@@ -336,7 +336,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     source_info: Option<SourceInfo>,\n }\n \n-impl<'mir, 'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'_, 'tcx> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]\n@@ -345,21 +345,21 @@ impl<'mir, 'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'mir, 'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx> HasDataLayout for ConstPropagator<'mir, 'tcx> {\n+impl HasDataLayout for ConstPropagator<'_, '_> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'mir, 'tcx> ty::layout::HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> ty::layout::HasTyCtxt<'tcx> for ConstPropagator<'_, 'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'mir, 'tcx> ty::layout::HasParamEnv<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> ty::layout::HasParamEnv<'tcx> for ConstPropagator<'_, 'tcx> {\n     #[inline]\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n@@ -971,7 +971,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// Returns true if `local` can be propagated\n-    fn check(\n+    fn check<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n         body: &Body<'tcx>,\n@@ -1019,7 +1019,7 @@ impl CanConstProp {\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for CanConstProp {\n+impl Visitor<'_> for CanConstProp {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n@@ -1079,7 +1079,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     }\n }\n \n-impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "588103ca43dd0fdc5e058f747c1f502c5ae74134", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -629,7 +629,7 @@ impl UsedExpressions {\n }\n \n /// Generates the MIR pass `CoverageSpan`-specific spanview dump file.\n-pub(super) fn dump_coverage_spanview(\n+pub(super) fn dump_coverage_spanview<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     basic_coverage_blocks: &CoverageGraph,\n@@ -651,7 +651,7 @@ pub(super) fn dump_coverage_spanview(\n }\n \n /// Converts the computed `BasicCoverageBlockData`s into `SpanViewable`s.\n-fn span_viewables(\n+fn span_viewables<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     basic_coverage_blocks: &CoverageGraph,\n@@ -670,7 +670,7 @@ fn span_viewables(\n }\n \n /// Generates the MIR pass coverage-specific graphviz dump file.\n-pub(super) fn dump_coverage_graphviz(\n+pub(super) fn dump_coverage_graphviz<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     pass_name: &str,\n@@ -750,7 +750,7 @@ pub(super) fn dump_coverage_graphviz(\n         .expect(\"Unexpected error writing BasicCoverageBlock graphviz DOT file\");\n }\n \n-fn bcb_to_string_sections(\n+fn bcb_to_string_sections<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     debug_counters: &DebugCounters,\n@@ -817,7 +817,7 @@ fn bcb_to_string_sections(\n \n /// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n /// values it might hold.\n-pub(super) fn term_type(kind: &TerminatorKind<'tcx>) -> &'static str {\n+pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n     match kind {\n         TerminatorKind::Goto { .. } => \"Goto\",\n         TerminatorKind::SwitchInt { .. } => \"SwitchInt\","}, {"sha": "a25402a1ff9f54674fc6a985a1e8f7bf4d224b8c", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -27,7 +27,7 @@ pub(super) struct CoverageGraph {\n }\n \n impl CoverageGraph {\n-    pub fn from_mir(mir_body: &mir::Body<'tcx>) -> Self {\n+    pub fn from_mir(mir_body: &mir::Body<'_>) -> Self {\n         let (bcbs, bb_to_bcb) = Self::compute_basic_coverage_blocks(mir_body);\n \n         // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n@@ -74,7 +74,7 @@ impl CoverageGraph {\n     }\n \n     fn compute_basic_coverage_blocks(\n-        mir_body: &mir::Body<'tcx>,\n+        mir_body: &mir::Body<'_>,\n     ) -> (\n         IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n         IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n@@ -267,7 +267,7 @@ impl graph::WithSuccessors for CoverageGraph {\n     }\n }\n \n-impl graph::GraphPredecessors<'graph> for CoverageGraph {\n+impl<'graph> graph::GraphPredecessors<'graph> for CoverageGraph {\n     type Item = BasicCoverageBlock;\n     type Iter = std::iter::Copied<std::slice::Iter<'graph, BasicCoverageBlock>>;\n }"}, {"sha": "b009e2fd0e4ade6889dd9c653e9951586c1355d2", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n }\n \n fn inject_edge_counter_basic_block(\n-    mir_body: &mut mir::Body<'tcx>,\n+    mir_body: &mut mir::Body<'_>,\n     from_bb: BasicBlock,\n     to_bb: BasicBlock,\n ) -> BasicBlock {\n@@ -466,7 +466,7 @@ fn inject_edge_counter_basic_block(\n }\n \n fn inject_statement(\n-    mir_body: &mut mir::Body<'tcx>,\n+    mir_body: &mut mir::Body<'_>,\n     counter_kind: CoverageKind,\n     bb: BasicBlock,\n     some_code_region: Option<CodeRegion>,\n@@ -488,7 +488,7 @@ fn inject_statement(\n }\n \n // Non-code expressions are injected into the coverage map, without generating executable code.\n-fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: CoverageKind) {\n+fn inject_intermediate_expression(mir_body: &mut mir::Body<'_>, expression: CoverageKind) {\n     debug_assert!(matches!(expression, CoverageKind::Expression { .. }));\n     debug!(\"  injecting non-code expression {:?}\", expression);\n     let inject_in_bb = mir::START_BLOCK;"}, {"sha": "1721fb5cde0e899e04c5acb82684c7803ed1d6d1", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -137,7 +137,7 @@ fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, instance_def: ty::InstanceDef<'tcx>) ->\n     coverage_visitor.info\n }\n \n-fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n+fn covered_file_name(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_mir_available(def_id) {\n         let body = mir_body(tcx, def_id);\n         for bb_data in body.basic_blocks().iter() {"}, {"sha": "146cabf3508806c167ef755b825d2e2cafbd3fb2", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -21,7 +21,7 @@ pub(super) enum CoverageStatement {\n }\n \n impl CoverageStatement {\n-    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n+    pub fn format<'tcx>(&self, tcx: TyCtxt<'tcx>, mir_body: &mir::Body<'tcx>) -> String {\n         match *self {\n             Self::Statement(bb, span, stmt_index) => {\n                 let stmt = &mir_body[bb].statements[stmt_index];\n@@ -86,7 +86,7 @@ impl CoverageSpan {\n     }\n \n     pub fn for_statement(\n-        statement: &Statement<'tcx>,\n+        statement: &Statement<'_>,\n         span: Span,\n         expn_span: Span,\n         bcb: BasicCoverageBlock,\n@@ -151,18 +151,18 @@ impl CoverageSpan {\n         self.bcb == other.bcb\n     }\n \n-    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n+    pub fn format<'tcx>(&self, tcx: TyCtxt<'tcx>, mir_body: &mir::Body<'tcx>) -> String {\n         format!(\n             \"{}\\n    {}\",\n             source_range_no_file(tcx, &self.span),\n             self.format_coverage_statements(tcx, mir_body).replace(\"\\n\", \"\\n    \"),\n         )\n     }\n \n-    pub fn format_coverage_statements(\n+    pub fn format_coverage_statements<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        mir_body: &'a mir::Body<'tcx>,\n+        mir_body: &mir::Body<'tcx>,\n     ) -> String {\n         let mut sorted_coverage_statements = self.coverage_statements.clone();\n         sorted_coverage_statements.sort_unstable_by_key(|covstmt| match *covstmt {\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n \n /// If the MIR `Statement` has a span contributive to computing coverage spans,\n /// return it; otherwise return `None`.\n-pub(super) fn filtered_statement_span(statement: &'a Statement<'tcx>) -> Option<Span> {\n+pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span> {\n     match statement.kind {\n         // These statements have spans that are often outside the scope of the executed source code\n         // for their parent `BasicBlock`.\n@@ -847,7 +847,7 @@ pub(super) fn filtered_statement_span(statement: &'a Statement<'tcx>) -> Option<\n \n /// If the MIR `Terminator` has a span contributive to computing coverage spans,\n /// return it; otherwise return `None`.\n-pub(super) fn filtered_terminator_span(terminator: &'a Terminator<'tcx>) -> Option<Span> {\n+pub(super) fn filtered_terminator_span(terminator: &Terminator<'_>) -> Option<Span> {\n     match terminator.kind {\n         // These terminators have spans that don't positively contribute to computing a reasonable\n         // span of actually executed source code. (For example, SwitchInt terminators extracted from"}, {"sha": "b9c79d4cf2db80f2984713bab2e63a7eadb6e09d", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> MockBlocks<'tcx> {\n     }\n }\n \n-fn debug_basic_blocks(mir_body: &Body<'tcx>) -> String {\n+fn debug_basic_blocks<'tcx>(mir_body: &Body<'tcx>) -> String {\n     format!(\n         \"{:?}\",\n         mir_body\n@@ -273,7 +273,7 @@ fn print_coverage_graphviz(\n }\n \n /// Create a mock `Body` with a simple flow.\n-fn goto_switchint() -> Body<'a> {\n+fn goto_switchint<'a>() -> Body<'a> {\n     let mut blocks = MockBlocks::new();\n     let start = blocks.call(None);\n     let goto = blocks.goto(Some(start));\n@@ -363,7 +363,7 @@ fn test_covgraph_goto_switchint() {\n }\n \n /// Create a mock `Body` with a loop.\n-fn switchint_then_loop_else_return() -> Body<'a> {\n+fn switchint_then_loop_else_return<'a>() -> Body<'a> {\n     let mut blocks = MockBlocks::new();\n     let start = blocks.call(None);\n     let switchint = blocks.switchint(Some(start));\n@@ -449,7 +449,7 @@ fn test_covgraph_switchint_then_loop_else_return() {\n }\n \n /// Create a mock `Body` with nested loops.\n-fn switchint_loop_then_inner_loop_else_break() -> Body<'a> {\n+fn switchint_loop_then_inner_loop_else_break<'a>() -> Body<'a> {\n     let mut blocks = MockBlocks::new();\n     let start = blocks.call(None);\n     let switchint = blocks.switchint(Some(start));"}, {"sha": "d1977ed49fe15df8de83d198ae05b8fadc918464", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> MutVisitor<'tcx> for OptApplier<'tcx> {\n     }\n }\n \n-fn find_duplicates<'a, 'tcx>(body: &'a Body<'tcx>) -> FxHashMap<BasicBlock, BasicBlock> {\n+fn find_duplicates(body: &Body<'_>) -> FxHashMap<BasicBlock, BasicBlock> {\n     let mut duplicates = FxHashMap::default();\n \n     let bbs_to_go_through =\n@@ -102,17 +102,17 @@ struct BasicBlockHashable<'tcx, 'a> {\n     basic_block_data: &'a BasicBlockData<'tcx>,\n }\n \n-impl<'tcx, 'a> Hash for BasicBlockHashable<'tcx, 'a> {\n+impl Hash for BasicBlockHashable<'_, '_> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         hash_statements(state, self.basic_block_data.statements.iter());\n         // Note that since we only hash the kind, we lose span information if we deduplicate the blocks\n         self.basic_block_data.terminator().kind.hash(state);\n     }\n }\n \n-impl<'tcx, 'a> Eq for BasicBlockHashable<'tcx, 'a> {}\n+impl Eq for BasicBlockHashable<'_, '_> {}\n \n-impl<'tcx, 'a> PartialEq for BasicBlockHashable<'tcx, 'a> {\n+impl PartialEq for BasicBlockHashable<'_, '_> {\n     fn eq(&self, other: &Self) -> bool {\n         self.basic_block_data.statements.len() == other.basic_block_data.statements.len()\n             && &self.basic_block_data.terminator().kind == &other.basic_block_data.terminator().kind\n@@ -132,7 +132,7 @@ fn hash_statements<'a, 'tcx, H: Hasher>(\n     }\n }\n \n-fn statement_hash<'tcx, H: Hasher>(hasher: &mut H, stmt: &StatementKind<'tcx>) {\n+fn statement_hash<H: Hasher>(hasher: &mut H, stmt: &StatementKind<'_>) {\n     match stmt {\n         StatementKind::Assign(box (place, rvalue)) => {\n             place.hash(hasher);\n@@ -142,14 +142,14 @@ fn statement_hash<'tcx, H: Hasher>(hasher: &mut H, stmt: &StatementKind<'tcx>) {\n     };\n }\n \n-fn rvalue_hash<H: Hasher>(hasher: &mut H, rvalue: &Rvalue<'tcx>) {\n+fn rvalue_hash<H: Hasher>(hasher: &mut H, rvalue: &Rvalue<'_>) {\n     match rvalue {\n         Rvalue::Use(op) => operand_hash(hasher, op),\n         x => x.hash(hasher),\n     };\n }\n \n-fn operand_hash<H: Hasher>(hasher: &mut H, operand: &Operand<'tcx>) {\n+fn operand_hash<H: Hasher>(hasher: &mut H, operand: &Operand<'_>) {\n     match operand {\n         Operand::Constant(box Constant { user_ty: _, literal, span: _ }) => literal.hash(hasher),\n         x => x.hash(hasher),\n@@ -168,7 +168,7 @@ fn statement_eq<'tcx>(lhs: &StatementKind<'tcx>, rhs: &StatementKind<'tcx>) -> b\n     res\n }\n \n-fn rvalue_eq(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n+fn rvalue_eq<'tcx>(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n     let res = match (lhs, rhs) {\n         (Rvalue::Use(op1), Rvalue::Use(op2)) => operand_eq(op1, op2),\n         (x, y) => x == y,\n@@ -177,7 +177,7 @@ fn rvalue_eq(lhs: &Rvalue<'tcx>, rhs: &Rvalue<'tcx>) -> bool {\n     res\n }\n \n-fn operand_eq(lhs: &Operand<'tcx>, rhs: &Operand<'tcx>) -> bool {\n+fn operand_eq<'tcx>(lhs: &Operand<'tcx>, rhs: &Operand<'tcx>) -> bool {\n     let res = match (lhs, rhs) {\n         (\n             Operand::Constant(box Constant { user_ty: _, literal, span: _ }),"}, {"sha": "2b382468be0f5d01c00fa61a740b60683063947a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -241,7 +241,7 @@ struct Replacements<'tcx> {\n     kill: BitSet<Local>,\n }\n \n-impl Replacements<'tcx> {\n+impl<'tcx> Replacements<'tcx> {\n     fn new(locals: usize) -> Self {\n         Self { map: IndexVec::from_elem_n(None, locals), kill: BitSet::new_empty(locals) }\n     }\n@@ -298,7 +298,7 @@ struct Replacer<'tcx> {\n }\n \n impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -372,7 +372,7 @@ struct Conflicts<'a> {\n     unified_locals: InPlaceUnificationTable<UnifyLocal>,\n }\n \n-impl Conflicts<'a> {\n+impl<'a> Conflicts<'a> {\n     fn build<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         body: &'_ Body<'tcx>,\n@@ -820,10 +820,7 @@ struct CandidateAssignment<'tcx> {\n /// comment) and also throw out assignments that involve a local that has its address taken or is\n /// otherwise ineligible (eg. locals used as array indices are ignored because we cannot propagate\n /// arbitrary places into array indices).\n-fn find_candidates<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n-) -> Vec<CandidateAssignment<'tcx>> {\n+fn find_candidates<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n     let mut visitor = FindAssignments {\n         tcx,\n         body,\n@@ -843,7 +840,7 @@ struct FindAssignments<'a, 'tcx> {\n     locals_used_as_array_index: BitSet<Local>,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for FindAssignments<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for FindAssignments<'_, 'tcx> {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         if let StatementKind::Assign(box (\n             dest,"}, {"sha": "ac88060f0d349de5d45afa87e5a7678dc984da5f", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -167,7 +167,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     }\n }\n \n-fn is_switch<'tcx>(terminator: &Terminator<'tcx>) -> bool {\n+fn is_switch(terminator: &Terminator<'_>) -> bool {\n     matches!(terminator.kind, TerminatorKind::SwitchInt { .. })\n }\n \n@@ -208,7 +208,7 @@ struct OptimizationInfo<'tcx> {\n     second_switch_info: SwitchDiscriminantInfo<'tcx>,\n }\n \n-impl<'a, 'tcx> Helper<'a, 'tcx> {\n+impl<'tcx> Helper<'_, 'tcx> {\n     pub fn go(\n         &self,\n         bb: &BasicBlockData<'tcx>,"}, {"sha": "d346dfb1772199b3659a3962a7355fb056e357cb", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -149,13 +149,13 @@ struct Elaborator<'a, 'b, 'tcx> {\n     ctxt: &'a mut ElaborateDropsCtxt<'b, 'tcx>,\n }\n \n-impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> {\n+impl fmt::Debug for Elaborator<'_, '_, '_> {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n \n-impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n+impl<'a, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, '_, 'tcx> {\n     type Path = MovePathIndex;\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> {"}, {"sha": "05834b443d0d9d0552d4b2e78fd6a6dabde1c7ff", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -27,7 +27,7 @@ struct FunctionItemRefChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n     /// Emits a lint for function reference arguments bound by `fmt::Pointer` or passed to\n     /// `transmute`. This only handles arguments in calls outside macro expansions to avoid double\n     /// counting function references formatted as pointers by macros.\n@@ -92,7 +92,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n+impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n     /// Emits a lint for function reference arguments bound by `fmt::Pointer` in calls to the\n     /// function defined by `def_id` with the substitutions `substs_ref`.\n     fn check_bound_args("}, {"sha": "6220cee8d21627170426bfc7fbdfd4ffffae4e06", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -233,7 +233,7 @@ struct TransformVisitor<'tcx> {\n     new_ret_local: Local,\n }\n \n-impl TransformVisitor<'tcx> {\n+impl<'tcx> TransformVisitor<'tcx> {\n     // Make a GeneratorState variant assignment. `core::ops::GeneratorState` only has single\n     // element tuple variants, so we can just write to the downcasted first field and then set the\n     // discriminant to the appropriate variant.\n@@ -295,7 +295,7 @@ impl TransformVisitor<'tcx> {\n     }\n }\n \n-impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for TransformVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -446,7 +446,7 @@ struct LivenessInfo {\n     storage_liveness: IndexVec<BasicBlock, Option<BitSet<Local>>>,\n }\n \n-fn locals_live_across_suspend_points(\n+fn locals_live_across_suspend_points<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     always_live_locals: &storage::AlwaysLiveLocals,\n@@ -613,7 +613,7 @@ impl ops::Deref for GeneratorSavedLocals {\n /// time. Generates a bitset for every local of all the other locals that may be\n /// StorageLive simultaneously with that local. This is used in the layout\n /// computation; see `GeneratorLayout` for more.\n-fn compute_storage_conflicts(\n+fn compute_storage_conflicts<'mir, 'tcx>(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n     always_live_locals: storage::AlwaysLiveLocals,\n@@ -672,7 +672,9 @@ struct StorageConflictVisitor<'mir, 'tcx, 's> {\n     local_conflicts: BitMatrix<Local, Local>,\n }\n \n-impl rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'mir, 'tcx, '_> {\n+impl<'mir, 'tcx> rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx>\n+    for StorageConflictVisitor<'mir, 'tcx, '_>\n+{\n     type FlowState = BitSet<Local>;\n \n     fn visit_statement_before_primary_effect(\n@@ -694,7 +696,7 @@ impl rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'\n     }\n }\n \n-impl<'body, 'tcx, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n+impl StorageConflictVisitor<'_, '_, '_> {\n     fn apply_state(&mut self, flow_state: &BitSet<Local>, loc: Location) {\n         // Ignore unreachable blocks.\n         if self.body.basic_blocks()[loc.block].terminator().kind == TerminatorKind::Unreachable {\n@@ -1398,7 +1400,7 @@ impl EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n         self.saved_locals.get(place.local)\n     }\n \n-    fn check_assigned_place(&mut self, place: Place<'tcx>, f: impl FnOnce(&mut Self)) {\n+    fn check_assigned_place(&mut self, place: Place<'_>, f: impl FnOnce(&mut Self)) {\n         if let Some(assigned_local) = self.saved_local_for_direct_place(place) {\n             assert!(self.assigned_local.is_none(), \"`check_assigned_place` must not recurse\");\n \n@@ -1409,7 +1411,7 @@ impl EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n     }\n }\n \n-impl Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n+impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n     fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n         let lhs = match self.assigned_local {\n             Some(l) => l,"}, {"sha": "558b1ce082e40ca25151d7c7d40d4e31cde5050b", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MirPass<'tcx> for Inline {\n     }\n }\n \n-fn inline(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n+fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     let def_id = body.source.def_id();\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n \n@@ -95,7 +95,7 @@ struct Inliner<'tcx> {\n     changed: bool,\n }\n \n-impl Inliner<'tcx> {\n+impl<'tcx> Inliner<'tcx> {\n     fn process_blocks(&mut self, caller_body: &mut Body<'tcx>, blocks: Range<BasicBlock>) {\n         for bb in blocks {\n             let bb_data = &caller_body[bb];\n@@ -786,7 +786,7 @@ struct Integrator<'a, 'tcx> {\n     always_live_locals: BitSet<Local>,\n }\n \n-impl<'a, 'tcx> Integrator<'a, 'tcx> {\n+impl Integrator<'_, '_> {\n     fn map_local(&self, local: Local) -> Local {\n         let new = if local == RETURN_PLACE {\n             self.destination.local\n@@ -815,7 +815,7 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "747e760a18b92e8a88f6717614288d495e260612", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -10,7 +10,7 @@ use rustc_session::Limit;\n // FIXME: check whether it is cheaper to precompute the entire call graph instead of invoking\n // this query riddiculously often.\n #[instrument(level = \"debug\", skip(tcx, root, target))]\n-crate fn mir_callgraph_reachable(\n+crate fn mir_callgraph_reachable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (root, target): (ty::Instance<'tcx>, LocalDefId),\n ) -> bool {\n@@ -33,7 +33,7 @@ crate fn mir_callgraph_reachable(\n         level = \"debug\",\n         skip(tcx, param_env, target, stack, seen, recursion_limiter, caller, recursion_limit)\n     )]\n-    fn process(\n+    fn process<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         caller: ty::Instance<'tcx>,"}, {"sha": "792ac68671efb1f47c8ce0bad49d8d9b8c7c15f7", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -38,7 +38,7 @@ struct InstCombineContext<'tcx, 'a> {\n     local_decls: &'a LocalDecls<'tcx>,\n }\n \n-impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n+impl<'tcx> InstCombineContext<'tcx, '_> {\n     fn should_combine(&self, source_info: &SourceInfo, rvalue: &Rvalue<'tcx>) -> bool {\n         self.tcx.consider_optimizing(|| {\n             format!(\"InstCombine - Rvalue: {:?} SourceInfo: {:?}\", rvalue, source_info)"}, {"sha": "0e7488aa98eee5eac87603a03d1183a6683d23d2", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,7 +1,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n@@ -150,7 +149,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n         tcx: TyCtxt<'tcx>,\n         set: &'a mut FxHashSet<LocalDefId>,\n     }\n-    impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n         fn visit_variant_data(\n             &mut self,\n             v: &'tcx hir::VariantData<'tcx>,\n@@ -243,7 +242,7 @@ fn mir_const<'tcx>(\n }\n \n /// Compute the main MIR body and the list of MIR bodies of the promoteds.\n-fn mir_promoted(\n+fn mir_promoted<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n@@ -480,8 +479,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,\n             //\n-            // FIXME: The old pass manager ran this only at mir-opt-level >= 1, but\n-            // const-prop runs unconditionally. Should this run unconditionally as well?\n+            // Const-prop runs unconditionally, but doesn't mutate the MIR at mir-opt-level=0.\n             &o1(simplify_branches::SimplifyConstCondition::new(\"after-const-prop\")),\n             &early_otherwise_branch::EarlyOtherwiseBranch,\n             &simplify_comparison_integral::SimplifyComparisonIntegral,"}, {"sha": "4c4497ad629da7c2d4428f0f5223e57863bba5ed", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n     }\n }\n \n-fn resolve_rust_intrinsic(\n+fn resolve_rust_intrinsic<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     func_ty: Ty<'tcx>,\n ) -> Option<(Symbol, SubstsRef<'tcx>)> {\n@@ -148,7 +148,7 @@ fn resolve_rust_intrinsic(\n     None\n }\n \n-fn validate_simd_shuffle(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span) {\n+fn validate_simd_shuffle<'tcx>(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span) {\n     match &args[2] {\n         Operand::Constant(_) => {} // all good\n         _ => {"}, {"sha": "e4ac57ac92508bd6d626321541823b127c32f7d2", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -85,7 +85,7 @@ struct Patcher<'a, 'tcx> {\n     statement_idx: usize,\n }\n \n-impl<'a, 'tcx> Patcher<'a, 'tcx> {\n+impl<'tcx> Patcher<'_, 'tcx> {\n     fn patch_expand_statement(\n         &mut self,\n         statement: &mut Statement<'tcx>,"}, {"sha": "797f7ee2685b83ed424d0d87d39b1a6fdd9b6819", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -165,7 +165,7 @@ struct RenameToReturnPlace<'tcx> {\n }\n \n /// Replaces all uses of `self.to_rename` with `_0`.\n-impl MutVisitor<'tcx> for RenameToReturnPlace<'tcx> {\n+impl<'tcx> MutVisitor<'tcx> for RenameToReturnPlace<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -221,7 +221,7 @@ impl IsReturnPlaceRead {\n     }\n }\n \n-impl Visitor<'tcx> for IsReturnPlaceRead {\n+impl<'tcx> Visitor<'tcx> for IsReturnPlaceRead {\n     fn visit_local(&mut self, &l: &Local, ctxt: PlaceContext, _: Location) {\n         if l == mir::RETURN_PLACE && ctxt.is_use() && !ctxt.is_place_assignment() {\n             self.0 = true;"}, {"sha": "8725eae870917856985ed83b281d416351183b9c", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -28,7 +28,7 @@ pub trait MirLint<'tcx> {\n #[derive(Debug, Clone)]\n pub struct Lint<T>(pub T);\n \n-impl<T> MirPass<'tcx> for Lint<T>\n+impl<'tcx, T> MirPass<'tcx> for Lint<T>\n where\n     T: MirLint<'tcx>,\n {\n@@ -51,7 +51,7 @@ where\n \n pub struct WithMinOptLevel<T>(pub u32, pub T);\n \n-impl<T> MirPass<'tcx> for WithMinOptLevel<T>\n+impl<'tcx, T> MirPass<'tcx> for WithMinOptLevel<T>\n where\n     T: MirPass<'tcx>,\n {\n@@ -72,7 +72,7 @@ where\n     }\n }\n \n-pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n+pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn MirPass<'tcx>]) {\n     let start_phase = body.phase;\n     let mut cnt = 0;\n \n@@ -119,11 +119,11 @@ pub fn run_passes(tcx: TyCtxt<'tcx>, body: &'mir mut Body<'tcx>, passes: &[&dyn\n     }\n }\n \n-pub fn validate_body(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n+pub fn validate_body<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {\n     validate::Validator { when, mir_phase: body.phase }.run_pass(tcx, body);\n }\n \n-pub fn dump_mir(\n+pub fn dump_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     phase: MirPhase,"}, {"sha": "fc5ac97e3e1dc47485b257909ac22752702b58d7", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n     }\n }\n \n-fn is_needs_drop_and_init(\n+fn is_needs_drop_and_init<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     maybe_inits: &BitSet<MovePathIndex>,\n@@ -158,7 +158,7 @@ fn is_needs_drop_and_init(\n     }\n }\n \n-fn variant_needs_drop(\n+fn variant_needs_drop<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     substs: SubstsRef<'tcx>,"}, {"sha": "80c87cafea1016afe42477322df728e3dba090be", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -12,7 +12,7 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         if let Some(ct) = constant.literal.const_for_ty() {\n             if let ConstKind::Unevaluated(_) = ct.val {"}, {"sha": "612fce71f9167a1bf88df39dc130c0fdf6ceaf30", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n }\n \n /// Returns the amount of blocks that were duplicated\n-pub fn separate_const_switch<'tcx>(body: &mut Body<'tcx>) -> usize {\n+pub fn separate_const_switch(body: &mut Body<'_>) -> usize {\n     let mut new_blocks: SmallVec<[(BasicBlock, BasicBlock); 6]> = SmallVec::new();\n     let predecessors = body.predecessors();\n     'block_iter: for (block_id, block) in body.basic_blocks().iter_enumerated() {"}, {"sha": "d0039380361444119504ce6cecd8601cb196a797", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -64,7 +64,19 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n \n             build_call_shim(tcx, instance, Some(Adjustment::RefMut), CallKind::Direct(call_mut))\n         }\n-        ty::InstanceDef::DropGlue(def_id, ty) => build_drop_shim(tcx, def_id, ty),\n+\n+        ty::InstanceDef::DropGlue(def_id, ty) => {\n+            // FIXME(#91576): Drop shims for generators aren't subject to the MIR passes at the end\n+            // of this function. Is this intentional?\n+            if let Some(ty::Generator(gen_def_id, substs, _)) = ty.map(ty::TyS::kind) {\n+                let body = tcx.optimized_mir(*gen_def_id).generator_drop().unwrap();\n+                let body = body.clone().subst(tcx, substs);\n+                debug!(\"make_shim({:?}) = {:?}\", instance, body);\n+                return body;\n+            }\n+\n+            build_drop_shim(tcx, def_id, ty)\n+        }\n         ty::InstanceDef::CloneShim(def_id, ty) => build_clone_shim(tcx, def_id, ty),\n         ty::InstanceDef::Virtual(..) => {\n             bug!(\"InstanceDef::Virtual ({:?}) is for direct calls only\", instance)\n@@ -75,14 +87,6 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n \n-    // In some of the above cases, we seem to be invoking the passes for non-shim MIR bodies.\n-    // If that happens, there's no need to run them again.\n-    //\n-    // FIXME: Is this intentional?\n-    if result.phase >= MirPhase::Const {\n-        return result;\n-    }\n-\n     pm::run_passes(\n         tcx,\n         &mut result,\n@@ -140,11 +144,7 @@ fn local_decls_for_sig<'tcx>(\n fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>) -> Body<'tcx> {\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n-    // Check if this is a generator, if so, return the drop glue for it\n-    if let Some(&ty::Generator(gen_def_id, substs, _)) = ty.map(|ty| ty.kind()) {\n-        let body = tcx.optimized_mir(gen_def_id).generator_drop().unwrap();\n-        return body.clone().subst(tcx, substs);\n-    }\n+    assert!(!matches!(ty, Some(ty) if ty.is_generator()));\n \n     let substs = if let Some(ty) = ty {\n         tcx.intern_substs(&[ty.into()])\n@@ -247,7 +247,7 @@ pub struct DropShimElaborator<'a, 'tcx> {\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> {\n+impl fmt::Debug for DropShimElaborator<'_, '_> {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         Ok(())\n     }\n@@ -337,7 +337,7 @@ struct CloneShimBuilder<'tcx> {\n     sig: ty::FnSig<'tcx>,\n }\n \n-impl CloneShimBuilder<'tcx> {\n+impl<'tcx> CloneShimBuilder<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -> Self {\n         // we must subst the self_ty because it's\n         // otherwise going to be TySelf and we can't index"}, {"sha": "7992124bacd43d924c7252578a435bf510d94bac", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -47,7 +47,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     CfgSimplifier::new(body).simplify();\n     remove_dead_blocks(tcx, body);\n \n@@ -262,7 +262,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(tcx: TyCtxt<'tcx>, body: &mut Body<'_>) {\n+pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let reachable = traversal::reachable_as_bitset(body);\n     let num_blocks = body.basic_blocks().len();\n     if num_blocks == reachable.count() {\n@@ -454,7 +454,7 @@ impl UsedLocals {\n     }\n \n     /// Updates the use counts to reflect the removal of given statement.\n-    fn statement_removed(&mut self, statement: &Statement<'tcx>) {\n+    fn statement_removed(&mut self, statement: &Statement<'_>) {\n         self.increment = false;\n \n         // The location of the statement is irrelevant.\n@@ -463,7 +463,7 @@ impl UsedLocals {\n     }\n \n     /// Visits a left-hand side of an assignment.\n-    fn visit_lhs(&mut self, place: &Place<'tcx>, location: Location) {\n+    fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {\n         if place.is_indirect() {\n             // A use, not a definition.\n             self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);\n@@ -480,7 +480,7 @@ impl UsedLocals {\n     }\n }\n \n-impl Visitor<'_> for UsedLocals {\n+impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::LlvmInlineAsm(..)\n@@ -518,7 +518,7 @@ impl Visitor<'_> for UsedLocals {\n }\n \n /// Removes unused definitions. Updates the used locals to reflect the changes made.\n-fn remove_unused_definitions<'a, 'tcx>(used_locals: &'a mut UsedLocals, body: &mut Body<'tcx>) {\n+fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {\n     // The use counts are updated as we remove the statements. A local might become unused\n     // during the retain operation, leading to a temporary inconsistency (storage statements or\n     // definitions referencing the local might remain). For correctness it is crucial that this"}, {"sha": "da683a33651d69c4e5f41cf3961d68398da5c3b5", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -148,7 +148,7 @@ struct OptimizationFinder<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n }\n \n-impl<'a, 'tcx> OptimizationFinder<'a, 'tcx> {\n+impl<'tcx> OptimizationFinder<'_, 'tcx> {\n     fn find_optimizations(&self) -> Vec<OptimizationInfo<'tcx>> {\n         self.body\n             .basic_blocks()"}, {"sha": "7761d4006d3dbd06f4cea316e70ef823360603e9", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -102,7 +102,7 @@ fn get_arm_identity_info<'a, 'tcx>(\n \n     type StmtIter<'a, 'tcx> = Peekable<Enumerate<Iter<'a, Statement<'tcx>>>>;\n \n-    fn is_storage_stmt<'tcx>(stmt: &Statement<'tcx>) -> bool {\n+    fn is_storage_stmt(stmt: &Statement<'_>) -> bool {\n         matches!(stmt.kind, StatementKind::StorageLive(_) | StatementKind::StorageDead(_))\n     }\n \n@@ -122,8 +122,8 @@ fn get_arm_identity_info<'a, 'tcx>(\n \n     /// Eats consecutive `StorageLive` and `StorageDead` Statements.\n     /// The iterator `stmt_iter` is not advanced if none were found.\n-    fn try_eat_storage_stmts<'a, 'tcx>(\n-        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+    fn try_eat_storage_stmts(\n+        stmt_iter: &mut StmtIter<'_, '_>,\n         storage_live_stmts: &mut Vec<(usize, Local)>,\n         storage_dead_stmts: &mut Vec<(usize, Local)>,\n     ) {\n@@ -136,7 +136,7 @@ fn get_arm_identity_info<'a, 'tcx>(\n         })\n     }\n \n-    fn is_tmp_storage_stmt<'tcx>(stmt: &Statement<'tcx>) -> bool {\n+    fn is_tmp_storage_stmt(stmt: &Statement<'_>) -> bool {\n         use rustc_middle::mir::StatementKind::Assign;\n         if let Assign(box (place, Rvalue::Use(Operand::Copy(p) | Operand::Move(p)))) = &stmt.kind {\n             place.as_local().is_some() && p.as_local().is_some()\n@@ -147,8 +147,8 @@ fn get_arm_identity_info<'a, 'tcx>(\n \n     /// Eats consecutive `Assign` Statements.\n     // The iterator `stmt_iter` is not advanced if none were found.\n-    fn try_eat_assign_tmp_stmts<'a, 'tcx>(\n-        stmt_iter: &mut StmtIter<'a, 'tcx>,\n+    fn try_eat_assign_tmp_stmts(\n+        stmt_iter: &mut StmtIter<'_, '_>,\n         tmp_assigns: &mut Vec<(Local, Local)>,\n         nop_stmts: &mut Vec<usize>,\n     ) {\n@@ -163,9 +163,9 @@ fn get_arm_identity_info<'a, 'tcx>(\n         })\n     }\n \n-    fn find_storage_live_dead_stmts_for_local<'tcx>(\n+    fn find_storage_live_dead_stmts_for_local(\n         local: Local,\n-        stmts: &[Statement<'tcx>],\n+        stmts: &[Statement<'_>],\n     ) -> Option<(usize, usize)> {\n         trace!(\"looking for {:?}\", local);\n         let mut storage_live_stmt = None;\n@@ -452,14 +452,14 @@ struct LocalUseCounter {\n }\n \n impl LocalUseCounter {\n-    fn get_local_uses<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, usize> {\n+    fn get_local_uses(body: &Body<'_>) -> IndexVec<Local, usize> {\n         let mut counter = LocalUseCounter { local_uses: IndexVec::from_elem(0, &body.local_decls) };\n         counter.visit_body(body);\n         counter.local_uses\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n+impl Visitor<'_> for LocalUseCounter {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n         if context.is_storage_marker()\n             || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n@@ -510,7 +510,7 @@ fn match_set_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local\n /// ```rust\n /// discriminant(_LOCAL_TO_SET) = VAR_IDX;\n /// ```\n-fn match_set_discr<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, VariantIdx)> {\n+fn match_set_discr(stmt: &Statement<'_>) -> Option<(Local, VariantIdx)> {\n     match &stmt.kind {\n         StatementKind::SetDiscriminant { place, variant_index } => {\n             Some((place.as_local()?, *variant_index))\n@@ -588,7 +588,7 @@ struct SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n+impl<'tcx> SimplifyBranchSameOptimizationFinder<'_, 'tcx> {\n     fn find(&self) -> Vec<SimplifyBranchSameOptimization> {\n         self.body\n             .basic_blocks()"}, {"sha": "9e755ab141a489e5860075e21887648b93bce2a5", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -64,7 +64,7 @@ impl MirPass<'_> for UnreachablePropagation {\n     }\n }\n \n-fn remove_successors<F>(\n+fn remove_successors<'tcx, F>(\n     terminator_kind: &TerminatorKind<'tcx>,\n     predicate: F,\n ) -> Option<TerminatorKind<'tcx>>"}, {"sha": "ca92d6b7fd04df4aa5a30b3b0541d7df1e4e1a7c", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,4 +1,4 @@\n-use super::{AttrWrapper, Capturing, ForceCollect, Parser, PathStyle};\n+use super::{AttrWrapper, Capturing, FnParseMode, ForceCollect, Parser, PathStyle};\n use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n@@ -177,7 +177,7 @@ impl<'a> Parser<'a> {\n             AttrWrapper::empty(),\n             true,\n             false,\n-            |_| true,\n+            FnParseMode { req_name: |_| true, req_body: true },\n             ForceCollect::No,\n         ) {\n             Ok(Some(item)) => {"}, {"sha": "8e2e6eaee58ef298e324ce9f3e3b20acf0dfd2ed", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1129,7 +1129,8 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n-        if self.eat(&token::Semi) {\n+        if self.token.kind == TokenKind::Semi {\n+            self.bump();\n             let mut err = self.struct_span_err(self.prev_token.span, \"expected item, found `;`\");\n             err.span_suggestion_short(\n                 self.prev_token.span,"}, {"sha": "831c64e3faf037e3f9ccf8626f076f3b7e97e64e", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 98, "deletions": 22, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -78,24 +78,25 @@ pub(super) type ItemInfo = (Ident, ItemKind);\n \n impl<'a> Parser<'a> {\n     pub fn parse_item(&mut self, force_collect: ForceCollect) -> PResult<'a, Option<P<Item>>> {\n-        self.parse_item_(|_| true, force_collect).map(|i| i.map(P))\n+        let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+        self.parse_item_(fn_parse_mode, force_collect).map(|i| i.map(P))\n     }\n \n     fn parse_item_(\n         &mut self,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Item>> {\n         let attrs = self.parse_outer_attributes()?;\n-        self.parse_item_common(attrs, true, false, req_name, force_collect)\n+        self.parse_item_common(attrs, true, false, fn_parse_mode, force_collect)\n     }\n \n     pub(super) fn parse_item_common(\n         &mut self,\n         attrs: AttrWrapper,\n         mac_allowed: bool,\n         attrs_allowed: bool,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Item>> {\n         // Don't use `maybe_whole` so that we have precise control\n@@ -113,7 +114,8 @@ impl<'a> Parser<'a> {\n         let mut unclosed_delims = vec![];\n         let item =\n             self.collect_tokens_trailing_token(attrs, force_collect, |this: &mut Self, attrs| {\n-                let item = this.parse_item_common_(attrs, mac_allowed, attrs_allowed, req_name);\n+                let item =\n+                    this.parse_item_common_(attrs, mac_allowed, attrs_allowed, fn_parse_mode);\n                 unclosed_delims.append(&mut this.unclosed_delims);\n                 Ok((item?, TrailingToken::None))\n             })?;\n@@ -127,12 +129,13 @@ impl<'a> Parser<'a> {\n         mut attrs: Vec<Attribute>,\n         mac_allowed: bool,\n         attrs_allowed: bool,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n     ) -> PResult<'a, Option<Item>> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let mut def = self.parse_defaultness();\n-        let kind = self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, req_name)?;\n+        let kind =\n+            self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, fn_parse_mode)?;\n         if let Some((ident, kind)) = kind {\n             self.error_on_unconsumed_default(def, &kind);\n             let span = lo.to(self.prev_token.span);\n@@ -192,7 +195,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         vis: &Visibility,\n         def: &mut Defaultness,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n     ) -> PResult<'a, Option<ItemInfo>> {\n         let def_final = def == &Defaultness::Final;\n         let mut def = || mem::replace(def, Defaultness::Final);\n@@ -219,7 +222,7 @@ impl<'a> Parser<'a> {\n             (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo)?;\n             (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -733,23 +736,26 @@ impl<'a> Parser<'a> {\n         &mut self,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        self.parse_assoc_item(|_| true, force_collect)\n+        let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+        self.parse_assoc_item(fn_parse_mode, force_collect)\n     }\n \n     pub fn parse_trait_item(\n         &mut self,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        self.parse_assoc_item(|edition| edition >= Edition::Edition2018, force_collect)\n+        let fn_parse_mode =\n+            FnParseMode { req_name: |edition| edition >= Edition::Edition2018, req_body: false };\n+        self.parse_assoc_item(fn_parse_mode, force_collect)\n     }\n \n     /// Parses associated items.\n     fn parse_assoc_item(\n         &mut self,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        Ok(self.parse_item_(req_name, force_collect)?.map(\n+        Ok(self.parse_item_(fn_parse_mode, force_collect)?.map(\n             |Item { attrs, id, span, vis, ident, kind, tokens }| {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n@@ -944,7 +950,8 @@ impl<'a> Parser<'a> {\n         &mut self,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n-        Ok(self.parse_item_(|_| true, force_collect)?.map(\n+        let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: false };\n+        Ok(self.parse_item_(fn_parse_mode, force_collect)?.map(\n             |Item { attrs, id, span, vis, ident, kind, tokens }| {\n                 let kind = match ForeignItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n@@ -1484,7 +1491,8 @@ impl<'a> Parser<'a> {\n         if !is_raw && ident.is_reserved() {\n             let err = if self.check_fn_front_matter(false) {\n                 // We use `parse_fn` to get a span for the function\n-                if let Err(mut db) = self.parse_fn(&mut Vec::new(), |_| true, lo) {\n+                let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo) {\n                     db.delay_as_bug();\n                 }\n                 let mut err = self.struct_span_err(\n@@ -1698,25 +1706,82 @@ impl<'a> Parser<'a> {\n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n ///\n /// The function decides if, per-parameter `p`, `p` must have a pattern or just a type.\n+///\n+/// This function pointer accepts an edition, because in edition 2015, trait declarations\n+/// were allowed to omit parameter names. In 2018, they became required.\n type ReqName = fn(Edition) -> bool;\n \n+/// Parsing configuration for functions.\n+///\n+/// The syntax of function items is slightly different within trait definitions,\n+/// impl blocks, and modules. It is still parsed using the same code, just with\n+/// different flags set, so that even when the input is wrong and produces a parse\n+/// error, it still gets into the AST and the rest of the parser and\n+/// type checker can run.\n+#[derive(Clone, Copy)]\n+pub(crate) struct FnParseMode {\n+    /// A function pointer that decides if, per-parameter `p`, `p` must have a\n+    /// pattern or just a type. This field affects parsing of the parameters list.\n+    ///\n+    /// ```text\n+    /// fn foo(alef: A) -> X { X::new() }\n+    ///        -----^^ affects parsing this part of the function signature\n+    ///        |\n+    ///        if req_name returns false, then this name is optional\n+    ///\n+    /// fn bar(A) -> X;\n+    ///        ^\n+    ///        |\n+    ///        if req_name returns true, this is an error\n+    /// ```\n+    ///\n+    /// Calling this function pointer should only return false if:\n+    ///\n+    ///   * The item is being parsed inside of a trait definition.\n+    ///     Within an impl block or a module, it should always evaluate\n+    ///     to true.\n+    ///   * The span is from Edition 2015. In particular, you can get a\n+    ///     2015 span inside a 2021 crate using macros.\n+    pub req_name: ReqName,\n+    /// If this flag is set to `true`, then plain, semicolon-terminated function\n+    /// prototypes are not allowed here.\n+    ///\n+    /// ```text\n+    /// fn foo(alef: A) -> X { X::new() }\n+    ///                      ^^^^^^^^^^^^\n+    ///                      |\n+    ///                      this is always allowed\n+    ///\n+    /// fn bar(alef: A, bet: B) -> X;\n+    ///                             ^\n+    ///                             |\n+    ///                             if req_body is set to true, this is an error\n+    /// ```\n+    ///\n+    /// This field should only be set to false if the item is inside of a trait\n+    /// definition or extern block. Within an impl block or a module, it should\n+    /// always be set to true.\n+    pub req_body: bool,\n+}\n+\n /// Parsing of functions and methods.\n impl<'a> Parser<'a> {\n     /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n     fn parse_fn(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         sig_lo: Span,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n         let header = self.parse_fn_front_matter()?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n-        let decl = self.parse_fn_decl(req_name, AllowPlus::Yes, RecoverReturnSign::Yes)?; // `(p: u8, ...)`\n+        let decl =\n+            self.parse_fn_decl(fn_parse_mode.req_name, AllowPlus::Yes, RecoverReturnSign::Yes)?; // `(p: u8, ...)`\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n \n         let mut sig_hi = self.prev_token.span;\n-        let body = self.parse_fn_body(attrs, &ident, &mut sig_hi)?; // `;` or `{ ... }`.\n+        let body = self.parse_fn_body(attrs, &ident, &mut sig_hi, fn_parse_mode.req_body)?; // `;` or `{ ... }`.\n         let fn_sig_span = sig_lo.to(sig_hi);\n         Ok((ident, FnSig { header, decl, span: fn_sig_span }, generics, body))\n     }\n@@ -1729,9 +1794,17 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         ident: &Ident,\n         sig_hi: &mut Span,\n+        req_body: bool,\n     ) -> PResult<'a, Option<P<Block>>> {\n-        let (inner_attrs, body) = if self.eat(&token::Semi) {\n+        let has_semi = if req_body {\n+            self.token.kind == TokenKind::Semi\n+        } else {\n+            // Only include `;` in list of expected tokens if body is not required\n+            self.check(&TokenKind::Semi)\n+        };\n+        let (inner_attrs, body) = if has_semi {\n             // Include the trailing semicolon in the span of the signature\n+            self.expect_semi()?;\n             *sig_hi = self.prev_token.span;\n             (Vec::new(), None)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n@@ -1752,9 +1825,12 @@ impl<'a> Parser<'a> {\n                 .emit();\n             (Vec::new(), Some(self.mk_block_err(span)))\n         } else {\n-            if let Err(mut err) =\n-                self.expected_one_of_not_found(&[], &[token::Semi, token::OpenDelim(token::Brace)])\n-            {\n+            let expected = if req_body {\n+                &[token::OpenDelim(token::Brace)][..]\n+            } else {\n+                &[token::Semi, token::OpenDelim(token::Brace)]\n+            };\n+            if let Err(mut err) = self.expected_one_of_not_found(&[], &expected) {\n                 if self.token.kind == token::CloseDelim(token::Brace) {\n                     // The enclosing `mod`, `trait` or `impl` is being closed, so keep the `fn` in\n                     // the AST for typechecking."}, {"sha": "6d534bece463e7461402de3762afa9be2ea8df4a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -14,6 +14,7 @@ use crate::lexer::UnmatchedBrace;\n pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n+pub(crate) use item::FnParseMode;\n pub use pat::{RecoverColon, RecoverComma};\n pub use path::PathStyle;\n "}, {"sha": "d3e7d1690ccf6bcd8de52d420b97e9b1faf8e360", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -4,7 +4,9 @@ use super::expr::LhsExpr;\n use super::pat::RecoverComma;\n use super::path::PathStyle;\n use super::TrailingToken;\n-use super::{AttrWrapper, BlockMode, ForceCollect, Parser, Restrictions, SemiColonMode};\n+use super::{\n+    AttrWrapper, BlockMode, FnParseMode, ForceCollect, Parser, Restrictions, SemiColonMode,\n+};\n use crate::maybe_whole;\n \n use rustc_ast as ast;\n@@ -79,9 +81,13 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.parse_stmt_path_start(lo, attrs)\n             }?\n-        } else if let Some(item) =\n-            self.parse_item_common(attrs.clone(), false, true, |_| true, force_collect)?\n-        {\n+        } else if let Some(item) = self.parse_item_common(\n+            attrs.clone(),\n+            false,\n+            true,\n+            FnParseMode { req_name: |_| true, req_body: true },\n+            force_collect,\n+        )? {\n             // FIXME: Bad copy of attrs\n             self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n         } else if self.eat(&token::Semi) {"}, {"sha": "019b64c395eda5dbe38288ed8782b025125208f5", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -81,9 +81,9 @@\n //! [`OsStr`] and Rust strings work similarly to those for [`CString`]\n //! and [`CStr`].\n //!\n-//! * [`OsString`] represents an owned string in whatever\n-//! representation the operating system prefers. In the Rust standard\n-//! library, various APIs that transfer strings to/from the operating\n+//! * [`OsString`] losslessly represents an owned platform string. However, this\n+//! representation is not necessarily in a form native to the platform.\n+//! In the Rust standard library, various APIs that transfer strings to/from the operating\n //! system use [`OsString`] instead of plain strings. For example,\n //! [`env::var_os()`] is used to query environment variables; it\n //! returns an <code>[Option]<[OsString]></code>. If the environment variable\n@@ -92,9 +92,9 @@\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n-//! * [`OsStr`] represents a borrowed reference to a string in a\n-//! format that can be passed to the operating system. It can be\n-//! converted into a UTF-8 Rust string slice in a similar way to\n+//! * [`OsStr`] losslessly represents a borrowed reference to a platform string.\n+//! However, this representation is not necessarily in a form native to the platform.\n+//! It can be converted into a UTF-8 Rust string slice in a similar way to\n //! [`OsString`].\n //!\n //! # Conversions\n@@ -113,16 +113,19 @@\n //!\n //! ## On Windows\n //!\n+//! An [`OsStr`] can be losslessly converted to a native Windows string. And\n+//! a native Windows string can be losslessly converted to an [`OsString`].\n+//!\n //! On Windows, [`OsStr`] implements the\n //! <code>std::os::windows::ffi::[OsStrExt][windows.OsStrExt]</code> trait,\n //! which provides an [`encode_wide`] method. This provides an\n-//! iterator that can be [`collect`]ed into a vector of [`u16`].\n+//! iterator that can be [`collect`]ed into a vector of [`u16`]. After a nul\n+//! characters is appended, this is the same as a native Windows string.\n //!\n //! Additionally, on Windows [`OsString`] implements the\n //! <code>std::os::windows:ffi::[OsStringExt][windows.OsStringExt]</code>\n-//! trait, which provides a [`from_wide`] method. The result of this\n-//! method is an [`OsString`] which can be round-tripped to a Windows\n-//! string losslessly.\n+//! trait, which provides a [`from_wide`] method to convert a native Windows\n+//! string (without the terminating nul character) to an [`OsString`].\n //!\n //! [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n //! [Unicode code point]: https://www.unicode.org/glossary/#code_point"}, {"sha": "ab588ccc24999cb80bcd52c1a4da4db203770a4b", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,5 +1,18 @@\n+FROM ubuntu:20.04\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+        curl \\\n+        ca-certificates\n+WORKDIR /tmp\n+RUN curl -f https://curl.se/ca/cacert.pem -o cacert.pem\n+\n FROM ubuntu:16.04\n \n+# The ca-certificates in ubuntu-16 is too old, so update the certificates\n+# with something more recent.\n+COPY --from=0 /tmp/cacert.pem /tmp/cacert.pem\n+ENV CURL_CA_BUNDLE /tmp/cacert.pem\n+\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n "}, {"sha": "ee4fd759b469b60ddb82b9ae29eedacf3933117d", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/Dockerfile", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,5 +1,18 @@\n+FROM ubuntu:20.04\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+        curl \\\n+        ca-certificates\n+WORKDIR /tmp\n+RUN curl -f https://curl.se/ca/cacert.pem -o cacert.pem\n+\n FROM ubuntu:16.04\n \n+# The ca-certificates in ubuntu-16 is too old, so update the certificates\n+# with something more recent.\n+COPY --from=0 /tmp/cacert.pem /tmp/cacert.pem\n+ENV CURL_CA_BUNDLE /tmp/cacert.pem\n+\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n "}, {"sha": "b11a1d3feb2eefa5f44efd2a915f26d553b71f4c", "filename": "src/ci/docker/host-x86_64/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,5 +1,18 @@\n+FROM ubuntu:20.04\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+        curl \\\n+        ca-certificates\n+WORKDIR /tmp\n+RUN curl -f https://curl.se/ca/cacert.pem -o cacert.pem\n+\n FROM ubuntu:16.04\n \n+# The ca-certificates in ubuntu-16 is too old, so update the certificates\n+# with something more recent.\n+COPY --from=0 /tmp/cacert.pem /tmp/cacert.pem\n+ENV CURL_CA_BUNDLE /tmp/cacert.pem\n+\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n "}, {"sha": "55ca23b293d5e2336b801b15991e71097f30d84c", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,5 +1,18 @@\n+FROM ubuntu:20.04\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+        curl \\\n+        ca-certificates\n+WORKDIR /tmp\n+RUN curl -f https://curl.se/ca/cacert.pem -o cacert.pem\n+\n FROM ubuntu:16.04\n \n+# The ca-certificates in ubuntu-16 is too old, so update the certificates\n+# with something more recent.\n+COPY --from=0 /tmp/cacert.pem /tmp/cacert.pem\n+ENV CURL_CA_BUNDLE /tmp/cacert.pem\n+\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n "}, {"sha": "1e0f5d79c0b426cf461417a8077192b2b0461d1b", "filename": "src/test/ui/cfg/auxiliary/crate-attributes-using-cfg_attr.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce0f7baf5651606c706b7014b5abdaa930cf2600/src%2Ftest%2Fui%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0f7baf5651606c706b7014b5abdaa930cf2600/src%2Ftest%2Fui%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs?ref=ce0f7baf5651606c706b7014b5abdaa930cf2600", "patch": "@@ -1,6 +0,0 @@\n-// no-prefer-dynamic\n-// compile-flags: --cfg foo\n-\n-#![cfg_attr(foo, crate_type=\"lib\")]\n-\n-pub fn foo() {}"}, {"sha": "43b266b778f0eeb4c689dfc51d03041339621dfb", "filename": "src/test/ui/cfg/crate-attributes-using-cfg_attr.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce0f7baf5651606c706b7014b5abdaa930cf2600/src%2Ftest%2Fui%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0f7baf5651606c706b7014b5abdaa930cf2600/src%2Ftest%2Fui%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcrate-attributes-using-cfg_attr.rs?ref=ce0f7baf5651606c706b7014b5abdaa930cf2600", "patch": "@@ -1,6 +0,0 @@\n-// run-pass\n-// aux-build:crate-attributes-using-cfg_attr.rs\n-\n-extern crate crate_attributes_using_cfg_attr;\n-\n-pub fn main() {}"}, {"sha": "ef12b05fab23723c9fa2084f2c36d0e62be657b5", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,12 @@\n+// check-fail\n+// compile-flags:--cfg foo\n+\n+#![deny(warnings)]\n+#![cfg_attr(foo, crate_type=\"bin\")]\n+//~^ERROR `crate_type` within\n+//~| WARN this was previously accepted\n+#![cfg_attr(foo, crate_name=\"bar\")]\n+//~^ERROR `crate_name` within\n+//~| WARN this was previously accepted\n+\n+fn main() {}"}, {"sha": "5df2eacc96e1ee9461d588c8b67a801dccce69a7", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,26 @@\n+error: `crate_type` within an `#![cfg_attr] attribute is deprecated`\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:5:18\n+   |\n+LL | #![cfg_attr(foo, crate_type=\"bin\")]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:4:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` implied by `#[deny(warnings)]`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n+\n+error: `crate_name` within an `#![cfg_attr] attribute is deprecated`\n+  --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:8:18\n+   |\n+LL | #![cfg_attr(foo, crate_name=\"bar\")]\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e767effcdd06f459d971aa143c0ba0f52d15d96e", "filename": "src/test/ui/consts/issue-90870.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for issue #90870.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+const fn f(a: &u8, b: &u8) -> bool {\n+    *a == *b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n+    ****a == ****b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n+    while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n+        if *l == *r {\n+        //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+        //~| HELP: consider dereferencing here\n+            a = at;\n+            b = bt;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    a.is_empty() && b.is_empty()\n+}\n+\n+fn main() {}"}, {"sha": "35b3c8242aa0c7ff5011b93b07946b5094dee049", "filename": "src/test/ui/consts/issue-90870.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for issue #90870.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+const fn f(a: &u8, b: &u8) -> bool {\n+    a == b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n+    a == b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n+    while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n+        if l == r {\n+        //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+        //~| HELP: consider dereferencing here\n+            a = at;\n+            b = bt;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    a.is_empty() && b.is_empty()\n+}\n+\n+fn main() {}"}, {"sha": "0e33e6ebe5a5963adfccd3322ad6847ad4e89431", "filename": "src/test/ui/consts/issue-90870.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,36 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-90870.rs:8:5\n+   |\n+LL |     a == b\n+   |     ^^^^^^\n+   |\n+help: consider dereferencing here\n+   |\n+LL |     *a == *b\n+   |     +     +\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-90870.rs:14:5\n+   |\n+LL |     a == b\n+   |     ^^^^^^\n+   |\n+help: consider dereferencing here\n+   |\n+LL |     ****a == ****b\n+   |     ++++     ++++\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-90870.rs:21:12\n+   |\n+LL |         if l == r {\n+   |            ^^^^^^\n+   |\n+help: consider dereferencing here\n+   |\n+LL |         if *l == *r {\n+   |            +     +\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "31f56565c49a6ce8b3f79c2aed4f991dbf8590bf", "filename": "src/test/ui/fn/fn-recover-return-sign2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -3,6 +3,6 @@\n \n fn foo() => impl Fn() => bool {\n     //~^ ERROR return types are denoted using `->`\n-    //~| ERROR expected one of `+`, `->`, `::`, `;`, `where`, or `{`, found `=>`\n+    //~| ERROR expected one of `+`, `->`, `::`, `where`, or `{`, found `=>`\n     unimplemented!()\n }"}, {"sha": "25ee8dd0c5dcdb556582459d220ed2c5be7c44b8", "filename": "src/test/ui/fn/fn-recover-return-sign2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -4,11 +4,11 @@ error: return types are denoted using `->`\n LL | fn foo() => impl Fn() => bool {\n    |          ^^ help: use `->` instead\n \n-error: expected one of `+`, `->`, `::`, `;`, `where`, or `{`, found `=>`\n+error: expected one of `+`, `->`, `::`, `where`, or `{`, found `=>`\n   --> $DIR/fn-recover-return-sign2.rs:4:23\n    |\n LL | fn foo() => impl Fn() => bool {\n-   |                       ^^ expected one of `+`, `->`, `::`, `;`, `where`, or `{`\n+   |                       ^^ expected one of `+`, `->`, `::`, `where`, or `{`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "017521f570c8201065d941f582b405fefaf539e9", "filename": "src/test/ui/parser/issues/issue-24780.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -2,7 +2,7 @@\n // to happen in #24780. For example, following should be an error:\n // expected one of ..., `>`, ... found `>`.\n \n-fn foo() -> Vec<usize>> { //~ ERROR expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n+fn foo() -> Vec<usize>> { //~ ERROR expected one of `!`, `+`, `::`, `where`, or `{`, found `>`\n     Vec::new()\n }\n "}, {"sha": "d9470191b25a46c2aa062ee09fbe08276cb83708", "filename": "src/test/ui/parser/issues/issue-24780.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n+error: expected one of `!`, `+`, `::`, `where`, or `{`, found `>`\n   --> $DIR/issue-24780.rs:5:23\n    |\n LL | fn foo() -> Vec<usize>> {\n-   |                       ^ expected one of `!`, `+`, `::`, `;`, `where`, or `{`\n+   |                       ^ expected one of `!`, `+`, `::`, `where`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "ea80eb8714f966c242688a576702c1743ab93be8", "filename": "src/test/ui/parser/issues/issue-58856-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -2,7 +2,7 @@ impl A {\n     //~^ ERROR cannot find type `A` in this scope\n     fn b(self>\n     //~^ ERROR expected one of `)`, `,`, or `:`, found `>`\n-    //~| ERROR expected one of `->`, `;`, `where`, or `{`, found `>`\n+    //~| ERROR expected one of `->`, `where`, or `{`, found `>`\n }\n \n fn main() {}"}, {"sha": "96151f3fe07fd8ae3012e6ded78b9df39d03ae07", "filename": "src/test/ui/parser/issues/issue-58856-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -6,14 +6,14 @@ LL |     fn b(self>\n    |         |\n    |         unclosed delimiter\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `>`\n+error: expected one of `->`, `where`, or `{`, found `>`\n   --> $DIR/issue-58856-1.rs:3:14\n    |\n LL | impl A {\n    |        - while parsing this item list starting here\n LL |\n LL |     fn b(self>\n-   |              ^ expected one of `->`, `;`, `where`, or `{`\n+   |              ^ expected one of `->`, `where`, or `{`\n ...\n LL | }\n    | - the item list ends here"}, {"sha": "77f0896e9c155d54462a4c5e416b14eb99b1c304", "filename": "src/test/ui/parser/issues/issue-84148-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -13,11 +13,11 @@ LL | fn f(t:for<>t?)\n    |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n    |              help: missing `,`\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/issue-84148-1.rs:1:15\n    |\n LL | fn f(t:for<>t?)\n-   |               ^ expected one of `->`, `;`, `where`, or `{`\n+   |               ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "396208316df677e32a085508eba833fd14217089", "filename": "src/test/ui/parser/issues/issue-84148-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -21,11 +21,11 @@ LL | fn f(t:for<>t?\n    |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n    |              help: missing `,`\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/issue-84148-2.rs:4:16\n    |\n LL | fn f(t:for<>t?\n-   |                ^ expected one of `->`, `;`, `where`, or `{`\n+   |                ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f70a87fb0e8fbaad3f9b7cff2eb1e3b1ca78bb4e", "filename": "src/test/ui/parser/issues/issue-87635.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -2,8 +2,8 @@ struct Foo {}\n \n impl Foo {\n     pub fn bar()\n-    //~^ ERROR: expected `;`, found `}`\n-    //~| ERROR: associated function in `impl` without body\n+    //~^ ERROR: associated function in `impl` without body\n }\n+//~^ERROR expected one of `->`, `where`, or `{`, found `}`\n \n fn main() {}"}, {"sha": "0a52d0687b22beb97b2c1164ebed2c521b0910cf", "filename": "src/test/ui/parser/issues/issue-87635.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -1,11 +1,13 @@\n-error: expected `;`, found `}`\n-  --> $DIR/issue-87635.rs:4:17\n+error: expected one of `->`, `where`, or `{`, found `}`\n+  --> $DIR/issue-87635.rs:6:1\n    |\n LL |     pub fn bar()\n-   |                 ^ help: add `;` here\n-...\n+   |            ---  - expected one of `->`, `where`, or `{`\n+   |            |\n+   |            while parsing this `fn`\n+LL |\n LL | }\n-   | - unexpected token\n+   | ^ unexpected token\n \n error: associated function in `impl` without body\n   --> $DIR/issue-87635.rs:4:5"}, {"sha": "3fe0d0f4273decd5b3a6137c08cd8571dfecff96", "filename": "src/test/ui/parser/missing_right_paren.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -22,11 +22,11 @@ error: expected one of `:` or `|`, found `)`\n LL | fn main((\u063c\n    |           ^ expected one of `:` or `|`\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/missing_right_paren.rs:3:11\n    |\n LL | fn main((\u063c\n-   |           ^ expected one of `->`, `;`, `where`, or `{`\n+   |           ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5c55566ffe92fe7338957551e2a5f59cba027220", "filename": "src/test/ui/suggestions/suggest-semicolon-for-fn-in-extern-block.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.fixed?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[allow(dead_code)]\n+\n+extern \"C\" {\n+  fn foo(); //~ERROR expected `;`\n+}\n+\n+fn main() {}"}, {"sha": "91971cba3e863ad1c5c7a03eaa9830a469af5696", "filename": "src/test/ui/suggestions/suggest-semicolon-for-fn-in-extern-block.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.rs?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[allow(dead_code)]\n+\n+extern \"C\" {\n+  fn foo() //~ERROR expected `;`\n+}\n+\n+fn main() {}"}, {"sha": "c5df72c4a477f432a6608824d35d7604c6f78e5f", "filename": "src/test/ui/suggestions/suggest-semicolon-for-fn-in-extern-block.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4459e720bee5a741b962cfcd6f0593b32dc19009/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-semicolon-for-fn-in-extern-block.stderr?ref=4459e720bee5a741b962cfcd6f0593b32dc19009", "patch": "@@ -0,0 +1,10 @@\n+error: expected `;`, found `}`\n+  --> $DIR/suggest-semicolon-for-fn-in-extern-block.rs:6:11\n+   |\n+LL |   fn foo()\n+   |           ^ help: add `;` here\n+LL | }\n+   | - unexpected token\n+\n+error: aborting due to previous error\n+"}]}