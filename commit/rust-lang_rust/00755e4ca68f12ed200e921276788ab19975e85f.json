{"sha": "00755e4ca68f12ed200e921276788ab19975e85f", "node_id": "C_kwDOAAsO6NoAKDAwNzU1ZTRjYTY4ZjEyZWQyMDBlOTIxMjc2Nzg4YWIxOTk3NWU4NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T15:04:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T15:04:50Z"}, "message": "Auto merge of #96959 - nbdd0121:unwind, r=Amanieu\n\nPrevent unwinding when `-C panic=abort` is used regardless declared ABI\n\nEnsures that Rust code will abort with `-C panic=abort` regardless ABI used.\n```rust\nextern \"C-unwind\" {\n    fn may_unwind();\n}\n\n// Will be nounwind with `-C panic=abort`, despite `C-unwind` ABI.\npub unsafe extern \"C-unwind\" fn rust_item_that_can_unwind() {\n    may_unwind();\n}\n```\n\nCurrent behaviour is that unwind will propagate through. While the current behaviour won't cause unsoundness it is inconsistent with the text reading of [RFC2945](https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html).\n\nI tweaked `fn_can_unwind` instead of tweaking `AbortUnwindingCalls` because this approach would allow Rust (non-direct) callers to also see that this function is nounwind, so it can prevent excessive landing pads generation.\n\nFor more discussions: https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/soundness.20in.20mixed.20panic.20mode.\n\ncc `@alexcrichton,` `@BatmanAoD`\nr? `@Amanieu`\n\n`@rustbot` label: T-compiler T-lang F-c_unwind", "tree": {"sha": "3eb70385eaa911ef3c3cf4f230a6e2fd6bb303bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb70385eaa911ef3c3cf4f230a6e2fd6bb303bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00755e4ca68f12ed200e921276788ab19975e85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00755e4ca68f12ed200e921276788ab19975e85f", "html_url": "https://github.com/rust-lang/rust/commit/00755e4ca68f12ed200e921276788ab19975e85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00755e4ca68f12ed200e921276788ab19975e85f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3655175a75f503c9855b6a73a9d3c83997354c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3655175a75f503c9855b6a73a9d3c83997354c1d", "html_url": "https://github.com/rust-lang/rust/commit/3655175a75f503c9855b6a73a9d3c83997354c1d"}, {"sha": "f86e409f0906deefd0871ba823c086dd58b50870", "url": "https://api.github.com/repos/rust-lang/rust/commits/f86e409f0906deefd0871ba823c086dd58b50870", "html_url": "https://github.com/rust-lang/rust/commit/f86e409f0906deefd0871ba823c086dd58b50870"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "a7488fd44cd1c31d0ca78989507c148e6ea4a08a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00755e4ca68f12ed200e921276788ab19975e85f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00755e4ca68f12ed200e921276788ab19975e85f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=00755e4ca68f12ed200e921276788ab19975e85f", "patch": "@@ -2888,6 +2888,14 @@ pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: Spe\n             return false;\n         }\n \n+        // With `-C panic=abort`, all non-FFI functions are required to not unwind.\n+        //\n+        // Note that this is true regardless ABI specified on the function -- a `extern \"C-unwind\"`\n+        // function defined in Rust is also required to abort.\n+        if tcx.sess.panic_strategy() == PanicStrategy::Abort && !tcx.is_foreign_item(did) {\n+            return false;\n+        }\n+\n         // With -Z panic-in-drop=abort, drop_in_place never unwinds.\n         //\n         // This is not part of `codegen_fn_attrs` as it can differ between crates"}, {"sha": "e817d5715a189c9d321f83cb18369e69056a8295", "filename": "src/test/codegen/unwind-abis/c-unwind-abi-panic-abort.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00755e4ca68f12ed200e921276788ab19975e85f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00755e4ca68f12ed200e921276788ab19975e85f/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs?ref=00755e4ca68f12ed200e921276788ab19975e85f", "patch": "@@ -1,22 +1,27 @@\n // compile-flags: -C panic=abort\n \n-// Test that `nounwind` atributes are not applied to `C-unwind` extern functions\n-// even when the code is compiled with `panic=abort`.\n+// Test that `nounwind` atributes are also applied to extern `C-unwind` Rust functions\n+// when the code is compiled with `panic=abort`.\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]\n \n-extern \"C-unwind\" {\n-    fn may_unwind();\n-}\n-\n-// CHECK: @rust_item_that_can_unwind() unnamed_addr #0\n+// CHECK: @rust_item_that_can_unwind() unnamed_addr [[ATTR0:#[0-9]+]]\n #[no_mangle]\n pub unsafe extern \"C-unwind\" fn rust_item_that_can_unwind() {\n+    // CHECK: call void @_ZN4core9panicking15panic_no_unwind\n     may_unwind();\n }\n \n+extern \"C-unwind\" {\n+    // CHECK: @may_unwind() unnamed_addr [[ATTR1:#[0-9]+]]\n+    fn may_unwind();\n+}\n+\n // Now, make sure that the LLVM attributes for this functions are correct.  First, make\n // sure that the first item is correctly marked with the `nounwind` attribute:\n //\n-// CHECK-NOT: attributes #0 = { {{.*}}nounwind{{.*}} }\n+// CHECK: attributes [[ATTR0]] = { {{.*}}nounwind{{.*}} }\n+//\n+// Now, check that foreign item is correctly marked without the `nounwind` attribute.\n+// CHECK-NOT: attributes [[ATTR1]] = { {{.*}}nounwind{{.*}} }"}]}