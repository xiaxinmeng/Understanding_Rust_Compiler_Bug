{"sha": "96ff8273951269565fb047aa00e42ab3b8038968", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZmY4MjczOTUxMjY5NTY1ZmIwNDdhYTAwZTQyYWIzYjgwMzg5Njg=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-10-08T10:54:56Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-10-08T13:26:22Z"}, "message": "Add chalk rules related to associated type defs\n* Rule ProjectionEq-Skolemize\n* Rule WellFormed-AssocTy\n* Rule Implied-Trait-From-AssocTy", "tree": {"sha": "40d540b8103f50c39c85760397cc7c9b8927f27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40d540b8103f50c39c85760397cc7c9b8927f27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ff8273951269565fb047aa00e42ab3b8038968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ff8273951269565fb047aa00e42ab3b8038968", "html_url": "https://github.com/rust-lang/rust/commit/96ff8273951269565fb047aa00e42ab3b8038968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ff8273951269565fb047aa00e42ab3b8038968/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663002f22267569ae300308837fcf684d8147d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/663002f22267569ae300308837fcf684d8147d32", "html_url": "https://github.com/rust-lang/rust/commit/663002f22267569ae300308837fcf684d8147d32"}], "stats": {"total": 125, "additions": 106, "deletions": 19}, "files": [{"sha": "181106d3f84bf19f9b4f371ff65edd1476ae162d", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 85, "deletions": 8, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/96ff8273951269565fb047aa00e42ab3b8038968/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ff8273951269565fb047aa00e42ab3b8038968/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=96ff8273951269565fb047aa00e42ab3b8038968", "patch": "@@ -362,7 +362,7 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n-    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn program_clauses_for_type_def<'a, 'tcx>(\n@@ -430,10 +430,86 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n }\n \n pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n-    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    _item_id: DefId,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: DefId,\n ) -> Clauses<'tcx> {\n-    unimplemented!()\n+    // Rule ProjectionEq-Skolemize\n+    //\n+    // ```\n+    // trait Trait<P1..Pn> {\n+    //     type AssocType<Pn+1..Pm>;\n+    // }\n+    // ```\n+    //\n+    // `ProjectionEq` can succeed by skolemizing, see \"associated type\"\n+    // chapter for more:\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     ProjectionEq(\n+    //         <Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> =\n+    //         (Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>\n+    //     )\n+    // }\n+    // ```\n+\n+    let item = tcx.associated_item(item_id);\n+    debug_assert_eq!(item.kind, ty::AssociatedKind::Type);\n+    let trait_id = match item.container {\n+        ty::AssociatedItemContainer::TraitContainer(trait_id) => trait_id,\n+        _ => bug!(\"not an trait container\"),\n+    };\n+    let trait_ref = ty::TraitRef::identity(tcx, trait_id);\n+\n+    let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.ident);\n+    let placeholder_ty = tcx.mk_ty(ty::UnnormalizedProjection(projection_ty));\n+    let projection_eq = WhereClause::ProjectionEq(ty::ProjectionPredicate {\n+        projection_ty,\n+        ty: placeholder_ty,\n+    });\n+\n+    let projection_eq_clause = ProgramClause {\n+        goal: DomainGoal::Holds(projection_eq),\n+        hypotheses: &ty::List::empty(),\n+    };\n+\n+    // Rule WellFormed-AssocTy\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     WellFormed((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n+    //         :- Implemented(Self: Trait<P1..Pn>)\n+    // }\n+    // ```\n+\n+    let trait_predicate = ty::TraitPredicate { trait_ref };\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::Holds(WhereClause::Implemented(trait_predicate)).into_goal()\n+    );\n+    let wf_clause = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Ty(placeholder_ty)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+    };\n+\n+    // Rule Implied-Trait-From-AssocTy\n+    // ```\n+    // forall<Self, P1..Pn, Pn+1..Pm> {\n+    //     FromEnv(Self: Trait<P1..Pn>)\n+    //         :- FromEnv((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n+    // }\n+    // ```\n+\n+    let hypothesis = tcx.mk_goal(\n+        DomainGoal::FromEnv(FromEnv::Ty(placeholder_ty)).into_goal()\n+    );\n+    let from_env_clause = ProgramClause {\n+        goal: DomainGoal::FromEnv(FromEnv::Trait(trait_predicate)),\n+        hypotheses: tcx.mk_goals(iter::once(hypothesis)),\n+    };\n+\n+    let clauses = iter::once(projection_eq_clause)\n+        .chain(iter::once(wf_clause))\n+        .chain(iter::once(from_env_clause));\n+    let clauses = clauses.map(|clause| Clause::ForAll(ty::Binder::dummy(clause)));\n+    tcx.mk_clauses(clauses)\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n@@ -442,10 +518,11 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n ) -> Clauses<'tcx> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n-    // ```impl<P0..Pn> Trait<A1..An> for A0\n-    // {\n+    // ```\n+    // impl<P0..Pn> Trait<A1..An> for A0 {\n     //     type AssocType<Pn+1..Pm> = T;\n-    // }```\n+    // }\n+    // ```\n     //\n     // FIXME: For the moment, we don't account for where clauses written on the associated\n     // ty definition (i.e. in the trait def, as in `type AssocType<T> where T: Sized`).\n@@ -492,7 +569,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n     };\n-    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "ba7d4ff0d9bf55ac0adc4573e195552b28810d93", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96ff8273951269565fb047aa00e42ab3b8038968/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ff8273951269565fb047aa00e42ab3b8038968/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=96ff8273951269565fb047aa00e42ab3b8038968", "patch": "@@ -10,11 +10,12 @@\n \n #![feature(rustc_attrs)]\n \n+trait Bar { }\n+\n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-trait Foo<S, T, U> {\n-    fn s(_: S) -> S;\n-    fn t(_: T) -> T;\n-    fn u(_: U) -> U;\n+trait Foo<S, T: ?Sized> {\n+    #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+    type Assoc: Bar + ?Sized;\n }\n \n fn main() {"}, {"sha": "dc2375277e7342d713049d371ae759707c5fdd1f", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96ff8273951269565fb047aa00e42ab3b8038968/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ff8273951269565fb047aa00e42ab3b8038968/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=96ff8273951269565fb047aa00e42ab3b8038968", "patch": "@@ -1,14 +1,23 @@\n error: program clause dump\n-  --> $DIR/lower_trait.rs:13:1\n+  --> $DIR/lower_trait.rs:15:1\n    |\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n-   = note: WellFormed(Self: Foo<S, T, U>) :- Implemented(Self: Foo<S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(U: std::marker::Sized).\n+   = note: FromEnv(<Self as Foo<S, T>>::Assoc: Bar) :- FromEnv(Self: Foo<S, T>).\n+   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T>).\n+   = note: Implemented(Self: Foo<S, T>) :- FromEnv(Self: Foo<S, T>).\n+   = note: WellFormed(Self: Foo<S, T>) :- Implemented(Self: Foo<S, T>), WellFormed(S: std::marker::Sized), WellFormed(<Self as Foo<S, T>>::Assoc: Bar).\n \n-error: aborting due to previous error\n+error: program clause dump\n+  --> $DIR/lower_trait.rs:17:5\n+   |\n+LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)).\n+   = note: ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)).\n+   = note: WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>).\n+\n+error: aborting due to 2 previous errors\n "}]}