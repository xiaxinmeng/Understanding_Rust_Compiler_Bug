{"sha": "08b7cb79e0d76aab4d3a68335595c07b238c17b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YjdjYjc5ZTBkNzZhYWI0ZDNhNjgzMzU1OTVjMDdiMjM4YzE3Yjg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T21:59:04Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-10T20:58:13Z"}, "message": "Use Cell instead of RefCell for LOCAL_{STDOUT,STDERR}.", "tree": {"sha": "7bfe093a85592f768c9fa3e69dd85e648aadddfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfe093a85592f768c9fa3e69dd85e648aadddfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b7cb79e0d76aab4d3a68335595c07b238c17b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b7cb79e0d76aab4d3a68335595c07b238c17b8", "html_url": "https://github.com/rust-lang/rust/commit/08b7cb79e0d76aab4d3a68335595c07b238c17b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b7cb79e0d76aab4d3a68335595c07b238c17b8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6", "html_url": "https://github.com/rust-lang/rust/commit/f534b75f050f2daca87c15f6c8d04bf9dc5b68a6"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "2e71ad295841b00df002088559d976ed4d18faa8", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/08b7cb79e0d76aab4d3a68335595c07b238c17b8/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b7cb79e0d76aab4d3a68335595c07b238c17b8/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=08b7cb79e0d76aab4d3a68335595c07b238c17b8", "patch": "@@ -5,7 +5,7 @@ mod tests;\n \n use crate::io::prelude::*;\n \n-use crate::cell::RefCell;\n+use crate::cell::{Cell, RefCell};\n use crate::fmt;\n use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter};\n use crate::lazy::SyncOnceCell;\n@@ -20,15 +20,15 @@ type LocalStream = Arc<Mutex<Vec<u8>>>;\n \n thread_local! {\n     /// Used by the test crate to capture the output of the print! and println! macros.\n-    static LOCAL_STDOUT: RefCell<Option<LocalStream>> = {\n-        RefCell::new(None)\n+    static LOCAL_STDOUT: Cell<Option<LocalStream>> = {\n+        Cell::new(None)\n     }\n }\n \n thread_local! {\n     /// Used by the test crate to capture the output of the eprint! and eprintln! macros, and panics.\n-    static LOCAL_STDERR: RefCell<Option<LocalStream>> = {\n-        RefCell::new(None)\n+    static LOCAL_STDERR: Cell<Option<LocalStream>> = {\n+        Cell::new(None)\n     }\n }\n \n@@ -906,13 +906,12 @@ impl fmt::Debug for StderrLock<'_> {\n )]\n #[doc(hidden)]\n pub fn set_panic(sink: Option<LocalStream>) -> Option<LocalStream> {\n-    use crate::mem;\n     if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         // LOCAL_STDERR is definitely None since LOCAL_STREAMS is false.\n         return None;\n     }\n     LOCAL_STREAMS.store(true, Ordering::Relaxed);\n-    LOCAL_STDERR.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink))\n+    LOCAL_STDERR.with(move |slot| slot.replace(sink))\n }\n \n /// Resets the thread-local stdout handle to the specified writer\n@@ -931,13 +930,12 @@ pub fn set_panic(sink: Option<LocalStream>) -> Option<LocalStream> {\n )]\n #[doc(hidden)]\n pub fn set_print(sink: Option<LocalStream>) -> Option<LocalStream> {\n-    use crate::mem;\n     if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         // LOCAL_STDOUT is definitely None since LOCAL_STREAMS is false.\n         return None;\n     }\n     LOCAL_STREAMS.store(true, Ordering::Relaxed);\n-    LOCAL_STDOUT.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink))\n+    LOCAL_STDOUT.with(move |slot| slot.replace(sink))\n }\n \n pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n@@ -946,10 +944,13 @@ pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n         return (None, None);\n     }\n \n-    (\n-        LOCAL_STDOUT.with(|s| s.borrow().clone()),\n-        LOCAL_STDERR.with(|s| s.borrow().clone()),\n-    )\n+    let clone = |cell: &Cell<Option<LocalStream>>| {\n+        let s = cell.take();\n+        cell.set(s.clone());\n+        s\n+    };\n+\n+    (LOCAL_STDOUT.with(clone), LOCAL_STDERR.with(clone))\n }\n \n /// Write `args` to output stream `local_s` if possible, `global_s`\n@@ -964,7 +965,7 @@ pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(\n     args: fmt::Arguments<'_>,\n-    local_s: &'static LocalKey<RefCell<Option<LocalStream>>>,\n+    local_s: &'static LocalKey<Cell<Option<LocalStream>>>,\n     global_s: fn() -> T,\n     label: &str,\n ) where\n@@ -977,7 +978,7 @@ fn print_to<T>(\n             // panic/print goes to the global sink instead of our local sink.\n             s.take().map(|w| {\n                 let _ = w.lock().unwrap_or_else(|e| e.into_inner()).write_fmt(args);\n-                *s.borrow_mut() = Some(w);\n+                s.set(Some(w));\n             })\n         }) == Ok(Some(()))\n     {"}]}