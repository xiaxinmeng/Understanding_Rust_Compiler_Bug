{"sha": "de7abd88244a9fe7033cb71e22af0601d1b811b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2FiZDg4MjQ0YTlmZTcwMzNjYjcxZTIyYWYwNjAxZDFiODExYjk=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-07-18T12:45:17Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-29T21:10:05Z"}, "message": "Unify non-snake-case lints and non-uppercase statics lints\n\nThis unifies the `non_snake_case_functions` and `uppercase_variables` lints\ninto one lint, `non_snake_case`. It also now checks for non-snake-case modules.\nThis also extends the non-camel-case types lint to check type parameters, and\nmerges the `non_uppercase_pattern_statics` lint into the\n`non_uppercase_statics` lint.\n\nBecause the `uppercase_variables` lint is now part of the `non_snake_case`\nlint, all non-snake-case variables that start with lowercase characters (such\nas `fooBar`) will now trigger the `non_snake_case` lint.\n\nNew code should be updated to use the new `non_snake_case` lint instead of the\nprevious `non_snake_case_functions` and `uppercase_variables` lints. All use of\nthe `non_uppercase_pattern_statics` should be replaced with the\n`non_uppercase_statics` lint. Any code that previously contained non-snake-case\nmodule or variable names should be updated to use snake case names or disable\nthe `non_snake_case` lint. Any code with non-camel-case type parameters should\nbe changed to use camel case or disable the `non_camel_case_types` lint.\n\n[breaking-change]", "tree": {"sha": "0f57eaeba2ecc2d72a618872a7e06885d5e611db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f57eaeba2ecc2d72a618872a7e06885d5e611db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7abd88244a9fe7033cb71e22af0601d1b811b9", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7abd88244a9fe7033cb71e22af0601d1b811b9", "html_url": "https://github.com/rust-lang/rust/commit/de7abd88244a9fe7033cb71e22af0601d1b811b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7abd88244a9fe7033cb71e22af0601d1b811b9/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd159d3867473ee43959706519066531d76af7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd159d3867473ee43959706519066531d76af7ba", "html_url": "https://github.com/rust-lang/rust/commit/bd159d3867473ee43959706519066531d76af7ba"}], "stats": {"total": 390, "additions": 214, "deletions": 176}, "files": [{"sha": "294cae3a1f76b1bec74c47741a1160e485e4058a", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -477,7 +477,7 @@ extern crate libc;\n \n #[cfg(target_os = \"win32\", target_arch = \"x86\")]\n #[link(name = \"kernel32\")]\n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n extern \"stdcall\" {\n     fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int;\n }"}, {"sha": "a74bb748971356a24de6de0122245d7712b09242", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -34,7 +34,7 @@\n \n // NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n \n-#![allow(missing_doc, non_uppercase_statics, non_snake_case_functions)]\n+#![allow(missing_doc, non_uppercase_statics, non_snake_case)]\n '''\n \n # Mapping taken from Table 12 from:"}, {"sha": "a264acf5d03a3059dedf0e1a98a274f8b843826d", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -159,6 +159,7 @@ macro_rules! impl_hash_tuple(\n         impl<S: Writer, $($name: Hash<S>),*> Hash<S> for ($($name,)*) {\n             #[allow(uppercase_variables)]\n             #[inline]\n+            #[allow(non_snake_case)]\n             fn hash(&self, state: &mut S) {\n                 match *self {\n                     ($(ref $name,)*) => {"}, {"sha": "95267a8f9e5fab92d78e9b4a54a29c50678bd0f5", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -12,7 +12,7 @@\n //!\n //! For more details, see ::unicode::char (a.k.a. std::char)\n \n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n #![doc(primitive = \"char\")]\n \n use mem::transmute;"}, {"sha": "32663e5eb0fe2b6c9bb4cca88f1213be9b4fe606", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -668,7 +668,7 @@ macro_rules! tuple (\n     () => ();\n     ( $($name:ident,)+ ) => (\n         impl<$($name:Show),*> Show for ($($name,)*) {\n-            #[allow(uppercase_variables, dead_assignment)]\n+            #[allow(non_snake_case, dead_assignment)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 try!(write!(f, \"(\"));\n                 let ($(ref $name,)*) = *self;"}, {"sha": "b067e6299ee2e0a6c29fd2c803ea9cdb60d55004", "filename": "src/libcore/str.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -394,9 +394,9 @@ impl NaiveSearcher {\n     fn next(&mut self, haystack: &[u8], needle: &[u8]) -> Option<(uint, uint)> {\n         while self.position + needle.len() <= haystack.len() {\n             if haystack.slice(self.position, self.position + needle.len()) == needle {\n-                let matchPos = self.position;\n+                let match_pos = self.position;\n                 self.position += needle.len(); // add 1 for all matches\n-                return Some((matchPos, matchPos + needle.len()));\n+                return Some((match_pos, match_pos + needle.len()));\n             } else {\n                 self.position += 1;\n             }\n@@ -410,7 +410,7 @@ impl NaiveSearcher {\n #[deriving(Clone)]\n struct TwoWaySearcher {\n     // constants\n-    critPos: uint,\n+    crit_pos: uint,\n     period: uint,\n     byteset: u64,\n \n@@ -423,32 +423,31 @@ struct TwoWaySearcher {\n // Crochemore, M., Perrin, D., 1991, Two-way string-matching, Journal of the ACM 38(3):651-675.\n impl TwoWaySearcher {\n     fn new(needle: &[u8]) -> TwoWaySearcher {\n-        let (critPos1, period1) = TwoWaySearcher::maximal_suffix(needle, false);\n-        let (critPos2, period2) = TwoWaySearcher::maximal_suffix(needle, true);\n+        let (crit_pos1, period1) = TwoWaySearcher::maximal_suffix(needle, false);\n+        let (crit_pos2, period2) = TwoWaySearcher::maximal_suffix(needle, true);\n \n-        let critPos;\n+        let crit_pos;\n         let period;\n-        if critPos1 > critPos2 {\n-            critPos = critPos1;\n+        if crit_pos1 > crit_pos2 {\n+            crit_pos = crit_pos1;\n             period = period1;\n         } else {\n-            critPos = critPos2;\n+            crit_pos = crit_pos2;\n             period = period2;\n         }\n \n         let byteset = needle.iter()\n                             .fold(0, |a, &b| (1 << ((b & 0x3f) as uint)) | a);\n \n-\n-        // The logic here (calculating critPos and period, the final if statement to see which\n+        // The logic here (calculating crit_pos and period, the final if statement to see which\n         // period to use for the TwoWaySearcher) is essentially an implementation of the\n         // \"small-period\" function from the paper (p. 670)\n         //\n-        // In the paper they check whether `needle.slice_to(critPos)` is a suffix of\n-        // `needle.slice(critPos, critPos + period)`, which is precisely what this does\n-        if needle.slice_to(critPos) == needle.slice(period, period + critPos) {\n+        // In the paper they check whether `needle.slice_to(crit_pos)` is a suffix of\n+        // `needle.slice(crit_pos, crit_pos + period)`, which is precisely what this does\n+        if needle.slice_to(crit_pos) == needle.slice(period, period + crit_pos) {\n             TwoWaySearcher {\n-                critPos: critPos,\n+                crit_pos: crit_pos,\n                 period: period,\n                 byteset: byteset,\n \n@@ -457,8 +456,8 @@ impl TwoWaySearcher {\n             }\n         } else {\n             TwoWaySearcher {\n-                critPos: critPos,\n-                period: cmp::max(critPos, needle.len() - critPos) + 1,\n+                crit_pos: crit_pos,\n+                period: cmp::max(crit_pos, needle.len() - crit_pos) + 1,\n                 byteset: byteset,\n \n                 position: 0,\n@@ -468,7 +467,7 @@ impl TwoWaySearcher {\n     }\n \n     #[inline]\n-    fn next(&mut self, haystack: &[u8], needle: &[u8], longPeriod: bool) -> Option<(uint, uint)> {\n+    fn next(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> Option<(uint, uint)> {\n         'search: loop {\n             // Check that we have room to search in\n             if self.position + needle.len() > haystack.len() {\n@@ -484,36 +483,37 @@ impl TwoWaySearcher {\n             }\n \n             // See if the right part of the needle matches\n-            let start = if longPeriod { self.critPos } else { cmp::max(self.critPos, self.memory) };\n+            let start = if long_period { self.crit_pos }\n+                        else { cmp::max(self.crit_pos, self.memory) };\n             for i in range(start, needle.len()) {\n                 if needle[i] != haystack[self.position + i] {\n-                    self.position += i - self.critPos + 1;\n-                    if !longPeriod {\n+                    self.position += i - self.crit_pos + 1;\n+                    if !long_period {\n                         self.memory = 0;\n                     }\n                     continue 'search;\n                 }\n             }\n \n             // See if the left part of the needle matches\n-            let start = if longPeriod { 0 } else { self.memory };\n-            for i in range(start, self.critPos).rev() {\n+            let start = if long_period { 0 } else { self.memory };\n+            for i in range(start, self.crit_pos).rev() {\n                 if needle[i] != haystack[self.position + i] {\n                     self.position += self.period;\n-                    if !longPeriod {\n+                    if !long_period {\n                         self.memory = needle.len() - self.period;\n                     }\n                     continue 'search;\n                 }\n             }\n \n             // We have found a match!\n-            let matchPos = self.position;\n+            let match_pos = self.position;\n             self.position += needle.len(); // add self.period for all matches\n-            if !longPeriod {\n+            if !long_period {\n                 self.memory = 0; // set to needle.len() - self.period for all matches\n             }\n-            return Some((matchPos, matchPos + needle.len()));\n+            return Some((match_pos, match_pos + needle.len()));\n         }\n     }\n "}, {"sha": "b8a7ac019c35c4507b812bfedde914ae4e728213", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -74,10 +74,10 @@\n */\n \n #![allow(non_camel_case_types)]\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n #![allow(non_uppercase_statics)]\n #![allow(missing_doc)]\n-#![allow(uppercase_variables)]\n+#![allow(non_snake_case)]\n \n #[cfg(test)] extern crate std;\n #[cfg(test)] extern crate test;"}, {"sha": "276194feaf0e39ce0a2de99a610ed7828ec50f77", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -21,7 +21,7 @@\n //! play. The only dependencies of these modules are the normal system libraries\n //! that you would find on the respective platform.\n \n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n \n use libc::c_int;\n use libc;"}, {"sha": "0cc7158bb5d32c9d28ecdeeb0570f6ead1cbf30a", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -838,7 +838,7 @@ fn free_handle(_handle: *mut ()) {\n \n #[cfg(unix)]\n fn translate_status(status: c_int) -> rtio::ProcessExit {\n-    #![allow(non_snake_case_functions)]\n+    #![allow(non_snake_case)]\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     mod imp {"}, {"sha": "68cfe061121eab064daec80244deae6ae448f1c8", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -78,6 +78,7 @@ pub type DoubleBigDigit = u64;\n pub static ZERO_BIG_DIGIT: BigDigit = 0;\n static ZERO_VEC: [BigDigit, ..1] = [ZERO_BIG_DIGIT];\n \n+#[allow(non_snake_case)]\n pub mod BigDigit {\n     use super::BigDigit;\n     use super::DoubleBigDigit;"}, {"sha": "aaa1cb85d8566afa3566beafb6fdd94fee636679", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -1132,7 +1132,7 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    #![allow(non_snake_case_functions)]\n+    #![allow(non_snake_case)]\n     use test::Bencher;\n     use super::reader;\n "}, {"sha": "aa85a68b5b50990d486f8038a2bc6bd448511886", "filename": "src/libregex/test/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibregex%2Ftest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibregex%2Ftest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fbench.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n \n use std::rand::{Rng, task_rng};\n use stdtest::Bencher;"}, {"sha": "0c9260bdc7d99c7d172bfb4a0580d00a4eb68e2a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_snake_case)]\n+\n register_diagnostic!(E0001, r##\"\n     This error suggests that the expression arm corresponding to the noted pattern\n     will never be reached as for all possible values of the expression being matched,"}, {"sha": "71e966d77867e31279ae046d854d3e29277137e3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 83, "deletions": 93, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -737,19 +737,15 @@ impl LintPass for UnusedResult {\n }\n \n declare_lint!(NON_CAMEL_CASE_TYPES, Warn,\n-              \"types, variants and traits should have camel case names\")\n+              \"types, variants, traits and type parameters should have camel case names\")\n \n pub struct NonCamelCaseTypes;\n \n-impl LintPass for NonCamelCaseTypes {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_CAMEL_CASE_TYPES)\n-    }\n-\n-    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+impl NonCamelCaseTypes {\n+    fn check_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_camel_case(ident: ast::Ident) -> bool {\n             let ident = token::get_ident(ident);\n-            assert!(!ident.get().is_empty());\n+            if ident.get().is_empty() { return true; }\n             let ident = ident.get().trim_chars('_');\n \n             // start with a non-lowercase letter rather than non-uppercase\n@@ -764,20 +760,26 @@ impl LintPass for NonCamelCaseTypes {\n             )).collect()\n         }\n \n-        fn check_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n-            let s = token::get_ident(ident);\n+        let s = token::get_ident(ident);\n \n-            if !is_camel_case(ident) {\n-                let c = to_camel_case(s.get());\n-                let m = if c.is_empty() {\n-                    format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, s)\n-                } else {\n-                    format!(\"{} `{}` should have a camel case name such as `{}`\", sort, s, c)\n-                };\n-                cx.span_lint(NON_CAMEL_CASE_TYPES, span, m.as_slice());\n-            }\n+        if !is_camel_case(ident) {\n+            let c = to_camel_case(s.get());\n+            let m = if c.is_empty() {\n+                format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, s)\n+            } else {\n+                format!(\"{} `{}` should have a camel case name such as `{}`\", sort, s, c)\n+            };\n+            cx.span_lint(NON_CAMEL_CASE_TYPES, span, m.as_slice());\n         }\n+    }\n+}\n+\n+impl LintPass for NonCamelCaseTypes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NON_CAMEL_CASE_TYPES)\n+    }\n \n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n         let has_extern_repr = it.attrs.iter().map(|attr| {\n             attr::find_repr_attrs(cx.tcx.sess.diagnostic(), attr).iter()\n                 .any(|r| r == &attr::ReprExtern)\n@@ -786,21 +788,27 @@ impl LintPass for NonCamelCaseTypes {\n \n         match it.node {\n             ast::ItemTy(..) | ast::ItemStruct(..) => {\n-                check_case(cx, \"type\", it.ident, it.span)\n+                self.check_case(cx, \"type\", it.ident, it.span)\n             }\n             ast::ItemTrait(..) => {\n-                check_case(cx, \"trait\", it.ident, it.span)\n+                self.check_case(cx, \"trait\", it.ident, it.span)\n             }\n             ast::ItemEnum(ref enum_definition, _) => {\n                 if has_extern_repr { return }\n-                check_case(cx, \"type\", it.ident, it.span);\n+                self.check_case(cx, \"type\", it.ident, it.span);\n                 for variant in enum_definition.variants.iter() {\n-                    check_case(cx, \"variant\", variant.node.name, variant.span);\n+                    self.check_case(cx, \"variant\", variant.node.name, variant.span);\n                 }\n             }\n             _ => ()\n         }\n     }\n+\n+    fn check_generics(&mut self, cx: &Context, it: &ast::Generics) {\n+        for gen in it.ty_params.iter() {\n+            self.check_case(cx, \"type parameter\", gen.ident, gen.span);\n+        }\n+    }\n }\n \n #[deriving(PartialEq)]\n@@ -836,17 +844,18 @@ fn method_context(cx: &Context, m: &ast::Method) -> MethodContext {\n     }\n }\n \n-declare_lint!(NON_SNAKE_CASE_FUNCTIONS, Warn,\n-              \"methods and functions should have snake case names\")\n+declare_lint!(NON_SNAKE_CASE, Warn,\n+              \"methods, functions, lifetime parameters and modules should have snake case names\")\n \n-pub struct NonSnakeCaseFunctions;\n+pub struct NonSnakeCase;\n \n-impl NonSnakeCaseFunctions {\n+impl NonSnakeCase {\n     fn check_snake_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_snake_case(ident: ast::Ident) -> bool {\n             let ident = token::get_ident(ident);\n-            assert!(!ident.get().is_empty());\n-            let ident = ident.get().trim_chars('_');\n+            if ident.get().is_empty() { return true; }\n+            let ident = ident.get().trim_left_chars('\\'');\n+            let ident = ident.trim_chars('_');\n \n             let mut allow_underscore = true;\n             ident.chars().all(|c| {\n@@ -865,7 +874,7 @@ impl NonSnakeCaseFunctions {\n                 let mut buf = String::new();\n                 if s.is_empty() { continue; }\n                 for ch in s.chars() {\n-                    if !buf.is_empty() && ch.is_uppercase() {\n+                    if !buf.is_empty() && buf.as_slice() != \"'\" && ch.is_uppercase() {\n                         words.push(buf);\n                         buf = String::new();\n                     }\n@@ -879,16 +888,16 @@ impl NonSnakeCaseFunctions {\n         let s = token::get_ident(ident);\n \n         if !is_snake_case(ident) {\n-            cx.span_lint(NON_SNAKE_CASE_FUNCTIONS, span,\n+            cx.span_lint(NON_SNAKE_CASE, span,\n                 format!(\"{} `{}` should have a snake case name such as `{}`\",\n                         sort, s, to_snake_case(s.get())).as_slice());\n         }\n     }\n }\n \n-impl LintPass for NonSnakeCaseFunctions {\n+impl LintPass for NonSnakeCase {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_SNAKE_CASE_FUNCTIONS)\n+        lint_array!(NON_SNAKE_CASE)\n     }\n \n     fn check_fn(&mut self, cx: &Context,\n@@ -908,9 +917,49 @@ impl LintPass for NonSnakeCaseFunctions {\n         }\n     }\n \n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        match it.node {\n+            ast::ItemMod(_) => {\n+                self.check_snake_case(cx, \"module\", it.ident, it.span);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     fn check_ty_method(&mut self, cx: &Context, t: &ast::TypeMethod) {\n         self.check_snake_case(cx, \"trait method\", t.ident, t.span);\n     }\n+\n+    fn check_lifetime_decl(&mut self, cx: &Context, t: &ast::Lifetime) {\n+        self.check_snake_case(cx, \"lifetime\", t.name.ident(), t.span);\n+    }\n+\n+    fn check_pat(&mut self, cx: &Context, p: &ast::Pat) {\n+        match &p.node {\n+            &ast::PatIdent(_, ref path1, _) => {\n+                match cx.tcx.def_map.borrow().find(&p.id) {\n+                    Some(&def::DefLocal(_, _)) | Some(&def::DefBinding(_, _)) |\n+                            Some(&def::DefArg(_, _)) => {\n+                        self.check_snake_case(cx, \"variable\", path1.node, p.span);\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn check_struct_def(&mut self, cx: &Context, s: &ast::StructDef,\n+            _: ast::Ident, _: &ast::Generics, _: ast::NodeId) {\n+        for sf in s.fields.iter() {\n+            match sf.node {\n+                ast::StructField_ { kind: ast::NamedField(ident, _), .. } => {\n+                    self.check_snake_case(cx, \"structure field\", ident, sf.span);\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n }\n \n declare_lint!(NON_UPPERCASE_STATICS, Allow,\n@@ -942,25 +991,14 @@ impl LintPass for NonUppercaseStatics {\n             _ => {}\n         }\n     }\n-}\n-\n-declare_lint!(NON_UPPERCASE_PATTERN_STATICS, Warn,\n-              \"static constants in match patterns should be all caps\")\n-\n-pub struct NonUppercasePatternStatics;\n-\n-impl LintPass for NonUppercasePatternStatics {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NON_UPPERCASE_PATTERN_STATICS)\n-    }\n \n     fn check_pat(&mut self, cx: &Context, p: &ast::Pat) {\n         // Lint for constants that look like binding identifiers (#7526)\n         match (&p.node, cx.tcx.def_map.borrow().find(&p.id)) {\n             (&ast::PatIdent(_, ref path1, _), Some(&def::DefStatic(_, false))) => {\n                 let s = token::get_ident(path1.node);\n                 if s.get().chars().any(|c| c.is_lowercase()) {\n-                    cx.span_lint(NON_UPPERCASE_PATTERN_STATICS, path1.span,\n+                    cx.span_lint(NON_UPPERCASE_STATICS, path1.span,\n                         format!(\"static constant in pattern `{}` should have an uppercase \\\n                                  name such as `{}`\",\n                                 s.get(), s.get().chars().map(|c| c.to_uppercase())\n@@ -972,54 +1010,6 @@ impl LintPass for NonUppercasePatternStatics {\n     }\n }\n \n-declare_lint!(UPPERCASE_VARIABLES, Warn,\n-              \"variable and structure field names should start with a lowercase character\")\n-\n-pub struct UppercaseVariables;\n-\n-impl LintPass for UppercaseVariables {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UPPERCASE_VARIABLES)\n-    }\n-\n-    fn check_pat(&mut self, cx: &Context, p: &ast::Pat) {\n-        match &p.node {\n-            &ast::PatIdent(_, ref path1, _) => {\n-                match cx.tcx.def_map.borrow().find(&p.id) {\n-                    Some(&def::DefLocal(_, _)) | Some(&def::DefBinding(_, _)) |\n-                            Some(&def::DefArg(_, _)) => {\n-                        let s = token::get_ident(path1.node);\n-                        if s.get().len() > 0 && s.get().char_at(0).is_uppercase() {\n-                            cx.span_lint(UPPERCASE_VARIABLES, path1.span,\n-                                         \"variable names should start with \\\n-                                          a lowercase character\");\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn check_struct_def(&mut self, cx: &Context, s: &ast::StructDef,\n-            _: ast::Ident, _: &ast::Generics, _: ast::NodeId) {\n-        for sf in s.fields.iter() {\n-            match sf.node {\n-                ast::StructField_ { kind: ast::NamedField(ident, _), .. } => {\n-                    let s = token::get_ident(ident);\n-                    if s.get().char_at(0).is_uppercase() {\n-                        cx.span_lint(UPPERCASE_VARIABLES, sf.span,\n-                                     \"structure field names should start with \\\n-                                      a lowercase character\");\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-}\n-\n declare_lint!(UNNECESSARY_PARENS, Warn,\n               \"`if`, `match`, `while` and `return` do not need parentheses\")\n "}, {"sha": "28e4e1a564ef9b707fb55027c5009e1cef0f092f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -146,10 +146,8 @@ impl LintStore {\n                      PathStatement,\n                      UnusedResult,\n                      NonCamelCaseTypes,\n-                     NonSnakeCaseFunctions,\n+                     NonSnakeCase,\n                      NonUppercaseStatics,\n-                     NonUppercasePatternStatics,\n-                     UppercaseVariables,\n                      UnnecessaryParens,\n                      UnusedUnsafe,\n                      UnsafeBlock,"}, {"sha": "76059e8df4f8cd046fdf81faa566608ef6b9e9e3", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)] // FFI wrappers\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n \n use llvm;\n use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect, AttrBuilder};"}, {"sha": "ccfc79ac0c5002bec9ce1074297c366250d6df6f", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_uppercase_statics)]\n \n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};"}, {"sha": "77815285428fdb3a5cd3954be758b2a3a7c1f22f", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_uppercase_statics)]\n \n use libc::c_uint;\n use std::cmp;"}, {"sha": "0d4cb637ae0cd7b95bb4f55e8476752405ca16dc", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -11,7 +11,7 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_uppercase_statics)]\n \n use llvm;\n use llvm::{Integer, Pointer, Float, Double};"}, {"sha": "d92364b2570108ab9e2cccfc373c9ee59c6c8c53", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_camel_case_types, non_snake_case_functions)]\n+#![allow(non_camel_case_types, non_snake_case)]\n \n //! Code that is useful in various trans modules.\n "}, {"sha": "bd337c4b934af4cd3fb74ec3a80ed1d68c7e714e", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -1447,7 +1447,7 @@ fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n     !cx.reachable.contains(&node_id)\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     return unsafe {\n         llvm::LLVMDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n@@ -3107,7 +3107,7 @@ fn debug_context<'a>(cx: &'a CrateContext) -> &'a CrateDebugContext {\n }\n \n #[inline]\n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n fn DIB(cx: &CrateContext) -> DIBuilderRef {\n     cx.dbg_cx.get_ref().builder\n }"}, {"sha": "3c61708fb7b83ac89368c918d01af2018cf4941c", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_uppercase_statics)]\n \n use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, Xchg, ValueRef};"}, {"sha": "7b98d65a3105b88a5b1f06e3c0bcb0f2492b90ce", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_uppercase_statics)]\n \n use llvm;\n use llvm::{TypeRef, Bool, False, True, TypeKind, ValueRef};"}, {"sha": "051ddd572416ea0687ce12c3f1431b9cf5909d49", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -2118,6 +2118,7 @@ pub struct TypeContents {\n \n macro_rules! def_type_content_sets(\n     (mod $mname:ident { $($name:ident = $bits:expr),+ }) => {\n+        #[allow(non_snake_case)]\n         mod $mname {\n             use middle::ty::TypeContents;\n             $(pub static $name: TypeContents = TypeContents { bits: $bits };)+"}, {"sha": "a38ee84e95dfb9cf7418d0a9fefd1f89919dc1d5", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -10,6 +10,8 @@\n \n //! An efficient hash map for node IDs\n \n+#![allow(non_snake_case)]\n+\n use std::collections::{HashMap, HashSet};\n use std::hash::{Hasher, Hash, Writer};\n use syntax::ast;"}, {"sha": "7d2d25097a8f83cce9f1a4cccd0aeec542add9bb", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_uppercase_statics)]\n #![allow(non_camel_case_types)]\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n #![allow(dead_code)]\n \n #![crate_name = \"rustc_llvm\"]"}, {"sha": "101f1c7460571b63ccf4724aa00357afc3c169ca", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -162,7 +162,7 @@ mod imp {\n \n     static LOCKFILE_EXCLUSIVE_LOCK: libc::DWORD = 0x00000002;\n \n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     extern \"system\" {\n         fn LockFileEx(hFile: libc::HANDLE,\n                       dwFlags: libc::DWORD,"}, {"sha": "69df8a7fd66e316f696068313972d952246c1c5f", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -11,7 +11,7 @@\n //! Unwind library interface\n \n #![allow(non_camel_case_types)]\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n #![allow(dead_code)] // these are just bindings\n \n use libc;"}, {"sha": "3aa798aa92a2075e81821e0aefa6bb7b1018234b", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -629,7 +629,7 @@ mod imp {\n         libc::CloseHandle(block);\n     }\n \n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     extern \"system\" {\n         fn CreateEventA(lpSecurityAttributes: LPSECURITY_ATTRIBUTES,\n                         bManualReset: BOOL,"}, {"sha": "6d18ec4f9f5ad81035dc8b103f5441e7a5317ccf", "filename": "src/librustrt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -198,7 +198,7 @@ mod imp {\n         SwitchToThread();\n     }\n \n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     extern \"system\" {\n         fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES,\n                         dwStackSize: SIZE_T,"}, {"sha": "6078ed990e41d6dd25c5f56dca10199874b1ddc2", "filename": "src/librustrt/thread_local_storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibrustrt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread_local_storage.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -83,7 +83,7 @@ pub unsafe fn destroy(key: Key) {\n }\n \n #[cfg(windows)]\n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n extern \"system\" {\n     fn TlsAlloc() -> DWORD;\n     fn TlsFree(dwTlsIndex: DWORD) -> BOOL;"}, {"sha": "b37b4588af6307c14c510634f06654bb1aad4405", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -2282,7 +2282,7 @@ macro_rules! tuple_impl {\n             > ToJson for ( $( $tyvar ),* , ) {\n \n             #[inline]\n-            #[allow(uppercase_variables)]\n+            #[allow(non_snake_case)]\n             fn to_json(&self) -> Json {\n                 match *self {\n                     ($(ref $tyvar),*,) => List(vec![$($tyvar.to_json()),*])"}, {"sha": "2cda00ad6c4af452719d01c423bb0191b4437547", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -481,7 +481,7 @@ macro_rules! tuple (\n     () => ();\n     ( $($name:ident,)+ ) => (\n         impl<E, D:Decoder<E>,$($name:Decodable<D, E>),*> Decodable<D,E> for ($($name,)*) {\n-            #[allow(uppercase_variables)]\n+            #[allow(non_snake_case)]\n             fn decode(d: &mut D) -> Result<($($name,)*), E> {\n                 d.read_tuple(|d, amt| {\n                     let mut i = 0;\n@@ -496,7 +496,7 @@ macro_rules! tuple (\n             }\n         }\n         impl<E, S:Encoder<E>,$($name:Encodable<S, E>),*> Encodable<S, E> for ($($name,)*) {\n-            #[allow(uppercase_variables)]\n+            #[allow(non_snake_case)]\n             fn encode(&self, s: &mut S) -> Result<(), E> {\n                 let ($(ref $name,)*) = *self;\n                 let mut n = 0;"}, {"sha": "eee3e81f5fc062c8c710d61d479ed682c254f1a6", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -328,7 +328,7 @@ pub mod dl {\n         FreeLibrary(handle as *mut libc::c_void); ()\n     }\n \n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     extern \"system\" {\n         fn SetLastError(error: libc::size_t);\n         fn LoadLibraryW(name: *const libc::c_void) -> *mut libc::c_void;"}, {"sha": "ea278d55db956fcee2e15c49bada2d454aa83ceb", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -29,7 +29,7 @@\n #![experimental]\n \n #![allow(missing_doc)]\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n \n use clone::Clone;\n use collections::{Collection, MutableSeq};"}, {"sha": "95be3191bab493eb121b5933bdac6c2e6cda06f0", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -161,7 +161,7 @@ mod imp {\n     static CRYPT_VERIFYCONTEXT: DWORD = 0xF0000000;\n     static NTE_BAD_SIGNATURE: DWORD = 0x80090006;\n \n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     extern \"system\" {\n         fn CryptAcquireContextA(phProv: *mut HCRYPTPROV,\n                                 pszContainer: LPCSTR,"}, {"sha": "aadc9178e1a00735663038f886bfd8dbfa52686a", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -543,7 +543,7 @@ mod imp {\n     /// iOS doesn't use all of them it but adding more\n     /// platform-specific configs pollutes the code too much\n     #[allow(non_camel_case_types)]\n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     #[allow(dead_code)]\n     mod uw {\n         use libc;\n@@ -657,7 +657,7 @@ mod imp {\n /// copy of that function in my mingw install (maybe it was broken?). Instead,\n /// this takes the route of using StackWalk64 in order to walk the stack.\n #[cfg(windows)]\n-#[allow(dead_code, uppercase_variables)]\n+#[allow(dead_code, non_snake_case)]\n mod imp {\n     use c_str::CString;\n     use core_collections::Collection;\n@@ -674,7 +674,7 @@ mod imp {\n     use str::StrSlice;\n     use dynamic_lib::DynamicLibrary;\n \n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     extern \"system\" {\n         fn GetCurrentProcess() -> libc::HANDLE;\n         fn GetCurrentThread() -> libc::HANDLE;"}, {"sha": "6d9b8821bd8903cc58767594388f35a725c044ee", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -157,7 +157,7 @@ impl fmt::Show for Os {\n     }\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n #[test]\n fn lookup_Rust() {\n     let abi = lookup(\"Rust\");"}, {"sha": "8df6b65cd1654c488611c01f5f64fd603ebd5c00", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -29,7 +29,7 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n // FIXME(eddyb) #10676 use Rc<T> in the future.\n pub type P<T> = Gc<T>;\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n /// Construct a P<T> from a T value.\n pub fn P<T: 'static>(value: T) -> P<T> {\n     box(GC) value"}, {"sha": "cd61f9bb35ed12c2f16c2f22295c629b7206b908", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -27,7 +27,7 @@ pub struct WinConsole<T> {\n     background: color::Color,\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n #[link(name = \"kernel32\")]\n extern \"system\" {\n     fn SetConsoleTextAttribute(handle: libc::HANDLE, attr: libc::WORD) -> libc::BOOL;"}, {"sha": "135b267262cc670b9c9c686cec62c649a7f0e7f5", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -10,7 +10,7 @@\n \n // NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n \n-#![allow(missing_doc, non_uppercase_statics, non_snake_case_functions)]\n+#![allow(missing_doc, non_uppercase_statics, non_snake_case)]\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n     use core::cmp::{Equal, Less, Greater};"}, {"sha": "91e7589b8caebdb24b7988a1db08272a5b720f51", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -33,15 +33,15 @@ pub fn is_alphabetic(c: char) -> bool {\n /// 'XID_Start' is a Unicode Derived Property specified in\n /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n /// mostly similar to ID_Start but modified for closure under NFKx.\n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n pub fn is_XID_start(c: char) -> bool    { derived_property::XID_Start(c) }\n \n /// Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property\n ///\n /// 'XID_Continue' is a Unicode Derived Property specified in\n /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n \n ///\n@@ -174,7 +174,7 @@ pub trait UnicodeChar {\n     /// 'XID_Start' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to ID_Start but modified for closure under NFKx.\n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     fn is_XID_start(&self) -> bool;\n \n     /// Returns whether the specified `char` satisfies the 'XID_Continue'\n@@ -183,7 +183,7 @@ pub trait UnicodeChar {\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n-    #[allow(non_snake_case_functions)]\n+    #[allow(non_snake_case)]\n     fn is_XID_continue(&self) -> bool;\n \n "}, {"sha": "49c12334844762b93853ba666c819928ae1aeb73", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -11,7 +11,7 @@\n // no-pretty-expanded FIXME #15189\n \n #![feature(phase)]\n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n #[phase(plugin)] extern crate green;\n \n use std::from_str::FromStr;"}, {"sha": "728f6bd043a2680eaaa7fd3c7ba5fa97b4241586", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty very bad with line comments\n \n-#![allow(non_snake_case_functions)]\n+#![allow(non_snake_case)]\n \n use std::io;\n use std::io::stdio::StdReader;"}, {"sha": "6ce63e2ecdb77dd7db13b861f6163bf4612d3346", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -32,6 +32,8 @@ enum Foo5 {\n trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n }\n \n+fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name such as `Ty`\n+\n #[repr(C)]\n struct foo7 {\n     bar: int,"}, {"sha": "ccbe1f006e308e2514076e8274d0d27c64a4af9f", "filename": "src/test/compile-fail/lint-non-snake-case-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(non_snake_case_functions)]\n+#![deny(non_snake_case)]\n #![allow(dead_code)]\n \n struct Foo;"}, {"sha": "64669d90d06bf3f3062c2d3c140fbf51f0c299b7", "filename": "src/test/compile-fail/lint-non-snake-case-lifetimes.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-lifetimes.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(non_snake_case)]\n+#![allow(dead_code)]\n+\n+fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n+    _: &'FooBar ()\n+) {}\n+\n+fn main() { }"}, {"sha": "5bc84698ec905f56b1f041d143619c0e386d673e", "filename": "src/test/compile-fail/lint-non-snake-case-modules.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-modules.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(non_snake_case)]\n+#![allow(dead_code)]\n+\n+mod FooBar { //~ ERROR module `FooBar` should have a snake case name such as `foo_bar`\n+    pub struct S;\n+}\n+\n+fn f(_: FooBar::S) { }\n+\n+fn main() { }"}, {"sha": "902cd63b1e78cdc2f5e584c09a840d578cc6f3d0", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -11,29 +11,29 @@\n // ignore-tidy-linelength\n \n #![allow(dead_code)]\n-#![deny(uppercase_variables)]\n+#![deny(non_snake_case)]\n \n use std::io::File;\n use std::io::IoError;\n \n struct Something {\n-    X: uint //~ ERROR structure field names should start with a lowercase character\n+    X: uint //~ ERROR structure field `X` should have a snake case name such as `x`\n }\n \n-fn test(Xx: uint) { //~ ERROR variable names should start with a lowercase character\n+fn test(Xx: uint) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n     println!(\"{}\", Xx);\n }\n \n fn main() {\n-    let Test: uint = 0; //~ ERROR variable names should start with a lowercase character\n+    let Test: uint = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n     println!(\"{}\", Test);\n \n     let mut f = File::open(&Path::new(\"something.txt\"));\n     let mut buff = [0u8, ..16];\n     match f.read(buff) {\n         Ok(cnt) => println!(\"read this many bytes: {}\", cnt),\n         Err(IoError{ kind: EndOfFile, .. }) => println!(\"Got end of file: {}\", EndOfFile.to_string()),\n-                        //~^ ERROR variable names should start with a lowercase character\n+        //~^ ERROR variable `EndOfFile` should have a snake case name such as `end_of_file`\n     }\n \n     test(1);"}, {"sha": "a5dce6ecc6f3e14d0bcdf6f370c741839a256af4", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -11,8 +11,9 @@\n // Issue #7526: lowercase static constants in patterns look like bindings\n \n #![allow(dead_code)]\n-#![deny(non_uppercase_pattern_statics)]\n+#![deny(non_uppercase_statics)]\n \n+#[allow(non_uppercase_statics)]\n pub static a : int = 97;\n \n fn f() {\n@@ -25,6 +26,7 @@ fn f() {\n }\n \n mod m {\n+    #[allow(non_uppercase_statics)]\n     pub static aha : int = 7;\n }\n "}, {"sha": "9028e68da1fd9357533b50abea481ee7c0563096", "filename": "src/test/run-pass/match-static-const-rename.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abd88244a9fe7033cb71e22af0601d1b811b9/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs?ref=de7abd88244a9fe7033cb71e22af0601d1b811b9", "patch": "@@ -16,7 +16,7 @@\n // around this problem locally by renaming the constant in the `use`\n // form to an uppercase identifier that placates the lint.\n \n-#![deny(non_uppercase_pattern_statics)]\n+#![deny(non_uppercase_statics)]\n \n pub static A : int = 97;\n \n@@ -34,6 +34,7 @@ fn f() {\n }\n \n mod m {\n+    #[allow(non_uppercase_statics)]\n     pub static aha : int = 7;\n }\n "}]}