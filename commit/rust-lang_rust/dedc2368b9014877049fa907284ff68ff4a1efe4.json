{"sha": "dedc2368b9014877049fa907284ff68ff4a1efe4", "node_id": "C_kwDOAAsO6NoAKGRlZGMyMzY4YjkwMTQ4NzcwNDlmYTkwNzI4NGZmNjhmZjRhMWVmZTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-27T17:18:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-27T17:18:26Z"}, "message": "Use SmallVec<[_; 1]> in `descend_into_macros_impl`", "tree": {"sha": "05ff17689ee17952f667490a731824e1661787ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ff17689ee17952f667490a731824e1661787ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedc2368b9014877049fa907284ff68ff4a1efe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedc2368b9014877049fa907284ff68ff4a1efe4", "html_url": "https://github.com/rust-lang/rust/commit/dedc2368b9014877049fa907284ff68ff4a1efe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedc2368b9014877049fa907284ff68ff4a1efe4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75660ff94fd54a921d411a75789a994111184257", "url": "https://api.github.com/repos/rust-lang/rust/commits/75660ff94fd54a921d411a75789a994111184257", "html_url": "https://github.com/rust-lang/rust/commit/75660ff94fd54a921d411a75789a994111184257"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3d346b60ab44e8e52586d472a62aa994326a3878", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dedc2368b9014877049fa907284ff68ff4a1efe4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedc2368b9014877049fa907284ff68ff4a1efe4/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=dedc2368b9014877049fa907284ff68ff4a1efe4", "patch": "@@ -542,32 +542,32 @@ impl<'db> SemanticsImpl<'db> {\n             None => return,\n         };\n         let sa = self.analyze(&parent);\n-        let mut queue = vec![InFile::new(sa.file_id, token)];\n+        let mut stack: SmallVec<[_; 1]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n \n         let mut process_expansion_for_token =\n-            |queue: &mut Vec<_>, file_id, item, token: InFile<&_>| {\n+            |stack: &mut SmallVec<_>, file_id, item, token: InFile<&_>| {\n                 let mapped_tokens = cache\n                     .entry(file_id)\n                     .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n                     .as_ref()?\n                     .map_token_down(self.db.upcast(), item, token)?;\n \n-                let len = queue.len();\n+                let len = stack.len();\n                 // requeue the tokens we got from mapping our current token down\n-                queue.extend(mapped_tokens.inspect(|token| {\n+                stack.extend(mapped_tokens.inspect(|token| {\n                     if let Some(parent) = token.value.parent() {\n                         self.cache(find_root(&parent), token.file_id);\n                     }\n                 }));\n                 // if the length changed we have found a mapping for the token\n-                (queue.len() != len).then(|| ())\n+                (stack.len() != len).then(|| ())\n             };\n \n         // Remap the next token in the queue into a macro call its in, if it is not being remapped\n         // either due to not being in a macro-call or because its unused push it into the result vec,\n         // otherwise push the remapped tokens back into the queue as they can potentially be remapped again.\n-        while let Some(token) = queue.pop() {\n+        while let Some(token) = stack.pop() {\n             self.db.unwind_if_cancelled();\n             let was_not_remapped = (|| {\n                 // are we inside an attribute macro call\n@@ -584,7 +584,7 @@ impl<'db> SemanticsImpl<'db> {\n                 if let Some((call_id, item)) = containing_attribute_macro_call {\n                     let file_id = call_id.as_file();\n                     return process_expansion_for_token(\n-                        &mut queue,\n+                        &mut stack,\n                         file_id,\n                         Some(item),\n                         token.as_ref(),\n@@ -607,7 +607,7 @@ impl<'db> SemanticsImpl<'db> {\n                     }\n \n                     let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n-                    return process_expansion_for_token(&mut queue, file_id, None, token.as_ref());\n+                    return process_expansion_for_token(&mut stack, file_id, None, token.as_ref());\n                 }\n \n                 // outside of a macro invocation so this is a \"final\" token"}]}