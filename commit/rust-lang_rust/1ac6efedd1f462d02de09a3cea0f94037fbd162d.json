{"sha": "1ac6efedd1f462d02de09a3cea0f94037fbd162d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYzZlZmVkZDFmNDYyZDAyZGUwOWEzY2VhMGY5NDAzN2ZiZDE2MmQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-16T15:57:11Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-16T18:27:59Z"}, "message": "Rustup to *1.9.0-nightly (c66d2380a 2016-03-15)*", "tree": {"sha": "7ad91a05727544eb0a5f9fc5c87db96d4968b0ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad91a05727544eb0a5f9fc5c87db96d4968b0ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac6efedd1f462d02de09a3cea0f94037fbd162d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac6efedd1f462d02de09a3cea0f94037fbd162d", "html_url": "https://github.com/rust-lang/rust/commit/1ac6efedd1f462d02de09a3cea0f94037fbd162d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac6efedd1f462d02de09a3cea0f94037fbd162d/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893d6e8bf2ef5c8cde1946a223471cfa061370ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/893d6e8bf2ef5c8cde1946a223471cfa061370ee", "html_url": "https://github.com/rust-lang/rust/commit/893d6e8bf2ef5c8cde1946a223471cfa061370ee"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "f81a05d43d5151c9c3f0dd7272a3d5e179894ab1", "filename": "src/escape.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ac6efedd1f462d02de09a3cea0f94037fbd162d/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac6efedd1f462d02de09a3cea0f94037fbd162d/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=1ac6efedd1f462d02de09a3cea0f94037fbd162d", "patch": "@@ -3,6 +3,7 @@ use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::infer;\n use rustc::middle::mem_categorization::{cmt, Categorization};\n+use rustc::middle::traits::ProjectionMode;\n use rustc::middle::ty::adjustment::AutoAdjustment;\n use rustc::middle::ty;\n use rustc::util::nodemap::NodeSet;\n@@ -54,7 +55,7 @@ impl LintPass for EscapePass {\n impl LateLintPass for EscapePass {\n     fn check_fn(&mut self, cx: &LateContext, _: visit::FnKind, decl: &FnDecl, body: &Block, _: Span, id: NodeId) {\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n-        let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(param_env));\n+        let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(param_env), ProjectionMode::Any);\n         let mut v = EscapeDelegate {\n             cx: cx,\n             set: NodeSet(),"}, {"sha": "cacc9f8e51b506e02afee8c974353f468b5c41cf", "filename": "src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ac6efedd1f462d02de09a3cea0f94037fbd162d/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac6efedd1f462d02de09a3cea0f94037fbd162d/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=1ac6efedd1f462d02de09a3cea0f94037fbd162d", "patch": "@@ -2,6 +2,7 @@ use reexport::*;\n use rustc::front::map::Node;\n use rustc::lint::{LintContext, LateContext, Level, Lint};\n use rustc::middle::def_id::DefId;\n+use rustc::middle::traits::ProjectionMode;\n use rustc::middle::{cstore, def, infer, ty, traits};\n use rustc::session::Session;\n use rustc_front::hir::*;\n@@ -269,7 +270,7 @@ pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>,\n                                   -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n-    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None);\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None, ProjectionMode::Any);\n     let obligation = traits::predicate_for_trait_def(cx.tcx,\n                                                      traits::ObligationCause::dummy(),\n                                                      trait_id,\n@@ -753,6 +754,6 @@ pub fn return_ty(fun: ty::Ty) -> Option<ty::Ty> {\n // FIXME: this works correctly for lifetimes bounds (`for <'a> Foo<'a>` == `for <'b> Foo<'b>` but\n // not for type parameters.\n pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty<'tcx>) -> bool {\n-    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None);\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None, ProjectionMode::Any);\n     infcx.can_equate(&cx.tcx.erase_regions(&a), &cx.tcx.erase_regions(&b)).is_ok()\n }"}]}