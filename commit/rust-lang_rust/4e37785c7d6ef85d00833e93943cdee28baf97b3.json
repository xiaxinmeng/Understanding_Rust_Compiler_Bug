{"sha": "4e37785c7d6ef85d00833e93943cdee28baf97b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzc3ODVjN2Q2ZWY4NWQwMDgzM2U5Mzk0M2NkZWUyOGJhZjk3YjM=", "commit": {"author": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-21T03:03:40Z"}, "committer": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-21T03:03:40Z"}, "message": "Create and reference Memory Layout section of boxed docs", "tree": {"sha": "6b9e1ed3a8fb7e70f84ce4a7edb7b4bf17e4e674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b9e1ed3a8fb7e70f84ce4a7edb7b4bf17e4e674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e37785c7d6ef85d00833e93943cdee28baf97b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e37785c7d6ef85d00833e93943cdee28baf97b3", "html_url": "https://github.com/rust-lang/rust/commit/4e37785c7d6ef85d00833e93943cdee28baf97b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e37785c7d6ef85d00833e93943cdee28baf97b3/comments", "author": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178b753a4a202ad96ccbd10e037194d15ca8f805", "url": "https://api.github.com/repos/rust-lang/rust/commits/178b753a4a202ad96ccbd10e037194d15ca8f805", "html_url": "https://github.com/rust-lang/rust/commit/178b753a4a202ad96ccbd10e037194d15ca8f805"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "024594517d9884bfa636789086d6e570c44d4611", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4e37785c7d6ef85d00833e93943cdee28baf97b3/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e37785c7d6ef85d00833e93943cdee28baf97b3/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=4e37785c7d6ef85d00833e93943cdee28baf97b3", "patch": "@@ -4,16 +4,6 @@\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n //! drop their contents when they go out of scope.\n //!\n-//! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\n-//! its allocation. It is valid to convert both ways between a [`Box`] and a\n-//! raw pointer allocated with the [`Global`] allocator, given that the\n-//! [`Layout`] used with the allocator is correct for the type. More precisely,\n-//! a `value: *mut T` that has been allocated with the [`Global`] allocator\n-//! with `Layout::for_value(&*value)` may be converted into a box using\n-//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n-//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n-//! [`Global`] allocator with `Layout::for_value(&*value)`.\n-//!\n //! # Examples\n //!\n //! Move a value from the stack to the heap by creating a [`Box`]:\n@@ -61,6 +51,19 @@\n //! for a `Cons`. By introducing a `Box`, which has a defined size, we know how\n //! big `Cons` needs to be.\n //!\n+//! # Memory layout\n+//!\n+//! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\n+//! its allocation. It is valid to convert both ways between a [`Box`] and a\n+//! raw pointer allocated with the [`Global`] allocator, given that the\n+//! [`Layout`] used with the allocator is correct for the type. More precisely,\n+//! a `value: *mut T` that has been allocated with the [`Global`] allocator\n+//! with `Layout::for_value(&*value)` may be converted into a box using\n+//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n+//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n+//! [`Global`] allocator with `Layout::for_value(&*value)`.\n+//!\n+//!\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html\n //! [`Global`]: ../alloc/struct.Global.html\n@@ -128,11 +131,8 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the raw pointer is owned by the\n     /// resulting `Box`. Specifically, the `Box` destructor will call\n     /// the destructor of `T` and free the allocated memory. For this\n-    /// to be safe, the memory must have been allocated in the precise\n-    /// way that `Box` expects, namely, using the global allocator\n-    /// with the correct [`Layout`] for holding a value of type `T`. In\n-    /// particular, this will be satisfied for a pointer obtained\n-    /// from a previously existing `Box` using [`Box::into_raw`].\n+    /// to be safe, the memory must have been allocated in accordance\n+    /// with the [memory layout] used by `Box` .\n     ///\n     /// # Safety\n     ///\n@@ -141,24 +141,27 @@ impl<T: ?Sized> Box<T> {\n     /// function is called twice on the same raw pointer.\n     ///\n     /// # Examples\n-    /// Recreate a `Box` which was previously converted to a raw pointer using [`Box::into_raw`]:\n+    /// Recreate a `Box` which was previously converted to a raw pointer\n+    /// using [`Box::into_raw`]:\n     /// ```\n     /// let x = Box::new(5);\n     /// let ptr = Box::into_raw(x);\n     /// let x = unsafe { Box::from_raw(ptr) };\n     /// ```\n     /// Manually create a `Box` from scratch by using the global allocator:\n     /// ```\n-    /// use std::alloc::{Layout, alloc};\n+    /// use std::alloc::{alloc, Layout};\n     ///\n-    /// let ptr = unsafe{ alloc(Layout::new::<i32>()) } as *mut i32;\n-    /// unsafe{ *ptr = 5; }\n-    /// let x = unsafe{ Box::from_raw(ptr) };\n+    /// unsafe {\n+    ///     let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n+    ///     *ptr = 5;\n+    ///     let x = Box::from_raw(ptr);\n+    /// }\n     /// ```\n     ///\n+    /// [memory layout]: index.html#memory-layout\n     /// [`Layout`]: ../alloc/struct.Layout.html\n     /// [`Box::into_raw`]: struct.Box.html#method.into_raw\n-    ///\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -171,9 +174,11 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n-    /// caller should properly destroy `T` and release the memory. The\n-    /// easiest way to do so is to convert the raw pointer back into a `Box`\n-    /// with the [`Box::from_raw`] function.\n+    /// caller should properly destroy `T` and release the memory, taking\n+    /// into account the [memory layout] used by `Box`. The easiest way to\n+    /// do this is to convert the raw pointer back into a `Box` with the\n+    /// [`Box::from_raw`] function, allowing the `Box` destructor to perform\n+    /// the cleanup.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\n@@ -185,21 +190,24 @@ impl<T: ?Sized> Box<T> {\n     /// ```\n     /// let x = Box::new(String::from(\"Hello\"));\n     /// let ptr = Box::into_raw(x);\n-    /// let x = unsafe{ Box::from_raw(ptr) };\n+    /// let x = unsafe { Box::from_raw(ptr) };\n     /// ```\n-    /// Manual cleanup by running the destructor and deallocating the memory:\n+    /// Manual cleanup by explicitly running the destructor and deallocating\n+    /// the memory:\n     /// ```\n-    /// use std::alloc::{Layout, dealloc};\n+    /// use std::alloc::{dealloc, Layout};\n     /// use std::ptr;\n     ///\n     /// let x = Box::new(String::from(\"Hello\"));\n     /// let p = Box::into_raw(x);\n-    /// unsafe{ ptr::drop_in_place(p); }\n-    /// unsafe{ dealloc(p as *mut u8, Layout::new::<String>()); }\n+    /// unsafe {\n+    ///     ptr::drop_in_place(p);\n+    ///     dealloc(p as *mut u8, Layout::new::<String>());\n+    /// }\n     /// ```\n     ///\n+    /// [memory layout]: index.html#memory-layout\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n-    ///\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n@@ -233,7 +241,7 @@ impl<T: ?Sized> Box<T> {\n     ///\n     ///     // Clean up the memory by converting the NonNull pointer back\n     ///     // into a Box and letting the Box be dropped.\n-    ///     let x = unsafe{ Box::from_raw(ptr.as_ptr()) };\n+    ///     let x = unsafe { Box::from_raw(ptr.as_ptr()) };\n     /// }\n     /// ```\n     #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]"}]}