{"sha": "05cfb3f5b553f96f299919e19be10bccb240a6a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2ZiM2Y1YjU1M2Y5NmYyOTk5MTllMTliZTEwYmNjYjI0MGE2YTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T01:13:31Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T15:08:49Z"}, "message": "Rename Def::{Param, Foreign} to Def::{TyParam, TyForeign}", "tree": {"sha": "c5b525b798ff53accc7a126f3654ddb23beec533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5b525b798ff53accc7a126f3654ddb23beec533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cfb3f5b553f96f299919e19be10bccb240a6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cfb3f5b553f96f299919e19be10bccb240a6a7", "html_url": "https://github.com/rust-lang/rust/commit/05cfb3f5b553f96f299919e19be10bccb240a6a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cfb3f5b553f96f299919e19be10bccb240a6a7/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f3685a82b337cf3359efa09b25826b8be4df04", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f3685a82b337cf3359efa09b25826b8be4df04", "html_url": "https://github.com/rust-lang/rust/commit/08f3685a82b337cf3359efa09b25826b8be4df04"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "4a14223eb88f78b4b6b23f90e6c3e24270a471b2", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -53,13 +53,13 @@ pub enum Def {\n     Existential(DefId),\n     /// `type Foo = Bar;`\n     TyAlias(DefId),\n-    Foreign(DefId),\n+    TyForeign(DefId),\n     TraitAlias(DefId),\n     AssociatedTy(DefId),\n     /// `existential type Foo: Bar;`\n     AssociatedExistential(DefId),\n     PrimTy(hir::PrimTy),\n-    Param(DefId),\n+    TyParam(DefId),\n     SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n     ToolMod, // e.g. `rustfmt` in `#[rustfmt::skip]`\n \n@@ -269,10 +269,10 @@ impl Def {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n-            Def::AssociatedTy(id) | Def::Param(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n+            Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::Existential(id) | Def::AssociatedExistential(id) | Def::Foreign(id) => {\n+            Def::Existential(id) | Def::AssociatedExistential(id) | Def::TyForeign(id) => {\n                 id\n             }\n \n@@ -311,11 +311,11 @@ impl Def {\n             Def::StructCtor(.., CtorKind::Fictive) => bug!(\"impossible struct constructor\"),\n             Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n-            Def::Foreign(..) => \"foreign type\",\n+            Def::TyForeign(..) => \"foreign type\",\n             Def::Method(..) => \"method\",\n             Def::Const(..) => \"constant\",\n             Def::AssociatedConst(..) => \"associated constant\",\n-            Def::Param(..) => \"type parameter\",\n+            Def::TyParam(..) => \"type parameter\",\n             Def::PrimTy(..) => \"builtin type\",\n             Def::Local(..) => \"local variable\",\n             Def::Upvar(..) => \"closure capture\","}, {"sha": "a43afa9e34a73c388b91db7b1f4d8f26fe001114", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -1213,7 +1213,7 @@ impl<'a> LoweringContext<'a> {\n                             None,\n                             P(hir::Path {\n                                 span,\n-                                def: Def::Param(DefId::local(def_index)),\n+                                def: Def::TyParam(DefId::local(def_index)),\n                                 segments: hir_vec![hir::PathSegment::from_ident(ident)],\n                             }),\n                         ))\n@@ -2352,7 +2352,7 @@ impl<'a> LoweringContext<'a> {\n                                 if path.segments.len() == 1\n                                     && bound_pred.bound_generic_params.is_empty() =>\n                             {\n-                                if let Some(Def::Param(def_id)) = self.resolver\n+                                if let Some(Def::TyParam(def_id)) = self.resolver\n                                     .get_resolution(bound_pred.bounded_ty.id)\n                                     .map(|d| d.base_def())\n                                 {"}, {"sha": "ebda91cb7b0775269fb586d87237da406adf1c89", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -453,7 +453,7 @@ impl<'hir> Map<'hir> {\n                 match item.node {\n                     ForeignItemKind::Fn(..) => Some(Def::Fn(def_id)),\n                     ForeignItemKind::Static(_, m) => Some(Def::Static(def_id, m)),\n-                    ForeignItemKind::Type => Some(Def::Foreign(def_id)),\n+                    ForeignItemKind::Type => Some(Def::TyForeign(def_id)),\n                 }\n             }\n             NodeTraitItem(item) => {\n@@ -499,7 +499,7 @@ impl<'hir> Map<'hir> {\n             NodeGenericParam(param) => {\n                 Some(match param.kind {\n                     GenericParamKind::Lifetime { .. } => Def::Local(param.id),\n-                    GenericParamKind::Type { .. } => Def::Param(self.local_def_id(param.id)),\n+                    GenericParamKind::Type { .. } => Def::TyParam(self.local_def_id(param.id)),\n                 })\n             }\n         }"}, {"sha": "e1d673a51153db5fefd7f4f9ac77aaccc72e807a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -1010,9 +1010,9 @@ impl_stable_hash_for!(enum hir::def::Def {\n     AssociatedTy(def_id),\n     AssociatedExistential(def_id),\n     PrimTy(prim_ty),\n-    Param(def_id),\n+    TyParam(def_id),\n     SelfTy(trait_def_id, impl_def_id),\n-    Foreign(def_id),\n+    TyForeign(def_id),\n     Fn(def_id),\n     Const(def_id),\n     Static(def_id, is_mutbl),"}, {"sha": "379f4df11fa7b4881da1c7b488278bb6350b4262", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -1326,7 +1326,7 @@ fn object_lifetime_defaults_for_item(\n                     _ => continue,\n                 };\n \n-                if def == Def::Param(param_def_id) {\n+                if def == Def::TyParam(param_def_id) {\n                     add_bounds(&mut set, &data.bounds);\n                 }\n             }"}, {"sha": "c26d8555214c1cfbb894fc04d2a57f20bd0e4322", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -1510,7 +1510,7 @@ impl TypeAliasBounds {\n                 match ty.node {\n                     hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n                         match path.def {\n-                            Def::Param(_) => true,\n+                            Def::TyParam(_) => true,\n                             _ => false\n                         }\n                     }"}, {"sha": "f4dd8861e2a2ce2c81eb8cc2536443f3c98bd2b4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -429,7 +429,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Trait(_) => Def::Trait(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n-            EntryKind::ForeignType => Def::Foreign(did),\n+            EntryKind::ForeignType => Def::TyForeign(did),\n \n             EntryKind::ForeignMod |\n             EntryKind::GlobalAsm |"}, {"sha": "19dc35f854eed5bbf6a05f977e11f7b77c0bbfe3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 (Def::Static(self.definitions.local_def_id(item.id), m), ValueNS)\n             }\n             ForeignItemKind::Ty => {\n-                (Def::Foreign(self.definitions.local_def_id(item.id)), TypeNS)\n+                (Def::TyForeign(self.definitions.local_def_id(item.id)), TypeNS)\n             }\n             ForeignItemKind::Macro(_) => unreachable!(),\n         };\n@@ -692,7 +692,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                              span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n             }\n-            Def::Variant(..) | Def::TyAlias(..) | Def::Foreign(..) => {\n+            Def::Variant(..) | Def::TyAlias(..) | Def::TyForeign(..) => {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n             }\n             Def::Fn(..) | Def::Static(..) | Def::Const(..) | Def::VariantCtor(..) => {"}, {"sha": "36b87823c7e9fb1da2c53b558cad1c8095828db8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -204,14 +204,14 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                                     \"`Self` type implicitly declared here, on the `impl`\");\n                     }\n                 },\n-                Def::Param(typaram_defid) => {\n+                Def::TyParam(typaram_defid) => {\n                     if let Some(typaram_span) = resolver.definitions.opt_span(typaram_defid) {\n                         err.span_label(typaram_span, \"type variable from outer function\");\n                     }\n                 },\n                 _ => {\n                     bug!(\"TypeParametersFromOuterFunction should only be used with Def::SelfTy or \\\n-                         Def::Param\")\n+                         Def::TyParam\")\n                 }\n             }\n \n@@ -537,9 +537,9 @@ impl<'a> PathSource<'a> {\n             PathSource::Type => match def {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n                 Def::Trait(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n-                Def::PrimTy(..) | Def::Param(..) | Def::SelfTy(..) |\n+                Def::PrimTy(..) | Def::TyParam(..) | Def::SelfTy(..) |\n                 Def::Existential(..) |\n-                Def::Foreign(..) => true,\n+                Def::TyForeign(..) => true,\n                 _ => false,\n             },\n             PathSource::Trait(AliasPossibility::No) => match def {\n@@ -2359,7 +2359,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             seen_bindings.entry(ident).or_insert(param.ident.span);\n \n                         // Plain insert (no renaming).\n-                        let def = Def::Param(self.definitions.local_def_id(param.id));\n+                        let def = Def::TyParam(self.definitions.local_def_id(param.id));\n                             function_type_rib.bindings.insert(ident, def);\n                             self.record_def(param.id, PathResolution::new(def));\n                         }\n@@ -3765,7 +3765,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     }\n                 }\n             }\n-            Def::Param(..) | Def::SelfTy(..) => {\n+            Def::TyParam(..) | Def::SelfTy(..) => {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | TraitOrImplItemRibKind | ClosureRibKind(..) |"}, {"sha": "298f95496666a7a1e48db447be3d912721ebb487", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -747,13 +747,13 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Union(def_id) |\n             HirDef::Enum(def_id) |\n             HirDef::TyAlias(def_id) |\n-            HirDef::Foreign(def_id) |\n+            HirDef::TyForeign(def_id) |\n             HirDef::TraitAlias(def_id) |\n             HirDef::AssociatedExistential(def_id) |\n             HirDef::AssociatedTy(def_id) |\n             HirDef::Trait(def_id) |\n             HirDef::Existential(def_id) |\n-            HirDef::Param(def_id) => {\n+            HirDef::TyParam(def_id) => {\n                 let span = self.span_from_span(sub_span);\n                 Some(Ref {\n                     kind: RefKind::Type,"}, {"sha": "e2f3451ce8f03b4316f16e4c9ae18da12e5c5feb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -1240,7 +1240,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 }\n             }\n             (&ty::Param(_), Def::SelfTy(Some(param_did), None)) |\n-            (&ty::Param(_), Def::Param(param_did)) => {\n+            (&ty::Param(_), Def::TyParam(param_did)) => {\n                 match self.find_bound_for_assoc_item(param_did, assoc_name, span) {\n                     Ok(bound) => bound,\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n@@ -1387,7 +1387,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 )\n             }\n             Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) |\n-            Def::Union(did) | Def::Foreign(did) => {\n+            Def::Union(did) | Def::TyForeign(did) => {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments.split_last().unwrap().1);\n                 self.ast_path_to_ty(span, did, path.segments.last().unwrap())\n@@ -1401,7 +1401,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                     tcx.parent_def_id(did).unwrap(),\n                                     path.segments.last().unwrap())\n             }\n-            Def::Param(did) => {\n+            Def::TyParam(did) => {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n "}, {"sha": "9aa2ba363ed7ab41870188de93b2d8bf101ab303", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -830,7 +830,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 hir::intravisit::walk_ty(self, ty);\n                                 match ty.node {\n                                     hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n-                                        if let hir::def::Def::Param(def_id) = path.def {\n+                                        if let hir::def::Def::TyParam(def_id) = path.def {\n                                             if def_id == self.1 {\n                                                 self.0 = Some(ty.span);\n                                             }"}, {"sha": "956d542ab7d4e108a5edd61bf6fef3b5777ac635", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -350,7 +350,7 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.def {\n             Def::SelfTy(Some(def_id), None) |\n-            Def::Param(def_id) => {\n+            Def::TyParam(def_id) => {\n                 def_id == tcx.hir.local_def_id(param_id)\n             }\n             _ => false"}, {"sha": "1c66c39b660b246cc5f32fab320488718139d8e5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -83,7 +83,7 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n             ret.extend(build_impls(cx, did, true));\n             clean::EnumItem(build_enum(cx, did))\n         }\n-        Def::Foreign(did) => {\n+        Def::TyForeign(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Foreign);\n             ret.extend(build_impls(cx, did, false));\n             clean::ForeignTypeItem"}, {"sha": "62f5c9795e4d65f45474414baba8b8cfe51bc75f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -2411,7 +2411,7 @@ impl Clean<Type> for hir::Ty {\n                     return new_ty;\n                 }\n \n-                if let Def::Param(did) = path.def {\n+                if let Def::TyParam(did) = path.def {\n                     if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did) {\n                         return ImplTrait(bounds);\n                     }\n@@ -2460,7 +2460,7 @@ impl Clean<Type> for hir::Ty {\n                                 }\n                                 hir::GenericParamKind::Type { ref default, .. } => {\n                                     let ty_param_def =\n-                                        Def::Param(cx.tcx.hir.local_def_id(param.id));\n+                                        Def::TyParam(cx.tcx.hir.local_def_id(param.id));\n                                     let mut j = 0;\n                                     let type_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n@@ -3710,10 +3710,10 @@ fn resolve_type(cx: &DocContext,\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(keywords::SelfType.name().to_string());\n         }\n-        Def::Param(..) if path.segments.len() == 1 => {\n+        Def::TyParam(..) if path.segments.len() == 1 => {\n             return Generic(format!(\"{:#}\", path));\n         }\n-        Def::SelfTy(..) | Def::Param(..) | Def::AssociatedTy(..) => true,\n+        Def::SelfTy(..) | Def::TyParam(..) | Def::AssociatedTy(..) => true,\n         _ => false,\n     };\n     let did = register_def(&*cx, path.def);\n@@ -3731,7 +3731,7 @@ pub fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Struct(i) => (i, TypeKind::Struct),\n         Def::Union(i) => (i, TypeKind::Union),\n         Def::Mod(i) => (i, TypeKind::Module),\n-        Def::Foreign(i) => (i, TypeKind::Foreign),\n+        Def::TyForeign(i) => (i, TypeKind::Foreign),\n         Def::Const(i) => (i, TypeKind::Const),\n         Def::Static(i, _) => (i, TypeKind::Static),\n         Def::Variant(i) => (cx.tcx.parent_def_id(i).expect(\"cannot get parent def id\"),"}, {"sha": "a312913a69c17bf2ffd23e18acd40a608d6cdee3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocContext<'a, 'tcx, 'rcx, 'cstore> {\n                 None,\n                 P(hir::Path {\n                     span: DUMMY_SP,\n-                    def: Def::Param(param.def_id),\n+                    def: Def::TyParam(param.def_id),\n                     segments: HirVec::from_vec(vec![\n                         hir::PathSegment::from_ident(Ident::from_interned_str(param.name))\n                     ]),"}, {"sha": "68ddf72da0617bb4d9011c11425dd67ce7abb68d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfb3f5b553f96f299919e19be10bccb240a6a7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=05cfb3f5b553f96f299919e19be10bccb240a6a7", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n                 Def::Struct(did) |\n                 Def::Union(did) |\n                 Def::Enum(did) |\n-                Def::Foreign(did) |\n+                Def::TyForeign(did) |\n                 Def::TyAlias(did) if !self_is_hidden => {\n                     self.cx.access_levels.borrow_mut().map.insert(did, AccessLevel::Public);\n                 },"}]}