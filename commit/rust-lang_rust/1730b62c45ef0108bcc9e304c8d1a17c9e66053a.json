{"sha": "1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "node_id": "C_kwDOAAsO6NoAKDE3MzBiNjJjNDVlZjAxMDhiY2M5ZTMwNGM4ZDFhMTdjOWU2NjA1M2E", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-01T15:11:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T15:11:06Z"}, "message": "Rollup merge of #97592 - notriddle:notriddle/impl-trait, r=GuillaumeGomez\n\nrustdoc: also index impl trait and raw pointers\n\nRevives #92339", "tree": {"sha": "946a1db820f1bcab12824454cede3f872770e241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/946a1db820f1bcab12824454cede3f872770e241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil4GLCRBK7hj4Ov3rIwAApDcIAF8MRQRTrLV0pHRT3hd32JyM\njBvI93TI0b6EqQ/SC+SL/ltgV3vQrjdE1wdhwPb/IK1fL61TR2asXs3zjpUkP4D5\ndoo+JUWAIDVWRDffD+KW0GIa5/hvQpQmcs9x2wLSAdsL3Dvtw2rKYWY6FonkrwlW\niJqKALnzj8QEUBu3HZ+gh3LKTO5Jpt68jbONSXWwUIbSIlXwVSNHl0C8jeTOrIWJ\ncNNO2Rpj0kgzGYrCzh9k7/Qrqg0V6lFJF0uNwARf2UhedMY6gHEGmjVJojOFvJAg\n2OX7pwF3VKD1GJ5YTsO1BvO5SFUZKWN5Gklv9J83TRBnwhmoOZAzrnAibMwV8GY=\n=dplM\n-----END PGP SIGNATURE-----\n", "payload": "tree 946a1db820f1bcab12824454cede3f872770e241\nparent daedae7b233fe2e489bed5e586b013c2ce51f546\nparent 14d8baf365280b82f79dddfbc1a65d2692258acd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654096266 +0200\ncommitter GitHub <noreply@github.com> 1654096266 +0200\n\nRollup merge of #97592 - notriddle:notriddle/impl-trait, r=GuillaumeGomez\n\nrustdoc: also index impl trait and raw pointers\n\nRevives #92339\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "html_url": "https://github.com/rust-lang/rust/commit/1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daedae7b233fe2e489bed5e586b013c2ce51f546", "url": "https://api.github.com/repos/rust-lang/rust/commits/daedae7b233fe2e489bed5e586b013c2ce51f546", "html_url": "https://github.com/rust-lang/rust/commit/daedae7b233fe2e489bed5e586b013c2ce51f546"}, {"sha": "14d8baf365280b82f79dddfbc1a65d2692258acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d8baf365280b82f79dddfbc1a65d2692258acd", "html_url": "https://github.com/rust-lang/rust/commit/14d8baf365280b82f79dddfbc1a65d2692258acd"}], "stats": {"total": 190, "additions": 182, "deletions": 8}, "files": [{"sha": "4605793d0df941bc70cf4dfad9075a45e361c609", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "patch": "@@ -1667,6 +1667,10 @@ impl Type {\n         matches!(self, Type::Generic(_))\n     }\n \n+    pub(crate) fn is_impl_trait(&self) -> bool {\n+        matches!(self, Type::ImplTrait(_))\n+    }\n+\n     pub(crate) fn is_primitive(&self) -> bool {\n         self.primitive_type().is_some()\n     }"}, {"sha": "9f302cc256659b2a24a2652c84018c62f284ffd6", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "patch": "@@ -226,17 +226,17 @@ fn get_index_type_name(clean_type: &clean::Type) -> Option<Symbol> {\n             Some(path.segments.last().unwrap().name)\n         }\n         // We return an empty name because we don't care about the generic name itself.\n-        clean::Generic(_) => Some(kw::Empty),\n+        clean::Generic(_) | clean::ImplTrait(_) => Some(kw::Empty),\n         clean::Primitive(ref p) => Some(p.as_sym()),\n-        clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_),\n+        clean::BorrowedRef { ref type_, .. } | clean::RawPointer(_, ref type_) => {\n+            get_index_type_name(type_)\n+        }\n         clean::BareFunction(_)\n         | clean::Tuple(_)\n         | clean::Slice(_)\n         | clean::Array(_, _)\n-        | clean::RawPointer(_, _)\n         | clean::QPath { .. }\n-        | clean::Infer\n-        | clean::ImplTrait(_) => None,\n+        | clean::Infer => None,\n     }\n }\n \n@@ -264,10 +264,12 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n         mut generics: Vec<TypeWithKind>,\n         cache: &Cache,\n     ) {\n-        let is_full_generic = ty.is_full_generic();\n+        // generics and impl trait are both identified by their generics,\n+        // rather than a type name itself\n+        let anonymous = ty.is_full_generic() || ty.is_impl_trait();\n         let generics_empty = generics.is_empty();\n \n-        if is_full_generic {\n+        if anonymous {\n             if generics_empty {\n                 // This is a type parameter with no trait bounds (for example: `T` in\n                 // `fn f<T>(p: T)`, so not useful for the rustdoc search because we would end up\n@@ -318,7 +320,7 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n         if index_ty.name.as_ref().map(|s| s.is_empty() && generics_empty).unwrap_or(true) {\n             return;\n         }\n-        if is_full_generic {\n+        if anonymous {\n             // We remove the name of the full generic because we have no use for it.\n             index_ty.name = Some(String::new());\n             res.push(TypeWithKind::from((index_ty, ItemType::Generic)));\n@@ -398,6 +400,23 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n             }\n             insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n         }\n+    } else if let Type::ImplTrait(ref bounds) = *arg {\n+        let mut ty_generics = Vec::new();\n+        for bound in bounds {\n+            if let Some(path) = bound.get_trait_path() {\n+                let ty = Type::Path { path };\n+                add_generics_and_bounds_as_types(\n+                    self_,\n+                    generics,\n+                    &ty,\n+                    tcx,\n+                    recurse + 1,\n+                    &mut ty_generics,\n+                    cache,\n+                );\n+            }\n+        }\n+        insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n     } else {\n         // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n         // looking at `Option`, we enter this \"else\" condition, otherwise if it's `T`, we don't."}, {"sha": "8d594bf8aea7522084f77251b602d077f33d6050", "filename": "src/test/rustdoc-js/impl-trait.js", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fimpl-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fimpl-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fimpl-trait.js?ref=1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "patch": "@@ -0,0 +1,51 @@\n+// ignore-order\n+\n+const QUERY = [\n+    'Aaaaaaa -> i32',\n+    'Aaaaaaa -> Aaaaaaa',\n+    'Aaaaaaa -> usize',\n+    '-> Aaaaaaa',\n+    'Aaaaaaa',\n+];\n+\n+const EXPECTED = [\n+    {\n+        // Aaaaaaa -> i32\n+        'others': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'eeeeeee' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa -> Aaaaaaa\n+        'others': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa -> usize\n+        'others': [],\n+    },\n+    {\n+        // -> Aaaaaaa\n+        'others': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'ddddddd' },\n+            { 'path': 'impl_trait', 'name': 'bbbbbbb' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa\n+        'others': [\n+            { 'path': 'impl_trait', 'name': 'Aaaaaaa' },\n+        ],\n+        'in_args': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'eeeeeee' },\n+        ],\n+        'returned': [\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'impl_trait::Ccccccc', 'name': 'ddddddd' },\n+            { 'path': 'impl_trait', 'name': 'bbbbbbb' },\n+        ],\n+    },\n+];"}, {"sha": "fb8869b46f3d40aa149a4c03725536f96e8968e1", "filename": "src/test/rustdoc-js/impl-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fimpl-trait.rs?ref=1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "patch": "@@ -0,0 +1,21 @@\n+pub trait Aaaaaaa {}\n+\n+impl Aaaaaaa for () {}\n+\n+pub fn bbbbbbb() -> impl Aaaaaaa {\n+    ()\n+}\n+\n+pub struct Ccccccc {}\n+\n+impl Ccccccc {\n+    pub fn ddddddd(&self) -> impl Aaaaaaa {\n+        ()\n+    }\n+    pub fn eeeeeee(&self, _x: impl Aaaaaaa) -> i32 {\n+        0\n+    }\n+    pub fn fffffff(&self, x: impl Aaaaaaa) -> impl Aaaaaaa {\n+        x\n+    }\n+}"}, {"sha": "140b955ea713acfae220d54bbeed6e7ebcce8634", "filename": "src/test/rustdoc-js/raw-pointer.js", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fraw-pointer.js", "raw_url": "https://github.com/rust-lang/rust/raw/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fraw-pointer.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fraw-pointer.js?ref=1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "patch": "@@ -0,0 +1,55 @@\n+// ignore-order\n+\n+const QUERY = [\n+    'Aaaaaaa -> i32',\n+    'Aaaaaaa -> Aaaaaaa',\n+    'Aaaaaaa -> usize',\n+    '-> Aaaaaaa',\n+    'Aaaaaaa',\n+];\n+\n+const EXPECTED = [\n+    {\n+        // Aaaaaaa -> i32\n+        'others': [\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'eeeeeee' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa -> Aaaaaaa\n+        'others': [\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'ggggggg' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa -> usize\n+        'others': [],\n+    },\n+    {\n+        // -> Aaaaaaa\n+        'others': [\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'ggggggg' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'ddddddd' },\n+            { 'path': 'raw_pointer', 'name': 'bbbbbbb' },\n+        ],\n+    },\n+    {\n+        // Aaaaaaa\n+        'others': [\n+            { 'path': 'raw_pointer', 'name': 'Aaaaaaa' },\n+        ],\n+        'in_args': [\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'ggggggg' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'eeeeeee' },\n+        ],\n+        'returned': [\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'fffffff' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'ggggggg' },\n+            { 'path': 'raw_pointer::Ccccccc', 'name': 'ddddddd' },\n+            { 'path': 'raw_pointer', 'name': 'bbbbbbb' },\n+        ],\n+    },\n+];"}, {"sha": "b8ace2e0b7d77945cdc5e5731df5562c35553549", "filename": "src/test/rustdoc-js/raw-pointer.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fraw-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1730b62c45ef0108bcc9e304c8d1a17c9e66053a/src%2Ftest%2Frustdoc-js%2Fraw-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fraw-pointer.rs?ref=1730b62c45ef0108bcc9e304c8d1a17c9e66053a", "patch": "@@ -0,0 +1,24 @@\n+use std::ptr;\n+\n+pub struct Aaaaaaa {}\n+\n+pub fn bbbbbbb() -> *const Aaaaaaa {\n+    ptr::null()\n+}\n+\n+pub struct Ccccccc {}\n+\n+impl Ccccccc {\n+    pub fn ddddddd(&self) -> *const Aaaaaaa {\n+        ptr::null()\n+    }\n+    pub fn eeeeeee(&self, _x: *const Aaaaaaa) -> i32 {\n+        0\n+    }\n+    pub fn fffffff(&self, x: *const Aaaaaaa) -> *const Aaaaaaa {\n+        x\n+    }\n+    pub fn ggggggg(&self, x: *mut Aaaaaaa) -> *mut Aaaaaaa {\n+        x\n+    }\n+}"}]}