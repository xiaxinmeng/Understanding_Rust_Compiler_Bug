{"sha": "363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2M2ZhYmFmMWZiZDBmMzhhN2RkZGU0YTY0ODY2ZDhjZDJjZDQ5ZjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-01-24T20:57:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-02-06T20:58:01Z"}, "message": "lint impls that will become incoherent when leak-check is removed", "tree": {"sha": "cf1ca4a01bb4a803c7731afe87ba67d6f1ddf536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1ca4a01bb4a803c7731afe87ba67d6f1ddf536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "html_url": "https://github.com/rust-lang/rust/commit/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c78947dcd947709f41d52feaaf2eb6ea2711c8", "html_url": "https://github.com/rust-lang/rust/commit/e9c78947dcd947709f41d52feaaf2eb6ea2711c8"}], "stats": {"total": 183, "additions": 166, "deletions": 17}, "files": [{"sha": "b93f4408cdc4627c888947d9a26da4359031659c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -836,14 +836,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         r\n     }\n \n-    /// Execute `f` then unroll any bindings it creates.\n-    pub fn skip_leak_check<R, F>(&self, f: F) -> R\n+    /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.\n+    pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R\n     where\n         F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,\n     {\n         debug!(\"probe()\");\n         let snapshot = self.start_snapshot();\n-        self.skip_leak_check.set(true);\n+        let skip_leak_check = should_skip || self.skip_leak_check.get();\n+        self.skip_leak_check.set(skip_leak_check);\n         let r = f(&snapshot);\n         self.rollback_to(\"probe\", snapshot);\n         r"}, {"sha": "855da0367de067b71de012caea5567de95ac2e55", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -7,6 +7,7 @@\n use crate::infer::{CombinedSnapshot, InferOk};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::IntercrateMode;\n+use crate::traits::SkipLeakCheck;\n use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionContext};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::Subst;\n@@ -53,6 +54,7 @@ pub fn overlapping_impls<F1, F2, R>(\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     intercrate_mode: IntercrateMode,\n+    skip_leak_check: SkipLeakCheck,\n     on_overlap: F1,\n     no_overlap: F2,\n ) -> R\n@@ -70,7 +72,7 @@ where\n \n     let overlaps = tcx.infer_ctxt().enter(|infcx| {\n         let selcx = &mut SelectionContext::intercrate(&infcx, intercrate_mode);\n-        overlap(selcx, impl1_def_id, impl2_def_id).is_some()\n+        overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id).is_some()\n     });\n \n     if !overlaps {\n@@ -83,7 +85,7 @@ where\n     tcx.infer_ctxt().enter(|infcx| {\n         let selcx = &mut SelectionContext::intercrate(&infcx, intercrate_mode);\n         selcx.enable_tracking_intercrate_ambiguity_causes();\n-        on_overlap(overlap(selcx, impl1_def_id, impl2_def_id).unwrap())\n+        on_overlap(overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id).unwrap())\n     })\n }\n \n@@ -113,12 +115,15 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n /// where-clauses)? If so, returns an `ImplHeader` that unifies the two impls.\n fn overlap<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n+    skip_leak_check: SkipLeakCheck,\n     a_def_id: DefId,\n     b_def_id: DefId,\n ) -> Option<OverlapResult<'tcx>> {\n     debug!(\"overlap(a_def_id={:?}, b_def_id={:?})\", a_def_id, b_def_id);\n \n-    selcx.infcx().probe(|snapshot| overlap_within_probe(selcx, a_def_id, b_def_id, snapshot))\n+    selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n+        overlap_within_probe(selcx, a_def_id, b_def_id, snapshot)\n+    })\n }\n \n fn overlap_within_probe(\n@@ -146,7 +151,9 @@ fn overlap_within_probe(\n         .eq_impl_headers(&a_impl_header, &b_impl_header)\n     {\n         Ok(InferOk { obligations, value: () }) => obligations,\n-        Err(_) => return None,\n+        Err(_) => {\n+            return None;\n+        }\n     };\n \n     debug!(\"overlap: unification check succeeded\");"}, {"sha": "50068b89687ba9a66f8cdaa431afd2a08dc21f43", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -83,6 +83,28 @@ pub enum IntercrateMode {\n     Fixed,\n }\n \n+/// Whether to skip the leak check, as part of a future compatibility warning step.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum SkipLeakCheck {\n+    Yes,\n+    No,\n+}\n+\n+impl SkipLeakCheck {\n+    fn is_yes(self) -> bool {\n+        self == SkipLeakCheck::Yes\n+    }\n+}\n+\n+/// The \"default\" for skip-leak-check corresponds to the current\n+/// behavior (do not skip the leak check) -- not the behavior we are\n+/// transitioning into.\n+impl Default for SkipLeakCheck {\n+    fn default() -> Self {\n+        SkipLeakCheck::No\n+    }\n+}\n+\n /// The mode that trait queries run in.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum TraitQueryMode {"}, {"sha": "8b68d6f26039966f6b486b929005127b6f32f7c3", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -19,6 +19,7 @@ use crate::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n use rustc_span::DUMMY_SP;\n \n@@ -97,7 +98,7 @@ pub fn translate_substs<'a, 'tcx>(\n                 |_| {\n                     bug!(\n                         \"When translating substitutions for specialization, the expected \\\n-                          specialization failed to hold\"\n+                         specialization failed to hold\"\n                     )\n                 },\n             )\n@@ -268,7 +269,7 @@ fn fulfill_implication<'a, 'tcx>(\n                 // no dice!\n                 debug!(\n                     \"fulfill_implication: for impls on {:?} and {:?}, \\\n-                        could not fulfill: {:?} given {:?}\",\n+                     could not fulfill: {:?} given {:?}\",\n                     source_trait_ref, target_trait_ref, errors, param_env.caller_bounds\n                 );\n                 Err(())\n@@ -342,6 +343,7 @@ pub(super) fn specialization_graph_provider(\n                             FutureCompatOverlapErrorKind::Issue33140 => {\n                                 ORDER_DEPENDENT_TRAIT_OBJECTS\n                             }\n+                            FutureCompatOverlapErrorKind::LeakCheck => COHERENCE_LEAK_CHECK,\n                         };\n                         tcx.struct_span_lint_hir(\n                             lint,"}, {"sha": "98908e672f0aa1f9966a760e7c82588e4a829ac8", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -11,6 +11,7 @@ pub use rustc::traits::types::specialization_graph::*;\n pub enum FutureCompatOverlapErrorKind {\n     Issue43355,\n     Issue33140,\n+    LeakCheck,\n }\n \n #[derive(Debug)]\n@@ -111,6 +112,7 @@ impl<'tcx> Children {\n                 possible_sibling,\n                 impl_def_id,\n                 traits::IntercrateMode::Issue43355,\n+                traits::SkipLeakCheck::default(),\n                 |overlap| {\n                     if let Some(overlap_kind) =\n                         tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling)\n@@ -161,6 +163,7 @@ impl<'tcx> Children {\n                         possible_sibling,\n                         impl_def_id,\n                         traits::IntercrateMode::Fixed,\n+                        traits::SkipLeakCheck::default(),\n                         |overlap| {\n                             last_lint = Some(FutureCompatOverlapError {\n                                 error: overlap_error(overlap),\n@@ -169,6 +172,23 @@ impl<'tcx> Children {\n                         },\n                         || (),\n                     );\n+\n+                    if last_lint.is_none() {\n+                        traits::overlapping_impls(\n+                            tcx,\n+                            possible_sibling,\n+                            impl_def_id,\n+                            traits::IntercrateMode::Fixed,\n+                            traits::SkipLeakCheck::Yes,\n+                            |overlap| {\n+                                last_lint = Some(FutureCompatOverlapError {\n+                                    error: overlap_error(overlap),\n+                                    kind: FutureCompatOverlapErrorKind::LeakCheck,\n+                                });\n+                            },\n+                            || (),\n+                        );\n+                    }\n                 }\n \n                 // no overlap (error bailed already via ?)\n@@ -247,7 +267,7 @@ impl<'tcx> Graph {\n         if trait_ref.references_error() {\n             debug!(\n                 \"insert: inserting dummy node for erroneous TraitRef {:?}, \\\n-                    impl_def_id={:?}, trait_def_id={:?}\",\n+                 impl_def_id={:?}, trait_def_id={:?}\",\n                 trait_ref, impl_def_id, trait_def_id\n             );\n \n@@ -326,7 +346,7 @@ impl<'tcx> Graph {\n         if self.parent.insert(child, parent).is_some() {\n             bug!(\n                 \"When recording an impl from the crate store, information about its parent \\\n-                  was already present.\"\n+                 was already present.\"\n             );\n         }\n "}, {"sha": "cd972bdb993d29a16ebe3013aec2ac9e7dad6c22", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -260,6 +260,16 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    pub COHERENCE_LEAK_CHECK,\n+    Deny,\n+    \"distinct impls distinguished only by the leak-check code\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #56105 <https://github.com/rust-lang/rust/issues/56105>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -509,6 +519,7 @@ declare_lint_pass! {\n         MISSING_FRAGMENT_SPECIFIER,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n+        COHERENCE_LEAK_CHECK,\n         DEPRECATED,\n         UNUSED_UNSAFE,\n         UNUSED_MUT,"}, {"sha": "3e17b661cf4cea49d55f17fe8f3267c54358ed79", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -1,5 +1,5 @@\n use crate::namespace::Namespace;\n-use rustc::traits::{self, IntercrateMode};\n+use rustc::traits::{self, IntercrateMode, SkipLeakCheck};\n use rustc::ty::TyCtxt;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -76,6 +76,9 @@ impl InherentOverlapChecker<'tcx> {\n                     impl1_def_id,\n                     impl2_def_id,\n                     IntercrateMode::Issue43355,\n+                    // We go ahead and just skip the leak check for\n+                    // inherent impls without warning.\n+                    SkipLeakCheck::Yes,\n                     |overlap| {\n                         self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id, overlap);\n                         false"}, {"sha": "6ea0b89be74d334a74ff804c66013cc5e9b2eb57", "filename": "src/test/ui/coherence/coherence-inherited-subtyping.old.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.old.stderr?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `method1`\n+  --> $DIR/coherence-inherited-subtyping.rs:14:5\n+   |\n+LL |     fn method1(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n+...\n+LL |     fn method1(&self) {}\n+   |     -------------------- other definition for `method1`\n+   |\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "6ea0b89be74d334a74ff804c66013cc5e9b2eb57", "filename": "src/test/ui/coherence/coherence-inherited-subtyping.re.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `method1`\n+  --> $DIR/coherence-inherited-subtyping.rs:14:5\n+   |\n+LL |     fn method1(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n+...\n+LL |     fn method1(&self) {}\n+   |     -------------------- other definition for `method1`\n+   |\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "8587eb77950c7a290080387b42072816c382c5a5", "filename": "src/test/ui/coherence/coherence-inherited-subtyping.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -0,0 +1,21 @@\n+// Test that two distinct impls which match subtypes of one another\n+// yield coherence errors (or not) depending on the variance.\n+//\n+// Note: This scenario is currently accepted, but as part of the\n+// universe transition (#56105) may eventually become an error.\n+\n+// revisions: old re\n+\n+struct Foo<T> {\n+    t: T,\n+}\n+\n+impl Foo<for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8> {\n+    fn method1(&self) {} //~ ERROR duplicate definitions with name `method1`\n+}\n+\n+impl Foo<for<'a> fn(&'a u8, &'a u8) -> &'a u8> {\n+    fn method1(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "6bae152bd2a8eb32aca4c27f0ef9caea96e346b5", "filename": "src/test/ui/coherence/coherence-subtyping.old.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.old.stderr?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -0,0 +1,16 @@\n+error: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n+  --> $DIR/coherence-subtyping.rs:15:1\n+   |\n+LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n+   | ---------------------------------------------------------- first implementation here\n+LL | \n+LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+   |\n+   = note: `#[deny(coherence_leak_check)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+"}, {"sha": "6bae152bd2a8eb32aca4c27f0ef9caea96e346b5", "filename": "src/test/ui/coherence/coherence-subtyping.re.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.re.stderr?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -0,0 +1,16 @@\n+error: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n+  --> $DIR/coherence-subtyping.rs:15:1\n+   |\n+LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n+   | ---------------------------------------------------------- first implementation here\n+LL | \n+LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+   |\n+   = note: `#[deny(coherence_leak_check)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+"}, {"sha": "9f45290c65b136d641e90d6e6e3ccb3ecf227fbc", "filename": "src/test/ui/coherence/coherence-subtyping.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.rs?ref=363fabaf1fbd0f38a7ddde4a64866d8cd2cd49f2", "patch": "@@ -5,16 +5,18 @@\n // universe transition (#56105) may eventually become an error.\n \n // revisions: old re\n-// build-pass (FIXME(62277): could be check-pass?)\n \n trait TheTrait {\n-    fn foo(&self) { }\n+    fn foo(&self) {}\n }\n \n-impl TheTrait for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n-}\n+impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n \n impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+    //[re]~^ ERROR conflicting implementation\n+    //[re]~^^ WARNING this was previously accepted by the compiler but is being phased out\n+    //[old]~^^^ ERROR conflicting implementation\n+    //[old]~^^^^ WARNING this was previously accepted by the compiler but is being phased out\n }\n \n-fn main() { }\n+fn main() {}"}]}