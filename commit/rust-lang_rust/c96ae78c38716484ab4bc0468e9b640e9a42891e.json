{"sha": "c96ae78c38716484ab4bc0468e9b640e9a42891e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NmFlNzhjMzg3MTY0ODRhYjRiYzA0NjhlOWI2NDBlOWE0Mjg5MWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-15T01:57:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-15T02:32:41Z"}, "message": "Comments only: annotate FIXMEs in core::os", "tree": {"sha": "b3697a3a6eaa3a20720aea1f85b8a8780344a96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3697a3a6eaa3a20720aea1f85b8a8780344a96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96ae78c38716484ab4bc0468e9b640e9a42891e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96ae78c38716484ab4bc0468e9b640e9a42891e", "html_url": "https://github.com/rust-lang/rust/commit/c96ae78c38716484ab4bc0468e9b640e9a42891e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96ae78c38716484ab4bc0468e9b640e9a42891e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71", "html_url": "https://github.com/rust-lang/rust/commit/39d9c30a1549ca0b69325bb7e4d9c993d3bc9a71"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "34c38321f47139bb42907aeb30901f0ed92a1055", "filename": "src/libcore/os.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c96ae78c38716484ab4bc0468e9b640e9a42891e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96ae78c38716484ab4bc0468e9b640e9a42891e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=c96ae78c38716484ab4bc0468e9b640e9a42891e", "patch": "@@ -36,7 +36,7 @@ export last_os_error;\n export set_exit_status;\n export walk_dir;\n \n-// FIXME: move these to str perhaps?\n+// FIXME: move these to str perhaps? #2620\n export as_c_charp, fill_charp_buf;\n \n native mod rustrt {\n@@ -86,7 +86,7 @@ mod win32 {\n     fn fill_utf16_buf_and_decode(f: fn(*mut u16, dword) -> dword)\n         -> option<str> {\n \n-        // FIXME: remove these when export globs work properly.\n+        // FIXME: remove these when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::consts::os::extra::*;\n \n@@ -167,7 +167,7 @@ mod global_env {\n                 sched:  some({\n                     mode: task::single_threaded,\n                     // FIXME: This would be a good place to use\n-                    // a very small native stack\n+                    // a very small native stack (#2621)\n                     native_stack_size: none\n                 })\n                 with task::get_opts(builder)\n@@ -227,7 +227,7 @@ mod global_env {\n         #[cfg(unix)]\n         fn setenv(n: str, v: str) {\n \n-            // FIXME: remove this when export globs work properly.\n+            // FIXME: remove this when export globs work properly. #1238\n             import libc::funcs::posix01::unistd::setenv;\n             str::as_c_str(n) {|nbuf|\n                 str::as_c_str(v) {|vbuf|\n@@ -239,7 +239,7 @@ mod global_env {\n \n         #[cfg(windows)]\n         fn setenv(n: str, v: str) {\n-            // FIXME: remove imports when export globs work properly.\n+            // FIXME: remove imports when export globs work properly. #1238\n             import libc::funcs::extra::kernel32::*;\n             import win32::*;\n             as_utf16_p(n) {|nbuf|\n@@ -329,7 +329,7 @@ fn pipe() -> {in: c_int, out: c_int} {\n \n #[cfg(windows)]\n fn pipe() -> {in: c_int, out: c_int} {\n-    // FIXME: remove this when export globs work properly.\n+    // FIXME: remove this when export globs work properly. #1238\n     import libc::consts::os::extra::*;\n     // Windows pipes work subtly differently than unix pipes, and their\n     // inheritance has to be handled in a different way that I do not fully\n@@ -387,7 +387,7 @@ fn self_exe_path() -> option<path> {\n \n     #[cfg(target_os = \"macos\")]\n     fn load_self() -> option<path> unsafe {\n-        // FIXME: remove imports when export globs work properly.\n+        // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::*;\n         fill_charp_buf() {|buf, sz|\n             _NSGetExecutablePath(buf, ptr::mut_addr_of(sz as u32))\n@@ -397,7 +397,7 @@ fn self_exe_path() -> option<path> {\n \n     #[cfg(windows)]\n     fn load_self() -> option<path> unsafe {\n-        // FIXME: remove imports when export globs work properly.\n+        // FIXME: remove imports when export globs work properly. #1238\n         import libc::types::os::arch::extra::*;\n         import libc::funcs::extra::kernel32::*;\n         import win32::*;\n@@ -500,7 +500,7 @@ fn path_exists(p: path) -> bool {\n }\n \n // FIXME: under Windows, we should prepend the current drive letter to paths\n-// that start with a slash.\n+// that start with a slash. #2622\n #[doc = \"\n Convert a relative path to an absolute path\n \n@@ -526,11 +526,11 @@ fn make_dir(p: path, mode: c_int) -> bool {\n \n     #[cfg(windows)]\n     fn mkdir(p: path, _mode: c_int) -> bool unsafe {\n-        // FIXME: remove imports when export globs work properly.\n+        // FIXME: remove imports when export globs work properly. #1238\n         import libc::types::os::arch::extra::*;\n         import libc::funcs::extra::kernel32::*;\n         import win32::*;\n-        // FIXME: turn mode into something useful?\n+        // FIXME: turn mode into something useful? #2623\n         as_utf16_p(p) {|buf|\n             CreateDirectoryW(buf, unsafe::reinterpret_cast(0))\n                 != (0 as BOOL)\n@@ -588,7 +588,7 @@ fn remove_dir(p: path) -> bool {\n \n     #[cfg(windows)]\n     fn rmdir(p: path) -> bool {\n-        // FIXME: remove imports when export globs work properly.\n+        // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n         import win32::*;\n@@ -610,7 +610,7 @@ fn change_dir(p: path) -> bool {\n \n     #[cfg(windows)]\n     fn chdir(p: path) -> bool {\n-        // FIXME: remove imports when export globs work properly.\n+        // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n         import win32::*;\n@@ -633,7 +633,7 @@ fn copy_file(from: path, to: path) -> bool {\n \n     #[cfg(windows)]\n     fn do_copy_file(from: path, to: path) -> bool {\n-        // FIXME: remove imports when export globs work properly.\n+        // FIXME: remove imports when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n         import win32::*;"}]}