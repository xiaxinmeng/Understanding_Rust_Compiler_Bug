{"sha": "4f0c245429a0a42ea652b85a5390203bd6a12bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMGMyNDU0MjlhMGE0MmVhNjUyYjg1YTUzOTAyMDNiZDZhMTJiYmM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-15T23:30:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-15T23:30:28Z"}, "message": "Rollup merge of #73955 - hellow554:unsafe_process, r=Mark-Simulacrum\n\ndeny(unsafe_op_in_unsafe_fn) in libstd/process.rs\n\nThe libstd/process.rs part of #73904 . Wraps the two calls to an unsafe fn Initializer::nop() in an unsafe block.\n\nWill have to wait for #73909 to be merged, because of the feature in the libstd/lib.rs", "tree": {"sha": "3d30d18df8d91ac79e80e611d76c387bea601fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d30d18df8d91ac79e80e611d76c387bea601fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0c245429a0a42ea652b85a5390203bd6a12bbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYU6VCRBK7hj4Ov3rIwAAdHIIAApnDRmC/d9aKbTk5ceKknyB\n3ATYsCzwashPycdrUWRQGMz7l5s1dhiaUyUwajeodOeFMtTm8PRzIGR3KSYF8g8C\no+uHA5z6OZx/f48FsKeu5Dvv1flnI8e4IleV7TgDOAWtQIiCk3ogzKPMHFaxzlKx\nTjQ00s+t/Upp5unUViT6cXOUV3+CfUa/5nYIK1BOkLyT0EuLLJbeYpF3w5xdSndr\noCpKP9cJyB01RZoHMvjLimEAyOP3cnlV2cgoGTGDLmteJQtHLox+mf640jZFroX+\nhhtAt1gUbriHCDMoOm4+jjSBpKlHzmD0JdE/OmaSz5ZYPAWl1xa+BNjMQ9yPDt4=\n=Ddgn\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d30d18df8d91ac79e80e611d76c387bea601fd3\nparent 6af1bdda54abc9e919fc1137411dfc4311e05649\nparent 73e27b3e18dcbbef3a36620c4a44306e2bbdcd13\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600212628 +0200\ncommitter GitHub <noreply@github.com> 1600212628 +0200\n\nRollup merge of #73955 - hellow554:unsafe_process, r=Mark-Simulacrum\n\ndeny(unsafe_op_in_unsafe_fn) in libstd/process.rs\n\nThe libstd/process.rs part of #73904 . Wraps the two calls to an unsafe fn Initializer::nop() in an unsafe block.\n\nWill have to wait for #73909 to be merged, because of the feature in the libstd/lib.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c245429a0a42ea652b85a5390203bd6a12bbc", "html_url": "https://github.com/rust-lang/rust/commit/4f0c245429a0a42ea652b85a5390203bd6a12bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c245429a0a42ea652b85a5390203bd6a12bbc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af1bdda54abc9e919fc1137411dfc4311e05649", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af1bdda54abc9e919fc1137411dfc4311e05649", "html_url": "https://github.com/rust-lang/rust/commit/6af1bdda54abc9e919fc1137411dfc4311e05649"}, {"sha": "73e27b3e18dcbbef3a36620c4a44306e2bbdcd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e27b3e18dcbbef3a36620c4a44306e2bbdcd13", "html_url": "https://github.com/rust-lang/rust/commit/73e27b3e18dcbbef3a36620c4a44306e2bbdcd13"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "00e2dbc9c1dbf33e5d3c7c94c36edf4b6635f762", "filename": "library/std/src/process.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f0c245429a0a42ea652b85a5390203bd6a12bbc/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0c245429a0a42ea652b85a5390203bd6a12bbc/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=4f0c245429a0a42ea652b85a5390203bd6a12bbc", "patch": "@@ -95,6 +95,7 @@\n //! [`Read`]: io::Read\n \n #![stable(feature = \"process\", since = \"1.0.0\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\", target_env = \"sgx\"))))]\n mod tests;\n@@ -321,7 +322,8 @@ impl Read for ChildStdout {\n \n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n-        Initializer::nop()\n+        // SAFETY: Read is guaranteed to work on uninitialized memory\n+        unsafe { Initializer::nop() }\n     }\n }\n \n@@ -381,7 +383,8 @@ impl Read for ChildStderr {\n \n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n-        Initializer::nop()\n+        // SAFETY: Read is guaranteed to work on uninitialized memory\n+        unsafe { Initializer::nop() }\n     }\n }\n "}]}