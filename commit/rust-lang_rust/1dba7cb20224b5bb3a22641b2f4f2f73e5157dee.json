{"sha": "1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmE3Y2IyMDIyNGI1YmIzYTIyNjQxYjJmNGYyZjczZTUxNTdkZWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-06T09:58:29Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-11T14:08:17Z"}, "message": "Fiddle through the module visibilities for tests", "tree": {"sha": "a8da71dd7fd7e721f5694b1121a8e9461bbef4d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8da71dd7fd7e721f5694b1121a8e9461bbef4d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "html_url": "https://github.com/rust-lang/rust/commit/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83e73dce4f0e80ff7559b3816f4f24391d4ff53", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83e73dce4f0e80ff7559b3816f4f24391d4ff53", "html_url": "https://github.com/rust-lang/rust/commit/a83e73dce4f0e80ff7559b3816f4f24391d4ff53"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "e34fc5487cf90dd36d374eecec9314988b527e8b", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "patch": "@@ -158,7 +158,7 @@ impl Select {\n     }\n \n     /// Helper method for skipping the preflight checks during testing\n-    fn wait2(&self, do_preflight_checks: bool) -> usize {\n+    pub(super) fn wait2(&self, do_preflight_checks: bool) -> usize {\n         // Note that this is currently an inefficient implementation. We in\n         // theory have knowledge about all receivers in the set ahead of time,\n         // so this method shouldn't really have to iterate over all of them yet"}, {"sha": "be048511caaec9a6e2773c4fcea3c57aaf8c7cc1", "filename": "src/libstd/sync/mpsc/select_tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee/src%2Flibstd%2Fsync%2Fmpsc%2Fselect_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee/src%2Flibstd%2Fsync%2Fmpsc%2Fselect_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect_tests.rs?ref=1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "patch": "@@ -210,7 +210,7 @@ fn cloning3() {\n         let mut h2 = s.handle(&rx2);\n         unsafe { h2.add(); }\n         unsafe { h1.add(); }\n-        assert_eq!(s.wait(), h2.id);\n+        assert_eq!(s.wait(), h2.id());\n         tx3.send(()).unwrap();\n     });\n \n@@ -256,7 +256,7 @@ fn preflight4() {\n     let s = Select::new();\n     let mut h = s.handle(&rx);\n     unsafe { h.add(); }\n-    assert_eq!(s.wait2(false), h.id);\n+    assert_eq!(s.wait2(false), h.id());\n }\n \n #[test]\n@@ -267,7 +267,7 @@ fn preflight5() {\n     let s = Select::new();\n     let mut h = s.handle(&rx);\n     unsafe { h.add(); }\n-    assert_eq!(s.wait2(false), h.id);\n+    assert_eq!(s.wait2(false), h.id());\n }\n \n #[test]\n@@ -278,7 +278,7 @@ fn preflight6() {\n     let s = Select::new();\n     let mut h = s.handle(&rx);\n     unsafe { h.add(); }\n-    assert_eq!(s.wait2(false), h.id);\n+    assert_eq!(s.wait2(false), h.id());\n }\n \n #[test]\n@@ -288,7 +288,7 @@ fn preflight7() {\n     let s = Select::new();\n     let mut h = s.handle(&rx);\n     unsafe { h.add(); }\n-    assert_eq!(s.wait2(false), h.id);\n+    assert_eq!(s.wait2(false), h.id());\n }\n \n #[test]\n@@ -300,7 +300,7 @@ fn preflight8() {\n     let s = Select::new();\n     let mut h = s.handle(&rx);\n     unsafe { h.add(); }\n-    assert_eq!(s.wait2(false), h.id);\n+    assert_eq!(s.wait2(false), h.id());\n }\n \n #[test]\n@@ -313,7 +313,7 @@ fn preflight9() {\n     let s = Select::new();\n     let mut h = s.handle(&rx);\n     unsafe { h.add(); }\n-    assert_eq!(s.wait2(false), h.id);\n+    assert_eq!(s.wait2(false), h.id());\n }\n \n #[test]"}]}