{"sha": "c07413c204d055de881f304b8fccaa50ecd60956", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNzQxM2MyMDRkMDU1ZGU4ODFmMzA0YjhmY2NhYTUwZWNkNjA5NTY=", "commit": {"author": {"name": "Johannes Oertel", "email": "johannes.oertel@uni-due.de", "date": "2016-01-25T17:16:43Z"}, "committer": {"name": "Johannes Oertel", "email": "johannes.oertel@uni-due.de", "date": "2016-01-26T09:37:12Z"}, "message": "Add message about RUST_BACKTRACE to default output of panic!\n\nThe note will only be shown on the first panic.", "tree": {"sha": "951616fdbcee580f6014e7737f7fc6ff29063084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/951616fdbcee580f6014e7737f7fc6ff29063084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c07413c204d055de881f304b8fccaa50ecd60956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c07413c204d055de881f304b8fccaa50ecd60956", "html_url": "https://github.com/rust-lang/rust/commit/c07413c204d055de881f304b8fccaa50ecd60956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c07413c204d055de881f304b8fccaa50ecd60956/comments", "author": {"login": "jooert", "id": 1774713, "node_id": "MDQ6VXNlcjE3NzQ3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1774713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jooert", "html_url": "https://github.com/jooert", "followers_url": "https://api.github.com/users/jooert/followers", "following_url": "https://api.github.com/users/jooert/following{/other_user}", "gists_url": "https://api.github.com/users/jooert/gists{/gist_id}", "starred_url": "https://api.github.com/users/jooert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jooert/subscriptions", "organizations_url": "https://api.github.com/users/jooert/orgs", "repos_url": "https://api.github.com/users/jooert/repos", "events_url": "https://api.github.com/users/jooert/events{/privacy}", "received_events_url": "https://api.github.com/users/jooert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jooert", "id": 1774713, "node_id": "MDQ6VXNlcjE3NzQ3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1774713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jooert", "html_url": "https://github.com/jooert", "followers_url": "https://api.github.com/users/jooert/followers", "following_url": "https://api.github.com/users/jooert/following{/other_user}", "gists_url": "https://api.github.com/users/jooert/gists{/gist_id}", "starred_url": "https://api.github.com/users/jooert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jooert/subscriptions", "organizations_url": "https://api.github.com/users/jooert/orgs", "repos_url": "https://api.github.com/users/jooert/repos", "events_url": "https://api.github.com/users/jooert/events{/privacy}", "received_events_url": "https://api.github.com/users/jooert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd1b845492e13ae9e0da382dc0ec09d676d2dd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1b845492e13ae9e0da382dc0ec09d676d2dd59", "html_url": "https://github.com/rust-lang/rust/commit/cd1b845492e13ae9e0da382dc0ec09d676d2dd59"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "490c5f4b3522e41479b155a944c5b20de4b6df80", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c07413c204d055de881f304b8fccaa50ecd60956/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07413c204d055de881f304b8fccaa50ecd60956/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=c07413c204d055de881f304b8fccaa50ecd60956", "patch": "@@ -16,6 +16,7 @@ use cell::Cell;\n use cell::RefCell;\n use intrinsics;\n use sync::StaticRwLock;\n+use sync::atomic::{AtomicBool, Ordering};\n use sys::stdio::Stderr;\n use sys_common::backtrace;\n use sys_common::thread_info;\n@@ -38,6 +39,7 @@ enum Handler {\n \n static HANDLER_LOCK: StaticRwLock = StaticRwLock::new();\n static mut HANDLER: Handler = Handler::Default;\n+static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n /// Registers a custom panic handler, replacing any that was previously\n /// registered.\n@@ -173,8 +175,11 @@ fn default_handler(info: &PanicInfo) {\n     let write = |err: &mut ::io::Write| {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n                          name, msg, file, line);\n+\n         if log_backtrace {\n             let _ = backtrace::write(err);\n+        } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n+            let _ = writeln!(err, \"note: Run with `RUST_BACKTRACE=1` for a backtrace.\");\n         }\n     };\n "}, {"sha": "7bf07314dcc17bee818266c49bb01555ab116819", "filename": "src/test/run-pass/multi-panic.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c07413c204d055de881f304b8fccaa50ecd60956/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c07413c204d055de881f304b8fccaa50ecd60956/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-panic.rs?ref=c07413c204d055de881f304b8fccaa50ecd60956", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let args: Vec<String> = std::env::args().collect();\n+    if args.len() > 1 && args[1] == \"run_test\" {\n+        let _ = std::thread::spawn(|| {\n+            panic!();\n+        }).join();\n+\n+        panic!();\n+    } else {\n+        let test = std::process::Command::new(&args[0]).arg(\"run_test\").output().unwrap();\n+        assert!(!test.status.success());\n+        let err = String::from_utf8_lossy(&test.stderr);\n+        let mut it = err.lines();\n+\n+        assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n+        assert_eq!(it.next(), Some(\"note: Run with `RUST_BACKTRACE=1` for a backtrace.\"));\n+        assert_eq!(it.next().map(|l| l.starts_with(\"thread '<main>' panicked at\")), Some(true));\n+        assert_eq!(it.next(), None);\n+    }\n+}"}]}