{"sha": "3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "node_id": "C_kwDOAAsO6NoAKDNiYmE4MTFlOTI1ZThlYjVkNTNhNThiN2NiOGExMGZhMjlmNzFjYWE", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:47:51Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-15T14:47:51Z"}, "message": "fmt", "tree": {"sha": "44ebda3972d439ec31ade8627d72f36785ddbceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ebda3972d439ec31ade8627d72f36785ddbceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmILvRcACgkQeO9fUvOM\nSb29IQv/Q/HbVD0Hs5QtkE+/PGBczs1s9KXphGw8Pw6gbDR3QtaTiEZiWPGcaofl\nvl/zW7WFxaJOOez8G7t2EyAQeNkhXdJw13qTQzX+k1hnfNI+X9OO0t7D3o8tPHWK\n+qI+sjKslg5Vl+zcmNsXA51tg6Rt1QEDbgT2486mWmN9i8Qkni2e/IwKeK04xmO9\nbBLMry4sNz6SZNwBFtNfcdzgTV+D6844hmLFwuvaXpCGbXLDNuHK5AHE3ldV3QTY\nQ0/yAXtExYBQuVY+xnPKhnKH3SUfW6AScEMjbVdXOQLFSHJdJGEcy1d/dD/aJZrG\no17/SXtJxs3HE3Q5odth0GT0AEsmLe2wIn+IVMAzJTX4IAPyVyLQ5dEeo5bNiyeB\nVXimxDEqPj3uAM1nC4PoHD56+ONSeu9rf9UbViGgRD+Tx/6PSznN9WjG3SQG4Q8X\nQpqQj6U7Q3timUvI9/x0nehzluc2kK96H9g7T4rXK1uju0tiPIFRzTWGlmqyV0Ya\nH8a/SV/i\n=RppW\n-----END PGP SIGNATURE-----", "payload": "tree 44ebda3972d439ec31ade8627d72f36785ddbceb\nparent c450d0ce411acaf48ff7aabe393020df6e60f378\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1644936471 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1644936471 +0000\n\nfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "html_url": "https://github.com/rust-lang/rust/commit/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c450d0ce411acaf48ff7aabe393020df6e60f378", "url": "https://api.github.com/repos/rust-lang/rust/commits/c450d0ce411acaf48ff7aabe393020df6e60f378", "html_url": "https://github.com/rust-lang/rust/commit/c450d0ce411acaf48ff7aabe393020df6e60f378"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "dcc43c1fada2248b9b367a2b6129df8d199f4393", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "patch": "@@ -188,11 +188,18 @@ impl TypeRef {\n                         is_varargs = param.dotdotdot_token().is_some();\n                     }\n \n-                    pl.params().map(|p| (p.pat(), p.ty())).map(|it| {\n-                        let type_ref = TypeRef::from_ast_opt(ctx, it.1);\n-                        let name = if it.0.is_some() { Some(it.0.unwrap().syntax().text().to_string()) } else { None };\n-                        (name, type_ref)\n-                    }).collect()\n+                    pl.params()\n+                        .map(|p| (p.pat(), p.ty()))\n+                        .map(|it| {\n+                            let type_ref = TypeRef::from_ast_opt(ctx, it.1);\n+                            let name = if it.0.is_some() {\n+                                Some(it.0.unwrap().syntax().text().to_string())\n+                            } else {\n+                                None\n+                            };\n+                            (name, type_ref)\n+                        })\n+                        .collect()\n                 } else {\n                     Vec::new()\n                 };\n@@ -234,12 +241,8 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(types, _) => {\n-                    types.iter().for_each(|t| go(&t.1, f))\n-                }\n-                TypeRef::Tuple(types) => {\n-                    types.iter().for_each(|t| go(t, f))\n-                }\n+                TypeRef::Fn(types, _) => types.iter().for_each(|t| go(&t.1, f)),\n+                TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, ..)\n                 | TypeRef::Array(type_ref, _)"}, {"sha": "4b077c2c8af2babd62863c063f5d33706ed8d322", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bba811e925e8eb5d53a58b7cb8a10fa29f71caa/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=3bba811e925e8eb5d53a58b7cb8a10fa29f71caa", "patch": "@@ -340,7 +340,7 @@ impl HirDisplay for Ty {\n         if f.should_truncate() {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n-        \n+\n         match self.kind(Interner) {\n             TyKind::Never => write!(f, \"!\")?,\n             TyKind::Str => write!(f, \"str\")?,\n@@ -1097,12 +1097,12 @@ impl HirDisplay for TypeRef {\n             TypeRef::Fn(parameters, is_varargs) => {\n                 write!(f, \"fn(\")?;\n                 for index in 0..parameters.len() - 1 {\n-                    let (param_name,param_type) = &parameters[index];\n+                    let (param_name, param_type) = &parameters[index];\n                     match param_name {\n                         Some(name) => {\n                             write!(f, \"{}: \", name)?;\n                             param_type.hir_fmt(f)?;\n-                        },\n+                        }\n                         None => write!(f, \" : {:?}\", param_type)?,\n                     };\n "}]}