{"sha": "f6e8b376d1d21b8b697de5ef1e35a341855202ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZThiMzc2ZDFkMjFiOGI2OTdkZTVlZjFlMzVhMzQxODU1MjAyZWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-06T18:03:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-06T18:03:39Z"}, "message": "modernize more", "tree": {"sha": "395282e236ea516d4ed57e4771d3aae4eba0029b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395282e236ea516d4ed57e4771d3aae4eba0029b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e8b376d1d21b8b697de5ef1e35a341855202ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e8b376d1d21b8b697de5ef1e35a341855202ed", "html_url": "https://github.com/rust-lang/rust/commit/f6e8b376d1d21b8b697de5ef1e35a341855202ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e8b376d1d21b8b697de5ef1e35a341855202ed/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e477b8745542d5ac85b2cbbb3be2eb0df22486cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e477b8745542d5ac85b2cbbb3be2eb0df22486cd", "html_url": "https://github.com/rust-lang/rust/commit/e477b8745542d5ac85b2cbbb3be2eb0df22486cd"}], "stats": {"total": 98, "additions": 42, "deletions": 56}, "files": [{"sha": "75c6fa1b8da6e8cec18feb286867554ebdfdf9be", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -1,15 +1,3 @@\n-#[macro_use]\n-extern crate failure;\n-#[macro_use]\n-extern crate serde_derive;\n-#[macro_use]\n-extern crate crossbeam_channel;\n-#[macro_use]\n-extern crate log;\n-#[macro_use]\n-extern crate failure_derive;\n-\n-\n mod caps;\n mod conv;\n mod main_loop;"}, {"sha": "9ba9725620038d4f945cac70893b780ca84d48fa", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -1,11 +1,5 @@\n-#[macro_use]\n-extern crate log;\n-#[macro_use]\n-extern crate failure;\n-#[macro_use]\n-extern crate serde_derive;\n-\n-use serde::Deserialize;\n+use serde_derive::Deserialize;\n+use serde::Deserialize as _D;\n use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n use ra_lsp_server::Result;\n@@ -17,15 +11,15 @@ fn main() -> Result<()> {\n         .log_to_file()\n         .directory(\"log\")\n         .start()?;\n-    info!(\"lifecycle: server started\");\n+    log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {\n-            info!(\"lifecycle: terminating process with {:?}\", res);\n+            log::info!(\"lifecycle: terminating process with {:?}\", res);\n             res\n         }\n         Err(_) => {\n-            error!(\"server panicked\");\n-            bail!(\"server panicked\")\n+            log::error!(\"server panicked\");\n+            failure::bail!(\"server panicked\")\n         }\n     }\n }\n@@ -56,8 +50,8 @@ fn main_inner() -> Result<()> {\n             ra_lsp_server::main_loop(false, root, publish_decorations, r, s)\n         },\n     )?;\n-    info!(\"shutting down IO...\");\n+    log::info!(\"shutting down IO...\");\n     threads.join()?;\n-    info!(\"... IO is down\");\n+    log::info!(\"... IO is down\");\n     Ok(())\n }"}, {"sha": "0e18789068a4cb296415b0babf24279d49f7bdfb", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -3,7 +3,7 @@ mod subscriptions;\n \n use std::path::PathBuf;\n \n-use crossbeam_channel::{unbounded, Receiver, Sender};\n+use crossbeam_channel::{unbounded, select, Receiver, Sender};\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n@@ -12,6 +12,8 @@ use ra_analysis::{Canceled, FileId, LibraryData};\n use rayon::{self, ThreadPool};\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n+use failure::{format_err, bail};\n+use failure_derive::Fail;\n \n use crate::{\n     main_loop::subscriptions::Subscriptions,\n@@ -54,14 +56,14 @@ pub fn main_loop(\n ) -> Result<()> {\n     let pool = rayon::ThreadPoolBuilder::new()\n         .num_threads(4)\n-        .panic_handler(|_| error!(\"thread panicked :(\"))\n+        .panic_handler(|_| log::error!(\"thread panicked :(\"))\n         .build()\n         .unwrap();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (fs_worker, fs_watcher) = vfs::roots_loader();\n     let (ws_worker, ws_watcher) = workspace_loader();\n \n-    info!(\"server initialized, serving requests\");\n+    log::info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::default();\n \n     let mut pending_requests = FxHashSet::default();\n@@ -82,12 +84,12 @@ pub fn main_loop(\n         &mut subs,\n     );\n \n-    info!(\"waiting for tasks to finish...\");\n+    log::info!(\"waiting for tasks to finish...\");\n     task_receiver.for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n-    info!(\"...tasks have finished\");\n-    info!(\"joining threadpool...\");\n+    log::info!(\"...tasks have finished\");\n+    log::info!(\"joining threadpool...\");\n     drop(pool);\n-    info!(\"...threadpool has finished\");\n+    log::info!(\"...threadpool has finished\");\n \n     let fs_res = fs_watcher.stop();\n     let ws_res = ws_watcher.stop();\n@@ -126,7 +128,7 @@ fn main_loop_inner(\n             Ws(Result<CargoWorkspace>),\n             Lib(LibraryData),\n         }\n-        trace!(\"selecting\");\n+        log::trace!(\"selecting\");\n         let event = select! {\n             recv(msg_receiver, msg) => match msg {\n                 Some(msg) => Event::Msg(msg),\n@@ -147,17 +149,17 @@ fn main_loop_inner(\n         match event {\n             Event::Task(task) => on_task(task, msg_sender, pending_requests),\n             Event::Fs(root, events) => {\n-                info!(\"fs change, {}, {} events\", root.display(), events.len());\n+                log::info!(\"fs change, {}, {} events\", root.display(), events.len());\n                 if root == ws_root {\n                     state.apply_fs_changes(events);\n                 } else {\n                     let (files, resolver) = state.events_to_files(events);\n                     let sender = libdata_sender.clone();\n                     pool.spawn(move || {\n                         let start = ::std::time::Instant::now();\n-                        info!(\"indexing {} ... \", root.display());\n+                        log::info!(\"indexing {} ... \", root.display());\n                         let data = LibraryData::prepare(files, resolver);\n-                        info!(\"indexed {:?} {}\", start.elapsed(), root.display());\n+                        log::info!(\"indexed {:?} {}\", start.elapsed(), root.display());\n                         sender.send(data);\n                     });\n                 }\n@@ -195,14 +197,14 @@ fn main_loop_inner(\n                             .map(|(_idx, root)| root);\n \n                         for root in unique {\n-                            debug!(\"sending root, {}\", root.display());\n+                            log::debug!(\"sending root, {}\", root.display());\n                             fs_worker.send(root.to_owned());\n                         }\n                     }\n                     state.set_workspaces(workspaces);\n                     state_changed = true;\n                 }\n-                Err(e) => warn!(\"loading workspace failed: {}\", e),\n+                Err(e) => log::warn!(\"loading workspace failed: {}\", e),\n             },\n             Event::Lib(lib) => {\n                 feedback(internal_mode, \"library loaded\", msg_sender);\n@@ -217,7 +219,7 @@ fn main_loop_inner(\n                     match on_request(state, pending_requests, pool, &task_sender, req)? {\n                         None => (),\n                         Some(req) => {\n-                            error!(\"unknown request: {:?}\", req);\n+                            log::error!(\"unknown request: {:?}\", req);\n                             let resp = RawResponse::err(\n                                 req.id,\n                                 ErrorCode::MethodNotFound as i32,\n@@ -231,7 +233,7 @@ fn main_loop_inner(\n                     on_notification(msg_sender, state, pending_requests, subs, not)?;\n                     state_changed = true;\n                 }\n-                RawMessage::Response(resp) => error!(\"unexpected response: {:?}\", resp),\n+                RawMessage::Response(resp) => log::error!(\"unexpected response: {:?}\", resp),\n             },\n         };\n \n@@ -370,7 +372,7 @@ fn on_notification(\n         }\n         Err(not) => not,\n     };\n-    error!(\"unhandled notification: {:?}\", not);\n+    log::error!(\"unhandled notification: {:?}\", not);\n     Ok(())\n }\n \n@@ -455,7 +457,7 @@ fn update_file_notifications_on_threadpool(\n             match handlers::publish_diagnostics(&world, file_id) {\n                 Err(e) => {\n                     if !is_canceled(&e) {\n-                        error!(\"failed to compute diagnostics: {:?}\", e);\n+                        log::error!(\"failed to compute diagnostics: {:?}\", e);\n                     }\n                 }\n                 Ok(params) => {\n@@ -467,7 +469,7 @@ fn update_file_notifications_on_threadpool(\n                 match handlers::publish_decorations(&world, file_id) {\n                     Err(e) => {\n                         if !is_canceled(&e) {\n-                            error!(\"failed to compute decorations: {:?}\", e);\n+                            log::error!(\"failed to compute decorations: {:?}\", e);\n                         }\n                     }\n                     Ok(params) => {"}, {"sha": "3305d468aa9cc82430d62b7be45d87b72a5ec958", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -1,12 +1,14 @@\n use std::path::{Path, PathBuf};\n \n+use serde_derive::Serialize;\n use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use failure::{format_err, bail};\n \n use crate::{\n-    thread_watcher::{ThreadWatcher, Worker},\n     Result,\n+    thread_watcher::{ThreadWatcher, Worker},\n };\n \n #[derive(Debug, Clone)]"}, {"sha": "999792ecba8e3a0e0c36d855c550480f34405a33", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -1,3 +1,4 @@\n+use serde_derive::{Serialize, Deserialize};\n use languageserver_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n use url_serde;"}, {"sha": "c3f89ad5f0f4db7c48ef1c69e33e1326ed41519a", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -9,6 +9,7 @@ use ra_analysis::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, FileResolver, LibraryData,\n };\n use rustc_hash::FxHashMap;\n+use failure::{bail, format_err};\n \n use crate::{\n     path_map::{PathMap, Root},"}, {"sha": "99825d440d8fda5f2394815cd91bf6b1fb3f3f89", "filename": "crates/ra_lsp_server/src/thread_watcher.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -2,6 +2,7 @@ use std::thread;\n \n use crossbeam_channel::{bounded, unbounded, Receiver, Sender};\n use drop_bomb::DropBomb;\n+use failure::format_err;\n \n use crate::Result;\n \n@@ -48,16 +49,16 @@ impl ThreadWatcher {\n     }\n \n     pub fn stop(mut self) -> Result<()> {\n-        info!(\"waiting for {} to finish ...\", self.name);\n+        log::info!(\"waiting for {} to finish ...\", self.name);\n         let name = self.name;\n         self.bomb.defuse();\n         let res = self\n             .thread\n             .join()\n             .map_err(|_| format_err!(\"ThreadWatcher {} died\", name));\n         match &res {\n-            Ok(()) => info!(\"... {} terminated with ok\", name),\n-            Err(_) => error!(\"... {} terminated with err\", name),\n+            Ok(()) => log::info!(\"... {} terminated with ok\", name),\n+            Err(_) => log::error!(\"... {} terminated with err\", name),\n         }\n         res\n     }"}, {"sha": "00ab3e6c3d655268f8c83ef00fd3a5bbe330198e", "filename": "crates/ra_lsp_server/src/vfs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -25,9 +25,9 @@ pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, ThreadWatc\n         |input_receiver, output_sender| {\n             input_receiver\n                 .map(|path| {\n-                    debug!(\"loading {} ...\", path.as_path().display());\n+                    log::debug!(\"loading {} ...\", path.as_path().display());\n                     let events = load_root(path.as_path());\n-                    debug!(\"... loaded {}\", path.as_path().display());\n+                    log::debug!(\"... loaded {}\", path.as_path().display());\n                     (path, events)\n                 })\n                 .for_each(|it| output_sender.send(it))\n@@ -41,7 +41,7 @@ fn load_root(path: &Path) -> Vec<FileEvent> {\n         let entry = match entry {\n             Ok(entry) => entry,\n             Err(e) => {\n-                warn!(\"watcher error: {}\", e);\n+                log::warn!(\"watcher error: {}\", e);\n                 continue;\n             }\n         };\n@@ -55,7 +55,7 @@ fn load_root(path: &Path) -> Vec<FileEvent> {\n         let text = match fs::read_to_string(path) {\n             Ok(text) => text,\n             Err(e) => {\n-                warn!(\"watcher error: {}\", e);\n+                log::warn!(\"watcher error: {}\", e);\n                 continue;\n             }\n         };"}, {"sha": "cbc0c88443a0efbbb1756bfb4230500c0b18f92d", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -1,6 +1,3 @@\n-#[macro_use]\n-extern crate crossbeam_channel;\n-\n mod support;\n \n use ra_lsp_server::req::{Runnables, RunnablesParams};"}, {"sha": "019048a3a869c857950b29e2bd71e75cf4cc1d42", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e8b376d1d21b8b697de5ef1e35a341855202ed/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=f6e8b376d1d21b8b697de5ef1e35a341855202ed", "patch": "@@ -6,7 +6,7 @@ use std::{\n     time::Duration,\n };\n \n-use crossbeam_channel::{after, Receiver};\n+use crossbeam_channel::{after, select, Receiver};\n use flexi_logger::Logger;\n use gen_lsp_server::{RawMessage, RawNotification, RawRequest};\n use languageserver_types::{"}]}