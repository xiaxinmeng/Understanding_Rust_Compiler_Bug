{"sha": "4b736ff29b2a8d8915e56bc880ab024292a3ac48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNzM2ZmYyOWIyYThkODkxNWU1NmJjODgwYWIwMjQyOTJhM2FjNDg=", "commit": {"author": {"name": "rhysd", "email": "lin90162@yahoo.co.jp", "date": "2019-02-03T12:27:23Z"}, "committer": {"name": "rhysd", "email": "lin90162@yahoo.co.jp", "date": "2019-02-03T12:27:23Z"}, "message": "Merge branch 'master' into issue3721", "tree": {"sha": "3d1f64406872fdcf3f86a7fe011491b4c912442c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1f64406872fdcf3f86a7fe011491b4c912442c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b736ff29b2a8d8915e56bc880ab024292a3ac48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b736ff29b2a8d8915e56bc880ab024292a3ac48", "html_url": "https://github.com/rust-lang/rust/commit/4b736ff29b2a8d8915e56bc880ab024292a3ac48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b736ff29b2a8d8915e56bc880ab024292a3ac48/comments", "author": {"login": "rhysd", "id": 823277, "node_id": "MDQ6VXNlcjgyMzI3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/823277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhysd", "html_url": "https://github.com/rhysd", "followers_url": "https://api.github.com/users/rhysd/followers", "following_url": "https://api.github.com/users/rhysd/following{/other_user}", "gists_url": "https://api.github.com/users/rhysd/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhysd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhysd/subscriptions", "organizations_url": "https://api.github.com/users/rhysd/orgs", "repos_url": "https://api.github.com/users/rhysd/repos", "events_url": "https://api.github.com/users/rhysd/events{/privacy}", "received_events_url": "https://api.github.com/users/rhysd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rhysd", "id": 823277, "node_id": "MDQ6VXNlcjgyMzI3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/823277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhysd", "html_url": "https://github.com/rhysd", "followers_url": "https://api.github.com/users/rhysd/followers", "following_url": "https://api.github.com/users/rhysd/following{/other_user}", "gists_url": "https://api.github.com/users/rhysd/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhysd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhysd/subscriptions", "organizations_url": "https://api.github.com/users/rhysd/orgs", "repos_url": "https://api.github.com/users/rhysd/repos", "events_url": "https://api.github.com/users/rhysd/events{/privacy}", "received_events_url": "https://api.github.com/users/rhysd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60f723fba42756138f3a9386b8376e2ed3e7dda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/60f723fba42756138f3a9386b8376e2ed3e7dda1", "html_url": "https://github.com/rust-lang/rust/commit/60f723fba42756138f3a9386b8376e2ed3e7dda1"}, {"sha": "3bda548f81bc268a2e9813ce9168d2e40e8a11bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bda548f81bc268a2e9813ce9168d2e40e8a11bd", "html_url": "https://github.com/rust-lang/rust/commit/3bda548f81bc268a2e9813ce9168d2e40e8a11bd"}], "stats": {"total": 678, "additions": 554, "deletions": 124}, "files": [{"sha": "d7b262255187236bd90de421b40e1b0256b496b4", "filename": ".travis.yml", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -39,40 +39,45 @@ install:\n matrix:\n   fast_finish: true\n   include:\n+    # Builds that are executed for every PR\n     - os: osx # run base tests on both platforms\n       env: BASE_TESTS=true\n     - os: linux\n       env: BASE_TESTS=true\n     - os: windows\n       env: CARGO_INCREMENTAL=0 BASE_TESTS=true\n+\n+    # Builds that are only executed when a PR is r+ed or a try build is started\n+    # We don't want to run these always because they go towards\n+    # the build limit within the Travis rust-lang account.\n     - env: INTEGRATION=rust-lang/cargo\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-random/rand\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/stdsimd\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang/rustfmt\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/futures-rs\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/failure\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/log\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/chalk\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang/rls\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=chronotope/chrono\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=serde-rs/serde\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=Geal/nom\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=hyperium/hyper\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=bluss/rust-itertools\n-      if: repo =~ /^rust-lang\\/rust-clippy$/\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n   allow_failures:\n   - os: windows\n     env: CARGO_INCREMENTAL=0 BASE_TESTS=true"}, {"sha": "59a18e9d4c423a1c6ff0c370874d7956bd8d9a48", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -982,6 +982,7 @@ All notable changes to this project will be documented in this file.\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n+[`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n [`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n [`transmute_bytes_to_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool"}, {"sha": "2ef2a184746139c26ce6745e14f3c17d58247dd3", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -64,6 +64,7 @@ impl LintPass for AssignOps {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n+    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         match &expr.node {\n             hir::ExprKind::AssignOp(op, lhs, rhs) => {"}, {"sha": "f052ad6e5ac6e9833f5f7f616fc7e8eb66d1d75d", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -177,6 +177,7 @@ fn check_compare(cx: &LateContext<'_, '_>, bit_op: &Expr, cmp_op: BinOpKind, cmp\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_bit_mask(\n     cx: &LateContext<'_, '_>,\n     bit_op: BinOpKind,"}, {"sha": "74d45505a4bc4f30921bba544e0c8d086915d0a8", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -44,7 +44,7 @@ impl LintPass for BlackListedName {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlackListedName {\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if let PatKind::Binding(_, _, ident, _) = pat.node {\n+        if let PatKind::Binding(.., ident, _) = pat.node {\n             if self.blacklist.contains(&ident.name.to_string()) {\n                 span_lint(\n                     cx,"}, {"sha": "41afe5ce0d79ed07333e6afeca95b7c323aeb89e", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -286,7 +286,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n                     bindings_impl(cx, pat, map);\n                 }\n             },\n-            PatKind::Binding(_, _, ident, ref as_pat) => {\n+            PatKind::Binding(.., ident, ref as_pat) => {\n                 if let Entry::Vacant(v) = map.entry(ident.as_str()) {\n                     v.insert(cx.tables.pat_ty(pat));\n                 }"}, {"sha": "2602ad45986bcd8970965e9ad1b0d12f76b26c05", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -59,7 +59,7 @@ impl LintPass for EqOp {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n-    #[allow(clippy::similar_names)]\n+    #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(op, ref left, ref right) = e.node {\n             if in_macro(e.span) {"}, {"sha": "4dbb390cd504c9337016c3caed4720feccf7c450", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -81,7 +81,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 _ => (),\n             }\n             for (a1, a2) in iter_input_pats(decl, body).zip(args) {\n-                if let PatKind::Binding(_, _, ident, _) = a1.pat.node {\n+                if let PatKind::Binding(.., ident, _) = a1.pat.node {\n                     // XXXManishearth Should I be checking the binding mode here?\n                     if let ExprKind::Path(QPath::Resolved(None, ref p)) = a2.node {\n                         if p.segments.len() != 1 {"}, {"sha": "b6e0480d986bd493a63e01e4690da7a34fb30ecf", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 97, "deletions": 6, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,9 +1,9 @@\n-use crate::utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n+use crate::utils::{iter_input_pats, snippet, span_lint, type_is_unsafe_function};\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::hir::intravisit;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_data_structures::fx::FxHashSet;\n@@ -31,6 +31,29 @@ declare_clippy_lint! {\n     \"functions with too many arguments\"\n }\n \n+/// **What it does:** Checks for functions with a large amount of lines.\n+///\n+/// **Why is this bad?** Functions with a lot of lines are harder to understand\n+/// due to having to look at a larger amount of code to understand what the\n+/// function is doing. Consider splitting the body of the function into\n+/// multiple functions.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ``` rust\n+/// fn im_too_long() {\n+/// println!(\"\");\n+/// // ... 100 more LoC\n+/// println!(\"\");\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub TOO_MANY_LINES,\n+    pedantic,\n+    \"functions with too many lines\"\n+}\n+\n /// **What it does:** Checks for public functions that dereferences raw pointer\n /// arguments but are not marked unsafe.\n ///\n@@ -62,17 +85,18 @@ declare_clippy_lint! {\n #[derive(Copy, Clone)]\n pub struct Functions {\n     threshold: u64,\n+    max_lines: u64,\n }\n \n impl Functions {\n-    pub fn new(threshold: u64) -> Self {\n-        Self { threshold }\n+    pub fn new(threshold: u64, max_lines: u64) -> Self {\n+        Self { threshold, max_lines }\n     }\n }\n \n impl LintPass for Functions {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(TOO_MANY_ARGUMENTS, NOT_UNSAFE_PTR_ARG_DEREF)\n+        lint_array!(TOO_MANY_ARGUMENTS, TOO_MANY_LINES, NOT_UNSAFE_PTR_ARG_DEREF)\n     }\n \n     fn name(&self) -> &'static str {\n@@ -123,6 +147,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         }\n \n         self.check_raw_ptr(cx, unsafety, decl, body, nodeid);\n+        self.check_line_number(cx, span);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n@@ -153,6 +178,72 @@ impl<'a, 'tcx> Functions {\n         }\n     }\n \n+    fn check_line_number(self, cx: &LateContext<'_, '_>, span: Span) {\n+        if in_external_macro(cx.sess(), span) {\n+            return;\n+        }\n+\n+        let code_snippet = snippet(cx, span, \"..\");\n+        let mut line_count: u64 = 0;\n+        let mut in_comment = false;\n+        let mut code_in_line;\n+\n+        // Skip the surrounding function decl.\n+        let start_brace_idx = match code_snippet.find('{') {\n+            Some(i) => i + 1,\n+            None => 0,\n+        };\n+        let end_brace_idx = match code_snippet.find('}') {\n+            Some(i) => i,\n+            None => code_snippet.len(),\n+        };\n+        let function_lines = code_snippet[start_brace_idx..end_brace_idx].lines();\n+\n+        for mut line in function_lines {\n+            code_in_line = false;\n+            loop {\n+                line = line.trim_start();\n+                if line.is_empty() {\n+                    break;\n+                }\n+                if in_comment {\n+                    match line.find(\"*/\") {\n+                        Some(i) => {\n+                            line = &line[i + 2..];\n+                            in_comment = false;\n+                            continue;\n+                        },\n+                        None => break,\n+                    }\n+                } else {\n+                    let multi_idx = match line.find(\"/*\") {\n+                        Some(i) => i,\n+                        None => line.len(),\n+                    };\n+                    let single_idx = match line.find(\"//\") {\n+                        Some(i) => i,\n+                        None => line.len(),\n+                    };\n+                    code_in_line |= multi_idx > 0 && single_idx > 0;\n+                    // Implies multi_idx is below line.len()\n+                    if multi_idx < single_idx {\n+                        line = &line[multi_idx + 2..];\n+                        in_comment = true;\n+                        continue;\n+                    }\n+                    break;\n+                }\n+            }\n+            if code_in_line {\n+                line_count += 1;\n+            }\n+        }\n+\n+        if line_count > self.max_lines {\n+            span_lint(cx, TOO_MANY_LINES, span, \"This function has a large number of lines.\")\n+        }\n+    }\n+\n     fn check_raw_ptr(\n         self,\n         cx: &LateContext<'a, 'tcx>,\n@@ -183,7 +274,7 @@ impl<'a, 'tcx> Functions {\n }\n \n fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<ast::NodeId> {\n-    if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n+    if let (&hir::PatKind::Binding(_, id, _, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n         Some(id)\n     } else {\n         None"}, {"sha": "a6d34f2c7a234290b500d5098826d18bb985e8b3", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -94,10 +94,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                         |db| {\n                             if variant.fields.len() == 1 {\n                                 let span = match def.variants[i].node.data {\n-                                    VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => {\n+                                    VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => {\n                                         fields[0].ty.span\n                                     },\n-                                    VariantData::Unit(_) => unreachable!(),\n+                                    VariantData::Unit(..) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n                                     db.span_suggestion("}, {"sha": "a4f69e3217189ee5255d1ccc66d76b41934a54c9", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n                 if let hir::StmtKind::Local(ref local) = stmt.node;\n-                if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.node;\n+                if let hir::PatKind::Binding(mode, canonical_id, _, ident, None) = local.pat.node;\n                 if let hir::StmtKind::Expr(ref if_) = expr.node;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;\n                 if !used_in_expr(cx, canonical_id, cond);"}, {"sha": "5a9364eddb69bdcd36292c9292b7af536079d35a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -292,6 +292,7 @@ pub fn read_conf(reg: &rustc_plugin::Registry<'_>) -> Conf {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n #[rustfmt::skip]\n pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     let mut store = reg.sess.lint_store.borrow_mut();\n@@ -429,7 +430,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(\n             conf.blacklisted_names.iter().cloned().collect()\n     ));\n-    reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n+    reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold, conf.too_many_lines_threshold));\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents.iter().cloned().collect()));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n@@ -530,6 +531,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         enum_glob_use::ENUM_GLOB_USE,\n         enum_variants::MODULE_NAME_REPETITIONS,\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n+        functions::TOO_MANY_LINES,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,"}, {"sha": "dcd1a4e0a61033e58537f5b207afc3b52bf3749c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -472,6 +472,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // we don't want to check expanded macros\n         if in_macro(expr.span) {\n@@ -968,7 +969,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n     }) = higher::range(cx, arg)\n     {\n         // the var must be a single name\n-        if let PatKind::Binding(_, canonical_id, _, _) = pat.node {\n+        if let PatKind::Binding(_, canonical_id, _, _, _) = pat.node {\n             let print_sum = |arg1: &Offset, arg2: &Offset| -> String {\n                 match (&arg1.value[..], arg1.negate, &arg2.value[..], arg2.negate) {\n                     (\"0\", _, \"0\", _) => \"\".into(),\n@@ -1066,6 +1067,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n \n /// Check for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n+#[allow(clippy::too_many_lines)]\n fn check_for_loop_range<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,\n@@ -1084,7 +1086,7 @@ fn check_for_loop_range<'a, 'tcx>(\n     }) = higher::range(cx, arg)\n     {\n         // the var must be a single name\n-        if let PatKind::Binding(_, canonical_id, ident, _) = pat.node {\n+        if let PatKind::Binding(_, canonical_id, _, ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n                 cx,\n                 var: canonical_id,\n@@ -1635,7 +1637,7 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr) -> Option<NodeId\n                 let node_str = cx.tcx.hir().get(node_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n-                    if let PatKind::Binding(bind_ann, _, _, _) = pat.node;\n+                    if let PatKind::Binding(bind_ann, ..) = pat.node;\n                     if let BindingAnnotation::Mutable = bind_ann;\n                     then {\n                         return Some(node_id);\n@@ -1668,7 +1670,7 @@ fn check_for_mutation(\n fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n-        PatKind::Binding(_, _, ident, None) if ident.as_str().starts_with('_') => {\n+        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => {\n             let mut visitor = UsedVisitor {\n                 var: ident.name,\n                 used: false,\n@@ -2093,7 +2095,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         // Look for declarations of the variable\n         if let StmtKind::Local(ref local) = stmt.node {\n             if local.pat.id == self.var_id {\n-                if let PatKind::Binding(_, _, ident, _) = local.pat.node {\n+                if let PatKind::Binding(.., ident, _) = local.pat.node {\n                     self.name = Some(ident.name);\n \n                     self.state = if let Some(ref init) = local.init {\n@@ -2284,7 +2286,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         if self.nesting != Unknown {\n             return;\n         }\n-        if let PatKind::Binding(_, _, span_name, _) = pat.node {\n+        if let PatKind::Binding(.., span_name, _) = pat.node {\n             if self.iterator == span_name.name {\n                 self.nesting = RuledOut;\n                 return;"}, {"sha": "5699870c307de77b25c79746bfb60ed5bac431b1", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -70,13 +70,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             then {\n                 match closure_body.arguments[0].pat.node {\n                     hir::PatKind::Ref(ref inner, _) => if let hir::PatKind::Binding(\n-                        hir::BindingAnnotation::Unannotated, _, name, None\n+                        hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {\n                         if ident_eq(name, closure_expr) {\n                             lint(cx, e.span, args[0].span);\n                         }\n                     },\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n+                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n                                 if ident_eq(name, inner) && !cx.tables.expr_ty(inner).is_box() {"}, {"sha": "9cb160685ca6bfd95412a433676ef1124fbcd8e5", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -338,7 +338,7 @@ fn check_single_match_opt_like(\n             }\n             print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n         },\n-        PatKind::Binding(BindingAnnotation::Unannotated, _, ident, None) => ident.to_string(),\n+        PatKind::Binding(BindingAnnotation::Unannotated, .., ident, None) => ident.to_string(),\n         PatKind::Path(ref path) => print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n         _ => return,\n     };\n@@ -657,7 +657,7 @@ fn is_ref_some_arm(arm: &Arm) -> Option<BindingAnnotation> {\n     if_chain! {\n         if let PatKind::TupleStruct(ref path, ref pats, _) = arm.pats[0].node;\n         if pats.len() == 1 && match_qpath(path, &paths::OPTION_SOME);\n-        if let PatKind::Binding(rb, _, ident, _) = pats[0].node;\n+        if let PatKind::Binding(rb, .., ident, _) = pats[0].node;\n         if rb == BindingAnnotation::Ref || rb == BindingAnnotation::RefMut;\n         if let ExprKind::Call(ref e, ref args) = remove_blocks(&arm.body).node;\n         if let ExprKind::Path(ref some_path) = e.node;"}, {"sha": "4ce2ae03b9fb92c0c79ad87296b6f737d363b9d8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1005,6 +1005,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n+#[allow(clippy::too_many_lines)]\n fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     /// Check for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n     fn check_unwrap_or_default(\n@@ -1151,6 +1152,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n }\n \n /// Checks for the `EXPECT_FUN_CALL` lint.\n+#[allow(clippy::too_many_lines)]\n fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     // Strip `&`, `as_ref()` and `as_str()` off `arg` until we're left with either a `String` or\n     // `&str`"}, {"sha": "99cdba9402fed78cb8f36c07880555e4ad1e7bd5", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -264,8 +264,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n         for arg in iter_input_pats(decl, body) {\n             match arg.pat.node {\n-                PatKind::Binding(BindingAnnotation::Ref, _, _, _)\n-                | PatKind::Binding(BindingAnnotation::RefMut, _, _, _) => {\n+                PatKind::Binding(BindingAnnotation::Ref, ..) | PatKind::Binding(BindingAnnotation::RefMut, ..) => {\n                     span_lint(\n                         cx,\n                         TOPLEVEL_REF_ARG,\n@@ -282,7 +281,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n         if_chain! {\n             if let StmtKind::Local(ref l) = s.node;\n-            if let PatKind::Binding(an, _, i, None) = l.pat.node;\n+            if let PatKind::Binding(an, .., i, None) = l.pat.node;\n             if let Some(ref init) = l.init;\n             then {\n                 if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut {\n@@ -445,7 +444,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if let PatKind::Binding(_, _, ident, Some(ref right)) = pat.node {\n+        if let PatKind::Binding(.., ident, Some(ref right)) = pat.node {\n             if let PatKind::Wild = right.node {\n                 span_lint(\n                     cx,"}, {"sha": "777d2f683f0dab777a5d2fab19f9c52511ccfffe", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n             return;\n         }\n         if_chain! {\n-            if let PatKind::Binding(BindingAnnotation::Ref, _, name, _) = pat.node;\n+            if let PatKind::Binding(BindingAnnotation::Ref, .., name, _) = pat.node;\n             if let ty::Ref(_, tam, mutbl) = cx.tables.pat_ty(pat).sty;\n             if mutbl == MutImmutable;\n             if let ty::Ref(_, _, mutbl) = tam.sty;"}, {"sha": "eae8ed541e224132dd384a53c7fdd18ba91c8460", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n             if let PatKind::Ref(ref sub_pat, MutImmutable) = pat.node;\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n-            if let PatKind::Binding(BindingAnnotation::Ref, _, spanned_name, ..) = sub_pat.node;\n+            if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.node;\n             then {\n                 span_lint_and_then(cx, NEEDLESS_BORROWED_REFERENCE, pat.span,\n                                    \"this pattern takes a reference on something that is being de-referenced\","}, {"sha": "77a6aeba53b0b9ad28e86dcbef52abd242a66924", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -73,6 +73,7 @@ macro_rules! need {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n+    #[allow(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n@@ -163,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n             // Ignore `self`s.\n             if idx == 0 {\n-                if let PatKind::Binding(_, _, ident, ..) = arg.pat.node {\n+                if let PatKind::Binding(.., ident, _) = arg.pat.node {\n                     if ident.as_str() == \"self\" {\n                         continue;\n                     }"}, {"sha": "fbf60db28ee4053a7a19c748a0f771911f3b3126", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -158,6 +158,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             );\n         }\n     }\n+    #[allow(clippy::too_many_lines)]\n     fn check_name(&mut self, span: Span, name: Name) {\n         let interned_name = name.as_str();\n         if interned_name.chars().any(char::is_uppercase) {"}, {"sha": "5a54971f49e0e40f25cab81865391d20c8efc08a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -151,6 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<BodyId>) {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n     let sig = cx.tcx.fn_sig(fn_def_id);"}, {"sha": "5c994d8a2bc9231322e54aec03018ed799fb368b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -80,6 +80,7 @@ impl LintPass for RedundantClone {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n+    #[allow(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "722f64405c795f0b27e74441bd4bcc63cda2fd8a", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: &'tcx Body) {\n     let mut bindings = Vec::new();\n     for arg in iter_input_pats(decl, body) {\n-        if let PatKind::Binding(_, _, ident, _) = arg.pat.node {\n+        if let PatKind::Binding(.., ident, _) = arg.pat.node {\n             bindings.push((ident.name, ident.span))\n         }\n     }\n@@ -172,7 +172,7 @@ fn check_pat<'a, 'tcx>(\n ) {\n     // TODO: match more stuff / destructuring\n     match pat.node {\n-        PatKind::Binding(_, _, ident, ref inner) => {\n+        PatKind::Binding(.., ident, ref inner) => {\n             let name = ident.name;\n             if is_binding(cx, pat.hir_id) {\n                 let mut new_binding = true;"}, {"sha": "b8ab32491a3bcd269b0fbf223649e4661a0dd17c", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n             if let StmtKind::Local(ref local) = stmt.node;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, _, variable_name, None) = local.pat.node;\n+            if let PatKind::Binding(BindingAnnotation::Mutable, .., variable_name, None) = local.pat.node;\n             if let Some(ref init) = local.init;\n             if let Some(ref len_arg) = Self::is_vec_with_capacity(init);\n "}, {"sha": "7b532cdb17250dfff748ab04937e143a8e90bc2a", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -77,7 +77,7 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n             // let t = foo();\n             if let StmtKind::Local(ref tmp) = w[0].node;\n             if let Some(ref tmp_init) = tmp.init;\n-            if let PatKind::Binding(_, _, ident, None) = tmp.pat.node;\n+            if let PatKind::Binding(.., ident, None) = tmp.pat.node;\n \n             // foo() = bar();\n             if let StmtKind::Semi(ref first) = w[1].node;"}, {"sha": "56e1aa4a4e1fdf1bb01d6f19042139bd685f032b", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -226,7 +226,7 @@ impl LintPass for Transmute {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n-    #[allow(clippy::similar_names)]\n+    #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {"}, {"sha": "b99e68e8946ba8b7bb5bd669e6113bcaadb918ba", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n         check_fn_decl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField) {\n         check_ty(cx, &field.ty, false);\n     }\n \n@@ -240,21 +240,22 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n ///\n /// The parameter `is_local` distinguishes the context of the type; types from\n /// local bindings should only be checked for the `BORROWED_BOX` lint.\n-fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n-    if in_macro(ast_ty.span) {\n+#[allow(clippy::too_many_lines)]\n+fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n+    if in_macro(hir_ty.span) {\n         return;\n     }\n-    match ast_ty.node {\n+    match hir_ty.node {\n         TyKind::Path(ref qpath) if !is_local => {\n-            let hir_id = cx.tcx.hir().node_to_hir_id(ast_ty.id);\n+            let hir_id = cx.tcx.hir().node_to_hir_id(hir_ty.id);\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     if match_type_parameter(cx, qpath, &paths::VEC) {\n                         span_help_and_lint(\n                             cx,\n                             BOX_VEC,\n-                            ast_ty.span,\n+                            hir_ty.span,\n                             \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n                             \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n                         );\n@@ -275,34 +276,32 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                         if Some(def_id) == cx.tcx.lang_items().owned_box();\n                         // At this point, we know ty is Box<T>, now get T\n                         if let Some(ref last) = last_path_segment(ty_qpath).args;\n-                        if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n+                        if let Some(boxed_ty) = last.args.iter().find_map(|arg| match arg {\n                             GenericArg::Type(ty) => Some(ty),\n                             GenericArg::Lifetime(_) => None,\n                         });\n-                        if let TyKind::Path(ref ty_qpath) = ty.node;\n-                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n-                        if let Some(def_id) = opt_def_id(def);\n-                        let boxed_type = cx.tcx.type_of(def_id);\n-                        if boxed_type.is_sized(cx.tcx.at(ty.span), cx.param_env);\n                         then {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                VEC_BOX,\n-                                ast_ty.span,\n-                                \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n-                                \"try\",\n-                                format!(\"Vec<{}>\", boxed_type),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            return; // don't recurse into the type\n+                            let ty_ty = hir_ty_to_ty(cx.tcx, boxed_ty);\n+                            if ty_ty.is_sized(cx.tcx.at(ty.span), cx.param_env) {\n+                                span_lint_and_sugg(\n+                                    cx,\n+                                    VEC_BOX,\n+                                    hir_ty.span,\n+                                    \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n+                                    \"try\",\n+                                    format!(\"Vec<{}>\", ty_ty),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                return; // don't recurse into the type\n+                            }\n                         }\n                     }\n                 } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {\n                     if match_type_parameter(cx, qpath, &paths::OPTION) {\n                         span_lint(\n                             cx,\n                             OPTION_OPTION,\n-                            ast_ty.span,\n+                            hir_ty.span,\n                             \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n                              enum if you need to distinguish all 3 cases\",\n                         );\n@@ -312,7 +311,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                     span_help_and_lint(\n                         cx,\n                         LINKEDLIST,\n-                        ast_ty.span,\n+                        hir_ty.span,\n                         \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n                         \"a VecDeque might work\",\n                     );\n@@ -360,7 +359,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                 },\n             }\n         },\n-        TyKind::Rptr(ref lt, ref mut_ty) => check_ty_rptr(cx, ast_ty, is_local, lt, mut_ty),\n+        TyKind::Rptr(ref lt, ref mut_ty) => check_ty_rptr(cx, hir_ty, is_local, lt, mut_ty),\n         // recurse\n         TyKind::Slice(ref ty) | TyKind::Array(ref ty, _) | TyKind::Ptr(MutTy { ref ty, .. }) => {\n             check_ty(cx, ty, is_local)\n@@ -374,7 +373,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n     }\n }\n \n-fn check_ty_rptr(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n+fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n     match mut_ty.ty.node {\n         TyKind::Path(ref qpath) => {\n             let hir_id = cx.tcx.hir().node_to_hir_id(mut_ty.ty.id);\n@@ -410,7 +409,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool, lt:\n                     span_lint_and_sugg(\n                         cx,\n                         BORROWED_BOX,\n-                        ast_ty.span,\n+                        hir_ty.span,\n                         \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n                         \"try\",\n                         format!(\n@@ -1324,7 +1323,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }\n@@ -1968,7 +1967,7 @@ impl LintPass for ImplicitHasher {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n-    #[allow(clippy::cast_possible_truncation)]\n+    #[allow(clippy::cast_possible_truncation, clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         use syntax_pos::BytePos;\n "}, {"sha": "264a5463225df79434c34cb6089e3247b1603a19", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -194,6 +194,7 @@ struct PrintVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n+    #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr) {\n         print!(\"    if let ExprKind::\");\n         let current = format!(\"{}.node\", self.current);\n@@ -506,12 +507,13 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         }\n     }\n \n+    #[allow(clippy::too_many_lines)]\n     fn visit_pat(&mut self, pat: &Pat) {\n         print!(\"    if let PatKind::\");\n         let current = format!(\"{}.node\", self.current);\n         match pat.node {\n             PatKind::Wild => println!(\"Wild = {};\", current),\n-            PatKind::Binding(anno, _, ident, ref sub) => {\n+            PatKind::Binding(anno, .., ident, ref sub) => {\n                 let anno_pat = match anno {\n                     BindingAnnotation::Unannotated => \"BindingAnnotation::Unannotated\",\n                     BindingAnnotation::Mutable => \"BindingAnnotation::Mutable\","}, {"sha": "09d204a562c9a00e847adeb5c1b2349904f41972", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -148,6 +148,8 @@ define_Conf! {\n     (literal_representation_threshold, \"literal_representation_threshold\", 16384 => u64),\n     /// Lint: TRIVIALLY_COPY_PASS_BY_REF. The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n     (trivial_copy_size_limit, \"trivial_copy_size_limit\", None => Option<u64>),\n+    /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n+    (too_many_lines_threshold, \"too_many_lines_threshold\", 100 => u64),\n }\n \n impl Default for Conf {"}, {"sha": "53876fef579455f293be5096a4b064313d489caa", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::TupleStruct(ref lp, ref la, ls), &PatKind::TupleStruct(ref rp, ref ra, rs)) => {\n                 self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             },\n-            (&PatKind::Binding(ref lb, _, ref li, ref lp), &PatKind::Binding(ref rb, _, ref ri, ref rp)) => {\n+            (&PatKind::Binding(ref lb, .., ref li, ref lp), &PatKind::Binding(ref rb, .., ref ri, ref rp)) => {\n                 lb == rb && li.name.as_str() == ri.name.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n             },\n             (&PatKind::Path(ref l), &PatKind::Path(ref r)) => self.eq_qpath(l, r),\n@@ -389,7 +389,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n         .hash(&mut self.s);\n     }\n \n-    #[allow(clippy::many_single_char_names)]\n+    #[allow(clippy::many_single_char_names, clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr) {\n         if let Some(e) = constant_simple(self.cx, self.tables, e) {\n             return e.hash(&mut self.s);"}, {"sha": "508bf26bab90f69641443f41699785bfd49be55b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -420,7 +420,7 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n     println!(\"{}+\", ind);\n     match pat.node {\n         hir::PatKind::Wild => println!(\"{}Wild\", ind),\n-        hir::PatKind::Binding(ref mode, _, ident, ref inner) => {\n+        hir::PatKind::Binding(ref mode, .., ident, ref inner) => {\n             println!(\"{}Binding\", ind);\n             println!(\"{}mode: {:?}\", ind, mode);\n             println!(\"{}name: {}\", ind, ident.name);"}, {"sha": "e68cefe2bc451cb7723337940f0854d68203f1a1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -373,7 +373,7 @@ pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Name> {\n /// Get the name of a `Pat`, if any\n pub fn get_pat_name(pat: &Pat) -> Option<Name> {\n     match pat.node {\n-        PatKind::Binding(_, _, ref spname, _) => Some(spname.name),\n+        PatKind::Binding(.., ref spname, _) => Some(spname.name),\n         PatKind::Path(ref qpath) => single_segment_path(qpath).map(|ps| ps.ident.name),\n         PatKind::Box(ref p) | PatKind::Ref(ref p, _) => get_pat_name(&*p),\n         _ => None,\n@@ -1008,7 +1008,7 @@ pub fn opt_def_id(def: Def) -> Option<DefId> {\n }\n \n pub fn is_self(slf: &Arg) -> bool {\n-    if let PatKind::Binding(_, _, name, _) = slf.pat.node {\n+    if let PatKind::Binding(.., name, _) = slf.pat.node {\n         name.name == keywords::SelfLower.name()\n     } else {\n         false\n@@ -1038,7 +1038,7 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n         if_chain! {\n             if let PatKind::TupleStruct(ref path, ref pat, None) = arm.pats[0].node;\n             if match_qpath(path, &paths::RESULT_OK[1..]);\n-            if let PatKind::Binding(_, defid, _, None) = pat[0].node;\n+            if let PatKind::Binding(_, defid, _, _, None) = pat[0].node;\n             if let ExprKind::Path(QPath::Resolved(None, ref path)) = arm.body.node;\n             if let Def::Local(lid) = path.def;\n             if lid == defid;\n@@ -1087,7 +1087,7 @@ pub fn is_allowed(cx: &LateContext<'_, '_>, lint: &'static Lint, id: NodeId) ->\n \n pub fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n     match pat.node {\n-        PatKind::Binding(_, _, ident, None) => Some(ident.name),\n+        PatKind::Binding(.., ident, None) => Some(ident.name),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),\n         _ => None,\n     }"}, {"sha": "b41895f3c2bd8603190395e1cea754bde1cd69dc", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -20,6 +20,7 @@ fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }\n \n+#[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     exit("}, {"sha": "951dbb523d9558c5b75e5197f0df52e4b8ee9448", "filename": "tests/ui-toml/functions_maxlines/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ffunctions_maxlines%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ffunctions_maxlines%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Fclippy.toml?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -0,0 +1 @@\n+too-many-lines-threshold = 1"}, {"sha": "cd0e00825861b68bc095df388dce5a8aa5041196", "filename": "tests/ui-toml/functions_maxlines/test.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -0,0 +1,45 @@\n+#![warn(clippy::too_many_lines)]\n+\n+// This function should be considered one line.\n+fn many_comments_but_one_line_of_code() {\n+    /* println!(\"This is good.\"); */\n+    // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\"); */\n+    println!(\"This is good.\");\n+}\n+\n+// This should be considered two and a fail.\n+fn too_many_lines() {\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+}\n+\n+// This should be considered one line.\n+#[rustfmt::skip]\n+fn comment_starts_after_code() {\n+    let _ = 5; /* closing comment. */ /*\n+    this line shouldn't be counted theoretically.\n+    */\n+}\n+\n+// This should be considered one line.\n+fn comment_after_code() {\n+    let _ = 5; /* this line should get counted once. */\n+}\n+\n+// This should fail since it is technically two lines.\n+#[rustfmt::skip]\n+fn comment_before_code() {\n+    let _ = \"test\";\n+    /* This comment extends to the front of\n+    teh code but this line should still count. */ let _ = 5;\n+}\n+\n+// This should be considered one line.\n+fn main() {}"}, {"sha": "0669e99370b2852e55a47b157f6f143ed6cf1d28", "filename": "tests/ui-toml/functions_maxlines/test.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -0,0 +1,23 @@\n+error: This function has a large number of lines.\n+  --> $DIR/test.rs:18:1\n+   |\n+LL | / fn too_many_lines() {\n+LL | |     println!(\"This is bad.\");\n+LL | |     println!(\"This is bad.\");\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::too-many-lines` implied by `-D warnings`\n+\n+error: This function has a large number of lines.\n+  --> $DIR/test.rs:38:1\n+   |\n+LL | / fn comment_before_code() {\n+LL | |     let _ = \"test\";\n+LL | |     /* This comment extends to the front of\n+LL | |     teh code but this line should still count. */ let _ = 5;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ec2ac20684b890e64339272565255153024f9bac", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `third-party`\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `third-party`\n \n error: aborting due to previous error\n "}, {"sha": "be61fb6b9be613cca8bd66f622644b253af6cabd", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(unused, clippy::needless_pass_by_value)]\n+#![allow(unused, clippy::needless_pass_by_value, clippy::vec_box)]\n #![feature(associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "ada35abde99c655cd52b3841b854eb71fdb6eb60", "filename": "tests/ui/functions_maxlines.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Ffunctions_maxlines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Ffunctions_maxlines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions_maxlines.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -0,0 +1,162 @@\n+#![warn(clippy::too_many_lines)]\n+\n+fn good_lines() {\n+    /* println!(\"This is good.\"); */\n+    // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\"); */\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+}\n+\n+fn bad_lines() {\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+}\n+\n+fn main() {}"}, {"sha": "dfa6a1cf3c5fba1faf74461d1db8ae7a14e82ff0", "filename": "tests/ui/functions_maxlines.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Ffunctions_maxlines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Ffunctions_maxlines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions_maxlines.stderr?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -0,0 +1,16 @@\n+error: This function has a large number of lines.\n+  --> $DIR/functions_maxlines.rs:58:1\n+   |\n+LL | / fn bad_lines() {\n+LL | |     println!(\"This is bad.\");\n+LL | |     println!(\"This is bad.\");\n+LL | |     println!(\"This is bad.\");\n+...  |\n+LL | |     println!(\"This is bad.\");\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::too-many-lines` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a40b80378efc06e8be9a9c55494a216a387946a8", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,6 +1,6 @@\n #![feature(exclusive_range_pattern)]\n #![warn(clippy::all)]\n-#![allow(unused, clippy::redundant_pattern_matching)]\n+#![allow(unused, clippy::redundant_pattern_matching, clippy::too_many_lines)]\n #![warn(clippy::match_same_arms)]\n \n fn dummy() {}"}, {"sha": "2dd217903891a08eb7a7e54f59bd45ab3c31ea9a", "filename": "tests/ui/single_char_pattern.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![allow(unused_must_use)]\n+\n use std::collections::HashSet;\n \n fn main() {"}, {"sha": "dc2f9fe4959a1aa7470be4f2f63771cfd149cd6e", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![allow(unused_must_use)]\n+\n use std::collections::HashSet;\n \n fn main() {"}, {"sha": "0fcb203dbc1288c2bbfd19781e14082247e5e3ff", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,121 +1,121 @@\n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:7:13\n+  --> $DIR/single_char_pattern.rs:9:13\n    |\n LL |     x.split(\"x\");\n    |             ^^^ help: try using a char instead: `'x'`\n    |\n    = note: `-D clippy::single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:24:16\n+  --> $DIR/single_char_pattern.rs:26:16\n    |\n LL |     x.contains(\"x\");\n    |                ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:25:19\n+  --> $DIR/single_char_pattern.rs:27:19\n    |\n LL |     x.starts_with(\"x\");\n    |                   ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:26:17\n+  --> $DIR/single_char_pattern.rs:28:17\n    |\n LL |     x.ends_with(\"x\");\n    |                 ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:27:12\n+  --> $DIR/single_char_pattern.rs:29:12\n    |\n LL |     x.find(\"x\");\n    |            ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:28:13\n+  --> $DIR/single_char_pattern.rs:30:13\n    |\n LL |     x.rfind(\"x\");\n    |             ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:29:14\n+  --> $DIR/single_char_pattern.rs:31:14\n    |\n LL |     x.rsplit(\"x\");\n    |              ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:30:24\n+  --> $DIR/single_char_pattern.rs:32:24\n    |\n LL |     x.split_terminator(\"x\");\n    |                        ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:31:25\n+  --> $DIR/single_char_pattern.rs:33:25\n    |\n LL |     x.rsplit_terminator(\"x\");\n    |                         ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:32:17\n+  --> $DIR/single_char_pattern.rs:34:17\n    |\n LL |     x.splitn(0, \"x\");\n    |                 ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:33:18\n+  --> $DIR/single_char_pattern.rs:35:18\n    |\n LL |     x.rsplitn(0, \"x\");\n    |                  ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:34:15\n+  --> $DIR/single_char_pattern.rs:36:15\n    |\n LL |     x.matches(\"x\");\n    |               ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:35:16\n+  --> $DIR/single_char_pattern.rs:37:16\n    |\n LL |     x.rmatches(\"x\");\n    |                ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:36:21\n+  --> $DIR/single_char_pattern.rs:38:21\n    |\n LL |     x.match_indices(\"x\");\n    |                     ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:37:22\n+  --> $DIR/single_char_pattern.rs:39:22\n    |\n LL |     x.rmatch_indices(\"x\");\n    |                      ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:38:26\n+  --> $DIR/single_char_pattern.rs:40:26\n    |\n LL |     x.trim_start_matches(\"x\");\n    |                          ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:39:24\n+  --> $DIR/single_char_pattern.rs:41:24\n    |\n LL |     x.trim_end_matches(\"x\");\n    |                        ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:41:13\n+  --> $DIR/single_char_pattern.rs:43:13\n    |\n LL |     x.split(\"/n\");\n    |             ^^^^ help: try using a char instead: `'/n'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:46:31\n+  --> $DIR/single_char_pattern.rs:48:31\n    |\n LL |     x.replace(\";\", \",\").split(\",\"); // issue #2978\n    |                               ^^^ help: try using a char instead: `','`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:47:19\n+  --> $DIR/single_char_pattern.rs:49:19\n    |\n LL |     x.starts_with(\"/x03\"); // issue #2996\n    |                   ^^^^^^ help: try using a char instead: `'/x03'`"}, {"sha": "a56dac8aa232200d14ea6d6e4577891b058f2d82", "filename": "tests/ui/vec_box_sized.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fvec_box_sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fvec_box_sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.fixed?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+struct SizedStruct(i32);\n+struct UnsizedStruct([i32]);\n+\n+/// The following should trigger the lint\n+mod should_trigger {\n+    use super::SizedStruct;\n+\n+    struct StructWithVecBox {\n+        sized_type: Vec<SizedStruct>,\n+    }\n+\n+    struct A(Vec<SizedStruct>);\n+    struct B(Vec<Vec<u32>>);\n+}\n+\n+/// The following should not trigger the lint\n+mod should_not_trigger {\n+    use super::UnsizedStruct;\n+\n+    struct C(Vec<Box<UnsizedStruct>>);\n+\n+    struct StructWithVecBoxButItsUnsized {\n+        unsized_type: Vec<Box<UnsizedStruct>>,\n+    }\n+\n+    struct TraitVec<T: ?Sized> {\n+        // Regression test for #3720. This was causing an ICE.\n+        inner: Vec<Box<T>>,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "32d1e940f2712d40a776c48d361ce4e36a25a0b1", "filename": "tests/ui/vec_box_sized.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fvec_box_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fvec_box_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.rs?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,17 +1,36 @@\n-struct SizedStruct {\n-    _a: i32,\n-}\n+// run-rustfix\n \n-struct UnsizedStruct {\n-    _a: [i32],\n-}\n+#![allow(dead_code)]\n+\n+struct SizedStruct(i32);\n+struct UnsizedStruct([i32]);\n+\n+/// The following should trigger the lint\n+mod should_trigger {\n+    use super::SizedStruct;\n \n-struct StructWithVecBox {\n-    sized_type: Vec<Box<SizedStruct>>,\n+    struct StructWithVecBox {\n+        sized_type: Vec<Box<SizedStruct>>,\n+    }\n+\n+    struct A(Vec<Box<SizedStruct>>);\n+    struct B(Vec<Vec<Box<(u32)>>>);\n }\n \n-struct StructWithVecBoxButItsUnsized {\n-    unsized_type: Vec<Box<UnsizedStruct>>,\n+/// The following should not trigger the lint\n+mod should_not_trigger {\n+    use super::UnsizedStruct;\n+\n+    struct C(Vec<Box<UnsizedStruct>>);\n+\n+    struct StructWithVecBoxButItsUnsized {\n+        unsized_type: Vec<Box<UnsizedStruct>>,\n+    }\n+\n+    struct TraitVec<T: ?Sized> {\n+        // Regression test for #3720. This was causing an ICE.\n+        inner: Vec<Box<T>>,\n+    }\n }\n \n fn main() {}"}, {"sha": "b33880b46bd8886344aa40c0ac169b4a294d2a2d", "filename": "tests/ui/vec_box_sized.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b736ff29b2a8d8915e56bc880ab024292a3ac48/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=4b736ff29b2a8d8915e56bc880ab024292a3ac48", "patch": "@@ -1,10 +1,22 @@\n error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n-  --> $DIR/vec_box_sized.rs:10:17\n+  --> $DIR/vec_box_sized.rs:13:21\n    |\n-LL |     sized_type: Vec<Box<SizedStruct>>,\n-   |                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+LL |         sized_type: Vec<Box<SizedStruct>>,\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n    |\n    = note: `-D clippy::vec-box` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+  --> $DIR/vec_box_sized.rs:16:14\n+   |\n+LL |     struct A(Vec<Box<SizedStruct>>);\n+   |              ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+  --> $DIR/vec_box_sized.rs:17:18\n+   |\n+LL |     struct B(Vec<Vec<Box<(u32)>>>);\n+   |                  ^^^^^^^^^^^^^^^ help: try: `Vec<u32>`\n+\n+error: aborting due to 3 previous errors\n "}]}