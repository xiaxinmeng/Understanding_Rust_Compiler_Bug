{"sha": "85a12095708850031cf9962e2bbd8cb9f4920d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTEyMDk1NzA4ODUwMDMxY2Y5OTYyZTJiYmQ4Y2I5ZjQ5MjBkOWY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-18T00:05:08Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-27T22:27:21Z"}, "message": "Improve import failure detection", "tree": {"sha": "d9401bd6693dac25fa3debecd0efeeb3f0366078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9401bd6693dac25fa3debecd0efeeb3f0366078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a12095708850031cf9962e2bbd8cb9f4920d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a12095708850031cf9962e2bbd8cb9f4920d9f", "html_url": "https://github.com/rust-lang/rust/commit/85a12095708850031cf9962e2bbd8cb9f4920d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a12095708850031cf9962e2bbd8cb9f4920d9f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb832e7c886a720e0aa847ffd8500621a3152d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb832e7c886a720e0aa847ffd8500621a3152d5", "html_url": "https://github.com/rust-lang/rust/commit/bfb832e7c886a720e0aa847ffd8500621a3152d5"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "ae78f697851059ee602494d662e2a8c2df9e1350", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/85a12095708850031cf9962e2bbd8cb9f4920d9f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a12095708850031cf9962e2bbd8cb9f4920d9f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=85a12095708850031cf9962e2bbd8cb9f4920d9f", "patch": "@@ -168,7 +168,7 @@ impl<'a> NameResolution<'a> {\n \n     // Returns Some(the resolution of the name), or None if the resolution depends\n     // on whether more globs can define the name.\n-    fn try_result(&self, allow_private_imports: bool)\n+    fn try_result(&self, ns: Namespace, allow_private_imports: bool)\n                   -> Option<ResolveResult<&'a NameBinding<'a>>> {\n         match self.binding {\n             Some(binding) if !binding.defined_with(DefModifiers::GLOB_IMPORTED) =>\n@@ -189,7 +189,18 @@ impl<'a> NameResolution<'a> {\n                     return None;\n                 }\n \n-                return Indeterminate;\n+                let target_module = match directive.target_module.get() {\n+                    Some(target_module) => target_module,\n+                    None => return Some(Indeterminate),\n+                };\n+                let name = match directive.subclass {\n+                    SingleImport { source, target, .. } if source == target => target,\n+                    _ => return Some(Indeterminate),\n+                };\n+                match target_module.resolve_name(name, ns, false) {\n+                    Failed(_) => {}\n+                    _ => return Some(Indeterminate),\n+                }\n             }\n         }\n \n@@ -224,7 +235,7 @@ impl<'a> ::ModuleS<'a> {\n         };\n \n         let resolution = resolutions.get(&(name, ns)).cloned().unwrap_or_default();\n-        if let Some(result) = resolution.try_result(allow_private_imports) {\n+        if let Some(result) = resolution.try_result(ns, allow_private_imports) {\n             // If the resolution doesn't depend on glob definability, check privacy and return.\n             return result.and_then(|binding| {\n                 let allowed = allow_private_imports || !binding.is_import() || binding.is_public();\n@@ -483,27 +494,12 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         };\n \n         // We need to resolve both namespaces for this to succeed.\n-        let module_ = self.resolver.current_module;\n-        let (value_result, type_result) = {\n-            let mut resolve_in_ns = |ns, determined: bool| {\n-                // Temporarily count the directive as determined so that the resolution fails\n-                // (as opposed to being indeterminate) when it can only be defined by the directive.\n-                if !determined {\n-                    module_.resolutions.borrow_mut().get_mut(&(target, ns)).unwrap()\n-                           .single_imports.directive_failed();\n-                }\n-                let result =\n-                    self.resolver.resolve_name_in_module(target_module, source, ns, false, true);\n-                if !determined {\n-                    module_.resolutions.borrow_mut().get_mut(&(target, ns)).unwrap()\n-                           .single_imports.add_directive(directive);\n-                }\n-                result\n-            };\n-            (resolve_in_ns(ValueNS, value_determined.get()),\n-             resolve_in_ns(TypeNS, type_determined.get()))\n-        };\n+        let value_result =\n+            self.resolver.resolve_name_in_module(target_module, source, ValueNS, false, true);\n+        let type_result =\n+            self.resolver.resolve_name_in_module(target_module, source, TypeNS, false, true);\n \n+        let module_ = self.resolver.current_module;\n         for &(ns, result, determined) in &[(ValueNS, &value_result, value_determined),\n                                            (TypeNS, &type_result, type_determined)] {\n             if determined.get() { continue }"}]}