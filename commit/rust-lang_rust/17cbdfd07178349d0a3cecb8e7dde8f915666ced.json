{"sha": "17cbdfd07178349d0a3cecb8e7dde8f915666ced", "node_id": "C_kwDOAAsO6NoAKDE3Y2JkZmQwNzE3ODM0OWQwYTNjZWNiOGU3ZGRlOGY5MTU2NjZjZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T21:05:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T21:05:21Z"}, "message": "Auto merge of #101777 - matthiaskrgr:rollup-x2dyaa2, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #101266 (translations(rustc_session): migrates rustc_session to use SessionDiagnostic - Final)\n - #101737 (rustdoc: remove no-op CSS `.search-results .result-name > span`)\n - #101752 (Improve Attribute doc methods)\n - #101754 (Fix doc of log function)\n - #101759 (:arrow_up: rust-analyzer)\n - #101765 (Add documentation for TyCtxt::visibility)\n - #101770 (Rustdoc-Json: Don't loose subitems of foreign traits.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c873d712775ce17d869b73d02f2eecc649519c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c873d712775ce17d869b73d02f2eecc649519c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17cbdfd07178349d0a3cecb8e7dde8f915666ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17cbdfd07178349d0a3cecb8e7dde8f915666ced", "html_url": "https://github.com/rust-lang/rust/commit/17cbdfd07178349d0a3cecb8e7dde8f915666ced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17cbdfd07178349d0a3cecb8e7dde8f915666ced/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84083b08e2db69fcf270c4045837fa02663a3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84083b08e2db69fcf270c4045837fa02663a3bf", "html_url": "https://github.com/rust-lang/rust/commit/c84083b08e2db69fcf270c4045837fa02663a3bf"}, {"sha": "f04eee11578b31b0618e854873c21ce5c453f52c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04eee11578b31b0618e854873c21ce5c453f52c", "html_url": "https://github.com/rust-lang/rust/commit/f04eee11578b31b0618e854873c21ce5c453f52c"}], "stats": {"total": 880, "additions": 699, "deletions": 181}, "files": [{"sha": "28198e69bff8f91f8c9abc30ca9afd5bc41da68e", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -232,14 +232,20 @@ impl AttrItem {\n \n impl Attribute {\n     /// Returns `true` if it is a sugared doc comment (`///` or `//!` for example).\n-    /// So `#[doc = \"doc\"]` will return `false`.\n+    /// So `#[doc = \"doc\"]` (which is a doc comment) and `#[doc(...)]` (which is not\n+    /// a doc comment) will return `false`.\n     pub fn is_doc_comment(&self) -> bool {\n         match self.kind {\n             AttrKind::Normal(..) => false,\n             AttrKind::DocComment(..) => true,\n         }\n     }\n \n+    /// Returns the documentation and its kind if this is a doc comment or a sugared doc comment.\n+    /// * `///doc` returns `Some((\"doc\", CommentKind::Line))`.\n+    /// * `/** doc */` returns `Some((\"doc\", CommentKind::Block))`.\n+    /// * `#[doc = \"doc\"]` returns `Some((\"doc\", CommentKind::Line))`.\n+    /// * `#[doc(...)]` returns `None`.\n     pub fn doc_str_and_comment_kind(&self) -> Option<(Symbol, CommentKind)> {\n         match self.kind {\n             AttrKind::DocComment(kind, data) => Some((data, kind)),\n@@ -252,6 +258,10 @@ impl Attribute {\n         }\n     }\n \n+    /// Returns the documentation if this is a doc comment or a sugared doc comment.\n+    /// * `///doc` returns `Some(\"doc\")`.\n+    /// * `#[doc = \"doc\"]` returns `Some(\"doc\")`.\n+    /// * `#[doc(...)]` returns `None`.\n     pub fn doc_str(&self) -> Option<Symbol> {\n         match self.kind {\n             AttrKind::DocComment(.., data) => Some(data),"}, {"sha": "76cae3c81e45182d192b23a5cc636402e93f060f", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -56,3 +56,13 @@ session_target_invalid_bits_size = {$err}\n session_target_stack_protector_not_supported = `-Z stack-protector={$stack_protector}` is not supported for target {$target_triple} and will be ignored\n \n session_split_debuginfo_unstable_platform = `-Csplit-debuginfo={$debuginfo}` is unstable on this platform\n+\n+session_file_is_not_writeable = output file {$file} is not writeable -- check its permissions\n+\n+session_crate_name_does_not_match = `--crate-name` and `#[crate_name]` are required to match, but `{$s}` != `{$name}`\n+\n+session_crate_name_invalid = crate names cannot start with a `-`, but `{$s}` has a leading hyphen\n+\n+session_crate_name_empty = crate name must not be empty\n+\n+session_invalid_character_in_create_name = invalid character `{$character}` in crate name: `{$crate_name}`"}, {"sha": "c36ca11fad6f214ea43a0216f6db5c4fb2d3d847", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -13,9 +13,9 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_target = { path = \"../rustc_target\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n-rustc_target = { path = \"../rustc_target\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\"\n termcolor = \"1.0\""}, {"sha": "0fe22a26cd503f343f114dd3750d6ac8f693acfe", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1611,6 +1611,16 @@ rustc_queries! {\n         desc { \"looking up late bound vars\" }\n     }\n \n+    /// Computes the visibility of the provided `def_id`.\n+    ///\n+    /// If the item from the `def_id` doesn't have a visibility, it will panic. For example\n+    /// a generic type parameter will panic if you call this method on it:\n+    ///\n+    /// ```\n+    /// pub trait Foo<T: Debug> {}\n+    /// ```\n+    ///\n+    /// In here, if you call `visibility` on `T`, it'll panic.\n     query visibility(def_id: DefId) -> ty::Visibility<DefId> {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern"}, {"sha": "c6596ff24989985294b8a8fd665db56fae011c18", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -2,7 +2,7 @@ use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n use crate::{self as rustc_session, SessionDiagnostic};\n-use rustc_errors::{fluent, DiagnosticBuilder, Handler, MultiSpan};\n+use rustc_errors::{fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, MultiSpan};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n@@ -170,3 +170,52 @@ pub struct StackProtectorNotSupportedForTarget<'a> {\n pub struct SplitDebugInfoUnstablePlatform {\n     pub debuginfo: SplitDebuginfo,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::file_is_not_writeable)]\n+pub struct FileIsNotWriteable<'a> {\n+    pub file: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_does_not_match)]\n+pub struct CrateNameDoesNotMatch<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub s: &'a str,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_invalid)]\n+pub struct CrateNameInvalid<'a> {\n+    pub s: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_empty)]\n+pub struct CrateNameEmpty {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+}\n+\n+pub struct InvalidCharacterInCrateName<'a> {\n+    pub span: Option<Span>,\n+    pub character: char,\n+    pub crate_name: &'a str,\n+}\n+\n+impl crate::SessionDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n+    fn into_diagnostic(\n+        self,\n+        sess: &Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n+        if let Some(sp) = self.span {\n+            diag.set_span(sp);\n+        }\n+        diag.set_arg(\"character\", self.character);\n+        diag.set_arg(\"crate_name\", self.crate_name);\n+        diag\n+    }\n+}"}, {"sha": "b9b243f6f0840f63e2da85cea10a8327e1ed0f42", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -9,6 +9,8 @@\n #![feature(map_many_mut)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "2511bee46afebef62d59842f74d192194346a3af", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1,5 +1,9 @@\n //! Related to out filenames of compilation (e.g. save analysis, binaries).\n use crate::config::{CrateType, Input, OutputFilenames, OutputType};\n+use crate::errors::{\n+    CrateNameDoesNotMatch, CrateNameEmpty, CrateNameInvalid, FileIsNotWriteable,\n+    InvalidCharacterInCrateName,\n+};\n use crate::Session;\n use rustc_ast as ast;\n use rustc_span::symbol::sym;\n@@ -30,11 +34,7 @@ pub fn out_filename(\n /// read-only file.  We should be consistent.\n pub fn check_file_is_writeable(file: &Path, sess: &Session) {\n     if !is_writeable(file) {\n-        sess.fatal(&format!(\n-            \"output file {} is not writeable -- check its \\\n-                            permissions\",\n-            file.display()\n-        ));\n+        sess.emit_fatal(FileIsNotWriteable { file });\n     }\n }\n \n@@ -61,11 +61,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Some(ref s) = sess.opts.crate_name {\n         if let Some((attr, name)) = attr_crate_name {\n             if name.as_str() != s {\n-                let msg = format!(\n-                    \"`--crate-name` and `#[crate_name]` are \\\n-                                   required to match, but `{s}` != `{name}`\"\n-                );\n-                sess.span_err(attr.span, &msg);\n+                sess.emit_err(CrateNameDoesNotMatch { span: attr.span, s, name });\n             }\n         }\n         return validate(s.clone(), None);\n@@ -77,11 +73,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n-                let msg = format!(\n-                    \"crate names cannot start with a `-`, but \\\n-                                   `{s}` has a leading hyphen\"\n-                );\n-                sess.err(&msg);\n+                sess.emit_err(CrateNameInvalid { s });\n             } else {\n                 return validate(s.replace('-', \"_\"), None);\n             }\n@@ -94,15 +86,9 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n     let mut err_count = 0;\n     {\n-        let mut say = |s: &str| {\n-            match sp {\n-                Some(sp) => sess.span_err(sp, s),\n-                None => sess.err(s),\n-            };\n-            err_count += 1;\n-        };\n         if s.is_empty() {\n-            say(\"crate name must not be empty\");\n+            err_count += 1;\n+            sess.emit_err(CrateNameEmpty { span: sp });\n         }\n         for c in s.chars() {\n             if c.is_alphanumeric() {\n@@ -111,7 +97,8 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n             if c == '_' {\n                 continue;\n             }\n-            say(&format!(\"invalid character `{c}` in crate name: `{s}`\"));\n+            err_count += 1;\n+            sess.emit_err(InvalidCharacterInCrateName { span: sp, character: c, crate_name: s });\n         }\n     }\n "}, {"sha": "a001f87db00c63fa472a07fde2897b8f28dd659c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -297,6 +297,8 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -305,6 +307,8 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -314,6 +318,8 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -323,10 +329,14 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -335,6 +345,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -343,10 +355,14 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -355,6 +371,8 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -363,6 +381,8 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -373,13 +393,17 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -388,6 +412,8 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -396,6 +422,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -404,6 +432,8 @@ impl Session {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -413,15 +443,21 @@ impl Session {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -431,10 +467,14 @@ impl Session {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -448,6 +488,8 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -456,6 +498,8 @@ impl Session {\n         self.diagnostic().span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "46fd7f2d0e493ac6f4646756d51e637700d2376f", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -688,7 +688,7 @@ macro_rules! uint_impl {\n         /// rounded down.\n         ///\n         /// This method might not be optimized owing to implementation details;\n-        /// `log2` can produce results more efficiently for base 2, and `log10`\n+        /// `ilog2` can produce results more efficiently for base 2, and `ilog10`\n         /// can produce results more efficiently for base 10.\n         ///\n         /// # Panics"}, {"sha": "0026c4cbdca2ce609a64d5df04f02c3680bb1d33", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -49,6 +49,8 @@ def check_generic_param(param):\n         ty = param[\"kind\"][\"type\"]\n         if ty[\"default\"]:\n             check_type(ty[\"default\"])\n+        for bound in ty[\"bounds\"]:\n+            check_generic_bound(bound)\n     elif \"const\" in param[\"kind\"]:\n         check_type(param[\"kind\"][\"const\"])\n \n@@ -88,8 +90,11 @@ def check_path(path):\n                 check_type(input_ty)\n             if args[\"parenthesized\"][\"output\"]:\n                 check_type(args[\"parenthesized\"][\"output\"])\n-    if not valid_id(path[\"id\"]):\n-        print(\"Type contained an invalid ID:\", path[\"id\"])\n+\n+    if path[\"id\"] in crate[\"index\"]:\n+        work_list.add(path[\"id\"])\n+    elif path[\"id\"] not in crate[\"paths\"]:\n+        print(\"Id not in index or paths:\", path[\"id\"])\n         sys.exit(1)\n \n def check_type(ty):"}, {"sha": "600e7cf3a0bed17b45b3e2f3f94ef7d85d8418ca", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -986,12 +986,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tpadding-right: 1em;\n }\n \n-.search-results .result-name > span {\n-\tdisplay: inline-block;\n-\tmargin: 0;\n-\tfont-weight: normal;\n-}\n-\n .popover {\n \tfont-size: 1rem;\n \tposition: absolute;"}, {"sha": "5e8f5f6fe3eb9309820afbf700f1c617928aeb8d", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -101,6 +101,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n     }\n \n     fn get_trait_items(&mut self) -> Vec<(types::Id, types::Item)> {\n+        debug!(\"Adding foreign trait items\");\n         Rc::clone(&self.cache)\n             .traits\n             .iter()\n@@ -109,6 +110,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                 if !id.is_local() {\n                     let trait_item = &trait_item.trait_;\n                     for item in &trait_item.items {\n+                        trace!(\"Adding subitem to {id:?}: {:?}\", item.item_id);\n                         self.item(item.clone()).unwrap();\n                     }\n                     let item_id = from_item_id(id.into(), self.tcx);\n@@ -184,7 +186,9 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     /// the hashmap because certain items (traits and types) need to have their mappings for trait\n     /// implementations filled out before they're inserted.\n     fn item(&mut self, item: clean::Item) -> Result<(), Error> {\n-        trace!(\"rendering {} {:?}\", item.type_(), item.name);\n+        let item_type = item.type_();\n+        let item_name = item.name;\n+        trace!(\"rendering {} {:?}\", item_type, item_name);\n \n         // Flatten items that recursively store other items. We include orphaned items from\n         // stripped modules and etc that are otherwise reachable.\n@@ -253,6 +257,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             }\n         }\n \n+        trace!(\"done rendering {} {:?}\", item_type, item_name);\n         Ok(())\n     }\n \n@@ -263,14 +268,20 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     fn after_krate(&mut self) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n \n+        debug!(\"Adding Primitve impls\");\n         for primitive in Rc::clone(&self.cache).primitive_locations.values() {\n             self.get_impls(*primitive);\n         }\n \n         let e = ExternalCrate { crate_num: LOCAL_CRATE };\n \n+        // FIXME(adotinthevoid): Remove this, as it's not consistant with not\n+        // inlining foreign items.\n+        let foreign_trait_items = self.get_trait_items();\n         let mut index = (*self.index).clone().into_inner();\n-        index.extend(self.get_trait_items());\n+        index.extend(foreign_trait_items);\n+\n+        debug!(\"Constructing Output\");\n         // This needs to be the default HashMap for compatibility with the public interface for\n         // rustdoc-json-types\n         #[allow(rustc::default_hash_types)]"}, {"sha": "efbbfb925bd3bf1cf29a21978f034a29e913c359", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -13,6 +13,9 @@ size: (600, 100)\n // when computed it's larger.\n assert-css: (\".search-results div.desc\", {\"width\": \"566px\"})\n \n+// The result set is all on one line.\n+assert-css: (\".search-results .result-name > span\", {\"display\": \"inline\"})\n+\n // Check that the crate filter `<select>` is correctly handled when it goes to next line.\n // To do so we need to update the length of one of its `<option>`.\n size: (900, 900)"}, {"sha": "430dd1543f56180cc75bb4d6d77ee91e43240a89", "filename": "src/test/rustdoc-json/traits/uses_extern_trait.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -0,0 +1,7 @@\n+#![no_std]\n+pub fn drop_default<T: core::default::Default>(_x: T) {}\n+\n+// FIXME(adotinthevoid): Theses shouldn't be here\n+// @has \"$.index[*][?(@.name=='Debug')]\"\n+// @set Debug_fmt = \"$.index[*][?(@.name=='Debug')].inner.items[*]\"\n+// @has \"$.index[*][?(@.name=='fmt')].id\" $Debug_fmt"}, {"sha": "f4d472e3d5c1dc5f6382685f66d8a35193d288b8", "filename": "src/tools/rust-analyzer/.github/workflows/release.yaml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2F.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2F.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2F.github%2Fworkflows%2Frelease.yaml?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -34,6 +34,7 @@ jobs:\n           - os: ubuntu-20.04\n             target: x86_64-unknown-linux-gnu\n             code-target: linux-x64\n+            container: ubuntu:18.04\n           - os: ubuntu-20.04\n             target: aarch64-unknown-linux-gnu\n             code-target: linux-arm64\n@@ -49,6 +50,7 @@ jobs:\n \n     name: dist (${{ matrix.target }})\n     runs-on: ${{ matrix.os }}\n+    container: ${{ matrix.container }}\n \n     env:\n       RA_TARGET: ${{ matrix.target }}\n@@ -59,6 +61,14 @@ jobs:\n         with:\n           fetch-depth: ${{ env.FETCH_DEPTH }}\n \n+      - name: Install toolchain dependencies\n+        if: matrix.container == 'ubuntu:18.04'\n+        shell: bash\n+        run: |\n+          apt-get update && apt-get install -y build-essential curl\n+          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --profile minimal --default-toolchain none -y\n+          echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\n+\n       - name: Install Rust toolchain\n         run: |\n           rustup update --no-self-update stable"}, {"sha": "4a5533c6487e48361dd1a94943f7e917c384821e", "filename": "src/tools/rust-analyzer/crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -164,6 +164,8 @@ impl TyExt for Ty {\n \n     fn dyn_trait(&self) -> Option<TraitId> {\n         let trait_ref = match self.kind(Interner) {\n+            // The principal trait bound should be the first element of the bounds. This is an\n+            // invariant ensured by `TyLoweringContext::lower_dyn_trait()`.\n             TyKind::Dyn(dyn_ty) => dyn_ty.bounds.skip_binders().interned().get(0).and_then(|b| {\n                 match b.skip_binders() {\n                     WhereClause::Implemented(trait_ref) => Some(trait_ref),"}, {"sha": "532544fee595c51eee1680627a70cbfe327a7a01", "filename": "src/tools/rust-analyzer/crates/hir-ty/src/lower.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Flower.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -981,43 +981,72 @@ impl<'a> TyLoweringContext<'a> {\n \n     fn lower_dyn_trait(&self, bounds: &[Interned<TypeBound>]) -> Ty {\n         let self_ty = TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(Interner);\n+        // INVARIANT: The principal trait bound must come first. Others may be in any order but\n+        // should be in the same order for the same set but possibly different order of bounds in\n+        // the input.\n+        // This invariant is used by `TyExt::dyn_trait()` and chalk.\n         let bounds = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-            let bounds =\n-                bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false));\n-\n-            let mut auto_traits = SmallVec::<[_; 8]>::new();\n-            let mut regular_traits = SmallVec::<[_; 2]>::new();\n-            let mut other_bounds = SmallVec::<[_; 8]>::new();\n-            for bound in bounds {\n-                if let Some(id) = bound.trait_id() {\n-                    if ctx.db.trait_data(from_chalk_trait_id(id)).is_auto {\n-                        auto_traits.push(bound);\n-                    } else {\n-                        regular_traits.push(bound);\n+            let mut bounds: Vec<_> = bounds\n+                .iter()\n+                .flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false))\n+                .collect();\n+\n+            let mut multiple_regular_traits = false;\n+            let mut multiple_same_projection = false;\n+            bounds.sort_unstable_by(|lhs, rhs| {\n+                use std::cmp::Ordering;\n+                match (lhs.skip_binders(), rhs.skip_binders()) {\n+                    (WhereClause::Implemented(lhs), WhereClause::Implemented(rhs)) => {\n+                        let lhs_id = lhs.trait_id;\n+                        let lhs_is_auto = ctx.db.trait_data(from_chalk_trait_id(lhs_id)).is_auto;\n+                        let rhs_id = rhs.trait_id;\n+                        let rhs_is_auto = ctx.db.trait_data(from_chalk_trait_id(rhs_id)).is_auto;\n+\n+                        if !lhs_is_auto && !rhs_is_auto {\n+                            multiple_regular_traits = true;\n+                        }\n+                        // Note that the ordering here is important; this ensures the invariant\n+                        // mentioned above.\n+                        (lhs_is_auto, lhs_id).cmp(&(rhs_is_auto, rhs_id))\n                     }\n-                } else {\n-                    other_bounds.push(bound);\n+                    (WhereClause::Implemented(_), _) => Ordering::Less,\n+                    (_, WhereClause::Implemented(_)) => Ordering::Greater,\n+                    (WhereClause::AliasEq(lhs), WhereClause::AliasEq(rhs)) => {\n+                        match (&lhs.alias, &rhs.alias) {\n+                            (AliasTy::Projection(lhs_proj), AliasTy::Projection(rhs_proj)) => {\n+                                // We only compare the `associated_ty_id`s. We shouldn't have\n+                                // multiple bounds for an associated type in the correct Rust code,\n+                                // and if we do, we error out.\n+                                if lhs_proj.associated_ty_id == rhs_proj.associated_ty_id {\n+                                    multiple_same_projection = true;\n+                                }\n+                                lhs_proj.associated_ty_id.cmp(&rhs_proj.associated_ty_id)\n+                            }\n+                            // We don't produce `AliasTy::Opaque`s yet.\n+                            _ => unreachable!(),\n+                        }\n+                    }\n+                    // We don't produce `WhereClause::{TypeOutlives, LifetimeOutlives}` yet.\n+                    _ => unreachable!(),\n                 }\n-            }\n+            });\n \n-            if regular_traits.len() > 1 {\n+            if multiple_regular_traits || multiple_same_projection {\n                 return None;\n             }\n \n-            auto_traits.sort_unstable_by_key(|b| b.trait_id().unwrap());\n-            auto_traits.dedup();\n+            // As multiple occurrences of the same auto traits *are* permitted, we dedulicate the\n+            // bounds. We shouldn't have repeated elements besides auto traits at this point.\n+            bounds.dedup();\n \n-            Some(QuantifiedWhereClauses::from_iter(\n-                Interner,\n-                regular_traits.into_iter().chain(other_bounds).chain(auto_traits),\n-            ))\n+            Some(QuantifiedWhereClauses::from_iter(Interner, bounds))\n         });\n \n         if let Some(bounds) = bounds {\n             let bounds = crate::make_single_type_binders(bounds);\n             TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(Interner)\n         } else {\n-            // FIXME: report error (additional non-auto traits)\n+            // FIXME: report error (additional non-auto traits or associated type rebound)\n             TyKind::Error.intern(Interner)\n         }\n     }"}, {"sha": "21a86319763fc1d78212c1aef02e9f9e22878918", "filename": "src/tools/rust-analyzer/crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -3900,6 +3900,34 @@ fn g(t: &(dyn Sync + T<Proj = ()> + Send)) {\n     );\n }\n \n+#[test]\n+fn dyn_multiple_projection_bounds() {\n+    check_no_mismatches(\n+        r#\"\n+trait Trait {\n+    type T;\n+    type U;\n+}\n+\n+fn f(t: &dyn Trait<T = (), U = ()>) {}\n+fn g(t: &dyn Trait<U = (), T = ()>) {\n+    f(t);\n+}\n+        \"#,\n+    );\n+\n+    check_types(\n+        r#\"\n+trait Trait {\n+    type T;\n+}\n+\n+fn f(t: &dyn Trait<T = (), T = ()>) {}\n+   //^&{unknown}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn dyn_duplicate_auto_trait() {\n     check_no_mismatches("}, {"sha": "1a7919a5a104d64ca22c3e6b09392ea5670587be", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -5,6 +5,7 @@ use hir::{Adt, Crate, HasAttrs, HasSource, ModuleDef, Semantics};\n use ide_db::RootDatabase;\n use ide_db::{famous_defs::FamousDefs, helpers::mod_path_to_ast};\n use itertools::Itertools;\n+use syntax::ast::edit_in_place::Removable;\n use syntax::ast::{self, make, AstNode, HasName, MatchArmList, MatchExpr, Pat};\n \n use crate::{"}, {"sha": "9f51cdaf8b1eb0d7eccc6ae154ec038f5118504c", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -7,6 +7,7 @@ use ide_db::{\n     imports::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n+    source_change::SourceChangeBuilder,\n     syntax_helpers::{insert_whitespace_into_node::insert_ws_into, node_ext::expr_as_name_ref},\n     RootDatabase,\n };\n@@ -100,18 +101,7 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                 builder.edit_file(file_id);\n                 let count = refs.len();\n                 // The collects are required as we are otherwise iterating while mutating \ud83d\ude45\u200d\u2640\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\n-                let (name_refs, name_refs_use): (Vec<_>, Vec<_>) = refs\n-                    .into_iter()\n-                    .filter_map(|file_ref| match file_ref.name {\n-                        ast::NameLike::NameRef(name_ref) => Some(name_ref),\n-                        _ => None,\n-                    })\n-                    .partition_map(|name_ref| {\n-                        match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n-                            Some(use_tree) => Either::Right(builder.make_mut(use_tree)),\n-                            None => Either::Left(name_ref),\n-                        }\n-                    });\n+                let (name_refs, name_refs_use) = split_refs_and_uses(builder, refs, Some);\n                 let call_infos: Vec<_> = name_refs\n                     .into_iter()\n                     .filter_map(CallInfo::from_name_ref)\n@@ -130,11 +120,7 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                     .count();\n                 if replaced + name_refs_use.len() == count {\n                     // we replaced all usages in this file, so we can remove the imports\n-                    name_refs_use.into_iter().for_each(|use_tree| {\n-                        if let Some(path) = use_tree.path() {\n-                            remove_path_if_in_use_stmt(&path);\n-                        }\n-                    })\n+                    name_refs_use.iter().for_each(remove_path_if_in_use_stmt);\n                 } else {\n                     remove_def = false;\n                 }\n@@ -153,6 +139,23 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     )\n }\n \n+pub(super) fn split_refs_and_uses<T: ast::AstNode>(\n+    builder: &mut SourceChangeBuilder,\n+    iter: impl IntoIterator<Item = FileReference>,\n+    mut map_ref: impl FnMut(ast::NameRef) -> Option<T>,\n+) -> (Vec<T>, Vec<ast::Path>) {\n+    iter.into_iter()\n+        .filter_map(|file_ref| match file_ref.name {\n+            ast::NameLike::NameRef(name_ref) => Some(name_ref),\n+            _ => None,\n+        })\n+        .filter_map(|name_ref| match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n+            Some(use_tree) => builder.make_mut(use_tree).path().map(Either::Right),\n+            None => map_ref(name_ref).map(Either::Left),\n+        })\n+        .partition_map(|either| either)\n+}\n+\n // Assist: inline_call\n //\n // Inlines a function or method body creating a `let` statement per parameter unless the parameter"}, {"sha": "353d467ed19f3bb9c49d1b45e6b5a6fdfb8fcd3a", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -3,7 +3,10 @@\n // - Remove unused aliases if there are no longer any users, see inline_call.rs.\n \n use hir::{HasSource, PathResolution};\n-use ide_db::{defs::Definition, search::FileReference};\n+use ide_db::{\n+    defs::Definition, imports::insert_use::ast_to_remove_for_path_in_use_stmt,\n+    search::FileReference,\n+};\n use itertools::Itertools;\n use std::collections::HashMap;\n use syntax::{\n@@ -16,6 +19,8 @@ use crate::{\n     AssistId, AssistKind,\n };\n \n+use super::inline_call::split_refs_and_uses;\n+\n // Assist: inline_type_alias_uses\n //\n // Inline a type alias into all of its uses where possible.\n@@ -31,7 +36,7 @@ use crate::{\n // ```\n // ->\n // ```\n-// type A = i32;\n+//\n // fn id(x: i32) -> i32 {\n //     x\n // };\n@@ -58,32 +63,41 @@ pub(crate) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>)\n         name.syntax().text_range(),\n         |builder| {\n             let usages = usages.all();\n+            let mut definition_deleted = false;\n \n             let mut inline_refs_for_file = |file_id, refs: Vec<FileReference>| {\n                 builder.edit_file(file_id);\n \n-                let path_types: Vec<ast::PathType> = refs\n-                    .into_iter()\n-                    .filter_map(|file_ref| match file_ref.name {\n-                        ast::NameLike::NameRef(path_type) => {\n-                            path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n-                        }\n-                        _ => None,\n-                    })\n-                    .collect();\n+                let (path_types, path_type_uses) =\n+                    split_refs_and_uses(builder, refs, |path_type| {\n+                        path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n+                    });\n \n+                path_type_uses\n+                    .iter()\n+                    .flat_map(ast_to_remove_for_path_in_use_stmt)\n+                    .for_each(|x| builder.delete(x.syntax().text_range()));\n                 for (target, replacement) in path_types.into_iter().filter_map(|path_type| {\n                     let replacement = inline(&ast_alias, &path_type)?.to_text(&concrete_type);\n                     let target = path_type.syntax().text_range();\n                     Some((target, replacement))\n                 }) {\n                     builder.replace(target, replacement);\n                 }\n+\n+                if file_id == ctx.file_id() {\n+                    builder.delete(ast_alias.syntax().text_range());\n+                    definition_deleted = true;\n+                }\n             };\n \n             for (file_id, refs) in usages.into_iter() {\n                 inline_refs_for_file(file_id, refs);\n             }\n+            if !definition_deleted {\n+                builder.edit_file(ctx.file_id());\n+                builder.delete(ast_alias.syntax().text_range());\n+            }\n         },\n     )\n }\n@@ -929,7 +943,7 @@ fn foo() {\n }\n \"#,\n                 r#\"\n-type A = u32;\n+\n \n fn foo() {\n     let _: u32 = 3;\n@@ -960,13 +974,13 @@ fn foo() {\n                 r#\"\n //- /lib.rs\n mod foo;\n-type T<E> = Vec<E>;\n+\n fn f() -> Vec<&str> {\n     vec![\"hello\"]\n }\n \n //- /foo.rs\n-use super::T;\n+\n fn foo() {\n     let _: Vec<i8> = Vec::new();\n }\n@@ -990,7 +1004,12 @@ fn foo() {\n }\n \"#,\n                 r#\"\n-use super::I;\n+//- /lib.rs\n+mod foo;\n+\n+\n+//- /foo.rs\n+\n fn foo() {\n     let _: i32 = 0;\n }"}, {"sha": "2bdbec93b1f960a211e657f43a5948eca0796b86", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1,6 +1,10 @@\n use either::Either;\n use ide_db::imports::merge_imports::{try_merge_imports, try_merge_trees, MergeBehavior};\n-use syntax::{algo::neighbor, ast, match_ast, ted, AstNode, SyntaxElement, SyntaxNode};\n+use syntax::{\n+    algo::neighbor,\n+    ast::{self, edit_in_place::Removable},\n+    match_ast, ted, AstNode, SyntaxElement, SyntaxNode,\n+};\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -76,7 +80,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n                 .collect();\n             for edit in edits_mut {\n                 match edit {\n-                    Remove(it) => it.as_ref().either(ast::Use::remove, ast::UseTree::remove),\n+                    Remove(it) => it.as_ref().either(Removable::remove, Removable::remove),\n                     Replace(old, new) => ted::replace(old, new),\n                 }\n             }"}, {"sha": "1dd376ac3fd5350db8fc7fd5b696c27b968db081", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1,5 +1,9 @@\n use syntax::{\n-    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode, HasName, HasTypeBounds},\n+    ast::{\n+        self,\n+        edit_in_place::{GenericParamsOwnerEdit, Removable},\n+        make, AstNode, HasName, HasTypeBounds,\n+    },\n     match_ast,\n };\n "}, {"sha": "dac216b69b727a62646ec192031fa83aa50793b0", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, make, HasVisibility},\n+    ast::{self, edit_in_place::Removable, make, HasVisibility},\n     ted::{self, Position},\n     AstNode, SyntaxKind,\n };"}, {"sha": "227e2300f92a0b258275512adca9fcadfc51f23a", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1390,7 +1390,7 @@ fn foo() {\n }\n \"#####,\n         r#####\"\n-type A = i32;\n+\n fn id(x: i32) -> i32 {\n     x\n };"}, {"sha": "4ab6e2627fa75413837b55be578c1a237a4147c3", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Futils.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{self, AstNodeEdit},\n-        edit_in_place::AttrsOwnerEdit,\n+        edit_in_place::{AttrsOwnerEdit, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n     ted, AstNode, AstToken, Direction, SmolStr, SourceFile,"}, {"sha": "950731eb4ca8c880dc1c211d8da76aef60b80383", "filename": "src/tools/rust-analyzer/crates/ide-completion/src/completions/mod_.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -53,6 +53,7 @@ pub(crate) fn complete_mod(\n     let existing_mod_declarations = current_module\n         .children(ctx.db)\n         .filter_map(|module| Some(module.name(ctx.db)?.to_string()))\n+        .filter(|module| module != ctx.original_token.text())\n         .collect::<FxHashSet<_>>();\n \n     let module_declaration_file =\n@@ -351,4 +352,23 @@ fn ignored_bar() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn semi_colon_completion() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+mod bar {\n+    mod baz$0\n+}\n+//- /foo/bar/baz.rs\n+fn baz() {}\n+\"#,\n+            expect![[r#\"\n+                md baz;\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "8e26d889f9b63c8ce28ffe210da9a433aa6c126a", "filename": "src/tools/rust-analyzer/crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -671,6 +671,45 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn varaiant_with_struct() {\n+    check_empty(\n+        r#\"\n+pub struct YoloVariant {\n+    pub f: usize\n+}\n+\n+pub enum HH {\n+    Yolo(YoloVariant),\n+}\n+\n+fn brr() {\n+    let t = HH::Yolo(Y$0);\n+}\n+\"#,\n+        expect![[r#\"\n+            en HH\n+            fn brr()           fn()\n+            st YoloVariant\n+            st YoloVariant {\u2026} YoloVariant { f: usize }\n+            bt u32\n+            kw crate::\n+            kw false\n+            kw for\n+            kw if\n+            kw if let\n+            kw loop\n+            kw match\n+            kw return\n+            kw self::\n+            kw true\n+            kw unsafe\n+            kw while\n+            kw while let\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn return_unit_block() {\n     cov_mark::check!(return_unit_block);"}, {"sha": "7109c6fd188f58df18f7d283b02af6a7b3bbe140", "filename": "src/tools/rust-analyzer/crates/ide-db/src/active_parameter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Factive_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Factive_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Factive_parameter.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -12,7 +12,7 @@ use crate::RootDatabase;\n #[derive(Debug)]\n pub struct ActiveParameter {\n     pub ty: Type,\n-    pub pat: Either<ast::SelfParam, ast::Pat>,\n+    pub pat: Option<Either<ast::SelfParam, ast::Pat>>,\n }\n \n impl ActiveParameter {\n@@ -27,12 +27,12 @@ impl ActiveParameter {\n             return None;\n         }\n         let (pat, ty) = params.swap_remove(idx);\n-        pat.map(|pat| ActiveParameter { ty, pat })\n+        Some(ActiveParameter { ty, pat })\n     }\n \n     pub fn ident(&self) -> Option<ast::Name> {\n-        self.pat.as_ref().right().and_then(|param| match param {\n-            ast::Pat::IdentPat(ident) => ident.name(),\n+        self.pat.as_ref().and_then(|param| match param {\n+            Either::Right(ast::Pat::IdentPat(ident)) => ident.name(),\n             _ => None,\n         })\n     }"}, {"sha": "9be1d36634934a6405856ce820dc46989a85b13b", "filename": "src/tools/rust-analyzer/crates/ide-db/src/imports/insert_use.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -7,7 +7,10 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, HasAttrs, HasModuleItem, HasVisibility, PathSegmentKind},\n+    ast::{\n+        self, edit_in_place::Removable, make, AstNode, HasAttrs, HasModuleItem, HasVisibility,\n+        PathSegmentKind,\n+    },\n     ted, Direction, NodeOrToken, SyntaxKind, SyntaxNode,\n };\n \n@@ -192,20 +195,24 @@ pub fn insert_use(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n     insert_use_(scope, &path, cfg.group, use_item);\n }\n \n-pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+pub fn ast_to_remove_for_path_in_use_stmt(path: &ast::Path) -> Option<Box<dyn Removable>> {\n     // FIXME: improve this\n     if path.parent_path().is_some() {\n-        return;\n+        return None;\n     }\n-    if let Some(use_tree) = path.syntax().parent().and_then(ast::UseTree::cast) {\n-        if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n-            return;\n-        }\n-        if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n-            use_.remove();\n-            return;\n-        }\n-        use_tree.remove();\n+    let use_tree = path.syntax().parent().and_then(ast::UseTree::cast)?;\n+    if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n+        return None;\n+    }\n+    if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n+        return Some(Box::new(use_));\n+    }\n+    Some(Box::new(use_tree))\n+}\n+\n+pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+    if let Some(node) = ast_to_remove_for_path_in_use_stmt(path) {\n+        node.remove();\n     }\n }\n "}, {"sha": "8bc093a85a21bc6fa38211eab6ff2ae109121c04", "filename": "src/tools/rust-analyzer/crates/ide-db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -95,7 +95,7 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n             AS_KW | DYN_KW | IMPL_KW | CONST_KW => {\n                 mods.push(do_ws(after, tok));\n             }\n-            T![;] => {\n+            T![;] if is_next(|it| it != R_CURLY, true) => {\n                 if indent > 0 {\n                     mods.push(do_indent(after, tok, indent));\n                 }"}, {"sha": "c5c50d88dd28a5f7db15bd1931daf5d0d1185b83", "filename": "src/tools/rust-analyzer/crates/ide/src/hover/render.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -2,12 +2,13 @@\n use std::fmt::Display;\n \n use either::Either;\n-use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HirDisplay, Semantics, TypeInfo};\n+use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n     famous_defs::FamousDefs,\n     generated::lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n+    syntax_helpers::insert_whitespace_into_node,\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -350,10 +351,24 @@ pub(super) fn definition(\n             let body = it.eval(db);\n             match body {\n                 Ok(x) => Some(format!(\"{}\", x)),\n-                Err(_) => it.value(db).map(|x| format!(\"{}\", x)),\n+                Err(_) => {\n+                    let source = it.source(db)?;\n+                    let mut body = source.value.body()?.syntax().clone();\n+                    if source.file_id.is_macro() {\n+                        body = insert_whitespace_into_node::insert_ws_into(body);\n+                    }\n+                    Some(body.to_string())\n+                }\n+            }\n+        }),\n+        Definition::Static(it) => label_value_and_docs(db, it, |it| {\n+            let source = it.source(db)?;\n+            let mut body = source.value.body()?.syntax().clone();\n+            if source.file_id.is_macro() {\n+                body = insert_whitespace_into_node::insert_ws_into(body);\n             }\n+            Some(body.to_string())\n         }),\n-        Definition::Static(it) => label_value_and_docs(db, it, |it| it.value(db)),\n         Definition::Trait(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_docs(db, it),\n         Definition::BuiltinType(it) => {"}, {"sha": "4b8b47783d1269438341714a6a1866b94fa50d8a", "filename": "src/tools/rust-analyzer/crates/ide/src/hover/tests.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -5113,3 +5113,61 @@ fn f() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn static_const_macro_expanded_body() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => {\n+        pub const V: i8 = {\n+            let e = 123;\n+            f(e) // Prevent const eval from evaluating this constant, we want to print the body's code.\n+        };\n+    };\n+}\n+m!();\n+fn main() { $0V; }\n+\"#,\n+        expect![[r#\"\n+            *V*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub const V: i8 = {\n+              let e = 123;\n+              f(e)\n+            }\n+            ```\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => {\n+        pub static V: i8 = {\n+            let e = 123;\n+        };\n+    };\n+}\n+m!();\n+fn main() { $0V; }\n+\"#,\n+        expect![[r#\"\n+            *V*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub static V: i8 = {\n+              let e = 123;\n+            }\n+            ```\n+        \"#]],\n+    );\n+}"}, {"sha": "d1b1d2c331a513d3ca6a17d4de2609f672f6ed92", "filename": "src/tools/rust-analyzer/crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 146, "deletions": 36, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Finlay_hints.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use either::Either;\n use hir::{known, Callable, HasVisibility, HirDisplay, Mutability, Semantics, TypeInfo};\n use ide_db::{\n@@ -69,7 +71,7 @@ pub enum InlayKind {\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n-    pub label: String,\n+    pub label: InlayHintLabel,\n     pub tooltip: Option<InlayTooltip>,\n }\n \n@@ -80,6 +82,83 @@ pub enum InlayTooltip {\n     HoverOffset(FileId, TextSize),\n }\n \n+pub struct InlayHintLabel {\n+    pub parts: Vec<InlayHintLabelPart>,\n+}\n+\n+impl InlayHintLabel {\n+    pub fn as_simple_str(&self) -> Option<&str> {\n+        match &*self.parts {\n+            [part] => part.as_simple_str(),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn prepend_str(&mut self, s: &str) {\n+        match &mut *self.parts {\n+            [part, ..] if part.as_simple_str().is_some() => part.text = format!(\"{s}{}\", part.text),\n+            _ => self.parts.insert(0, InlayHintLabelPart { text: s.into(), linked_location: None }),\n+        }\n+    }\n+\n+    pub fn append_str(&mut self, s: &str) {\n+        match &mut *self.parts {\n+            [.., part] if part.as_simple_str().is_some() => part.text.push_str(s),\n+            _ => self.parts.push(InlayHintLabelPart { text: s.into(), linked_location: None }),\n+        }\n+    }\n+}\n+\n+impl From<String> for InlayHintLabel {\n+    fn from(s: String) -> Self {\n+        Self { parts: vec![InlayHintLabelPart { text: s, linked_location: None }] }\n+    }\n+}\n+\n+impl fmt::Display for InlayHintLabel {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.parts.iter().map(|part| &part.text).format(\"\"))\n+    }\n+}\n+\n+impl fmt::Debug for InlayHintLabel {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(&self.parts).finish()\n+    }\n+}\n+\n+pub struct InlayHintLabelPart {\n+    pub text: String,\n+    /// Source location represented by this label part. The client will use this to fetch the part's\n+    /// hover tooltip, and Ctrl+Clicking the label part will navigate to the definition the location\n+    /// refers to (not necessarily the location itself).\n+    /// When setting this, no tooltip must be set on the containing hint, or VS Code will display\n+    /// them both.\n+    pub linked_location: Option<FileRange>,\n+}\n+\n+impl InlayHintLabelPart {\n+    pub fn as_simple_str(&self) -> Option<&str> {\n+        match self {\n+            Self { text, linked_location: None } => Some(text),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl fmt::Debug for InlayHintLabelPart {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.as_simple_str() {\n+            Some(string) => string.fmt(f),\n+            None => f\n+                .debug_struct(\"InlayHintLabelPart\")\n+                .field(\"text\", &self.text)\n+                .field(\"linked_location\", &self.linked_location)\n+                .finish(),\n+        }\n+    }\n+}\n+\n // Feature: Inlay Hints\n //\n // rust-analyzer shows additional information inline with the source code.\n@@ -192,10 +271,10 @@ fn closing_brace_hints(\n ) -> Option<()> {\n     let min_lines = config.closing_brace_hints_min_lines?;\n \n-    let name = |it: ast::Name| it.syntax().text_range().start();\n+    let name = |it: ast::Name| it.syntax().text_range();\n \n     let mut closing_token;\n-    let (label, name_offset) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n+    let (label, name_range) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n         closing_token = item_list.r_curly_token()?;\n \n         let parent = item_list.syntax().parent()?;\n@@ -205,11 +284,11 @@ fn closing_brace_hints(\n                     let imp = sema.to_def(&imp)?;\n                     let ty = imp.self_ty(sema.db);\n                     let trait_ = imp.trait_(sema.db);\n-\n-                    (match trait_ {\n+                    let hint_text = match trait_ {\n                         Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n                         None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n-                    }, None)\n+                    };\n+                    (hint_text, None)\n                 },\n                 ast::Trait(tr) => {\n                     (format!(\"trait {}\", tr.name()?), tr.name().map(name))\n@@ -253,7 +332,7 @@ fn closing_brace_hints(\n \n         (\n             format!(\"{}!\", mac.path()?),\n-            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range().start()),\n+            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range()),\n         )\n     } else {\n         return None;\n@@ -278,11 +357,12 @@ fn closing_brace_hints(\n         return None;\n     }\n \n+    let linked_location = name_range.map(|range| FileRange { file_id, range });\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n-        label,\n-        tooltip: name_offset.map(|it| InlayTooltip::HoverOffset(file_id, it)),\n+        label: InlayHintLabel { parts: vec![InlayHintLabelPart { text: label, linked_location }] },\n+        tooltip: None, // provided by label part location\n     });\n \n     None\n@@ -311,7 +391,7 @@ fn implicit_static_hints(\n             acc.push(InlayHint {\n                 range: t.text_range(),\n                 kind: InlayKind::LifetimeHint,\n-                label: \"'static\".to_owned(),\n+                label: \"'static\".to_owned().into(),\n                 tooltip: Some(InlayTooltip::String(\"Elided static lifetime\".into())),\n             });\n         }\n@@ -329,10 +409,10 @@ fn fn_lifetime_fn_hints(\n         return None;\n     }\n \n-    let mk_lt_hint = |t: SyntaxToken, label| InlayHint {\n+    let mk_lt_hint = |t: SyntaxToken, label: String| InlayHint {\n         range: t.text_range(),\n         kind: InlayKind::LifetimeHint,\n-        label,\n+        label: label.into(),\n         tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n     };\n \n@@ -486,7 +566,8 @@ fn fn_lifetime_fn_hints(\n                     \"{}{}\",\n                     allocated_lifetimes.iter().format(\", \"),\n                     if is_empty { \"\" } else { \", \" }\n-                ),\n+                )\n+                .into(),\n                 tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n             });\n         }\n@@ -535,7 +616,8 @@ fn closure_ret_hints(\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n+            .into(),\n         tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())\n@@ -562,7 +644,7 @@ fn reborrow_hints(\n     acc.push(InlayHint {\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n-        label: label.to_string(),\n+        label: label.to_string().into(),\n         tooltip: Some(InlayTooltip::String(\"Compiler inserted reborrow\".into())),\n     });\n     Some(())\n@@ -620,9 +702,9 @@ fn chaining_hints(\n             acc.push(InlayHint {\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n-                label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n-                    ty.display_truncated(sema.db, config.max_length).to_string()\n-                }),\n+                label: hint_iterator(sema, &famous_defs, config, &ty)\n+                    .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n+                    .into(),\n                 tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n@@ -674,7 +756,7 @@ fn param_name_hints(\n             InlayHint {\n                 range,\n                 kind: InlayKind::ParameterHint,\n-                label: param_name,\n+                label: param_name.into(),\n                 tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n             }\n         });\n@@ -705,7 +787,7 @@ fn binding_mode_hints(\n         acc.push(InlayHint {\n             range,\n             kind: InlayKind::BindingModeHint,\n-            label: r.to_string(),\n+            label: r.to_string().into(),\n             tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n         });\n     });\n@@ -720,7 +802,7 @@ fn binding_mode_hints(\n             acc.push(InlayHint {\n                 range,\n                 kind: InlayKind::BindingModeHint,\n-                label: bm.to_string(),\n+                label: bm.to_string().into(),\n                 tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n             });\n         }\n@@ -772,7 +854,7 @@ fn bind_pat_hints(\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::TypeHint,\n-        label,\n+        label: label.into(),\n         tooltip: pat\n             .name()\n             .map(|it| it.syntax().text_range())\n@@ -2223,7 +2305,9 @@ fn main() {\n                     InlayHint {\n                         range: 147..172,\n                         kind: ChainingHint,\n-                        label: \"B\",\n+                        label: [\n+                            \"B\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2236,7 +2320,9 @@ fn main() {\n                     InlayHint {\n                         range: 147..154,\n                         kind: ChainingHint,\n-                        label: \"A\",\n+                        label: [\n+                            \"A\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2294,7 +2380,9 @@ fn main() {\n                     InlayHint {\n                         range: 143..190,\n                         kind: ChainingHint,\n-                        label: \"C\",\n+                        label: [\n+                            \"C\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2307,7 +2395,9 @@ fn main() {\n                     InlayHint {\n                         range: 143..179,\n                         kind: ChainingHint,\n-                        label: \"B\",\n+                        label: [\n+                            \"B\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2350,7 +2440,9 @@ fn main() {\n                     InlayHint {\n                         range: 246..283,\n                         kind: ChainingHint,\n-                        label: \"B<X<i32, bool>>\",\n+                        label: [\n+                            \"B<X<i32, bool>>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2363,7 +2455,9 @@ fn main() {\n                     InlayHint {\n                         range: 246..265,\n                         kind: ChainingHint,\n-                        label: \"A<X<i32, bool>>\",\n+                        label: [\n+                            \"A<X<i32, bool>>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2408,7 +2502,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..241,\n                         kind: ChainingHint,\n-                        label: \"impl Iterator<Item = ()>\",\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2421,7 +2517,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..224,\n                         kind: ChainingHint,\n-                        label: \"impl Iterator<Item = ()>\",\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2434,7 +2532,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..206,\n                         kind: ChainingHint,\n-                        label: \"impl Iterator<Item = ()>\",\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2447,7 +2547,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..189,\n                         kind: ChainingHint,\n-                        label: \"&mut MyIter\",\n+                        label: [\n+                            \"&mut MyIter\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2489,7 +2591,9 @@ fn main() {\n                     InlayHint {\n                         range: 124..130,\n                         kind: TypeHint,\n-                        label: \"Struct\",\n+                        label: [\n+                            \"Struct\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2502,7 +2606,9 @@ fn main() {\n                     InlayHint {\n                         range: 145..185,\n                         kind: ChainingHint,\n-                        label: \"Struct\",\n+                        label: [\n+                            \"Struct\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2515,7 +2621,9 @@ fn main() {\n                     InlayHint {\n                         range: 145..168,\n                         kind: ChainingHint,\n-                        label: \"Struct\",\n+                        label: [\n+                            \"Struct\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2528,7 +2636,9 @@ fn main() {\n                     InlayHint {\n                         range: 222..228,\n                         kind: ParameterHint,\n-                        label: \"self\",\n+                        label: [\n+                            \"self\",\n+                        ],\n                         tooltip: Some(\n                             HoverOffset(\n                                 FileId("}, {"sha": "0552330814aa4b1bd85762119136531489c20086", "filename": "src/tools/rust-analyzer/crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2Fsrc%2Flib.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -82,8 +82,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n-        LifetimeElisionHints, ReborrowHints,\n+        ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n+        InlayTooltip, LifetimeElisionHints, ReborrowHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "e79cf3d3fd6e9ffe535e5ff9aee9f007c52ec157", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -1362,7 +1362,7 @@ pub(crate) fn handle_inlay_hints(\n             .map(|it| {\n                 to_proto::inlay_hint(&snap, &line_index, inlay_hints_config.render_colons, it)\n             })\n-            .collect(),\n+            .collect::<Result<Vec<_>>>()?,\n     ))\n }\n "}, {"sha": "e47f70fff39e0a3a48a07947d1b925a4c8ad2282", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -314,7 +314,9 @@ impl GlobalState {\n                         let mut args = args.clone();\n                         let mut path = path.clone();\n \n-                        if let ProjectWorkspace::Cargo { sysroot, .. } = ws {\n+                        if let ProjectWorkspace::Cargo { sysroot, .. }\n+                        | ProjectWorkspace::Json { sysroot, .. } = ws\n+                        {\n                             tracing::debug!(\"Found a cargo workspace...\");\n                             if let Some(sysroot) = sysroot.as_ref() {\n                                 tracing::debug!(\"Found a cargo workspace with a sysroot...\");"}, {"sha": "e083b9d0e33789ae448a42bd698dcee79a46f6c8", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -9,8 +9,9 @@ use ide::{\n     Annotation, AnnotationKind, Assist, AssistKind, Cancellable, CompletionItem,\n     CompletionItemKind, CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit,\n     Fold, FoldKind, Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint,\n-    InlayKind, Markup, NavigationTarget, ReferenceCategory, RenameError, Runnable, Severity,\n-    SignatureHelp, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n+    InlayHintLabel, InlayKind, Markup, NavigationTarget, ReferenceCategory, RenameError, Runnable,\n+    Severity, SignatureHelp, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange,\n+    TextSize,\n };\n use itertools::Itertools;\n use serde_json::to_value;\n@@ -426,9 +427,16 @@ pub(crate) fn inlay_hint(\n     snap: &GlobalStateSnapshot,\n     line_index: &LineIndex,\n     render_colons: bool,\n-    inlay_hint: InlayHint,\n-) -> lsp_types::InlayHint {\n-    lsp_types::InlayHint {\n+    mut inlay_hint: InlayHint,\n+) -> Result<lsp_types::InlayHint> {\n+    match inlay_hint.kind {\n+        InlayKind::ParameterHint if render_colons => inlay_hint.label.append_str(\":\"),\n+        InlayKind::TypeHint if render_colons => inlay_hint.label.prepend_str(\": \"),\n+        InlayKind::ClosureReturnTypeHint => inlay_hint.label.prepend_str(\" -> \"),\n+        _ => {}\n+    }\n+\n+    Ok(lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n             InlayKind::ParameterHint\n@@ -459,15 +467,9 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ImplicitReborrowHint\n             | InlayKind::TypeHint\n             | InlayKind::ClosingBraceHint => false,\n-            InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n+            InlayKind::BindingModeHint => inlay_hint.label.as_simple_str() != Some(\"&\"),\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n-        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n-            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n-            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n-            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n-            _ => inlay_hint.label.clone(),\n-        }),\n         kind: match inlay_hint.kind {\n             InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n@@ -506,9 +508,36 @@ pub(crate) fn inlay_hint(\n         })(),\n         tooltip: Some(match inlay_hint.tooltip {\n             Some(ide::InlayTooltip::String(s)) => lsp_types::InlayHintTooltip::String(s),\n-            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label),\n+            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label.to_string()),\n         }),\n-    }\n+        label: inlay_hint_label(snap, inlay_hint.label)?,\n+    })\n+}\n+\n+fn inlay_hint_label(\n+    snap: &GlobalStateSnapshot,\n+    label: InlayHintLabel,\n+) -> Result<lsp_types::InlayHintLabel> {\n+    Ok(match label.as_simple_str() {\n+        Some(s) => lsp_types::InlayHintLabel::String(s.into()),\n+        None => lsp_types::InlayHintLabel::LabelParts(\n+            label\n+                .parts\n+                .into_iter()\n+                .map(|part| {\n+                    Ok(lsp_types::InlayHintLabelPart {\n+                        value: part.text,\n+                        tooltip: None,\n+                        location: part\n+                            .linked_location\n+                            .map(|range| location(snap, range))\n+                            .transpose()?,\n+                        command: None,\n+                    })\n+                })\n+                .collect::<Result<Vec<_>>>()?,\n+        ),\n+    })\n }\n \n static TOKEN_RESULT_COUNTER: AtomicU32 = AtomicU32::new(1);"}, {"sha": "eadebbe8a212bab90ff4a0857012ec762611865b", "filename": "src/tools/rust-analyzer/crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbdfd07178349d0a3cecb8e7dde8f915666ced/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=17cbdfd07178349d0a3cecb8e7dde8f915666ced", "patch": "@@ -248,8 +248,12 @@ impl ast::WhereClause {\n     }\n }\n \n-impl ast::TypeBoundList {\n-    pub fn remove(&self) {\n+pub trait Removable: AstNode {\n+    fn remove(&self);\n+}\n+\n+impl Removable for ast::TypeBoundList {\n+    fn remove(&self) {\n         match self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:]) {\n             Some(colon) => ted::remove_all(colon..=self.syntax().clone().into()),\n             None => ted::remove(self.syntax()),\n@@ -267,8 +271,8 @@ impl ast::PathSegment {\n     }\n }\n \n-impl ast::UseTree {\n-    pub fn remove(&self) {\n+impl Removable for ast::UseTree {\n+    fn remove(&self) {\n         for dir in [Direction::Next, Direction::Prev] {\n             if let Some(next_use_tree) = neighbor(self, dir) {\n                 let separators = self\n@@ -282,7 +286,9 @@ impl ast::UseTree {\n         }\n         ted::remove(self.syntax());\n     }\n+}\n \n+impl ast::UseTree {\n     pub fn get_or_create_use_tree_list(&self) -> ast::UseTreeList {\n         match self.use_tree_list() {\n             Some(it) => it,\n@@ -373,8 +379,8 @@ impl ast::UseTreeList {\n     }\n }\n \n-impl ast::Use {\n-    pub fn remove(&self) {\n+impl Removable for ast::Use {\n+    fn remove(&self) {\n         let next_ws = self\n             .syntax()\n             .next_sibling_or_token()\n@@ -444,8 +450,8 @@ impl ast::Fn {\n     }\n }\n \n-impl ast::MatchArm {\n-    pub fn remove(&self) {\n+impl Removable for ast::MatchArm {\n+    fn remove(&self) {\n         if let Some(sibling) = self.syntax().prev_sibling_or_token() {\n             if sibling.kind() == SyntaxKind::WHITESPACE {\n                 ted::remove(sibling);"}]}