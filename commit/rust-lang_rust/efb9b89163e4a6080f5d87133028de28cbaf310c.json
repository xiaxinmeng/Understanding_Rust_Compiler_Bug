{"sha": "efb9b89163e4a6080f5d87133028de28cbaf310c", "node_id": "C_kwDOAAsO6NoAKGVmYjliODkxNjNlNGE2MDgwZjVkODcxMzMwMjhkZTI4Y2JhZjMxMGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T14:02:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T14:02:01Z"}, "message": "Merge #11220\n\n11220: Turbo fish assist: don't include lifetime parameters r=Veykril a=Vannevelj\n\nFixes #11219\r\n\r\nThe issue talks about three different types of params: type, const & lifetime. I wasn't entirely sure which ones are intended to be included here so I've gone for the type & const params (i.e. exclude lifetime).\r\n\r\nI've added a test case for both a lifetime param and a const param. I'm still making my way through the rust book (chapter 7, yay) so I'm not too sure yet what these are but my testing shows that this approach generates code that compiles.\n\nCo-authored-by: Jeroen Vannevel <jer_vannevel@outlook.com>", "tree": {"sha": "c3143be3f189cdb132967d863d781710ef3bd920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3143be3f189cdb132967d863d781710ef3bd920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb9b89163e4a6080f5d87133028de28cbaf310c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2EfZCRBK7hj4Ov3rIwAAo/EIAE+LgNIP82vptMZZVxZGqC7V\nEjQJRQHWEt9bQ0X4pxeia5rw2vXZVtdsN4YgsISWRTRSnJSBJB0JfJfQyRmqlx0h\n5GJ3WpMqtiyV4O/HPSkRrJayS3WV1rD7nNddxJMhjESvo7frFX4FcLEXbgggQZcc\nGtDFazs+esu2ETg4eKDxBLHig02+izR6MiIOC2Uc3HhPecPmeWv/fMngt8A4c/qD\nOWsPRgUX3Pugd0st07lJhucyCmbSFFmyxfVjOnTK95LRggt0EOs4OTUUfBg1MTdU\nO+8fI1se9gv2bajHYMZJtbaqPsau8WrMV/pa1atXhLB/YrWj+2FjLeFqGfzIy4M=\n=UHUz\n-----END PGP SIGNATURE-----\n", "payload": "tree c3143be3f189cdb132967d863d781710ef3bd920\nparent b70493d095dd24a1b5c5721d2a1bd873444a63ec\nparent 0a240e31c5327cf509d335d0dfb6a5d97100ac0a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641564121 +0000\ncommitter GitHub <noreply@github.com> 1641564121 +0000\n\nMerge #11220\n\n11220: Turbo fish assist: don't include lifetime parameters r=Veykril a=Vannevelj\n\nFixes #11219\r\n\r\nThe issue talks about three different types of params: type, const & lifetime. I wasn't entirely sure which ones are intended to be included here so I've gone for the type & const params (i.e. exclude lifetime).\r\n\r\nI've added a test case for both a lifetime param and a const param. I'm still making my way through the rust book (chapter 7, yay) so I'm not too sure yet what these are but my testing shows that this approach generates code that compiles.\n\nCo-authored-by: Jeroen Vannevel <jer_vannevel@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb9b89163e4a6080f5d87133028de28cbaf310c", "html_url": "https://github.com/rust-lang/rust/commit/efb9b89163e4a6080f5d87133028de28cbaf310c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb9b89163e4a6080f5d87133028de28cbaf310c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70493d095dd24a1b5c5721d2a1bd873444a63ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70493d095dd24a1b5c5721d2a1bd873444a63ec", "html_url": "https://github.com/rust-lang/rust/commit/b70493d095dd24a1b5c5721d2a1bd873444a63ec"}, {"sha": "0a240e31c5327cf509d335d0dfb6a5d97100ac0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a240e31c5327cf509d335d0dfb6a5d97100ac0a", "html_url": "https://github.com/rust-lang/rust/commit/0a240e31c5327cf509d335d0dfb6a5d97100ac0a"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "c3d27f7ea65bec30f905f9cc41ad391db867cbb1", "filename": "crates/ide_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b89163e4a6080f5d87133028de28cbaf310c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b89163e4a6080f5d87133028de28cbaf310c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=efb9b89163e4a6080f5d87133028de28cbaf310c", "patch": "@@ -1,4 +1,5 @@\n use ide_db::defs::{Definition, NameRefClass};\n+use itertools::Itertools;\n use syntax::{ast, AstNode, SyntaxKind, T};\n \n use crate::{\n@@ -77,26 +78,42 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         }\n     }\n \n-    let number_of_arguments = generics.len();\n-    let fish_head = std::iter::repeat(\"_\").take(number_of_arguments).collect::<Vec<_>>().join(\",\");\n+    let number_of_arguments = generics\n+        .iter()\n+        .filter(|param| {\n+            matches!(param, hir::GenericParam::TypeParam(_) | hir::GenericParam::ConstParam(_))\n+        })\n+        .count();\n \n     acc.add(\n         AssistId(\"add_turbo_fish\", AssistKind::RefactorRewrite),\n         \"Add `::<>`\",\n         ident.text_range(),\n         |builder| match ctx.config.snippet_cap {\n             Some(cap) => {\n-                let snip = format!(\"::<${{0:{}}}>\", fish_head);\n+                let snip = format!(\"::<{}>\", get_snippet_fish_head(number_of_arguments));\n                 builder.insert_snippet(cap, ident.text_range().end(), snip)\n             }\n             None => {\n+                let fish_head = std::iter::repeat(\"_\").take(number_of_arguments).format(\", \");\n                 let snip = format!(\"::<{}>\", fish_head);\n                 builder.insert(ident.text_range().end(), snip);\n             }\n         },\n     )\n }\n \n+/// This will create a snippet string with tabstops marked\n+fn get_snippet_fish_head(number_of_arguments: usize) -> String {\n+    let mut fish_head = (1..number_of_arguments)\n+        .format_with(\"\", |i, f| f(&format_args!(\"${{{}:_}}, \", i)))\n+        .to_string();\n+\n+    // tabstop 0 is a special case and always the last one\n+    fish_head.push_str(\"${0:_}\");\n+    fish_head\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_by_label, check_assist_not_applicable};\n@@ -135,7 +152,7 @@ fn main() {\n             r#\"\n fn make<T, A>() -> T {}\n fn main() {\n-    make::<${0:_,_}>();\n+    make::<${1:_}, ${0:_}>();\n }\n \"#,\n         );\n@@ -154,7 +171,7 @@ fn main() {\n             r#\"\n fn make<T, A, B, C, D, E, F>() -> T {}\n fn main() {\n-    make::<${0:_,_,_,_,_,_,_}>();\n+    make::<${1:_}, ${2:_}, ${3:_}, ${4:_}, ${5:_}, ${6:_}, ${0:_}>();\n }\n \"#,\n         );\n@@ -339,4 +356,42 @@ fn main() {\n             \"Add `: _` before assignment operator\",\n         );\n     }\n+\n+    #[test]\n+    fn add_turbo_fish_function_lifetime_parameter() {\n+        check_assist(\n+            add_turbo_fish,\n+            r#\"\n+fn make<'a, T, A>(t: T, a: A) {}\n+fn main() {\n+    make$0(5, 2);\n+}\n+\"#,\n+            r#\"\n+fn make<'a, T, A>(t: T, a: A) {}\n+fn main() {\n+    make::<${1:_}, ${0:_}>(5, 2);\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_turbo_fish_function_const_parameter() {\n+        check_assist(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T, const N: usize>(t: T) {}\n+fn main() {\n+    make$0(3);\n+}\n+\"#,\n+            r#\"\n+fn make<T, const N: usize>(t: T) {}\n+fn main() {\n+    make::<${1:_}, ${0:_}>(3);\n+}\n+\"#,\n+        );\n+    }\n }"}]}