{"sha": "f875daca54b14d74a3b236b971b88d5e5f739b81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzVkYWNhNTRiMTRkNzRhM2IyMzZiOTcxYjg4ZDVlNWY3MzliODE=", "commit": {"author": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-04-16T20:25:56Z"}, "committer": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-04-19T11:24:34Z"}, "message": "rand: don't block before random pool is initialized\n\nIf we attempt a read with getrandom() on Linux the syscall can block\nbefore the random pool is initialized unless the GRND_NONBLOCK flag is\npassed. This flag causes getrandom() to instead return EAGAIN while the\npool is uninitialized. To avoid downstream users of crate or std\nfunctionality that have no ability to avoid this blocking behavior this\nchange causes Rust to read bytes from /dev/urandom while getrandom()\nwould block and once getrandom() is available to use that. Fixes #32953.\n\nSigned-off-by: Doug Goldstein <cardoe@cardoe.com>", "tree": {"sha": "ff87be8f91dc18472c64b3757904afe7c8576ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff87be8f91dc18472c64b3757904afe7c8576ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f875daca54b14d74a3b236b971b88d5e5f739b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f875daca54b14d74a3b236b971b88d5e5f739b81", "html_url": "https://github.com/rust-lang/rust/commit/f875daca54b14d74a3b236b971b88d5e5f739b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f875daca54b14d74a3b236b971b88d5e5f739b81/comments", "author": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00782494b47ca7a4ae8e665f99ab10012b45f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00782494b47ca7a4ae8e665f99ab10012b45f9c", "html_url": "https://github.com/rust-lang/rust/commit/d00782494b47ca7a4ae8e665f99ab10012b45f9c"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "7f52a9c1bee962eea7ab82b68031067292e169dd", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f875daca54b14d74a3b236b971b88d5e5f739b81/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875daca54b14d74a3b236b971b88d5e5f739b81/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=f875daca54b14d74a3b236b971b88d5e5f739b81", "patch": "@@ -41,8 +41,10 @@ mod imp {\n         #[cfg(target_arch = \"aarch64\")]\n         const NR_GETRANDOM: libc::c_long = 278;\n \n+        const GRND_NONBLOCK: libc::c_uint = 0x0001;\n+\n         unsafe {\n-            libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), 0)\n+            libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)\n         }\n     }\n \n@@ -63,6 +65,11 @@ mod imp {\n                 let err = errno() as libc::c_int;\n                 if err == libc::EINTR {\n                     continue;\n+                } else if err == libc::EAGAIN {\n+                    let reader = File::open(\"/dev/urandom\").expect(\"Unable to open /dev/urandom\");\n+                    let mut reader_rng = ReaderRng::new(reader);\n+                    reader_rng.fill_bytes(& mut v[read..]);\n+                    read += v.len() as usize;\n                 } else {\n                     panic!(\"unexpected getrandom error: {}\", err);\n                 }"}]}