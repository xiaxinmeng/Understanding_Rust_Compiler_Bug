{"sha": "97005c0068f22032cbc30205a25dc88851eba424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDA1YzAwNjhmMjIwMzJjYmMzMDIwNWEyNWRjODg4NTFlYmE0MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-08T19:26:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-08T19:26:30Z"}, "message": "auto merge of #11401 : michaelwoerister/rust/issue11322, r=alexcrichton\n\n`expand_include_str()` in libsyntax seems to have corrupted the CodeMap by always setting the BytePos of any included files to zero. It now uses `CodeMap::new_filemap()` which should set everything properly. This should fix issue #11322 but I don't want to close it before I have confirmation from the reporters that the problem is indeed fixed.", "tree": {"sha": "9482417e40b6bf7f9406ff1d763a4440c731628b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9482417e40b6bf7f9406ff1d763a4440c731628b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97005c0068f22032cbc30205a25dc88851eba424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97005c0068f22032cbc30205a25dc88851eba424", "html_url": "https://github.com/rust-lang/rust/commit/97005c0068f22032cbc30205a25dc88851eba424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97005c0068f22032cbc30205a25dc88851eba424/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430652c970db41f718936bb649516c401b02964b", "url": "https://api.github.com/repos/rust-lang/rust/commits/430652c970db41f718936bb649516c401b02964b", "html_url": "https://github.com/rust-lang/rust/commit/430652c970db41f718936bb649516c401b02964b"}, {"sha": "ad3a179954fb8e04794ad22584adc071c6a1d86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3a179954fb8e04794ad22584adc071c6a1d86d", "html_url": "https://github.com/rust-lang/rust/commit/ad3a179954fb8e04794ad22584adc071c6a1d86d"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "fae3f013f91dfb5719a11dfe58b6c75001bc53fe", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97005c0068f22032cbc30205a25dc88851eba424/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97005c0068f22032cbc30205a25dc88851eba424/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=97005c0068f22032cbc30205a25dc88851eba424", "patch": "@@ -19,7 +19,6 @@ use parse;\n use parse::token::{get_ident_interner};\n use print::pprust;\n \n-use std::cell::RefCell;\n use std::io;\n use std::io::File;\n use std::str;\n@@ -105,20 +104,14 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n         Ok(bytes) => bytes,\n     };\n     match str::from_utf8_owned_opt(bytes) {\n-        Some(s) => {\n-            let s = s.to_managed();\n+        Some(src) => {\n             // Add this input file to the code map to make it available as\n             // dependency information\n-            let mut files = cx.parse_sess.cm.files.borrow_mut();\n-            files.get().push(@codemap::FileMap {\n-                name: file.display().to_str().to_managed(),\n-                substr: codemap::FssNone,\n-                src: s,\n-                start_pos: codemap::BytePos(0),\n-                lines: RefCell::new(~[]),\n-                multibyte_chars: RefCell::new(~[]),\n-            });\n-            base::MRExpr(cx.expr_str(sp, s))\n+            let src = src.to_managed();\n+            let filename = file.display().to_str().to_managed();\n+            cx.parse_sess.cm.new_filemap(filename, src);\n+\n+            base::MRExpr(cx.expr_str(sp, src))\n         }\n         None => {\n             cx.span_fatal(sp, format!(\"{} wasn't a utf-8 file\", file.display()));"}, {"sha": "a13dde22710bc7245c84e388ea0d5780302af966", "filename": "src/test/debug-info/include_string.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Finclude_string.rs?ref=97005c0068f22032cbc30205a25dc88851eba424", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-android: FIXME(#10381)\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:rbreak zzz\n+// debugger:run\n+// debugger:finish\n+// debugger:print string1\n+// check:$1 = [...]\"some text to include in another file as string 1\", length = 48}\n+// debugger:print string2\n+// check:$2 = [...]\"some text to include in another file as string 2\", length = 48}\n+// debugger:print string3\n+// check:$3 = [...]\"some text to include in another file as string 3\", length = 48}\n+// debugger:continue\n+\n+#[allow(unused_variable)];\n+\n+// This test case makes sure that debug info does not ICE when include_str is \n+// used multiple times (see issue #11322).\n+\n+fn main() {\n+    let string1 = include_str!(\"text-to-include-1.txt\");\n+    let string2 = include_str!(\"text-to-include-2.txt\");\n+    let string3 = include_str!(\"text-to-include-3.txt\");\n+    zzz();\n+}\n+\n+fn zzz() {()}"}, {"sha": "ba055272a3fa78f94978f2d0818bb777616cdab8", "filename": "src/test/debug-info/text-to-include-1.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Ftext-to-include-1.txt", "raw_url": "https://github.com/rust-lang/rust/raw/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Ftext-to-include-1.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftext-to-include-1.txt?ref=97005c0068f22032cbc30205a25dc88851eba424", "patch": "@@ -0,0 +1 @@\n+some text to include in another file as string 1\n\\ No newline at end of file"}, {"sha": "a2caa5e71416900b9ab3d42e6acace5422a34adf", "filename": "src/test/debug-info/text-to-include-2.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Ftext-to-include-2.txt", "raw_url": "https://github.com/rust-lang/rust/raw/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Ftext-to-include-2.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftext-to-include-2.txt?ref=97005c0068f22032cbc30205a25dc88851eba424", "patch": "@@ -0,0 +1 @@\n+some text to include in another file as string 2\n\\ No newline at end of file"}, {"sha": "9933e6c1b0b7d98e17b79e0cc0e650e87574571c", "filename": "src/test/debug-info/text-to-include-3.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Ftext-to-include-3.txt", "raw_url": "https://github.com/rust-lang/rust/raw/97005c0068f22032cbc30205a25dc88851eba424/src%2Ftest%2Fdebug-info%2Ftext-to-include-3.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftext-to-include-3.txt?ref=97005c0068f22032cbc30205a25dc88851eba424", "patch": "@@ -0,0 +1 @@\n+some text to include in another file as string 3\n\\ No newline at end of file"}]}