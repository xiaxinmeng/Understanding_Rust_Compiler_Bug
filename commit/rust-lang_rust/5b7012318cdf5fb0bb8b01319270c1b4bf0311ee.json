{"sha": "5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzAxMjMxOGNkZjVmYjBiYjhiMDEzMTkyNzBjMWI0YmYwMzExZWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T20:18:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-14T22:10:07Z"}, "message": "filter by time", "tree": {"sha": "bd6ef9c5dbc06ae9eb4cf5b5cd769c1b8e4f6f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd6ef9c5dbc06ae9eb4cf5b5cd769c1b8e4f6f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "html_url": "https://github.com/rust-lang/rust/commit/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b228947b6863f5864b48bb3a7f3dcca921f58d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b228947b6863f5864b48bb3a7f3dcca921f58d0b", "html_url": "https://github.com/rust-lang/rust/commit/b228947b6863f5864b48bb3a7f3dcca921f58d0b"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "b0b70df5c88db89f583ea3e2ed9bc80c4b95a2be", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "patch": "@@ -8,31 +8,14 @@ use ra_prof;\n fn main() -> Result<()> {\n     std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n     let logger = Logger::with_env_or_str(\"error\").duplicate_to_stderr(Duplicate::All);\n-    match std::env::var(\"RA_INTERNAL_MODE\") {\n+    match std::env::var(\"RA_LOG_DIR\") {\n         Ok(ref v) if v == \"1\" => logger.log_to_file().directory(\"log\").start()?,\n         _ => logger.start()?,\n     };\n-    // Filtering syntax\n-    // env RA_PROFILE=*             // dump everything\n-    // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n-    // env RA_PROFILE=*@3           // dump everything, up to depth 3\n-    let filter = match std::env::var(\"RA_PROFILE\") {\n-        Ok(p) => {\n-            let mut p = p.as_str();\n-            let depth = if let Some(idx) = p.rfind(\"@\") {\n-                let depth: usize = p[idx + 1..].parse().expect(\"invalid profile depth\");\n-                p = &p[..idx];\n-                depth\n-            } else {\n-                999\n-            };\n-            let allowed =\n-                if p == \"*\" { Vec::new() } else { p.split(\";\").map(String::from).collect() };\n-            ra_prof::Filter::new(depth, allowed)\n-        }\n+    ra_prof::set_filter(match std::env::var(\"RA_PROFILE\") {\n+        Ok(spec) => ra_prof::Filter::from_spec(&spec),\n         Err(_) => ra_prof::Filter::disabled(),\n-    };\n-    ra_prof::set_filter(filter);\n+    });\n     log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {"}, {"sha": "999cc61f0802f51ad7d97d38525e950fb07d575c", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "patch": "@@ -27,7 +27,8 @@ pub fn set_filter(f: Filter) {\n     PROFILING_ENABLED.store(f.depth > 0, Ordering::SeqCst);\n     let set = HashSet::from_iter(f.allowed.iter().cloned());\n     let mut old = FILTER.write().unwrap();\n-    let filter_data = FilterData { depth: f.depth, allowed: set, version: old.version + 1 };\n+    let filter_data =\n+        FilterData { depth: f.depth, allowed: set, cutoff: f.cutoff, version: old.version + 1 };\n     *old = filter_data;\n }\n \n@@ -101,15 +102,41 @@ pub struct Profiler {\n pub struct Filter {\n     depth: usize,\n     allowed: Vec<String>,\n+    cutoff: Duration,\n }\n \n impl Filter {\n+    // Filtering syntax\n+    // env RA_PROFILE=*             // dump everything\n+    // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n+    // env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n+    pub fn from_spec(mut spec: &str) -> Filter {\n+        let cutoff = if let Some(idx) = spec.rfind(\">\") {\n+            let cutoff = spec[idx + 1..].parse().expect(\"invalid profile cutoff\");\n+            spec = &spec[..idx];\n+            Duration::from_millis(cutoff)\n+        } else {\n+            Duration::new(0, 0)\n+        };\n+\n+        let depth = if let Some(idx) = spec.rfind(\"@\") {\n+            let depth: usize = spec[idx + 1..].parse().expect(\"invalid profile depth\");\n+            spec = &spec[..idx];\n+            depth\n+        } else {\n+            999\n+        };\n+        let allowed =\n+            if spec == \"*\" { Vec::new() } else { spec.split(\"|\").map(String::from).collect() };\n+        Filter::new(depth, allowed, cutoff)\n+    }\n+\n     pub fn disabled() -> Filter {\n-        Filter::new(0, Vec::new())\n+        Filter::new(0, Vec::new(), Duration::new(0, 0))\n     }\n \n-    pub fn new(depth: usize, allowed: Vec<String>) -> Filter {\n-        Filter { depth, allowed }\n+    pub fn new(depth: usize, allowed: Vec<String>, cutoff: Duration) -> Filter {\n+        Filter { depth, allowed, cutoff }\n     }\n }\n \n@@ -136,6 +163,7 @@ struct FilterData {\n     depth: usize,\n     version: usize,\n     allowed: HashSet<String>,\n+    cutoff: Duration,\n }\n \n static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n@@ -159,7 +187,9 @@ impl Drop for Profiler {\n                     stack.messages.push(Message { level, duration, message });\n                     if level == 0 {\n                         let stdout = stderr();\n-                        print(0, &stack.messages, &mut stdout.lock());\n+                        if duration >= stack.filter_data.cutoff {\n+                            print(0, &stack.messages, &mut stdout.lock());\n+                        }\n                         stack.messages.clear();\n                     }\n                 });"}, {"sha": "d34ff96c826dbed59435690a127c7849794a23b0", "filename": "docs/dev/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b7012318cdf5fb0bb8b01319270c1b4bf0311ee/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=5b7012318cdf5fb0bb8b01319270c1b4bf0311ee", "patch": "@@ -105,7 +105,7 @@ figure out where logs go.\n Inside rust-analyzer, we use the standard `log` crate for logging, and\n `flexi_logger` for logging frotend. By default, log goes to stderr (the same as\n with `env_logger`), but the stderr itself is processed by VS Code. To mirror\n-logs to a `./log` directory, set `RA_INTERNAL_MODE=1` environmental variable.\n+logs to a `./log` directory, set `RA_LOG_DIR=1` environmental variable.\n \n To see stderr in the running VS Code instance, go to the \"Output\" tab of the\n panel and select `rust-analyzer`. This shows `eprintln!` as well. Note that\n@@ -143,5 +143,7 @@ We have a built-in hierarchical profiler, you can enable it by using `RA_PROF` e\n ```\n RA_PROFILE=*             // dump everything\n RA_PROFILE=foo|bar|baz   // enabled only selected entries\n-RA_PROFILE=*@3           // dump everything, up to depth 3\n+RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n ```\n+\n+In particular, I have `export RA_PROFILE='*>10' in my shell profile."}]}