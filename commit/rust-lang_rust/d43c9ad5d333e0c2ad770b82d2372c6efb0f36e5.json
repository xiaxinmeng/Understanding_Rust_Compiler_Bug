{"sha": "d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5", "node_id": "C_kwDOAAsO6NoAKGQ0M2M5YWQ1ZDMzM2UwYzJhZDc3MGI4MmQyMzcyYzZlZmIwZjM2ZTU", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-08T04:21:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-08T04:21:00Z"}, "message": "Rollup merge of #92600 - asquared31415:float-must-use, r=joshtriplett\n\nAdd some missing `#[must_use]` to some `f{32,64}` operations\n\nThis PR adds `#[must_use]` to the following methods:\n - `f32::recip`\n - `f32::max`\n - `f32::min`\n - `f32::maximum`\n - `f32::minimum`\n and their equivalents in `f64`.\n These methods all produce a new value without modifying the original and so are pointless to call without using the result.", "tree": {"sha": "cecc40b209299653c80f76582ec6ecdc044839b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cecc40b209299653c80f76582ec6ecdc044839b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2REsCRBK7hj4Ov3rIwAAEo0IAKFPCxIzinFeLYSB2THN0aPK\nyc9jL/pjrjeXC6geot9u8maIBlki669FkXtWXdEmjmTY+uEfyuAhvN4agcx1o9jY\n8wGkQkLctfYsT6d/TC8hq1vT716cVn5X1rvV+LD17rJ44sxEf1aIos/QnQX0ty1n\nzjvD44jjseMnZ5y1ImgbY9AQqdXtVTxH064QxowPLrEhtgRz3RNrBsFdduYOkuLu\nFa7XksqCH0e89a1NIdjydC33RXNWslvV+CYKqomamw3E0Vz3rBFD/xf/3mufnugq\nsJ/Gb8wmY5DXZ7555M6K+fIAIvcJa1RINq8/L5WixQ5KEeTjbY7j44yhBaQYAaI=\n=oEaq\n-----END PGP SIGNATURE-----\n", "payload": "tree cecc40b209299653c80f76582ec6ecdc044839b8\nparent 0bd7e2ff2e054952d0b638c8198414cf35f8e621\nparent dd364ed226277a392f49f8fd41504a74319b482c\nauthor Eric Huss <eric@huss.org> 1641615660 -0800\ncommitter GitHub <noreply@github.com> 1641615660 -0800\n\nRollup merge of #92600 - asquared31415:float-must-use, r=joshtriplett\n\nAdd some missing `#[must_use]` to some `f{32,64}` operations\n\nThis PR adds `#[must_use]` to the following methods:\n - `f32::recip`\n - `f32::max`\n - `f32::min`\n - `f32::maximum`\n - `f32::minimum`\n and their equivalents in `f64`.\n These methods all produce a new value without modifying the original and so are pointless to call without using the result.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5", "html_url": "https://github.com/rust-lang/rust/commit/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd7e2ff2e054952d0b638c8198414cf35f8e621", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd7e2ff2e054952d0b638c8198414cf35f8e621", "html_url": "https://github.com/rust-lang/rust/commit/0bd7e2ff2e054952d0b638c8198414cf35f8e621"}, {"sha": "dd364ed226277a392f49f8fd41504a74319b482c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd364ed226277a392f49f8fd41504a74319b482c", "html_url": "https://github.com/rust-lang/rust/commit/dd364ed226277a392f49f8fd41504a74319b482c"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "85ceede5b9e3a1b227888b4fa1044d7a01111f67", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5", "patch": "@@ -628,6 +628,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn recip(self) -> f32 {\n@@ -684,6 +685,7 @@ impl f32 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f32) -> f32 {\n@@ -703,6 +705,7 @@ impl f32 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f32) -> f32 {\n@@ -726,6 +729,7 @@ impl f32 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn maximum(self, other: f32) -> f32 {\n@@ -757,6 +761,7 @@ impl f32 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn minimum(self, other: f32) -> f32 {"}, {"sha": "4049c95b130f2a6bdc771a61ed13739ba240e647", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=d43c9ad5d333e0c2ad770b82d2372c6efb0f36e5", "patch": "@@ -643,6 +643,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn recip(self) -> f64 {\n@@ -700,6 +701,7 @@ impl f64 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f64) -> f64 {\n@@ -719,6 +721,7 @@ impl f64 {\n     /// ```\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f64) -> f64 {\n@@ -742,6 +745,7 @@ impl f64 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn maximum(self, other: f64) -> f64 {\n@@ -773,6 +777,7 @@ impl f64 {\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n     /// Note that this follows the semantics specified in IEEE 754-2019.\n+    #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn minimum(self, other: f64) -> f64 {"}]}