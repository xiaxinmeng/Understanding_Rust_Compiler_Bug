{"sha": "d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDQwYTVmNDkyODQxNWYyZDJhOWY3YjJiYWRhZmY4YTkzNzZhMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T14:39:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T15:17:43Z"}, "message": "highlight macro idents", "tree": {"sha": "077bd8c5306efc0d0df6d33224a17ac9e6353711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077bd8c5306efc0d0df6d33224a17ac9e6353711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "html_url": "https://github.com/rust-lang/rust/commit/d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406505e096b4e6626ba8eb6c035671783ed2a577", "url": "https://api.github.com/repos/rust-lang/rust/commits/406505e096b4e6626ba8eb6c035671783ed2a577", "html_url": "https://github.com/rust-lang/rust/commit/406505e096b4e6626ba8eb6c035671783ed2a577"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "98551df8f45a6f76d622935615d8b93bafcf1877", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "patch": "@@ -108,7 +108,7 @@ mod tests {\n         assert_eq_dbg(\n             r#\"[HighlightedRange { range: [13; 15), tag: \"keyword\" },\n                 HighlightedRange { range: [16; 20), tag: \"function\" },\n-                HighlightedRange { range: [41; 45), tag: \"text\" },\n+                HighlightedRange { range: [41; 46), tag: \"macro\" },\n                 HighlightedRange { range: [49; 52), tag: \"keyword\" },\n                 HighlightedRange { range: [57; 59), tag: \"literal\" },\n                 HighlightedRange { range: [49; 52), tag: \"keyword\" },"}, {"sha": "9043026c1f3629271aa8a71d7a50cfb0db5e5dc9", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "patch": "@@ -24,9 +24,10 @@ use ra_syntax::{\n     SourceFileNode,\n     Location,\n     SyntaxKind::{self, *},\n-    SyntaxNodeRef, TextRange, TextUnit,\n+    SyntaxNodeRef, TextRange, TextUnit, Direction,\n };\n use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -79,8 +80,13 @@ pub fn matching_brace(file: &SourceFileNode, offset: TextUnit) -> Option<TextUni\n }\n \n pub fn highlight(file: &SourceFileNode) -> Vec<HighlightedRange> {\n+    // Visited nodes to handle highlighting priorities\n+    let mut highlighted = FxHashSet::default();\n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n+        if highlighted.contains(&node) {\n+            continue;\n+        }\n         let tag = match node.kind() {\n             COMMENT => \"comment\",\n             STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n@@ -90,7 +96,30 @@ pub fn highlight(file: &SourceFileNode) -> Vec<HighlightedRange> {\n             INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n             LIFETIME => \"parameter\",\n             k if k.is_keyword() => \"keyword\",\n-            _ => continue,\n+            _ => {\n+                if let Some(macro_call) = ast::MacroCall::cast(node) {\n+                    if let Some(path) = macro_call.path() {\n+                        if let Some(segment) = path.segment() {\n+                            if let Some(name_ref) = segment.name_ref() {\n+                                highlighted.insert(name_ref.syntax());\n+                                let range_start = name_ref.syntax().range().start();\n+                                let mut range_end = name_ref.syntax().range().end();\n+                                for sibling in path.syntax().siblings(Direction::Next) {\n+                                    match sibling.kind() {\n+                                        EXCL | IDENT => range_end = sibling.range().end(),\n+                                        _ => (),\n+                                    }\n+                                }\n+                                res.push(HighlightedRange {\n+                                    range: TextRange::from_to(range_start, range_end),\n+                                    tag: \"macro\",\n+                                })\n+                            }\n+                        }\n+                    }\n+                }\n+                continue;\n+            }\n         };\n         res.push(HighlightedRange {\n             range: node.range(),\n@@ -235,7 +264,7 @@ fn main() {}\n             r#\"[HighlightedRange { range: [1; 11), tag: \"comment\" },\n                 HighlightedRange { range: [12; 14), tag: \"keyword\" },\n                 HighlightedRange { range: [15; 19), tag: \"function\" },\n-                HighlightedRange { range: [29; 36), tag: \"text\" },\n+                HighlightedRange { range: [29; 37), tag: \"macro\" },\n                 HighlightedRange { range: [38; 50), tag: \"string\" },\n                 HighlightedRange { range: [52; 54), tag: \"literal\" }]\"#,\n             &hls,"}, {"sha": "2521dff622151409c78f65700b4c63e60e7a0405", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d7440a5f4928415f2d2a9f7b2badaff8a9376a09/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=d7440a5f4928415f2d2a9f7b2badaff8a9376a09", "patch": "@@ -28,7 +28,8 @@ export class Highlighter {\n             ['builtin', decor('#DD6718')],\n             ['text', decor('#DCDCCC')],\n             ['attribute', decor('#BFEBBF')],\n-            ['literal', decor('#DFAF8F')]\n+            ['literal', decor('#DFAF8F')],\n+            ['macro', decor('#DFAF8F')]\n         ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);"}]}