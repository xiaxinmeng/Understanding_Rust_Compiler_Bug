{"sha": "01377e8064a5b3d987b177c16e18da4bffec03a4", "node_id": "C_kwDOAAsO6NoAKDAxMzc3ZTgwNjRhNWIzZDk4N2IxNzdjMTZlMThkYTRiZmZlYzAzYTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-13T22:10:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-13T22:10:51Z"}, "message": "opportunistically resolve regions", "tree": {"sha": "130f6eb12c7dc7c106c07bf1f806a52dca2336ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130f6eb12c7dc7c106c07bf1f806a52dca2336ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01377e8064a5b3d987b177c16e18da4bffec03a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01377e8064a5b3d987b177c16e18da4bffec03a4", "html_url": "https://github.com/rust-lang/rust/commit/01377e8064a5b3d987b177c16e18da4bffec03a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01377e8064a5b3d987b177c16e18da4bffec03a4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5683791ebb7bbc440366635c322ad82badc554ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5683791ebb7bbc440366635c322ad82badc554ca", "html_url": "https://github.com/rust-lang/rust/commit/5683791ebb7bbc440366635c322ad82badc554ca"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "1b19ed9ad148b1d090d440ee39ecc7036400be8d", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/01377e8064a5b3d987b177c16e18da4bffec03a4/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01377e8064a5b3d987b177c16e18da4bffec03a4/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=01377e8064a5b3d987b177c16e18da4bffec03a4", "patch": "@@ -82,15 +82,40 @@ impl CanonicalVarValues<'_> {\n     }\n \n     pub fn is_identity_modulo_regions(&self) -> bool {\n-        self.var_values.iter().enumerate().all(|(bv, arg)| match arg.unpack() {\n-            ty::GenericArgKind::Lifetime(_) => true,\n-            ty::GenericArgKind::Type(ty) => {\n-                matches!(*ty.kind(), ty::Bound(ty::INNERMOST, bt) if bt.var.as_usize() == bv)\n-            }\n-            ty::GenericArgKind::Const(ct) => {\n-                matches!(ct.kind(), ty::ConstKind::Bound(ty::INNERMOST, bc) if bc.as_usize() == bv)\n+        let mut var = ty::BoundVar::from_u32(0);\n+        for arg in self.var_values {\n+            match arg.unpack() {\n+                ty::GenericArgKind::Lifetime(r) => {\n+                    if let ty::ReLateBound(ty::INNERMOST, br) = *r\n+                        && var == br.var\n+                    {\n+                        var = var + 1;\n+                    } else {\n+                        // It's ok if this region var isn't unique\n+                    }\n+                },\n+                ty::GenericArgKind::Type(ty) => {\n+                    if let ty::Bound(ty::INNERMOST, bt) = *ty.kind()\n+                        && var == bt.var\n+                    {\n+                        var = var + 1;\n+                    } else {\n+                        return false;\n+                    }\n+                }\n+                ty::GenericArgKind::Const(ct) => {\n+                    if let ty::ConstKind::Bound(ty::INNERMOST, bc) = ct.kind()\n+                        && var == bc\n+                    {\n+                        var = var + 1;\n+                    } else {\n+                        return false;\n+                    }\n+                }\n             }\n-        })\n+        }\n+\n+        true\n     }\n }\n "}, {"sha": "05248cb9d17823e60504be327677e8b06ec0c50f", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01377e8064a5b3d987b177c16e18da4bffec03a4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01377e8064a5b3d987b177c16e18da4bffec03a4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=01377e8064a5b3d987b177c16e18da4bffec03a4", "patch": "@@ -208,8 +208,25 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n         t\n     }\n \n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        let r = self.infcx.shallow_resolve(r);\n+    fn fold_region(&mut self, mut r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        match self.canonicalize_mode {\n+            CanonicalizeMode::Input => {\n+                // Don't resolve infer vars in input, since it affects\n+                // caching and may cause trait selection bugs which rely\n+                // on regions to be equal.\n+            }\n+            CanonicalizeMode::Response { .. } => {\n+                if let ty::ReVar(vid) = *r {\n+                    r = self\n+                        .infcx\n+                        .inner\n+                        .borrow_mut()\n+                        .unwrap_region_constraints()\n+                        .opportunistic_resolve_var(self.infcx.tcx, vid);\n+                }\n+            }\n+        }\n+\n         let kind = match *r {\n             ty::ReLateBound(..) => return r,\n "}, {"sha": "35fe38c5317d77236da81889e6c14057d7bd816d", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01377e8064a5b3d987b177c16e18da4bffec03a4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01377e8064a5b3d987b177c16e18da4bffec03a4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=01377e8064a5b3d987b177c16e18da4bffec03a4", "patch": "@@ -263,7 +263,10 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             let (_orig_values, canonical_goal) = self.canonicalize_goal(goal);\n             let new_canonical_response =\n                 EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n-            if !new_canonical_response.value.var_values.is_identity() {\n+            // We only check for modulo regions as we convert all regions in\n+            // the input to new existentials, even if they're expected to be\n+            // `'static` or a placeholder region.\n+            if !new_canonical_response.value.var_values.is_identity_modulo_regions() {\n                 bug!(\n                     \"unstable result: re-canonicalized goal={canonical_goal:#?} \\\n                     first_response={canonical_response:#?} \\"}, {"sha": "2610789cd485acbbf2115a39b1c091a08df106f9", "filename": "tests/ui/traits/new-solver/opportunistic-region-resolve.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/01377e8064a5b3d987b177c16e18da4bffec03a4/tests%2Fui%2Ftraits%2Fnew-solver%2Fopportunistic-region-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01377e8064a5b3d987b177c16e18da4bffec03a4/tests%2Fui%2Ftraits%2Fnew-solver%2Fopportunistic-region-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fopportunistic-region-resolve.rs?ref=01377e8064a5b3d987b177c16e18da4bffec03a4", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_coinductive]\n+trait Trait {}\n+\n+#[rustc_coinductive]\n+trait Indirect {}\n+impl<T: Trait + ?Sized> Indirect for T {}\n+\n+impl<'a> Trait for &'a () where &'a (): Indirect {}\n+\n+fn impls_trait<T: Trait>() {}\n+\n+fn main() {\n+    impls_trait::<&'static ()>();\n+}"}]}