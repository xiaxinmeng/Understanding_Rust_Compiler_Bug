{"sha": "58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZThmOGZkMmNhYzRjZmNkZTZjN2ExNDg4ZGQ4NjU3ZGNhY2FhZDg=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-13T00:16:02Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T01:58:52Z"}, "message": "Add initial set of testcases for RFC 2229\n\nCo-authored-by: Dhruv Jauhar <dhruvjhr@gmail.com>", "tree": {"sha": "a4471c80198f459122252b174be087b0659cb133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4471c80198f459122252b174be087b0659cb133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "html_url": "https://github.com/rust-lang/rust/commit/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88310cc0ebf4144205743dbb3a65223deffcf8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/88310cc0ebf4144205743dbb3a65223deffcf8e6", "html_url": "https://github.com/rust-lang/rust/commit/88310cc0ebf4144205743dbb3a65223deffcf8e6"}], "stats": {"total": 916, "additions": 914, "deletions": 2}, "files": [{"sha": "9e4e6565361528d078c3b1a64ddbba3318bf9be5", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -169,6 +169,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n         .consume_body(body);\n \n+        log_capture_analysis!(\n+            self,\n+            closure_def_id,\n+            \"capture information: {:#?}\",\n+            delegate.capture_information\n+        );\n+\n         if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n             // substs with the kind we inferred."}, {"sha": "a5dd202bc072babfd3bb03c1c7edfe857c5e9ec2", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,17 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+// Ensure that capture analysis results in arrays being completely captured.\n+fn main() {\n+    let mut m = [1, 2, 3, 4, 5];\n+\n+    let mut c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        m[0] += 10;\n+        m[1] += 40;\n+    };\n+\n+    c();\n+}"}, {"sha": "3d3912d0796eeda82a028038acc204e5dda7f6e2", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/arrays-completely-captured.rs:9:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/arrays-completely-captured.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b4142a4fd8e4638b21a254ef8e91fc310f1949ba", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,20 @@\n+For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: [i32; 5],\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:3 ~ arrays_completely_captured[317d]::main), local_id: 1 };`m`;DefId(0:4 ~ arrays_completely_captured[317d]::main::{closure#0})),\n+        ),\n+        projections: [],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:3 ~ arrays_completely_captured[317d]::main),\n+                local_id: 12,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(MutBorrow, '_#6r),\n+        ),\n+    },\n+}"}, {"sha": "a2be21cddb48cb317679d5e1971a28fe18edaf5e", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(arora-aman) add run-pass once 2229 is implemented\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut p = Point { x: 10, y: 10 };\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        println!(\"{}\", p.x);\n+    };\n+\n+    // `c` should only capture `p.x`, therefore mutating `p.y` is allowed.\n+    let py = &mut p.y;\n+\n+    c();\n+    *py = 20;\n+}"}, {"sha": "9233597c360d2c01164f1a168e07fb1e81242fee", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/capture-disjoint-field-struct.rs:15:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-disjoint-field-struct.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ab7bd60e48d1c8573cf0d965111c5eee642841d1", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stdout", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Point,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ capture_disjoint_field_struct[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:6 ~ capture_disjoint_field_struct[317d]::main),\n+                local_id: 31,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#35r),\n+        ),\n+    },\n+}"}, {"sha": "e06cde73158ea1460ddddfc24f4fa4a71c8aa99c", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+// FIXME(arora-aman) add run-pass once 2229 is implemented\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    let mut t = (10, 10);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        println!(\"{}\", t.0);\n+    };\n+\n+    // `c` only captures t.0, therefore mutating t.1 is allowed.\n+    let t1 = &mut t.1;\n+\n+    c();\n+    *t1 = 20;\n+}"}, {"sha": "f83487ecce55559f9cdc32dcecb77897a048fb66", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/capture-disjoint-field-tuple.rs:8:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-disjoint-field-tuple.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "517d7564c72ce9768d061ec4a29d30ad7d7e93a3", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stdout", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: (i32, i32),\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main), local_id: 1 };`t`;DefId(0:4 ~ capture_disjoint_field_tuple[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:3 ~ capture_disjoint_field_tuple[317d]::main),\n+                local_id: 28,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#35r),\n+        ),\n+    },\n+}"}, {"sha": "072ed8eeab6f240085dd56fc8d021fc82c668e10", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -5,8 +5,9 @@\n fn main() {\n     let s = format!(\"s\");\n \n-    let c = #[rustc_capture_analysis] || {\n+    let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    || {\n         println!(\"This uses new capture analyysis to capture s={}\", s);\n     };\n }"}, {"sha": "133de1d13e85dab1ccc4cca0ed2dc5a5418bea8c", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: attributes on expressions are experimental\n   --> $DIR/feature-gate-capture_disjoint_fields.rs:8:13\n    |\n-LL |     let c = #[rustc_capture_analysis] || {\n+LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information"}, {"sha": "40ac31b4ad90bd249fe438cc17ad3abc93789ac8", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stdout", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -1 +1,20 @@\n For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: std::string::String,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main), local_id: 1 };`s`;DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0})),\n+        ),\n+        projections: [],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:3 ~ feature_gate_capture_disjoint_fields[317d]::main),\n+                local_id: 52,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#50r),\n+        ),\n+    },\n+}"}, {"sha": "aa251c4526cf3f0424a632559785738430fd165d", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,40 @@\n+// FIXME(arora-aman) add run-pass once 2229 is implemented\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ warning the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+struct Filter {\n+    div: i32,\n+}\n+impl Filter {\n+    fn allowed(&self, x: i32) -> bool {\n+        x % self.div == 1\n+    }\n+}\n+\n+struct Data {\n+    filter: Filter,\n+    list: Vec<i32>,\n+}\n+impl Data {\n+    fn update(&mut self) {\n+        // The closure passed to filter only captures self.filter,\n+        // therefore mutating self.list is allowed.\n+        self.list.retain(\n+        //~^ cannot borrow `self.list` as mutable because it is also borrowed as immutable\n+            #[rustc_capture_analysis]\n+            |v| self.filter.allowed(*v),\n+        );\n+    }\n+}\n+\n+fn main() {\n+    let mut d = Data { filter: Filter { div: 3 }, list: Vec::new() };\n+\n+    for i in 1..10 {\n+        d.list.push(i);\n+    }\n+\n+    d.update();\n+}"}, {"sha": "3eb4decdeae29543ad16a6423ca377ec84adf44d", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/filter-on-struct-member.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0502]: cannot borrow `self.list` as mutable because it is also borrowed as immutable\n+  --> $DIR/filter-on-struct-member.rs:22:9\n+   |\n+LL |           self.list.retain(\n+   |           ^         ------ immutable borrow later used by call\n+   |  _________|\n+   | |\n+LL | |\n+LL | |             #[rustc_capture_analysis]\n+LL | |             |v| self.filter.allowed(*v),\n+   | |             --- ---- first borrow occurs due to use of `self` in closure\n+   | |             |\n+   | |             immutable borrow occurs here\n+LL | |         );\n+   | |_________^ mutable borrow occurs here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "560b2aa3b57b2c322ceb3f10694bd95933f9d83d", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stdout", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,32 @@\n+For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0}): capture information: {\n+    Place {\n+        base_ty: &mut Data,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update), local_id: 1 };`self`;DefId(0:12 ~ filter_on_struct_member[317d]::{impl#1}::update::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: Data,\n+                kind: Deref,\n+            },\n+            Projection {\n+                ty: Filter,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:11 ~ filter_on_struct_member[317d]::{impl#1}::update),\n+                local_id: 13,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#7r),\n+        ),\n+    },\n+}"}, {"sha": "bd8d52d6a3c7e66afdf1b2ef9212c31d030db2cf", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,34 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ warning the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+struct Wrapper {\n+    p: Point,\n+}\n+\n+fn main() {\n+    let mut w = Wrapper { p: Point { x: 10, y: 10 } };\n+\n+    // Only paths that appears within the closure that directly start off\n+    // a variable defined outside the closure are captured.\n+    //\n+    // Therefore `w.p` is captured\n+    // Note that `wp.x` doesn't start off a variable defined outside the closure.\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        let wp = &w.p;\n+        println!(\"{}\", wp.x);\n+    };\n+\n+    // Since `c` captures `w.p` by an ImmBorrow, `w.p.y` can't be mutated.\n+    let py = &mut w.p.y;\n+    c();\n+\n+    *py = 20\n+}"}, {"sha": "bd339a68fa0c62f7a2a18cf9fe354c4726d8883f", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/multilevel-path-1.rs:22:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multilevel-path-1.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "525366cb964f00851a72dab3d48c65f9dbda08c6", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stdout", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Wrapper,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_1[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_1[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: Point,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:8 ~ multilevel_path_1[317d]::main),\n+                local_id: 20,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#37r),\n+        ),\n+    },\n+}"}, {"sha": "a8aca53bc73fd1ea794046b423d5e5f24471fb1e", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,30 @@\n+// FIXME(arora-aman) add run-pass once 2229 is implemented\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ warning the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+struct Wrapper {\n+    p: Point,\n+}\n+\n+fn main() {\n+    let mut w = Wrapper { p: Point { x: 10, y: 10 } };\n+\n+    let c = #[rustc_capture_analysis]\n+        //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        println!(\"{}\", w.p.x);\n+    };\n+\n+    // `c` only captures `w.p.x`, therefore it's safe to mutate `w.p.y`.\n+    let py = &mut w.p.y;\n+    c();\n+\n+    *py = 20\n+}"}, {"sha": "772dfd643eaa000df9350d467bac11f59e0a699c", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/multilevel-path-2.rs:19:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multilevel-path-2.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f89670c8b7f321c963dcba73849dda7e6c40b22c", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stdout", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,35 @@\n+For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Wrapper,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:8 ~ multilevel_path_2[317d]::main), local_id: 1 };`w`;DefId(0:9 ~ multilevel_path_2[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: Point,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:8 ~ multilevel_path_2[317d]::main),\n+                local_id: 35,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#35r),\n+        ),\n+    },\n+}"}, {"sha": "64b69af0f0c1cbfcbf20986a34522a0cef052c36", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,40 @@\n+// FIXME(arora-aman) add run-pass once 2229 is implemented\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ warning the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+// This testcase ensures that nested closures are handles properly\n+// - The nested closure is analyzed first.\n+// - The capture kind of the nested closure is accounted for by the enclosing closure\n+// - Any captured path by the nested closure that starts off a local variable in the enclosing\n+// closure is not listed as a capture of the enclosing closure.\n+\n+fn main() {\n+    let mut p = Point { x: 5, y: 20 };\n+\n+    let mut c1 = #[rustc_capture_analysis]\n+        //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        println!(\"{}\", p.x);\n+        let incr = 10;\n+        let mut c2 = #[rustc_capture_analysis]\n+        //~^ ERROR: attributes on expressions are experimental\n+        || p.y += incr;\n+        c2();\n+        println!(\"{}\", p.y);\n+    };\n+\n+    c1();\n+\n+    let px = &p.x;\n+\n+    println!(\"{}\", px);\n+\n+    c1();\n+}"}, {"sha": "dbd9e3655a3231d2fd51f5db8798825c4b81fdac", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/nested-closure.rs:19:18\n+   |\n+LL |     let mut c1 = #[rustc_capture_analysis]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/nested-closure.rs:24:22\n+   |\n+LL |         let mut c2 = #[rustc_capture_analysis]\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/nested-closure.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "84d87a75bda98e07dbe438e5a76778f9c5e46154", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stdout", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,98 @@\n+For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Point,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    1,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                local_id: 70,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(MutBorrow, '_#109r),\n+        ),\n+    },\n+    Place {\n+        base_ty: i32,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 5 };`incr`;DefId(0:8 ~ nested_closure[317d]::main::{closure#0}::{closure#0})),\n+        ),\n+        projections: [],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                local_id: 72,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#110r),\n+        ),\n+    },\n+}\n+For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:7 ~ nested_closure[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Point,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                local_id: 37,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#114r),\n+        ),\n+    },\n+    Place {\n+        base_ty: Point,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:6 ~ nested_closure[317d]::main), local_id: 1 };`p`;DefId(0:7 ~ nested_closure[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    1,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:6 ~ nested_closure[317d]::main),\n+                local_id: 70,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(MutBorrow, '_#115r),\n+        ),\n+    },\n+}"}, {"sha": "c967c0b72d4098d34444c0cf42408d867d3b7c54", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+struct Point {\n+    x: f32,\n+    y: f32,\n+}\n+\n+struct Pentagon {\n+    points: [Point; 5],\n+}\n+\n+fn main() {\n+    let p1 = Point { x: 10.0, y: 10.0 };\n+    let p2 = Point { x: 7.5, y: 12.5 };\n+    let p3 = Point { x: 15.0, y: 15.0 };\n+    let p4 = Point { x: 12.5, y: 12.5 };\n+    let p5 = Point { x: 20.0, y: 10.0 };\n+\n+    let pent = Pentagon { points: [p1, p2, p3, p4, p5] };\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        println!(\"{}\", pent.points[5].x);\n+    };\n+}"}, {"sha": "84bcc55d99c970978c990b0aee6034d5498eb421", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/path-with-array-access.rs:23:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/path-with-array-access.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b843b0494b93cd9d6225e66ea3be60ef3996210a", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stdout", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Pentagon,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:9 ~ path_with_array_access[317d]::main), local_id: 6 };`pent`;DefId(0:10 ~ path_with_array_access[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: [Point; 5],\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:9 ~ path_with_array_access[317d]::main),\n+                local_id: 83,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#34r),\n+        ),\n+    },\n+}"}, {"sha": "27ab9d6b7359e636af48db87dce0181f341d72d7", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,33 @@\n+// FIXME(arora-aman) add run-pass once 2229 is implemented\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+// Test to ensure that min analysis meets capture kind for all paths captured.\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut p = Point { x: 10, y: 20 };\n+\n+    //\n+    // Requirements:\n+    // p.x -> MutBoorrow\n+    // p   -> ImmBorrow\n+    //\n+    // Requirements met when p is captured via MutBorrow\n+    //\n+    let mut c = #[rustc_capture_analysis]\n+        //~^ ERROR: attributes on expressions are experimental\n+    || {\n+        p.x += 10;\n+        println!(\"{:?}\", p);\n+    };\n+\n+    c();\n+}"}, {"sha": "002d2aaab89a547ab47aca7ccd1596488a6f9470", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/simple-struct-min-capture.rs:25:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/simple-struct-min-capture.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "02129f1acb55c60f45cd9543ded42992ee066893", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stdout", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,45 @@\n+For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: Point,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main), local_id: 1 };`p`;DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: i32,\n+                kind: Field(\n+                    0,\n+                    0,\n+                ),\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n+                local_id: 15,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(MutBorrow, '_#34r),\n+        ),\n+    },\n+    Place {\n+        base_ty: Point,\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main), local_id: 1 };`p`;DefId(0:4 ~ simple_struct_min_capture[317d]::main::{closure#0})),\n+        ),\n+        projections: [],\n+    }: CaptureInfo {\n+        expr_id: Some(\n+            HirId {\n+                owner: DefId(0:3 ~ simple_struct_min_capture[317d]::main),\n+                local_id: 35,\n+            },\n+        ),\n+        capture_kind: ByRef(\n+            UpvarBorrow(ImmBorrow, '_#35r),\n+        ),\n+    },\n+}"}, {"sha": "fc966c4193e99de2af94ef3bab13eddc89a1c316", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.rs?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,28 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+// Test to ensure Index projections are handled properly during capture analysis\n+//\n+// The array should be moved in entirety, even though only some elements are used.\n+\n+fn main() {\n+    let arr : [String; 5] = [\n+        format!(\"A\"),\n+        format!(\"B\"),\n+        format!(\"C\"),\n+        format!(\"D\"),\n+        format!(\"E\")\n+    ];\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+        || {\n+            let [a, b, .., e] = arr;\n+            assert_eq!(a, \"A\");\n+            assert_eq!(b, \"B\");\n+            assert_eq!(e, \"E\");\n+        };\n+\n+    c();\n+}"}, {"sha": "5c6b505d64fd3d1737945423115e10e1b0c2a6d6", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stderr?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/slice-pat.rs:18:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/slice-pat.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ba9b2bca19679f1287fb1a233d97d2114182e4ee", "filename": "src/test/ui/closures/2229_closure_analysis/slice-pat.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fslice-pat.stdout?ref=58e8f8fd2cac4cfcde6c7a1488dd8657dcacaad8", "patch": "@@ -0,0 +1,20 @@\n+For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): Using new-style capture analysis\n+For closure=DefId(0:5 ~ slice_pat[317d]::main::{closure#0}): capture information: {\n+    Place {\n+        base_ty: [std::string::String; 5],\n+        base: Upvar(\n+            UpvarId(HirId { owner: DefId(0:3 ~ slice_pat[317d]::main), local_id: 1 };`arr`;DefId(0:5 ~ slice_pat[317d]::main::{closure#0})),\n+        ),\n+        projections: [\n+            Projection {\n+                ty: std::string::String,\n+                kind: Index,\n+            },\n+        ],\n+    }: CaptureInfo {\n+        expr_id: None,\n+        capture_kind: ByValue(\n+            None,\n+        ),\n+    },\n+}"}]}