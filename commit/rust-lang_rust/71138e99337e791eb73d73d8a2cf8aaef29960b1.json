{"sha": "71138e99337e791eb73d73d8a2cf8aaef29960b1", "node_id": "C_kwDOAAsO6NoAKDcxMTM4ZTk5MzM3ZTc5MWViNzNkNzNkOGEyY2Y4YWFlZjI5OTYwYjE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-24T17:10:39Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-09T17:27:58Z"}, "message": "Make HasTop and HasBottom consts.", "tree": {"sha": "6046dda092e81d7a7a15aef47e65ac4501d2100d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6046dda092e81d7a7a15aef47e65ac4501d2100d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71138e99337e791eb73d73d8a2cf8aaef29960b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71138e99337e791eb73d73d8a2cf8aaef29960b1", "html_url": "https://github.com/rust-lang/rust/commit/71138e99337e791eb73d73d8a2cf8aaef29960b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71138e99337e791eb73d73d8a2cf8aaef29960b1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7b831ac8a897273f78b9f47165cf8e54066ce4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b831ac8a897273f78b9f47165cf8e54066ce4b", "html_url": "https://github.com/rust-lang/rust/commit/f7b831ac8a897273f78b9f47165cf8e54066ce4b"}], "stats": {"total": 58, "additions": 24, "deletions": 34}, "files": [{"sha": "3952f44ad489dfb0f4bd01158ad218de56b5fec4", "filename": "compiler/rustc_mir_dataflow/src/framework/lattice.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71138e99337e791eb73d73d8a2cf8aaef29960b1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71138e99337e791eb73d73d8a2cf8aaef29960b1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs?ref=71138e99337e791eb73d73d8a2cf8aaef29960b1", "patch": "@@ -75,12 +75,12 @@ pub trait MeetSemiLattice: Eq {\n \n /// A set that has a \"bottom\" element, which is less than or equal to any other element.\n pub trait HasBottom {\n-    fn bottom() -> Self;\n+    const BOTTOM: Self;\n }\n \n /// A set that has a \"top\" element, which is greater than or equal to any other element.\n pub trait HasTop {\n-    fn top() -> Self;\n+    const TOP: Self;\n }\n \n /// A `bool` is a \"two-point\" lattice with `true` as the top element and `false` as the bottom:\n@@ -113,15 +113,11 @@ impl MeetSemiLattice for bool {\n }\n \n impl HasBottom for bool {\n-    fn bottom() -> Self {\n-        false\n-    }\n+    const BOTTOM: Self = false;\n }\n \n impl HasTop for bool {\n-    fn top() -> Self {\n-        true\n-    }\n+    const TOP: Self = true;\n }\n \n /// A tuple (or list) of lattices is itself a lattice whose least upper bound is the concatenation\n@@ -274,13 +270,9 @@ impl<T: Clone + Eq> MeetSemiLattice for FlatSet<T> {\n }\n \n impl<T> HasBottom for FlatSet<T> {\n-    fn bottom() -> Self {\n-        Self::Bottom\n-    }\n+    const BOTTOM: Self = Self::Bottom;\n }\n \n impl<T> HasTop for FlatSet<T> {\n-    fn top() -> Self {\n-        Self::Top\n-    }\n+    const TOP: Self = Self::Top;\n }"}, {"sha": "e830b8c715777ac1e2b216c6e59eb658118e9d3c", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71138e99337e791eb73d73d8a2cf8aaef29960b1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71138e99337e791eb73d73d8a2cf8aaef29960b1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=71138e99337e791eb73d73d8a2cf8aaef29960b1", "patch": "@@ -74,11 +74,11 @@ pub trait ValueAnalysis<'tcx> {\n             StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n                 // StorageLive leaves the local in an uninitialized state.\n                 // StorageDead makes it UB to access the local afterwards.\n-                state.flood_with(Place::from(*local).as_ref(), self.map(), Self::Value::bottom());\n+                state.flood_with(Place::from(*local).as_ref(), self.map(), Self::Value::BOTTOM);\n             }\n             StatementKind::Deinit(box place) => {\n                 // Deinit makes the place uninitialized.\n-                state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n+                state.flood_with(place.as_ref(), self.map(), Self::Value::BOTTOM);\n             }\n             StatementKind::Retag(..) => {\n                 // We don't track references.\n@@ -154,7 +154,7 @@ pub trait ValueAnalysis<'tcx> {\n             Rvalue::CopyForDeref(place) => self.handle_operand(&Operand::Copy(*place), state),\n             Rvalue::Ref(..) | Rvalue::AddressOf(..) => {\n                 // We don't track such places.\n-                ValueOrPlace::top()\n+                ValueOrPlace::TOP\n             }\n             Rvalue::Repeat(..)\n             | Rvalue::ThreadLocalRef(..)\n@@ -168,7 +168,7 @@ pub trait ValueAnalysis<'tcx> {\n             | Rvalue::Aggregate(..)\n             | Rvalue::ShallowInitBox(..) => {\n                 // No modification is possible through these r-values.\n-                ValueOrPlace::top()\n+                ValueOrPlace::TOP\n             }\n         }\n     }\n@@ -196,7 +196,7 @@ pub trait ValueAnalysis<'tcx> {\n                 self.map()\n                     .find(place.as_ref())\n                     .map(ValueOrPlace::Place)\n-                    .unwrap_or(ValueOrPlace::top())\n+                    .unwrap_or(ValueOrPlace::TOP)\n             }\n         }\n     }\n@@ -214,7 +214,7 @@ pub trait ValueAnalysis<'tcx> {\n         _constant: &Constant<'tcx>,\n         _state: &mut State<Self::Value>,\n     ) -> Self::Value {\n-        Self::Value::top()\n+        Self::Value::TOP\n     }\n \n     /// The effect of a successful function call return should not be\n@@ -229,7 +229,7 @@ pub trait ValueAnalysis<'tcx> {\n                 // Effect is applied by `handle_call_return`.\n             }\n             TerminatorKind::Drop { place, .. } => {\n-                state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n+                state.flood_with(place.as_ref(), self.map(), Self::Value::BOTTOM);\n             }\n             TerminatorKind::Yield { .. } => {\n                 // They would have an effect, but are not allowed in this phase.\n@@ -307,7 +307,7 @@ impl<'tcx, T: ValueAnalysis<'tcx>> AnalysisDomain<'tcx> for ValueAnalysisWrapper\n     fn initialize_start_block(&self, body: &Body<'tcx>, state: &mut Self::Domain) {\n         // The initial state maps all tracked places of argument projections to \u22a4 and the rest to \u22a5.\n         assert!(matches!(state.0, StateData::Unreachable));\n-        let values = IndexVec::from_elem_n(T::Value::bottom(), self.0.map().value_count);\n+        let values = IndexVec::from_elem_n(T::Value::BOTTOM, self.0.map().value_count);\n         *state = State(StateData::Reachable(values));\n         for arg in body.args_iter() {\n             state.flood(PlaceRef { local: arg, projection: &[] }, self.0.map());\n@@ -437,7 +437,7 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n     }\n \n     pub fn flood_all(&mut self) {\n-        self.flood_all_with(V::top())\n+        self.flood_all_with(V::TOP)\n     }\n \n     pub fn flood_all_with(&mut self, value: V) {\n@@ -455,7 +455,7 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n     }\n \n     pub fn flood(&mut self, place: PlaceRef<'_>, map: &Map) {\n-        self.flood_with(place, map, V::top())\n+        self.flood_with(place, map, V::TOP)\n     }\n \n     pub fn flood_discr_with(&mut self, place: PlaceRef<'_>, map: &Map, value: V) {\n@@ -468,7 +468,7 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n     }\n \n     pub fn flood_discr(&mut self, place: PlaceRef<'_>, map: &Map) {\n-        self.flood_discr_with(place, map, V::top())\n+        self.flood_discr_with(place, map, V::TOP)\n     }\n \n     /// Low-level method that assigns to a place.\n@@ -538,26 +538,26 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n \n     /// Retrieve the value stored for a place, or \u22a4 if it is not tracked.\n     pub fn get(&self, place: PlaceRef<'_>, map: &Map) -> V {\n-        map.find(place).map(|place| self.get_idx(place, map)).unwrap_or(V::top())\n+        map.find(place).map(|place| self.get_idx(place, map)).unwrap_or(V::TOP)\n     }\n \n     /// Retrieve the value stored for a place, or \u22a4 if it is not tracked.\n     pub fn get_discr(&self, place: PlaceRef<'_>, map: &Map) -> V {\n         match map.find_discr(place) {\n             Some(place) => self.get_idx(place, map),\n-            None => V::top(),\n+            None => V::TOP,\n         }\n     }\n \n     /// Retrieve the value stored for a place index, or \u22a4 if it is not tracked.\n     pub fn get_idx(&self, place: PlaceIndex, map: &Map) -> V {\n         match &self.0 {\n             StateData::Reachable(values) => {\n-                map.places[place].value_index.map(|v| values[v].clone()).unwrap_or(V::top())\n+                map.places[place].value_index.map(|v| values[v].clone()).unwrap_or(V::TOP)\n             }\n             StateData::Unreachable => {\n                 // Because this is unreachable, we can return any value we want.\n-                V::bottom()\n+                V::BOTTOM\n             }\n         }\n     }\n@@ -909,9 +909,7 @@ pub enum ValueOrPlace<V> {\n }\n \n impl<V: HasTop> ValueOrPlace<V> {\n-    pub fn top() -> Self {\n-        ValueOrPlace::Value(V::top())\n-    }\n+    pub const TOP: Self = ValueOrPlace::Value(V::TOP);\n }\n \n /// The set of projection elements that can be used by a tracked place."}, {"sha": "5ef1bd00a6f9a7108971997dd8eeb06c41f1be16", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71138e99337e791eb73d73d8a2cf8aaef29960b1/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71138e99337e791eb73d73d8a2cf8aaef29960b1/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=71138e99337e791eb73d73d8a2cf8aaef29960b1", "patch": "@@ -208,8 +208,8 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                     _ => unreachable!(),\n                 }\n                 .map(|result| ValueOrPlace::Value(self.wrap_immediate(result, *ty)))\n-                .unwrap_or(ValueOrPlace::top()),\n-                _ => ValueOrPlace::top(),\n+                .unwrap_or(ValueOrPlace::TOP),\n+                _ => ValueOrPlace::TOP,\n             },\n             Rvalue::BinaryOp(op, box (left, right)) => {\n                 // Overflows must be ignored here."}]}