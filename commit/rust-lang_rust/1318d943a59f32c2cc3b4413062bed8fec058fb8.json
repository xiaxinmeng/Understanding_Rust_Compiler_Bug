{"sha": "1318d943a59f32c2cc3b4413062bed8fec058fb8", "node_id": "C_kwDOAAsO6NoAKDEzMThkOTQzYTU5ZjMyYzJjYzNiNDQxMzA2MmJlZDhmZWMwNThmYjg", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-05T01:20:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-05T01:20:32Z"}, "message": "Rollup merge of #96603 - Alexendoo:const-generics-tests, r=Mark-Simulacrum\n\nEnable full revision in const generics ui tests\n\nThe ICEs no longer occur since https://github.com/rust-lang/rust/pull/95776 so the revisions can be reenabled\n\nAlso adds some regression tests for issues that no longer ICE because of it\n\ncloses #77357\ncloses #78180\ncloses #83993", "tree": {"sha": "68de6e76265b9dc46cbc8104cad8bc3b8a7f2221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68de6e76265b9dc46cbc8104cad8bc3b8a7f2221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1318d943a59f32c2cc3b4413062bed8fec058fb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJicyZgCRBK7hj4Ov3rIwAAJKoIABx/f2/4r3tdJFq4JQ0e8X7V\nonbHsmiaZ+WSZK5UK/3RnQSnFvTtIcoWiqhNGi0HKQRFTvjPYgZ261FodIvRiNME\nb4yYAmRjWSO96wS2+zsJHCYUZH12pkZjwTco5wGSRmrj3Pngxe6SCuZtXxmBd0EL\newtinKohZhBQj2ogv1fkxa0KHcO84f+6tsv1tLp8Y40LlXZieytrd0LoFQ3YqBUg\np5woFvkDWLTHKIzst9KGo9d1BUtUjrUpURz9OWE+BN/lG1/VRqsUB6bcSktsz39r\nzh2U4TpwWuXVr6v2lI1yXsTy3Fm7nXCL/lushv/CWevUiDw6erTGO04/LHQ8pYM=\n=rKXy\n-----END PGP SIGNATURE-----\n", "payload": "tree 68de6e76265b9dc46cbc8104cad8bc3b8a7f2221\nparent 4c60a0ea5b2385d7400df9db1ad04e96f2a4c154\nparent 0571157a2662ca7540ad8af0e1dc9512016bd6c6\nauthor Yuki Okushi <jtitor@2k36.org> 1651713632 +0900\ncommitter GitHub <noreply@github.com> 1651713632 +0900\n\nRollup merge of #96603 - Alexendoo:const-generics-tests, r=Mark-Simulacrum\n\nEnable full revision in const generics ui tests\n\nThe ICEs no longer occur since https://github.com/rust-lang/rust/pull/95776 so the revisions can be reenabled\n\nAlso adds some regression tests for issues that no longer ICE because of it\n\ncloses #77357\ncloses #78180\ncloses #83993\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1318d943a59f32c2cc3b4413062bed8fec058fb8", "html_url": "https://github.com/rust-lang/rust/commit/1318d943a59f32c2cc3b4413062bed8fec058fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1318d943a59f32c2cc3b4413062bed8fec058fb8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c60a0ea5b2385d7400df9db1ad04e96f2a4c154", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c60a0ea5b2385d7400df9db1ad04e96f2a4c154", "html_url": "https://github.com/rust-lang/rust/commit/4c60a0ea5b2385d7400df9db1ad04e96f2a4c154"}, {"sha": "0571157a2662ca7540ad8af0e1dc9512016bd6c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0571157a2662ca7540ad8af0e1dc9512016bd6c6", "html_url": "https://github.com/rust-lang/rust/commit/0571157a2662ca7540ad8af0e1dc9512016bd6c6"}], "stats": {"total": 362, "additions": 291, "deletions": 71}, "files": [{"sha": "dbbdb2a0ce3311fba5e7b5d0a3cd44d94705862a", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -0,0 +1,162 @@\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n+   |\n+LL |     let _: [u8; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n+   |\n+LL |     let _: [u8; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n+   |\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n+   |\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:13:12\n+   |\n+LL |     let _: [u8; foo::<T>()];\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:15:12\n+   |\n+LL |     let _: [u8; bar::<N>()];\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:36:12\n+   |\n+LL |     let _: Foo<{ foo::<T>() }>;\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:38:12\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:25:17\n+   |\n+LL |     let _ = [0; foo::<T>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:27:17\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:47:19\n+   |\n+LL |     let _ = Foo::<{ foo::<T>() }>;\n+   |                   ^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:49:19\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                   ^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:52:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:55:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "6ca9a2a48592ce85e75d364ff68d6f878e7040ae", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -8,7 +8,7 @@ LL |     let _: [u8; foo::<T>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:14:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n@@ -17,7 +17,7 @@ LL |     let _: [u8; bar::<N>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -26,7 +26,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n+  --> $DIR/const-arg-in-const-arg.rs:20:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n    |                       ^^\n@@ -35,7 +35,7 @@ LL |     let _: [u8; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:19:23\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -44,7 +44,7 @@ LL |     let _: [u8; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:21:23\n+  --> $DIR/const-arg-in-const-arg.rs:23:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n    |                       ^^\n@@ -53,7 +53,7 @@ LL |     let _: [u8; baz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:24:23\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n@@ -62,7 +62,7 @@ LL |     let _ = [0; bar::<N>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -71,7 +71,7 @@ LL |     let _ = [0; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:28:23\n+  --> $DIR/const-arg-in-const-arg.rs:32:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n    |                       ^^\n@@ -80,7 +80,7 @@ LL |     let _ = [0; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:29:23\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -89,7 +89,7 @@ LL |     let _ = [0; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:31:23\n+  --> $DIR/const-arg-in-const-arg.rs:35:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n    |                       ^^\n@@ -98,7 +98,7 @@ LL |     let _ = [0; baz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:32:24\n+  --> $DIR/const-arg-in-const-arg.rs:36:24\n    |\n LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n@@ -107,7 +107,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n@@ -116,7 +116,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:35:24\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -125,7 +125,7 @@ LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:37:24\n+  --> $DIR/const-arg-in-const-arg.rs:43:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    |                        ^^\n@@ -134,7 +134,7 @@ LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -143,7 +143,7 @@ LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:40:24\n+  --> $DIR/const-arg-in-const-arg.rs:46:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    |                        ^^\n@@ -152,7 +152,7 @@ LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:41:27\n+  --> $DIR/const-arg-in-const-arg.rs:47:27\n    |\n LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n@@ -161,7 +161,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:42:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n@@ -170,7 +170,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:44:27\n+  --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -179,7 +179,7 @@ LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:46:27\n+  --> $DIR/const-arg-in-const-arg.rs:54:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    |                           ^^\n@@ -188,7 +188,7 @@ LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:47:27\n+  --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n@@ -197,7 +197,7 @@ LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:49:27\n+  --> $DIR/const-arg-in-const-arg.rs:57:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    |                           ^^\n@@ -206,7 +206,7 @@ LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:14:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^\n@@ -217,7 +217,7 @@ LL |     let _: [u8; bar::<{ N }>()];\n    |                       +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -229,7 +229,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:19:23\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -241,7 +241,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:24:23\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^\n@@ -252,7 +252,7 @@ LL |     let _ = [0; bar::<{ N }>()];\n    |                       +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -264,7 +264,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:29:23\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -276,7 +276,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^\n@@ -287,7 +287,7 @@ LL |     let _: Foo<{ bar::<{ N }>() }>;\n    |                        +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:35:24\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -299,7 +299,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -311,15 +311,15 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/const-arg-in-const-arg.rs:23:17\n+  --> $DIR/const-arg-in-const-arg.rs:25:17\n    |\n LL |     let _ = [0; foo::<T>()];\n    |                 ^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:42:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^\n@@ -330,7 +330,7 @@ LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n    |                           +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:27\n+  --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -342,7 +342,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:47:27\n+  --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^"}, {"sha": "44a4f560a248af3ebc2fdc225e7dec11ee8b75f9", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -1,7 +1,7 @@\n-// revisions: min\n-// FIXME(generic_const_exprs): This test currently causes an ICE because\n-// we don't yet correctly deal with lifetimes, reenable this test once\n-// this is fixed.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(generic_const_exprs))]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n const fn foo<T>() -> usize { std::mem::size_of::<T>() }\n const fn bar<const N: usize>() -> usize { N }\n@@ -10,43 +10,51 @@ const fn baz<'a>(_: &'a ()) -> usize where &'a (): Sized { 13 }\n \n struct Foo<const N: usize>;\n fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n-    let _: [u8; foo::<T>()]; //~ ERROR generic parameters may not\n-    let _: [u8; bar::<N>()]; //~ ERROR generic parameters may not\n-                             //~^ ERROR unresolved item provided when a constant was expected\n-    let _: [u8; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; foo::<T>()]; //[min]~ ERROR generic parameters may not\n+                             //[full]~^ ERROR unconstrained generic constant\n+    let _: [u8; bar::<N>()]; //[min]~ ERROR generic parameters may not\n+                             //[min]~^ ERROR unresolved item provided when a constant was expected\n+                             //[full]~^^ ERROR unconstrained generic constant\n+    let _: [u8; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n-    let _: [u8; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _: [u8; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n \n-    let _ = [0; foo::<T>()]; //~ ERROR constant expression depends on a generic parameter\n-    let _ = [0; bar::<N>()]; //~ ERROR generic parameters may not\n-                             //~^ ERROR unresolved item provided when a constant was expected\n-    let _ = [0; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; foo::<T>()]; //[min]~ ERROR constant expression depends on a generic parameter\n+                             //[full]~^ ERROR unconstrained generic constant\n+    let _ = [0; bar::<N>()]; //[min]~ ERROR generic parameters may not\n+                             //[min]~^ ERROR unresolved item provided when a constant was expected\n+                             //[full]~^^ ERROR unconstrained generic constant\n+    let _ = [0; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n-    let _ = [0; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _ = [0; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n-    let _: Foo<{ foo::<T>() }>; //~ ERROR generic parameters may not\n-    let _: Foo<{ bar::<N>() }>; //~ ERROR generic parameters may not\n-                                //~^ ERROR unresolved item provided when a constant was expected\n-    let _: Foo<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _: Foo<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n+                                //[full]~^ ERROR unconstrained generic constant\n+    let _: Foo<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n+                                //[min]~^ ERROR unresolved item provided when a constant was expected\n+                                //[full]~^^ ERROR unconstrained generic constant\n+    let _: Foo<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                     //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n-    let _: Foo<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _: Foo<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                     //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n-    let _ = Foo::<{ foo::<T>() }>; //~ ERROR generic parameters may not\n-    let _ = Foo::<{ bar::<N>() }>; //~ ERROR generic parameters may not\n-                                   //~^ ERROR unresolved item provided when a constant was expected\n-    let _ = Foo::<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _ = Foo::<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n+                                   //[full]~^ ERROR unconstrained generic constant\n+    let _ = Foo::<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n+                                   //[min]~^ ERROR unresolved item provided when a constant was expected\n+                                   //[full]~^^ ERROR unconstrained generic constant\n+    let _ = Foo::<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                        //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n-    let _ = Foo::<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _ = Foo::<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                        //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n }\n \n fn main() {}"}, {"sha": "f1f3a9c3de03b0c3e041c3c1d7db672fa5ed6fe4", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.min.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-argument-non-static-lifetime.rs:15:17\n+   |\n+LL |         let _: &'a ();\n+   |                 ^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2792bb7df85471f544b488f4b6f8eb374f71d3cd", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -1,6 +1,8 @@\n-// run-pass\n-// revisions: full\n-// FIXME(#75323) Omitted min revision for now due to ICE.\n+// [full] run-pass\n+// revisions: full min\n+\n+// regression test for #78180\n+// compile-flags: -Zsave-analysis\n \n #![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n@@ -10,7 +12,7 @@ fn test<const N: usize>() {}\n \n fn wow<'a>() -> &'a () {\n     test::<{\n-        let _: &'a ();\n+        let _: &'a (); //[min]~ ERROR a non-static lifetime\n         3\n     }>();\n     &()"}, {"sha": "3cb8d3846ab7c62096ece221024c778fe366d6cb", "filename": "src/test/ui/const-generics/issues/issue-775377.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.rs?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -0,0 +1,11 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T> {}\n+\n+fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n+    //~^ ERROR overly complex generic constant\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "83946df4203d8fab702ebde9832438ee448d6370", "filename": "src/test/ui/const-generics/issues/issue-775377.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.stderr?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -0,0 +1,11 @@\n+error: overly complex generic constant\n+  --> $DIR/issue-775377.rs:6:46\n+   |\n+LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n+\n+error: aborting due to previous error\n+"}, {"sha": "f2f05d9526bc5f898516a4c6b3ca909432496c1c", "filename": "src/test/ui/const-generics/issues/issue-83993.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318d943a59f32c2cc3b4413062bed8fec058fb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs?ref=1318d943a59f32c2cc3b4413062bed8fec058fb8", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn bug<'a>()\n+where\n+    for<'b> [(); {\n+        let x: &'b ();\n+        0\n+    }]:\n+{}\n+\n+fn main() {}"}]}