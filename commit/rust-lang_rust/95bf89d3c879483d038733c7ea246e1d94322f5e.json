{"sha": "95bf89d3c879483d038733c7ea246e1d94322f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YmY4OWQzYzg3OTQ4M2QwMzg3MzNjN2VhMjQ2ZTFkOTQzMjJmNWU=", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2021-08-31T00:47:42Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2021-08-31T01:33:12Z"}, "message": "fix: Keep comments & attrs from enum variant", "tree": {"sha": "181525ecfaad1fe7d69243453638abd503f588f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/181525ecfaad1fe7d69243453638abd503f588f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95bf89d3c879483d038733c7ea246e1d94322f5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEosE1rSpoNOieSVDGiUkQv4PnA0cFAmEthtkACgkQiUkQv4Pn\nA0cStAv/aZMJyRZ3vy66f3SFUVH0Jt/EqStMkDjOX+uELAfHF1ccmhPbdCNoAFqY\ntwCRNT9LG8grm1A7yx9pbnnwC/A3hrEdH+nK5RHxL2wqpdSdYUiwijOrde05rSIS\nas+FWNKm8yGcO57e6uoV4XfcajemlUdR1dgs7v6muNAHMJsqV697YcpmSy1P80SP\nr3axh2yYI1bRUJlNTovohMymTwFuKwn64xE58ZcIpv/vn2poSe2aijdBFVz6J1Wg\nr3Y9azopBAff2VHPWN3cPSBKqlSPk+cpcjxNdmqwa/NJbVIIBTZ1MLVi0x2Kd6wf\nmUT9t5qs5sPWA+v4ZC2Qd/7XcrCdz5froFkd3jYBTSDMt1xnywGs4fIqdX+obEB5\nIxRypY/5/6EmqyUcYnT3Aaq2XqkIUrOhwRQ9RIjuHEIgZ/iX32X1K6XVfEGsgvz3\nU6L3hbBJk+nDkZVaHQh+XbBsesNbDIcE5dEB0scXSYmlesF+5PKgANgdaQYuy5TM\nP3tKGVIg\n=L4Np\n-----END PGP SIGNATURE-----", "payload": "tree 181525ecfaad1fe7d69243453638abd503f588f6\nparent 681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d\nauthor DropDemBits <r3usrlnd@gmail.com> 1630370862 -0400\ncommitter DropDemBits <r3usrlnd@gmail.com> 1630373592 -0400\n\nfix: Keep comments & attrs from enum variant\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95bf89d3c879483d038733c7ea246e1d94322f5e", "html_url": "https://github.com/rust-lang/rust/commit/95bf89d3c879483d038733c7ea246e1d94322f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95bf89d3c879483d038733c7ea246e1d94322f5e/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d", "html_url": "https://github.com/rust-lang/rust/commit/681efe6dcb4fa8bd20c16a2166d6b0f75b0b9f8d"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "37a3dedb1bb2b965a94f061fc6e99d51fae37ed4", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 86, "deletions": 3, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/95bf89d3c879483d038733c7ea246e1d94322f5e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95bf89d3c879483d038733c7ea246e1d94322f5e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=95bf89d3c879483d038733c7ea246e1d94322f5e", "patch": "@@ -15,11 +15,12 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{\n-        self, edit_in_place::Indent, make, AstNode, AttrsOwner, GenericParamsOwner, NameOwner,\n-        TypeBoundsOwner, VisibilityOwner,\n+        self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, AttrsOwner,\n+        GenericParamsOwner, NameOwner, TypeBoundsOwner, VisibilityOwner,\n     },\n     match_ast,\n     ted::{self, Position},\n+    SyntaxKind::*,\n     SyntaxNode, T,\n };\n \n@@ -161,6 +162,7 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &Va\n \n fn create_struct_def(\n     variant_name: ast::Name,\n+    variant: &ast::Variant,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     enum_: &ast::Enum,\n ) -> ast::Struct {\n@@ -204,7 +206,34 @@ fn create_struct_def(\n         make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n             .clone_for_update();\n \n-    // copy attributes\n+    // FIXME: Consider making this an actual function somewhere (like in `AttrsOwnerEdit`) after some deliberation\n+    let attrs_and_docs = |node: &SyntaxNode| {\n+        let mut select_next_ws = false;\n+        node.children_with_tokens().filter(move |child| {\n+            let accept = match child.kind() {\n+                ATTR | COMMENT => {\n+                    select_next_ws = true;\n+                    return true;\n+                }\n+                WHITESPACE if select_next_ws => true,\n+                _ => false,\n+            };\n+            select_next_ws = false;\n+\n+            accept\n+        })\n+    };\n+\n+    // copy attributes & comments from variant\n+    let variant_attrs = attrs_and_docs(variant.syntax())\n+        .map(|tok| match tok.kind() {\n+            WHITESPACE => make::tokens::single_newline().into(),\n+            _ => tok.into(),\n+        })\n+        .collect();\n+    ted::insert_all(Position::first_child_of(strukt.syntax()), variant_attrs);\n+\n+    // copy attributes from enum\n     ted::insert_all(\n         Position::first_child_of(strukt.syntax()),\n         enum_.attrs().map(|it| it.syntax().clone_for_update().into()).collect(),\n@@ -497,6 +526,60 @@ enum A { One(One) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_on_variant_struct() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A {\n+    /* comment */\n+    // other\n+    /// comment\n+    #[attr]\n+    $0One {\n+        a: u32\n+    }\n+}\"#,\n+            r#\"\n+/* comment */\n+// other\n+/// comment\n+#[attr]\n+struct One {\n+    pub a: u32\n+}\n+\n+enum A {\n+    One(One)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_on_variant_tuple() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A {\n+    /* comment */\n+    // other\n+    /// comment\n+    #[attr]\n+    $0One(u32, u32)\n+}\"#,\n+            r#\"\n+/* comment */\n+// other\n+/// comment\n+#[attr]\n+struct One(pub u32, pub u32);\n+\n+enum A {\n+    One(One)\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_keep_existing_visibility_named() {\n         check_assist("}]}