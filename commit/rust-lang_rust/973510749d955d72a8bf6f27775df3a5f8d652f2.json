{"sha": "973510749d955d72a8bf6f27775df3a5f8d652f2", "node_id": "C_kwDOAAsO6NoAKDk3MzUxMDc0OWQ5NTVkNzJhOGJmNmYyNzc3NWRmM2E1ZjhkNjUyZjI", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-20T06:54:39Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-20T06:54:39Z"}, "message": "remove unnecessary string searchings\n\nremove unnecessary string searchings for checking if function arguments have `&` and `&mut`", "tree": {"sha": "459c3a470750c5f20636b375a0692ef9ce6c2aab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/459c3a470750c5f20636b375a0692ef9ce6c2aab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/973510749d955d72a8bf6f27775df3a5f8d652f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/973510749d955d72a8bf6f27775df3a5f8d652f2", "html_url": "https://github.com/rust-lang/rust/commit/973510749d955d72a8bf6f27775df3a5f8d652f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/973510749d955d72a8bf6f27775df3a5f8d652f2/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "168834159e70570d0a87eaf8358d00b690555d5a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/973510749d955d72a8bf6f27775df3a5f8d652f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/973510749d955d72a8bf6f27775df3a5f8d652f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=973510749d955d72a8bf6f27775df3a5f8d652f2", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         // It only make sense when suggesting dereferences for arguments\n-        let ObligationCauseCode::FunctionArgumentObligation { .. } = obligation.cause.code() else {\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else {\n             return false;\n         };\n         let param_env = obligation.param_env;\n@@ -702,19 +702,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n                 }) {\n                     if steps > 0 {\n-                        if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                            // Don't care about `&mut` because `DerefMut` is used less\n-                            // often and user will not expect autoderef happens.\n-                            if src.starts_with('&') && !src.starts_with(\"&mut \") {\n-                                let derefs = \"*\".repeat(steps);\n-                                err.span_suggestion(\n-                                    span,\n-                                    \"consider dereferencing here\",\n-                                    format!(\"&{}{}\", derefs, &src[1..]),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                                return true;\n-                            }\n+                        // Don't care about `&mut` because `DerefMut` is used less\n+                        // often and user will not expect autoderef happens.\n+                        if let Some(hir::Node::Expr(hir::Expr {\n+                            kind:\n+                                hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, expr),\n+                            ..\n+                        })) = self.tcx.hir().find(*arg_hir_id)\n+                        {\n+                            let derefs = \"*\".repeat(steps);\n+                            err.span_suggestion_verbose(\n+                                expr.span.shrink_to_lo(),\n+                                \"consider dereferencing here\",\n+                                derefs,\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return true;\n                         }\n                     }\n                 } else if real_trait_pred != trait_pred {"}, {"sha": "d256431c4cca8599104a7ece6982fd3bfd0d78be", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/973510749d955d72a8bf6f27775df3a5f8d652f2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/973510749d955d72a8bf6f27775df3a5f8d652f2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=973510749d955d72a8bf6f27775df3a5f8d652f2", "patch": "@@ -2,10 +2,8 @@ error[E0277]: the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n   --> $DIR/issue-39029.rs:16:37\n    |\n LL |     let _errors = TcpListener::bind(&bad);\n-   |                   ----------------- ^^^^\n-   |                   |                 |\n-   |                   |                 the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n-   |                   |                 help: consider dereferencing here: `&*bad`\n+   |                   ----------------- ^^^^ the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n+   |                   |\n    |                   required by a bound introduced by this call\n    |\n    = note: required because of the requirements on the impl of `ToSocketAddrs` for `&NoToSocketAddrs`\n@@ -14,6 +12,10 @@ note: required by a bound in `TcpListener::bind`\n    |\n LL |     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\n    |                    ^^^^^^^^^^^^^ required by this bound in `TcpListener::bind`\n+help: consider dereferencing here\n+   |\n+LL |     let _errors = TcpListener::bind(&*bad);\n+   |                                      +\n \n error: aborting due to previous error\n "}, {"sha": "e47ae0b65af0e62e07b084173955bb60dd9c3660", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/973510749d955d72a8bf6f27775df3a5f8d652f2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/973510749d955d72a8bf6f27775df3a5f8d652f2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=973510749d955d72a8bf6f27775df3a5f8d652f2", "patch": "@@ -2,17 +2,19 @@ error[E0277]: the trait bound `&String: SomeTrait` is not satisfied\n   --> $DIR/issue-62530.rs:13:26\n    |\n LL |     takes_type_parameter(&string);  // Error\n-   |     -------------------- ^^^^^^^\n-   |     |                    |\n-   |     |                    the trait `SomeTrait` is not implemented for `&String`\n-   |     |                    help: consider dereferencing here: `&*string`\n+   |     -------------------- ^^^^^^^ the trait `SomeTrait` is not implemented for `&String`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `takes_type_parameter`\n   --> $DIR/issue-62530.rs:4:44\n    |\n LL | fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n    |                                            ^^^^^^^^^ required by this bound in `takes_type_parameter`\n+help: consider dereferencing here\n+   |\n+LL |     takes_type_parameter(&*string);  // Error\n+   |                           +\n \n error: aborting due to previous error\n "}, {"sha": "6a4d4b8d5212f0aa472934f06f78f85e4639cdb0", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/973510749d955d72a8bf6f27775df3a5f8d652f2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/973510749d955d72a8bf6f27775df3a5f8d652f2/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=973510749d955d72a8bf6f27775df3a5f8d652f2", "patch": "@@ -2,17 +2,19 @@ error[E0277]: the trait bound `&Baz: Happy` is not satisfied\n   --> $DIR/multiple-0.rs:34:9\n    |\n LL |     foo(&baz);\n-   |     --- ^^^^\n-   |     |   |\n-   |     |   the trait `Happy` is not implemented for `&Baz`\n-   |     |   help: consider dereferencing here: `&***baz`\n+   |     --- ^^^^ the trait `Happy` is not implemented for `&Baz`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/multiple-0.rs:30:26\n    |\n LL | fn foo<T>(_: T) where T: Happy {}\n    |                          ^^^^^ required by this bound in `foo`\n+help: consider dereferencing here\n+   |\n+LL |     foo(&***baz);\n+   |          +++\n \n error: aborting due to previous error\n "}]}