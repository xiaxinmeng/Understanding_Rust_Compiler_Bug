{"sha": "ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMWQwNjVmZmEzNjA2YjYxMjAxZWY2OWZlYzNhZDBiZmM1YjJmN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-06T18:57:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-06T18:57:57Z"}, "message": "Auto merge of #43397 - GuillaumeGomez:unused-union-field, r=petrochenkov\n\nDon't warn on unused field on union\n\nFixes #43393.", "tree": {"sha": "9e000dde2eb7a305f471cb6d3cb5609593018d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e000dde2eb7a305f471cb6d3cb5609593018d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "html_url": "https://github.com/rust-lang/rust/commit/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be69520b9ae32c9242207fd5bc97888cd3fc73bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/be69520b9ae32c9242207fd5bc97888cd3fc73bf", "html_url": "https://github.com/rust-lang/rust/commit/be69520b9ae32c9242207fd5bc97888cd3fc73bf"}, {"sha": "f94157eb616d18655809ea60af870e1888476c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f94157eb616d18655809ea60af870e1888476c9a", "html_url": "https://github.com/rust-lang/rust/commit/f94157eb616d18655809ea60af870e1888476c9a"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "a525b4e13b78dd2b1cda110cc18da2d678f02e3d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "patch": "@@ -13,7 +13,7 @@\n // from live codes are live, and everything else is dead.\n \n use hir::map as hir_map;\n-use hir::{self, PatKind};\n+use hir::{self, Item_, PatKind};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir::itemlikevisit::ItemLikeVisitor;\n \n@@ -189,6 +189,22 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         self.struct_has_extern_repr = had_extern_repr;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n+\n+    fn mark_as_used_if_union(&mut self, did: DefId, fields: &hir::HirVec<hir::Field>) {\n+        if let Some(node_id) = self.tcx.hir.as_local_node_id(did) {\n+            if let Some(hir_map::NodeItem(item)) = self.tcx.hir.find(node_id) {\n+                if let Item_::ItemUnion(ref variant, _) = item.node {\n+                    if variant.fields().len() > 1 {\n+                        for field in variant.fields() {\n+                            if fields.iter().find(|x| x.name.node == field.name).is_some() {\n+                                self.live_symbols.insert(field.id);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n@@ -231,6 +247,13 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             hir::ExprTupField(ref lhs, idx) => {\n                 self.handle_tup_field_access(&lhs, idx.node);\n             }\n+            hir::ExprStruct(_, ref fields, _) => {\n+                if let ty::TypeVariants::TyAdt(ref def, _) = self.tables.expr_ty(expr).sty {\n+                    if def.is_union() {\n+                        self.mark_as_used_if_union(def.did, fields);\n+                    }\n+                }\n+            }\n             _ => ()\n         }\n \n@@ -561,7 +584,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n             self.warn_dead_code(field.id, field.span,\n                                 field.name, \"field\");\n         }\n-\n         intravisit::walk_struct_field(self, field);\n     }\n \n@@ -603,6 +625,9 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n-    let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };\n+    let mut visitor = DeadVisitor {\n+        tcx: tcx,\n+        live_symbols: live_symbols,\n+    };\n     intravisit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "021f57e3eee0aa690218bdc4fa636a580e4a5d62", "filename": "src/test/ui/union-fields.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/src%2Ftest%2Fui%2Funion-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/src%2Ftest%2Fui%2Funion-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-fields.rs?ref=ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+union U1 {\n+    a: u8, // should not be reported\n+    b: u8, // should not be reported\n+    c: u8, // should be reported\n+}\n+union U2 {\n+    a: u8, // should be reported\n+    b: u8, // should not be reported\n+    c: u8, // should not be reported\n+}\n+union NoDropLike { a: u8 } // should be reported as unused\n+\n+union U {\n+    a: u8, // should not be reported\n+    b: u8, // should not be reported\n+    c: u8, // should be reported\n+}\n+type A = U;\n+\n+fn main() {\n+    let u = U1 { a: 0 };\n+    let _a = unsafe { u.b };\n+\n+    let u = U2 { c: 0 };\n+    let _b = unsafe { u.b };\n+\n+    let _u = NoDropLike { a: 10 };\n+    let u = A { a: 0 };\n+    let _b = unsafe { u.b };\n+}"}, {"sha": "f3a2702d5aefa2266d5333e5069687b1578defe0", "filename": "src/test/ui/union-fields.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/src%2Ftest%2Fui%2Funion-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b/src%2Ftest%2Fui%2Funion-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-fields.stderr?ref=ba1d065ffa3606b61201ef69fec3ad0bfc5b2f7b", "patch": "@@ -0,0 +1,32 @@\n+error: field is never used: `c`\n+  --> $DIR/union-fields.rs:16:5\n+   |\n+16 |     c: u8, // should be reported\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/union-fields.rs:11:9\n+   |\n+11 | #![deny(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: field is never used: `a`\n+  --> $DIR/union-fields.rs:19:5\n+   |\n+19 |     a: u8, // should be reported\n+   |     ^^^^^\n+\n+error: field is never used: `a`\n+  --> $DIR/union-fields.rs:23:20\n+   |\n+23 | union NoDropLike { a: u8 } // should be reported as unused\n+   |                    ^^^^^\n+\n+error: field is never used: `c`\n+  --> $DIR/union-fields.rs:28:5\n+   |\n+28 |     c: u8, // should be reported\n+   |     ^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}