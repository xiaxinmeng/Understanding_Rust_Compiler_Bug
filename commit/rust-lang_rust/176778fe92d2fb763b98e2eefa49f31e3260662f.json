{"sha": "176778fe92d2fb763b98e2eefa49f31e3260662f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Njc3OGZlOTJkMmZiNzYzYjk4ZTJlZWZhNDlmMzFlMzI2MDY2MmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-18T10:11:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-18T10:11:08Z"}, "message": "Auto merge of #3556 - lucasloisp:bool-ord-comparison, r=oli-obk\n\nImplements lint for order comparisons against bool (#3438)\n\nAs described on issue #3438, this change implements linting for `>` and `<` comparisons against both `boolean` literals and between expressions.", "tree": {"sha": "69ec8f2abda7f333ebe44b46c827a6db24c0130d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ec8f2abda7f333ebe44b46c827a6db24c0130d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/176778fe92d2fb763b98e2eefa49f31e3260662f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/176778fe92d2fb763b98e2eefa49f31e3260662f", "html_url": "https://github.com/rust-lang/rust/commit/176778fe92d2fb763b98e2eefa49f31e3260662f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/176778fe92d2fb763b98e2eefa49f31e3260662f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a637d553290ba7eaa4cda44b91970cb1b5788f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a637d553290ba7eaa4cda44b91970cb1b5788f97", "html_url": "https://github.com/rust-lang/rust/commit/a637d553290ba7eaa4cda44b91970cb1b5788f97"}, {"sha": "de42dfbab7ce008c0a15cf4b8896f51fa90ea7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/de42dfbab7ce008c0a15cf4b8896f51fa90ea7ed", "html_url": "https://github.com/rust-lang/rust/commit/de42dfbab7ce008c0a15cf4b8896f51fa90ea7ed"}], "stats": {"total": 178, "additions": 153, "deletions": 25}, "files": [{"sha": "1ad7f4c5540609c15d9b4a399c4a62f9a1879e91", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 80, "deletions": 24, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/176778fe92d2fb763b98e2eefa49f31e3260662f/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176778fe92d2fb763b98e2eefa49f31e3260662f/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=176778fe92d2fb763b98e2eefa49f31e3260662f", "patch": "@@ -45,8 +45,9 @@ declare_clippy_lint! {\n     \"if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\"\n }\n \n-/// **What it does:** Checks for expressions of the form `x == true` and\n-/// `x != true` (or vice versa) and suggest using the variable directly.\n+/// **What it does:** Checks for expressions of the form `x == true`,\n+/// `x != true` and order comparisons such as `x < true` (or vice versa) and\n+/// suggest using the variable directly.\n ///\n /// **Why is this bad?** Unnecessary code.\n ///\n@@ -143,22 +144,54 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n         }\n \n         if let ExprKind::Binary(Spanned { node, .. }, ..) = e.node {\n+            let ignore_case = None::<(fn(_) -> _, &str)>;\n+            let ignore_no_literal = None::<(fn(_, _) -> _, &str)>;\n             match node {\n-                BinOpKind::Eq => check_comparison(\n+                BinOpKind::Eq => {\n+                    let true_case = Some((|h| h, \"equality checks against true are unnecessary\"));\n+                    let false_case = Some((\n+                        |h: Sugg<'_>| !h,\n+                        \"equality checks against false can be replaced by a negation\",\n+                    ));\n+                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal)\n+                },\n+                BinOpKind::Ne => {\n+                    let true_case = Some((\n+                        |h: Sugg<'_>| !h,\n+                        \"inequality checks against true can be replaced by a negation\",\n+                    ));\n+                    let false_case = Some((|h| h, \"inequality checks against false are unnecessary\"));\n+                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal)\n+                },\n+                BinOpKind::Lt => check_comparison(\n                     cx,\n                     e,\n-                    \"equality checks against true are unnecessary\",\n-                    \"equality checks against false can be replaced by a negation\",\n-                    |h| h,\n-                    |h| !h,\n+                    ignore_case,\n+                    Some((|h| h, \"greater than checks against false are unnecessary\")),\n+                    Some((\n+                        |h: Sugg<'_>| !h,\n+                        \"less than comparison against true can be replaced by a negation\",\n+                    )),\n+                    ignore_case,\n+                    Some((\n+                        |l: Sugg<'_>, r: Sugg<'_>| (!l).bit_and(&r),\n+                        \"order comparisons between booleans can be simplified\",\n+                    )),\n                 ),\n-                BinOpKind::Ne => check_comparison(\n+                BinOpKind::Gt => check_comparison(\n                     cx,\n                     e,\n-                    \"inequality checks against true can be replaced by a negation\",\n-                    \"inequality checks against false are unnecessary\",\n-                    |h| !h,\n-                    |h| h,\n+                    Some((\n+                        |h: Sugg<'_>| !h,\n+                        \"less than comparison against true can be replaced by a negation\",\n+                    )),\n+                    ignore_case,\n+                    ignore_case,\n+                    Some((|h| h, \"greater than checks against false are unnecessary\")),\n+                    Some((\n+                        |l: Sugg<'_>, r: Sugg<'_>| l.bit_and(&(!r)),\n+                        \"order comparisons between booleans can be simplified\",\n+                    )),\n                 ),\n                 _ => (),\n             }\n@@ -169,22 +202,45 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n fn check_comparison<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     e: &'tcx Expr,\n-    true_message: &str,\n-    false_message: &str,\n-    true_hint: impl FnOnce(Sugg<'_>) -> Sugg<'_>,\n-    false_hint: impl FnOnce(Sugg<'_>) -> Sugg<'_>,\n+    left_true: Option<(impl FnOnce(Sugg<'a>) -> Sugg<'a>, &str)>,\n+    left_false: Option<(impl FnOnce(Sugg<'a>) -> Sugg<'a>, &str)>,\n+    right_true: Option<(impl FnOnce(Sugg<'a>) -> Sugg<'a>, &str)>,\n+    right_false: Option<(impl FnOnce(Sugg<'a>) -> Sugg<'a>, &str)>,\n+    no_literal: Option<(impl FnOnce(Sugg<'a>, Sugg<'a>) -> Sugg<'a>, &str)>,\n ) {\n     use self::Expression::*;\n \n     if let ExprKind::Binary(_, ref left_side, ref right_side) = e.node {\n-        let applicability = Applicability::MachineApplicable;\n+        let mut applicability = Applicability::MachineApplicable;\n         match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n-            (Bool(true), Other) => suggest_bool_comparison(cx, e, right_side, applicability, true_message, true_hint),\n-            (Other, Bool(true)) => suggest_bool_comparison(cx, e, left_side, applicability, true_message, true_hint),\n-            (Bool(false), Other) => {\n-                suggest_bool_comparison(cx, e, right_side, applicability, false_message, false_hint)\n-            },\n-            (Other, Bool(false)) => suggest_bool_comparison(cx, e, left_side, applicability, false_message, false_hint),\n+            (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n+                suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n+            }),\n+            (Other, Bool(true)) => right_true.map_or((), |(h, m)| {\n+                suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n+            }),\n+            (Bool(false), Other) => left_false.map_or((), |(h, m)| {\n+                suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n+            }),\n+            (Other, Bool(false)) => right_false.map_or((), |(h, m)| {\n+                suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n+            }),\n+            (Other, Other) => no_literal.map_or((), |(h, m)| {\n+                let (l_ty, r_ty) = (cx.tables.expr_ty(left_side), cx.tables.expr_ty(right_side));\n+                if l_ty.is_bool() && r_ty.is_bool() {\n+                    let left_side = Sugg::hir_with_applicability(cx, left_side, \"..\", &mut applicability);\n+                    let right_side = Sugg::hir_with_applicability(cx, right_side, \"..\", &mut applicability);\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        m,\n+                        \"try simplifying it as shown\",\n+                        h(left_side, right_side).to_string(),\n+                        applicability,\n+                    )\n+                }\n+            }),\n             _ => (),\n         }\n     }\n@@ -196,7 +252,7 @@ fn suggest_bool_comparison<'a, 'tcx>(\n     expr: &Expr,\n     mut applicability: Applicability,\n     message: &str,\n-    conv_hint: impl FnOnce(Sugg<'_>) -> Sugg<'_>,\n+    conv_hint: impl FnOnce(Sugg<'a>) -> Sugg<'a>,\n ) {\n     let hint = Sugg::hir_with_applicability(cx, expr, \"..\", &mut applicability);\n     span_lint_and_sugg("}, {"sha": "66f18b51f21bb15f14d80b17eb5ed00351fe2d2c", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/176778fe92d2fb763b98e2eefa49f31e3260662f/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176778fe92d2fb763b98e2eefa49f31e3260662f/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=176778fe92d2fb763b98e2eefa49f31e3260662f", "patch": "@@ -174,6 +174,11 @@ impl<'a> Sugg<'a> {\n         make_binop(ast::BinOpKind::And, &self, rhs)\n     }\n \n+    /// Convenience method to create the `<lhs> & <rhs>` suggestion.\n+    pub fn bit_and(self, rhs: &Self) -> Sugg<'static> {\n+        make_binop(ast::BinOpKind::BitAnd, &self, rhs)\n+    }\n+\n     /// Convenience method to create the `<lhs> as <rhs>` suggestion.\n     pub fn as_ty<R: Display>(self, rhs: R) -> Sugg<'static> {\n         make_assoc(AssocOp::As, &self, &Sugg::NonParen(rhs.to_string().into()))"}, {"sha": "2a28d0af1b2d1545a47f0829a989538a42240e21", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/176778fe92d2fb763b98e2eefa49f31e3260662f/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176778fe92d2fb763b98e2eefa49f31e3260662f/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=176778fe92d2fb763b98e2eefa49f31e3260662f", "patch": "@@ -50,4 +50,35 @@ fn main() {\n     } else {\n         \"no\"\n     };\n+    if x < true {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if false < x {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if x > false {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if true > x {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    let y = true;\n+    if x < y {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if x > y {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n }"}, {"sha": "9a12a8f089a3be9af616fc7eeee03cefb3418124", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/176778fe92d2fb763b98e2eefa49f31e3260662f/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/176778fe92d2fb763b98e2eefa49f31e3260662f/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=176778fe92d2fb763b98e2eefa49f31e3260662f", "patch": "@@ -48,5 +48,41 @@ error: inequality checks against false are unnecessary\n 48 |     if false != x {\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `x`\n \n-error: aborting due to 8 previous errors\n+error: less than comparison against true can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:53:8\n+   |\n+53 |     if x < true {\n+   |        ^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: greater than checks against false are unnecessary\n+  --> $DIR/bool_comparison.rs:58:8\n+   |\n+58 |     if false < x {\n+   |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n+\n+error: greater than checks against false are unnecessary\n+  --> $DIR/bool_comparison.rs:63:8\n+   |\n+63 |     if x > false {\n+   |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n+\n+error: less than comparison against true can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:68:8\n+   |\n+68 |     if true > x {\n+   |        ^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: order comparisons between booleans can be simplified\n+  --> $DIR/bool_comparison.rs:74:8\n+   |\n+74 |     if x < y {\n+   |        ^^^^^ help: try simplifying it as shown: `!x & y`\n+\n+error: order comparisons between booleans can be simplified\n+  --> $DIR/bool_comparison.rs:79:8\n+   |\n+79 |     if x > y {\n+   |        ^^^^^ help: try simplifying it as shown: `x & !y`\n+\n+error: aborting due to 14 previous errors\n "}]}