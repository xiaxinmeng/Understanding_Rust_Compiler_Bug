{"sha": "5daf6b7849ea76c85c4fdb36d0da474e17029bec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYWY2Yjc4NDllYTc2Yzg1YzRmZGIzNmQwZGE0NzRlMTcwMjliZWM=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-11-10T03:01:22Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-11-10T03:01:22Z"}, "message": "temporarily disable tests on android and tagging issue number #10380", "tree": {"sha": "7c8334d2fd6fd4820ec69c0525cf3ea86498bc3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8334d2fd6fd4820ec69c0525cf3ea86498bc3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5daf6b7849ea76c85c4fdb36d0da474e17029bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5daf6b7849ea76c85c4fdb36d0da474e17029bec", "html_url": "https://github.com/rust-lang/rust/commit/5daf6b7849ea76c85c4fdb36d0da474e17029bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5daf6b7849ea76c85c4fdb36d0da474e17029bec/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f7669c78940fac48ad93fde1cfce6a7135463c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f7669c78940fac48ad93fde1cfce6a7135463c", "html_url": "https://github.com/rust-lang/rust/commit/d6f7669c78940fac48ad93fde1cfce6a7135463c"}], "stats": {"total": 112, "additions": 13, "deletions": 99}, "files": [{"sha": "479ac1c7b335907e7889d49cb75c35843bba7c15", "filename": "src/libstd/run.rs", "status": "modified", "additions": 7, "deletions": 99, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5daf6b7849ea76c85c4fdb36d0da474e17029bec/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daf6b7849ea76c85c4fdb36d0da474e17029bec/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=5daf6b7849ea76c85c4fdb36d0da474e17029bec", "patch": "@@ -339,20 +339,14 @@ mod tests {\n     use rt::io::{Writer, Reader};\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_process_status() {\n         assert_eq!(run::process_status(\"false\", []), 1);\n         assert_eq!(run::process_status(\"true\", []), 0);\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_process_status() {\n-        assert_eq!(run::process_status(\"/system/bin/sh\", [~\"-c\",~\"false\"]), 1);\n-        assert_eq!(run::process_status(\"/system/bin/sh\", [~\"-c\",~\"true\"]), 0);\n-    }\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_process_output_output() {\n \n         let run::ProcessOutput {status, output, error}\n@@ -366,24 +360,9 @@ mod tests {\n             assert_eq!(error, ~[]);\n         }\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_process_output_output() {\n-\n-        let run::ProcessOutput {status, output, error}\n-             = run::process_output(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"]);\n-        let output_str = str::from_utf8(output);\n-\n-        assert_eq!(status, 0);\n-        assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n-        // FIXME #7224\n-        if !running_on_valgrind() {\n-            assert_eq!(error, ~[]);\n-        }\n-    }\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_process_output_error() {\n \n         let run::ProcessOutput {status, output, error}\n@@ -393,17 +372,6 @@ mod tests {\n         assert_eq!(output, ~[]);\n         assert!(!error.is_empty());\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_process_output_error() {\n-\n-        let run::ProcessOutput {status, output, error}\n-             = run::process_output(\"/system/bin/mkdir\", [~\".\"]);\n-\n-        assert_eq!(status, 255);\n-        assert_eq!(output, ~[]);\n-        assert!(!error.is_empty());\n-    }\n \n     #[test]\n     #[ignore] // FIXME(#10016) cat never sees stdin close\n@@ -454,37 +422,22 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_finish_once() {\n         let mut prog = run::Process::new(\"false\", [], run::ProcessOptions::new());\n         assert_eq!(prog.finish(), 1);\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_finish_once() {\n-        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"false\"],\n-                                         run::ProcessOptions::new());\n-        assert_eq!(prog.finish(), 1);\n-    }\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_finish_twice() {\n         let mut prog = run::Process::new(\"false\", [], run::ProcessOptions::new());\n         assert_eq!(prog.finish(), 1);\n         assert_eq!(prog.finish(), 1);\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_finish_twice() {\n-        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"false\"],\n-                                         run::ProcessOptions::new());\n-        assert_eq!(prog.finish(), 1);\n-        assert_eq!(prog.finish(), 1);\n-    }\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_finish_with_output_once() {\n \n         let mut prog = run::Process::new(\"echo\", [~\"hello\"], run::ProcessOptions::new());\n@@ -499,26 +452,9 @@ mod tests {\n             assert_eq!(error, ~[]);\n         }\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_finish_with_output_once() {\n-\n-        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"],\n-                                         run::ProcessOptions::new());\n-        let run::ProcessOutput {status, output, error}\n-            = prog.finish_with_output();\n-        let output_str = str::from_utf8(output);\n-\n-        assert_eq!(status, 0);\n-        assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n-        // FIXME #7224\n-        if !running_on_valgrind() {\n-            assert_eq!(error, ~[]);\n-        }\n-    }\n \n     #[test]\n-    #[cfg(not(target_os=\"android\"))]\n+    #[cfg(not(target_os=\"android\"))] // FIXME(#10380)\n     fn test_finish_with_output_twice() {\n \n         let mut prog = run::Process::new(\"echo\", [~\"hello\"], run::ProcessOptions::new());\n@@ -544,34 +480,6 @@ mod tests {\n             assert_eq!(error, ~[]);\n         }\n     }\n-    #[test]\n-    #[cfg(target_os=\"android\")]\n-    fn test_finish_with_output_twice() {\n-\n-        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"],\n-                                         run::ProcessOptions::new());\n-        let run::ProcessOutput {status, output, error}\n-            = prog.finish_with_output();\n-\n-        let output_str = str::from_utf8(output);\n-\n-        assert_eq!(status, 0);\n-        assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n-        // FIXME #7224\n-        if !running_on_valgrind() {\n-            assert_eq!(error, ~[]);\n-        }\n-\n-        let run::ProcessOutput {status, output, error}\n-            = prog.finish_with_output();\n-\n-        assert_eq!(status, 0);\n-        assert_eq!(output, ~[]);\n-        // FIXME #7224\n-        if !running_on_valgrind() {\n-            assert_eq!(error, ~[]);\n-        }\n-    }\n \n     #[cfg(unix,not(target_os=\"android\"))]\n     fn run_pwd(dir: Option<&Path>) -> run::Process {"}, {"sha": "9b66ced030801cdb99479527ace537608dbdd571", "filename": "src/test/run-pass/rtio-processes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5daf6b7849ea76c85c4fdb36d0da474e17029bec/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daf6b7849ea76c85c4fdb36d0da474e17029bec/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frtio-processes.rs?ref=5daf6b7849ea76c85c4fdb36d0da474e17029bec", "patch": "@@ -28,6 +28,7 @@ use std::rt::io::{Reader, Writer};\n use std::str;\n \n #[test]\n+// FIXME(#10380)\n #[cfg(unix, not(target_os=\"android\"))]\n fn smoke() {\n     let io = ~[];\n@@ -45,6 +46,7 @@ fn smoke() {\n }\n \n #[test]\n+// FIXME(#10380)\n #[cfg(unix, not(target_os=\"android\"))]\n fn smoke_failure() {\n     let io = ~[];\n@@ -62,6 +64,7 @@ fn smoke_failure() {\n }\n \n #[test]\n+// FIXME(#10380)\n #[cfg(unix, not(target_os=\"android\"))]\n fn exit_reported_right() {\n     let io = ~[];\n@@ -102,6 +105,7 @@ fn run_output(args: ProcessConfig) -> ~str {\n }\n \n #[test]\n+// FIXME(#10380)\n #[cfg(unix, not(target_os=\"android\"))]\n fn stdout_works() {\n     let io = ~[Ignored, CreatePipe(false, true)];\n@@ -116,6 +120,7 @@ fn stdout_works() {\n }\n \n #[test]\n+// FIXME(#10380)\n #[cfg(unix, not(target_os=\"android\"))]\n fn set_cwd_works() {\n     let io = ~[Ignored, CreatePipe(false, true)];\n@@ -131,6 +136,7 @@ fn set_cwd_works() {\n }\n \n #[test]\n+// FIXME(#10380)\n #[cfg(unix, not(target_os=\"android\"))]\n fn stdin_works() {\n     let io = ~[CreatePipe(true, false),"}]}