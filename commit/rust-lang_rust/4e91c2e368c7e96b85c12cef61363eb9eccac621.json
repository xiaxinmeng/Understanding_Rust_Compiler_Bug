{"sha": "4e91c2e368c7e96b85c12cef61363eb9eccac621", "node_id": "C_kwDOAAsO6NoAKDRlOTFjMmUzNjhjN2U5NmI4NWMxMmNlZjYxMzYzZWI5ZWNjYWM2MjE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-30T08:29:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-30T08:33:33Z"}, "message": "ui_test: printing more consistent with compiletest\n\ndistinguish \"ignored\" from \"filtered out\"", "tree": {"sha": "d3a1fc6445346f7114b1d816cceb44bf2f95ae0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3a1fc6445346f7114b1d816cceb44bf2f95ae0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e91c2e368c7e96b85c12cef61363eb9eccac621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e91c2e368c7e96b85c12cef61363eb9eccac621", "html_url": "https://github.com/rust-lang/rust/commit/4e91c2e368c7e96b85c12cef61363eb9eccac621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e91c2e368c7e96b85c12cef61363eb9eccac621/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8694e656bee538fb3d1db0bf4fb6625943cd4087", "url": "https://api.github.com/repos/rust-lang/rust/commits/8694e656bee538fb3d1db0bf4fb6625943cd4087", "html_url": "https://github.com/rust-lang/rust/commit/8694e656bee538fb3d1db0bf4fb6625943cd4087"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "b7488d817a6c37041277c1d4ab2a50667cc31bb7", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e91c2e368c7e96b85c12cef61363eb9eccac621/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e91c2e368c7e96b85c12cef61363eb9eccac621/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=4e91c2e368c7e96b85c12cef61363eb9eccac621", "patch": "@@ -61,6 +61,7 @@ pub fn run_tests(config: Config) {\n     let failures = Mutex::new(vec![]);\n     let succeeded = AtomicUsize::default();\n     let ignored = AtomicUsize::default();\n+    let filtered = AtomicUsize::default();\n \n     crossbeam::scope(|s| {\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n@@ -80,20 +81,15 @@ pub fn run_tests(config: Config) {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n                         if !config.path_filter.iter().any(|filter| path_display.contains(filter)) {\n-                            ignored.fetch_add(1, Ordering::Relaxed);\n-                            eprintln!(\n-                                \"{} .. {}\",\n-                                path_display,\n-                                \"ignored (command line filter)\".yellow()\n-                            );\n+                            filtered.fetch_add(1, Ordering::Relaxed);\n                             continue;\n                         }\n                     }\n                     let comments = Comments::parse_file(&path);\n                     // Ignore file if only/ignore rules do (not) apply\n                     if ignore_file(&comments, &target) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n-                        eprintln!(\"{} .. {}\", path.display(), \"ignored\".yellow());\n+                        eprintln!(\"{} ... {}\", path.display(), \"ignored\".yellow());\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -126,6 +122,7 @@ pub fn run_tests(config: Config) {\n     let failures = failures.into_inner().unwrap();\n     let succeeded = succeeded.load(Ordering::Relaxed);\n     let ignored = ignored.load(Ordering::Relaxed);\n+    let filtered = filtered.load(Ordering::Relaxed);\n     if !failures.is_empty() {\n         for (path, miri, revision, errors) in &failures {\n             eprintln!();\n@@ -169,19 +166,22 @@ pub fn run_tests(config: Config) {\n             }\n         }\n         eprintln!(\n-            \"{} tests failed, {} tests passed, {} ignored\",\n+            \"test result: {}. {} tests failed, {} tests passed, {} ignored, {} filtered out\",\n+            \"FAIL\".red(),\n             failures.len().to_string().red().bold(),\n             succeeded.to_string().green(),\n-            ignored.to_string().yellow()\n+            ignored.to_string().yellow(),\n+            filtered.to_string().yellow(),\n         );\n         std::process::exit(1);\n     }\n     eprintln!();\n     eprintln!(\n-        \"test result: {}. {} tests passed, {} ignored\",\n+        \"test result: {}. {} tests passed, {} ignored, {} filtered out\",\n         \"ok\".green(),\n         succeeded.to_string().green(),\n-        ignored.to_string().yellow()\n+        ignored.to_string().yellow(),\n+        filtered.to_string().yellow(),\n     );\n     eprintln!();\n }"}]}