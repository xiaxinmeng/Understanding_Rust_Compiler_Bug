{"sha": "dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjODA3YTlmN2VjMDJkNDI1YjRlMzM1MGE4N2IyOWY2Y2Y3ZmE0ZmY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-03T02:07:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:15Z"}, "message": "Add `walk_chain`.\n\nThis combines multiple `HygieneData::with` calls on a hot path.", "tree": {"sha": "05a0bcdc93c8c3ed0ff0d1b95da645b38e2b5f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a0bcdc93c8c3ed0ff0d1b95da645b38e2b5f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff", "html_url": "https://github.com/rust-lang/rust/commit/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6596743d5e710e69d88f9522a207f41731177ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6596743d5e710e69d88f9522a207f41731177ef0", "html_url": "https://github.com/rust-lang/rust/commit/6596743d5e710e69d88f9522a207f41731177ef0"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "dd69d358313181b66690daf5c06aff76fbe2ce29", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff", "patch": "@@ -128,14 +128,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n             // We also stop at the function body level because no line stepping can occur\n             // at the level above that.\n-            let mut span = source_info.span;\n-            while span.ctxt() != NO_EXPANSION && span.ctxt() != self.mir.span.ctxt() {\n-                if let Some(info) = span.ctxt().outer_expn_info() {\n-                    span = info.call_site;\n-                } else {\n-                    break;\n-                }\n-            }\n+            let span = syntax_pos::hygiene::walk_chain(source_info.span, self.mir.span.ctxt());\n             let scope = self.scope_metadata_for_loc(source_info.scope, span.lo());\n             // Use span of the outermost expansion site, while keeping the original lexical scope.\n             (scope, span)"}, {"sha": "7ff7a9db49770e00650da155ec844105d334e78e", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=dc807a9f7ec02d425b4e3350a87b29f6cf7fa4ff", "patch": "@@ -257,6 +257,17 @@ impl HygieneData {\n         marks\n     }\n \n+    fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {\n+        while span.ctxt() != crate::NO_EXPANSION && span.ctxt() != to {\n+            if let Some(info) = self.expn_info(self.outer(span.ctxt())) {\n+                span = info.call_site;\n+            } else {\n+                break;\n+            }\n+        }\n+        span\n+    }\n+\n     fn adjust(&self, ctxt: &mut SyntaxContext, expansion: Mark) -> Option<Mark> {\n         let mut scope = None;\n         while !self.is_descendant_of(expansion, self.outer(*ctxt)) {\n@@ -366,6 +377,10 @@ pub fn clear_markings() {\n     HygieneData::with(|data| data.markings = FxHashMap::default());\n }\n \n+pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {\n+    HygieneData::with(|data| data.walk_chain(span, to))\n+}\n+\n impl SyntaxContext {\n     #[inline]\n     pub const fn empty() -> Self {"}]}