{"sha": "c5b969583ff12cfd0cd85e2923753101024b72ad", "node_id": "C_kwDOAAsO6NoAKGM1Yjk2OTU4M2ZmMTJjZmQwY2Q4NWUyOTIzNzUzMTAxMDI0YjcyYWQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T14:17:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T14:36:05Z"}, "message": "Split codegen_intrinsic_call function\n\nThis should reduce compile times of cg_clif", "tree": {"sha": "a878f0eddde496dff06dc59ff12a00a9bc415d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a878f0eddde496dff06dc59ff12a00a9bc415d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5b969583ff12cfd0cd85e2923753101024b72ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b969583ff12cfd0cd85e2923753101024b72ad", "html_url": "https://github.com/rust-lang/rust/commit/c5b969583ff12cfd0cd85e2923753101024b72ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5b969583ff12cfd0cd85e2923753101024b72ad/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99136301583c6c88e41ac517b9b4b37dadf1ec83", "url": "https://api.github.com/repos/rust-lang/rust/commits/99136301583c6c88e41ac517b9b4b37dadf1ec83", "html_url": "https://github.com/rust-lang/rust/commit/99136301583c6c88e41ac517b9b4b37dadf1ec83"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "517deba5805058ff143cfd3ddb79feca911fe11c", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c5b969583ff12cfd0cd85e2923753101024b72ad/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b969583ff12cfd0cd85e2923753101024b72ad/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=c5b969583ff12cfd0cd85e2923753101024b72ad", "patch": "@@ -73,7 +73,7 @@ macro intrinsic_match {\n }\n \n macro call_intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $substs:expr, $ret:expr, $destination:expr, $args:expr, $(\n+    ($fx:expr, $intrinsic:expr, $substs:expr, $ret:expr, $args:expr, $(\n         $name:ident($($arg:ident),*) -> $ty:ident => $func:ident,\n     )*) => {\n         match $intrinsic {\n@@ -87,19 +87,13 @@ macro call_intrinsic_match {\n                         let res = $fx.easy_call(stringify!($func), &[$($arg),*], $fx.tcx.types.$ty);\n                         $ret.write_cvalue($fx, res);\n \n-                        if let Some((_, dest)) = $destination {\n-                            let ret_block = $fx.get_block(dest);\n-                            $fx.bcx.ins().jump(ret_block, &[]);\n-                            return;\n-                        } else {\n-                            unreachable!();\n-                        }\n+                        return true;\n                     } else {\n                         bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n                     }\n                 }\n             )*\n-            _ => {}\n+            _ => false,\n         }\n     }\n }\n@@ -397,7 +391,6 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     span: Span,\n ) {\n     let intrinsic = fx.tcx.item_name(instance.def_id());\n-    let substs = instance.substs;\n \n     let ret = match destination {\n         Some((place, _)) => place,\n@@ -420,13 +413,27 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         self::simd::codegen_simd_intrinsic_call(fx, instance, args, ret, span);\n         let ret_block = fx.get_block(destination.expect(\"SIMD intrinsics don't diverge\").1);\n         fx.bcx.ins().jump(ret_block, &[]);\n-        return;\n+    } else if codegen_float_intrinsic_call(fx, instance, args, ret) {\n+        let ret_block = fx.get_block(destination.expect(\"Float intrinsics don't diverge\").1);\n+        fx.bcx.ins().jump(ret_block, &[]);\n+    } else {\n+        codegen_regular_intrinsic_call(fx, instance, args, ret, span, destination);\n     }\n+}\n \n-    let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+fn codegen_float_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    instance: Instance<'tcx>,\n+    args: &[mir::Operand<'tcx>],\n+    ret: CPlace<'tcx>,\n+) -> bool {\n+    let def_id = instance.def_id();\n+    let substs = instance.substs;\n+\n+    let intrinsic = fx.tcx.item_name(def_id);\n \n     call_intrinsic_match! {\n-        fx, intrinsic, substs, ret, destination, args,\n+        fx, intrinsic, substs, ret, args,\n         expf32(flt) -> f32 => expf,\n         expf64(flt) -> f64 => exp,\n         exp2f32(flt) -> f32 => exp2f,\n@@ -467,6 +474,22 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         cosf32(flt) -> f32 => cosf,\n         cosf64(flt) -> f64 => cos,\n     }\n+}\n+\n+fn codegen_regular_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    instance: Instance<'tcx>,\n+    args: &[mir::Operand<'tcx>],\n+    ret: CPlace<'tcx>,\n+    span: Span,\n+    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n+) {\n+    let def_id = instance.def_id();\n+    let substs = instance.substs;\n+\n+    let intrinsic = fx.tcx.item_name(def_id);\n+\n+    let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     intrinsic_match! {\n         fx, intrinsic, substs, args,"}]}