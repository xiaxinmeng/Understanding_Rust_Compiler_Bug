{"sha": "b6258120927c3518e3f9b747fb86da5ebfd9051c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MjU4MTIwOTI3YzM1MThlM2Y5Yjc0N2ZiODZkYTVlYmZkOTA1MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-28T18:38:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-28T18:38:00Z"}, "message": "Auto merge of #957 - christianpoveda:ptr-align-offset, r=RalfJung\n\nFixes for align_offset\n\nThis addresses @RalfJung's comments in https://github.com/rust-lang/miri/pull/945", "tree": {"sha": "b544a58525113abe8eb5105de9b65e3ca5d6a77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b544a58525113abe8eb5105de9b65e3ca5d6a77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6258120927c3518e3f9b747fb86da5ebfd9051c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6258120927c3518e3f9b747fb86da5ebfd9051c", "html_url": "https://github.com/rust-lang/rust/commit/b6258120927c3518e3f9b747fb86da5ebfd9051c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6258120927c3518e3f9b747fb86da5ebfd9051c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918a9afe1040f17c845d5d4364eea71c70f0be57", "url": "https://api.github.com/repos/rust-lang/rust/commits/918a9afe1040f17c845d5d4364eea71c70f0be57", "html_url": "https://github.com/rust-lang/rust/commit/918a9afe1040f17c845d5d4364eea71c70f0be57"}, {"sha": "e2c54e64d141c8524ff9e4753f9b8acde3859351", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c54e64d141c8524ff9e4753f9b8acde3859351", "html_url": "https://github.com/rust-lang/rust/commit/e2c54e64d141c8524ff9e4753f9b8acde3859351"}], "stats": {"total": 85, "additions": 50, "deletions": 35}, "files": [{"sha": "4ccdbdc0d7c31b772498b61fda9d4fd777431429", "filename": "src/shims/mod.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b6258120927c3518e3f9b747fb86da5ebfd9051c/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6258120927c3518e3f9b747fb86da5ebfd9051c/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=b6258120927c3518e3f9b747fb86da5ebfd9051c", "patch": "@@ -1,10 +1,10 @@\n+pub mod dlsym;\n+pub mod env;\n pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n-pub mod dlsym;\n-pub mod env;\n \n-use rustc::{ty, mir};\n+use rustc::{mir, ty};\n \n use crate::*;\n \n@@ -18,7 +18,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n-        trace!(\"eval_fn_call: {:#?}, {:?}\", instance, dest.map(|place| *place));\n+        trace!(\n+            \"eval_fn_call: {:#?}, {:?}\",\n+            instance,\n+            dest.map(|place| *place)\n+        );\n \n         // First, run the common hooks also supported by CTFE.\n         if this.hook_fn(instance, args, dest)? {\n@@ -27,27 +31,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-\n-            let n = {\n-                let ptr = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n-                let align = this.force_bits(\n-                    this.read_scalar(args[1])?.not_undef()?,\n-                    this.pointer_size()\n-                )? as usize;\n-\n-                let stride = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n-                // if the allocation alignment is at least the required alignment, we use the\n-                // libcore implementation\n-                if stride >= align {\n-                    ((stride + ptr.offset.bytes() as usize) as *const ())\n-                        .align_offset(align) as u128\n-                } else {\n-                    u128::max_value()\n-                }\n-            };\n-\n             let dest = dest.unwrap();\n-            let n = this.truncate(n, dest.layout);\n+            let n = this\n+                .align_offset(args[0], args[1])?\n+                .unwrap_or_else(|| this.truncate(u128::max_value(), dest.layout));\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n             this.goto_block(ret)?;\n             return Ok(None);\n@@ -65,4 +52,39 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Otherwise, load the MIR.\n         Ok(Some(this.load_mir(instance.def, None)?))\n     }\n+\n+    fn align_offset(\n+        &mut self,\n+        ptr_op: OpTy<'tcx, Tag>,\n+        align_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, Option<u128>> {\n+        let this = self.eval_context_mut();\n+\n+        let req_align = this.force_bits(\n+            this.read_scalar(align_op)?.not_undef()?,\n+            this.pointer_size(),\n+        )? as usize;\n+\n+        // FIXME: This should actually panic in the interpreted program\n+        if !req_align.is_power_of_two() {\n+            throw_unsup_format!(\"Required alignment should always be a power of two\")\n+        }\n+\n+        let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n+\n+        if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n+            let cur_align = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n+            if cur_align >= req_align {\n+                // if the allocation alignment is at least the required alignment we use the\n+                // libcore implementation\n+                return Ok(Some(\n+                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n+                        .align_offset(req_align) as u128,\n+                ));\n+            }\n+        }\n+        // If the allocation alignment is smaller than then required alignment or the pointer was\n+        // actually an integer, we return `None`\n+        Ok(None)\n+    }\n }"}, {"sha": "6c6ff6b6173cb8b0a2ad98d35f922246feb4712e", "filename": "tests/run-pass/aligned_utf8_check.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6258120927c3518e3f9b747fb86da5ebfd9051c/tests%2Frun-pass%2Faligned_utf8_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6258120927c3518e3f9b747fb86da5ebfd9051c/tests%2Frun-pass%2Faligned_utf8_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faligned_utf8_check.rs?ref=b6258120927c3518e3f9b747fb86da5ebfd9051c", "patch": "@@ -1,13 +1,6 @@\n fn main() {\n     const N: usize = 10;\n-\n-    let x = vec![0x4141u16; N];\n-\n-    let mut y: Vec<u8> = unsafe { std::mem::transmute(x) };\n-    unsafe { y.set_len(2 * N) };\n-\n-    println!(\"{:?}\", std::str::from_utf8(&y).unwrap());\n-\n-    let mut x: Vec<u16> = unsafe { std::mem::transmute(y) };\n-    unsafe { x.set_len(N) };\n+    let vec = vec![0x4141414141414141u64; N];\n+    let content = unsafe { std::slice::from_raw_parts(vec.as_ptr() as *const u8, 8 * N) };\n+    println!(\"{:?}\", std::str::from_utf8(content).unwrap());\n }"}, {"sha": "66d439948159632e13543778e040edd9f3cfca17", "filename": "tests/run-pass/aligned_utf8_check.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6258120927c3518e3f9b747fb86da5ebfd9051c/tests%2Frun-pass%2Faligned_utf8_check.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b6258120927c3518e3f9b747fb86da5ebfd9051c/tests%2Frun-pass%2Faligned_utf8_check.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faligned_utf8_check.stdout?ref=b6258120927c3518e3f9b747fb86da5ebfd9051c", "patch": "@@ -1 +1 @@\n-\"AAAAAAAAAAAAAAAAAAAA\"\n+\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\""}]}