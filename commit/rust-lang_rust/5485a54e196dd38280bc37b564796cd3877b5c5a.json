{"sha": "5485a54e196dd38280bc37b564796cd3877b5c5a", "node_id": "C_kwDOAAsO6NoAKDU0ODVhNTRlMTk2ZGQzODI4MGJjMzdiNTY0Nzk2Y2QzODc3YjVjNWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-04T16:27:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-04T16:27:45Z"}, "message": "Rollup merge of #109913 - scottmcm:index-slice, r=WaffleLapkin\n\nDoc-comment  `IndexVec::from_elem` and use it in a few more places\n\nSince this PR is a reply to https://github.com/rust-lang/rust/pull/109819#discussion_r1156128164,\nr? ``@WaffleLapkin``", "tree": {"sha": "a013180af33d9b0a3d4c33a3ad89906eeec29d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a013180af33d9b0a3d4c33a3ad89906eeec29d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5485a54e196dd38280bc37b564796cd3877b5c5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLFABCRBK7hj4Ov3rIwAAFvYIAAN855Ir+H0mTYpNWY8TVeQs\nt/qfyAp4vbh59M+lCvIwkFIP/vN4/n0PCtwOWS6vPiDt2g+xLgRYmmnqyLwpfBd8\nSqXNau3+vTQr3fPoMrni/MyYuG/vuZ8edc6o0cJuWQ5PKRf0LGyH9spHrABiNKRZ\nR0bwZrux2FDc2b6L6ZN5UziVpWVWKpPD/6g13z3ugEeSU2yh3Ch4YiaoreOV0V4h\naWF9q+ttQAgG/1jm4Dnf+j/tLNPtBYbbDRioNWZlAGGRGAlELSKC0hnQmzZhz/8q\noD2ytLz0gf+Snhxm8Vt8VFHIej5pdKsaE5MfHlkztlDmGXEJSdZTY1DIa6ejxkM=\n=6DYi\n-----END PGP SIGNATURE-----\n", "payload": "tree a013180af33d9b0a3d4c33a3ad89906eeec29d78\nparent ed17b599dfba4703040bcddb162c8e3419ab95bd\nparent 5c3e5af2ed3776755e584530fd8915544292b821\nauthor Michael Goulet <michael@errs.io> 1680625665 -0700\ncommitter GitHub <noreply@github.com> 1680625665 -0700\n\nRollup merge of #109913 - scottmcm:index-slice, r=WaffleLapkin\n\nDoc-comment  `IndexVec::from_elem` and use it in a few more places\n\nSince this PR is a reply to https://github.com/rust-lang/rust/pull/109819#discussion_r1156128164,\nr? ``@WaffleLapkin``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5485a54e196dd38280bc37b564796cd3877b5c5a", "html_url": "https://github.com/rust-lang/rust/commit/5485a54e196dd38280bc37b564796cd3877b5c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5485a54e196dd38280bc37b564796cd3877b5c5a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed17b599dfba4703040bcddb162c8e3419ab95bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed17b599dfba4703040bcddb162c8e3419ab95bd", "html_url": "https://github.com/rust-lang/rust/commit/ed17b599dfba4703040bcddb162c8e3419ab95bd"}, {"sha": "5c3e5af2ed3776755e584530fd8915544292b821", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3e5af2ed3776755e584530fd8915544292b821", "html_url": "https://github.com/rust-lang/rust/commit/5c3e5af2ed3776755e584530fd8915544292b821"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "2c387edfef073cf0df2bb4a4f6a34e79445f9d37", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=5485a54e196dd38280bc37b564796cd3877b5c5a", "patch": "@@ -63,7 +63,7 @@ impl LocalUseMap {\n         elements: &RegionValueElements,\n         body: &Body<'_>,\n     ) -> Self {\n-        let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n+        let nones = IndexVec::from_elem(None, &body.local_decls);\n         let mut local_use_map = LocalUseMap {\n             first_def_at: nones.clone(),\n             first_use_at: nones.clone(),\n@@ -76,7 +76,7 @@ impl LocalUseMap {\n         }\n \n         let mut locals_with_use_data: IndexVec<Local, bool> =\n-            IndexVec::from_elem_n(false, body.local_decls.len());\n+            IndexVec::from_elem(false, &body.local_decls);\n         live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);\n \n         LocalUseMapBuild { local_use_map: &mut local_use_map, elements, locals_with_use_data }"}, {"sha": "16cf9ae5cfc287e4a5e9b2c18d1e259073dfa522", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=5485a54e196dd38280bc37b564796cd3877b5c5a", "patch": "@@ -129,6 +129,17 @@ impl<I: Idx, T> IndexVec<I, T> {\n         IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }\n     }\n \n+    /// Creates a new vector with a copy of `elem` for each index in `universe`.\n+    ///\n+    /// Thus `IndexVec::from_elem(elem, &universe)` is equivalent to\n+    /// `IndexVec::<I, _>::from_elem_n(elem, universe.len())`. That can help\n+    /// type inference as it ensures that the resulting vector uses the same\n+    /// index type as `universe`, rather than something potentially surprising.\n+    ///\n+    /// For example, if you want to store data for each local in a MIR body,\n+    /// using `let mut uses = IndexVec::from_elem(vec![], &body.local_decls);`\n+    /// ensures that `uses` is an `IndexVec<Local, _>`, and thus can give\n+    /// better error messages later if one accidentally mismatches indices.\n     #[inline]\n     pub fn from_elem<S>(elem: T, universe: &IndexSlice<I, S>) -> Self\n     where"}, {"sha": "f298b95ca35b180d9843f49aa9152a01d4a7c2db", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=5485a54e196dd38280bc37b564796cd3877b5c5a", "patch": "@@ -203,7 +203,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n         // Tracks the `VarSubVar` constraints generated for each region vid. We\n         // later use this to expand across vids.\n-        let mut constraints = IndexVec::from_elem_n(Vec::new(), var_values.values.len());\n+        let mut constraints = IndexVec::from_elem(Vec::new(), &var_values.values);\n         // Tracks the changed region vids.\n         let mut changes = Vec::new();\n         for constraint in self.data.constraints.keys() {"}, {"sha": "6a73f2a6578135772ad53e348642d914e5397bd9", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=5485a54e196dd38280bc37b564796cd3877b5c5a", "patch": "@@ -37,8 +37,7 @@ impl CoverageGraph {\n         // `SwitchInt` to have multiple targets to the same destination `BasicBlock`, so\n         // de-duplication is required. This is done without reordering the successors.\n \n-        let bcbs_len = bcbs.len();\n-        let mut seen = IndexVec::from_elem_n(false, bcbs_len);\n+        let mut seen = IndexVec::from_elem(false, &bcbs);\n         let successors = IndexVec::from_fn_n(\n             |bcb| {\n                 for b in seen.iter_mut() {\n@@ -60,7 +59,7 @@ impl CoverageGraph {\n             bcbs.len(),\n         );\n \n-        let mut predecessors = IndexVec::from_elem_n(Vec::new(), bcbs.len());\n+        let mut predecessors = IndexVec::from_elem(Vec::new(), &bcbs);\n         for (bcb, bcb_successors) in successors.iter_enumerated() {\n             for &successor in bcb_successors {\n                 predecessors[successor].push(bcb);"}, {"sha": "e8155520c9b78c5a1953d95f09cb7ebd0c2d1c07", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5485a54e196dd38280bc37b564796cd3877b5c5a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=5485a54e196dd38280bc37b564796cd3877b5c5a", "patch": "@@ -522,7 +522,7 @@ fn generator_saved_local_eligibility(\n     use SavedLocalEligibility::*;\n \n     let mut assignments: IndexVec<GeneratorSavedLocal, SavedLocalEligibility> =\n-        IndexVec::from_elem_n(Unassigned, info.field_tys.len());\n+        IndexVec::from_elem(Unassigned, &info.field_tys);\n \n     // The saved locals not eligible for overlap. These will get\n     // \"promoted\" to the prefix of our generator."}]}