{"sha": "421e6fc24d2e5bfc59746d2662531fb22f7e0720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWU2ZmMyNGQyZTViZmM1OTc0NmQyNjYyNTMxZmIyMmY3ZTA3MjA=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-03T12:02:32Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-03T12:30:35Z"}, "message": "rustdoc: use btree map for where clauses\n\nto get more reproducible output.\n\nFixes: #32555", "tree": {"sha": "9128a0c04ad566a6f81727f914ab2c5a0f634001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9128a0c04ad566a6f81727f914ab2c5a0f634001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421e6fc24d2e5bfc59746d2662531fb22f7e0720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421e6fc24d2e5bfc59746d2662531fb22f7e0720", "html_url": "https://github.com/rust-lang/rust/commit/421e6fc24d2e5bfc59746d2662531fb22f7e0720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421e6fc24d2e5bfc59746d2662531fb22f7e0720/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d8100a068151512774caf15a6a88766ca9cf434", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8100a068151512774caf15a6a88766ca9cf434", "html_url": "https://github.com/rust-lang/rust/commit/7d8100a068151512774caf15a6a88766ca9cf434"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c0faa04323e47ddd2435a393f72166920a848757", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/421e6fc24d2e5bfc59746d2662531fb22f7e0720/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421e6fc24d2e5bfc59746d2662531fb22f7e0720/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=421e6fc24d2e5bfc59746d2662531fb22f7e0720", "patch": "@@ -27,7 +27,7 @@\n //! bounds by special casing scenarios such as these. Fun!\n \n use std::mem;\n-use std::collections::HashMap;\n+use std::collections::BTreeMap;\n \n use rustc::hir::def_id::DefId;\n use rustc::ty::subst;\n@@ -39,7 +39,7 @@ use core::DocContext;\n \n pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     // First, partition the where clause into its separate components\n-    let mut params = HashMap::new();\n+    let mut params = BTreeMap::new();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();\n@@ -62,7 +62,7 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     // Simplify the type parameter bounds on all the generics\n     let mut params = params.into_iter().map(|(k, v)| {\n         (k, ty_bounds(v))\n-    }).collect::<HashMap<_, _>>();\n+    }).collect::<BTreeMap<_, _>>();\n \n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates"}]}