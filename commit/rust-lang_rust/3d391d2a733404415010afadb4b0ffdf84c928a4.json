{"sha": "3d391d2a733404415010afadb4b0ffdf84c928a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzkxZDJhNzMzNDA0NDE1MDEwYWZhZGI0YjBmZmRmODRjOTI4YTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T03:35:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T03:35:43Z"}, "message": "Rollup merge of #73306 - calebzulawski:target-feature-11-fn-trait-soundness, r=nikomatsakis\n\nDon't implement Fn* traits for #[target_feature] functions\n\nCloses #72012.", "tree": {"sha": "87f6095ee69fb11dd7b82637e07529de0e2bed04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87f6095ee69fb11dd7b82637e07529de0e2bed04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d391d2a733404415010afadb4b0ffdf84c928a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/VYPCRBK7hj4Ov3rIwAAdHIIABE3sbmDnk1l1/GnCFF1Sdsl\niLdTmAOkbQZ86jIMdAOjGcp1PCoZN+QEzqASPp2sd/ZezIzGAPQ/h+6Vo51EtQoj\n7D5j6bClAgc3F50+pkT5mF3nJhneiObLf9iU6q+0PfACtE5Q5nTnIblLkHCRRRJm\nD+H9iVN+Nsy2XxgPXujVqealcNKiSg7bz3/cPhikdhqhQJVkJTPH1k9iIzfBrEcp\nDQZ8RGVaf0tPX6o/Vt1l/jKfwWLRhV0RDIhYD3jz8pm8ZG2tnX3YBHZwoNF1emwT\nd3BanhMCgfcdDyl6DqWUnHHLm+ZCx6I5ToukJgaeD4ycPNEgFXXASp2ZgYJr4pg=\n=uYrH\n-----END PGP SIGNATURE-----\n", "payload": "tree 87f6095ee69fb11dd7b82637e07529de0e2bed04\nparent fb976e65a0a2e4368fe0f6e80f9efdc18fb125e4\nparent 51858dae1e0008f0cef35b5ba73ff115ed8f3c1e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593660943 -0700\ncommitter GitHub <noreply@github.com> 1593660943 -0700\n\nRollup merge of #73306 - calebzulawski:target-feature-11-fn-trait-soundness, r=nikomatsakis\n\nDon't implement Fn* traits for #[target_feature] functions\n\nCloses #72012.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d391d2a733404415010afadb4b0ffdf84c928a4", "html_url": "https://github.com/rust-lang/rust/commit/3d391d2a733404415010afadb4b0ffdf84c928a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d391d2a733404415010afadb4b0ffdf84c928a4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb976e65a0a2e4368fe0f6e80f9efdc18fb125e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb976e65a0a2e4368fe0f6e80f9efdc18fb125e4", "html_url": "https://github.com/rust-lang/rust/commit/fb976e65a0a2e4368fe0f6e80f9efdc18fb125e4"}, {"sha": "51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "html_url": "https://github.com/rust-lang/rust/commit/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e"}], "stats": {"total": 149, "additions": 148, "deletions": 1}, "files": [{"sha": "ad6e81ed3e8893610295f83885fcb680308f4312", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3d391d2a733404415010afadb4b0ffdf84c928a4", "patch": "@@ -429,6 +429,24 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             );\n                         }\n \n+                        let is_fn_trait = [\n+                            self.tcx.lang_items().fn_trait(),\n+                            self.tcx.lang_items().fn_mut_trait(),\n+                            self.tcx.lang_items().fn_once_trait(),\n+                        ]\n+                        .contains(&Some(trait_ref.def_id()));\n+                        let is_target_feature_fn =\n+                            if let ty::FnDef(def_id, _) = trait_ref.skip_binder().self_ty().kind {\n+                                !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+                            } else {\n+                                false\n+                            };\n+                        if is_fn_trait && is_target_feature_fn {\n+                            err.note(\n+                                \"`#[target_feature]` functions do not implement the `Fn` traits\",\n+                            );\n+                        }\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types_or_consts()\n                             && self.predicate_can_apply(obligation.param_env, trait_ref)"}, {"sha": "597a7a58022cd7762297a449dddfb446d4abfccd", "filename": "src/librustc_trait_selection/traits/select/candidate_assembly.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=3d391d2a733404415010afadb4b0ffdf84c928a4", "patch": "@@ -306,7 +306,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 candidates.ambiguous = true; // Could wind up being a fn() type.\n             }\n             // Provide an impl, but only for suitable `fn` pointers.\n-            ty::FnDef(..) | ty::FnPtr(_) => {\n+            ty::FnPtr(_) => {\n                 if let ty::FnSig {\n                     unsafety: hir::Unsafety::Normal,\n                     abi: Abi::Rust,\n@@ -317,6 +317,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     candidates.vec.push(FnPointerCandidate);\n                 }\n             }\n+            // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).\n+            ty::FnDef(def_id, _) => {\n+                if let ty::FnSig {\n+                    unsafety: hir::Unsafety::Normal,\n+                    abi: Abi::Rust,\n+                    c_variadic: false,\n+                    ..\n+                } = self_ty.fn_sig(self.tcx()).skip_binder()\n+                {\n+                    if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {\n+                        candidates.vec.push(FnPointerCandidate);\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "5c838fd719cd9492eabdce4e54c6e93897eae0d7", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs?ref=3d391d2a733404415010afadb4b0ffdf84c928a4", "patch": "@@ -0,0 +1,34 @@\n+// only-x86_64\n+\n+#![feature(target_feature_11)]\n+\n+#[target_feature(enable = \"avx\")]\n+fn foo() {}\n+\n+#[target_feature(enable = \"avx\")]\n+unsafe fn foo_unsafe() {}\n+\n+fn call(f: impl Fn()) {\n+    f()\n+}\n+\n+fn call_mut(f: impl FnMut()) {\n+    f()\n+}\n+\n+fn call_once(f: impl FnOnce()) {\n+    f()\n+}\n+\n+fn main() {\n+    call(foo); //~ ERROR expected a `std::ops::Fn<()>` closure, found `fn() {foo}`\n+    call_mut(foo); //~ ERROR expected a `std::ops::FnMut<()>` closure, found `fn() {foo}`\n+    call_once(foo); //~ ERROR expected a `std::ops::FnOnce<()>` closure, found `fn() {foo}`\n+\n+    call(foo_unsafe);\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+    call_mut(foo_unsafe);\n+    //~^ ERROR expected a `std::ops::FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+    call_once(foo_unsafe);\n+    //~^ ERROR expected a `std::ops::FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+}"}, {"sha": "448077b439e80bb3416fe4fdf62361755fb9fffc", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d391d2a733404415010afadb4b0ffdf84c928a4/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=3d391d2a733404415010afadb4b0ffdf84c928a4", "patch": "@@ -0,0 +1,81 @@\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `fn() {foo}`\n+  --> $DIR/fn-traits.rs:24:10\n+   |\n+LL | fn call(f: impl Fn()) {\n+   |                 ---- required by this bound in `call`\n+...\n+LL |     call(foo);\n+   |          ^^^ expected an `Fn<()>` closure, found `fn() {foo}`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `fn() {foo}`\n+   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n+\n+error[E0277]: expected a `std::ops::FnMut<()>` closure, found `fn() {foo}`\n+  --> $DIR/fn-traits.rs:25:14\n+   |\n+LL | fn call_mut(f: impl FnMut()) {\n+   |                     ------- required by this bound in `call_mut`\n+...\n+LL |     call_mut(foo);\n+   |              ^^^ expected an `FnMut<()>` closure, found `fn() {foo}`\n+   |\n+   = help: the trait `std::ops::FnMut<()>` is not implemented for `fn() {foo}`\n+   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n+\n+error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `fn() {foo}`\n+  --> $DIR/fn-traits.rs:26:15\n+   |\n+LL | fn call_once(f: impl FnOnce()) {\n+   |                      -------- required by this bound in `call_once`\n+...\n+LL |     call_once(foo);\n+   |               ^^^ expected an `FnOnce<()>` closure, found `fn() {foo}`\n+   |\n+   = help: the trait `std::ops::FnOnce<()>` is not implemented for `fn() {foo}`\n+   = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+  --> $DIR/fn-traits.rs:28:10\n+   |\n+LL | fn call(f: impl Fn()) {\n+   |                 ---- required by this bound in `call`\n+...\n+LL |     call(foo_unsafe);\n+   |          ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n+\n+error[E0277]: expected a `std::ops::FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+  --> $DIR/fn-traits.rs:30:14\n+   |\n+LL | fn call_mut(f: impl FnMut()) {\n+   |                     ------- required by this bound in `call_mut`\n+...\n+LL |     call_mut(foo_unsafe);\n+   |              ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |\n+   = help: the trait `std::ops::FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n+\n+error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+  --> $DIR/fn-traits.rs:32:15\n+   |\n+LL | fn call_once(f: impl FnOnce()) {\n+   |                      -------- required by this bound in `call_once`\n+...\n+LL |     call_once(foo_unsafe);\n+   |               ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |\n+   = help: the trait `std::ops::FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}