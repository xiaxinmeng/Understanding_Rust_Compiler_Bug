{"sha": "76030ebdeaf759a5d9948ece4ba16092d0039c95", "node_id": "C_kwDOAAsO6NoAKDc2MDMwZWJkZWFmNzU5YTVkOTk0OGVjZTRiYTE2MDkyZDAwMzljOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T13:13:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T13:13:09Z"}, "message": "Auto merge of #12277 - listochkin:show-implementations-display-error, r=listochkin\n\n\"Show implementations\" link display error fix\n\nWhile VSCode [uses it's own implementation for URIs](https://github.com/microsoft/vscode-uri)\nwhich notably doesn't have any limits of URI size, the renderer itself\nrelies on Web platform engine, that limits the length of the URLs and\nbails out when the attribute length of an `href` inside `a` tag is too\nlong.\n\nCommand URIs have a form of `command:command-name?arguments`, where\n`arguments` is a percent-encoded array of data we want to pass along to\nthe command function. For \"Show References\" this is a list of all file\nURIs with locations of every reference, and it can get quite long.\n\nThis PR introduces another intermediary `linkToCommand` command. When\nwe render a command link, a reference to a command with all its arguments\nis stored in a map, and instead a `linkToCommand` link is rendered\nwith the key to that map.\n\nFor now the map is cleaned up periodically (I've set it to every\n10 minutes). In general case we'll probably need to introduce TTLs or\nflags to denote ephemeral links (like these in hover popups) and\npersistent links and clean those separately. But for now simply keeping\nthe last few links in the map should be good enough. Likewise, we could\nadd code to remove a target command from the map after the link is\nclicked, but assuming most links in hover sheets won't be clicked anyway\nthis code won't change the overall memory use much.\n\nCloses #9926", "tree": {"sha": "ce3dca63ff556415f42aa7339ad231b72d516269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce3dca63ff556415f42aa7339ad231b72d516269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76030ebdeaf759a5d9948ece4ba16092d0039c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76030ebdeaf759a5d9948ece4ba16092d0039c95", "html_url": "https://github.com/rust-lang/rust/commit/76030ebdeaf759a5d9948ece4ba16092d0039c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76030ebdeaf759a5d9948ece4ba16092d0039c95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187bd7d48afda84d6aff578274585d9835cbd4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/187bd7d48afda84d6aff578274585d9835cbd4bb", "html_url": "https://github.com/rust-lang/rust/commit/187bd7d48afda84d6aff578274585d9835cbd4bb"}, {"sha": "e87e1bc33d0c1d688e17ac443d8c1b70602ad2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87e1bc33d0c1d688e17ac443d8c1b70602ad2c8", "html_url": "https://github.com/rust-lang/rust/commit/e87e1bc33d0c1d688e17ac443d8c1b70602ad2c8"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "bff9bc30f9380da602e5a2e79f8f120f205d0522", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/76030ebdeaf759a5d9948ece4ba16092d0039c95/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76030ebdeaf759a5d9948ece4ba16092d0039c95/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=76030ebdeaf759a5d9948ece4ba16092d0039c95", "patch": "@@ -7,14 +7,46 @@ import { WorkspaceEdit } from \"vscode\";\n import { Workspace } from \"./ctx\";\n import { updateConfig } from \"./config\";\n import { substituteVariablesInEnv } from \"./config\";\n+import { randomUUID } from \"crypto\";\n \n export interface Env {\n     [name: string]: string;\n }\n \n-function renderCommand(cmd: ra.CommandLink) {\n-    return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(\n-        JSON.stringify(cmd.arguments)\n+// Command URIs have a form of command:command-name?arguments, where\n+// arguments is a percent-encoded array of data we want to pass along to\n+// the command function. For \"Show References\" this is a list of all file\n+// URIs with locations of every reference, and it can get quite long.\n+//\n+// To work around it we use an intermediary linkToCommand command. When\n+// we render a command link, a reference to a command with all its arguments\n+// is stored in a map, and instead a linkToCommand link is rendered\n+// with the key to that map.\n+export const LINKED_COMMANDS = new Map<string, ra.CommandLink>();\n+\n+// For now the map is cleaned up periodically (I've set it to every\n+// 10 minutes). In general case we'll probably need to introduce TTLs or\n+// flags to denote ephemeral links (like these in hover popups) and\n+// persistent links and clean those separately. But for now simply keeping\n+// the last few links in the map should be good enough. Likewise, we could\n+// add code to remove a target command from the map after the link is\n+// clicked, but assuming most links in hover sheets won't be clicked anyway\n+// this code won't change the overall memory use much.\n+setInterval(function cleanupOlderCommandLinks() {\n+    // keys are returned in insertion order, we'll keep a few\n+    // of recent keys available, and clean the rest\n+    const keys = [...LINKED_COMMANDS.keys()];\n+    const keysToRemove = keys.slice(0, keys.length - 10);\n+    for (const key of keysToRemove) {\n+        LINKED_COMMANDS.delete(key);\n+    }\n+}, 10 * 60 * 1000);\n+\n+function renderCommand(cmd: ra.CommandLink): string {\n+    const commandId = randomUUID();\n+    LINKED_COMMANDS.set(commandId, cmd);\n+    return `[${cmd.title}](command:rust-analyzer.linkToCommand?${encodeURIComponent(\n+        JSON.stringify([commandId])\n     )} '${cmd.tooltip}')`;\n }\n "}, {"sha": "ee8fa2eb51df53f58b7d569170bb9c7b74a9a54c", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76030ebdeaf759a5d9948ece4ba16092d0039c95/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76030ebdeaf759a5d9948ece4ba16092d0039c95/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=76030ebdeaf759a5d9948ece4ba16092d0039c95", "patch": "@@ -11,6 +11,7 @@ import { AstInspector } from \"./ast_inspector\";\n import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor } from \"./util\";\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n+import { LINKED_COMMANDS } from \"./client\";\n \n export * from \"./ast_inspector\";\n export * from \"./run\";\n@@ -928,3 +929,13 @@ export function newDebugConfig(ctx: Ctx): Cmd {\n         await makeDebugConfig(ctx, item.runnable);\n     };\n }\n+\n+export function linkToCommand(ctx: Ctx): Cmd {\n+    return async (commandId: string) => {\n+        const link = LINKED_COMMANDS.get(commandId);\n+        if (ctx.client && link) {\n+            const { command, arguments: args = [] } = link;\n+            await vscode.commands.executeCommand(command, ...args);\n+        }\n+    };\n+}"}, {"sha": "7c5be156eba9ebc307b07155137df3f67a070772", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76030ebdeaf759a5d9948ece4ba16092d0039c95/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76030ebdeaf759a5d9948ece4ba16092d0039c95/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=76030ebdeaf759a5d9948ece4ba16092d0039c95", "patch": "@@ -160,6 +160,8 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     ctx.registerCommand(\"resolveCodeAction\", commands.resolveCodeAction);\n     ctx.registerCommand(\"applyActionGroup\", commands.applyActionGroup);\n     ctx.registerCommand(\"gotoLocation\", commands.gotoLocation);\n+\n+    ctx.registerCommand(\"linkToCommand\", commands.linkToCommand);\n }\n \n export async function deactivate() {"}]}