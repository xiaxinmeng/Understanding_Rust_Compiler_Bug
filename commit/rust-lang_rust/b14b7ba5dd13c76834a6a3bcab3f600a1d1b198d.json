{"sha": "b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "node_id": "C_kwDOAAsO6NoAKGIxNGI3YmE1ZGQxM2M3NjgzNGE2YTNiY2FiM2Y2MDBhMWQxYjE5OGQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-01-30T03:13:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:56Z"}, "message": "Use `ThinVec` in `ast::Block`.", "tree": {"sha": "9bf5ece6c9b1d0cd6e6f7bbc16f6929c747d4233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf5ece6c9b1d0cd6e6f7bbc16f6929c747d4233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "html_url": "https://github.com/rust-lang/rust/commit/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4143b101f9b0949c4bc6db1124f86ef02b1ef7aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4143b101f9b0949c4bc6db1124f86ef02b1ef7aa", "html_url": "https://github.com/rust-lang/rust/commit/4143b101f9b0949c4bc6db1124f86ef02b1ef7aa"}], "stats": {"total": 173, "additions": 92, "deletions": 81}, "files": [{"sha": "e485bdc0972b6066ffcce093358c4e92ef800c27", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -531,7 +531,7 @@ pub enum NestedMetaItem {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Block {\n     /// The statements in the block.\n-    pub stmts: Vec<Stmt>,\n+    pub stmts: ThinVec<Stmt>,\n     pub id: NodeId,\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`.\n     pub rules: BlockCheckMode,\n@@ -3112,7 +3112,7 @@ mod size_asserts {\n     static_assert_size!(AssocItem, 104);\n     static_assert_size!(AssocItemKind, 32);\n     static_assert_size!(Attribute, 32);\n-    static_assert_size!(Block, 48);\n+    static_assert_size!(Block, 32);\n     static_assert_size!(Expr, 72);\n     static_assert_size!(ExprKind, 40);\n     static_assert_size!(Fn, 152);"}, {"sha": "ac6697232cb827f8afe85f13c03aad3d97ed7dda", "filename": "compiler/rustc_builtin_macros/src/alloc_error_handler.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -39,7 +39,7 @@ pub fn expand(\n     let span = ecx.with_def_site_ctxt(item.span);\n \n     // Generate item statements for the allocator methods.\n-    let stmts = vec![generate_handler(ecx, item.ident, span, sig_span)];\n+    let stmts = thin_vec![generate_handler(ecx, item.ident, span, sig_span)];\n \n     // Generate anonymous constant serving as container for the allocator methods.\n     let const_ty = ecx.ty(sig_span, TyKind::Tup(ThinVec::new()));"}, {"sha": "b0b4dda16aff2c38069c3f18f5ed4b3e4860b16f", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -83,12 +83,12 @@ impl<'cx, 'a> Context<'cx, 'a> {\n \n         let Self { best_case_captures, capture_decls, cx, local_bind_decls, span, .. } = self;\n \n-        let mut assert_then_stmts = Vec::with_capacity(2);\n+        let mut assert_then_stmts = ThinVec::with_capacity(2);\n         assert_then_stmts.extend(best_case_captures);\n         assert_then_stmts.push(self.cx.stmt_expr(panic));\n         let assert_then = self.cx.block(span, assert_then_stmts);\n \n-        let mut stmts = Vec::with_capacity(4);\n+        let mut stmts = ThinVec::with_capacity(4);\n         stmts.push(initial_imports);\n         stmts.extend(capture_decls.into_iter().map(|c| c.decl));\n         stmts.extend(local_bind_decls);\n@@ -389,7 +389,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n         let local_bind_path = self.cx.expr_path(Path::from_ident(local_bind));\n         let rslt = if self.is_consumed {\n             let ret = self.cx.stmt_expr(local_bind_path);\n-            self.cx.expr_block(self.cx.block(self.span, vec![try_capture_call, ret]))\n+            self.cx.expr_block(self.cx.block(self.span, thin_vec![try_capture_call, ret]))\n         } else {\n             self.best_case_captures.push(try_capture_call);\n             local_bind_path"}, {"sha": "3c1abe02036b7e4b03ac77d9e48f676e40c66c3b", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n-use thin_vec::thin_vec;\n+use thin_vec::{thin_vec, ThinVec};\n \n pub fn expand_deriving_clone(\n     cx: &mut ExtCtxt<'_>,\n@@ -100,7 +100,7 @@ fn cs_clone_simple(\n     substr: &Substructure<'_>,\n     is_union: bool,\n ) -> BlockOrExpr {\n-    let mut stmts = Vec::new();\n+    let mut stmts = ThinVec::new();\n     let mut seen_type_names = FxHashSet::default();\n     let mut process_variant = |variant: &VariantData| {\n         for field in variant.fields() {"}, {"sha": "af971958680ae486dfc935d18cda4cc83554fff3", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use thin_vec::thin_vec;\n+use thin_vec::{thin_vec, ThinVec};\n \n pub fn expand_deriving_eq(\n     cx: &mut ExtCtxt<'_>,\n@@ -56,7 +56,7 @@ fn cs_total_eq_assert(\n     trait_span: Span,\n     substr: &Substructure<'_>,\n ) -> BlockOrExpr {\n-    let mut stmts = Vec::new();\n+    let mut stmts = ThinVec::new();\n     let mut seen_type_names = FxHashSet::default();\n     let mut process_variant = |variant: &ast::VariantData| {\n         for field in variant.fields() {"}, {"sha": "8a341c959ed434f97812aa77b85bbb3499475edf", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -187,7 +187,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         args.push(cx.expr_ident(span, Ident::new(sym::values, span)));\n         let expr = cx.expr_call_global(span, fn_path_debug_internal, args);\n \n-        let mut stmts = Vec::with_capacity(3);\n+        let mut stmts = ThinVec::with_capacity(2);\n         if is_struct {\n             stmts.push(names_let.unwrap());\n         }"}, {"sha": "a3b11309d0ce1a7eaae6ada7378ed84e559ff4ca", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -169,7 +169,7 @@ fn encodable_substructure(\n         Struct(_, fields) => {\n             let fn_emit_struct_field_path =\n                 cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_struct_field]);\n-            let mut stmts = Vec::new();\n+            let mut stmts = ThinVec::new();\n             for (i, &FieldInfo { name, ref self_expr, span, .. }) in fields.iter().enumerate() {\n                 let name = match name {\n                     Some(id) => id.name,\n@@ -237,7 +237,7 @@ fn encodable_substructure(\n             let fn_emit_enum_variant_arg_path: Vec<_> =\n                 cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_enum_variant_arg]);\n \n-            let mut stmts = Vec::new();\n+            let mut stmts = ThinVec::new();\n             if !fields.is_empty() {\n                 let last = fields.len() - 1;\n                 for (i, &FieldInfo { ref self_expr, span, .. }) in fields.iter().enumerate() {\n@@ -293,7 +293,7 @@ fn encodable_substructure(\n                 fn_emit_enum_path,\n                 thin_vec![encoder, cx.expr_str(trait_span, substr.type_ident.name), blk],\n             );\n-            BlockOrExpr::new_mixed(vec![me], Some(expr))\n+            BlockOrExpr::new_mixed(thin_vec![me], Some(expr))\n         }\n \n         _ => cx.bug(\"expected Struct or EnumMatching in derive(Encodable)\"),"}, {"sha": "31921a0c8644751a9f4d512743710ed2802cf295", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -328,18 +328,18 @@ struct TypeParameter {\n /// avoiding the insertion of any unnecessary blocks.\n ///\n /// The statements come before the expression.\n-pub struct BlockOrExpr(Vec<ast::Stmt>, Option<P<Expr>>);\n+pub struct BlockOrExpr(ThinVec<ast::Stmt>, Option<P<Expr>>);\n \n impl BlockOrExpr {\n-    pub fn new_stmts(stmts: Vec<ast::Stmt>) -> BlockOrExpr {\n+    pub fn new_stmts(stmts: ThinVec<ast::Stmt>) -> BlockOrExpr {\n         BlockOrExpr(stmts, None)\n     }\n \n     pub fn new_expr(expr: P<Expr>) -> BlockOrExpr {\n-        BlockOrExpr(vec![], Some(expr))\n+        BlockOrExpr(ThinVec::new(), Some(expr))\n     }\n \n-    pub fn new_mixed(stmts: Vec<ast::Stmt>, expr: Option<P<Expr>>) -> BlockOrExpr {\n+    pub fn new_mixed(stmts: ThinVec<ast::Stmt>, expr: Option<P<Expr>>) -> BlockOrExpr {\n         BlockOrExpr(stmts, expr)\n     }\n \n@@ -355,7 +355,7 @@ impl BlockOrExpr {\n     fn into_expr(self, cx: &ExtCtxt<'_>, span: Span) -> P<Expr> {\n         if self.0.is_empty() {\n             match self.1 {\n-                None => cx.expr_block(cx.block(span, vec![])),\n+                None => cx.expr_block(cx.block(span, ThinVec::new())),\n                 Some(expr) => expr,\n             }\n         } else if self.0.len() == 1\n@@ -1146,7 +1146,7 @@ impl<'a> MethodDef<'a> {\n         // There is no sensible code to be generated for *any* deriving on a\n         // zero-variant enum. So we just generate a failing expression.\n         if variants.is_empty() {\n-            return BlockOrExpr(vec![], Some(deriving::call_unreachable(cx, span)));\n+            return BlockOrExpr(ThinVec::new(), Some(deriving::call_unreachable(cx, span)));\n         }\n \n         let prefixes = iter::once(\"__self\".to_string())\n@@ -1182,7 +1182,7 @@ impl<'a> MethodDef<'a> {\n             let other_selflike_exprs = tag_exprs;\n             let tag_field = FieldInfo { span, name: None, self_expr, other_selflike_exprs };\n \n-            let tag_let_stmts: Vec<_> = iter::zip(&tag_idents, &selflike_args)\n+            let tag_let_stmts: ThinVec<_> = iter::zip(&tag_idents, &selflike_args)\n                 .map(|(&ident, selflike_arg)| {\n                     let variant_value = deriving::call_intrinsic(\n                         cx,\n@@ -1362,7 +1362,7 @@ impl<'a> MethodDef<'a> {\n             tag_let_stmts.append(&mut tag_check_plus_match.0);\n             BlockOrExpr(tag_let_stmts, tag_check_plus_match.1)\n         } else {\n-            BlockOrExpr(vec![], Some(get_match_expr(selflike_args)))\n+            BlockOrExpr(ThinVec::new(), Some(get_match_expr(selflike_args)))\n         }\n     }\n \n@@ -1599,7 +1599,7 @@ impl<'a> TraitDef<'a> {\n                         } else {\n                             // Wrap the expression in `{...}`, causing a copy.\n                             field_expr = cx.expr_block(\n-                                cx.block(struct_field.span, vec![cx.stmt_expr(field_expr)]),\n+                                cx.block(struct_field.span, thin_vec![cx.stmt_expr(field_expr)]),\n                             );\n                         }\n                     }"}, {"sha": "4eee573db4215849283231ca9cf00457e6c81157", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -72,7 +72,7 @@ fn hash_substructure(\n         }\n         EnumTag(tag_field, match_expr) => {\n             assert!(tag_field.other_selflike_exprs.is_empty());\n-            let stmts = vec![call_hash(tag_field.span, tag_field.self_expr.clone())];\n+            let stmts = thin_vec![call_hash(tag_field.span, tag_field.self_expr.clone())];\n             (stmts, match_expr.clone())\n         }\n         _ => cx.span_bug(trait_span, \"impossible substructure in `derive(Hash)`\"),"}, {"sha": "d34336e7679c03bf3a0cd3a1542fcfdd6054997f", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::{GenericArg, Impl, ItemKind, MetaItem};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n macro path_local($x:ident) {\n     generic::ty::Path::new_local(sym::$x)\n@@ -107,7 +107,7 @@ fn call_unreachable(cx: &ExtCtxt<'_>, span: Span) -> P<ast::Expr> {\n     let call = cx.expr_call_global(span, path, ThinVec::new());\n \n     cx.expr_block(P(ast::Block {\n-        stmts: vec![cx.stmt_expr(call)],\n+        stmts: thin_vec![cx.stmt_expr(call)],\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n@@ -212,7 +212,7 @@ fn inject_impl_of_structural_trait(\n \n fn assert_ty_bounds(\n     cx: &mut ExtCtxt<'_>,\n-    stmts: &mut Vec<ast::Stmt>,\n+    stmts: &mut ThinVec<ast::Stmt>,\n     ty: P<ast::Ty>,\n     span: Span,\n     assert_path: &[Symbol],"}, {"sha": "bc513607ddd1d7e435cb8d0f28620840b8048f19", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -375,7 +375,7 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n         });\n \n     let block = cx.expr_block(\n-        cx.block(span, vec![cx.stmt_item(span, krate), cx.stmt_item(span, decls_static)]),\n+        cx.block(span, thin_vec![cx.stmt_item(span, krate), cx.stmt_item(span, decls_static)]),\n     );\n \n     let anon_constant = cx.item_const("}, {"sha": "d8e3db9e8ee094036892a0dafb38d02adbc3dc4b", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -317,9 +317,9 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     // If no test runner is provided we need to import the test crate\n     let main_body = if cx.test_runner.is_none() {\n-        ecx.block(sp, vec![test_extern_stmt, call_test_main])\n+        ecx.block(sp, thin_vec![test_extern_stmt, call_test_main])\n     } else {\n-        ecx.block(sp, vec![call_test_main])\n+        ecx.block(sp, thin_vec![call_test_main])\n     };\n \n     let decl = ecx.fn_decl(ThinVec::new(), ast::FnRetTy::Ty(main_ret_ty));"}, {"sha": "b6c9110a79a74d314c9b9dc1a4cb52185f9f9d2a", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -221,14 +221,14 @@ impl<'a> ExtCtxt<'a> {\n     pub fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> {\n         self.block(\n             expr.span,\n-            vec![ast::Stmt {\n+            thin_vec![ast::Stmt {\n                 id: ast::DUMMY_NODE_ID,\n                 span: expr.span,\n                 kind: ast::StmtKind::Expr(expr),\n             }],\n         )\n     }\n-    pub fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n+    pub fn block(&self, span: Span, stmts: ThinVec<ast::Stmt>) -> P<ast::Block> {\n         P(ast::Block {\n             stmts,\n             id: ast::DUMMY_NODE_ID,\n@@ -567,7 +567,12 @@ impl<'a> ExtCtxt<'a> {\n         self.lambda(span, vec![ident], body)\n     }\n \n-    pub fn lambda_stmts_1(&self, span: Span, stmts: Vec<ast::Stmt>, ident: Ident) -> P<ast::Expr> {\n+    pub fn lambda_stmts_1(\n+        &self,\n+        span: Span,\n+        stmts: ThinVec<ast::Stmt>,\n+        ident: Ident,\n+    ) -> P<ast::Expr> {\n         self.lambda1(span, self.expr_block(self.block(span, stmts)), ident)\n     }\n "}, {"sha": "baa99c48c66e78ab44d61937599aeb49b08c022b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -708,7 +708,7 @@ impl<'a> Parser<'a> {\n                     err.delay_as_bug();\n                     self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n-                        vec![self.mk_stmt_err(expr.span)],\n+                        thin_vec![self.mk_stmt_err(expr.span)],\n                         s,\n                         lo.to(self.prev_token.span),\n                     );"}, {"sha": "0c397414ba112802f938c2f191cee58e1bf22425", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -1601,7 +1601,7 @@ impl<'a> Parser<'a> {\n \n                 // Replace `'label: non_block_expr` with `'label: {non_block_expr}` in order to suppress future errors about `break 'label`.\n                 let stmt = self.mk_stmt(span, StmtKind::Expr(expr));\n-                let blk = self.mk_block(vec![stmt], BlockCheckMode::Default, span);\n+                let blk = self.mk_block(thin_vec![stmt], BlockCheckMode::Default, span);\n                 self.mk_expr(span, ExprKind::Block(blk, label))\n             });\n \n@@ -2481,7 +2481,7 @@ impl<'a> Parser<'a> {\n             self.sess\n                 .emit_err(errors::MissingExpressionInForLoop { span: expr.span.shrink_to_lo() });\n             let err_expr = self.mk_expr(expr.span, ExprKind::Err);\n-            let block = self.mk_block(vec![], BlockCheckMode::Default, self.prev_token.span);\n+            let block = self.mk_block(thin_vec![], BlockCheckMode::Default, self.prev_token.span);\n             return Ok(self.mk_expr(\n                 lo.to(self.prev_token.span),\n                 ExprKind::ForLoop(pat, err_expr, block, opt_label),"}, {"sha": "8ef16ff43e131d024c5ede187eefe3664baa68d8", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -20,8 +20,8 @@ use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n-\n use std::mem;\n+use thin_vec::{thin_vec, ThinVec};\n \n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items.\n@@ -544,7 +544,7 @@ impl<'a> Parser<'a> {\n         s: BlockCheckMode,\n         recover: AttemptLocalParseRecovery,\n     ) -> PResult<'a, P<Block>> {\n-        let mut stmts = vec![];\n+        let mut stmts = ThinVec::new();\n         let mut snapshot = None;\n         while !self.eat(&token::CloseDelim(Delimiter::Brace)) {\n             if self.token == token::Eof {\n@@ -662,7 +662,12 @@ impl<'a> Parser<'a> {\n         Ok(Some(stmt))\n     }\n \n-    pub(super) fn mk_block(&self, stmts: Vec<Stmt>, rules: BlockCheckMode, span: Span) -> P<Block> {\n+    pub(super) fn mk_block(\n+        &self,\n+        stmts: ThinVec<Stmt>,\n+        rules: BlockCheckMode,\n+        span: Span,\n+    ) -> P<Block> {\n         P(Block {\n             stmts,\n             id: DUMMY_NODE_ID,\n@@ -682,6 +687,6 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_block_err(&self, span: Span) -> P<Block> {\n-        self.mk_block(vec![self.mk_stmt_err(span)], BlockCheckMode::Default, span)\n+        self.mk_block(thin_vec![self.mk_stmt_err(span)], BlockCheckMode::Default, span)\n     }\n }"}, {"sha": "340113866c4e2b614ed170b4475e5a8787c4aa7c", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -1,5 +1,6 @@\n use rustc_ast::{ast, ptr};\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n use crate::attr::get_attrs_from_stmt;\n use crate::config::lists::*;\n@@ -150,7 +151,7 @@ fn rewrite_closure_with_block(\n     }\n \n     let block = ast::Block {\n-        stmts: vec![ast::Stmt {\n+        stmts: thin_vec![ast::Stmt {\n             id: ast::NodeId::root(),\n             kind: ast::StmtKind::Expr(ptr::P(body.clone())),\n             span: body.span,"}, {"sha": "186e7fcd1b2cdaaeac05af85379f4d7b56ad37c9", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "patch": "@@ -15,52 +15,52 @@ ast-stats-1 Arm                       96 ( 1.4%)             2            48\n ast-stats-1 ForeignItem               96 ( 1.4%)             1            96\n ast-stats-1 - Fn                        96 ( 1.4%)             1\n ast-stats-1 FnDecl                   120 ( 1.8%)             5            24\n-ast-stats-1 FieldDef                 160 ( 2.3%)             2            80\n-ast-stats-1 Stmt                     160 ( 2.3%)             5            32\n+ast-stats-1 FieldDef                 160 ( 2.4%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.4%)             5            32\n ast-stats-1 - Local                     32 ( 0.5%)             1\n ast-stats-1 - MacCall                   32 ( 0.5%)             1\n ast-stats-1 - Expr                      96 ( 1.4%)             3\n-ast-stats-1 Param                    160 ( 2.3%)             4            40\n-ast-stats-1 Variant                  208 ( 3.0%)             2           104\n+ast-stats-1 Param                    160 ( 2.4%)             4            40\n+ast-stats-1 Block                    192 ( 2.8%)             6            32\n+ast-stats-1 Variant                  208 ( 3.1%)             2           104\n ast-stats-1 GenericBound             224 ( 3.3%)             4            56\n ast-stats-1 - Trait                    224 ( 3.3%)             4\n-ast-stats-1 Block                    288 ( 4.2%)             6            48\n-ast-stats-1 AssocItem                416 ( 6.1%)             4           104\n-ast-stats-1 - Type                     208 ( 3.0%)             2\n-ast-stats-1 - Fn                       208 ( 3.0%)             2\n-ast-stats-1 GenericParam             480 ( 7.0%)             5            96\n-ast-stats-1 Expr                     576 ( 8.4%)             8            72\n+ast-stats-1 AssocItem                416 ( 6.2%)             4           104\n+ast-stats-1 - Type                     208 ( 3.1%)             2\n+ast-stats-1 - Fn                       208 ( 3.1%)             2\n+ast-stats-1 GenericParam             480 ( 7.1%)             5            96\n+ast-stats-1 Expr                     576 ( 8.5%)             8            72\n ast-stats-1 - Path                      72 ( 1.1%)             1\n ast-stats-1 - Match                     72 ( 1.1%)             1\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Lit                      144 ( 2.1%)             2\n ast-stats-1 - Block                    216 ( 3.2%)             3\n-ast-stats-1 Pat                      616 ( 9.0%)             7            88\n+ast-stats-1 Pat                      616 ( 9.1%)             7            88\n ast-stats-1 - Struct                    88 ( 1.3%)             1\n ast-stats-1 - Wild                      88 ( 1.3%)             1\n-ast-stats-1 - Ident                    440 ( 6.4%)             5\n-ast-stats-1 PathSegment              720 (10.5%)            30            24\n-ast-stats-1 Ty                       896 (13.1%)            14            64\n+ast-stats-1 - Ident                    440 ( 6.5%)             5\n+ast-stats-1 PathSegment              720 (10.7%)            30            24\n+ast-stats-1 Ty                       896 (13.3%)            14            64\n ast-stats-1 - Ptr                       64 ( 0.9%)             1\n ast-stats-1 - Ref                       64 ( 0.9%)             1\n ast-stats-1 - ImplicitSelf             128 ( 1.9%)             2\n-ast-stats-1 - Path                     640 ( 9.3%)            10\n-ast-stats-1 Item                   1_296 (18.9%)             9           144\n+ast-stats-1 - Path                     640 ( 9.5%)            10\n+ast-stats-1 Item                   1_296 (19.2%)             9           144\n ast-stats-1 - Trait                    144 ( 2.1%)             1\n ast-stats-1 - Enum                     144 ( 2.1%)             1\n ast-stats-1 - ForeignMod               144 ( 2.1%)             1\n ast-stats-1 - Impl                     144 ( 2.1%)             1\n-ast-stats-1 - Fn                       288 ( 4.2%)             2\n-ast-stats-1 - Use                      432 ( 6.3%)             3\n+ast-stats-1 - Fn                       288 ( 4.3%)             2\n+ast-stats-1 - Use                      432 ( 6.4%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  6_848\n+ast-stats-1 Total                  6_752\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n ast-stats-2 GenericArgs               40 ( 0.5%)             1            40\n ast-stats-2 - AngleBracketed            40 ( 0.5%)             1\n-ast-stats-2 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-2 ExprField                 48 ( 0.7%)             1            48\n ast-stats-2 WherePredicate            56 ( 0.8%)             1            56\n ast-stats-2 - BoundPredicate            56 ( 0.8%)             1\n ast-stats-2 Crate                     56 ( 0.8%)             1            56\n@@ -73,47 +73,47 @@ ast-stats-2 FnDecl                   120 ( 1.6%)             5            24\n ast-stats-2 Attribute                128 ( 1.7%)             4            32\n ast-stats-2 - DocComment                32 ( 0.4%)             1\n ast-stats-2 - Normal                    96 ( 1.3%)             3\n-ast-stats-2 FieldDef                 160 ( 2.1%)             2            80\n-ast-stats-2 Stmt                     160 ( 2.1%)             5            32\n+ast-stats-2 FieldDef                 160 ( 2.2%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.2%)             5            32\n ast-stats-2 - Local                     32 ( 0.4%)             1\n ast-stats-2 - Semi                      32 ( 0.4%)             1\n ast-stats-2 - Expr                      96 ( 1.3%)             3\n-ast-stats-2 Param                    160 ( 2.1%)             4            40\n+ast-stats-2 Param                    160 ( 2.2%)             4            40\n+ast-stats-2 Block                    192 ( 2.6%)             6            32\n ast-stats-2 Variant                  208 ( 2.8%)             2           104\n ast-stats-2 GenericBound             224 ( 3.0%)             4            56\n ast-stats-2 - Trait                    224 ( 3.0%)             4\n-ast-stats-2 Block                    288 ( 3.9%)             6            48\n ast-stats-2 AssocItem                416 ( 5.6%)             4           104\n ast-stats-2 - Type                     208 ( 2.8%)             2\n ast-stats-2 - Fn                       208 ( 2.8%)             2\n-ast-stats-2 GenericParam             480 ( 6.4%)             5            96\n-ast-stats-2 Pat                      616 ( 8.3%)             7            88\n+ast-stats-2 GenericParam             480 ( 6.5%)             5            96\n+ast-stats-2 Pat                      616 ( 8.4%)             7            88\n ast-stats-2 - Struct                    88 ( 1.2%)             1\n ast-stats-2 - Wild                      88 ( 1.2%)             1\n-ast-stats-2 - Ident                    440 ( 5.9%)             5\n-ast-stats-2 Expr                     648 ( 8.7%)             9            72\n+ast-stats-2 - Ident                    440 ( 6.0%)             5\n+ast-stats-2 Expr                     648 ( 8.8%)             9            72\n ast-stats-2 - Path                      72 ( 1.0%)             1\n ast-stats-2 - Match                     72 ( 1.0%)             1\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - InlineAsm                 72 ( 1.0%)             1\n-ast-stats-2 - Lit                      144 ( 1.9%)             2\n+ast-stats-2 - Lit                      144 ( 2.0%)             2\n ast-stats-2 - Block                    216 ( 2.9%)             3\n-ast-stats-2 PathSegment              792 (10.6%)            33            24\n-ast-stats-2 Ty                       896 (12.0%)            14            64\n+ast-stats-2 PathSegment              792 (10.7%)            33            24\n+ast-stats-2 Ty                       896 (12.2%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.9%)             1\n ast-stats-2 - Ref                       64 ( 0.9%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.7%)             2\n-ast-stats-2 - Path                     640 ( 8.6%)            10\n-ast-stats-2 Item                   1_584 (21.2%)            11           144\n-ast-stats-2 - Trait                    144 ( 1.9%)             1\n-ast-stats-2 - Enum                     144 ( 1.9%)             1\n-ast-stats-2 - ExternCrate              144 ( 1.9%)             1\n-ast-stats-2 - ForeignMod               144 ( 1.9%)             1\n-ast-stats-2 - Impl                     144 ( 1.9%)             1\n+ast-stats-2 - Path                     640 ( 8.7%)            10\n+ast-stats-2 Item                   1_584 (21.5%)            11           144\n+ast-stats-2 - Trait                    144 ( 2.0%)             1\n+ast-stats-2 - Enum                     144 ( 2.0%)             1\n+ast-stats-2 - ExternCrate              144 ( 2.0%)             1\n+ast-stats-2 - ForeignMod               144 ( 2.0%)             1\n+ast-stats-2 - Impl                     144 ( 2.0%)             1\n ast-stats-2 - Fn                       288 ( 3.9%)             2\n-ast-stats-2 - Use                      576 ( 7.7%)             4\n+ast-stats-2 - Use                      576 ( 7.8%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  7_464\n+ast-stats-2 Total                  7_368\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}