{"sha": "8825f42a07196b2d838bb740b6a39c837d62f4b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjVmNDJhMDcxOTZiMmQ4MzhiYjc0MGI2YTM5YzgzN2Q2MmY0YjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-01T17:39:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T15:02:13Z"}, "message": "librustc_mir/borrow_check/nll/type_check/mod.rs: rustfmt", "tree": {"sha": "de3c118066818fc8624788afa85cb85023bb7721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3c118066818fc8624788afa85cb85023bb7721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8825f42a07196b2d838bb740b6a39c837d62f4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8825f42a07196b2d838bb740b6a39c837d62f4b1", "html_url": "https://github.com/rust-lang/rust/commit/8825f42a07196b2d838bb740b6a39c837d62f4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8825f42a07196b2d838bb740b6a39c837d62f4b1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c6357daf130597522fb32a5be2fd44b828a833", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c6357daf130597522fb32a5be2fd44b828a833", "html_url": "https://github.com/rust-lang/rust/commit/55c6357daf130597522fb32a5be2fd44b828a833"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "36fecb4347cfcbe63ab4c502811fd18520eb0e55", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8825f42a07196b2d838bb740b6a39c837d62f4b1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825f42a07196b2d838bb740b6a39c837d62f4b1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8825f42a07196b2d838bb740b6a39c837d62f4b1", "patch": "@@ -20,9 +20,9 @@ use dataflow::MaybeInitializedPlaces;\n use rustc::hir::def_id::DefId;\n use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n+use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::*;\n use rustc::traits::query::NoSolution;\n use rustc::traits::{self, Normalized, TraitEngine};\n@@ -300,7 +300,8 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n         debug!(\"sanitize_constant: expected_ty={:?}\", expected_ty);\n \n-        if let Err(terr) = self.cx\n+        if let Err(terr) = self\n+            .cx\n             .eq_types(expected_ty, constant.ty, location.at_self())\n         {\n             span_mirbug!(\n@@ -667,7 +668,7 @@ pub enum Locations {\n         /// NLL RFC, when you have a constraint `R1: R2 @ P`, this field\n         /// is the `P` value.\n         at_location: Location,\n-    }\n+    },\n }\n \n impl Locations {\n@@ -721,7 +722,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         OP: FnOnce(&mut Self) -> InferResult<'tcx, R>,\n     {\n         if cfg!(debug_assertions) {\n-            info!(\"fully_perform_op(describe_op={}) at {:?}\", describe_op(), locations);\n+            info!(\n+                \"fully_perform_op(describe_op={}) at {:?}\",\n+                describe_op(),\n+                locations\n+            );\n         }\n \n         let mut fulfill_cx = TraitEngine::new(self.infcx.tcx);\n@@ -845,7 +850,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             StatementKind::UserAssertTy(ref c_ty, ref local) => {\n                 let local_ty = mir.local_decls()[*local].ty;\n-                let (ty, _) = self.infcx\n+                let (ty, _) = self\n+                    .infcx\n                     .instantiate_canonical_with_fresh_inference_vars(stmt.source_info.span, c_ty);\n                 debug!(\n                     \"check_stmt: user_assert_ty ty={:?} local_ty={:?}\",\n@@ -1457,9 +1463,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             };\n             let operand_ty = operand.ty(mir, tcx);\n-            if let Err(terr) =\n-                self.sub_types(operand_ty, field_ty, location.at_self())\n-            {\n+            if let Err(terr) = self.sub_types(operand_ty, field_ty, location.at_self()) {\n                 span_mirbug!(\n                     self,\n                     rvalue,"}]}