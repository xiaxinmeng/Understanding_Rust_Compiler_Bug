{"sha": "f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "node_id": "C_kwDOAAsO6NoAKGY3MjJiMjRlYjllYTM1YTdjYzE4N2ExY2I1YzUwZDRkMzI0ZjU4NTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-17T14:27:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-17T14:27:28Z"}, "message": "Auto merge of #108159 - matthiaskrgr:rollup-5k2j7cx, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #107592 (Default `repr(C)` enums to `c_int` size)\n - #107956 (Copy `bin/*` and `lib/*.dylib` files to `stage0-sysroot`)\n - #108126 (fix a line, and do a consistency fix)\n - #108144 (Add compiler-errors to a few more triagebot groups)\n - #108149 (typo)\n - #108154 (`BasicBlock::new(0)` -> `START_BLOCK` [no functional changes])\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "821e87562b0d14d209fae8d39ed8fc417d6d459e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821e87562b0d14d209fae8d39ed8fc417d6d459e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "html_url": "https://github.com/rust-lang/rust/commit/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "html_url": "https://github.com/rust-lang/rust/commit/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3"}, {"sha": "ae5473c9699eaf1998c414e0a8884383bb9ddcc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5473c9699eaf1998c414e0a8884383bb9ddcc3", "html_url": "https://github.com/rust-lang/rust/commit/ae5473c9699eaf1998c414e0a8884383bb9ddcc3"}], "stats": {"total": 209, "additions": 167, "deletions": 42}, "files": [{"sha": "aa3a666b0b29c596ade00ff46a4d1a5ab18e3146", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -171,7 +171,9 @@ pub struct TargetDataLayout {\n \n     pub instruction_address_space: AddressSpace,\n \n-    /// Minimum size of #[repr(C)] enums (default I32 bits)\n+    /// Minimum size of #[repr(C)] enums (default c_int::BITS, usually 32)\n+    /// Note: This isn't in LLVM's data layout string, it is `short_enum`\n+    /// so the only valid spec for LLVM is c_int::BITS or 8\n     pub c_enum_min_size: Integer,\n }\n "}, {"sha": "9116e71beac83f0aa9b1ac94b1f21ee331f2ac02", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -521,7 +521,7 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n \n                 // The semantics of #[used] in Rust only require the symbol to make it into the\n                 // object file. It is explicitly allowed for the linker to strip the symbol if it\n-                // is dead, which means we are allowed use `llvm.compiler.used` instead of\n+                // is dead, which means we are allowed to use `llvm.compiler.used` instead of\n                 // `llvm.used` here.\n                 //\n                 // Additionally, https://reviews.llvm.org/D97448 in LLVM 13 started emitting unique\n@@ -532,7 +532,7 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                 // That said, we only ever emit these when compiling for ELF targets, unless\n                 // `#[used(compiler)]` is explicitly requested. This is to avoid similar breakage\n                 // on other targets, in particular MachO targets have *their* static constructor\n-                // lists broken if `llvm.compiler.used` is emitted rather than llvm.used. However,\n+                // lists broken if `llvm.compiler.used` is emitted rather than `llvm.used`. However,\n                 // that check happens when assigning the `CodegenFnAttrFlags` in `rustc_hir_analysis`,\n                 // so we don't need to take care of it here.\n                 self.add_compiler_used_global(g);"}, {"sha": "7d51cee307e9278eb773cb62407ea54bd1091e54", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -13,7 +13,7 @@\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that\n-//! have to be implemented by each backends.\n+//! have to be implemented by each backend.\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "19367d708ee746f12364bc4c258cc216a6e91c59", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -898,7 +898,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         assert_eq!(self.new_block(), START_BLOCK);\n         self.visit_rvalue(\n             &mut rvalue,\n-            Location { block: BasicBlock::new(0), statement_index: usize::MAX },\n+            Location { block: START_BLOCK, statement_index: usize::MAX },\n         );\n \n         let span = self.promoted.span;"}, {"sha": "c4601a1fb4189423219953d201a8ffa0a6058016", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -91,7 +91,8 @@ bitflags! {\n         /// the MIR `InstrumentCoverage` pass and not added to the coverage map\n         /// during codegen.\n         const NO_COVERAGE               = 1 << 15;\n-        /// `#[used(linker)]`: indicates that LLVM nor the linker can eliminate this function.\n+        /// `#[used(linker)]`:\n+        /// indicates that neither LLVM nor the linker will eliminate this function.\n         const USED_LINKER               = 1 << 16;\n         /// `#[rustc_deallocator]`: a hint to LLVM that the function only deallocates memory.\n         const DEALLOCATOR               = 1 << 17;"}, {"sha": "443c1b2d261ef4af9df067145bf556955ea2536d", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -323,7 +323,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_source_scope($(& $mutability)? *parent_scope);\n                 }\n                 if let Some((callee, callsite_span)) = inlined {\n-                    let location = START_BLOCK.start_location();\n+                    let location = Location::START;\n \n                     self.visit_span($(& $mutability)? *callsite_span);\n \n@@ -837,7 +837,7 @@ macro_rules! make_mir_visitor {\n                 } = var_debug_info;\n \n                 self.visit_source_info(source_info);\n-                let location = START_BLOCK.start_location();\n+                let location = Location::START;\n                 match value {\n                     VarDebugInfoContents::Const(c) => self.visit_constant(c, location),\n                     VarDebugInfoContents::Place(place) =>\n@@ -1026,7 +1026,7 @@ macro_rules! super_body {\n         $self.visit_span($(& $mutability)? $body.span);\n \n         for const_ in &$($mutability)? $body.required_consts {\n-            let location = START_BLOCK.start_location();\n+            let location = Location::START;\n             $self.visit_constant(const_, location);\n         }\n     }"}, {"sha": "2e481b972781c349bdc361ee183e7930aa77626d", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -136,8 +136,8 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::{dump_mir, PassWhere};\n use rustc_middle::mir::{\n-    traversal, BasicBlock, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place,\n-    Rvalue, Statement, StatementKind, TerminatorKind,\n+    traversal, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place, Rvalue,\n+    Statement, StatementKind, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n use rustc_mir_dataflow::impls::MaybeLiveLocals;\n@@ -468,7 +468,7 @@ impl<'a, 'body, 'alloc, 'tcx> FilterInformation<'a, 'body, 'alloc, 'tcx> {\n             // to reuse the allocation.\n             write_info: write_info_alloc,\n             // Doesn't matter what we put here, will be overwritten before being used\n-            at: Location { block: BasicBlock::from_u32(0), statement_index: 0 },\n+            at: Location::START,\n         };\n         this.internal_filter_liveness();\n     }"}, {"sha": "dc5f88f24f801770849a2b62c06340156408682c", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -487,7 +487,7 @@ fn transform_async_context<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     let get_context_def_id = tcx.require_lang_item(LangItem::GetContext, None);\n \n-    for bb in BasicBlock::new(0)..body.basic_blocks.next_index() {\n+    for bb in START_BLOCK..body.basic_blocks.next_index() {\n         let bb_data = &body[bb];\n         if bb_data.is_cleanup {\n             continue;\n@@ -1255,7 +1255,7 @@ fn create_generator_resume_function<'tcx>(\n     use rustc_middle::mir::AssertKind::{ResumedAfterPanic, ResumedAfterReturn};\n \n     // Jump to the entry point on the unresumed\n-    cases.insert(0, (UNRESUMED, BasicBlock::new(0)));\n+    cases.insert(0, (UNRESUMED, START_BLOCK));\n \n     // Panic when resumed on the returned or poisoned state\n     let generator_kind = body.generator_kind().unwrap();\n@@ -1481,7 +1481,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // When first entering the generator, move the resume argument into its new local.\n         let source_info = SourceInfo::outermost(body.span);\n-        let stmts = &mut body.basic_blocks_mut()[BasicBlock::new(0)].statements;\n+        let stmts = &mut body.basic_blocks_mut()[START_BLOCK].statements;\n         stmts.insert(\n             0,\n             Statement {"}, {"sha": "8c6b0463a739a04a0d2b9aa2fbb076948f15520a", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -96,7 +96,7 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n         history: Vec::new(),\n         changed: false,\n     };\n-    let blocks = BasicBlock::new(0)..body.basic_blocks.next_index();\n+    let blocks = START_BLOCK..body.basic_blocks.next_index();\n     this.process_blocks(body, blocks);\n     this.changed\n }"}, {"sha": "9ef55c558c60b8f593024d473d7bd281680c6a39", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -496,7 +496,7 @@ impl UsedLocals {\n         self.increment = false;\n \n         // The location of the statement is irrelevant.\n-        let location = Location { block: START_BLOCK, statement_index: 0 };\n+        let location = Location::START;\n         self.visit_statement(statement, location);\n     }\n "}, {"sha": "f6f46aac4c391d698422cc73f50c6e66e4668b8f", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "9608efe8bcf60ac5f49808f2587eac3d420c1a6c", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "28b109889e92807935c6428f93f4a2473be896fd", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -49,7 +49,7 @@ pub fn target() -> Target {\n             // from thumb_base, rust-lang/rust#44993.\n             emit_debug_gdb_scripts: false,\n             // from thumb_base, apparently gcc/clang give enums a minimum of 8 bits on no-os targets\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "d59de86a23012c8f4f4bf66c13904721cbba8c2f", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n-        c_enum_min_bits: 8,\n+        c_enum_min_bits: Some(8),\n         ..Default::default()\n     };\n     Target {"}, {"sha": "8cdf3c36ba2ea2a4c4e25abcc6f67cb814b940f0", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n         panic_strategy: PanicStrategy::Abort,\n         emit_debug_gdb_scripts: false,\n         // GCC and Clang default to 8 for arm-none here\n-        c_enum_min_bits: 8,\n+        c_enum_min_bits: Some(8),\n         ..Default::default()\n     };\n     Target {"}, {"sha": "5225abf44fca494fecb5b581248fa17788e3fde5", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "9a35e04617f9c71d5759e6bacf8a4408ec4ed91d", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -19,7 +19,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             ..Default::default()\n         },\n     }"}, {"sha": "4c6ab5f5ae45433e60235e1cd5156d5eeb5d94d9", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n     base.has_rpath = true;\n     base.linker_flavor = LinkerFlavor::Unix(Cc::Yes);\n \n-    base.c_enum_min_bits = 8;\n+    base.c_enum_min_bits = Some(8);\n \n     Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".into(),"}, {"sha": "ef60956a6178aa5eacc919643791cde372e2cf81", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -1344,10 +1344,18 @@ impl Target {\n             });\n         }\n \n-        dl.c_enum_min_size = match Integer::from_size(Size::from_bits(self.c_enum_min_bits)) {\n-            Ok(bits) => bits,\n-            Err(err) => return Err(TargetDataLayoutErrors::InvalidBitsSize { err }),\n-        };\n+        dl.c_enum_min_size = self\n+            .c_enum_min_bits\n+            .map_or_else(\n+                || {\n+                    self.c_int_width\n+                        .parse()\n+                        .map_err(|_| String::from(\"failed to parse c_int_width\"))\n+                },\n+                Ok,\n+            )\n+            .and_then(|i| Integer::from_size(Size::from_bits(i)))\n+            .map_err(|err| TargetDataLayoutErrors::InvalidBitsSize { err })?;\n \n         Ok(dl)\n     }\n@@ -1701,8 +1709,8 @@ pub struct TargetOptions {\n     /// If present it's a default value to use for adjusting the C ABI.\n     pub default_adjusted_cabi: Option<Abi>,\n \n-    /// Minimum number of bits in #[repr(C)] enum. Defaults to 32.\n-    pub c_enum_min_bits: u64,\n+    /// Minimum number of bits in #[repr(C)] enum. Defaults to the size of c_int\n+    pub c_enum_min_bits: Option<u64>,\n \n     /// Whether or not the DWARF `.debug_aranges` section should be generated.\n     pub generate_arange_section: bool,\n@@ -1935,7 +1943,7 @@ impl Default for TargetOptions {\n             supported_split_debuginfo: Cow::Borrowed(&[SplitDebuginfo::Off]),\n             supported_sanitizers: SanitizerSet::empty(),\n             default_adjusted_cabi: None,\n-            c_enum_min_bits: 32,\n+            c_enum_min_bits: None,\n             generate_arange_section: true,\n             supports_stack_protector: true,\n             entry_name: \"main\".into(),\n@@ -2122,12 +2130,6 @@ impl Target {\n                     base.$key_name = s;\n                 }\n             } );\n-            ($key_name:ident, u64) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove(&name).and_then(|j| Json::as_u64(&j)) {\n-                    base.$key_name = s;\n-                }\n-            } );\n             ($key_name:ident, u32) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.remove(&name).and_then(|b| b.as_u64()) {\n@@ -2496,6 +2498,7 @@ impl Target {\n \n         key!(is_builtin, bool);\n         key!(c_int_width = \"target-c-int-width\");\n+        key!(c_enum_min_bits, Option<u64>); // if None, matches c_int_width\n         key!(os);\n         key!(env);\n         key!(abi);\n@@ -2591,7 +2594,6 @@ impl Target {\n         key!(supported_split_debuginfo, falliable_list)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n-        key!(c_enum_min_bits, u64);\n         key!(generate_arange_section, bool);\n         key!(supports_stack_protector, bool);\n         key!(entry_name);"}, {"sha": "4dcf47fe465c3144a206d7c0c95b93ba98a3fe4d", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -53,7 +53,7 @@ pub fn opts() -> TargetOptions {\n         frame_pointer: FramePointer::Always,\n         // ARM supports multiple ABIs for enums, the linux one matches the default of 32 here\n         // but any arm-none or thumb-none target will be defaulted to 8 on GCC and clang\n-        c_enum_min_bits: 8,\n+        c_enum_min_bits: Some(8),\n         ..Default::default()\n     }\n }"}, {"sha": "e3734932f88553346f0b2afc74aa78f17b176a7c", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -55,7 +55,7 @@ pub fn target() -> Target {\n             // suggested from thumb_base, rust-lang/rust#44993.\n             emit_debug_gdb_scripts: false,\n             // suggested from thumb_base, with no-os gcc/clang use 8-bit enums\n-            c_enum_min_bits: 8,\n+            c_enum_min_bits: Some(8),\n             frame_pointer: FramePointer::MayOmit,\n \n             main_needs_argc_argv: false,"}, {"sha": "97a1102e3c576dc20e6ce21aefe30a5f61dcdfcb", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -445,6 +445,72 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n+\n+        if compiler.stage == 0 {\n+            // special handling for stage0, to make `rustup toolchain link` and `x dist --stage 0`\n+            // work for stage0-sysroot\n+            let sysroot = builder.out.join(&compiler.host.triple).join(\"stage0-sysroot\");\n+\n+            let host_lib_dir = builder.initial_rustc.ancestors().nth(2).unwrap().join(\"lib\");\n+            let host_bin_dir = builder.out.join(&builder.initial_rustc.parent().unwrap());\n+            let host_codegen_backends =\n+                host_lib_dir.join(\"rustlib\").join(&compiler.host.triple).join(\"codegen-backends\");\n+            let sysroot_bin_dir = sysroot.join(\"bin\");\n+            let sysroot_lib_dir = sysroot.join(\"lib\");\n+            let sysroot_codegen_backends = builder.sysroot_codegen_backends(compiler);\n+\n+            // Create the `bin` directory in stage0-sysroot\n+            t!(fs::create_dir_all(&sysroot_bin_dir));\n+\n+            // copy bin files from `builder.initial_rustc/./` to `stage0-sysroot/bin`\n+            if let Ok(files) = fs::read_dir(&host_bin_dir) {\n+                for file in files {\n+                    let file = t!(file);\n+                    if file.file_name() == \"rustfmt\" {\n+                        // This is when `rustc` and `cargo` are set in `config.toml`\n+                        if !file.path().starts_with(&builder.out) {\n+                            builder.copy(\n+                                &file.path().into_boxed_path(),\n+                                &sysroot_bin_dir.join(file.file_name()),\n+                            );\n+                        } else {\n+                            builder.copy(\n+                                &builder\n+                                    .out\n+                                    .join(&compiler.host.triple)\n+                                    .join(\"rustfmt/bin/rustfmt\"),\n+                                &sysroot_bin_dir.join(file.file_name()),\n+                            );\n+                        }\n+                    } else {\n+                        builder.copy(\n+                            &file.path().into_boxed_path(),\n+                            &sysroot_bin_dir.join(file.file_name()),\n+                        );\n+                    }\n+                }\n+            }\n+\n+            // copy dylib files from `builder.initial_rustc/../lib/*` while excluding the `rustlib` directory to `stage0-sysroot/lib`\n+            if let Ok(files) = fs::read_dir(&host_lib_dir) {\n+                for file in files {\n+                    let file = t!(file);\n+                    let path = file.path();\n+                    if path.is_file()\n+                        && is_dylib(&file.file_name().into_string().unwrap())\n+                        && !path.starts_with(sysroot_lib_dir.join(\"rustlib\").into_boxed_path())\n+                    {\n+                        builder.copy(&path, &sysroot_lib_dir.join(path.file_name().unwrap()));\n+                    }\n+                }\n+            }\n+\n+            t!(fs::create_dir_all(&sysroot_codegen_backends));\n+            // copy `codegen-backends` from `host_lib_dir/rustlib/codegen_backends` to `stage0-sysroot/lib/rustlib/host-triple/codegen-backends` if it exists.\n+            if host_codegen_backends.exists() {\n+                builder.cp_r(&host_codegen_backends, &sysroot_codegen_backends);\n+            }\n+        }\n     }\n }\n "}, {"sha": "2acfde4be46d9b0a579fe1f14a527dd121f06720", "filename": "tests/ui/repr/16-bit-repr-c-enum.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/tests%2Fui%2Frepr%2F16-bit-repr-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/tests%2Fui%2Frepr%2F16-bit-repr-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepr%2F16-bit-repr-c-enum.rs?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -0,0 +1,52 @@\n+// build-pass\n+// revisions: avr msp430\n+//\n+// [avr] needs-llvm-components: avr\n+// [avr] compile-flags: --target=avr-unknown-gnu-atmega328 --crate-type=rlib\n+// [msp430] needs-llvm-components: msp430\n+// [msp430] compile-flags: --target=msp430-none-elf --crate-type=rlib\n+#![feature(no_core, lang_items, intrinsics, staged_api)]\n+#![no_core]\n+#![crate_type = \"lib\"]\n+#![stable(feature = \"\", since = \"\")]\n+#![allow(dead_code)]\n+\n+// Test that the repr(C) attribute doesn't break compilation\n+// Previous bad assumption was that 32-bit enum default width is fine on msp430, avr\n+// But the width of the C int on these platforms is 16 bits, and C enums <= C int range\n+// so we want no more than that, usually. This resulted in errors like\n+// \"layout decided on a larger discriminant type (I32) than typeck (I16)\"\n+#[repr(C)]\n+enum Foo {\n+    Bar,\n+}\n+\n+extern \"rust-intrinsic\" {\n+    #[stable(feature = \"\", since = \"\")]\n+    #[rustc_const_stable(feature = \"\", since = \"\")]\n+    #[rustc_safe_intrinsic]\n+    fn size_of<T>() -> usize;\n+}\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n+#[lang=\"copy\"]\n+trait Copy {}\n+\n+const EXPECTED: usize = 2;\n+const ACTUAL: usize = size_of::<Foo>();\n+// Validate that the size is indeed 16 bits, to match this C static_assert:\n+/**\n+```c\n+#include <assert.h>\n+enum foo {\n+    BAR\n+};\n+int main(void)\n+{\n+    /* passes on msp430-elf-gcc */\n+    static_assert(sizeof(enum foo) == 2);\n+}\n+```\n+*/\n+const _: [(); EXPECTED] = [(); ACTUAL];"}, {"sha": "7a26457ab04c051216bbbd185dcc97c108f574b6", "filename": "triagebot.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "patch": "@@ -538,6 +538,7 @@ diagnostics = [\n     \"@TaKO8Ki\",\n ]\n parser = [\n+    \"@compiler-errors\",\n     \"@davidtwco\",\n     \"@nnethercote\",\n     \"@petrochenkov\",\n@@ -567,6 +568,7 @@ borrowck = [\n     \"@pnkfelix\",\n ]\n ast_lowering = [\n+    \"@compiler-errors\",\n     \"@spastorino\",\n ]\n fallback = [\n@@ -630,7 +632,7 @@ style-team = [\n \"/src/stage0.json\" =                         [\"bootstrap\"]\n \"/tests/ui\" =                                [\"compiler\"]\n \"/src/tools/cargo\" =                         [\"@ehuss\", \"@joshtriplett\"]\n-\"/src/tools/compiletest\" =                   [\"bootstrap\", \"@wesleywiser\", \"@oli-obk\"]\n+\"/src/tools/compiletest\" =                   [\"bootstrap\", \"@wesleywiser\", \"@oli-obk\", \"@compiler-errors\"]\n \"/src/tools/linkchecker\" =                   [\"@ehuss\"]\n \"/src/tools/rust-installer\" =                [\"bootstrap\"]\n \"/src/tools/rustbook\" =                      [\"@ehuss\"]"}]}