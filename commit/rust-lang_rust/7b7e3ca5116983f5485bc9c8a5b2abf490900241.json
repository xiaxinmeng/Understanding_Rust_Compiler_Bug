{"sha": "7b7e3ca5116983f5485bc9c8a5b2abf490900241", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiN2UzY2E1MTE2OTgzZjU0ODViYzljOGE1YjJhYmY0OTA5MDAyNDE=", "commit": {"author": {"name": "Philip Hayes", "email": "philiphayes@fb.com", "date": "2021-01-30T06:18:56Z"}, "committer": {"name": "Philip Hayes", "email": "philiphayes@fb.com", "date": "2021-02-04T19:28:55Z"}, "message": "Support free functions in disallowed-methods lint\n\nIn other words, support:\n\n`disallowed_methods = [\"alloc::vec::Vec::new\"]` (a free function) in\naddition to\n`disallowed_methods = [\"alloc::vec::Vec::leak\"]` (a method).\n\nImprove the documentation to clarify that users must specify the full\nqualified path for each disallowed function, which can be confusing for\nreexports. Include an example `clippy.toml`.\n\nSimplify the actual lint pass so we can reuse `utils::fn_def_id`.", "tree": {"sha": "d6be0008e91e1502a4757435a824699b44a6eaed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6be0008e91e1502a4757435a824699b44a6eaed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b7e3ca5116983f5485bc9c8a5b2abf490900241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7e3ca5116983f5485bc9c8a5b2abf490900241", "html_url": "https://github.com/rust-lang/rust/commit/7b7e3ca5116983f5485bc9c8a5b2abf490900241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b7e3ca5116983f5485bc9c8a5b2abf490900241/comments", "author": {"login": "phlip9", "id": 918989, "node_id": "MDQ6VXNlcjkxODk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/918989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phlip9", "html_url": "https://github.com/phlip9", "followers_url": "https://api.github.com/users/phlip9/followers", "following_url": "https://api.github.com/users/phlip9/following{/other_user}", "gists_url": "https://api.github.com/users/phlip9/gists{/gist_id}", "starred_url": "https://api.github.com/users/phlip9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phlip9/subscriptions", "organizations_url": "https://api.github.com/users/phlip9/orgs", "repos_url": "https://api.github.com/users/phlip9/repos", "events_url": "https://api.github.com/users/phlip9/events{/privacy}", "received_events_url": "https://api.github.com/users/phlip9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phlip9", "id": 918989, "node_id": "MDQ6VXNlcjkxODk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/918989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phlip9", "html_url": "https://github.com/phlip9", "followers_url": "https://api.github.com/users/phlip9/followers", "following_url": "https://api.github.com/users/phlip9/following{/other_user}", "gists_url": "https://api.github.com/users/phlip9/gists{/gist_id}", "starred_url": "https://api.github.com/users/phlip9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phlip9/subscriptions", "organizations_url": "https://api.github.com/users/phlip9/orgs", "repos_url": "https://api.github.com/users/phlip9/repos", "events_url": "https://api.github.com/users/phlip9/events{/privacy}", "received_events_url": "https://api.github.com/users/phlip9/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357c6a7e2739da8c8d0a68a5e9e0867983af7cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/357c6a7e2739da8c8d0a68a5e9e0867983af7cbe", "html_url": "https://github.com/rust-lang/rust/commit/357c6a7e2739da8c8d0a68a5e9e0867983af7cbe"}], "stats": {"total": 75, "additions": 48, "deletions": 27}, "files": [{"sha": "56dc6d18a58f2dc2974ec43f716a596a6520c37a", "filename": "clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7b7e3ca5116983f5485bc9c8a5b2abf490900241/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7e3ca5116983f5485bc9c8a5b2abf490900241/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=7b7e3ca5116983f5485bc9c8a5b2abf490900241", "patch": "@@ -1,29 +1,47 @@\n-use crate::utils::span_lint;\n+use crate::utils::{fn_def_id, span_lint};\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Symbol;\n \n declare_clippy_lint! {\n-    /// **What it does:** Lints for specific trait methods defined in clippy.toml\n+    /// **What it does:** Denies the configured methods and functions in clippy.toml\n     ///\n     /// **Why is this bad?** Some methods are undesirable in certain contexts,\n-    /// and it would be beneficial to lint for them as needed.\n+    /// and it's beneficial to lint for them as needed.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Currently, you must write each function as a\n+    /// fully-qualified path. This lint doesn't support aliases or reexported\n+    /// names; be aware that many types in `std` are actually reexports.\n+    ///\n+    /// For example, if you want to disallow `Duration::as_secs`, your clippy.toml\n+    /// configuration would look like\n+    /// `disallowed-methods = [\"core::time::Duration::as_secs\"]` and not\n+    /// `disallowed-methods = [\"std::time::Duration::as_secs\"]` as you might expect.\n     ///\n     /// **Example:**\n     ///\n+    /// An example clippy.toml configuration:\n+    /// ```toml\n+    /// # clippy.toml\n+    /// disallowed-methods = [\"alloc::vec::Vec::leak\", \"std::time::Instant::now\"]\n+    /// ```\n+    ///\n     /// ```rust,ignore\n-    /// // example code where clippy issues a warning\n-    /// foo.bad_method(); // Foo::bad_method is disallowed in the configuration\n+    /// // Example code where clippy issues a warning\n+    /// let xs = vec![1, 2, 3, 4];\n+    /// xs.leak(); // Vec::leak is disallowed in the config.\n+    ///\n+    /// let _now = Instant::now(); // Instant::now is disallowed in the config.\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n-    /// // example code which does not raise clippy warning\n-    /// goodStruct.bad_method(); // GoodStruct::bad_method is not disallowed\n+    /// // Example code which does not raise clippy warning\n+    /// let mut xs = Vec::new(); // Vec::new is _not_ disallowed in the config.\n+    /// xs.push(123); // Vec::push is _not_ disallowed in the config.\n     /// ```\n     pub DISALLOWED_METHOD,\n     nursery,\n@@ -50,22 +68,20 @@ impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(_path, _, _args, _) = &expr.kind {\n-            let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n-\n-            let method_call = cx.get_def_path(def_id);\n-            if self.disallowed.contains(&method_call) {\n-                let method = method_call\n-                    .iter()\n-                    .map(|s| s.to_ident_string())\n+        if let Some(def_id) = fn_def_id(cx, expr) {\n+            let func_path = cx.get_def_path(def_id);\n+            if self.disallowed.contains(&func_path) {\n+                let func_path_string = func_path\n+                    .into_iter()\n+                    .map(Symbol::to_ident_string)\n                     .collect::<Vec<_>>()\n                     .join(\"::\");\n \n                 span_lint(\n                     cx,\n                     DISALLOWED_METHOD,\n                     expr.span,\n-                    &format!(\"use of a disallowed method `{}`\", method),\n+                    &format!(\"use of a disallowed method `{}`\", func_path_string),\n                 );\n             }\n         }"}, {"sha": "1fb99e04de3b77b84af258999e5111ae0a63da85", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b7e3ca5116983f5485bc9c8a5b2abf490900241/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7e3ca5116983f5485bc9c8a5b2abf490900241/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=7b7e3ca5116983f5485bc9c8a5b2abf490900241", "patch": "@@ -169,7 +169,7 @@ define_Conf! {\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n-    /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n+    /// Lint: DISALLOWED_METHOD. The list of disallowed methods, written as fully qualified paths.\n     (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n     /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions, \"unreadable_literal_lint_fractions\": bool, true),"}, {"sha": "c0df3b6e8af5dd12d5ac7d618e6d9084525a3776", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b7e3ca5116983f5485bc9c8a5b2abf490900241/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b7e3ca5116983f5485bc9c8a5b2abf490900241/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=7b7e3ca5116983f5485bc9c8a5b2abf490900241", "patch": "@@ -1 +1 @@\n-disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\"]\n+disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\", \"regex::re_unicode::Regex::new\"]"}, {"sha": "1901a99377ec622a7d41c1c4fba42b716a7b95b5", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b7e3ca5116983f5485bc9c8a5b2abf490900241/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7e3ca5116983f5485bc9c8a5b2abf490900241/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs?ref=7b7e3ca5116983f5485bc9c8a5b2abf490900241", "patch": "@@ -4,10 +4,9 @@ extern crate regex;\n use regex::Regex;\n \n fn main() {\n-    let a = vec![1, 2, 3, 4];\n     let re = Regex::new(r\"ab.*c\").unwrap();\n-\n     re.is_match(\"abc\");\n \n+    let a = vec![1, 2, 3, 4];\n     a.iter().sum::<i32>();\n }"}, {"sha": "2b628c67fa75162127adcbb922826c60966017fb", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b7e3ca5116983f5485bc9c8a5b2abf490900241/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b7e3ca5116983f5485bc9c8a5b2abf490900241/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=7b7e3ca5116983f5485bc9c8a5b2abf490900241", "patch": "@@ -1,16 +1,22 @@\n+error: use of a disallowed method `regex::re_unicode::Regex::new`\n+  --> $DIR/conf_disallowed_method.rs:7:14\n+   |\n+LL |     let re = Regex::new(r\"ab.*c\").unwrap();\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n error: use of a disallowed method `regex::re_unicode::Regex::is_match`\n-  --> $DIR/conf_disallowed_method.rs:10:5\n+  --> $DIR/conf_disallowed_method.rs:8:5\n    |\n LL |     re.is_match(\"abc\");\n    |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n \n error: use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n-  --> $DIR/conf_disallowed_method.rs:12:5\n+  --> $DIR/conf_disallowed_method.rs:11:5\n    |\n LL |     a.iter().sum::<i32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}