{"sha": "eca4b764e4d8653f3862129586f47cb60be4bf3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYTRiNzY0ZTRkODY1M2YzODYyMTI5NTg2ZjQ3Y2I2MGJlNGJmM2Y=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T04:53:15Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T04:54:48Z"}, "message": "Remove superfluous early-returns", "tree": {"sha": "fc6b872409d3c4484a8f386c9d815b76dec087b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6b872409d3c4484a8f386c9d815b76dec087b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eca4b764e4d8653f3862129586f47cb60be4bf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmCrMZgACgkQ94j36ZAT\nYAMS9BAAjXp3i9qLgwzrPqgGjg1WsRlsO/nfO0bAv9/yjJIMjJxZbQI8R+Oqx253\nv10+gIMUPLjfCw0Vi5Vp8VNPlS/+wRSuLlJrgwP2bmPSZ64gajluCL3GVKuvebXQ\nx/oQ5Ny3UQH/Ef7Aa1bqi0CgIna0+E2ZhM9Z07fEVVEsJ9xxlYYRaAJUwlrAu77n\ntqXvSjw6KqhJhBGWxZSYCHif7hurLCVSJmEfrEWbPVu6NXBXU4IGZ2ddX/kmIvvZ\nmK8Si63nk9SoFEegfGd5zj+pkCqaxfgq1loYcfQag0EL9TXqlscH6KkW6g2/ugSO\n//WtgvUHL1w7b/QnV4YptvPMY4Zl60e3LwG/9Ulr2dbbHGBvaCD9abHYyPYVIPGT\nIx1DGzhCggYYE5OpPws42SMiScbTlymdPdTNVIcGZ4VOIXgnzcFbCm3QF6TK7asN\nh1qVo92FKRkn5/BnPLe7uAB9hjovjrhVpWHaMAbdzwV2LNVTOu7eflYSwQ0OxNFS\nenVktvrqb8LFXfA469+oG4yX552iWIzlAP2zCF6U0NEqe/BAByIhnytCWzIx3Twb\nUT4iDEYBaHT6UVKb0t6eaMkUf06AyC7h834CFneNDCYcDtkJznGbDaeEKwm1w//+\nOfu/I+am0GiSVLwitkm+M9fT2OahDRXiLvN/F+XDkOZ8FnJ1Jkw=\n=Oyrx\n-----END PGP SIGNATURE-----", "payload": "tree fc6b872409d3c4484a8f386c9d815b76dec087b9\nparent e51188cd09d0a78de20d1fdde866fa5a4a31e938\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1621831995 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1621832088 +1000\n\nRemove superfluous early-returns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eca4b764e4d8653f3862129586f47cb60be4bf3f", "html_url": "https://github.com/rust-lang/rust/commit/eca4b764e4d8653f3862129586f47cb60be4bf3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eca4b764e4d8653f3862129586f47cb60be4bf3f/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51188cd09d0a78de20d1fdde866fa5a4a31e938", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51188cd09d0a78de20d1fdde866fa5a4a31e938", "html_url": "https://github.com/rust-lang/rust/commit/e51188cd09d0a78de20d1fdde866fa5a4a31e938"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "14d68d3f350c18a52330ebcc437678108c4096c9", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eca4b764e4d8653f3862129586f47cb60be4bf3f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca4b764e4d8653f3862129586f47cb60be4bf3f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=eca4b764e4d8653f3862129586f47cb60be4bf3f", "patch": "@@ -291,7 +291,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 h |= HlMod::Library;\n             }\n \n-            return h;\n+            h\n         }\n         Definition::Field(field) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Field));\n@@ -300,7 +300,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 h |= HlMod::Library;\n             }\n \n-            return h;\n+            h\n         }\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(module) => {\n@@ -310,7 +310,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n             hir::ModuleDef::Function(func) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Function));\n@@ -346,7 +346,8 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 if Some(func.module(db).krate()) != krate {\n                     h |= HlMod::Library;\n                 }\n-                return h;\n+\n+                h\n             }\n             hir::ModuleDef::Adt(adt) => {\n                 let h = match adt {\n@@ -360,7 +361,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n             hir::ModuleDef::Variant(variant) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Variant));\n@@ -369,7 +370,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n             hir::ModuleDef::Const(konst) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Const));\n@@ -392,7 +393,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n             hir::ModuleDef::Trait(trait_) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Trait));\n@@ -405,7 +406,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n             hir::ModuleDef::TypeAlias(type_) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::TypeAlias));\n@@ -428,9 +429,9 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n-            hir::ModuleDef::BuiltinType(_) => HlTag::BuiltinType,\n+            hir::ModuleDef::BuiltinType(_) => Highlight::new(HlTag::BuiltinType),\n             hir::ModuleDef::Static(s) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Static));\n \n@@ -443,14 +444,18 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Library;\n                 }\n \n-                return h;\n+                h\n             }\n         },\n-        Definition::SelfType(_) => HlTag::Symbol(SymbolKind::Impl),\n+        Definition::SelfType(_) => Highlight::new(HlTag::Symbol(SymbolKind::Impl)),\n         Definition::GenericParam(it) => match it {\n-            hir::GenericParam::TypeParam(_) => HlTag::Symbol(SymbolKind::TypeParam),\n-            hir::GenericParam::ConstParam(_) => HlTag::Symbol(SymbolKind::ConstParam),\n-            hir::GenericParam::LifetimeParam(_) => HlTag::Symbol(SymbolKind::LifetimeParam),\n+            hir::GenericParam::TypeParam(_) => Highlight::new(HlTag::Symbol(SymbolKind::TypeParam)),\n+            hir::GenericParam::ConstParam(_) => {\n+                Highlight::new(HlTag::Symbol(SymbolKind::ConstParam))\n+            }\n+            hir::GenericParam::LifetimeParam(_) => {\n+                Highlight::new(HlTag::Symbol(SymbolKind::LifetimeParam))\n+            }\n         },\n         Definition::Local(local) => {\n             let tag = if local.is_self(db) {\n@@ -468,11 +473,10 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n             if ty.as_callable(db).is_some() || ty.impls_fnonce(db) {\n                 h |= HlMod::Callable;\n             }\n-            return h;\n+            h\n         }\n-        Definition::Label(_) => HlTag::Symbol(SymbolKind::Label),\n+        Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n     }\n-    .into()\n }\n \n fn highlight_func_by_name_ref("}]}