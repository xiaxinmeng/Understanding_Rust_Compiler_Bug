{"sha": "b25b147e8604f62a5620a5833112e358ebeeb287", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWIxNDdlODYwNGY2MmE1NjIwYTU4MzMxMTJlMzU4ZWJlZWIyODc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T19:26:24Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:08:55Z"}, "message": "Fix shifted_{in,out} calls", "tree": {"sha": "9f5d3249d633c12e4908bc7cbcd0ba4f1c6ac833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f5d3249d633c12e4908bc7cbcd0ba4f1c6ac833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25b147e8604f62a5620a5833112e358ebeeb287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25b147e8604f62a5620a5833112e358ebeeb287", "html_url": "https://github.com/rust-lang/rust/commit/b25b147e8604f62a5620a5833112e358ebeeb287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25b147e8604f62a5620a5833112e358ebeeb287/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0b5817366f9b7b99a1a1f6e69ca7ac63e9ed0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0b5817366f9b7b99a1a1f6e69ca7ac63e9ed0f", "html_url": "https://github.com/rust-lang/rust/commit/dc0b5817366f9b7b99a1a1f6e69ca7ac63e9ed0f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "5f03079e828777c006d69257504e07c5b13fda24", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b25b147e8604f62a5620a5833112e358ebeeb287", "patch": "@@ -3,7 +3,7 @@\n use std::iter::{repeat, repeat_with};\n use std::{mem, sync::Arc};\n \n-use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},"}, {"sha": "7d4793c2f3bbb55bed85c8ca339ac6c50a7cee06", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b25b147e8604f62a5620a5833112e358ebeeb287", "patch": "@@ -35,7 +35,7 @@ use std::sync::Arc;\n use base_db::salsa;\n use chalk_ir::{\n     cast::{CastTo, Caster},\n-    fold::Fold,\n+    fold::{Fold, Shift},\n     interner::HasInterner,\n     UintTy,\n };\n@@ -123,9 +123,9 @@ pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n \n pub fn wrap_empty_binders<T>(value: T) -> Binders<T>\n where\n-    T: TypeWalk + HasInterner<Interner = Interner>,\n+    T: Fold<Interner, Result = T> + HasInterner<Interner = Interner>,\n {\n-    Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n+    Binders::empty(&Interner, value.shifted_in_from(&Interner, DebruijnIndex::ONE))\n }\n \n pub fn make_only_type_binders<T: HasInterner<Interner = Interner>>(\n@@ -187,7 +187,7 @@ impl CallableSig {\n             params_and_return: fn_ptr\n                 .substitution\n                 .clone()\n-                .shifted_out_to(DebruijnIndex::ONE)\n+                .shifted_out_to(&Interner, DebruijnIndex::ONE)\n                 .expect(\"unexpected lifetime vars in fn ptr\")\n                 .0\n                 .interned()"}, {"sha": "b45e811fa03bff587c8b05ff4c8d021e9c5db1b2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b25b147e8604f62a5620a5833112e358ebeeb287", "patch": "@@ -8,7 +8,7 @@\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, interner::HasInterner, Mutability, Safety};\n+use chalk_ir::{cast::Cast, fold::Shift, interner::HasInterner, Mutability, Safety};\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -488,7 +488,7 @@ impl<'a> TyLoweringContext<'a> {\n                         };\n                         // We need to shift in the bound vars, since\n                         // associated_type_shorthand_candidates does not do that\n-                        let substs = substs.shifted_in_from(self.in_binders);\n+                        let substs = substs.shifted_in_from(&Interner, self.in_binders);\n                         // FIXME handle type parameters on the segment\n                         return Some(\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n@@ -847,7 +847,7 @@ pub fn associated_type_shorthand_candidates<R>(\n                 // FIXME: how to correctly handle higher-ranked bounds here?\n                 WhereClause::Implemented(tr) => search(\n                     tr.clone()\n-                        .shifted_out_to(DebruijnIndex::ONE)\n+                        .shifted_out_to(&Interner, DebruijnIndex::ONE)\n                         .expect(\"FIXME unexpected higher-ranked trait bound\"),\n                 ),\n                 _ => None,"}, {"sha": "62cf0fecf6ee3f9e7f59c8eee338a79032f5e9a4", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=b25b147e8604f62a5620a5833112e358ebeeb287", "patch": "@@ -288,7 +288,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n ) -> Option<chalk_ir::Binders<rust_ir::InlineBound<Interner>>> {\n     // An InlineBound is like a GenericPredicate, except the self type is left out.\n     // We don't have a special type for this, but Chalk does.\n-    let self_ty_shifted_in = self_ty.clone().shifted_in_from(DebruijnIndex::ONE);\n+    let self_ty_shifted_in = self_ty.clone().shifted_in_from(&Interner, DebruijnIndex::ONE);\n     let (pred, binders) = pred.as_ref().into_value_and_skipped_binders();\n     match pred {\n         WhereClause::Implemented(trait_ref) => {"}, {"sha": "d26f5152c96448e0e13a0e651fd616adb1a65784", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25b147e8604f62a5620a5833112e358ebeeb287/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=b25b147e8604f62a5620a5833112e358ebeeb287", "patch": "@@ -2,7 +2,7 @@\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n use std::sync::Arc;\n \n-use chalk_ir::{BoundVar, DebruijnIndex};\n+use chalk_ir::{fold::Shift, BoundVar, DebruijnIndex};\n use hir_def::{\n     db::DefDatabase,\n     generics::{\n@@ -69,7 +69,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n                 // FIXME: how to correctly handle higher-ranked bounds here?\n                 WhereClause::Implemented(tr) => Some(\n                     tr.clone()\n-                        .shifted_out_to(DebruijnIndex::ONE)\n+                        .shifted_out_to(&Interner, DebruijnIndex::ONE)\n                         .expect(\"FIXME unexpected higher-ranked trait bound\"),\n                 ),\n                 _ => None,"}]}