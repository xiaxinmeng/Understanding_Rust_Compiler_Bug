{"sha": "14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZWI4N2RkMjZjYTQxMjhhZTVmY2FhM2IxZjQ0OGRmZDE1YTA2YmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-16T17:57:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-16T17:57:20Z"}, "message": "Rollup merge of #88892 - estebank:trait-objects, r=petrochenkov\n\nMove object safety suggestions to the end of the error", "tree": {"sha": "e4b558927972721421b7dae7069f2a94681fa5c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b558927972721421b7dae7069f2a94681fa5c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQ4WACRBK7hj4Ov3rIwAA4rsIAF3wrIbqqrDcJ1cV4OE3pJ3D\n4apLb3x2axv+Fs9lM1UNCBLpF6fFePNXbA/jmhvP07Sdcs0x0TRbgPYE46Do0SDc\nJnWp7t2O/3IphdiCPVqstrXiO+J0VCKVztAF9BjPoTx1PuapfYhY0+4O9V17+uan\n/3302gSg4+CUU9F4YhbZ5nqXW8VF25V18NEd26XS5Dugifj3u9VJGMbTBD6wvzKN\nVbp5FHpNlTG8cBYQrNtR2uGwllZ1f0LKMVAN8GhGmIiEtC45p8DWDjPxlgDPe4vQ\n3nhj28Ye1cyvlwhgPqV72af+QI0gqRAt1+ehbOj0Q4fx1RqL1tBvU4+BARV9rpU=\n=8wBr\n-----END PGP SIGNATURE-----\n", "payload": "tree e4b558927972721421b7dae7069f2a94681fa5c6\nparent b66c9c3ac17a0b8a3053d03e1d1990595fd2a019\nparent 97621162996c0746a528edaddb43c984e15a3d51\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631815040 -0700\ncommitter GitHub <noreply@github.com> 1631815040 -0700\n\nRollup merge of #88892 - estebank:trait-objects, r=petrochenkov\n\nMove object safety suggestions to the end of the error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "html_url": "https://github.com/rust-lang/rust/commit/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66c9c3ac17a0b8a3053d03e1d1990595fd2a019", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66c9c3ac17a0b8a3053d03e1d1990595fd2a019", "html_url": "https://github.com/rust-lang/rust/commit/b66c9c3ac17a0b8a3053d03e1d1990595fd2a019"}, {"sha": "97621162996c0746a528edaddb43c984e15a3d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/97621162996c0746a528edaddb43c984e15a3d51", "html_url": "https://github.com/rust-lang/rust/commit/97621162996c0746a528edaddb43c984e15a3d51"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "9dbfa3a850ba848d505e469ac4edf8ee44f33f3b", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -83,10 +83,6 @@ pub fn report_object_safety_error(\n                     messages.push(msg.clone());\n                 }\n             }\n-            if trait_span.is_some() {\n-                // Only provide the help if its a local trait, otherwise it's not actionable.\n-                violation.solution(&mut err);\n-            }\n         }\n     }\n     let has_multi_span = !multi_span.is_empty();\n@@ -104,5 +100,13 @@ pub fn report_object_safety_error(\n          to be resolvable dynamically; for more information visit \\\n          <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n     );\n+    if trait_span.is_some() {\n+        let mut reported_violations: Vec<_> = reported_violations.into_iter().collect();\n+        reported_violations.sort();\n+        for violation in reported_violations {\n+            // Only provide the help if its a local trait, otherwise it's not actionable.\n+            violation.solution(&mut err);\n+        }\n+    }\n     err\n }"}, {"sha": "fc88b95bc67cd08a8cbf48b675f355de52c2e004", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -730,7 +730,7 @@ pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n pub enum ObjectSafetyViolation {\n     /// `Self: Sized` declared on the trait.\n     SizedSelf(SmallVec<[Span; 1]>),\n@@ -879,7 +879,7 @@ impl ObjectSafetyViolation {\n }\n \n /// Reasons a method might not be object-safe.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n     StaticMethod(Option<(&'static str, Span)>, Span, bool /* has args */),"}, {"sha": "fc949f24948574619af48ab1e4a0ddd21541bea7", "filename": "src/test/ui/associated-consts/associated-const-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n-   = help: consider moving `N` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/associated-const-in-trait.rs:6:11\n    |\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     const N: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `N` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "7b158f1d754740ad1500dbaf5f7146e48085e045", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -21,14 +21,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | impl dyn Bar {}\n    |      ^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-48027.rs:2:11\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `X` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9090c1b6bcfb38f80ddf8628b5c388a679e72af", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |                        ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n-   = help: consider moving `eq` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:6:43\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n    |       -------------                       ^^^^ ...because method `eq` references the `Self` type in this parameter\n    |       |\n    |       this trait cannot be made into an object...\n+   = help: consider moving `eq` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "4e1d71f154558857424588c3d100d5591912d63c", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | fn use_dyn(v: &dyn Foo) {\n    |                ^^^^^^^ `Foo` cannot be made into an object\n    |\n-   = help: consider moving `test` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-err-ret.rs:8:23\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn test(&self) -> [u8; bar::<Self>()];\n    |                       ^^^^^^^^^^^^^^^^^^^ ...because method `test` references the `Self` type in its return type\n+   = help: consider moving `test` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "3773d6f5234b0ca88cc8aafef6e7598d02733606", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | fn call_foo(x: Box<dyn Trait>) {\n    |                    ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/E0038.rs:2:22\n    |\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn foo(&self) -> Self;\n    |                      ^^^^ ...because method `foo` references the `Self` type in its return type\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "72cb4cc843cc42b746e5f30127a4d0913256ce3b", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -40,29 +40,29 @@ error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n    |                                       ^^^^^^^^^^^^^^^^^^ `NonObjectSafe3` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:11:8\n    |\n LL | trait NonObjectSafe3 {\n    |       -------------- this trait cannot be made into an object...\n LL |     fn foo<T>(&self);\n    |        ^^^ ...because method `foo` has generic type parameters\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe4` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:22\n    |\n LL | trait NonObjectSafe4 {\n    |       -------------- this trait cannot be made into an object...\n LL |     fn foo(&self, s: &Self);\n    |                      ^^^^^ ...because method `foo` references the `Self` type in this parameter\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16"}, {"sha": "a55642490f975eda5797eef92446e1f5986b2859", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n-   = help: consider moving `A` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/gat-in-trait-path.rs:5:10\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     type A<'a> where Self: 'a;\n    |          ^ ...because it contains the generic associated type `A`\n+   = help: consider moving `A` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "7dd1bdf891eb572599764d9928fbbd4994cabe14", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `X` cannot be made into an object\n LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |                       ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n-   = help: consider moving `Y` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-67510-pass.rs:4:10\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object...\n LL |     type Y<'a>;\n    |          ^ ...because it contains the generic associated type `Y`\n+   = help: consider moving `Y` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "0a7eb5dde6009838b44af2b5c6ff9bc75bdb03bb", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -20,29 +20,29 @@ error[E0038]: the trait `SuperTrait` cannot be made into an object\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n-   = help: consider moving `SubType` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-76535.rs:6:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+   = help: consider moving `SubType` to another trait\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n   --> $DIR/issue-76535.rs:36:57\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n-   = help: consider moving `SubType` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-76535.rs:6:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+   = help: consider moving `SubType` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n    = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n "}, {"sha": "17dd0ff4a0c94088a5bc09ecf56ed22a5a644bee", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -20,14 +20,14 @@ error[E0038]: the trait `CollectionFamily` cannot be made into an object\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n    |\n-   = help: consider moving `Member` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-78671.rs:4:10\n    |\n LL | trait CollectionFamily {\n    |       ---------------- this trait cannot be made into an object...\n LL |     type Member<T>;\n    |          ^^^^^^ ...because it contains the generic associated type `Member`\n+   = help: consider moving `Member` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6f856a97e7257fcc8c5a9795e024846ff4159f9", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -20,29 +20,29 @@ error[E0038]: the trait `MapLike` cannot be made into an object\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n-   = help: consider moving `VRefCont` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-79422.rs:20:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+   = help: consider moving `VRefCont` to another trait\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n   --> $DIR/issue-79422.rs:41:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n-   = help: consider moving `VRefCont` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-79422.rs:20:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+   = help: consider moving `VRefCont` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n    = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n "}, {"sha": "5ab37910207ca8d78abbf0b45e13733af78a8bf5", "filename": "src/test/ui/generic-associated-types/trait-objects.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `StreamingIterator` cannot be made into an object\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n-   = help: consider moving `Item` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/trait-objects.rs:4:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object...\n LL |     type Item<'a> where Self: 'a;\n    |          ^^^^ ...because it contains the generic associated type `Item`\n+   = help: consider moving `Item` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "b9e27873636c3302c567ca2d8b9037d59ab4cf5d", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn foo(b: &dyn Bar) {\n    |            ^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-18959.rs:1:20\n    |\n LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n    |                    ^^^ ...because method `foo` has generic type parameters\n LL | pub trait Bar: Foo { }\n    |           --- this trait cannot be made into an object...\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "7b37e1f95dcc654da9b864e543b211b3c480a990", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,7 +4,6 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19538.rs:2:8\n    |\n@@ -13,14 +12,14 @@ LL |     fn foo<T>(&self, val: T);\n ...\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19538.rs:2:8\n    |\n@@ -29,6 +28,7 @@ LL |     fn foo<T>(&self, val: T);\n ...\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n+   = help: consider moving `foo` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n    = note: required by cast to type `&mut dyn Bar`\n "}, {"sha": "9dd144fee24a68550116fb5ebf82292c0cc3607b", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-associated-consts.rs:9:11\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `X` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "9ba3b251e66034d207640e2cadd95609a8c6f07c", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-associated-consts.rs:9:11\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `X` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "345950f1ae670cb473598f10e32a51c4d7d09d94", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,29 +4,29 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:24:39\n    |\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    |                                       ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "86355627c796f9040d82f9c48686c4518f2771a8", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n@@ -21,14 +21,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t as &dyn Bar\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "f91c9b9856055778e20bbf4ae4d39fa5f1fe1caf", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,29 +4,29 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:11:22\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                              ^^^^^^^^ `Baz` cannot be made into an object\n    |\n-   = help: consider moving `baz` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:15:22\n    |\n LL | trait Baz {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n+   = help: consider moving `baz` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f48628c9d1111fd24e5d847bb4b6855f6075cfa7", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:11:22\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n@@ -21,14 +21,14 @@ error[E0038]: the trait `Baz` cannot be made into an object\n LL |     t\n    |     ^ `Baz` cannot be made into an object\n    |\n-   = help: consider moving `baz` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:15:22\n    |\n LL | trait Baz {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n+   = help: consider moving `baz` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Baz>` for `&T`\n    = note: required by cast to type `&dyn Baz`\n "}, {"sha": "54f19fe9da445bc476004b244b5c1e8950e4f753", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,8 +4,6 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | fn bar(x: &dyn Trait) {}\n    |            ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n-   = help: consider moving `baz` to another trait\n-   = help: consider moving `bat` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-references-self.rs:2:22\n    |\n@@ -15,6 +13,8 @@ LL |     fn baz(&self, _: Self) {}\n    |                      ^^^^ ...because method `baz` references the `Self` type in this parameter\n LL |     fn bat(&self) -> Self {}\n    |                      ^^^^ ...because method `bat` references the `Self` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = help: consider moving `bat` to another trait\n \n error[E0038]: the trait `Other` cannot be made into an object\n   --> $DIR/object-unsafe-trait-references-self.rs:10:12"}, {"sha": "ef5d5cdff8f4b14f2d4df31bd715af7d70e71444", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -127,9 +127,6 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n LL |     <dyn C>::A;\n    |      ^^^^^ `assoc_const::C` cannot be made into an object\n    |\n-   = help: consider moving `C` to another trait\n-   = help: consider moving `B` to another trait\n-   = help: consider moving `A` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/item-privacy.rs:25:15\n    |\n@@ -143,6 +140,9 @@ LL |     pub trait C: A + B {\n    |               - this trait cannot be made into an object...\n LL |         const C: u8 = 0;\n    |               ^ ...because it contains this associated `const`\n+   = help: consider moving `C` to another trait\n+   = help: consider moving `A` to another trait\n+   = help: consider moving `B` to another trait\n \n error[E0223]: ambiguous associated type\n   --> $DIR/item-privacy.rs:115:12"}, {"sha": "d943b48fd0082115045e051a5f884cf56b545fe3", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -32,8 +32,6 @@ error[E0038]: the trait `bar` cannot be made into an object\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n-   = help: consider moving `dup` to another trait\n-   = help: consider moving `blah` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/test-2.rs:4:30\n    |\n@@ -42,15 +40,15 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       |                      |\n    |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/test-2.rs:13:6\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ `bar` cannot be made into an object\n    |\n-   = help: consider moving `dup` to another trait\n-   = help: consider moving `blah` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/test-2.rs:4:30\n    |\n@@ -59,6 +57,8 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       |                      |\n    |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn bar>>` for `Box<{integer}>`\n    = note: required by cast to type `Box<dyn bar>`\n "}, {"sha": "8a296dc7ee6e12506d7c5f12cd1f4d7507886786", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -16,14 +16,14 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ `MyAdd` cannot be made into an object\n    |\n-   = help: consider moving `add` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:6:55\n    |\n LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n    |       -----                                           ^^^^ ...because method `add` references the `Self` type in its return type\n    |       |\n    |       this trait cannot be made into an object...\n+   = help: consider moving `add` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c924cd87997e137a864a6e5cc73d37b983e1743b", "filename": "src/test/ui/wf/issue-87495.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `T` cannot be made into an object\n LL |     const CONST: (bool, dyn T);\n    |                         ^^^^^ `T` cannot be made into an object\n    |\n-   = help: consider moving `CONST` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-87495.rs:4:11\n    |\n LL | trait T {\n    |       - this trait cannot be made into an object...\n LL |     const CONST: (bool, dyn T);\n    |           ^^^^^ ...because it contains this associated `const`\n+   = help: consider moving `CONST` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "64969fbe3203e0af8fdbccb7c85968c92f9e7a97", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=14eb87dd26ca4128ae5fcaa3b1f448dfd15a06ba", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `A` cannot be made into an object\n LL |     let _x: &dyn A;\n    |             ^^^^^^ `A` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-object-safe.rs:5:23\n    |\n LL | trait A {\n    |       - this trait cannot be made into an object...\n LL |     fn foo(&self, _x: &Self);\n    |                       ^^^^^ ...because method `foo` references the `Self` type in this parameter\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}]}