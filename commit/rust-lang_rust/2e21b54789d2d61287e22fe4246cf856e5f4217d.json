{"sha": "2e21b54789d2d61287e22fe4246cf856e5f4217d", "node_id": "C_kwDOAAsO6NoAKDJlMjFiNTQ3ODlkMmQ2MTI4N2UyMmZlNDI0NmNmODU2ZTVmNDIxN2Q", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-30T15:09:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-30T16:17:37Z"}, "message": "rustc_middle: Document which exactly `DefId`s don't have `DefKind`s", "tree": {"sha": "1977a328a7caadd970b1438fef55063548bfc5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1977a328a7caadd970b1438fef55063548bfc5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e21b54789d2d61287e22fe4246cf856e5f4217d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e21b54789d2d61287e22fe4246cf856e5f4217d", "html_url": "https://github.com/rust-lang/rust/commit/2e21b54789d2d61287e22fe4246cf856e5f4217d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e21b54789d2d61287e22fe4246cf856e5f4217d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7ca936e61d04399198911ee2b07ac110bf17b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0", "html_url": "https://github.com/rust-lang/rust/commit/8a7ca936e61d04399198911ee2b07ac110bf17b0"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "22df2f7d6f7b53e5f89109022390f3512b1d34d4", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e21b54789d2d61287e22fe4246cf856e5f4217d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e21b54789d2d61287e22fe4246cf856e5f4217d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=2e21b54789d2d61287e22fe4246cf856e5f4217d", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n+use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n@@ -180,7 +180,19 @@ impl<'hir> Map<'hir> {\n     /// Do not call this function directly. The query should be called.\n     pub(super) fn opt_def_kind(self, local_def_id: LocalDefId) -> Option<DefKind> {\n         let hir_id = self.local_def_id_to_hir_id(local_def_id);\n-        let def_kind = match self.find(hir_id)? {\n+        let node = match self.find(hir_id) {\n+            Some(node) => node,\n+            None => match self.def_key(local_def_id).disambiguated_data.data {\n+                // FIXME: Some anonymous constants do not have corresponding HIR nodes,\n+                // so many local queries will panic on their def ids. `None` is currently\n+                // returned here instead of `DefKind::{Anon,Inline}Const` to avoid such panics.\n+                // Ideally all def ids should have `DefKind`s, we need to create the missing\n+                // HIR nodes or feed relevant query results to achieve that.\n+                DefPathData::AnonConst => return None,\n+                _ => bug!(\"no HIR node for def id {local_def_id:?}\"),\n+            },\n+        };\n+        let def_kind = match node {\n             Node::Item(item) => match item.kind {\n                 ItemKind::Static(_, mt, _) => DefKind::Static(mt),\n                 ItemKind::Const(..) => DefKind::Const,\n@@ -267,7 +279,10 @@ impl<'hir> Map<'hir> {\n             | Node::Param(_)\n             | Node::Arm(_)\n             | Node::Lifetime(_)\n-            | Node::Block(_) => return None,\n+            | Node::Block(_) => span_bug!(\n+                self.span(hir_id),\n+                \"unexpected node with def id {local_def_id:?}: {node:?}\"\n+            ),\n         };\n         Some(def_kind)\n     }"}]}