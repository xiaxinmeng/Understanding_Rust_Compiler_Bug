{"sha": "9eec782774af30f95f51d7adbd881c13014fe146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZWM3ODI3NzRhZjMwZjk1ZjUxZDdhZGJkODgxYzEzMDE0ZmUxNDY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-07T23:41:50Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-16T07:18:56Z"}, "message": "Check for negative impls for `Send` and `Sync`", "tree": {"sha": "42f92c8c64c2a3061f023c6340b19c603008fc4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42f92c8c64c2a3061f023c6340b19c603008fc4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eec782774af30f95f51d7adbd881c13014fe146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eec782774af30f95f51d7adbd881c13014fe146", "html_url": "https://github.com/rust-lang/rust/commit/9eec782774af30f95f51d7adbd881c13014fe146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eec782774af30f95f51d7adbd881c13014fe146/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aab863ba2841fc55d0e34ebb50a07acecd50a80", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aab863ba2841fc55d0e34ebb50a07acecd50a80", "html_url": "https://github.com/rust-lang/rust/commit/5aab863ba2841fc55d0e34ebb50a07acecd50a80"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "2e2d64e5636ebe0cfe4c16977a399ab278b7d4dd", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9eec782774af30f95f51d7adbd881c13014fe146/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eec782774af30f95f51d7adbd881c13014fe146/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9eec782774af30f95f51d7adbd881c13014fe146", "patch": "@@ -611,6 +611,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Ok(None);\n         }\n \n+\n         // If there are *NO* candidates, that there are no impls --\n         // that we know of, anyway. Note that in the case where there\n         // are unbound type variables within the obligation, it might\n@@ -626,6 +627,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Just one candidate left.\n         let candidate = candidates.pop().unwrap();\n+\n+        match candidate {\n+            ImplCandidate(def_id) => {\n+                match ty::trait_impl_polarity(self.tcx(), def_id) {\n+                    Some(ast::ImplPolarity::Negative) => return Err(Unimplemented),\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         Ok(Some(candidate))\n     }\n \n@@ -714,15 +726,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"obligation self ty is {}\",\n                        obligation.predicate.0.self_ty().repr(self.tcx()));\n \n-                try!(self.assemble_candidates_from_impls(obligation, &mut candidates.vec));\n+                try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n \n                 try!(self.assemble_builtin_bound_candidates(ty::BoundCopy,\n                                                             stack,\n                                                             &mut candidates));\n             }\n             Some(bound @ ty::BoundSend) |\n             Some(bound @ ty::BoundSync) => {\n-                try!(self.assemble_candidates_from_impls(obligation, &mut candidates.vec));\n+                try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n \n                 // No explicit impls were declared for this type, consider the fallback rules.\n                 if candidates.vec.is_empty() && !candidates.ambiguous {\n@@ -741,7 +753,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // (And unboxed candidates only apply to the Fn/FnMut/etc traits.)\n                 try!(self.assemble_unboxed_closure_candidates(obligation, &mut candidates));\n                 try!(self.assemble_fn_pointer_candidates(obligation, &mut candidates));\n-                try!(self.assemble_candidates_from_impls(obligation, &mut candidates.vec));\n+                try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n                 self.assemble_candidates_from_object_ty(obligation, &mut candidates);\n             }\n         }\n@@ -1013,9 +1025,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// Search for impls that might apply to `obligation`.\n     fn assemble_candidates_from_impls(&mut self,\n                                       obligation: &TraitObligation<'tcx>,\n-                                      candidate_vec: &mut Vec<SelectionCandidate<'tcx>>)\n+                                      candidates: &mut SelectionCandidateSet<'tcx>)\n                                       -> Result<(), SelectionError<'tcx>>\n     {\n+        let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n+        debug!(\"assemble_candidates_from_impls(self_ty={})\", self_ty.repr(self.tcx()));\n+\n         let all_impls = self.all_impls(obligation.predicate.def_id());\n         for &impl_def_id in all_impls.iter() {\n             self.infcx.probe(|snapshot| {\n@@ -1024,7 +1039,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 match self.match_impl(impl_def_id, obligation, snapshot,\n                                       &skol_map, skol_obligation_trait_pred.trait_ref.clone()) {\n                     Ok(_) => {\n-                        candidate_vec.push(ImplCandidate(impl_def_id));\n+                        candidates.vec.push(ImplCandidate(impl_def_id));\n                     }\n                     Err(()) => { }\n                 }\n@@ -2214,12 +2229,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Returns set of all impls for a given trait.\n     fn all_impls(&self, trait_def_id: ast::DefId) -> Vec<ast::DefId> {\n-        ty::populate_implementations_for_trait_if_necessary(self.tcx(),\n-                                                            trait_def_id);\n-        match self.tcx().trait_impls.borrow().get(&trait_def_id) {\n+        ty::populate_implementations_for_trait_if_necessary(self.tcx(), trait_def_id);\n+\n+        let mut trait_impls = match self.tcx().trait_impls.borrow().get(&trait_def_id) {\n             None => Vec::new(),\n             Some(impls) => impls.borrow().clone()\n-        }\n+        };\n+\n+        match self.tcx().trait_negative_impls.borrow().get(&trait_def_id) {\n+            None => {},\n+            Some(impls) => trait_impls.push_all(impls.borrow().as_slice()),\n+        };\n+\n+        trait_impls\n     }\n \n     fn impl_obligations(&mut self,"}, {"sha": "7e38321049ed7a8c9acf85a71287224d19cff672", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eec782774af30f95f51d7adbd881c13014fe146/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eec782774af30f95f51d7adbd881c13014fe146/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9eec782774af30f95f51d7adbd881c13014fe146", "patch": "@@ -1597,7 +1597,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         debug!(\"register_predicate({})\",\n                obligation.repr(self.tcx()));\n-\n         self.inh.fulfillment_cx\n             .borrow_mut()\n             .register_predicate_obligation(self.infcx(), obligation);"}, {"sha": "baa4850ce4a3e2df65fb46b3ae2638178ce7488f", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9eec782774af30f95f51d7adbd881c13014fe146/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eec782774af30f95f51d7adbd881c13014fe146/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=9eec782774af30f95f51d7adbd881c13014fe146", "patch": "@@ -56,7 +56,24 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                ty::item_path_str(ccx.tcx, local_def(item.id)));\n \n         match item.node {\n-            ast::ItemImpl(..) => {\n+            /// Right now we check that every default trait implementation\n+            /// has an implementation of itself. Basically, a case like:\n+            ///\n+            /// `impl Trait for T {}`\n+            ///\n+            /// has a requirement of `T: Trait` which was required for default\n+            /// method implementations. Although this could be improved now that\n+            /// there's a better infrastructure in place for this, it's being left\n+            /// for a follow-up work.\n+            ///\n+            /// Since there's such a requirement, we need to check *just* positive\n+            /// implementations, otherwise things like:\n+            ///\n+            /// impl !Send for T {}\n+            ///\n+            /// won't be allowed unless there's an *explicit* implementation of `Send`\n+            /// for `T`\n+            ast::ItemImpl(_, ast::ImplPolarity::Positive, _, _, _, _) => {\n                 self.check_impl(item);\n             }\n             ast::ItemFn(..) => {"}, {"sha": "d882603655bd3d904d8351e3da38957cde18d520", "filename": "src/test/compile-fail/coherence-trait-polarity-mising-default-implementation.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aab863ba2841fc55d0e34ebb50a07acecd50a80/src%2Ftest%2Fcompile-fail%2Fcoherence-trait-polarity-mising-default-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aab863ba2841fc55d0e34ebb50a07acecd50a80/src%2Ftest%2Fcompile-fail%2Fcoherence-trait-polarity-mising-default-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-trait-polarity-mising-default-implementation.rs?ref=5aab863ba2841fc55d0e34ebb50a07acecd50a80", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-struct TestType;\n-\n-trait TestTrait {}\n-\n-impl !TestTrait for TestType {}\n-//~^ the trait `TestTrait` is not implemented for the type `TestType`\n-\n-fn main() {}"}, {"sha": "a7d1d796801f4d7f8c66247f1796ea12567e0eee", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9eec782774af30f95f51d7adbd881c13014fe146/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eec782774af30f95f51d7adbd881c13014fe146/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=9eec782774af30f95f51d7adbd881c13014fe146", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::Send;\n+\n+struct Outer<T: Send>(T);\n+\n+struct TestType;\n+impl !Send for TestType {}\n+\n+struct Outer2<T>(T);\n+\n+unsafe impl<T: Send> Sync for Outer2<T> {}\n+\n+fn is_send<T: Send>(_: T) {}\n+fn is_sync<T: Sync>(_: T) {}\n+\n+fn main() {\n+    Outer(TestType);\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+\n+    is_send(TestType);\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+\n+    // This will complain about a missing Send impl because `Sync` is implement *just*\n+    // for T that are `Send`. Look at #20366 and #19950\n+    is_sync(Outer2(TestType));\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+}"}]}