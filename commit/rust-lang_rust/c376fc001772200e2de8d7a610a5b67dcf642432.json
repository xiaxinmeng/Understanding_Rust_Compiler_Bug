{"sha": "c376fc001772200e2de8d7a610a5b67dcf642432", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNzZmYzAwMTc3MjIwMGUyZGU4ZDdhNjEwYTViNjdkY2Y2NDI0MzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-12T19:51:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-12T23:13:05Z"}, "message": "Account for `Pin::new(_)` and `Pin::new(Box::new(_))` when `Box::pin(_)` would be applicable", "tree": {"sha": "dc248ec48aafbd69c23125e188c536320895ab3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc248ec48aafbd69c23125e188c536320895ab3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c376fc001772200e2de8d7a610a5b67dcf642432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c376fc001772200e2de8d7a610a5b67dcf642432", "html_url": "https://github.com/rust-lang/rust/commit/c376fc001772200e2de8d7a610a5b67dcf642432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c376fc001772200e2de8d7a610a5b67dcf642432/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd", "html_url": "https://github.com/rust-lang/rust/commit/80cdb0af7dd27471e1e4a4362e2473a9331a5fdd"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "5c35041249f36e826f0fbf82604ccd476f88d403", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c376fc001772200e2de8d7a610a5b67dcf642432", "patch": "@@ -727,6 +727,13 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`Pin<P>`]: ../pin/struct.Pin.html\n /// [`pin module`]: ../../std/pin/index.html\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n+#[rustc_on_unimplemented(\n+    on(\n+        _Self = \"dyn std::future::Future<Output = i32> + std::marker::Send\",\n+        note = \"consider using `Box::pin`\",\n+    ),\n+    message = \"`{Self}` cannot be unpinned\"\n+)]\n #[lang = \"unpin\"]\n pub auto trait Unpin {}\n "}, {"sha": "cfcb94737be6f46c8bae504d2b06551890121796", "filename": "src/test/ui/generator/static-not-unpin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.rs?ref=c376fc001772200e2de8d7a610a5b67dcf642432", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     let mut generator = static || {\n         yield;\n     };\n-    assert_unpin(generator); //~ ERROR std::marker::Unpin` is not satisfied\n+    assert_unpin(generator); //~ ERROR E0277\n }"}, {"sha": "6512d67319b0b6327cf6666040f80711ae144167", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=c376fc001772200e2de8d7a610a5b67dcf642432", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]: std::marker::Unpin` is not satisfied\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]` cannot be unpinned\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {"}, {"sha": "eda579f7fb49e85b112f8a1e5194cd875b817d8e", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=c376fc001772200e2de8d7a610a5b67dcf642432", "patch": "@@ -10,17 +10,18 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     // We could instead use an `async` block, but this way we have no std spans.\n     x //~ ERROR mismatched types\n }\n+\n fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Box::new(x) //~ ERROR mismatched types\n-    //~^ HELP use `Box::pin`\n }\n+\n fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Pin::new(x) //~ ERROR mismatched types\n-    //~^ ERROR the trait bound\n+    //~^ ERROR E0277\n }\n+\n fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-    Pin::new(Box::new(x)) //~ ERROR mismatched types\n-    //~^ ERROR the trait bound\n+    Pin::new(Box::new(x)) //~ ERROR E0277\n }\n \n fn main() {}"}, {"sha": "783b118d2f9a21ef182df14a0de643045310b2d6", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c376fc001772200e2de8d7a610a5b67dcf642432/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=c376fc001772200e2de8d7a610a5b67dcf642432", "patch": "@@ -16,7 +16,7 @@ LL |     x\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:14:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:15:5\n    |\n LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |                                                         ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n@@ -28,7 +28,7 @@ LL |     Box::new(x)\n    = help: use `Box::pin`\n \n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:14\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:14\n    |\n LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |        - this type parameter\n@@ -44,20 +44,22 @@ LL |     Pin::new(x)\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n-error[E0277]: the trait bound `dyn std::future::Future<Output = i32> + std::marker::Send: std::marker::Unpin` is not satisfied\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:5\n    |\n LL |     Pin::new(x)\n    |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n    |\n+   = note: consider using `Box::pin`\n    = note: required by `std::pin::Pin::<P>::new`\n \n-error[E0277]: the trait bound `dyn std::future::Future<Output = i32> + std::marker::Send: std::marker::Unpin` is not satisfied\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n    |\n LL |     Pin::new(Box::new(x))\n    |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n    |\n+   = note: consider using `Box::pin`\n    = note: required by `std::pin::Pin::<P>::new`\n \n error: aborting due to 5 previous errors"}]}