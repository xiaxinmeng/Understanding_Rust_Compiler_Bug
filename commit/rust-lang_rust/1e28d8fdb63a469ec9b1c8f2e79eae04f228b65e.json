{"sha": "1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMjhkOGZkYjYzYTQ2OWVjOWIxYzhmMmU3OWVhZTA0ZjIyOGI2NWU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-03-25T10:34:36Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-03T00:36:05Z"}, "message": "libstd: implement io::Reader for fileinput.", "tree": {"sha": "c3f165a9bc5a9d32bc0fd6aea36b4e470b437acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f165a9bc5a9d32bc0fd6aea36b4e470b437acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e", "html_url": "https://github.com/rust-lang/rust/commit/1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4edfa046af08a345c607ec9c80426d9eabc7c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4edfa046af08a345c607ec9c80426d9eabc7c82", "html_url": "https://github.com/rust-lang/rust/commit/e4edfa046af08a345c607ec9c80426d9eabc7c82"}], "stats": {"total": 397, "additions": 271, "deletions": 126}, "files": [{"sha": "0056b34eccbca4880b5f5e403106cd1127b74fcd", "filename": "src/libstd/fileinput.rs", "status": "modified", "additions": 271, "deletions": 126, "changes": 397, "blob_url": "https://github.com/rust-lang/rust/blob/1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e/src%2Flibstd%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e/src%2Flibstd%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffileinput.rs?ref=1e28d8fdb63a469ec9b1c8f2e79eae04f228b65e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /*!\n-A convience device for iterating through the lines in a series of\n+A library for iterating through the lines in a series of\n files. Very similar to [the Python module of the same\n name](http://docs.python.org/3.3/library/fileinput.html).\n \n@@ -47,31 +47,35 @@ or a program that numbers lines after concatenating two files\n                                    line));\n     }\n \n-The 2 `_vec` functions take a vec of file names (and empty means\n-read from `stdin`), the other 2 use the command line arguments.\n+The two `input_vec*` functions take a vec of file names (where empty\n+means read from `stdin`), the other two functions use the command line\n+arguments.\n \n # Advanced\n \n For more complicated uses (e.g. if one needs to pause iteration and\n resume it later), a `FileInput` instance can be constructed via the\n `from_vec`, `from_vec_raw` and `from_args` functions.\n \n-Once created, the `lines_each` and `lines_each_state` methods\n-allow one to iterate on the lines (the latter provides more\n-information about the position within the iteration to the caller.\n+Once created, the `each_line` (from the `core::io::ReaderUtil` trait)\n+and `each_line_state` methods allow one to iterate on the lines; the\n+latter provides more information about the position within the\n+iteration to the caller.\n \n It is possible (and safe) to skip lines and files using the\n-`read_line` and `next_file` methods.\n+`read_line` and `next_file` methods. Also, `FileInput` implements\n+`core::io::Reader`, and the state will be updated correctly while\n+using any of those methods.\n \n-E.g. the following (pointless) program reads until an empty line,\n-pauses for user input, skips the current file and then numbers the\n-remaining lines (where the numbers are from the start of the file,\n-rather than the total line count).\n+E.g. the following program reads until an empty line, pauses for user\n+input, skips the current file and then numbers the remaining lines\n+(where the numbers are from the start of each file, rather than the\n+total line count).\n \n-    let mut in = FileInput::from_vec(pathify([~\"a.txt\", ~\"b.txt\", ~\"c.txt\"],\n+    let in = FileInput::from_vec(pathify([~\"a.txt\", ~\"b.txt\", ~\"c.txt\"],\n                                              true));\n \n-    for in.lines_each |line| {\n+    for in.each_line |line| {\n         if line.is_empty() {\n             break\n         }\n@@ -83,20 +87,23 @@ rather than the total line count).\n     if io::stdin().read_line() == ~\"yes\" {\n         in.next_file(); // skip!\n \n-        for in.lines_each_state |line, state| {\n+        for in.each_line_state |line, state| {\n            io::println(fmt!(\"%u: %s\", state.line_num_file,\n                                       line))\n         }\n     }\n */\n \n+#[allow(deprecated_mutable_fields)];\n+\n use core::prelude::*;\n use core::io::ReaderUtil;\n \n /**\n-A summary of the internal state of a FileInput object. `line_num` and\n-`line_num_file` represent the number of lines read in total and in the\n-current file respectively.\n+A summary of the internal state of a `FileInput` object. `line_num`\n+and `line_num_file` represent the number of lines read in total and in\n+the current file respectively. `current_path` is `None` if the current\n+file is `stdin`.\n */\n pub struct FileInputState {\n     current_path: Option<Path>,\n@@ -114,18 +121,32 @@ impl FileInputState {\n     }\n }\n \n-priv struct FileInput {\n+struct FileInput_ {\n     /**\n     `Some(path)` is the file represented by `path`, `None` is\n     `stdin`. Consumed as the files are read.\n     */\n-    files: ~[Option<Path>],\n+    priv files: ~[Option<Path>],\n     /**\n     The current file: `Some(r)` for an open file, `None` before\n     starting and after reading everything.\n     */\n-    current_reader: Option<@io::Reader>,\n-    state: FileInputState\n+    priv current_reader: Option<@io::Reader>,\n+    priv state: FileInputState,\n+\n+    /**\n+    Used to keep track of whether we need to insert the newline at the\n+    end of a file that is missing it, which is needed to separate the\n+    last and first lines.\n+    */\n+    priv previous_was_newline: bool\n+}\n+\n+// XXX: remove this when Reader has &mut self. Should be removable via\n+// \"self.fi.\" -> \"self.\" and renaming FileInput_. Documentation above\n+// will likely have to be updated to use `let mut in = ...`.\n+pub struct FileInput  {\n+    priv mut fi: FileInput_\n }\n \n impl FileInput {\n@@ -134,7 +155,7 @@ impl FileInput {\n     vec means lines are read from `stdin` (use `from_vec_raw` to stop\n     this behaviour). Any occurence of `None` represents `stdin`.\n     */\n-    static pure fn from_vec(files: ~[Option<Path>]) -> FileInput {\n+    pub fn from_vec(files: ~[Option<Path>]) -> FileInput {\n         FileInput::from_vec_raw(\n             if files.is_empty() {\n                 ~[None]\n@@ -147,31 +168,35 @@ impl FileInput {\n     Identical to `from_vec`, but an empty `files` vec stays\n     empty. (`None` is `stdin`.)\n     */\n-    static pure fn from_vec_raw(files: ~[Option<Path>])\n+    pub fn from_vec_raw(files: ~[Option<Path>])\n                                          -> FileInput {\n-        FileInput {\n-            files: files,\n-            current_reader: None,\n-            state: FileInputState {\n-                current_path: None,\n-                line_num: 0,\n-                line_num_file: 0\n+        FileInput{\n+            fi: FileInput_ {\n+                files: files,\n+                current_reader: None,\n+                state: FileInputState {\n+                    current_path: None,\n+                    line_num: 0,\n+                    line_num_file: 0\n+                },\n+                // there was no previous unended line\n+                previous_was_newline: true\n             }\n         }\n     }\n \n     /**\n     Create a `FileInput` object from the command line\n-    arguments. `-` represents `stdin`.\n+    arguments. `\"-\"` represents `stdin`.\n     */\n-    static fn from_args() -> FileInput {\n+    pub fn from_args() -> FileInput {\n         let args = os::args(),\n             pathed = pathify(args.tail(), true);\n         FileInput::from_vec(pathed)\n     }\n \n     priv fn current_file_eof(&self) -> bool {\n-        match self.current_reader {\n+        match self.fi.current_reader {\n             None => false,\n             Some(r) => r.eof()\n         }\n@@ -180,118 +205,151 @@ impl FileInput {\n     /**\n     Skip to the next file in the queue. Can `fail` when opening\n     a file.\n+\n+    Returns `false` if there is no more files, and `true` when it\n+    successfully opens the next file.\n     */\n-    pub fn next_file(&mut self) {\n+\n+    pub fn next_file(&self) -> bool {\n         // No more files\n-        if self.files.is_empty() {\n-            self.current_reader = None;\n-            return;\n+\n+        // Compiler whines about \"illegal borrow unless pure\" for\n+        // files.is_empty()\n+        if unsafe { self.fi.files.is_empty() } {\n+            self.fi.current_reader = None;\n+            return false;\n         }\n \n-        let path_option = self.files.shift(),\n+        let path_option = self.fi.files.shift(),\n             file = match path_option {\n                 None => io::stdin(),\n                 Some(ref path) => io::file_reader(path).get()\n             };\n \n-        self.current_reader = Some(file);\n-        self.state.current_path = path_option;\n-        self.state.line_num_file = 0;\n+        self.fi.current_reader = Some(file);\n+        self.fi.state.current_path = path_option;\n+        self.fi.state.line_num_file = 0;\n+        true\n     }\n \n     /**\n     Attempt to open the next file if there is none currently open,\n     or if the current one is EOF'd.\n+\n+    Returns `true` if it had to move to the next file and did\n+    so successfully.\n     */\n-    priv fn next_file_if_eof(&mut self) {\n-        match self.current_reader {\n+    priv fn next_file_if_eof(&self) -> bool {\n+        match self.fi.current_reader {\n             None => self.next_file(),\n             Some(r) => {\n                 if r.eof() {\n                     self.next_file()\n+                } else {\n+                    false\n                 }\n             }\n         }\n     }\n \n     /**\n-    Read a single line. Returns `None` if there are no remaining lines\n-    in any remaining file. (Automatically opens files as required, see\n-    `next_file` for details.)\n+    Apply `f` to each line successively, along with some state\n+    (line numbers and file names, see documentation for\n+    `FileInputState`). Otherwise identical to `lines_each`.\n+    */\n+    pub fn each_line_state(&self,\n+                            f: &fn(&str, FileInputState) -> bool) {\n+         self.each_line(|line| f(line, copy self.fi.state));\n+    }\n \n-    (Name to avoid conflicting with `core::io::ReaderUtil::read_line`.)\n+\n+    /**\n+    Retrieve the current `FileInputState` information.\n     */\n-    pub fn next_line(&mut self) -> Option<~str> {\n+    pub fn state(&self) -> FileInputState {\n+        copy self.fi.state\n+    }\n+}\n+\n+impl io::Reader for FileInput {\n+    fn read_byte(&self) -> int {\n         loop {\n-            // iterate until there is a file that can be read from\n-            self.next_file_if_eof();\n-            match self.current_reader {\n-                None => {\n-                    // no file has any content\n-                    return None;\n-                },\n+            let stepped = self.next_file_if_eof();\n+\n+            // if we moved to the next file, and the previous\n+            // character wasn't \\n, then there is an unfinished line\n+            // from the previous file. This library models\n+            // line-by-line processing and the trailing line of the\n+            // previous file and the leading of the current file\n+            // should be considered different, so we need to insert a\n+            // fake line separator\n+            if stepped && !self.fi.previous_was_newline {\n+                self.fi.state.line_num += 1;\n+                self.fi.state.line_num_file += 1;\n+                self.fi.previous_was_newline = true;\n+                return '\\n' as int;\n+            }\n+\n+            match self.fi.current_reader {\n+                None => return -1,\n                 Some(r) => {\n-                    let l = r.read_line();\n+                    let b = r.read_byte();\n \n-                    // at the end of this file, and we read nothing, so\n-                    // go to the next file\n-                    if r.eof() && l.is_empty() {\n+                    if b < 0 {\n                         loop;\n                     }\n-                    self.state.line_num += 1;\n-                    self.state.line_num_file += 1;\n-                    return Some(l);\n+\n+                    if b == '\\n' as int {\n+                        self.fi.state.line_num += 1;\n+                        self.fi.state.line_num_file += 1;\n+                        self.fi.previous_was_newline = true;\n+                    } else {\n+                        self.fi.previous_was_newline = false;\n+                    }\n+\n+                    return b;\n                 }\n             }\n         }\n     }\n+    fn read(&self, buf: &mut [u8], len: uint) -> uint {\n+        let mut count = 0;\n+        while count < len {\n+            let b = self.read_byte();\n+            if b < 0 { break }\n+\n+            buf[count] = b as u8;\n+            count += 1;\n+        }\n \n-    /**\n-    Call `f` on the lines in the files in succession, stopping if\n-    it ever returns `false`.\n+        count\n+    }\n+    fn eof(&self) -> bool {\n+        // we've run out of files, and current_reader is either None or eof.\n \n-    State is preserved across calls.\n+        // compiler whines about illegal borrows for files.is_empty()\n+        (unsafe { self.fi.files.is_empty() }) &&\n+            match self.fi.current_reader { None => true, Some(r) => r.eof() }\n \n-    (The name is to avoid conflict with\n-    `core::io::ReaderUtil::each_line`.)\n-    */\n-    pub fn lines_each(&mut self, f: &fn(~str) -> bool) {\n-        loop {\n-            match self.next_line() {\n-                None => break,\n-                Some(line) => {\n-                    if !f(line) {\n-                        break;\n-                    }\n-                }\n-            }\n+    }\n+    fn seek(&self, offset: int, whence: io::SeekStyle) {\n+        match self.fi.current_reader {\n+            None => {},\n+            Some(r) => r.seek(offset, whence)\n         }\n     }\n-\n-    /**\n-    Apply `f` to each line successively, along with some state\n-    (line numbers and file names, see documentation for\n-    `FileInputState`). Otherwise identical to `lines_each`.\n-    */\n-    pub fn lines_each_state(&mut self,\n-                            f: &fn(~str, &FileInputState) -> bool) {\n-        loop {\n-            match self.next_line() {\n-                None => break,\n-                Some(line) => {\n-                    if !f(line, &self.state) {\n-                        break;\n-                    }\n-                }\n-            }\n+    fn tell(&self) -> uint {\n+        match self.fi.current_reader {\n+            None => 0,\n+            Some(r) => r.tell()\n         }\n     }\n }\n \n /**\n Convert a list of strings to an appropriate form for a `FileInput`\n instance. `stdin_hyphen` controls whether `-` represents `stdin` or\n-not.\n+a literal `-`.\n */\n // XXX: stupid, unclear name\n pub fn pathify(vec: &[~str], stdin_hyphen : bool) -> ~[Option<Path>] {\n@@ -310,9 +368,9 @@ reading from `stdin`).\n \n Fails when attempting to read from a file that can't be opened.\n */\n-pub fn input(f: &fn(~str) -> bool) {\n+pub fn input(f: &fn(&str) -> bool) {\n     let mut i = FileInput::from_args();\n-    i.lines_each(f);\n+    i.each_line(f);\n }\n \n /**\n@@ -322,31 +380,31 @@ provided at each call.\n \n Fails when attempting to read from a file that can't be opened.\n */\n-pub fn input_state(f: &fn(~str, &FileInputState) -> bool) {\n+pub fn input_state(f: &fn(&str, FileInputState) -> bool) {\n     let mut i = FileInput::from_args();\n-    i.lines_each_state(f);\n+    i.each_line_state(f);\n }\n \n /**\n-Iterate over a vec of files (an empty vec implies just `stdin`).\n+Iterate over a vector of files (an empty vector implies just `stdin`).\n \n Fails when attempting to read from a file that can't be opened.\n */\n-pub fn input_vec(files: ~[Option<Path>], f: &fn(~str) -> bool) {\n+pub fn input_vec(files: ~[Option<Path>], f: &fn(&str) -> bool) {\n     let mut i = FileInput::from_vec(files);\n-    i.lines_each(f);\n+    i.each_line(f);\n }\n \n /**\n-Iterate over a vec of files (an empty vec implies just `stdin`) with\n-the current state of the iteration provided at each call.\n+Iterate over a vector of files (an empty vector implies just `stdin`)\n+with the current state of the iteration provided at each call.\n \n Fails when attempting to read from a file that can't be opened.\n */\n pub fn input_vec_state(files: ~[Option<Path>],\n-                       f: &fn(~str, &FileInputState) -> bool) {\n+                       f: &fn(&str, FileInputState) -> bool) {\n     let mut i = FileInput::from_vec(files);\n-    i.lines_each_state(f);\n+    i.each_line_state(f);\n }\n \n #[cfg(test)]\n@@ -371,11 +429,61 @@ mod test {\n             paths = ~[Some(Path(\"some/path\")),\n                       Some(Path(\"some/other/path\"))];\n \n-        fail_unless!(pathify(strs, true) == paths);\n-        fail_unless!(pathify(strs, false) == paths);\n+        assert_eq!(pathify(strs, true), copy paths);\n+        assert_eq!(pathify(strs, false), paths);\n \n-        fail_unless!(pathify([~\"-\"], true) == ~[None]);\n-        fail_unless!(pathify([~\"-\"], false) == ~[Some(Path(\"-\"))]);\n+        assert_eq!(pathify([~\"-\"], true), ~[None]);\n+        assert_eq!(pathify([~\"-\"], false), ~[Some(Path(\"-\"))]);\n+    }\n+\n+    #[test]\n+    fn test_fileinput_read_byte() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-byte-%u.tmp\", i)), true);\n+\n+        // 3 files containing 0\\n, 1\\n, and 2\\n respectively\n+        for filenames.eachi |i, &filename| {\n+            make_file(filename.get_ref(), ~[fmt!(\"%u\", i)]);\n+        }\n+\n+        let fi = FileInput::from_vec(copy filenames);\n+\n+        for \"012\".each_chari |line, c| {\n+            assert_eq!(fi.read_byte(), c as int);\n+            assert_eq!(fi.state().line_num, line);\n+            assert_eq!(fi.state().line_num_file, 0);\n+            assert_eq!(fi.read_byte(), '\\n' as int);\n+            assert_eq!(fi.state().line_num, line + 1);\n+            assert_eq!(fi.state().line_num_file, 1);\n+\n+            assert_eq!(copy fi.state().current_path, copy filenames[line]);\n+        }\n+\n+        assert_eq!(fi.read_byte(), -1);\n+        fail_unless!(fi.eof());\n+        assert_eq!(fi.state().line_num, 3)\n+\n+    }\n+\n+    #[test]\n+    fn test_fileinput_read() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-%u.tmp\", i)), true);\n+\n+        // 3 files containing 1\\n, 2\\n, and 3\\n respectively\n+        for filenames.eachi |i, &filename| {\n+            make_file(filename.get_ref(), ~[fmt!(\"%u\", i)]);\n+        }\n+\n+        let fi = FileInput::from_vec(filenames);\n+        let mut buf : ~[u8] = vec::from_elem(6, 0u8);\n+        let count = fi.read(buf, 10);\n+        assert_eq!(count, 6);\n+        assert_eq!(buf, \"0\\n1\\n2\\n\".to_bytes());\n+        fail_unless!(fi.eof())\n+        assert_eq!(fi.state().line_num, 3);\n     }\n \n     #[test]\n@@ -388,47 +496,84 @@ mod test {\n         for filenames.eachi |i, &filename| {\n             let contents =\n                 vec::from_fn(3, |j| fmt!(\"%u %u\", i, j));\n-            make_file(&filename.get(), contents);\n+            make_file(filename.get_ref(), contents);\n             all_lines.push_all(contents);\n         }\n \n         let mut read_lines = ~[];\n         for input_vec(filenames) |line| {\n-            read_lines.push(line);\n+            read_lines.push(line.to_owned());\n         }\n-        fail_unless!(read_lines == all_lines);\n+        assert_eq!(read_lines, all_lines);\n     }\n \n     #[test]\n     fn test_input_vec_state() {\n         let filenames = pathify(vec::from_fn(\n             3,\n-            |i|\n-            fmt!(\"tmp/lib-fileinput-test-input-vec-state-%u.tmp\", i)),true);\n+            |i| fmt!(\"tmp/lib-fileinput-test-input-vec-state-%u.tmp\", i)),true);\n \n         for filenames.eachi |i, &filename| {\n             let contents =\n                 vec::from_fn(3, |j| fmt!(\"%u %u\", i, j + 1));\n-            make_file(&filename.get(), contents);\n+            make_file(filename.get_ref(), contents);\n         }\n \n         for input_vec_state(filenames) |line, state| {\n             let nums = str::split_char(line, ' ');\n-\n             let file_num = uint::from_str(nums[0]).get();\n             let line_num = uint::from_str(nums[1]).get();\n+            assert_eq!(line_num, state.line_num_file);\n+            assert_eq!(file_num * 3 + line_num, state.line_num);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_empty_files() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n+\n+        make_file(filenames[0].get_ref(), ~[~\"1\", ~\"2\"]);\n+        make_file(filenames[1].get_ref(), ~[]);\n+        make_file(filenames[2].get_ref(), ~[~\"3\", ~\"4\"]);\n+\n+        let mut count = 0;\n+        for input_vec_state(copy filenames) |line, state| {\n+            let expected_path = match line {\n+                \"1\" | \"2\" => copy filenames[0],\n+                \"3\" | \"4\" => copy filenames[2],\n+                _ => fail!(~\"unexpected line\")\n+            };\n+            assert_eq!(copy state.current_path, expected_path);\n+            count += 1;\n+        }\n+        assert_eq!(count, 4);\n+    }\n \n-            fail_unless!(line_num == state.line_num_file);\n-            fail_unless!(file_num * 3 + line_num == state.line_num);\n+    #[test]\n+    fn test_no_trailing_newline() {\n+        let f1 = Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-1.tmp\")),\n+            f2 = Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-2.tmp\"));\n+\n+        let wr = io::file_writer(f1.get_ref(), [io::Create, io::Truncate]).get();\n+        wr.write_str(\"1\\n2\");\n+        let wr = io::file_writer(f2.get_ref(), [io::Create, io::Truncate]).get();\n+        wr.write_str(\"3\\n4\");\n+\n+        let mut lines = ~[];\n+        for input_vec(~[f1, f2]) |line| {\n+            lines.push(line.to_owned());\n         }\n+        assert_eq!(lines, ~[~\"1\", ~\"2\", ~\"3\", ~\"4\"]);\n     }\n \n+\n     #[test]\n     fn test_next_file() {\n         let filenames = pathify(vec::from_fn(\n             3,\n-            |i|\n-            fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n+            |i| fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n \n         for filenames.eachi |i, &filename| {\n             let contents =\n@@ -439,19 +584,19 @@ mod test {\n         let mut in = FileInput::from_vec(filenames);\n \n         // read once from 0\n-        fail_unless!(in.next_line() == Some(~\"0 1\"));\n+        assert_eq!(in.read_line(), ~\"0 1\");\n         in.next_file(); // skip the rest of 1\n \n         // read all lines from 1 (but don't read any from 2),\n         for uint::range(1, 4) |i| {\n-            fail_unless!(in.next_line() == Some(fmt!(\"1 %u\", i)));\n+            assert_eq!(in.read_line(), fmt!(\"1 %u\", i));\n         }\n         // 1 is finished, but 2 hasn't been started yet, so this will\n         // just \"skip\" to the beginning of 2 (Python's fileinput does\n         // the same)\n         in.next_file();\n \n-        fail_unless!(in.next_line() == Some(~\"2 1\"));\n+        assert_eq!(in.read_line(), ~\"2 1\");\n     }\n \n     #[test]"}]}