{"sha": "0c01f6e14912edc35296aa4b7558a0b36790561b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDFmNmUxNDkxMmVkYzM1Mjk2YWE0Yjc1NThhMGIzNjc5MDU2MWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-17T09:10:46Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:28Z"}, "message": "trans: Move type_of_fn_from_ty callers to type_of.", "tree": {"sha": "aa3e90fa7e76e5a2c2a669959388d1912f01181e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3e90fa7e76e5a2c2a669959388d1912f01181e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c01f6e14912edc35296aa4b7558a0b36790561b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c01f6e14912edc35296aa4b7558a0b36790561b", "html_url": "https://github.com/rust-lang/rust/commit/0c01f6e14912edc35296aa4b7558a0b36790561b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c01f6e14912edc35296aa4b7558a0b36790561b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e1242769d41c29f5814d6317f8497f285b3b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e1242769d41c29f5814d6317f8497f285b3b15", "html_url": "https://github.com/rust-lang/rust/commit/e4e1242769d41c29f5814d6317f8497f285b3b15"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "cf9dde9ef60ea13909f8c6c678efde1cbe7740d5", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c01f6e14912edc35296aa4b7558a0b36790561b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c01f6e14912edc35296aa4b7558a0b36790561b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=0c01f6e14912edc35296aa4b7558a0b36790561b", "patch": "@@ -466,7 +466,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n             let ref_ty = monomorphize::apply_param_substs(tcx,\n                                                           param_substs,\n                                                           &ref_ty);\n-            let llptrty = type_of::type_of_fn_from_ty(ccx, ref_ty).ptr_to();\n+            let llptrty = type_of::type_of(ccx, ref_ty);\n             if llptrty != common::val_ty(val) {\n                 let val = consts::ptrcast(val, llptrty);\n                 return Datum::new(val, ref_ty, Rvalue::new(ByValue));\n@@ -513,8 +513,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n     // This can occur on either a crate-local or crate-external\n     // reference. It also occurs when testing libcore and in some\n     // other weird situations. Annoying.\n-    let llty = type_of::type_of_fn_from_ty(ccx, fn_type);\n-    let llptrty = llty.ptr_to();\n+    let llptrty = type_of::type_of(ccx, fn_type);\n     if common::val_ty(val) != llptrty {\n         debug!(\"trans_fn_ref_with_substs(): casting pointer!\");\n         val = consts::ptrcast(val, llptrty);"}, {"sha": "4b18ff05b188e69094fce5bfcb4e77f266acf248", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c01f6e14912edc35296aa4b7558a0b36790561b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c01f6e14912edc35296aa4b7558a0b36790561b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=0c01f6e14912edc35296aa4b7558a0b36790561b", "patch": "@@ -341,12 +341,11 @@ fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Replace the self type (&Self or Box<Self>) with an opaque pointer.\n     let mptr = Load(bcx, GEPi(bcx, llvtable, &[vtable_index + VTABLE_OFFSET]));\n-    let llcallee_ty = type_of_fn_from_ty(ccx, opaque_fn_ty);\n \n     Callee {\n         bcx: bcx,\n         data: TraitItem(MethodData {\n-            llfn: PointerCast(bcx, mptr, llcallee_ty.ptr_to()),\n+            llfn: PointerCast(bcx, mptr, type_of(ccx, opaque_fn_ty)),\n             llself: PointerCast(bcx, llself, Type::i8p(ccx)),\n         }),\n         ty: opaque_fn_ty"}, {"sha": "8b4ed9b87980d49a5bd89ec4d1d94162458bb274", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0c01f6e14912edc35296aa4b7558a0b36790561b/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c01f6e14912edc35296aa4b7558a0b36790561b/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=0c01f6e14912edc35296aa4b7558a0b36790561b", "patch": "@@ -150,26 +150,6 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     Type::func(&atys[..], &lloutputtype)\n }\n \n-// Given a function type and a count of ty params, construct an llvm type\n-pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>) -> Type {\n-    match fty.sty {\n-        ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n-            // FIXME(#19925) once fn item types are\n-            // zero-sized, we'll need to do something here\n-            if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n-                let sig = cx.tcx().erase_late_bound_regions(&f.sig);\n-                let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n-                type_of_rust_fn(cx, None, &sig, f.abi)\n-            } else {\n-                foreign::lltype_for_foreign_fn(cx, fty)\n-            }\n-        }\n-        _ => {\n-            cx.sess().bug(\"type_of_fn_from_ty given non-closure, non-bare-fn\")\n-        }\n-    }\n-}\n-\n // A \"sizing type\" is an LLVM type, the size and alignment of which are\n // guaranteed to be equivalent to what you would get out of `type_of()`. It's\n // useful because:\n@@ -415,8 +395,16 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TySlice(ty) => in_memory_type_of(cx, ty),\n       ty::TyStr | ty::TyTrait(..) => Type::i8(cx),\n \n-      ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n-          type_of_fn_from_ty(cx, t).ptr_to()\n+      ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n+        // FIXME(#19925) once fn item types are\n+        // zero-sized, we'll need to do something here\n+        if f.abi == Abi::Rust || f.abi == Abi::RustCall {\n+            let sig = cx.tcx().erase_late_bound_regions(&f.sig);\n+            let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+            type_of_rust_fn(cx, None, &sig, f.abi).ptr_to()\n+        } else {\n+            foreign::lltype_for_foreign_fn(cx, t).ptr_to()\n+        }\n       }\n       ty::TyTuple(ref tys) if tys.is_empty() => Type::nil(cx),\n       ty::TyTuple(..) => {"}]}