{"sha": "ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNGZhZTQ1YWNiZWZjNzM1N2U3YjIwODA1ZTEwYTZiNGM1Y2E2ZmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-30T14:32:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-30T14:32:04Z"}, "message": "Merge #8262\n\n8262: internal: revive google_cpu_profile infra r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "93f7414da24ce5a14090e1c6e293a9097d8ff01a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f7414da24ce5a14090e1c6e293a9097d8ff01a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYzZkCRBK7hj4Ov3rIwAAdHIIADpZYXGoz6Sie/n3keX3IVCl\nDBeDIn4seajMhArLAIzIShnk0FA/2MF+LG8S/w5NHWvZyVPcm8NdN5sKTP+i/Hto\nTTniNoqKewzKo4XpBiXoVFPO5Dw05RhWpbzanMa6ED+a2sZ+xkMzF5rGLWUXDw1M\nVFWR8z2FA9B5+cMEzHo0+o6uCml5ABSJHKmczV+/A02CJabs8z1NmInZr9MqGRcT\nae8eYf0H/VbqC7u/fx/Dkl5fc3ARfSmDz+3Go52Qd/DaC2ZUsByZZQIJE5gkWsyl\nmX6Aj8jeu3eGqDrRGUWgCW60xvOMo5kwEmVJlGpmr5vCrU/2LiE+qSS6R9nXnss=\n=j1J2\n-----END PGP SIGNATURE-----\n", "payload": "tree 93f7414da24ce5a14090e1c6e293a9097d8ff01a\nparent 0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30\nparent fb00b92dde25af239c53192365b79682c7f6666d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617114724 +0000\ncommitter GitHub <noreply@github.com> 1617114724 +0000\n\nMerge #8262\n\n8262: internal: revive google_cpu_profile infra r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "html_url": "https://github.com/rust-lang/rust/commit/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30", "html_url": "https://github.com/rust-lang/rust/commit/0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30"}, {"sha": "fb00b92dde25af239c53192365b79682c7f6666d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb00b92dde25af239c53192365b79682c7f6666d", "html_url": "https://github.com/rust-lang/rust/commit/fb00b92dde25af239c53192365b79682c7f6666d"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "cae6caeaa669c034f69725d0e5847da6a773262a", "filename": "crates/profile/src/google_cpu_profiler.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/crates%2Fprofile%2Fsrc%2Fgoogle_cpu_profiler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/crates%2Fprofile%2Fsrc%2Fgoogle_cpu_profiler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fgoogle_cpu_profiler.rs?ref=ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "patch": "@@ -14,26 +14,31 @@ extern \"C\" {\n     fn ProfilerStop();\n }\n \n-static PROFILER_STATE: AtomicUsize = AtomicUsize::new(OFF);\n const OFF: usize = 0;\n const ON: usize = 1;\n const PENDING: usize = 2;\n \n-pub fn start(path: &Path) {\n-    if PROFILER_STATE.compare_and_swap(OFF, PENDING, Ordering::SeqCst) != OFF {\n+fn transition(current: usize, new: usize) -> bool {\n+    static STATE: AtomicUsize = AtomicUsize::new(OFF);\n+\n+    STATE.compare_exchange(current, new, Ordering::SeqCst, Ordering::SeqCst).is_ok()\n+}\n+\n+pub(crate) fn start(path: &Path) {\n+    if !transition(OFF, PENDING) {\n         panic!(\"profiler already started\");\n     }\n     let path = CString::new(path.display().to_string()).unwrap();\n     if unsafe { ProfilerStart(path.as_ptr()) } == 0 {\n         panic!(\"profiler failed to start\")\n     }\n-    assert!(PROFILER_STATE.compare_and_swap(PENDING, ON, Ordering::SeqCst) == PENDING);\n+    assert!(transition(PENDING, ON));\n }\n \n-pub fn stop() {\n-    if PROFILER_STATE.compare_and_swap(ON, PENDING, Ordering::SeqCst) != ON {\n+pub(crate) fn stop() {\n+    if !transition(ON, PENDING) {\n         panic!(\"profiler is not started\")\n     }\n     unsafe { ProfilerStop() };\n-    assert!(PROFILER_STATE.compare_and_swap(PENDING, OFF, Ordering::SeqCst) == PENDING);\n+    assert!(transition(PENDING, OFF));\n }"}, {"sha": "a31fb8f4393771894545bcacf3331c798a0ad5d9", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "patch": "@@ -52,16 +52,25 @@ impl Drop for Scope {\n /// Usage:\n /// 1. Install gpref_tools (https://github.com/gperftools/gperftools), probably packaged with your Linux distro.\n /// 2. Build with `cpu_profiler` feature.\n-/// 3. Tun the code, the *raw* output would be in the `./out.profile` file.\n+/// 3. Run the code, the *raw* output would be in the `./out.profile` file.\n /// 4. Install pprof for visualization (https://github.com/google/pprof).\n /// 5. Bump sampling frequency to once per ms: `export CPUPROFILE_FREQUENCY=1000`\n /// 6. Use something like `pprof -svg target/release/rust-analyzer ./out.profile` to see the results.\n ///\n /// For example, here's how I run profiling on NixOS:\n ///\n /// ```bash\n-/// $ nix-shell -p gperftools --run \\\n-///     'cargo run --release -p rust-analyzer -- parse < ~/projects/rustbench/parser.rs > /dev/null'\n+/// $ bat -p shell.nix\n+/// with import <nixpkgs> {};\n+/// mkShell {\n+///   buildInputs = [ gperftools ];\n+///   shellHook = ''\n+///     export LD_LIBRARY_PATH=\"${gperftools}/lib:\"\n+///   '';\n+/// }\n+/// $ set -x CPUPROFILE_FREQUENCY 1000\n+/// $ nix-shell --run 'cargo test --release --package rust-analyzer --lib -- benchmarks::benchmark_integrated_highlighting --exact --nocapture'\n+/// $ pprof -svg target/release/deps/rust_analyzer-8739592dc93d63cb crates/rust-analyzer/out.profile > profile.svg\n /// ```\n ///\n /// See this diff for how to profile completions:\n@@ -81,7 +90,9 @@ pub fn cpu_span() -> CpuSpan {\n \n     #[cfg(not(feature = \"cpu_profiler\"))]\n     {\n-        eprintln!(\"cpu_profiler feature is disabled\")\n+        eprintln!(\n+            r#\"cpu profiling is disabled, uncomment `default = [ \"cpu_profiler\" ]` in Cargo.toml to enable.\"#\n+        )\n     }\n \n     CpuSpan { _private: () }\n@@ -91,7 +102,23 @@ impl Drop for CpuSpan {\n     fn drop(&mut self) {\n         #[cfg(feature = \"cpu_profiler\")]\n         {\n-            google_cpu_profiler::stop()\n+            google_cpu_profiler::stop();\n+            let profile_data = std::env::current_dir().unwrap().join(\"out.profile\");\n+            eprintln!(\"Profile data saved to:\\n\\n    {}\\n\", profile_data.display());\n+            let mut cmd = std::process::Command::new(\"pprof\");\n+            cmd.arg(\"-svg\").arg(std::env::current_exe().unwrap()).arg(&profile_data);\n+            let out = cmd.output();\n+\n+            match out {\n+                Ok(out) if out.status.success() => {\n+                    let svg = profile_data.with_extension(\"svg\");\n+                    std::fs::write(&svg, &out.stdout).unwrap();\n+                    eprintln!(\"Profile rendered to:\\n\\n    {}\\n\", svg.display());\n+                }\n+                _ => {\n+                    eprintln!(\"Failed to run:\\n\\n   {:?}\\n\", cmd);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "bf569b40bb6098de464d8c77ab7bdc0419f40edb", "filename": "crates/rust-analyzer/src/benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs?ref=ab4fae45acbefc7357e7b20805e10a6b4c5ca6fe", "patch": "@@ -51,6 +51,7 @@ fn benchmark_integrated_highlighting() {\n     }\n \n     profile::init_from(\"*>100\");\n+    // let _s = profile::heartbeat_span();\n \n     {\n         let _it = stdx::timeit(\"change\");\n@@ -63,6 +64,7 @@ fn benchmark_integrated_highlighting() {\n \n     {\n         let _it = stdx::timeit(\"after change\");\n+        let _span = profile::cpu_span();\n         let analysis = host.analysis();\n         analysis.highlight_as_html(file_id, false).unwrap();\n     }"}]}