{"sha": "3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYmQxN2ZjYzZjNWM4MTZiNTljMTgxNjAwOGIwZDRhZTNlZjI5ODI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-24T23:15:41Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-27T17:46:41Z"}, "message": "Remove `rustc_allow_const_fn_ptr`\n\nThis was a hack to work around the lack of an escape hatch for the \"min\n`const fn`\" checks in const-stable functions. Now that we have co-opted\n`allow_internal_unstable` for this purpose, we no longer need the\nbespoke attribute.", "tree": {"sha": "27f98641c342f8579291774d4fc815d8dece95e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f98641c342f8579291774d4fc815d8dece95e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "html_url": "https://github.com/rust-lang/rust/commit/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff143191c62bc7cfa17da99dac59a871f39a462", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff143191c62bc7cfa17da99dac59a871f39a462", "html_url": "https://github.com/rust-lang/rust/commit/1ff143191c62bc7cfa17da99dac59a871f39a462"}], "stats": {"total": 50, "additions": 8, "deletions": 42}, "files": [{"sha": "94e2a40e1fe368ca2da564cb0d568d6d711426e5", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "patch": "@@ -145,8 +145,6 @@ pub struct ConstStability {\n     pub feature: Symbol,\n     /// whether the function has a `#[rustc_promotable]` attribute\n     pub promotable: bool,\n-    /// whether the function has a `#[rustc_allow_const_fn_ptr]` attribute\n-    pub allow_const_fn_ptr: bool,\n }\n \n /// The available stability levels.\n@@ -190,7 +188,6 @@ where\n     let mut stab: Option<Stability> = None;\n     let mut const_stab: Option<ConstStability> = None;\n     let mut promotable = false;\n-    let mut allow_const_fn_ptr = false;\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -200,7 +197,6 @@ where\n             sym::unstable,\n             sym::stable,\n             sym::rustc_promotable,\n-            sym::rustc_allow_const_fn_ptr,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -215,9 +211,6 @@ where\n         if attr.has_name(sym::rustc_promotable) {\n             promotable = true;\n         }\n-        if attr.has_name(sym::rustc_allow_const_fn_ptr) {\n-            allow_const_fn_ptr = true;\n-        }\n         // attributes with data\n         else if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n@@ -360,12 +353,8 @@ where\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature });\n                             } else {\n-                                const_stab = Some(ConstStability {\n-                                    level,\n-                                    feature,\n-                                    promotable: false,\n-                                    allow_const_fn_ptr: false,\n-                                });\n+                                const_stab =\n+                                    Some(ConstStability { level, feature, promotable: false });\n                             }\n                         }\n                         (None, _, _) => {\n@@ -440,12 +429,8 @@ where\n                             if sym::stable == meta_name {\n                                 stab = Some(Stability { level, feature });\n                             } else {\n-                                const_stab = Some(ConstStability {\n-                                    level,\n-                                    feature,\n-                                    promotable: false,\n-                                    allow_const_fn_ptr: false,\n-                                });\n+                                const_stab =\n+                                    Some(ConstStability { level, feature, promotable: false });\n                             }\n                         }\n                         (None, _) => {\n@@ -464,18 +449,16 @@ where\n     }\n \n     // Merge the const-unstable info into the stability info\n-    if promotable || allow_const_fn_ptr {\n+    if promotable {\n         if let Some(ref mut stab) = const_stab {\n             stab.promotable = promotable;\n-            stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n             struct_span_err!(\n                 diagnostic,\n                 item_sp,\n                 E0717,\n-                \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n-                      must be paired with either a rustc_const_unstable or a rustc_const_stable \\\n-                      attribute\"\n+                \"`rustc_promotable` attribute must be paired with either a `rustc_const_unstable` \\\n+                or a `rustc_const_stable` attribute\"\n             )\n             .emit();\n         }"}, {"sha": "22c1ca2f289d3b23e33c25edf3e511bf612b2a37", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "patch": "@@ -464,7 +464,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_allow_const_fn_ptr, AssumedUsed, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_args_required_const, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n \n     // =========================================================================="}, {"sha": "d5b99ea4d288dc66a65bfe4b9fc304ade09eef5a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "patch": "@@ -457,10 +457,6 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is promotable: `{}`\", tcx.def_path_str(key) }\n         }\n \n-        query const_fn_is_allowed_fn_ptr(key: DefId) -> bool {\n-            desc { |tcx| \"checking if const fn allows `fn()` types: `{}`\", tcx.def_path_str(key) }\n-        }\n-\n         /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(key: DefId) -> bool {\n             desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }"}, {"sha": "b20d89b6e835c1bd0f1462d9275787f049eadb67", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "patch": "@@ -151,17 +151,11 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         }\n }\n \n-fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    is_const_fn(tcx, def_id)\n-        && tcx.lookup_const_stability(def_id).map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n-}\n-\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         is_const_fn_raw,\n         is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),\n         is_promotable_const_fn,\n-        const_fn_is_allowed_fn_ptr,\n         ..*providers\n     };\n }"}, {"sha": "4234aef33590652b17bf282905a5e774eedc165a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "patch": "@@ -885,7 +885,6 @@ symbols! {\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n-        rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,"}, {"sha": "ba3fb35caaf9d2a3b8743cc6550b011f711b15bd", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=3cbd17fcc6c5c816b59c1816008b0d4ae3ef2982", "patch": "@@ -129,14 +129,9 @@ impl RawWakerVTable {\n     /// associated task.\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    // `rustc_allow_const_fn_ptr` is a hack that should not be used anywhere else\n-    // without first consulting with T-Lang.\n-    //\n-    // FIXME: remove whenever we have a stable way to accept fn pointers from const fn\n-    // (see https://github.com/rust-rfcs/const-eval/issues/19#issuecomment-472799062)\n-    #[rustc_allow_const_fn_ptr]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_fn_ptr_basics))]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_ptr)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}]}