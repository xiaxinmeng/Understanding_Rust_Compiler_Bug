{"sha": "5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "node_id": "C_kwDOAAsO6NoAKDUzNzQ2ODhlMWQ4Y2JjZmY3ZDFkMTRiYjM0ZTM4ZmU2ZmU3YzIzM2U", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-11T21:20:27Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-11T21:20:39Z"}, "message": "add tests for async await", "tree": {"sha": "54e9111663c75c022f10d63cc9b0f6603a15f90c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e9111663c75c022f10d63cc9b0f6603a15f90c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmLMlCcACgkQPNdIZH7v\nY1lwXw//T9Sb8UBbhmYjOsVUGb6Y+/SyvdiLNAbd5IOr5Y+Y6+byUVVJPQNBbGJj\nr9Yk2CNuDgOhxP2SDLwOTb+KWhJTBBa1YXmoxGwN4TU3RpD+b2L2u/MkNFDgdk/s\nVmbr+4mPTKOcvGYAUUhDqh45K8XAMZ8/otls6VCR+7qVKj7Pd31DK9l5BvnYNjrC\nV6SAmBHMgOST+EDjmhzTNJzVv/HMp7Ow5lBBu7oSo2v6rr9OiQXVMjzSC/rNK/lG\n8Jclo9LW7aaLEcQCYlBpP0dinpPIdzPF2WDVTEvFZHSw8E8GCy/DMfBhBfz8W1jd\nZlp+F3MgRGctN1X6EBUxN+XbKcHOHP8KynGMeJ3sLIbE69pMfXCxZd/dAT1ER+eh\nqBP6WI565lkwNw0KJmjf2smCqrFigbbDdLTccTbNCfFHmR74S8ud7SDKVy/tAWvq\nSP04NyWNXmIt9vsnjsEt/ROP6nRfaHt+5Wn3QckB3gO2ZouCiHw9SnGzkZAu7CBP\nCqffFU5J44tbbeCSji4MgMbEi1b88KJeI20ORQrRDWSd2QpytS0AWlzmzcfAT+VI\nrSf2UHK0YCSrS1hjb7TiUstkhZnsLkToz2dZSA2df8dfEB8Om2M6ZrVd0JbtNcaZ\nmBG2JvvSzADf6eNRT80/Y0FkOASKnCkqIDaUizFSP3b2qXJ29R8=\n=NgcZ\n-----END PGP SIGNATURE-----", "payload": "tree 54e9111663c75c022f10d63cc9b0f6603a15f90c\nparent 8e4a9710841a21f77856ae1d8207015c220a1873\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1657574427 +0200\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1657574439 +0200\n\nadd tests for async await\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "html_url": "https://github.com/rust-lang/rust/commit/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4a9710841a21f77856ae1d8207015c220a1873", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4a9710841a21f77856ae1d8207015c220a1873", "html_url": "https://github.com/rust-lang/rust/commit/8e4a9710841a21f77856ae1d8207015c220a1873"}], "stats": {"total": 177, "additions": 162, "deletions": 15}, "files": [{"sha": "ed874ae829b46df43c0632aa20e3f786dcd23583", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -1296,7 +1296,6 @@ pub struct Stmt<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum StmtKind<'hir> {\n     /// A local (`let`) binding.\n-    /// FIXME: bundle the last two components into another `struct`\n     Local(&'hir Local<'hir>),\n \n     /// An item binding."}, {"sha": "b5d9769c578a5cb520dd19d1650f9474012ce70f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -1058,9 +1058,9 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {\n     visitor.visit_id(statement.hir_id);\n-    match &statement.kind {\n+    match statement.kind {\n         StmtKind::Local(ref local) => visitor.visit_local(local),\n-        StmtKind::Item(item) => visitor.visit_nested_item(*item),\n+        StmtKind::Item(item) => visitor.visit_nested_item(item),\n         StmtKind::Expr(ref expression) | StmtKind::Semi(ref expression) => {\n             visitor.visit_expr(expression)\n         }"}, {"sha": "4d29fc469462c43b01434e1ab086e04657be794b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -1,13 +1,12 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n-use hir::LocalSource;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local};\n+use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};"}, {"sha": "dccaa61ed89d45faabdd89b666532a55b6d1b394", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> Cx<'tcx> {\n             .filter_map(|(index, stmt)| {\n                 let hir_id = stmt.hir_id;\n                 let opt_dxn_ext = self.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-                match &stmt.kind {\n+                match stmt.kind {\n                     hir::StmtKind::Expr(ref expr) | hir::StmtKind::Semi(ref expr) => {\n                         let stmt = Stmt {\n                             kind: StmtKind::Expr {\n@@ -66,7 +66,7 @@ impl<'tcx> Cx<'tcx> {\n                         // ignore for purposes of the MIR\n                         None\n                     }\n-                    hir::StmtKind::Local(local) => {\n+                    hir::StmtKind::Local(ref local) => {\n                         let remainder_scope = region::Scope {\n                             id: block_id,\n                             data: region::ScopeData::Remainder(region::FirstStatementIndex::new("}, {"sha": "60ee2233ed9c0f7311ebe20282e308faf7827da6", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -1215,12 +1215,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.check_pat_top(&decl.pat, decl_ty, ty_span, origin_expr);\n         let pat_ty = self.node_ty(decl.pat.hir_id);\n         self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, decl_ty, pat_ty);\n-    }\n \n-    /// Type check a `let` statement.\n-    pub fn check_decl_local(&self, local: &'tcx hir::Local<'tcx>) {\n-        self.check_decl(local.into());\n-        if let Some(blk) = local.els {\n+        if let Some(blk) = decl.els {\n             let previous_diverges = self.diverges.get();\n             let else_ty = self.check_block_with_expected(blk, NoExpectation);\n             let cause = self.cause(blk.span, ObligationCauseCode::LetElse);\n@@ -1233,6 +1229,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Type check a `let` statement.\n+    pub fn check_decl_local(&self, local: &'tcx hir::Local<'tcx>) {\n+        self.check_decl(local.into());\n+    }\n+\n     pub fn check_stmt(&self, stmt: &'tcx hir::Stmt<'tcx>, is_last: bool) {\n         // Don't do all the complex logic below for `DeclItem`.\n         match stmt.kind {"}, {"sha": "8f34a970f6ff7694ea9eb69468d0392e0e21f934", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -16,19 +16,20 @@ pub(super) struct Declaration<'a> {\n     pub ty: Option<&'a hir::Ty<'a>>,\n     pub span: Span,\n     pub init: Option<&'a hir::Expr<'a>>,\n+    pub els: Option<&'a hir::Block<'a>>,\n }\n \n impl<'a> From<&'a hir::Local<'a>> for Declaration<'a> {\n     fn from(local: &'a hir::Local<'a>) -> Self {\n-        let hir::Local { hir_id, pat, ty, span, init, .. } = *local;\n-        Declaration { hir_id, pat, ty, span, init }\n+        let hir::Local { hir_id, pat, ty, span, init, els, source: _ } = *local;\n+        Declaration { hir_id, pat, ty, span, init, els }\n     }\n }\n \n impl<'a> From<&'a hir::Let<'a>> for Declaration<'a> {\n     fn from(let_expr: &'a hir::Let<'a>) -> Self {\n         let hir::Let { hir_id, pat, ty, span, init } = *let_expr;\n-        Declaration { hir_id, pat, ty, span, init: Some(init) }\n+        Declaration { hir_id, pat, ty, span, init: Some(init), els: None }\n     }\n }\n "}, {"sha": "7ea07ae9add1bd7c66430df957460f1235de7dd7", "filename": "src/test/ui/async-await/async-await-let-else.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -0,0 +1,53 @@\n+// edition:2021\n+#![feature(let_else)]\n+use std::rc::Rc;\n+\n+async fn foo(x: Option<bool>) {\n+    let Some(_) = x else {\n+        let r = Rc::new(());\n+        bar().await\n+    };\n+}\n+\n+async fn bar() -> ! {\n+    panic!()\n+}\n+\n+fn is_send<T: Send>(_: T) {}\n+\n+async fn foo2(x: Option<bool>) {\n+    let Some(_) = x else {\n+        bar2(Rc::new(())).await\n+    };\n+}\n+\n+async fn bar2<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+async fn foo3(x: Option<bool>) {\n+    let Some(_) = x else {\n+        (Rc::new(()), bar().await);\n+        return;\n+    };\n+}\n+\n+async fn foo4(x: Option<bool>) {\n+    let Some(_) = x else {\n+        let r = Rc::new(());\n+        bar().await;\n+        println!(\"{:?}\", r);\n+        return;\n+    };\n+}\n+\n+fn main() {\n+    is_send(foo(Some(true)));\n+    //~^ ERROR future cannot be sent between threads safely\n+    is_send(foo2(Some(true)));\n+    //~^ ERROR future cannot be sent between threads safely\n+    is_send(foo3(Some(true)));\n+    //~^ ERROR future cannot be sent between threads safely\n+    is_send(foo4(Some(true)));\n+    //~^ ERROR future cannot be sent between threads safely\n+}"}, {"sha": "4d23e27c426b280a0ca768942c3140c3a3345ae5", "filename": "src/test/ui/async-await/async-await-let-else.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.stderr?ref=5374688e1d8cbcff7d1d14bb34e38fe6fe7c233e", "patch": "@@ -0,0 +1,94 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:45:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:8:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:47:13\n+   |\n+LL |     is_send(foo2(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:20:26\n+   |\n+LL |         bar2(Rc::new(())).await\n+   |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |              |\n+   |              has type `Rc<()>` which is not `Send`\n+LL |     };\n+   |      - `Rc::new(())` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:49:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:30:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |          |\n+   |          has type `Rc<()>` which is not `Send`\n+note: `Rc::new(())` is later dropped here\n+  --> $DIR/async-await-let-else.rs:30:35\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |                                   ^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:51:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:38:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+"}]}