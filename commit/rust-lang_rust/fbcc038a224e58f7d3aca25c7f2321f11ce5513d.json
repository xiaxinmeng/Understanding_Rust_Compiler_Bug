{"sha": "fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "node_id": "C_kwDOAAsO6NoAKGZiY2MwMzhhMjI0ZTU4ZjdkM2FjYTI1YzdmMjMyMWYxMWNlNTUxM2Q", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-08-31T18:17:32Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-08-31T18:17:32Z"}, "message": "safe transmute: use `to_valtree` to destructure const `Assume`\n\nref: https://github.com/rust-lang/rust/pull/100726#discussion_r954813220", "tree": {"sha": "446e67c9293a5fb7ce440e20600f3a4bbd85b97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/446e67c9293a5fb7ce440e20600f3a4bbd85b97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "html_url": "https://github.com/rust-lang/rust/commit/fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbcc038a224e58f7d3aca25c7f2321f11ce5513d/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d844fe6293cea3d857a0057b636b59434477d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d844fe6293cea3d857a0057b636b59434477d87", "html_url": "https://github.com/rust-lang/rust/commit/1d844fe6293cea3d857a0057b636b59434477d87"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "2a1a81315657c13567d115ee94ae9f22d3d2dc8a", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fbcc038a224e58f7d3aca25c7f2321f11ce5513d/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcc038a224e58f7d3aca25c7f2321f11ce5513d/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "patch": "@@ -123,7 +123,7 @@ mod rustc {\n             param_env: ParamEnv<'tcx>,\n             c: Const<'tcx>,\n         ) -> Self {\n-            use rustc_middle::ty::DestructuredConst;\n+            use rustc_middle::ty::ScalarInt;\n             use rustc_middle::ty::TypeVisitable;\n             use rustc_span::symbol::sym;\n \n@@ -142,9 +142,8 @@ mod rustc {\n                 LangItem::TransmuteOpts.name(),\n             );\n \n-            let DestructuredConst { variant, fields } = tcx.destructure_const(c);\n-            let variant_idx = variant.expect(\"The given `Const` must be an ADT.\");\n-            let variant = adt_def.variant(variant_idx);\n+            let variant = adt_def.non_enum_variant();\n+            let fields = c.to_valtree().unwrap_branch();\n \n             let get_field = |name| {\n                 let (field_idx, _) = variant\n@@ -153,9 +152,7 @@ mod rustc {\n                     .enumerate()\n                     .find(|(_, field_def)| name == field_def.name)\n                     .expect(&format!(\"There were no fields named `{name}`.\"));\n-                fields[field_idx].try_eval_bool(tcx, param_env).expect(&format!(\n-                    \"The field named `{name}` lang item could not be evaluated to a bool.\"\n-                ))\n+                fields[field_idx].unwrap_leaf() == ScalarInt::TRUE\n             };\n \n             Self {"}]}