{"sha": "5ca3b00ce05057c753f41f5b691df13efef95233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTNiMDBjZTA1MDU3Yzc1M2Y0MWY1YjY5MWRmMTNlZmVmOTUyMzM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-02-14T04:10:44Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-02-14T04:26:57Z"}, "message": "Add a tracking issue", "tree": {"sha": "4d9951fc618826294279d31e94d2354f7b5f0e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9951fc618826294279d31e94d2354f7b5f0e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca3b00ce05057c753f41f5b691df13efef95233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3b00ce05057c753f41f5b691df13efef95233", "html_url": "https://github.com/rust-lang/rust/commit/5ca3b00ce05057c753f41f5b691df13efef95233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3b00ce05057c753f41f5b691df13efef95233/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "034de8da7d1c290ac1f4485373f3ee91f624566d", "url": "https://api.github.com/repos/rust-lang/rust/commits/034de8da7d1c290ac1f4485373f3ee91f624566d", "html_url": "https://github.com/rust-lang/rust/commit/034de8da7d1c290ac1f4485373f3ee91f624566d"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3d3759c2d6ffa94640ba1256c54c35ca81397249", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ca3b00ce05057c753f41f5b691df13efef95233/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca3b00ce05057c753f41f5b691df13efef95233/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5ca3b00ce05057c753f41f5b691df13efef95233", "patch": "@@ -530,7 +530,7 @@ pub trait Read {\n     ///\n     /// The default implementation simply passes the first nonempty buffer to\n     /// `read`.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n+    #[unstable(feature = \"iovec\", issue = \"58452\")]\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n         match bufs.iter_mut().find(|b| !b.is_empty()) {\n             Some(buf) => self.read(buf),\n@@ -890,11 +890,11 @@ pub trait Read {\n /// It is semantically a wrapper around an `&mut [u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n #[repr(transparent)]\n pub struct IoVecMut<'a>(sys::io::IoVecMut<'a>);\n \n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> fmt::Debug for IoVecMut<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n@@ -907,14 +907,14 @@ impl<'a> IoVecMut<'a> {\n     /// # Panics\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n+    #[unstable(feature = \"iovec\", issue = \"58452\")]\n     #[inline]\n     pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n         IoVecMut(sys::io::IoVecMut::new(buf))\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> Deref for IoVecMut<'a> {\n     type Target = [u8];\n \n@@ -924,7 +924,7 @@ impl<'a> Deref for IoVecMut<'a> {\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> DerefMut for IoVecMut<'a> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut [u8] {\n@@ -937,11 +937,11 @@ impl<'a> DerefMut for IoVecMut<'a> {\n /// It is semantically a wrapper around an `&[u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n #[repr(transparent)]\n pub struct IoVec<'a>(sys::io::IoVec<'a>);\n \n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> fmt::Debug for IoVec<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n@@ -954,14 +954,14 @@ impl<'a> IoVec<'a> {\n     /// # Panics\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n+    #[unstable(feature = \"iovec\", issue = \"58452\")]\n     #[inline]\n     pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n         IoVec(sys::io::IoVec::new(buf))\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"58452\")]\n impl<'a> Deref for IoVec<'a> {\n     type Target = [u8];\n \n@@ -1109,7 +1109,7 @@ pub trait Write {\n     ///\n     /// The default implementation simply passes the first nonempty buffer to\n     /// `write`.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n+    #[unstable(feature = \"iovec\", issue = \"58452\")]\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> Result<usize> {\n         match bufs.iter().find(|b| !b.is_empty()) {\n             Some(buf) => self.write(buf),"}]}