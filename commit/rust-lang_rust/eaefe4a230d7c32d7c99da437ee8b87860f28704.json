{"sha": "eaefe4a230d7c32d7c99da437ee8b87860f28704", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZWZlNGEyMzBkN2MzMmQ3Yzk5ZGE0MzdlZThiODc4NjBmMjg3MDQ=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2021-01-28T16:01:36Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2021-02-06T10:03:48Z"}, "message": "path trimming: ignore type aliases", "tree": {"sha": "72e1de33df6a231b3fe25c1aca7c137fa4a0d1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e1de33df6a231b3fe25c1aca7c137fa4a0d1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaefe4a230d7c32d7c99da437ee8b87860f28704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaefe4a230d7c32d7c99da437ee8b87860f28704", "html_url": "https://github.com/rust-lang/rust/commit/eaefe4a230d7c32d7c99da437ee8b87860f28704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaefe4a230d7c32d7c99da437ee8b87860f28704/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfba499271ba53190a1d3647ff8f7202ec9ed6f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfba499271ba53190a1d3647ff8f7202ec9ed6f5", "html_url": "https://github.com/rust-lang/rust/commit/cfba499271ba53190a1d3647ff8f7202ec9ed6f5"}], "stats": {"total": 383, "additions": 192, "deletions": 191}, "files": [{"sha": "a8d9995bd0b2f6d0c96675835f1cd3ee3d312e01", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2143,6 +2143,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n \n             match child.res {\n                 def::Res::Def(DefKind::AssocTy, _) => {}\n+                def::Res::Def(DefKind::TyAlias, _) => {}\n                 def::Res::Def(defkind, def_id) => {\n                     if let Some(ns) = defkind.ns() {\n                         collect_fn(&child.ident, ns, def_id);"}, {"sha": "1b292cdd796e5a93250b3040e95f9691d1522ba9", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `try_sum` before EarlyOtherwiseBranch\n + // MIR for `try_sum` after SimplifyBranches-final\n   \n-  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> std::result::Result<ViewportPercentageLength, ()> {\n+  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n       debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n       debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:5: 19:10\n       let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:20:6: 20:42"}, {"sha": "d20ee784591033fc9471dc6083c0aa4b2a4e033c", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `try_sum` before EarlyOtherwiseBranch\n + // MIR for `try_sum` after EarlyOtherwiseBranch\n   \n-  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> std::result::Result<ViewportPercentageLength, ()> {\n+  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n       debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n       debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:19:5: 19:10\n       let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:20:6: 20:42"}, {"sha": "caa02abf019365dd93afd67ed335ae0ed63b03be", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `float_to_exponential_common` before ConstProp\n + // MIR for `float_to_exponential_common` after ConstProp\n   \n-  fn float_to_exponential_common(_1: &mut Formatter, _2: &T, _3: bool) -> std::result::Result<(), std::fmt::Error> {\n+  fn float_to_exponential_common(_1: &mut Formatter, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {\n       debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:11:35: 11:38\n       debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:11:60: 11:63\n       debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:11:69: 11:74"}, {"sha": "e4916a56bea9ba58678fc4e15b84a8862670f2ca", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -128,7 +128,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -158,7 +158,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e4916a56bea9ba58678fc4e15b84a8862670f2ca", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -128,7 +128,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -158,7 +158,7 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "b5dd416ddb171de5f4b9cad2bab2b349a03b6755", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -203,7 +203,7 @@\n           StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _45 = _38;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -252,7 +252,7 @@\n           StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _49 = _41;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "b5dd416ddb171de5f4b9cad2bab2b349a03b6755", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -203,7 +203,7 @@\n           StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _45 = _38;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -252,7 +252,7 @@\n           StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _49 = _41;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "40c18fb7282ecda2cffebe159df1b6d9d663a736", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `id_result` before SimplifyArmIdentity\n + // MIR for `id_result` after SimplifyArmIdentity\n   \n-  fn id_result(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+  fn id_result(_1: Result<u8, i32>) -> Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:16:14: 16:15\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:16:37: 16:52\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:18:9: 18:14"}, {"sha": "596dbabead0bf62b0e78a4e9751f1f65175b7d42", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `id_result` before SimplifyBranchSame\n + // MIR for `id_result` after SimplifyBranchSame\n   \n-  fn id_result(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+  fn id_result(_1: Result<u8, i32>) -> Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:16:14: 16:15\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:16:37: 16:52\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:18:9: 18:14"}, {"sha": "ccb3b71817ff672b7ed8c7f6955f32765aa8c52f", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `id_try` before SimplifyArmIdentity\n + // MIR for `id_try` after SimplifyArmIdentity\n   \n-  fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+  fn id_try(_1: Result<u8, i32>) -> Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n       let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n@@ -26,7 +26,7 @@\n -                 debug t => _9;           // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n +                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n               }\n-              scope 8 (inlined <std::result::Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n+              scope 8 (inlined <Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n -                 debug v => _8;           // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -39,7 +39,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 (inlined <std::result::Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n+      scope 6 (inlined <Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n           debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n   "}, {"sha": "ec8ac30228e59bd34f12c6445e9fcbed34ac5327", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `id_try` before SimplifyBranchSame\n + // MIR for `id_try` after SimplifyBranchSame\n   \n-  fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n+  fn id_try(_1: Result<u8, i32>) -> Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n       let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n@@ -23,7 +23,7 @@\n               scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n               }\n-              scope 8 (inlined <std::result::Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n+              scope 8 (inlined <Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n               }\n@@ -34,7 +34,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 (inlined <std::result::Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n+      scope 6 (inlined <Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n           debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n   "}, {"sha": "b1bae447f9c655f0ad3439ebaa7afe28fe70c3ac", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `try_identity` before DestinationPropagation\n + // MIR for `try_identity` after DestinationPropagation\n   \n-  fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+  fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n       let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n       let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n@@ -23,7 +23,7 @@\n               scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n-              scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n+              scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n               }\n@@ -34,7 +34,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n+      scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n -         debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n +         debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n       }"}, {"sha": "df274852f68200b479297273f4a544e98fadcc7a", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `try_identity` before SimplifyArmIdentity\n + // MIR for `try_identity` after SimplifyArmIdentity\n   \n-  fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+  fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n       let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n       let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n@@ -26,7 +26,7 @@\n -                 debug t => _9;           // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n +                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n-              scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n+              scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n -                 debug v => _8;           // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n@@ -39,7 +39,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n+      scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n           debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n       }\n   "}, {"sha": "37274691fb476a654679045bbe78f76009c24cc8", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,6 +1,6 @@\n // MIR for `try_identity` after SimplifyBranchSame\n \n-fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n     let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n@@ -22,7 +22,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n             scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n             }\n-            scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n+            scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n                 let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n             }\n@@ -33,7 +33,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         scope 5 {\n         }\n     }\n-    scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n+    scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n         debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n     }\n "}, {"sha": "f8adcced4b30640bf544cf90583bdcaaa57aefa4", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,6 +1,6 @@\n // MIR for `try_identity` after SimplifyLocals\n \n-fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n+fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n     scope 1 {\n@@ -12,7 +12,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n             scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n             }\n-            scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n+            scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n             }\n         }\n@@ -22,7 +22,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         scope 5 {\n         }\n     }\n-    scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n+    scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n         debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n     }\n "}, {"sha": "6af254ae6fc7b797b72d4637b8c38b3badce0713", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.abort/abort.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.abort%2Fabort.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -97,10 +97,10 @@\n 26:9-26:23: @18[0]: _1 = move (_18.0: i32)\"><span class=\"annotation\">@17,18\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@17,18</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:8-28:10: @4[4]: _20 = ()\n-28:5-28:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _20)\n+28:5-28:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _20)\n 29:2-29:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>Ok(())</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"28:8-28:10: @4[4]: _20 = ()\n-28:5-28:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _20)\n+28:5-28:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _20)\n 29:2-29:2: @4.Return: return\">}<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "f51f534aad37523b8d4c79e387fc6d280cb7bd4a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.assert/assert.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.assert%2Fassert.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -93,10 +93,10 @@\n 17:9-17:23: @14[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@13,14\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@13,14</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:8-19:10: @4[4]: _15 = ()\n-19:5-19:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\n+19:5-19:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _15)\n 20:2-20:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>Ok(())</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"19:8-19:10: @4[4]: _15 = ()\n-19:5-19:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\n+19:5-19:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _15)\n 20:2-20:2: @4.Return: return\">}<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "bf49fed2dd6023ec9bdb0d1ebf39c477ff34e3ea", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -112,7 +112,7 @@\n 20:9-20:43: @1.Call: _8 = Arguments::new_v1(move _9, move _13) -&gt; [return: bb3, unwind: bb11]\n 20:9-20:43: @3.Call: _7 = _print(move _8) -&gt; [return: bb4, unwind: bb11]\n 20:9-20:43: @4[5]: _6 = const ()\n-21:16-21:22: @4[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@1,3,4,8,9\u298a</span>println!(\"Exiting with error...\");</span></span>\n+21:16-21:22: @4[7]: _0 = Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@1,3,4,8,9\u298a</span>println!(\"Exiting with error...\");</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:41: @1[6]: _21 = const main::promoted[1]\n 20:18-20:41: @1[7]: _11 = &amp;(*_21)\n 20:18-20:41: @1[8]: _10 = &amp;(*_11)\n@@ -126,27 +126,27 @@\n 20:9-20:43: @1.Call: _8 = Arguments::new_v1(move _9, move _13) -&gt; [return: bb3, unwind: bb11]\n 20:9-20:43: @3.Call: _7 = _print(move _8) -&gt; [return: bb4, unwind: bb11]\n 20:9-20:43: @4[5]: _6 = const ()\n-21:16-21:22: @4[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@1,3,4,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+21:16-21:22: @4[7]: _0 = Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@1,3,4,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @5[2]: _19 = ()\n-26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"><span class=\"annotation\">@2,5,6,7\u298a</span></span></span>\n+26:5-26:11: @5[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _19)\"><span class=\"annotation\">@2,5,6,7\u298a</span></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @5[2]: _19 = ()\n-26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n+26:5-26:11: @5[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @5[2]: _19 = ()\n-26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    let _ = Firework { strength: 1000 };</span></span>\n+26:5-26:11: @5[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _19)\">    let _ = Firework { strength: 1000 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @5[2]: _19 = ()\n-26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n+26:5-26:11: @5[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _19)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:6-22:6: @2[0]: _3 = const ()\n 24:13-24:40: @2[4]: _18 = Firework { strength: const 1000_i32 }\n 26:8-26:10: @5[2]: _19 = ()\n-26:5-26:11: @5[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _19)\">    Ok(())<span class=\"annotation\">\u2989@2,5,6,7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+26:5-26:11: @5[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _19)\">    Ok(())<span class=\"annotation\">\u2989@2,5,6,7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:2-27:2: @10.Return: return\"><span class=\"annotation\">@10\u298a</span>\u2038<span class=\"annotation\">\u2989@10</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "fa23bd2e961fd742505d5e3288608ce9cb939fe2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -181,7 +181,7 @@\n 31:9-31:43: @4.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb6, unwind: bb14]\n 31:9-31:43: @6.Call: _13 = _print(move _14) -&gt; [return: bb7, unwind: bb14]\n 31:9-31:43: @7[5]: _12 = const ()\n-32:16-32:22: @7[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@4,6,7,11,12\u298a</span>println!(\"Exiting with error...\");</span></span>\n+32:16-32:22: @7[7]: _0 = Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@4,6,7,11,12\u298a</span>println!(\"Exiting with error...\");</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"31:18-31:41: @4[6]: _27 = const main::promoted[1]\n 31:18-31:41: @4[7]: _17 = &amp;(*_27)\n 31:18-31:41: @4[8]: _16 = &amp;(*_17)\n@@ -195,43 +195,43 @@\n 31:9-31:43: @4.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb6, unwind: bb14]\n 31:9-31:43: @6.Call: _13 = _print(move _14) -&gt; [return: bb7, unwind: bb14]\n 31:9-31:43: @7[5]: _12 = const ()\n-32:16-32:22: @7[7]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@4,6,7,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+32:16-32:22: @7[7]: _0 = Result::&lt;(), u8&gt;::Err(const 1_u8)\">        return Err(1)<span class=\"annotation\">\u2989@4,6,7,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"><span class=\"annotation\">@5,8,9,10\u298a</span> // The remaining lines below have no coverage because `if true` (with the constant literal</span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\"><span class=\"annotation\">@5,8,9,10\u298a</span> // The remaining lines below have no coverage because `if true` (with the constant literal</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.</span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\">      // `true`) is guaranteed to execute the `then` block, which is also guaranteed to `return`.</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown</span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\">      // Thankfully, in the normal case, conditions are not guaranteed ahead of time, and as shown</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // in other tests, the lines below would have coverage (which would show they had `0`</span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\">      // in other tests, the lines below would have coverage (which would show they had `0`</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">      // executions, assuming the condition still evaluated to `true`).</span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\">      // executions, assuming the condition still evaluated to `true`).</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    let _ = Firework { strength: 1000 };</span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\">    let _ = Firework { strength: 1000 };</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\"></span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"33:6-33:6: @5[0]: _9 = const ()\n 39:13-39:40: @5[4]: _24 = Firework::&lt;i32&gt; { strength: const 1000_i32 }\n 41:8-41:10: @8[2]: _25 = ()\n-41:5-41:11: @8[3]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _25)\">    Ok(())<span class=\"annotation\">\u2989@5,8,9,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+41:5-41:11: @8[3]: _0 = Result::&lt;(), u8&gt;::Ok(move _25)\">    Ok(())<span class=\"annotation\">\u2989@5,8,9,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:2-42:2: @13.Return: return\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "1b4ba83f20f92389d8c87c1020fe6e3a3e081140", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.loops_branches/loops_branches.{impl#0}-fmt.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -94,7 +94,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        } else </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\">        }<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @19[3]: _30 = ()\n-18:9-18:15: @19[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@19\u298a</span>Ok(())<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+18:9-18:15: @19[4]: _0 = Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@19\u298a</span>Ok(())<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @20.Return: return\"><span class=\"annotation\">@20\u298a</span>\u2038<span class=\"annotation\">\u2989@20</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "6573abe30b8a26862cddc84ab53344e3f39d6209", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.overflow/overflow.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.overflow%2Foverflow.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -249,10 +249,10 @@\n 25:9-25:23: @20[0]: _1 = move (_47.0: i32)\"><span class=\"annotation\">@19,20\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:8-27:10: @4[4]: _49 = ()\n-27:5-27:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _49)\n+27:5-27:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _49)\n 28:2-28:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>Ok(())</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"27:8-27:10: @4[4]: _49 = ()\n-27:5-27:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _49)\n+27:5-27:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _49)\n 28:2-28:2: @4.Return: return\">}<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "c9d189c00c0ba80c455842b4ded0aad73f2e6b43", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.panic_unwind/panic_unwind.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.panic_unwind%2Fpanic_unwind.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -93,10 +93,10 @@\n 21:9-21:23: @14[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@13,14\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@13,14</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:8-23:10: @4[4]: _15 = ()\n-23:5-23:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\n+23:5-23:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _15)\n 24:2-24:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>Ok(())</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:8-23:10: @4[4]: _15 = ()\n-23:5-23:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\n+23:5-23:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _15)\n 24:2-24:2: @4.Return: return\">}<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "917909ac6e62571589b6a7a45a49049718589f44", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -72,10 +72,10 @@\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\"><span class=\"annotation\">@0\u298a</span>fn call(return_error: bool) -&gt; Result&lt;(),()&gt; {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:20: @0[1]: _2 = _1\">    if return_error<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:13-6:15: @1[1]: _3 = ()\n-6:9-6:16: @1[2]: _0 = std::result::Result::&lt;(), ()&gt;::Err(move _3)\"><span class=\"annotation\">@1\u298a</span>Err(())<span class=\"annotation\">\u2989@1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+6:9-6:16: @1[2]: _0 = Result::&lt;(), ()&gt;::Err(move _3)\"><span class=\"annotation\">@1\u298a</span>Err(())<span class=\"annotation\">\u2989@1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:12-8:14: @2[1]: _4 = ()\n-8:9-8:15: @2[2]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _4)\"><span class=\"annotation\">@2\u298a</span>Ok(())<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+8:9-8:15: @2[2]: _0 = Result::&lt;(), ()&gt;::Ok(move _4)\"><span class=\"annotation\">@2\u298a</span>Ok(())<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:2-10:2: @3.Return: return\"><span class=\"annotation\">@3\u298a</span>\u2038<span class=\"annotation\">\u2989@3</span></span></span></span></div>\n </body>"}, {"sha": "96fa9db4d9dc8c6ce6d01c90fc74fa8abfda8bb6", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -123,7 +123,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:8-35:10: @5[9]: _47 = ()\n-35:5-35:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _47)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+35:5-35:11: @5[10]: _0 = Result::&lt;(), ()&gt;::Ok(move _47)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @38.Return: return\"><span class=\"annotation\">@38\u298a</span>\u2038<span class=\"annotation\">\u2989@38</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "06f2d88840687f0184738303d698c0387caf3698", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.while_early_ret/while_early_ret.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -102,11 +102,11 @@\n 18:21-20:22: @6[3]: _10 = Gt(move _11, const 8_i32)\">                    8<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:24-22:26: @8[1]: _12 = ()\n-22:21-22:27: @8[2]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _12)\"><span class=\"annotation\">@8\u298a</span>Ok(())<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+22:21-22:27: @8[2]: _0 = Result::&lt;(), u8&gt;::Ok(move _12)\"><span class=\"annotation\">@8\u298a</span>Ok(())<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:21-26:27: @9[0]: _0 = std::result::Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@9\u298a</span>Err(1)<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:21-26:27: @9[0]: _0 = Result::&lt;(), u8&gt;::Err(const 1_u8)\"><span class=\"annotation\">@9\u298a</span>Err(1)<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:10-29:10: @7[0]: _6 = const ()\n@@ -124,7 +124,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n-35:5-35:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+35:5-35:11: @4[5]: _0 = Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @12.Return: return\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "919904ce3b6a2fd64d19593e47a6288b29531d10", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -59,22 +59,22 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:47:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note:   expected enum `std::result::Result<u8, MyErr>`\n+   = note:   expected enum `Result<u8, MyErr>`\n            found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:56:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note:   expected enum `std::result::Result<u8, MyErr>`\n+   = note:   expected enum `Result<u8, MyErr>`\n            found unit type `()`\n \n error: aborting due to 8 previous errors"}, {"sha": "aee2ae0e2e4a89470a735190b12eda6406418c2c", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -13,9 +13,9 @@ LL | pub async fn run() {\n    |                    - within this `impl Future`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n-   = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}`\n-   = note: required because it appears within the type `[static generator@run::{closure#0} for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{closure#0} for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]>`\n+   = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}`\n+   = note: required because it appears within the type `[static generator@run::{closure#0} for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{closure#0} for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]>`\n    = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future`\n "}, {"sha": "df1fb58e25a02e9b87894a4ac21e63f463b32202", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -12,13 +12,13 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n-   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n+   |    ---      ^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |\n-   = note:   expected enum `std::result::Result<u8, u64>`\n+   = note:   expected enum `Result<u8, u64>`\n            found unit type `()`\n \n error: aborting due to 2 previous errors"}, {"sha": "e079c2ddcee2643ffb8e4cfae7c82a045a13f1eb", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -11,7 +11,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n-   = note: the matched value is of type `std::result::Result<u32, !>`\n+   = note: the matched value is of type `Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(_x) = foo() { /* */ }"}, {"sha": "30e23ea8f650c0c64fd2226697a399e585ae891b", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,11 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-signature-deduction.rs:13:9\n    |\n LL |         5\n-   |         ^ expected enum `std::result::Result`, found integer\n+   |         ^ expected enum `Result`, found integer\n    |\n-   = note: expected type `std::result::Result<{integer}, _>`\n+   = note: expected type `Result<{integer}, _>`\n               found type `{integer}`\n-note: return type inferred to be `std::result::Result<{integer}, _>` here\n+note: return type inferred to be `Result<{integer}, _>` here\n   --> $DIR/type-mismatch-signature-deduction.rs:8:20\n    |\n LL |             return Ok(6);\n@@ -16,9 +16,9 @@ error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n LL | fn foo() -> impl Generator<Return = i32> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `i32`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\n    |\n-   = note: expected enum `std::result::Result<{integer}, _>`\n+   = note: expected enum `Result<{integer}, _>`\n               found type `i32`\n \n error: aborting due to 2 previous errors"}, {"sha": "2994ca3c7595cacde40c8babbdfebc0104c312a4", "filename": "src/test/ui/generics/wrong-number-of-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -139,7 +139,7 @@ mod stdlib {\n \n     mod result {\n         type A = Result;\n-        //~^ ERROR missing generics for enum `std::result::Result`\n+        //~^ ERROR missing generics for enum `Result`\n         //~| HELP use angle brackets\n \n         type B = Result<String>;"}, {"sha": "73bd76aa5fad0f301dcb7c7fab498a2ad73d98b2", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -365,7 +365,7 @@ note: struct defined here, with at most 3 type parameters: `K`, `V`, `S`\n LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^ -  -  -\n \n-error[E0107]: missing generics for enum `std::result::Result`\n+error[E0107]: missing generics for enum `Result`\n   --> $DIR/wrong-number-of-args.rs:141:18\n    |\n LL |         type A = Result;"}, {"sha": "961bb7351181e9e2eecb413131668d0c299bdae8", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `fmt` has an incompatible type for trait\n LL |    fn fmt(&self, x: &str) -> () { }\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n-   = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n               found fn pointer `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n@@ -13,23 +13,23 @@ error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fm\n LL |    fn fmt(&self) -> () { }\n    |           ^^^^^ expected 2 parameters, found 1\n    |\n-   = note: `fmt` from trait: `fn(&Self, &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = note: `fmt` from trait: `fn(&Self, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n \n error[E0186]: method `fmt` has a `&self` declaration in the trait, but not in the impl\n   --> $DIR/trait_type.rs:17:4\n    |\n LL |    fn fmt() -> () { }\n    |    ^^^^^^^^^^^^^^ expected `&self` in impl\n    |\n-   = note: `fmt` from trait: `fn(&Self, &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = note: `fmt` from trait: `fn(&Self, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n \n error[E0046]: not all trait items implemented, missing: `fmt`\n   --> $DIR/trait_type.rs:21:1\n    |\n LL | impl std::fmt::Display for MyType4 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = help: implement the missing item: `fn fmt(&self, _: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { todo!() }`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> { todo!() }`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "211ae13e46df12eec3f350268d598b5099a4f4f2", "filename": "src/test/ui/inference/cannot-infer-closure-circular.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed for `std::result::Result<(), E>`\n+error[E0282]: type annotations needed for `Result<(), E>`\n   --> $DIR/cannot-infer-closure-circular.rs:7:14\n    |\n LL |     let x = |r| {\n-   |              ^ consider giving this closure parameter the explicit type `std::result::Result<(), E>`, with the type parameters specified\n+   |              ^ consider giving this closure parameter the explicit type `Result<(), E>`, with the type parameters specified\n \n error: aborting due to previous error\n "}, {"sha": "0dcce9e990b538b18a08b7d4ffff9f4a234eeeee", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for the closure `fn((), ()) -> std::result::Result<(), _>`\n+error[E0282]: type annotations needed for the closure `fn((), ()) -> Result<(), _>`\n   --> $DIR/cannot-infer-closure.rs:3:15\n    |\n LL |         Err(a)?;\n@@ -7,8 +7,8 @@ LL |         Err(a)?;\n    = note: `?` implicitly converts the error value into a type implementing `From<()>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n-LL |     let x = |a: (), b: ()| -> std::result::Result<(), _> {\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = |a: (), b: ()| -> Result<(), _> {\n+   |                            ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "86e2126e1ae7b3bd202256f1232d2aaf08894df0", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for the closure `fn() -> std::result::Result<(), QualifiedError<_>>`\n+error[E0282]: type annotations needed for the closure `fn() -> Result<(), QualifiedError<_>>`\n   --> $DIR/cannot-infer-partial-try-return.rs:19:9\n    |\n LL |         infallible()?;\n@@ -7,8 +7,8 @@ LL |         infallible()?;\n    = note: `?` implicitly converts the error value into `QualifiedError<_>` using its implementation of `From<Infallible>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n-LL |     let x = || -> std::result::Result<(), QualifiedError<_>> {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = || -> Result<(), QualifiedError<_>> {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3c9d864c4263910f89113db7c68704d5fdc87dc1", "filename": "src/test/ui/inference/issue-72616.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72616.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72616.rs:20:30\n    |\n LL |         if String::from(\"a\") == \"a\".try_into().unwrap() {}\n-   |                              ^^ -------------- this method call resolves to `std::result::Result<T, <Self as TryInto<T>>::Error>`\n+   |                              ^^ -------------- this method call resolves to `Result<T, <Self as TryInto<T>>::Error>`\n    |                              |\n    |                              cannot infer type\n    |"}, {"sha": "28174825d8bce23c79a2749aa8461692f8f9ed49", "filename": "src/test/ui/issue-74047.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissue-74047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissue-74047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-74047.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -5,7 +5,7 @@ LL | impl TryFrom<OtherStream> for MyStream {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_from` in implementation\n    |\n    = help: implement the missing item: `type Error = Type;`\n-   = help: implement the missing item: `fn try_from(_: T) -> std::result::Result<Self, <Self as TryFrom<T>>::Error> { todo!() }`\n+   = help: implement the missing item: `fn try_from(_: T) -> Result<Self, <Self as TryFrom<T>>::Error> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "9d7470e7af9aa9c557edc551e87a9647494c9fc7", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL |     match a {\n    |           - this expression has type `Option<Box<{integer}>>`\n LL |         Ok(a) =>\n-   |         ^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |         ^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<Box<{integer}>>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "3d8852ca748af6c296119c129b3d520db51ed72b", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,23 +2,23 @@ error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:6:5\n    |\n LL |   match t {\n-   |         - this expression has type `std::result::Result<_, {integer}>`\n+   |         - this expression has type `Result<_, {integer}>`\n LL |     Some(k) => match k {\n-   |     ^^^^^^^ expected enum `std::result::Result`, found enum `Option`\n+   |     ^^^^^^^ expected enum `Result`, found enum `Option`\n    |\n-   = note: expected enum `std::result::Result<_, {integer}>`\n+   = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n    |\n LL |   match t {\n-   |         - this expression has type `std::result::Result<_, {integer}>`\n+   |         - this expression has type `Result<_, {integer}>`\n ...\n LL |     None => ()\n-   |     ^^^^ expected enum `std::result::Result`, found enum `Option`\n+   |     ^^^^ expected enum `Result`, found enum `Option`\n    |\n-   = note: expected enum `std::result::Result<_, {integer}>`\n+   = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`\n \n error: aborting due to 2 previous errors"}, {"sha": "a420c7704af51a8b806edf4a3510a70d586ccb6e", "filename": "src/test/ui/issues/issue-13466.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -8,13 +8,13 @@ pub fn main() {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<{integer}>`\n-        //~| found enum `std::result::Result<_, _>`\n-        //~| expected enum `Option`, found enum `std::result::Result`\n+        //~| found enum `Result<_, _>`\n+        //~| expected enum `Option`, found enum `Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<{integer}>`\n-        //~| found enum `std::result::Result<_, _>`\n-        //~| expected enum `Option`, found enum `std::result::Result`\n+        //~| found enum `Result<_, _>`\n+        //~| expected enum `Option`, found enum `Result`\n     };\n }"}, {"sha": "c78466f4e8ce1c03322bf9e144b57a4f11ea1ded", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL |     let _x: usize = match Some(1) {\n    |                           ------- this expression has type `Option<{integer}>`\n LL |         Ok(u) => u,\n-   |         ^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |         ^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<{integer}>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n@@ -16,10 +16,10 @@ LL |     let _x: usize = match Some(1) {\n    |                           ------- this expression has type `Option<{integer}>`\n ...\n LL |         Err(e) => panic!(e)\n-   |         ^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<{integer}>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6547f3a9b19aefc8db7d06b91854956e4dc42e61", "filename": "src/test/ui/issues/issue-21332.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-21332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-21332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,7 +4,7 @@ impl Iterator for S {\n     type Item = i32;\n     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n     //~^ ERROR method `next` has an incompatible type for trait\n-    //~| expected enum `Option`, found enum `std::result::Result`\n+    //~| expected enum `Option`, found enum `Result`\n }\n \n fn main() {}"}, {"sha": "35863fbebe3157390d8f30376fcc2b04b4a6f672", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,10 +2,10 @@ error[E0053]: method `next` has an incompatible type for trait\n   --> $DIR/issue-21332.rs:5:5\n    |\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected fn pointer `fn(&mut S) -> Option<i32>`\n-              found fn pointer `fn(&mut S) -> std::result::Result<i32, i32>`\n+              found fn pointer `fn(&mut S) -> Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "37c9000c043daf0e01f118cb45ddd5560b5091a9", "filename": "src/test/ui/issues/issue-3680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -3,7 +3,7 @@ fn main() {\n         Err(_) => ()\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<_>`\n-        //~| found enum `std::result::Result<_, _>`\n-        //~| expected enum `Option`, found enum `std::result::Result`\n+        //~| found enum `Result<_, _>`\n+        //~| expected enum `Option`, found enum `Result`\n     }\n }"}, {"sha": "e8fafa76b919bbc5d5860ac5075b338f1663f121", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL |     match None {\n    |           ---- this expression has type `Option<_>`\n LL |         Err(_) => ()\n-   |         ^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<_>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "9711e27d8a8a35946d1c8ead2308b591860c8609", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: the method `as_deref` exists for enum `std::result::Result<{integer}, _>`, but its trait bounds were not satisfied\n+error[E0599]: the method `as_deref` exists for enum `Result<{integer}, _>`, but its trait bounds were not satisfied\n   --> $DIR/result-as_deref.rs:2:27\n    |\n LL |     let _result = &Ok(42).as_deref();"}, {"sha": "ee7ea1e6a02294521964c0dccf057001790527b0", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: the method `as_deref_mut` exists for enum `std::result::Result<{integer}, _>`, but its trait bounds were not satisfied\n+error[E0599]: the method `as_deref_mut` exists for enum `Result<{integer}, _>`, but its trait bounds were not satisfied\n   --> $DIR/result-as_deref_mut.rs:2:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut();\n-   |                               ^^^^^^^^^^^^ method cannot be called on `std::result::Result<{integer}, _>` due to unsatisfied trait bounds\n+   |                               ^^^^^^^^^^^^ method cannot be called on `Result<{integer}, _>` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`"}, {"sha": "554ac7e7c75fc1d50f6834756bd72391c997f9c5", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,9 +2,9 @@ error[E0308]: try expression alternatives have incompatible types\n   --> $DIR/issue-51632-try-desugar-incompatible-types.rs:8:5\n    |\n LL |     missing_discourses()?\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `isize`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `isize`\n    |\n-   = note: expected enum `std::result::Result<isize, ()>`\n+   = note: expected enum `Result<isize, ()>`\n               found type `isize`\n help: try removing this `?`\n    |"}, {"sha": "0cf82d37d5d0b7361b820bb28bcc31eb24fe529a", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-6458-4.rs:1:20\n    |\n LL | fn foo(b: bool) -> Result<bool,String> {\n-   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n+   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |\n-   = note:   expected enum `std::result::Result<bool, String>`\n+   = note:   expected enum `Result<bool, String>`\n            found unit type `()`\n \n error: aborting due to previous error"}, {"sha": "ef1127c59ac4cfee3380c9a506f1b5916723a07b", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `std::result::Result<(), _>: Future` is not satisfied\n+error[E0277]: the trait bound `Result<(), _>: Future` is not satisfied\n   --> $DIR/lifetime-elision-return-type-trait.rs:8:13\n    |\n LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `std::result::Result<(), _>`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `Result<(), _>`\n \n error: aborting due to previous error\n "}, {"sha": "f3991ab417752a9326d651199f77b4a496d6d376", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -97,7 +97,7 @@ LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n    = note: enum has no representation hint\n \n-error: `extern` block uses type `std::result::Result<(), NonZeroI32>`, which is not FFI-safe\n+error: `extern` block uses type `Result<(), NonZeroI32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:90:20\n    |\n LL |    fn no_result(x: Result<(), num::NonZeroI32>);"}, {"sha": "0f0aa20253c96a644f51d1a980a31749b7f62375", "filename": "src/test/ui/lint/must_use-tuple.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -5,13 +5,13 @@ fn foo() -> (Result<(), ()>, ()) {\n }\n \n fn main() {\n-    (Ok::<(), ()>(()),); //~ ERROR unused `std::result::Result`\n+    (Ok::<(), ()>(()),); //~ ERROR unused `Result`\n \n     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n-    //~^ ERROR unused `std::result::Result`\n-    //~^^ ERROR unused `std::result::Result`\n+    //~^ ERROR unused `Result`\n+    //~^^ ERROR unused `Result`\n \n-    foo(); //~ ERROR unused `std::result::Result`\n+    foo(); //~ ERROR unused `Result`\n \n-    ((Err::<(), ()>(()), ()), ()); //~ ERROR unused `std::result::Result`\n+    ((Err::<(), ()>(()), ()), ()); //~ ERROR unused `Result`\n }"}, {"sha": "0532d89e039eb9d9d731cc7e1c8586a3d6bfbfbf", "filename": "src/test/ui/lint/must_use-tuple.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,4 +1,4 @@\n-error: unused `std::result::Result` in tuple element 0 that must be used\n+error: unused `Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:8:6\n    |\n LL |     (Ok::<(), ()>(()),);\n@@ -11,31 +11,31 @@ LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` in tuple element 0 that must be used\n+error: unused `Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:10:6\n    |\n LL |     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n    |      ^^^^^^^^^^^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` in tuple element 2 that must be used\n+error: unused `Result` in tuple element 2 that must be used\n   --> $DIR/must_use-tuple.rs:10:27\n    |\n LL |     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n    |                           ^^^^^^^^^^^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` in tuple element 0 that must be used\n+error: unused `Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:14:5\n    |\n LL |     foo();\n    |     ^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` in tuple element 0 that must be used\n+error: unused `Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:16:6\n    |\n LL |     ((Err::<(), ()>(()), ()), ());"}, {"sha": "b4072a1ad7e57af499eeb2bda1bb857fc3dcd8fd", "filename": "src/test/ui/macros/must-use-in-macro-55516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,4 +1,4 @@\n-warning: unused `std::result::Result` that must be used\n+warning: unused `Result` that must be used\n   --> $DIR/must-use-in-macro-55516.rs:9:5\n    |\n LL |     write!(&mut example, \"{}\", 42);"}, {"sha": "61994e5bfee2e83d359420fff4186802429966ab", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -15,10 +15,10 @@ error[E0308]: mismatched types\n LL | fn a2() -> Foo {\n    |            --- expected `Foo` because of return type\n LL |     Ok(Foo { bar: 1})\n-   |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `std::result::Result`\n+   |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `Result`\n    |\n    = note: expected struct `Foo`\n-                found enum `std::result::Result<Foo, _>`\n+                found enum `Result<Foo, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:24:5\n@@ -38,14 +38,14 @@ error[E0308]: mismatched types\n   --> $DIR/abridged.rs:28:5\n    |\n LL | fn c() -> Result<Foo, Bar> {\n-   |           ---------------- expected `std::result::Result<Foo, Bar>` because of return type\n+   |           ---------------- expected `Result<Foo, Bar>` because of return type\n LL |     Foo { bar: 1 }\n    |     ^^^^^^^^^^^^^^\n    |     |\n-   |     expected enum `std::result::Result`, found struct `Foo`\n+   |     expected enum `Result`, found struct `Foo`\n    |     help: try using a variant of the expected enum: `Ok(Foo { bar: 1 })`\n    |\n-   = note: expected enum `std::result::Result<Foo, Bar>`\n+   = note: expected enum `Result<Foo, Bar>`\n             found struct `Foo`\n \n error[E0308]: mismatched types"}, {"sha": "f359451dfb8f9427ff6272e58cf32991b9097808", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     3 * (); //~ ERROR cannot multiply `{integer}` by `()`\n     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n     5 < String::new(); //~ ERROR can't compare `{integer}` with `String`\n-    6 == Ok(1); //~ ERROR can't compare `{integer}` with `std::result::Result<{integer}, _>`\n+    6 == Ok(1); //~ ERROR can't compare `{integer}` with `Result<{integer}, _>`\n }"}, {"sha": "19e921dd04d73a1f25c48441a3448025cd75963c", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -38,13 +38,13 @@ LL |     5 < String::new();\n    |\n    = help: the trait `PartialOrd<String>` is not implemented for `{integer}`\n \n-error[E0277]: can't compare `{integer}` with `std::result::Result<{integer}, _>`\n+error[E0277]: can't compare `{integer}` with `Result<{integer}, _>`\n   --> $DIR/binops.rs:7:7\n    |\n LL |     6 == Ok(1);\n-   |       ^^ no implementation for `{integer} == std::result::Result<{integer}, _>`\n+   |       ^^ no implementation for `{integer} == Result<{integer}, _>`\n    |\n-   = help: the trait `PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n+   = help: the trait `PartialEq<Result<{integer}, _>>` is not implemented for `{integer}`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "1030061b2d1feb737ee5cd4470cbfd0c0a35373e", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: the method `unwrap` exists for enum `std::result::Result<(), Foo>`, but its trait bounds were not satisfied\n+error[E0599]: the method `unwrap` exists for enum `Result<(), Foo>`, but its trait bounds were not satisfied\n   --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n LL | struct Foo;\n    | ----------- doesn't satisfy `Foo: Debug`\n ...\n LL |     a.unwrap();\n-   |       ^^^^^^ method cannot be called on `std::result::Result<(), Foo>` due to unsatisfied trait bounds\n+   |       ^^^^^^ method cannot be called on `Result<(), Foo>` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `Foo: Debug`"}, {"sha": "1bfebd755b4fc8790b0cc5200f6f740b5de10ba4", "filename": "src/test/ui/nll/issue-54556-niconii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -11,7 +11,7 @@ LL | }\n    | -\n    | |\n    | `counter` dropped here while still borrowed\n-   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<MutexGuard<'_>, ()>`\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `Result<MutexGuard<'_>, ()>`\n    |\n help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n    |"}, {"sha": "15790771043df17c662e6a23b4c6313d516cdfd2", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:14:31\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n-   |             -----             ^^^^^^^^^            ----------- this expression has type `std::result::Result<({integer}, &{integer}), (_, _)>`\n+   |             -----             ^^^^^^^^^            ----------- this expression has type `Result<({integer}, &{integer}), (_, _)>`\n    |             |                 |\n    |             |                 types differ in mutability\n    |             first introduced with type `&{integer}` here"}, {"sha": "00861a5a3d49a1096b279a1ea42c2534532fa334", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -13,12 +13,12 @@ error[E0308]: mismatched types\n   --> $DIR/unclosed-delimiter-in-dep.rs:4:20\n    |\n LL |     let _: usize = unclosed_delim_mod::new();\n-   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `std::result::Result`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `Result`\n    |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n-              found enum `std::result::Result<Value, ()>`\n+              found enum `Result<Value, ()>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ff8183e87635f557100357cb7523accacf2b71e8", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -33,7 +33,7 @@ error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:20:16\n    |\n LL |     match Ok(U) {\n-   |           ----- move occurs because value has type `std::result::Result<U, U>`, which does not implement the `Copy` trait\n+   |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         -------^-\n    |         |      |\n@@ -44,7 +44,7 @@ error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:20:29\n    |\n LL |     match Ok(U) {\n-   |           ----- move occurs because value has type `std::result::Result<U, U>`, which does not implement the `Copy` trait\n+   |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     --------^-\n    |                     |       |"}, {"sha": "13032c3838a926520f49d336867e19d83bb66b2b", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -390,15 +390,15 @@ error[E0507]: cannot move out of `a` in pattern guard\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n-   |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n+   |                                                                  ^ move occurs because `a` has type `&mut Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n-   |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n+   |                                                                  ^ move occurs because `a` has type `&mut Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n "}, {"sha": "3a61d4293b01deb5acfd6d0f532c8fcd18cbc018", "filename": "src/test/ui/pattern/pat-struct-field-expr-has-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL |     match (S { f: 42 }) {\n    |           ------------- this expression has type `S`\n LL |         S { f: Ok(_) } => {}\n-   |                ^^^^^ expected `u8`, found enum `std::result::Result`\n+   |                ^^^^^ expected `u8`, found enum `Result`\n    |\n    = note: expected type `u8`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "4b4fb08928327db295296c80dd6abb811b36f9ac", "filename": "src/test/ui/pattern/pat-type-err-let-stmt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -17,32 +17,32 @@ error[E0308]: mismatched types\n LL |     let Ok(0): Option<u8> = 42u8;\n    |         ^^^^^  ---------- expected due to this\n    |         |\n-   |         expected enum `Option`, found enum `std::result::Result`\n+   |         expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<u8>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:11:9\n    |\n LL |     let Ok(0): Option<u8>;\n    |         ^^^^^  ---------- expected due to this\n    |         |\n-   |         expected enum `Option`, found enum `std::result::Result`\n+   |         expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<u8>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:15:9\n    |\n LL |     let Ok(0) = 42u8;\n    |         ^^^^^   ---- this expression has type `u8`\n    |         |\n-   |         expected `u8`, found enum `std::result::Result`\n+   |         expected `u8`, found enum `Result`\n    |\n    = note: expected type `u8`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "928e9068266cd5cc7e9c9847ce34e68fea1a2476", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -5,7 +5,7 @@ LL |     match (l1, l2) {\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `(Option<&[T]>, std::result::Result<&[T], ()>)`\n+   = note: the matched value is of type `(Option<&[T]>, Result<&[T], ()>)`\n \n error[E0004]: non-exhaustive patterns: `A(C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:15:11"}, {"sha": "dfb69a3cc1b425e11b43d61095ce4b938eb3ed9c", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -11,7 +11,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n-   = note: the matched value is of type `std::result::Result<u32, &R>`\n+   = note: the matched value is of type `Result<u32, &R>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(x) = res { /* */ }"}, {"sha": "4580620186197ae2ef5119cf1e8ffb5344f00866", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `main` has invalid return type `std::result::Result<f32, ParseFloatError>`\n+error[E0277]: `main` has invalid return type `Result<f32, ParseFloatError>`\n   --> $DIR/termination-trait-test-wrong-type.rs:6:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n@@ -11,7 +11,7 @@ LL | | }\n LL |   pub fn assert_test_result<T: Termination>(result: T) {\n    |                                ----------- required by this bound in `assert_test_result`\n    |\n-   = help: the trait `Termination` is not implemented for `std::result::Result<f32, ParseFloatError>`\n+   = help: the trait `Termination` is not implemented for `Result<f32, ParseFloatError>`\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "6407128d8d8773dc852f896b575a1d3bc8e22a9a", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/typeck.rs:10:22\n    |\n LL |         Ok(x) if let Err(_) = x => {},\n-   |                      ^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |                      ^^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<bool>`\n-              found enum `std::result::Result<_, _>`\n+              found enum `Result<_, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/typeck.rs:12:22"}, {"sha": "de200ca0721cad5e00d91f103ae950dc9f7ba4e3", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -64,7 +64,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl Debug for FooTypeForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = help: implement the missing item: `fn fmt(&self, _: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { todo!() }`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> { todo!() }`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "7e4d7fb3933d39152c65d6e6f85e9d0bf7ed01fb", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -47,12 +47,12 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:19:35\n    |\n LL |   let y: Result<&usize, &usize> = x;\n-   |          ----------------------   ^ expected enum `std::result::Result`, found reference\n+   |          ----------------------   ^ expected enum `Result`, found reference\n    |          |\n    |          expected due to this\n    |\n-   = note:   expected enum `std::result::Result<&usize, &usize>`\n-           found reference `&std::result::Result<usize, usize>`\n+   = note:   expected enum `Result<&usize, &usize>`\n+           found reference `&Result<usize, usize>`\n help: you can convert from `&Result<T, E>` to `Result<&T, &E>` using `.as_ref()`\n    |\n LL |   let y: Result<&usize, &usize> = x.as_ref();\n@@ -62,12 +62,12 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:23:34\n    |\n LL |   let y: Result<&usize, usize> = x;\n-   |          ---------------------   ^ expected enum `std::result::Result`, found reference\n+   |          ---------------------   ^ expected enum `Result`, found reference\n    |          |\n    |          expected due to this\n    |\n-   = note:   expected enum `std::result::Result<&usize, usize>`\n-           found reference `&std::result::Result<usize, usize>`\n+   = note:   expected enum `Result<&usize, usize>`\n+           found reference `&Result<usize, usize>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "327bbee1968bfc0f5f12daf02a187c9c11d9781d", "filename": "src/test/ui/suggestions/mut-ref-reassignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n LL |     opt = None\n    |           ^^^^ expected mutable reference, found enum `Option`\n    |\n-   = note: expected mutable reference `&mut std::result::Result<String, ()>`\n+   = note: expected mutable reference `&mut Result<String, ()>`\n                            found enum `Option<_>`\n \n error[E0308]: mismatched types"}, {"sha": "c00a0f1700bb44e417b6c33a6009f9e73dc66efb", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -13,7 +13,7 @@ error[E0507]: cannot move out of `selection.1` which is behind a shared referenc\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^\n    |                    |\n-   |                    move occurs because `selection.1` has type `std::result::Result<String, String>`, which does not implement the `Copy` trait\n+   |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n    |                    help: consider borrowing the `Result`'s content: `selection.1.as_ref()`\n \n error: aborting due to 2 previous errors"}, {"sha": "8107fd862122add18d66c9e36a87cce9eacfa20e", "filename": "src/test/ui/suggestions/suggest-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -10,7 +10,7 @@ LL | |         Ok(())\n LL | |     };\n    | |_____^ expected struct `Box`, found closure\n    |\n-   = note: expected struct `Box<dyn Fn() -> std::result::Result<(), ()>>`\n+   = note: expected struct `Box<dyn Fn() -> Result<(), ()>>`\n              found closure `[closure@$DIR/suggest-box.rs:4:47: 7:6]`\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n help: store this in the heap by calling `Box::new`"}, {"sha": "73b5aec022c6013c4fa590edb7203195b12e0997", "filename": "src/test/ui/traits/self-without-lifetime-constraint.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -2,13 +2,13 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/self-without-lifetime-constraint.rs:45:5\n    |\n LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n-   |     -------------------------------------------------------------------- expected `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), FromSqlError>`\n+   |     -------------------------------------------------------------------- expected `fn(ValueRef<'_>) -> Result<(&str, &&str), FromSqlError>`\n ...\n LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), FromSqlError>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(ValueRef<'_>) -> Result<(&str, &&str), FromSqlError>`\n    |\n-   = note: expected `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), _>`\n-              found `fn(ValueRef<'_>) -> std::result::Result<(&str, &&str), _>`\n+   = note: expected `fn(ValueRef<'_>) -> Result<(&str, &&str), _>`\n+              found `fn(ValueRef<'_>) -> Result<(&str, &&str), _>`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/self-without-lifetime-constraint.rs:41:60\n    |"}, {"sha": "2d1313d7d0e31a0f88f1de061fa7c6abbd3007d4", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -13,13 +13,13 @@ LL |         Err(\"\")?;\n            and 2 others\n    = note: required by `from`\n \n-error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as Try>::Ok == &str`\n+error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == &str`\n   --> $DIR/try-block-bad-type.rs:12:9\n    |\n LL |         \"\"\n    |         ^^ expected `i32`, found `&str`\n \n-error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as Try>::Ok == ()`\n+error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == ()`\n   --> $DIR/try-block-bad-type.rs:15:39\n    |\n LL |     let res: Result<i32, i32> = try { };"}, {"sha": "4f2f9e070fe520562ae662771b2698bd1dc7648e", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaefe4a230d7c32d7c99da437ee8b87860f28704/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=eaefe4a230d7c32d7c99da437ee8b87860f28704", "patch": "@@ -10,7 +10,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `std::result::Result<u32, &Void>`\n+   = note: the matched value is of type `Result<u32, &Void>`\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n@@ -64,7 +64,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `std::result::Result<u32, Void>`\n+   = note: the matched value is of type `Result<u32, Void>`\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:37:9\n@@ -79,7 +79,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n-   = note: the matched value is of type `std::result::Result<u32, Void>`\n+   = note: the matched value is of type `Result<u32, Void>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(x) = x { /* */ }"}]}