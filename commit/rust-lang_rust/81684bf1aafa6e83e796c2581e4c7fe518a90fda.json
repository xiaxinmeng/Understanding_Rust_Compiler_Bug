{"sha": "81684bf1aafa6e83e796c2581e4c7fe518a90fda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjg0YmYxYWFmYTZlODNlNzk2YzI1ODFlNGM3ZmU1MThhOTBmZGE=", "commit": {"author": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-20T23:11:59Z"}, "committer": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-20T23:11:59Z"}, "message": "New AccessLevel and accompanying propagation.", "tree": {"sha": "f36e1541bbc6f3f75b4360c99a5c55519183058b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36e1541bbc6f3f75b4360c99a5c55519183058b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81684bf1aafa6e83e796c2581e4c7fe518a90fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81684bf1aafa6e83e796c2581e4c7fe518a90fda", "html_url": "https://github.com/rust-lang/rust/commit/81684bf1aafa6e83e796c2581e4c7fe518a90fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81684bf1aafa6e83e796c2581e4c7fe518a90fda/comments", "author": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b260691fc85020c2b58d263665fe4808b72ac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b260691fc85020c2b58d263665fe4808b72ac1", "html_url": "https://github.com/rust-lang/rust/commit/00b260691fc85020c2b58d263665fe4808b72ac1"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "365434062a3036d6de098e1378251fde8b5b823e", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81684bf1aafa6e83e796c2581e4c7fe518a90fda/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81684bf1aafa6e83e796c2581e4c7fe518a90fda/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=81684bf1aafa6e83e796c2581e4c7fe518a90fda", "patch": "@@ -1086,6 +1086,7 @@ impl_stable_hash_for!(enum traits::Reveal {\n });\n \n impl_stable_hash_for!(enum ::middle::privacy::AccessLevel {\n+    ReachableFromImplTrait,\n     Reachable,\n     Exported,\n     Public"}, {"sha": "39ddaca8925e0e4b7799be5aeee287ce30225a37", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81684bf1aafa6e83e796c2581e4c7fe518a90fda/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81684bf1aafa6e83e796c2581e4c7fe518a90fda/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=81684bf1aafa6e83e796c2581e4c7fe518a90fda", "patch": "@@ -22,7 +22,7 @@ use syntax::ast::NodeId;\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum AccessLevel {\n     // Superset of Reachable used to mark impl Trait items.\n-    // ReachableFromImplTrait,\n+    ReachableFromImplTrait,\n     // Exported items + items participating in various kinds of public interfaces,\n     // but not directly nameable. For example, if function `fn f() -> T {...}` is\n     // public, then type `T` is reachable. Its values can be obtained by other crates\n@@ -42,7 +42,8 @@ pub struct AccessLevels<Id = NodeId> {\n \n impl<Id: Hash + Eq> AccessLevels<Id> {\n     pub fn is_reachable(&self, id: Id) -> bool {\n-        self.map.contains_key(&id)\n+        // self.map.contains_key(&id)\n+        self.map.get(&id) >= Some(&AccessLevel::Reachable)\n     }\n     pub fn is_exported(&self, id: Id) -> bool {\n         self.map.get(&id) >= Some(&AccessLevel::Exported)"}, {"sha": "b6b56cad8390655fb09a2edc30a9184d6797530b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81684bf1aafa6e83e796c2581e4c7fe518a90fda/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81684bf1aafa6e83e796c2581e4c7fe518a90fda/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=81684bf1aafa6e83e796c2581e4c7fe518a90fda", "patch": "@@ -84,6 +84,7 @@ struct EmbargoVisitor<'a, 'tcx: 'a> {\n }\n \n struct ReachEverythingInTheInterfaceVisitor<'b, 'a: 'b, 'tcx: 'a> {\n+    access_level: Option<AccessLevel>,\n     item_def_id: DefId,\n     ev: &'b mut EmbargoVisitor<'a, 'tcx>,\n }\n@@ -134,6 +135,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     fn reach<'b>(&'b mut self, item_id: ast::NodeId)\n                  -> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n         ReachEverythingInTheInterfaceVisitor {\n+            access_level: self.prev_level.map(|l| l.min(AccessLevel::Reachable)),\n             item_def_id: self.tcx.hir.local_def_id(item_id),\n             ev: self,\n         }\n@@ -164,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::Existential(ref ty_data) => {\n                 if let Some(impl_trait_fn) = ty_data.impl_trait_fn {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(impl_trait_fn) {\n-                        self.update(node_id, Some(AccessLevel::Reachable));\n+                        self.update(node_id, Some(AccessLevel::ReachableFromImplTrait));\n                     }\n                 }\n                 if item.vis.node.is_pub() { self.prev_level } else { None }\n@@ -240,6 +242,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(..) => {}\n         }\n \n+        let orig_level = self.prev_level;\n+        self.prev_level = item_level;\n+\n         // Mark all items in interfaces of reachable items as reachable\n         match item.node {\n             // The interface is empty\n@@ -337,9 +342,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             }\n         }\n \n-        let orig_level = self.prev_level;\n-        self.prev_level = item_level;\n-\n         intravisit::walk_item(self, item);\n \n         self.prev_level = orig_level;\n@@ -475,7 +477,7 @@ impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn check_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>) {\n         if let Some(node_id) = self.ev.tcx.hir.as_local_node_id(trait_ref.def_id) {\n             let item = self.ev.tcx.hir.expect_item(node_id);\n-            self.ev.update(item.id, Some(AccessLevel::Reachable));\n+            self.ev.update(item.id, self.access_level);\n         }\n     }\n }\n@@ -496,7 +498,7 @@ impl<'b, 'a, 'tcx> TypeVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'b\n \n         if let Some(def_id) = ty_def_id {\n             if let Some(node_id) = self.ev.tcx.hir.as_local_node_id(def_id) {\n-                self.ev.update(node_id, Some(AccessLevel::Reachable));\n+                self.ev.update(node_id, self.access_level);\n             }\n         }\n "}]}