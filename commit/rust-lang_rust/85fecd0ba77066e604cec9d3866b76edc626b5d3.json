{"sha": "85fecd0ba77066e604cec9d3866b76edc626b5d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmVjZDBiYTc3MDY2ZTYwNGNlYzlkMzg2NmI3NmVkYzYyNmI1ZDM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-01T15:01:48Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-01T15:01:48Z"}, "message": "Merge remote-tracking branch 'remotes/origin/incoming' into incoming", "tree": {"sha": "a375b9e61af4c5e105b58271c9381fdaf58d31b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a375b9e61af4c5e105b58271c9381fdaf58d31b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85fecd0ba77066e604cec9d3866b76edc626b5d3", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85fecd0ba77066e604cec9d3866b76edc626b5d3", "html_url": "https://github.com/rust-lang/rust/commit/85fecd0ba77066e604cec9d3866b76edc626b5d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85fecd0ba77066e604cec9d3866b76edc626b5d3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c4b6492dbccc1bb60f163ac583467bc63abce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c4b6492dbccc1bb60f163ac583467bc63abce6", "html_url": "https://github.com/rust-lang/rust/commit/d2c4b6492dbccc1bb60f163ac583467bc63abce6"}, {"sha": "a660bb362ce5a39014fb274367e6361d4deb8a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a660bb362ce5a39014fb274367e6361d4deb8a7d", "html_url": "https://github.com/rust-lang/rust/commit/a660bb362ce5a39014fb274367e6361d4deb8a7d"}], "stats": {"total": 2696, "additions": 1504, "deletions": 1192}, "files": [{"sha": "d31fbbb0c07a15079bf3141a95b770b52c914767", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2304,11 +2304,10 @@ mod farm {\n         farmer: Human\n     }\n \n-    // Note - visibility modifiers on impls currently have no effect\n     impl Farm {\n         priv fn feed_chickens(&self) { ... }\n         priv fn feed_cows(&self) { ... }\n-        fn add_chicken(&self, c: Chicken) { ... }\n+        pub fn add_chicken(&self, c: Chicken) { ... }\n     }\n \n     pub fn feed_animals(farm: &Farm) {"}, {"sha": "735b02362766254f0ff269140b257bc365845bcc", "filename": "src/etc/gedit/readme.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fetc%2Fgedit%2Freadme.txt", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fetc%2Fgedit%2Freadme.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Freadme.txt?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -0,0 +1,11 @@\n+Add syntax highlighting for Mozilla Rust in GtkSourceView (used by GEdit).\n+\n+\n+Instructions for Ubuntu Linux 12.04+\n+\n+1) Close all instances of GEdit\n+\n+2) Copy the included \"share\" folder into \"~/.local/\"\n+\n+3) Open a shell in \"~/.local/share/\" and run \"update-mime-database mime\"\n+"}, {"sha": "0b23808b76524310a5cb7492f06d222bbe816ec0", "filename": "src/etc/gedit/share/gtksourceview-3.0/language-specs/rust.lang", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -0,0 +1,264 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!-- Syntax highlighting for the under-development Mozilla Rust language -->\n+\n+<language id=\"rust\" _name=\"Rust\" version=\"2.0\" _section=\"Sources\">\n+  <metadata>\n+    <property name=\"mimetypes\">text/x-rust</property>\n+    <property name=\"globs\">*.rs;*.rc</property>\n+    <property name=\"line-comment-start\">//</property>\n+    <property name=\"block-comment-start\">/*</property>\n+    <property name=\"block-comment-end\">*/</property>\n+  </metadata>\n+\n+  <styles>\n+    <style id=\"comment\" _name=\"Comment\" map-to=\"def:comment\"/>\n+    <style id=\"string\" _name=\"String\" map-to=\"def:string\"/>\n+    <style id=\"char\" _name=\"Character\" map-to=\"def:character\"/>\n+    <style id=\"keyword\" _name=\"Keyword\" map-to=\"def:keyword\"/>\n+    <style id=\"type\" _name=\"Data Type\" map-to=\"def:type\"/>\n+    <style id=\"constant\" _name=\"Constant\" map-to=\"def:constant\"/>\n+    <style id=\"identifier\" _name=\"Identifier\" map-to=\"def:identifier\"/>\n+    <style id=\"number\" _name=\"Number\" map-to=\"def:decimal\"/>\n+    <style id=\"scope\" _name=\"Scope\" map-to=\"def:preprocessor\"/>\n+  </styles>\n+\n+  <definitions>\n+\n+    <context id=\"function\" style-ref=\"keyword\">\n+\t\t<keyword>fn</keyword>\n+    </context>\n+\n+    <context id=\"type\" style-ref=\"keyword\">\n+\t\t<keyword>type</keyword>\n+    </context>\n+\n+    <context id=\"keywords\" style-ref=\"keyword\">\n+\t\t<keyword>as</keyword>\n+\t\t<keyword>assert</keyword>\n+\t\t<keyword>break</keyword>\n+\t\t<keyword>const</keyword>\n+\t\t<keyword>copy</keyword>\n+\t\t<keyword>do</keyword>\n+\t\t<keyword>drop</keyword>\n+\t\t<keyword>else</keyword>\n+\t\t<keyword>enum</keyword>\n+\t\t<keyword>export</keyword>\n+\t\t<keyword>extern</keyword>\n+\t\t<keyword>fail</keyword>\n+\t\t<keyword>for</keyword>\n+\t\t<keyword>if</keyword>\n+\t\t<keyword>impl</keyword>\n+\t\t<keyword>let</keyword>\n+\t\t<keyword>log</keyword>\n+\t\t<keyword>loop</keyword>\n+\t\t<keyword>match</keyword>\n+\t\t<keyword>mod</keyword>\n+\t\t<keyword>move</keyword>\n+\t\t<keyword>mut</keyword>\n+\t\t<keyword>priv</keyword>\n+\t\t<keyword>pub</keyword>\n+\t\t<keyword>pure</keyword>\n+\t\t<keyword>ref</keyword>\n+\t\t<keyword>return</keyword>\n+\t\t<keyword>static</keyword>\n+\t\t<keyword>struct</keyword>\n+\t\t<keyword>trait</keyword>\n+\t\t<keyword>unsafe</keyword>\n+\t\t<keyword>use</keyword>\n+\t\t<keyword>while</keyword>\n+    </context>\n+\n+    <context id=\"types\" style-ref=\"type\">\n+\t\t<keyword>bool</keyword>\n+\t\t<keyword>int</keyword>\n+\t\t<keyword>uint</keyword>\n+\t\t<keyword>i8</keyword>\n+\t\t<keyword>i16</keyword>\n+\t\t<keyword>i32</keyword>\n+\t\t<keyword>i64</keyword>\n+\t\t<keyword>u8</keyword>\n+\t\t<keyword>u16</keyword>\n+\t\t<keyword>u32</keyword>\n+\t\t<keyword>u64</keyword>\n+\t\t<keyword>f32</keyword>\n+\t\t<keyword>f64</keyword>\n+\t\t<keyword>float</keyword>\n+\t\t<keyword>char</keyword>\n+\t\t<keyword>str</keyword>\n+\t\t<keyword>Either</keyword>\n+\t\t<keyword>Option</keyword>\n+\t\t<keyword>Result</keyword>\n+    </context>\n+\n+    <context id=\"ctypes\" style-ref=\"type\">\n+\t\t<keyword>c_float</keyword>\n+\t\t<keyword>c_double</keyword>\n+\t\t<keyword>c_void</keyword>\n+\t\t<keyword>FILE</keyword>\n+\t\t<keyword>fpos_t</keyword>\n+\t\t<keyword>DIR</keyword>\n+\t\t<keyword>dirent</keyword>\n+\t\t<keyword>c_char</keyword>\n+\t\t<keyword>c_schar</keyword>\n+\t\t<keyword>c_uchar</keyword>\n+\t\t<keyword>c_short</keyword>\n+\t\t<keyword>c_ushort</keyword>\n+\t\t<keyword>c_int</keyword>\n+\t\t<keyword>c_uint</keyword>\n+\t\t<keyword>c_long</keyword>\n+\t\t<keyword>c_ulong</keyword>\n+\t\t<keyword>size_t</keyword>\n+\t\t<keyword>ptrdiff_t</keyword>\n+\t\t<keyword>clock_t</keyword>\n+\t\t<keyword>time_t</keyword>\n+\t\t<keyword>c_longlong</keyword>\n+\t\t<keyword>c_ulonglong</keyword>\n+\t\t<keyword>intptr_t</keyword>\n+\t\t<keyword>uintptr_t</keyword>\n+\t\t<keyword>off_t</keyword>\n+\t\t<keyword>dev_t</keyword>\n+\t\t<keyword>ino_t</keyword>\n+\t\t<keyword>pid_t</keyword>\n+\t\t<keyword>mode_t</keyword>\n+\t\t<keyword>ssize_t</keyword>\n+    </context>\n+    \n+    <context id=\"self\" style-ref=\"identifier\">\n+\t\t<keyword>self</keyword>\n+    </context>\n+    \n+    <context id=\"constants\" style-ref=\"constant\">\n+\t\t<keyword>true</keyword>\n+\t\t<keyword>false</keyword>\n+\t\t<keyword>Some</keyword>\n+\t\t<keyword>None</keyword>\n+\t\t<keyword>Left</keyword>\n+\t\t<keyword>Right</keyword>\n+\t\t<keyword>Ok</keyword>\n+\t\t<keyword>Err</keyword>\n+\t\t<keyword>Success</keyword>\n+\t\t<keyword>Failure</keyword>\n+\t\t<keyword>Cons</keyword>\n+\t\t<keyword>Nil</keyword>\n+    </context>\n+\n+    <context id=\"cconstants\" style-ref=\"constant\">\n+\t\t<keyword>EXIT_FAILURE</keyword>\n+\t\t<keyword>EXIT_SUCCESS</keyword>\n+\t\t<keyword>RAND_MAX</keyword>\n+\t\t<keyword>EOF</keyword>\n+\t\t<keyword>SEEK_SET</keyword>\n+\t\t<keyword>SEEK_CUR</keyword>\n+\t\t<keyword>SEEK_END</keyword>\n+\t\t<keyword>_IOFBF</keyword>\n+\t\t<keyword>_IONBF</keyword>\n+\t\t<keyword>_IOLBF</keyword>\n+\t\t<keyword>BUFSIZ</keyword>\n+\t\t<keyword>FOPEN_MAX</keyword>\n+\t\t<keyword>FILENAME_MAX</keyword>\n+\t\t<keyword>L_tmpnam</keyword>\n+\t\t<keyword>TMP_MAX</keyword>\n+\t\t<keyword>O_RDONLY</keyword>\n+\t\t<keyword>O_WRONLY</keyword>\n+\t\t<keyword>O_RDWR</keyword>\n+\t\t<keyword>O_APPEND</keyword>\n+\t\t<keyword>O_CREAT</keyword>\n+\t\t<keyword>O_EXCL</keyword>\n+\t\t<keyword>O_TRUNC</keyword>\n+\t\t<keyword>S_IFIFO</keyword>\n+\t\t<keyword>S_IFCHR</keyword>\n+\t\t<keyword>S_IFBLK</keyword>\n+\t\t<keyword>S_IFDIR</keyword>\n+\t\t<keyword>S_IFREG</keyword>\n+\t\t<keyword>S_IFMT</keyword>\n+\t\t<keyword>S_IEXEC</keyword>\n+\t\t<keyword>S_IWRITE</keyword>\n+\t\t<keyword>S_IREAD</keyword>\n+\t\t<keyword>S_IRWXU</keyword>\n+\t\t<keyword>S_IXUSR</keyword>\n+\t\t<keyword>S_IWUSR</keyword>\n+\t\t<keyword>S_IRUSR</keyword>\n+\t\t<keyword>F_OK</keyword>\n+\t\t<keyword>R_OK</keyword>\n+\t\t<keyword>W_OK</keyword>\n+\t\t<keyword>X_OK</keyword>\n+\t\t<keyword>STDIN_FILENO</keyword>\n+\t\t<keyword>STDOUT_FILENO</keyword>\n+\t\t<keyword>STDERR_FILENO</keyword>\n+    </context>\n+\n+    <context id=\"line-comment\" style-ref=\"comment\" end-at-line-end=\"true\" class=\"comment\" class-disabled=\"no-spell-check\">\n+      <start>//</start>\n+      <include>\n+        <context ref=\"def:in-line-comment\"/>\n+      </include>\n+    </context>\n+\n+    <context id=\"block-comment\" style-ref=\"comment\" class=\"comment\" class-disabled=\"no-spell-check\">\n+      <start>/\\*</start>\n+      <end>\\*/</end>\n+      <include>\n+        <context ref=\"def:in-comment\"/>\n+      </include>\n+    </context>\n+\n+    <context id=\"number\" style-ref=\"number\">\n+      <match extended=\"true\">\n+        (?&lt;![\\w\\.])\n+        (\n+        0x[0-9a-fA-F_]+(u8|u16|u32|u64|i8|i16|i32|i64|u|i)?|\n+        0b[0-1_]+(u8|u16|u32|u64|i8|i16|i32|i64|u|i)?|\n+        [0-9][0-9_]*\\.[0-9_]*([eE][+-]?[0-9_]+)?(f32|f64|f)?|\n+        [0-9][0-9_]*(u8|u16|u32|u64|i8|i16|i32|i64|u|i)?\n+        )\n+        (?![\\w\\.])\n+      </match>\n+    </context>\n+\n+    <context id=\"scope\" style-ref=\"scope\">\n+      <match extended=\"true\">\n+        [a-zA-Z_][a-zA-Z0-9_]*::\n+      </match>\n+    </context>\n+\n+    <context id=\"string\" style-ref=\"string\" class=\"string\" class-disabled=\"no-spell-check\">\n+      <start>\"</start>\n+      <end>\"</end>\n+      <include>\n+        <context ref=\"def:escape\"/>\n+        <context ref=\"def:line-continue\"/>\n+      </include>\n+    </context>\n+\n+    <context id=\"char\" style-ref=\"char\" end-at-line-end=\"true\" class=\"char\" class-disabled=\"no-spell-check\">\n+      <start>'</start>\n+      <end>'</end>\n+      <include>\n+        <context ref=\"def:escape\"/>\n+      </include>\n+    </context>\n+\n+    <context id=\"rust\" class=\"no-spell-check\">\n+      <include>\n+        <context ref=\"function\"/>\n+        <context ref=\"type\"/>\n+        <context ref=\"keywords\"/>\n+        <context ref=\"types\"/>\n+        <context ref=\"ctypes\"/>\n+        <context ref=\"self\"/>\n+        <context ref=\"constants\"/>\n+        <context ref=\"cconstants\"/>\n+        <context ref=\"line-comment\"/>\n+        <context ref=\"block-comment\"/>\n+        <context ref=\"number\"/>\n+        <context ref=\"scope\"/>\n+        <context ref=\"string\"/>\n+        <context ref=\"char\"/>\n+      </include>\n+    </context>\n+\n+  </definitions>\n+\n+</language>\n+"}, {"sha": "65168aae1d909d17f24aa317a74a82e953fcd969", "filename": "src/etc/gedit/share/mime/packages/rust.xml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fetc%2Fgedit%2Fshare%2Fmime%2Fpackages%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fetc%2Fgedit%2Fshare%2Fmime%2Fpackages%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fmime%2Fpackages%2Frust.xml?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -0,0 +1,7 @@\n+<mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'>\n+  <mime-type type=\"text/x-rust\">\n+    <comment>Rust Source</comment>\n+    <glob pattern=\"*.rs\"/>\n+    <glob pattern=\"*.rc\"/>    \n+  </mime-type>\n+</mime-info>"}, {"sha": "6c35c62c3a7050aeba43782de025ed423065dfc4", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -28,7 +28,7 @@ pub pure fn empty_cell<T>() -> Cell<T> {\n     Cell { value: None }\n }\n \n-impl<T> Cell<T> {\n+pub impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     fn take() -> T {\n         if self.is_empty() {"}, {"sha": "b0825816626791a3929465adad458b190dfd5fda", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Transitional -- needs snapshot\n-#[allow(structural_records)];\n-\n use either::{Either, Left, Right};\n use kinds::Owned;\n use option;\n@@ -190,7 +187,7 @@ pub fn PortSet<T: Owned>() -> PortSet<T>{\n     }\n }\n \n-impl<T: Owned> PortSet<T> {\n+pub impl<T: Owned> PortSet<T> {\n \n     fn add(port: Port<T>) {\n         self.ports.push(port)\n@@ -323,12 +320,12 @@ pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n     (port, chan)\n }\n \n-impl<T: Owned> PortOne<T> {\n+pub impl<T: Owned> PortOne<T> {\n     fn recv(self) -> T { recv_one(self) }\n     fn try_recv(self) -> Option<T> { try_recv_one(self) }\n }\n \n-impl<T: Owned> ChanOne<T> {\n+pub impl<T: Owned> ChanOne<T> {\n     fn send(self, data: T) { send_one(self, data) }\n     fn try_send(self, data: T) -> bool { try_send_one(self, data) }\n }"}, {"sha": "00048beae5acb831b01f959c49fc0682d370a73f", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -25,7 +25,7 @@ pub struct Condition<T, U> {\n     key: task::local_data::LocalDataKey<Handler<T, U>>\n }\n \n-impl<T, U> Condition<T, U> {\n+pub impl<T, U> Condition<T, U> {\n     fn trap(&self, h: &self/fn(T) -> U) -> Trap/&self<T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n@@ -69,7 +69,7 @@ struct Trap<T, U> {\n     handler: @Handler<T, U>\n }\n \n-impl<T, U> Trap<T, U> {\n+pub impl<T, U> Trap<T, U> {\n     fn in<V>(&self, inner: &self/fn() -> V) -> V {\n         unsafe {\n             let _g = Guard { cond: self.cond };"}, {"sha": "91eb61e342ed7d450787afb28783357bcaba4045", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -227,10 +227,6 @@ pub const debug : u32 = 4_u32;\n \n // The runtime interface used by the compiler\n #[cfg(notest)] pub mod rt;\n-// The runtime and compiler interface to fmt!\n-#[cfg(stage0)]\n-#[path = \"private/extfmt.rs\"]\n-pub mod extfmt;\n // Private APIs\n pub mod private;\n "}, {"sha": "f1f4e55866101b05284475fc77cc6d2505690d25", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -62,7 +62,7 @@ priv impl<T> DListNode<T> {\n     }\n }\n \n-impl<T> DListNode<T> {\n+pub impl<T> DListNode<T> {\n     /// Get the next node in the list, if there is one.\n     pure fn next_link(@mut self) -> DListLink<T> {\n         self.assert_links();\n@@ -208,7 +208,7 @@ priv impl<T> DList<T> {\n     }\n }\n \n-impl<T> DList<T> {\n+pub impl<T> DList<T> {\n     /// Get the size of the list. O(1).\n     pure fn len(@mut self) -> uint { self.size }\n     /// Returns true if the list is empty. O(1).\n@@ -457,7 +457,7 @@ impl<T> DList<T> {\n     }\n }\n \n-impl<T:Copy> DList<T> {\n+pub impl<T:Copy> DList<T> {\n     /// Remove data from the head of the list. O(1).\n     fn pop(@mut self) -> Option<T> {\n         self.pop_n().map(|nobe| nobe.data)"}, {"sha": "1fef4ad42f1de83ab1e2ae4381a3eea2cf3cfbe6", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -92,17 +92,6 @@ priv impl<A> DVec<A> {\n         }\n     }\n \n-    #[inline(always)]\n-    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n-        unsafe {\n-            let mut data = cast::reinterpret_cast(&null::<()>());\n-            data <-> self.data;\n-            let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n-            return f(data);\n-        }\n-    }\n-\n     #[inline(always)]\n     fn give_back(data: ~[A]) {\n         unsafe {\n@@ -117,7 +106,19 @@ priv impl<A> DVec<A> {\n // In theory, most everything should work with any A, but in practice\n // almost nothing works without the copy bound due to limitations\n // around closures.\n-impl<A> DVec<A> {\n+pub impl<A> DVec<A> {\n+    // FIXME (#3758): This should not need to be public.\n+    #[inline(always)]\n+    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n+        unsafe {\n+            let mut data = cast::reinterpret_cast(&null::<()>());\n+            data <-> self.data;\n+            let data_ptr: *() = cast::reinterpret_cast(&data);\n+            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n+            return f(data);\n+        }\n+    }\n+\n     /// Reserves space for N elements\n     fn reserve(count: uint) {\n         vec::reserve(&mut self.data, count)\n@@ -215,7 +216,7 @@ impl<A> DVec<A> {\n     }\n }\n \n-impl<A:Copy> DVec<A> {\n+pub impl<A:Copy> DVec<A> {\n     /**\n      * Append all elements of a vector to the end of the list\n      *"}, {"sha": "c2a39cfdcc3e6de8b50af3d6cd9225abdb008f44", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,14 +10,12 @@\n \n //! Sendable hash maps.\n \n-use container::{Container, Mutable, Map, Set};\n-use cmp::Eq;\n-use hash::Hash;\n-use to_bytes::IterBytes;\n-\n /// Open addressing with linear probing.\n pub mod linear {\n-    use super::*;\n+    use container::{Container, Mutable, Map, Set};\n+    use cmp::Eq;\n+    use hash::Hash;\n+    use to_bytes::IterBytes;\n     use iter::BaseIter;\n     use hash::Hash;\n     use iter;\n@@ -752,7 +750,8 @@ mod test_map {\n \n #[test]\n mod test_set {\n-    use super::*;\n+    use hashmap::linear;\n+    use container::{Container, Mutable, Map, Set};\n     use vec;\n \n     #[test]"}, {"sha": "fdb622f653937a74e7675f8f564191b10247f929", "filename": "src/libcore/io.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -504,7 +504,7 @@ pub fn FILE_reader(f: *libc::FILE, cleanup: bool) -> @Reader {\n \n pub fn stdin() -> @Reader {\n     unsafe {\n-        rustrt::rust_get_stdin() as @Reader\n+        @rustrt::rust_get_stdin() as @Reader\n     }\n }\n \n@@ -642,11 +642,11 @@ impl Writer for *libc::FILE {\n     }\n }\n \n-pub fn FILE_writer(f: *libc::FILE, cleanup: bool) -> Writer {\n+pub fn FILE_writer(f: *libc::FILE, cleanup: bool) -> @Writer {\n     if cleanup {\n-        Wrapper { base: f, cleanup: FILERes(f) } as Writer\n+        @Wrapper { base: f, cleanup: FILERes(f) } as @Writer\n     } else {\n-        f as Writer\n+        @f as @Writer\n     }\n }\n \n@@ -702,11 +702,11 @@ pub fn FdRes(fd: fd_t) -> FdRes {\n     }\n }\n \n-pub fn fd_writer(fd: fd_t, cleanup: bool) -> Writer {\n+pub fn fd_writer(fd: fd_t, cleanup: bool) -> @Writer {\n     if cleanup {\n-        Wrapper { base: fd, cleanup: FdRes(fd) } as Writer\n+        @Wrapper { base: fd, cleanup: FdRes(fd) } as @Writer\n     } else {\n-        fd as Writer\n+        @fd as @Writer\n     }\n }\n "}, {"sha": "f888fbdb40cc6421e1bf33a16db0ea4828fd5191", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -43,7 +43,7 @@ pub fn unwrap<T>(m: Mut<T>) -> T {\n     value\n }\n \n-impl<T> Data<T> {\n+pub impl<T> Data<T> {\n     fn borrow_mut<R>(op: &fn(t: &mut T) -> R) -> R {\n         match self.mode {\n             Immutable => fail!(fmt!(\"%? currently immutable\","}, {"sha": "53944c4c2c8252f378f1e13ffad85682075b53cb", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -281,7 +281,7 @@ pub pure fn expect<T>(opt: Option<T>, reason: &str) -> T {\n     }\n }\n \n-impl<T> Option<T> {\n+pub impl<T> Option<T> {\n     /// Returns true if the option equals `none`\n     #[inline(always)]\n     pure fn is_none(&self) -> bool { is_none(self) }\n@@ -393,7 +393,7 @@ impl<T> Option<T> {\n     pure fn expect(self, reason: &str) -> T { expect(self, reason) }\n }\n \n-impl<T:Copy> Option<T> {\n+pub impl<T:Copy> Option<T> {\n     /**\n     Gets the value out of an option\n \n@@ -421,7 +421,7 @@ impl<T:Copy> Option<T> {\n     }\n }\n \n-impl<T:Copy + Zero> Option<T> {\n+pub impl<T:Copy + Zero> Option<T> {\n     #[inline(always)]\n     pure fn get_or_zero(self) -> T { get_or_zero(self) }\n }"}, {"sha": "8b6d27496d9097ca585d5d0da4573607efa8a486", "filename": "src/libcore/os.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -1021,10 +1021,10 @@ extern {\n pub mod consts {\n \n     #[cfg(unix)]\n-    use os::consts::unix::*;\n+    pub use os::consts::unix::*;\n \n     #[cfg(windows)]\n-    use os::consts::windows::*;\n+    pub use os::consts::windows::*;\n \n     pub mod unix {\n         pub const FAMILY: &str = \"unix\";\n@@ -1035,19 +1035,19 @@ pub mod consts {\n     }\n \n     #[cfg(target_os = \"macos\")]\n-    use os::consts::macos::*;\n+    pub use os::consts::macos::*;\n \n     #[cfg(target_os = \"freebsd\")]\n-    use os::consts::freebsd::*;\n+    pub use os::consts::freebsd::*;\n \n     #[cfg(target_os = \"linux\")]\n-    use os::consts::linux::*;\n+    pub use os::consts::linux::*;\n \n     #[cfg(target_os = \"android\")]\n-    use os::consts::android::*;\n+    pub use os::consts::android::*;\n \n     #[cfg(target_os = \"win32\")]\n-    use os::consts::win32::*;\n+    pub use os::consts::win32::*;\n \n     pub mod macos {\n         pub const SYSNAME: &str = \"macos\";\n@@ -1086,13 +1086,13 @@ pub mod consts {\n \n \n     #[cfg(target_arch = \"x86\")]\n-    use os::consts::x86::*;\n+    pub use os::consts::x86::*;\n \n     #[cfg(target_arch = \"x86_64\")]\n-    use os::consts::x86_64::*;\n+    pub use os::consts::x86_64::*;\n \n     #[cfg(target_arch = \"arm\")]\n-    use os::consts::arm::*;\n+    pub use os::consts::arm::*;\n \n     pub mod x86 {\n         pub const ARCH: &str = \"x86\";"}, {"sha": "4e0e4e93cf5ae29a01f88b814c9dd95de1853d8a", "filename": "src/libcore/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -241,7 +241,7 @@ mod stat {\n }\n \n \n-impl Path {\n+pub impl Path {\n     fn stat(&self) -> Option<libc::stat> {\n         unsafe {\n              do str::as_c_str(self.to_str()) |buf| {\n@@ -290,7 +290,7 @@ impl Path {\n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n-impl Path {\n+pub impl Path {\n     fn get_atime(&self) -> Option<(i64, int)> {\n         match self.stat() {\n             None => None,\n@@ -324,7 +324,7 @@ impl Path {\n \n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"macos\")]\n-impl Path {\n+pub impl Path {\n     fn get_birthtime(&self) -> Option<(i64, int)> {\n         match self.stat() {\n             None => None,\n@@ -337,7 +337,7 @@ impl Path {\n }\n \n #[cfg(target_os = \"win32\")]\n-impl Path {\n+pub impl Path {\n     fn get_atime(&self) -> Option<(i64, int)> {\n         match self.stat() {\n             None => None,"}, {"sha": "77554656913c4f4aafaabe3249932bc012af475b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -82,8 +82,6 @@ bounded and unbounded protocols allows for less code duplication.\n \n */\n \n-#[allow(structural_records)]; // Macros -- needs another snapshot\n-\n use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};\n use cell::Cell;\n@@ -800,7 +798,7 @@ pub fn SendPacketBuffered<T,Tbuffer>(p: *Packet<T>)\n     }\n }\n \n-impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n+pub impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;\n@@ -857,7 +855,7 @@ impl<T:Owned,Tbuffer:Owned> ::ops::Drop for RecvPacketBuffered<T,Tbuffer> {\n     }\n }\n \n-impl<T:Owned,Tbuffer:Owned> RecvPacketBuffered<T, Tbuffer> {\n+pub impl<T:Owned,Tbuffer:Owned> RecvPacketBuffered<T, Tbuffer> {\n     fn unwrap() -> *Packet<T> {\n         let mut p = None;\n         p <-> self.p;"}, {"sha": "d19951e76dbd5e102c09075584a974caa0a63f00", "filename": "src/libcore/private.rs", "status": "modified", "additions": 6, "deletions": 188, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -107,20 +107,9 @@ fn compare_and_swap(address: &mut int, oldval: int, newval: int) -> bool {\n  * Shared state & exclusive ARC\n  ****************************************************************************/\n \n-struct UnwrapProtoInner {\n-    contents: Option<(comm::ChanOne<()>,  comm::PortOne<bool>)>,\n-}\n-\n-// An unwrapper uses this protocol to communicate with the \"other\" task that\n-// drops the last refcount on an arc. Unfortunately this can't be a proper\n-// pipe protocol because the unwrapper has to access both stages at once.\n-type UnwrapProto = ~UnwrapProtoInner;\n-\n struct ArcData<T> {\n     mut count:     libc::intptr_t,\n-    mut unwrapper: int, // either a UnwrapProto or 0\n-    // FIXME(#3224) should be able to make this non-option to save memory, and\n-    // in unwrap() use \"let ~ArcData { data: result, _ } = thing\" to unwrap it\n+    // FIXME(#3224) should be able to make this non-option to save memory\n     mut data:      Option<T>,\n }\n \n@@ -131,37 +120,13 @@ struct ArcDestruct<T> {\n impl<T> Drop for ArcDestruct<T>{\n     fn finalize(&self) {\n         unsafe {\n-            if self.data.is_null() {\n-                return; // Happens when destructing an unwrapper's handle.\n-            }\n             do task::unkillable {\n                 let data: ~ArcData<T> = cast::reinterpret_cast(&self.data);\n                 let new_count =\n                     intrinsics::atomic_xsub(&mut data.count, 1) - 1;\n                 assert new_count >= 0;\n                 if new_count == 0 {\n-                    // Were we really last, or should we hand off to an\n-                    // unwrapper? It's safe to not xchg because the unwrapper\n-                    // will set the unwrap lock *before* dropping his/her\n-                    // reference. In effect, being here means we're the only\n-                    // *awake* task with the data.\n-                    if data.unwrapper != 0 {\n-                        let mut p: UnwrapProto =\n-                            cast::reinterpret_cast(&data.unwrapper);\n-                        let (message, response) =\n-                            option::swap_unwrap(&mut p.contents);\n-                        // Send 'ready' and wait for a response.\n-                        comm::send_one(message, ());\n-                        // Unkillable wait. Message guaranteed to come.\n-                        if comm::recv_one(response) {\n-                            // Other task got the data.\n-                            cast::forget(data);\n-                        } else {\n-                            // Other task was killed. drop glue takes over.\n-                        }\n-                    } else {\n-                        // drop glue takes over.\n-                    }\n+                    // drop glue takes over.\n                 } else {\n                     cast::forget(data);\n                 }\n@@ -176,79 +141,6 @@ fn ArcDestruct<T>(data: *libc::c_void) -> ArcDestruct<T> {\n     }\n }\n \n-pub unsafe fn unwrap_shared_mutable_state<T:Owned>(rc: SharedMutableState<T>)\n-        -> T {\n-    struct DeathThroes<T> {\n-        mut ptr:      Option<~ArcData<T>>,\n-        mut response: Option<comm::ChanOne<bool>>,\n-    }\n-\n-    impl<T> Drop for DeathThroes<T>{\n-        fn finalize(&self) {\n-            unsafe {\n-                let response = option::swap_unwrap(&mut self.response);\n-                // In case we get killed early, we need to tell the person who\n-                // tried to wake us whether they should hand-off the data to\n-                // us.\n-                if task::failing() {\n-                    comm::send_one(response, false);\n-                    // Either this swap_unwrap or the one below (at \"Got\n-                    // here\") ought to run.\n-                    cast::forget(option::swap_unwrap(&mut self.ptr));\n-                } else {\n-                    assert self.ptr.is_none();\n-                    comm::send_one(response, true);\n-                }\n-            }\n-        }\n-    }\n-\n-    do task::unkillable {\n-        let ptr: ~ArcData<T> = cast::reinterpret_cast(&rc.data);\n-        let (p1,c1) = comm::oneshot(); // ()\n-        let (p2,c2) = comm::oneshot(); // bool\n-        let mut server: UnwrapProto = ~UnwrapProtoInner {\n-            contents: Some((c1,p2))\n-        };\n-        let serverp: int = cast::transmute(server);\n-        // Try to put our server end in the unwrapper slot.\n-        if compare_and_swap(&mut ptr.unwrapper, 0, serverp) {\n-            // Got in. Step 0: Tell destructor not to run. We are now it.\n-            rc.data = ptr::null();\n-            // Step 1 - drop our own reference.\n-            let new_count = intrinsics::atomic_xsub(&mut ptr.count, 1) - 1;\n-            //assert new_count >= 0;\n-            if new_count == 0 {\n-                // We were the last owner. Can unwrap immediately.\n-                // Also we have to free the server endpoints.\n-                let _server: UnwrapProto = cast::transmute(serverp);\n-                option::swap_unwrap(&mut ptr.data)\n-                // drop glue takes over.\n-            } else {\n-                // The *next* person who sees the refcount hit 0 will wake us.\n-                let end_result =\n-                    DeathThroes { ptr: Some(ptr),\n-                                  response: Some(c2) };\n-                let mut p1 = Some(p1); // argh\n-                do task::rekillable {\n-                    comm::recv_one(option::swap_unwrap(&mut p1));\n-                }\n-                // Got here. Back in the 'unkillable' without getting killed.\n-                // Recover ownership of ptr, then take the data out.\n-                let ptr = option::swap_unwrap(&mut end_result.ptr);\n-                option::swap_unwrap(&mut ptr.data)\n-                // drop glue takes over.\n-            }\n-        } else {\n-            // Somebody else was trying to unwrap. Avoid guaranteed deadlock.\n-            cast::forget(ptr);\n-            // Also we have to free the (rejected) server endpoints.\n-            let _server: UnwrapProto = cast::transmute(serverp);\n-            fail!(~\"Another task is already unwrapping this ARC!\");\n-        }\n-    }\n-}\n-\n /**\n  * COMPLETELY UNSAFE. Used as a primitive for the safe versions in std::arc.\n  *\n@@ -259,7 +151,7 @@ pub type SharedMutableState<T> = ArcDestruct<T>;\n \n pub unsafe fn shared_mutable_state<T:Owned>(data: T) ->\n         SharedMutableState<T> {\n-    let data = ~ArcData { count: 1, unwrapper: 0, data: Some(data) };\n+    let data = ~ArcData { count: 1, data: Some(data) };\n     unsafe {\n         let ptr = cast::transmute(data);\n         ArcDestruct(ptr)\n@@ -335,7 +227,7 @@ fn LittleLock() -> LittleLock {\n     }\n }\n \n-impl LittleLock {\n+pub impl LittleLock {\n     #[inline(always)]\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n         struct Unlock {\n@@ -381,7 +273,7 @@ impl<T:Owned> Clone for Exclusive<T> {\n     }\n }\n \n-impl<T:Owned> Exclusive<T> {\n+pub impl<T:Owned> Exclusive<T> {\n     // Exactly like std::arc::mutex_arc,access(), but with the little_lock\n     // instead of a proper mutex. Same reason for being unsafe.\n     //\n@@ -413,22 +305,14 @@ impl<T:Owned> Exclusive<T> {\n     }\n }\n \n-// FIXME(#3724) make this a by-move method on the exclusive\n-pub fn unwrap_exclusive<T:Owned>(arc: Exclusive<T>) -> T {\n-    let Exclusive { x: x } = arc;\n-    let inner = unsafe { unwrap_shared_mutable_state(x) };\n-    let ExData { data: data, _ } = inner;\n-    data\n-}\n-\n #[cfg(test)]\n pub mod tests {\n     use core::option::{None, Some};\n \n     use cell::Cell;\n     use comm;\n     use option;\n-    use private::{exclusive, unwrap_exclusive};\n+    use private::exclusive;\n     use result;\n     use task;\n     use uint;\n@@ -479,70 +363,4 @@ pub mod tests {\n             assert *one == 1;\n         }\n     }\n-\n-    #[test]\n-    pub fn exclusive_unwrap_basic() {\n-        let x = exclusive(~~\"hello\");\n-        assert unwrap_exclusive(x) == ~~\"hello\";\n-    }\n-\n-    #[test]\n-    pub fn exclusive_unwrap_contended() {\n-        let x = exclusive(~~\"hello\");\n-        let x2 = Cell(x.clone());\n-        do task::spawn {\n-            let x2 = x2.take();\n-            do x2.with |_hello| { }\n-            task::yield();\n-        }\n-        assert unwrap_exclusive(x) == ~~\"hello\";\n-\n-        // Now try the same thing, but with the child task blocking.\n-        let x = exclusive(~~\"hello\");\n-        let x2 = Cell(x.clone());\n-        let mut res = None;\n-        do task::task().future_result(|+r| res = Some(r)).spawn {\n-            let x2 = x2.take();\n-            assert unwrap_exclusive(x2) == ~~\"hello\";\n-        }\n-        // Have to get rid of our reference before blocking.\n-        { let _x = x; } // FIXME(#3161) util::ignore doesn't work here\n-        let res = option::swap_unwrap(&mut res);\n-        res.recv();\n-    }\n-\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n-    pub fn exclusive_unwrap_conflict() {\n-        let x = exclusive(~~\"hello\");\n-        let x2 = Cell(x.clone());\n-        let mut res = None;\n-        do task::task().future_result(|+r| res = Some(r)).spawn {\n-            let x2 = x2.take();\n-            assert unwrap_exclusive(x2) == ~~\"hello\";\n-        }\n-        assert unwrap_exclusive(x) == ~~\"hello\";\n-        let res = option::swap_unwrap(&mut res);\n-        // See #4689 for why this can't be just \"res.recv()\".\n-        assert res.recv() == task::Success;\n-    }\n-\n-    #[test] #[ignore(cfg(windows))]\n-    pub fn exclusive_unwrap_deadlock() {\n-        // This is not guaranteed to get to the deadlock before being killed,\n-        // but it will show up sometimes, and if the deadlock were not there,\n-        // the test would nondeterministically fail.\n-        let result = do task::try {\n-            // a task that has two references to the same exclusive will\n-            // deadlock when it unwraps. nothing to be done about that.\n-            let x = exclusive(~~\"hello\");\n-            let x2 = x.clone();\n-            do task::spawn {\n-                for 10.times { task::yield(); } // try to let the unwrapper go\n-                fail!(); // punt it awake from its deadlock\n-            }\n-            let _z = unwrap_exclusive(x);\n-            do x2.with |_hello| { }\n-        };\n-        assert result.is_err();\n-    }\n }"}, {"sha": "616d37a133a9f18af4e6b5fba03105a5754c3cc0", "filename": "src/libcore/private/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fprivate%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fprivate%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fextfmt.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -142,7 +142,7 @@ pub mod ct {\n         next: uint\n     }\n \n-    impl<T> Parsed<T> {\n+    pub impl<T> Parsed<T> {\n         static pure fn new(val: T, next: uint) -> Parsed<T> {\n             Parsed {val: val, next: next}\n         }"}, {"sha": "ff75963511c3806cced8bf47f7a970e2c67e6ad5", "filename": "src/libcore/private/finally.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fprivate%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fprivate%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Ffinally.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -26,33 +26,10 @@ do || {\n use ops::Drop;\n use task::{spawn, failing};\n \n-#[cfg(stage0)]\n-pub trait Finally<T> {\n-    fn finally(&self, +dtor: &fn()) -> T;\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub trait Finally<T> {\n     fn finally(&self, dtor: &fn()) -> T;\n }\n \n-#[cfg(stage0)]\n-impl<T> Finally<T> for &fn() -> T {\n-    // FIXME #4518: Should not require a mode here\n-    fn finally(&self, +dtor: &fn()) -> T {\n-        let _d = Finallyalizer {\n-            dtor: dtor\n-        };\n-\n-        (*self)()\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n impl<T> Finally<T> for &fn() -> T {\n     fn finally(&self, dtor: &fn()) -> T {\n         let _d = Finallyalizer {"}, {"sha": "d9c2b91fb972207a813406ba3d8a88009b47dfac", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -141,7 +141,7 @@ pub struct Weighted<T> {\n }\n \n /// Extension methods for random number generators\n-impl Rng {\n+pub impl Rng {\n     /// Return a random value for a Rand type\n     fn gen<T:Rand>() -> T {\n         Rand::rand(self)\n@@ -412,8 +412,8 @@ pub fn Rng() -> Rng {\n  * all other generators constructed with the same seed. The seed may be any\n  * length.\n  */\n-pub fn seeded_rng(seed: &[u8]) -> Rng {\n-    seeded_randres(seed) as Rng\n+pub fn seeded_rng(seed: &[u8]) -> @Rng {\n+    @seeded_randres(seed) as @Rng\n }\n \n fn seeded_randres(seed: &[u8]) -> @RandRes {\n@@ -449,8 +449,8 @@ pub pure fn xorshift() -> Rng {\n     seeded_xorshift(123456789u32, 362436069u32, 521288629u32, 88675123u32)\n }\n \n-pub pure fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> Rng {\n-    XorShiftState { x: x, y: y, z: z, w: w } as Rng\n+pub pure fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> @Rng {\n+    @XorShiftState { x: x, y: y, z: z, w: w } as @Rng\n }\n \n \n@@ -472,10 +472,10 @@ pub fn task_rng() -> Rng {\n             unsafe {\n                 let rng = seeded_randres(seed());\n                 task::local_data::local_data_set(tls_rng_state, rng);\n-                rng as Rng\n+                @rng as @Rng\n             }\n         }\n-        Some(rng) => rng as Rng\n+        Some(rng) => @rng as @Rng\n     }\n }\n "}, {"sha": "2a688482f6186f8e2bf84387b165fd513605d04a", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -45,7 +45,7 @@ pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n     MovePtrAdaptor { inner: v }\n }\n \n-impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n+pub impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n     #[inline(always)]\n     fn bump(sz: uint) {\n       do self.inner.move_ptr() |p| {"}, {"sha": "af135339b2e6f71cf3d00b19ede74680639fbb43", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -167,7 +167,7 @@ impl MovePtr for ReprVisitor {\n     }\n }\n \n-impl ReprVisitor {\n+pub impl ReprVisitor {\n \n     // Various helpers for the TyVisitor impl\n \n@@ -201,7 +201,7 @@ impl ReprVisitor {\n         unsafe {\n             let mut u = ReprVisitor(ptr, self.writer);\n             let v = reflect::MovePtrAdaptor(u);\n-            visit_tydesc(inner, (v) as @TyVisitor);\n+            visit_tydesc(inner, @v as @TyVisitor);\n             true\n         }\n     }\n@@ -570,7 +570,7 @@ pub fn write_repr<T>(writer: @Writer, object: &T) {\n         let tydesc = intrinsic::get_tydesc::<T>();\n         let mut u = ReprVisitor(ptr, writer);\n         let v = reflect::MovePtrAdaptor(u);\n-        visit_tydesc(tydesc, (v) as @TyVisitor)\n+        visit_tydesc(tydesc, @v as @TyVisitor)\n     }\n }\n "}, {"sha": "ddcd1547841db5ae882b1735bde47563cfc28c6c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -228,7 +228,7 @@ pub pure fn map_err<T:Copy,E,F:Copy>(res: &Result<T, E>, op: fn(&E) -> F)\n     }\n }\n \n-impl<T, E> Result<T, E> {\n+pub impl<T, E> Result<T, E> {\n     #[inline(always)]\n     pure fn get_ref(&self) -> &self/T { get_ref(self) }\n \n@@ -261,7 +261,7 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n-impl<T:Copy,E> Result<T, E> {\n+pub impl<T:Copy,E> Result<T, E> {\n     #[inline(always)]\n     pure fn get(&self) -> T { get(self) }\n \n@@ -271,7 +271,7 @@ impl<T:Copy,E> Result<T, E> {\n     }\n }\n \n-impl<T, E: Copy> Result<T, E> {\n+pub impl<T, E: Copy> Result<T, E> {\n     #[inline(always)]\n     pure fn get_err(&self) -> E { get_err(self) }\n "}, {"sha": "e8cd9caaef66859434b6e7856102f0207f6c7e3b", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -288,7 +288,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n         finished: false,\n     };\n \n-    ProgRes(repr) as Program\n+    @ProgRes(repr) as @Program\n }\n \n fn read_all(rd: io::Reader) -> ~str {"}, {"sha": "8950a1d0c0268eea2d845d130b73d9f3084c7ff8", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,9 +10,6 @@\n \n #[doc(hidden)]; // FIXME #3538\n \n-#[legacy_modes]; // tjc: remove after snapshot\n-#[allow(deprecated_mode)];\n-\n use cast::reinterpret_cast;\n use ptr::offset;\n use sys::size_of;"}, {"sha": "6ee6d282841c73535ca37e5b111785b5fe3be83d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2375,6 +2375,7 @@ impl OwnedStr for ~str {\n #[cfg(test)]\n mod tests {\n     use char;\n+    use option::Some;\n     use debug;\n     use libc::c_char;\n     use libc;"}, {"sha": "df5a5af74cabfe15a07003c72f6ef58e59b2b01d", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -155,7 +155,7 @@ pub unsafe fn local_set<T:Durable>(\n     // does not have a reference associated with it, so it may become invalid\n     // when the box is destroyed.\n     let data_ptr = cast::reinterpret_cast(&data);\n-    let data_box = data as LocalData;\n+    let data_box = @data as @LocalData;\n     // Construct new entry to store in the map.\n     let new_entry = Some((keyval, data_ptr, data_box));\n     // Find a place to put it."}, {"sha": "49507897392de428f9dd0ecdb80dd36d9f40a883", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -232,7 +232,7 @@ priv impl TaskBuilder {\n     }\n }\n \n-impl TaskBuilder {\n+pub impl TaskBuilder {\n     /**\n      * Decouple the child task's failure from the parent's. If either fails,\n      * the other will not be killed."}, {"sha": "4d28c769b184fb7a2d04c8fd2e0e8231a406975b", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -1444,7 +1444,7 @@ pub fn each2<U, T>(v1: &[U], v2: &[T], f: fn(u: &U, t: &T) -> bool) {\n  * The total number of permutations produced is `len(v)!`.  If `v` contains\n  * repeated elements, then some permutations are repeated.\n  */\n-pure fn each_permutation<T:Copy>(v: &[T], put: fn(ts: &[T]) -> bool) {\n+pub pure fn each_permutation<T:Copy>(v: &[T], put: fn(ts: &[T]) -> bool) {\n     let ln = len(v);\n     if ln <= 1 {\n         put(v);\n@@ -2427,6 +2427,7 @@ impl<A:Copy> iter::CopyableNonstrictIter<A> for @[A] {\n mod tests {\n     use option::{None, Option, Some};\n     use option;\n+    use sys;\n     use vec::*;\n \n     fn square(n: uint) -> uint { return n * n; }"}, {"sha": "daf369f727991579af6189304712432f4633f71e", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -132,9 +132,8 @@ pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_table_method_map = 0x60,\n     tag_table_vtable_map = 0x61,\n     tag_table_adjustments = 0x62,\n-    tag_table_legacy_boxed_trait = 0x63,\n-    tag_table_moves_map = 0x64,\n-    tag_table_capture_map = 0x65\n+    tag_table_moves_map = 0x63,\n+    tag_table_capture_map = 0x64\n }\n \n pub const tag_item_trait_method_sort: uint = 0x70;\n@@ -155,6 +154,7 @@ pub const tag_lang_items_item_node_id: uint = 0x75;\n \n pub const tag_item_unnamed_field: uint = 0x76;\n pub const tag_items_data_item_struct_ctor: uint = 0x77;\n+pub const tag_items_data_item_visibility: uint = 0x78;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "ae4a223c1ae75a3e98b5ff376844967cfb364af4", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -234,6 +234,14 @@ pub fn struct_dtor(cstore: @mut cstore::CStore, def: ast::def_id)\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::struct_dtor(cdata, def.node)\n }\n+\n+pub fn get_method_visibility(cstore: @mut cstore::CStore,\n+                             def_id: ast::def_id)\n+                          -> ast::visibility {\n+    let cdata = cstore::get_crate_data(cstore, def_id.crate);\n+    decoder::get_method_visibility(cdata, def_id.node)\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "cbe2217c9fc9b8d2b556e195a5334ca4ac21bcf6", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -151,6 +151,16 @@ fn item_family(item: ebml::Doc) -> Family {\n     }\n }\n \n+fn item_visibility(item: ebml::Doc) -> ast::visibility {\n+    let visibility = reader::get_doc(item, tag_items_data_item_visibility);\n+    match reader::doc_as_u8(visibility) as char {\n+        'y' => ast::public,\n+        'n' => ast::private,\n+        'i' => ast::inherited,\n+        _ => fail!(~\"unknown visibility character\"),\n+    }\n+}\n+\n fn item_method_sort(item: ebml::Doc) -> char {\n     for reader::tagged_docs(item, tag_item_trait_method_sort) |doc| {\n         return str::from_bytes(reader::doc_data(doc))[0] as char;\n@@ -860,7 +870,7 @@ pub fn get_item_attrs(cdata: cmd,\n     }\n }\n \n-pure fn family_to_visibility(family: Family) -> ast::visibility {\n+pure fn struct_field_family_to_visibility(family: Family) -> ast::visibility {\n     match family {\n       PublicField => ast::public,\n       PrivateField => ast::private,\n@@ -883,7 +893,7 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n             result.push(ty::field_ty {\n                 ident: name,\n                 id: did, vis:\n-                family_to_visibility(f),\n+                struct_field_family_to_visibility(f),\n                 mutability: mt,\n             });\n         }\n@@ -900,6 +910,11 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     result\n }\n \n+pub fn get_method_visibility(cdata: cmd, id: ast::node_id)\n+                          -> ast::visibility {\n+    item_visibility(lookup_item(id, cdata.data))\n+}\n+\n fn family_has_type_params(fam: Family) -> bool {\n     match fam {\n       Const | ForeignType | Mod | ForeignMod | PublicField | PrivateField"}, {"sha": "7d2423c7c5d3ba0658a35a3cc47067a15997b484", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -383,14 +383,26 @@ fn encode_info_for_mod(ecx: @EncodeContext, ebml_w: writer::Encoder,\n     ebml_w.end_tag();\n }\n \n-fn encode_visibility(ebml_w: writer::Encoder, visibility: visibility) {\n+fn encode_struct_field_family(ebml_w: writer::Encoder,\n+                              visibility: visibility) {\n     encode_family(ebml_w, match visibility {\n         public => 'g',\n         private => 'j',\n         inherited => 'N'\n     });\n }\n \n+fn encode_visibility(ebml_w: writer::Encoder, visibility: visibility) {\n+    ebml_w.start_tag(tag_items_data_item_visibility);\n+    let ch = match visibility {\n+        public => 'y',\n+        private => 'n',\n+        inherited => 'i',\n+    };\n+    ebml_w.wr_str(str::from_char(ch));\n+    ebml_w.end_tag();\n+}\n+\n fn encode_self_type(ebml_w: writer::Encoder, self_type: ast::self_ty_) {\n     ebml_w.start_tag(tag_item_trait_method_self_ty);\n \n@@ -456,7 +468,7 @@ fn encode_info_for_struct(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         ebml_w.start_tag(tag_items_data_item);\n         debug!(\"encode_info_for_struct: doing %s %d\",\n                *tcx.sess.str_of(nm), id);\n-        encode_visibility(ebml_w, vis);\n+        encode_struct_field_family(ebml_w, vis);\n         encode_name(ecx, ebml_w, nm);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n@@ -525,6 +537,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n                           should_inline: bool,\n                           parent_id: node_id,\n                           m: @method,\n+                          parent_visibility: ast::visibility,\n                           owner_generics: &ast::Generics,\n                           method_generics: &ast::Generics) {\n     debug!(\"encode_info_for_method: %d %s %u %u\", m.id,\n@@ -533,6 +546,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n            method_generics.ty_params.len());\n     ebml_w.start_tag(tag_items_data_item);\n     encode_def_id(ebml_w, local_def(m.id));\n+\n     match m.self_ty.node {\n         ast::sty_static => {\n             encode_family(ebml_w, purity_static_method_family(m.purity));\n@@ -550,6 +564,14 @@ fn encode_info_for_method(ecx: @EncodeContext,\n     encode_name(ecx, ebml_w, m.ident);\n     encode_path(ecx, ebml_w, impl_path, ast_map::path_name(m.ident));\n     encode_self_type(ebml_w, m.self_ty.node);\n+\n+    // Combine parent visibility and this visibility.\n+    let visibility = match m.vis {\n+        ast::inherited => parent_visibility,\n+        vis => vis,\n+    };\n+    encode_visibility(ebml_w, visibility);\n+\n     if len > 0u || should_inline {\n         (ecx.encode_inlined_item)(\n            ecx, ebml_w, impl_path,\n@@ -568,6 +590,7 @@ fn purity_fn_family(p: purity) -> char {\n       extern_fn => 'e'\n     }\n }\n+\n fn purity_static_method_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'U',\n@@ -757,7 +780,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             match f.node.kind {\n                 named_field(ident, _, vis) => {\n                    ebml_w.start_tag(tag_item_field);\n-                   encode_visibility(ebml_w, vis);\n+                   encode_struct_field_family(ebml_w, vis);\n                    encode_name(ecx, ebml_w, ident);\n                    encode_def_id(ebml_w, local_def(f.node.id));\n                    ebml_w.end_tag();\n@@ -808,12 +831,28 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         let mut impl_path = vec::append(~[], path);\n         impl_path += ~[ast_map::path_name(item.ident)];\n \n+        // If there is a trait reference, treat the methods as always public.\n+        // This is to work around some incorrect behavior in privacy checking:\n+        // when the method belongs to a trait, it should acquire the privacy\n+        // from the trait, not the impl. Forcing the visibility to be public\n+        // makes things sorta work.\n+        let parent_visibility = if opt_trait.is_some() {\n+            ast::public\n+        } else {\n+            item.vis\n+        };\n+\n         for methods.each |m| {\n             index.push(entry {val: m.id, pos: ebml_w.writer.tell()});\n-            encode_info_for_method(ecx, ebml_w, impl_path,\n+            encode_info_for_method(ecx,\n+                                   ebml_w,\n+                                   impl_path,\n                                    should_inline(m.attrs),\n-                                   item.id, *m,\n-                                   generics, &m.generics);\n+                                   item.id,\n+                                   *m,\n+                                   parent_visibility,\n+                                   generics,\n+                                   &m.generics);\n         }\n       }\n       item_trait(ref generics, ref traits, ref ms) => {\n@@ -902,9 +941,15 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             // of provided methods.  I am not sure why this is. -ndm\n             let owner_generics = ast_util::empty_generics();\n \n-            encode_info_for_method(ecx, ebml_w, /*bad*/copy path,\n-                                   true, item.id, *m,\n-                                   &owner_generics, &m.generics);\n+            encode_info_for_method(ecx,\n+                                   ebml_w,\n+                                   /*bad*/copy path,\n+                                   true,\n+                                   item.id,\n+                                   *m,\n+                                   item.vis,\n+                                   &owner_generics,\n+                                   &m.generics);\n         }\n       }\n       item_mac(*) => fail!(~\"item macros unimplemented\")"}, {"sha": "1a7c7b0793a422f8cf33e419c43e1f9143345d14", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -71,11 +71,11 @@ pub fn mk_filesearch(maybe_sysroot: Option<Path>,\n \n     let sysroot = get_sysroot(maybe_sysroot);\n     debug!(\"using sysroot = %s\", sysroot.to_str());\n-    FileSearchImpl {\n+    @FileSearchImpl {\n         sysroot: sysroot,\n         addl_lib_search_paths: addl_lib_search_paths,\n         target_triple: str::from_slice(target_triple)\n-    } as FileSearch\n+    } as @FileSearch\n }\n \n pub fn search<T:Copy>(filesearch: FileSearch, pick: pick<T>) -> Option<T> {"}, {"sha": "222931d1829d3a8740902d2c8ab89d43e95c1d69", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -167,7 +167,7 @@ fn reserve_id_range(sess: Session,\n     ast_util::id_range { min: to_id_min, max: to_id_min }\n }\n \n-impl ExtendedDecodeContext {\n+pub impl ExtendedDecodeContext {\n     fn tr_id(&self, id: ast::node_id) -> ast::node_id {\n         /*!\n          *\n@@ -966,12 +966,6 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         }\n     }\n \n-    do option::iter(&tcx.legacy_boxed_traits.find(&id)) |_x| {\n-        do ebml_w.tag(c::tag_table_legacy_boxed_trait) {\n-            ebml_w.id(id);\n-        }\n-    }\n-\n     for maps.moves_map.find(&id).each |_| {\n         do ebml_w.tag(c::tag_table_moves_map) {\n             ebml_w.id(id);\n@@ -1121,8 +1115,6 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n \n         if tag == (c::tag_table_mutbl as uint) {\n             dcx.maps.mutbl_map.insert(id, ());\n-        } else if tag == (c::tag_table_legacy_boxed_trait as uint) {\n-            dcx.tcx.legacy_boxed_traits.insert(id, ());\n         } else if tag == (c::tag_table_moves_map as uint) {\n             dcx.maps.moves_map.insert(id, ());\n         } else {\n@@ -1230,7 +1222,7 @@ impl fake_ext_ctxt for fake_session {\n \n #[cfg(test)]\n fn mk_ctxt() -> fake_ext_ctxt {\n-    parse::new_parse_sess(None) as fake_ext_ctxt\n+    @parse::new_parse_sess(None) as fake_ext_ctxt\n }\n \n #[cfg(test)]"}, {"sha": "c3555e54519a33e9627a4a597f37b22739004a0f", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -89,7 +89,7 @@ enum assignment_type {\n     at_swap\n }\n \n-impl assignment_type {\n+pub impl assignment_type {\n     fn checked_by_liveness(&self) -> bool {\n         // the liveness pass guarantees that immutable local variables\n         // are only assigned once; but it doesn't consider &mut\n@@ -106,7 +106,7 @@ impl assignment_type {\n     }\n }\n \n-impl CheckLoanCtxt {\n+pub impl CheckLoanCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.bccx.tcx }\n \n     fn purity(@mut self, scope_id: ast::node_id) -> Option<purity_cause> {"}, {"sha": "c6f4f04fe715da5ca193625f33b6d41b045c8ad4", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -289,7 +289,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n     self.root_ub = old_root_ub;\n }\n \n-impl GatherLoanCtxt {\n+pub impl GatherLoanCtxt {\n     fn tcx(@mut self) -> ty::ctxt { self.bccx.tcx }\n \n     fn guarantee_adjustments(@mut self,"}, {"sha": "e095c970931316c40cc67e9ee61436eed31c2fe6", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -87,7 +87,7 @@ struct LoanContext {\n     loans: ~[Loan]\n }\n \n-impl LoanContext {\n+pub impl LoanContext {\n     fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     fn loan(&mut self,"}, {"sha": "9bdf69f4c88b0d0dc2025dcf7b86c8462f73c2b1", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -230,6 +230,7 @@ use middle::liveness;\n use middle::mem_categorization::*;\n use middle::region;\n use middle::ty;\n+use middle::typeck;\n use middle::moves;\n use util::common::{indenter, stmt_set};\n use util::ppaux::{expr_repr, note_and_explain_region};\n@@ -239,6 +240,7 @@ use core::cmp;\n use core::dvec::DVec;\n use core::io;\n use core::result::{Result, Ok, Err};\n+use core::to_bytes;\n use std::list::{List, Cons, Nil};\n use std::list;\n use std::oldmap::{HashMap, Set};\n@@ -433,7 +435,7 @@ pub fn save_and_restore_managed<T:Copy,U>(save_and_restore_t: @mut T,\n     u\n }\n \n-impl LoanKind {\n+pub impl LoanKind {\n     fn is_freeze(&self) -> bool {\n         match *self {\n             TotalFreeze | PartialFreeze => true,"}, {"sha": "aabcd7a2fe5b153ff0b9df0330241abf5c4fc61b", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -35,7 +35,7 @@ pub enum PreserveCondition {\n     PcIfPure(bckerr)\n }\n \n-impl PreserveCondition {\n+pub impl PreserveCondition {\n     // combines two preservation conditions such that if either of\n     // them requires purity, the result requires purity\n     fn combine(&self, pc: PreserveCondition) -> PreserveCondition {\n@@ -46,7 +46,7 @@ impl PreserveCondition {\n     }\n }\n \n-impl BorrowckCtxt {\n+pub impl BorrowckCtxt {\n     fn preserve(&self,\n                 cmt: cmt,\n                 scope_region: ty::Region,\n@@ -80,7 +80,7 @@ struct PreserveCtxt {\n     root_managed_data: bool\n }\n \n-impl PreserveCtxt {\n+pub impl PreserveCtxt {\n     fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     fn preserve(&self, cmt: cmt) -> bckres<PreserveCondition> {"}, {"sha": "d399f0e6886e6f8c2015cabbdb7da1efd05a1c73", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -322,7 +322,7 @@ struct LanguageItemCollector {\n     item_refs: HashMap<@~str, uint>,\n }\n \n-impl LanguageItemCollector {\n+pub impl LanguageItemCollector {\n     fn match_and_collect_meta_item(&self, item_def_id: def_id,\n                                    meta_item: @meta_item) {\n         match meta_item.node {"}, {"sha": "8bcc573ac36cb760334f187f6eb51778d75c07bb", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -331,7 +331,7 @@ struct Context {\n     sess: Session\n }\n \n-impl Context {\n+pub impl Context {\n     fn get_level(&self, lint: lint) -> level {\n         get_lint_level(self.curr, lint)\n     }"}, {"sha": "5286fa1025a769ee90a4d8791ab363b22d12d39b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -254,7 +254,7 @@ impl to_str::ToStr for Variable {\n // variable must not be assigned if there is some successor\n // assignment.  And so forth.\n \n-impl LiveNode {\n+pub impl LiveNode {\n     pure fn is_valid(&self) -> bool { **self != uint::max_value }\n }\n \n@@ -334,7 +334,7 @@ fn IrMaps(tcx: ty::ctxt,\n     }\n }\n \n-impl IrMaps {\n+pub impl IrMaps {\n     fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode {\n         let ln = LiveNode(self.num_live_nodes);\n         self.lnks.push(lnk);\n@@ -693,7 +693,7 @@ fn Liveness(ir: @mut IrMaps, specials: Specials) -> Liveness {\n     }\n }\n \n-impl Liveness {\n+pub impl Liveness {\n     fn live_node(&self, node_id: node_id, span: span) -> LiveNode {\n         match self.ir.live_node_map.find(&node_id) {\n           Some(ln) => ln,\n@@ -1649,7 +1649,7 @@ enum ReadKind {\n     PartiallyMovedValue\n }\n \n-impl @Liveness {\n+pub impl @Liveness {\n     fn check_ret(&self, id: node_id, sp: span, _fk: &visit::fn_kind,\n                  entry_ln: LiveNode) {\n         if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {"}, {"sha": "227d262a79e1673b6f7d2647c89c2f57871d0c45", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -312,7 +312,7 @@ impl ToStr for MutabilityCategory {\n     }\n }\n \n-impl MutabilityCategory {\n+pub impl MutabilityCategory {\n     static fn from_mutbl(&self, m: ast::mutability) -> MutabilityCategory {\n         match m {\n             m_imm => McImmutable,"}, {"sha": "d5adfee65af9f64d50e7b58272cb07af8f838230", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -301,7 +301,7 @@ fn compute_modes_for_expr(expr: @expr,\n     cx.consume_expr(expr, v);\n }\n \n-impl UseMode {\n+pub impl UseMode {\n     fn component_mode(&self, expr: @expr) -> UseMode {\n         /*!\n          *\n@@ -316,7 +316,7 @@ impl UseMode {\n     }\n }\n \n-impl VisitContext {\n+pub impl VisitContext {\n     fn consume_exprs(&self,\n                      exprs: &[@expr],\n                      visitor: vt<VisitContext>)"}, {"sha": "e60069e05da81119d0442318bb3610bd9ec5e297", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,18 +14,19 @@\n \n use core::prelude::*;\n \n+use metadata::csearch;\n use middle::ty::{ty_struct, ty_enum};\n use middle::ty;\n-use middle::typeck::{method_map, method_origin, method_param, method_self,\n-                     method_super};\n+use middle::typeck::{method_map, method_origin, method_param, method_self};\n+use middle::typeck::{method_super};\n use middle::typeck::{method_static, method_trait};\n \n use core::dvec::DVec;\n use core::util::ignore;\n use syntax::ast::{def_variant, expr_field, expr_method_call, expr_struct};\n use syntax::ast::{expr_unary, ident, item_struct, item_enum, item_impl};\n use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n-use syntax::ast::{provided, required};\n+use syntax::ast::{provided, public, required};\n use syntax::ast;\n use syntax::ast_map::{node_item, node_method};\n use syntax::ast_map;\n@@ -100,14 +101,52 @@ pub fn check_crate(tcx: ty::ctxt,\n     };\n \n     // Checks that a private method is in scope.\n-    let check_method: @fn(span: span, origin: &method_origin) =\n-            |span, origin| {\n+    let check_method: @fn(span: span,\n+                          origin: &method_origin,\n+                          ident: ast::ident) =\n+            |span, origin, ident| {\n         match *origin {\n             method_static(method_id) => {\n                 if method_id.crate == local_crate {\n                     match tcx.items.find(&method_id.node) {\n                         Some(node_method(method, impl_id, _)) => {\n-                            if method.vis == private &&\n+                            let mut is_private = false;\n+                            if method.vis == private {\n+                                is_private = true;\n+                            } else if method.vis == public {\n+                                is_private = false;\n+                            } else {\n+                                // Look up the enclosing impl.\n+                                if impl_id.crate != local_crate {\n+                                    tcx.sess.span_bug(span,\n+                                                      ~\"local method isn't \\\n+                                                        in local impl?!\");\n+                                }\n+\n+                                match tcx.items.find(&impl_id.node) {\n+                                    Some(node_item(item, _)) => {\n+                                        match item.node {\n+                                            item_impl(_, None, _, _)\n+                                                    if item.vis != public => {\n+                                                is_private = true;\n+                                            }\n+                                            _ => {}\n+                                        }\n+                                    }\n+                                    Some(_) => {\n+                                        tcx.sess.span_bug(span,\n+                                                          ~\"impl wasn't an \\\n+                                                            item?!\");\n+                                    }\n+                                    None => {\n+                                        tcx.sess.span_bug(span,\n+                                                          ~\"impl wasn't in \\\n+                                                            AST map?!\");\n+                                    }\n+                                }\n+                            }\n+\n+                            if is_private &&\n                                     (impl_id.crate != local_crate ||\n                                      !privileged_items\n                                      .contains(&(impl_id.node))) {\n@@ -131,7 +170,15 @@ pub fn check_crate(tcx: ty::ctxt,\n                         }\n                     }\n                 } else {\n-                    // FIXME #4732: External crates.\n+                    let visibility =\n+                        csearch::get_method_visibility(tcx.sess.cstore,\n+                                                       method_id);\n+                    if visibility != public {\n+                        tcx.sess.span_err(span,\n+                                          fmt!(\"method `%s` is private\",\n+                                               *tcx.sess.parse_sess.interner\n+                                                   .get(ident)));\n+                    }\n                 }\n             }\n             method_param(method_param {\n@@ -230,14 +277,16 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span, &(*entry).origin);\n+                                    check_method(expr.span,\n+                                                 &entry.origin,\n+                                                 ident);\n                                 }\n                             }\n                         }\n                         _ => {}\n                     }\n                 }\n-                expr_method_call(base, _, _, _, _) => {\n+                expr_method_call(base, ident, _, _, _) => {\n                     // Ditto\n                     match ty::get(ty::type_autoderef(tcx, ty::expr_ty(tcx,\n                                                           base))).sty {\n@@ -253,7 +302,9 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span, &(*entry).origin);\n+                                    check_method(expr.span,\n+                                                 &entry.origin,\n+                                                 ident);\n                                 }\n                             }\n                         }"}, {"sha": "1c4928fd374542617cc7fa42c0e3c8aa73ab1d45", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -622,6 +622,19 @@ pub impl NameBindings {\n         }\n     }\n \n+    fn defined_in_public_namespace(namespace: Namespace) -> bool {\n+        match namespace {\n+            TypeNS => match self.type_def {\n+                Some(def) => def.privacy != Private,\n+                None => false\n+            },\n+            ValueNS => match self.value_def {\n+                Some(def) => def.privacy != Private,\n+                None => false\n+            }\n+        }\n+    }\n+\n     fn def_for_namespace(namespace: Namespace) -> Option<def> {\n         match namespace {\n             TypeNS => {\n@@ -2480,7 +2493,7 @@ pub impl Resolver {\n \n             // Here we merge two import resolutions.\n             match module_.import_resolutions.find(&ident) {\n-                None => {\n+                None if target_import_resolution.privacy == Public => {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n                         @mut ImportResolution(privacy,\n@@ -2494,6 +2507,7 @@ pub impl Resolver {\n                     module_.import_resolutions.insert\n                         (ident, new_import_resolution);\n                 }\n+                None => { /* continue ... */ }\n                 Some(dest_import_resolution) => {\n                     // Merge the two import resolutions at a finer-grained\n                     // level.\n@@ -2537,7 +2551,6 @@ pub impl Resolver {\n                 }\n             }\n \n-\n             debug!(\"(resolving glob import) writing resolution `%s` in `%s` \\\n                     to `%s`, privacy=%?\",\n                    *self.session.str_of(ident),\n@@ -2546,12 +2559,12 @@ pub impl Resolver {\n                    dest_import_resolution.privacy);\n \n             // Merge the child item into the import resolution.\n-            if (*name_bindings).defined_in_namespace(ValueNS) {\n+            if (*name_bindings).defined_in_public_namespace(ValueNS) {\n                 debug!(\"(resolving glob import) ... for value target\");\n                 dest_import_resolution.value_target =\n                     Some(Target(containing_module, name_bindings));\n             }\n-            if (*name_bindings).defined_in_namespace(TypeNS) {\n+            if (*name_bindings).defined_in_public_namespace(TypeNS) {\n                 debug!(\"(resolving glob import) ... for type target\");\n                 dest_import_resolution.type_target =\n                     Some(Target(containing_module, name_bindings));\n@@ -2756,6 +2769,8 @@ pub impl Resolver {\n                                namespace);\n                     }\n                     Some(target) => {\n+                        debug!(\"(resolving item in lexical scope) using \\\n+                                import resolution\");\n                         import_resolution.state.used = true;\n                         return Success(copy target);\n                     }"}, {"sha": "2f920378087362841caa51cc22e2f8a36bfb32af", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -145,9 +145,10 @@\n use core::prelude::*;\n \n use back::abi;\n-use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, BasicBlockRef};\n+use lib;\n+use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n use middle::const_eval;\n+use middle::borrowck::root_map_key;\n use middle::pat_util::*;\n use middle::resolve::DefMap;\n use middle::trans::base::*;\n@@ -156,20 +157,26 @@ use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::controlflow;\n+use middle::trans::datum;\n use middle::trans::datum::*;\n use middle::trans::expr::Dest;\n use middle::trans::expr;\n use middle::trans::glue;\n+use middle::trans::tvec;\n+use middle::trans::type_of;\n+use middle::ty;\n use util::common::indenter;\n \n use core::dvec::DVec;\n use core::dvec;\n+use core::libc::c_ulonglong;\n use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n-use syntax::ast_util::{dummy_sp, path_to_ident};\n+use syntax::ast::ident;\n+use syntax::ast_util::path_to_ident;\n use syntax::ast_util;\n-use syntax::codemap::span;\n+use syntax::codemap::{span, dummy_sp};\n use syntax::print::pprust::pat_to_str;\n \n // An option identifying a literal: either a unit-like struct or an"}, {"sha": "d1472f63ae746b59a9d1162aadec7e4cc7438470", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -44,6 +44,7 @@ use middle::borrowck::RootInfo;\n use middle::pat_util::*;\n use middle::resolve;\n use middle::trans::_match;\n+use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n@@ -56,12 +57,15 @@ use middle::trans::foreign;\n use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::machine;\n+use middle::trans::machine::llsize_of;\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::reachable;\n use middle::trans::shape::*;\n use middle::trans::tvec;\n+use middle::trans::type_of;\n use middle::trans::type_of::*;\n+use middle::ty;\n use middle::ty::arg;\n use util::common::indenter;\n use util::ppaux::{ty_to_str, ty_to_short_str};\n@@ -77,6 +81,7 @@ use core::option;\n use core::uint;\n use std::oldmap::HashMap;\n use std::{oldmap, time, list};\n+use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n use syntax::attr;"}, {"sha": "7ac54518d3748bc277f1ae406376eb68adad8224", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,6 +10,7 @@\n \n \n use codemap::span;\n+use lib;\n use lib::llvm::llvm;\n use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n@@ -18,9 +19,12 @@ use libc::{c_uint, c_int, c_ulonglong};\n use middle::trans::common::*;\n use middle::trans::machine::llsize_of_real;\n \n+use core::prelude::*;\n use core::cast::transmute;\n use core::cast;\n use core::libc;\n+use core::option::Some;\n+use core::ptr;\n use core::str;\n use core::vec;\n use std::oldmap::HashMap;"}, {"sha": "bbc19cf86eaac5509b45512416a03147ee8e3d79", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,6 +13,10 @@ use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::common::*;\n \n+use core::libc::c_uint;\n+use core::option;\n+use core::vec;\n+\n pub trait ABIInfo {\n     fn compute_info(&self,\n                     atys: &[TypeRef],\n@@ -28,7 +32,7 @@ pub struct LLVMType {\n pub struct FnType {\n     arg_tys: ~[LLVMType],\n     ret_ty: LLVMType,\n-    attrs: ~[Option<Attribute>],\n+    attrs: ~[option::Option<Attribute>],\n     sret: bool\n }\n \n@@ -93,7 +97,7 @@ pub impl FnType {\n                       llargbundle: ValueRef, llretval: ValueRef) {\n         for vec::eachi(self.attrs) |i, a| {\n             match *a {\n-                Some(attr) => {\n+                option::Some(attr) => {\n                     unsafe {\n                         llvm::LLVMAddInstrAttribute(\n                             llretval, (i + 1u) as c_uint,\n@@ -205,8 +209,8 @@ impl ABIInfo for LLVM_ABIInfo {\n     }\n }\n \n-pub fn llvm_abi_info() -> ABIInfo {\n-    return LLVM_ABIInfo as ABIInfo;\n+pub fn llvm_abi_info() -> @ABIInfo {\n+    return @LLVM_ABIInfo as @ABIInfo;\n }\n \n "}, {"sha": "a16b3672b7afe9e4ce7450ab04a8b86c1b42db21", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -159,6 +159,6 @@ impl ABIInfo for ARM_ABIInfo {\n     }\n }\n \n-pub fn abi_info() -> ABIInfo {\n-    return ARM_ABIInfo as ABIInfo;\n+pub fn abi_info() -> @ABIInfo {\n+    return @ARM_ABIInfo as @ABIInfo;\n }"}, {"sha": "562009dc2ca10607183f7553ecaa3139b9d3dc5d", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -18,6 +18,14 @@ use lib::llvm::struct_tys;\n use middle::trans::common::*;\n use middle::trans::cabi::*;\n \n+use core::cmp;\n+use core::libc::c_uint;\n+use core::option;\n+use core::option::Option;\n+use core::ptr;\n+use core::uint;\n+use core::vec;\n+\n enum x86_64_reg_class {\n     no_class,\n     integer_class,\n@@ -400,5 +408,5 @@ impl ABIInfo for X86_64_ABIInfo {\n }\n \n pub fn x86_64_abi_info() -> ABIInfo {\n-    return X86_64_ABIInfo as ABIInfo;\n+    return @X86_64_ABIInfo as @ABIInfo;\n }"}, {"sha": "3a68e8e94c6d62a10b9ba83ec3188642ec9ce553", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -18,21 +18,33 @@\n \n use core::prelude::*;\n \n-use lib::llvm::ValueRef;\n-use middle::trans::base::{get_item_val, trans_external_path};\n+use back::abi;\n+use driver::session;\n+use lib;\n+use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::llvm;\n+use metadata::csearch;\n+use middle::trans::base;\n+use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::closure;\n-use middle::trans::common::{block, node_id_type_params};\n+use middle::trans::common;\n+use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::datum::Datum;\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::meth;\n use middle::trans::monomorphize;\n+use middle::trans::type_of;\n+use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n \n use syntax::ast;\n+use syntax::ast_map;\n use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n use syntax::visit;\n "}, {"sha": "949318d1723b48f8c2b7747a660470900a522b17", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,8 +13,7 @@ use core::prelude::*;\n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n use back::link::{mangle_internal_name_by_path};\n-use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::{llvm, ValueRef, TypeRef};\n use middle::moves;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -25,6 +24,7 @@ use middle::trans::expr;\n use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::type_of::*;\n+use middle::ty;\n use util::ppaux::ty_to_str;\n \n use core::libc::c_uint;\n@@ -33,6 +33,7 @@ use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::codemap::span;\n+use syntax::parse::token::special_idents;\n use syntax::print::pprust::expr_to_str;\n \n // ___Good to know (tm)__________________________________________________\n@@ -185,7 +186,7 @@ pub fn allocate_cbox(bcx: block, sigil: ast::Sigil, cdata_ty: ty::t)\n         }\n         ast::BorrowedSigil => {\n             let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n-            let llbox = base::alloc_ty(bcx, cbox_ty);\n+            let llbox = alloc_ty(bcx, cbox_ty);\n             nuke_ref_count(bcx, llbox);\n             rslt(bcx, llbox)\n         }\n@@ -342,7 +343,7 @@ pub fn load_environment(fcx: fn_ctxt,\n     let bcx = raw_block(fcx, false, llloadenv);\n \n     // Load a pointer to the closure data, skipping over the box header:\n-    let llcdata = base::opaque_box_body(bcx, cdata_ty, fcx.llenv);\n+    let llcdata = opaque_box_body(bcx, cdata_ty, fcx.llenv);\n \n     // Populate the upvars from the environment.\n     let mut i = 0u;"}, {"sha": "97f8ec84a1dc7962f8deec735d831a2ce26b7d70", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -157,7 +157,7 @@ pub fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n     }\n }\n \n-type ExternMap = HashMap<@str, ValueRef>;\n+pub type ExternMap = HashMap<@str, ValueRef>;\n \n // Crate context.  Every crate we compile has one of these.\n pub struct CrateContext {\n@@ -553,10 +553,7 @@ impl get_node_info for ast::blk {\n     }\n }\n \n-// XXX: Work around a trait parsing bug. remove after snapshot\n-pub type optional_boxed_ast_expr = Option<@ast::expr>;\n-\n-impl get_node_info for optional_boxed_ast_expr {\n+impl get_node_info for Option<@ast::expr> {\n     fn info(&self) -> Option<NodeInfo> {\n         self.chain_ref(|s| s.info())\n     }"}, {"sha": "36cda3dfbe97780e7dd520e823229aaae3d9061d", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,14 +10,18 @@\n \n use core::prelude::*;\n \n+use lib::llvm::{llvm, ValueRef, True, TypeRef, False};\n use middle::const_eval;\n+use middle::trans::base;\n use middle::trans::base::get_insn_ctxt;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::expr;\n use middle::trans::machine;\n+use middle::trans::type_of;\n use middle::ty;\n \n+use core::libc::c_uint;\n use syntax::{ast, ast_util, codemap, ast_map};\n \n pub fn const_lit(cx: @CrateContext, e: @ast::expr, lit: ast::lit)"}, {"sha": "9b282e71b3e170f1bd42e45e99ac65d1ff125d33", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,13 +10,28 @@\n \n use core::prelude::*;\n \n-use lib::llvm::ValueRef;\n+use back::link;\n+use lib;\n+use lib::llvm::*;\n use middle::trans::base::*;\n+use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n+use middle::trans::debuginfo;\n+use middle::trans::expr;\n+use middle::trans::type_of::*;\n+use middle::ty;\n+use util::common::indenter;\n+use util::ppaux;\n \n use core::str;\n+use syntax::ast;\n+use syntax::ast::ident;\n+use syntax::ast_map::path_mod;\n+use syntax::ast_util;\n+use syntax::codemap::span;\n+use syntax::print::pprust::expr_to_str;\n \n pub fn trans_block(bcx: block, b: &ast::blk, dest: expr::Dest) -> block {\n     let _icx = bcx.insn_ctxt(\"trans_block\");"}, {"sha": "94c90aaad6d866c15d585846aabcef1c4d8429d5", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -87,21 +87,29 @@\n \n use core::prelude::*;\n \n+use lib;\n use lib::llvm::ValueRef;\n use middle::borrowck::{RootInfo, root_map_key};\n use middle::trans::base::*;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::common;\n+use middle::trans::expr;\n+use middle::trans::glue;\n use middle::trans::tvec;\n+use middle::trans::type_of;\n+use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n use core::cmp;\n use core::option;\n+use core::to_bytes;\n use core::uint;\n use core::vec;\n+use syntax::ast;\n use syntax::parse::token::special_idents;\n \n #[deriving_eq]\n@@ -326,7 +334,7 @@ pub impl Datum {\n                 Store(bcx, self.val, dst);\n             }\n             ByRef => {\n-                base::memcpy_ty(bcx, dst, self.val, self.ty);\n+                memcpy_ty(bcx, dst, self.val, self.ty);\n             }\n         }\n \n@@ -354,7 +362,7 @@ pub impl Datum {\n \n         match self.mode {\n             ByRef => {\n-                base::memcpy_ty(bcx, dst, self.val, self.ty);\n+                memcpy_ty(bcx, dst, self.val, self.ty);\n             }\n             ByValue => {\n                 Store(bcx, self.val, dst);\n@@ -540,7 +548,7 @@ pub impl Datum {\n \n         let scratch = scratch_datum(bcx, self.ty, true);\n         self.copy_to_datum(bcx, INIT, scratch);\n-        base::add_root_cleanup(bcx, root_info, scratch.val, scratch.ty);\n+        add_root_cleanup(bcx, root_info, scratch.val, scratch.ty);\n \n         // If we need to freeze the box, do that now.\n         if root_info.freezes {"}, {"sha": "c6ed190c7c371d9e25530a1d8d4e52a837bc14a7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -121,27 +121,37 @@ lvalues are *never* stored by value.\n \n use core::prelude::*;\n \n-use lib::llvm::ValueRef;\n+use back::abi;\n+use lib;\n+use lib::llvm::{ValueRef, TypeRef, llvm, True};\n use middle::borrowck::root_map_key;\n use middle::resolve;\n+use middle::trans::_match;\n+use middle::trans::base;\n use middle::trans::base::*;\n+use middle::trans::build::*;\n use middle::trans::callee::{AutorefArg, DoAutorefArg, DontAutorefArg};\n use middle::trans::callee;\n use middle::trans::closure;\n use middle::trans::common::*;\n use middle::trans::consts;\n use middle::trans::controlflow;\n use middle::trans::datum::*;\n+use middle::trans::debuginfo;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::tvec;\n+use middle::trans::type_of;\n+use middle::ty;\n use middle::ty::struct_mutable_fields;\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use std::oldmap::HashMap;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n+use syntax::codemap;\n use syntax::codemap::spanned;\n \n // Destinations\n@@ -154,7 +164,7 @@ pub enum Dest {\n     Ignore,\n }\n \n-impl Dest {\n+pub impl Dest {\n     fn to_str(&self, ccx: @CrateContext) -> ~str {\n         match *self {\n             SaveIn(v) => fmt!(\"SaveIn(%s)\", val_str(ccx.tn, v)),\n@@ -1128,7 +1138,7 @@ fn trans_rec_or_struct(bcx: block,\n                     let fields = ty::struct_mutable_fields(\n                         tcx, variant_id, substs);\n                     let field_lltys = do fields.map |field| {\n-                        type_of(bcx.ccx(),\n+                        type_of::type_of(bcx.ccx(),\n                                 ty::subst_tps(\n                                     tcx, substs.tps, None, field.mt.ty))\n                     };"}, {"sha": "6c0c73dd016f268c6f786d8a9846cb51db2c054d", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use back::{link, abi};\n+use driver::session;\n use driver::session::arch_x86_64;\n use driver::session::arch_arm;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n@@ -27,11 +28,13 @@ use middle::trans::callee::*;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore};\n+use middle::trans::machine::llsize_of;\n use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::shape;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n+use middle::ty;\n use middle::ty::{FnSig, arg};\n use util::ppaux::ty_to_str;\n "}, {"sha": "96deb2906eb7ce35be6f17440af73c6068d57cbf", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,19 +14,32 @@\n \n use core::prelude::*;\n \n-use lib::llvm::{ValueRef, TypeRef};\n+use back::abi;\n+use back::link::*;\n+use driver::session;\n+use lib;\n+use lib::llvm::{llvm, ValueRef, TypeRef, True};\n use middle::trans::base::*;\n use middle::trans::callee;\n use middle::trans::closure;\n use middle::trans::common::*;\n use middle::trans::build::*;\n+use middle::trans::expr;\n+use middle::trans::machine::*;\n use middle::trans::reflect;\n use middle::trans::tvec;\n-use middle::trans::type_of::type_of;\n+use middle::trans::type_of::{type_of, type_of_glue_fn};\n use middle::trans::uniq;\n+use middle::ty;\n+use util::ppaux;\n+use util::ppaux::ty_to_short_str;\n \n use core::io;\n+use core::libc::c_uint;\n use core::str;\n+use std::time;\n+use syntax::ast;\n+use syntax::parse::token::special_idents;\n \n pub fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_free\");\n@@ -218,7 +231,7 @@ pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n     let _icx = ccx.insn_ctxt(\"lazily_emit_simplified_tydesc_glue\");\n     let simpl = simplified_glue_type(ccx.tcx, field, ti.ty);\n     if simpl != ti.ty {\n-        let simpl_ti = base::get_tydesc(ccx, simpl);\n+        let simpl_ti = get_tydesc(ccx, simpl);\n         lazily_emit_tydesc_glue(ccx, field, simpl_ti);\n         if field == abi::tydesc_field_take_glue {\n             ti.take_glue =\n@@ -661,7 +674,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     if ccx.sess.count_type_sizes() {\n         io::println(fmt!(\"%u\\t%s\",\n                          llsize_of_real(ccx, llty),\n-                         ty_to_str(ccx.tcx, t)));\n+                         ppaux::ty_to_str(ccx.tcx, t)));\n     }\n \n     let llsize = llsize_of(ccx, llty);\n@@ -675,7 +688,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     };\n     // XXX: Bad copy.\n     note_unique_llvm_symbol(ccx, copy name);\n-    log(debug, fmt!(\"+++ declare_tydesc %s %s\", ty_to_str(ccx.tcx, t), name));\n+    debug!(\"+++ declare_tydesc %s %s\", ppaux::ty_to_str(ccx.tcx, t), name);\n     let gvar = str::as_c_str(name, |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type, buf)\n@@ -709,7 +722,7 @@ pub fn declare_generic_glue(ccx: @CrateContext, t: ty::t, llfnty: TypeRef,\n     } else {\n         fn_nm = mangle_internal_name_by_seq(ccx, (~\"glue_\" + name));\n     }\n-    debug!(\"%s is for type %s\", fn_nm, ty_to_str(ccx.tcx, t));\n+    debug!(\"%s is for type %s\", fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n     // XXX: Bad copy.\n     note_unique_llvm_symbol(ccx, copy fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);"}, {"sha": "7ce36c2b1e2e8f1ee0ff5ed90557dfae0ac6a0c6", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use metadata::csearch;\n use middle::astencode;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{impl_owned_self, impl_self, no_self};\n@@ -18,6 +19,8 @@ use middle::trans::common::*;\n use middle::trans::common;\n use middle::trans::inline;\n use middle::trans::monomorphize;\n+use middle::ty;\n+use util::ppaux::ty_to_str;\n \n use core::vec;\n use syntax::ast;"}, {"sha": "8d447f54c200d842e0266b183cd21113276617ca", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,6 +11,9 @@\n // Information concerning the machine representation of various types.\n \n \n+use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n+use lib::llvm::{True, False, Bool};\n+use lib::llvm::llvm;\n use middle::trans::common::*;\n use middle::trans::type_of;\n use middle::ty;\n@@ -122,7 +125,7 @@ pub fn llalign_of_min(cx: @CrateContext, t: TypeRef) -> uint {\n pub fn llalign_of(cx: @CrateContext, t: TypeRef) -> ValueRef {\n     unsafe {\n         return llvm::LLVMConstIntCast(\n-            lib::llvm::llvm::LLVMAlignOf(t), cx.int_type, False);\n+            llvm::LLVMAlignOf(t), cx.int_type, False);\n     }\n }\n "}, {"sha": "d2bf034165dd90f0fa1df5bdffed1d995cdb6f3d", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -28,14 +28,16 @@ use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::monomorphize;\n use middle::trans::type_of::*;\n+use middle::ty;\n use middle::ty::arg;\n use middle::typeck;\n+use util::common::indenter;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n use core::libc::c_uint;\n use std::oldmap::HashMap;\n use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n-use syntax::ast_util::local_def;\n+use syntax::ast_util;\n use syntax::print::pprust::expr_to_str;\n use syntax::{ast, ast_map};\n \n@@ -351,7 +353,7 @@ pub fn trans_static_method_callee(bcx: block,\n \n pub fn method_from_methods(ms: ~[@ast::method], name: ast::ident)\n     -> Option<ast::def_id> {\n-    ms.find(|m| m.ident == name).map(|m| local_def(m.id))\n+    ms.find(|m| m.ident == name).map(|m| ast_util::local_def(m.id))\n }\n \n pub fn method_with_name(ccx: @CrateContext, impl_id: ast::def_id,\n@@ -725,7 +727,7 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n \n     // Load the function from the vtable and cast it to the expected type.\n     debug!(\"(translating trait callee) loading method\");\n-    let llcallee_ty = type_of::type_of_fn_from_ty(ccx, callee_ty);\n+    let llcallee_ty = type_of_fn_from_ty(ccx, callee_ty);\n     let mptr = Load(bcx, GEPi(bcx, llvtable, [0u, n_method]));\n     let mptr = PointerCast(bcx, mptr, T_ptr(llcallee_ty));\n \n@@ -868,35 +870,19 @@ pub fn trans_trait_cast(bcx: block,\n     match vstore {\n         ty::vstore_slice(*) | ty::vstore_box => {\n             let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n-            if bcx.tcx().legacy_boxed_traits.contains_key(&id) {\n-                // Allocate an @ box and store the value into it\n-                let MallocResult {bcx: new_bcx, box: llbox, body: body} =\n-                    malloc_boxed(bcx, v_ty);\n-                bcx = new_bcx;\n-                add_clean_free(bcx, llbox, heap_managed);\n-                bcx = expr::trans_into(bcx, val, SaveIn(body));\n-                revoke_clean(bcx, llbox);\n-\n-                // Store the @ box into the pair\n-                Store(bcx, llbox, PointerCast(bcx,\n-                                              llboxdest,\n-                                              T_ptr(val_ty(llbox))));\n-            } else {\n-                // Just store the pointer into the pair.\n-                llboxdest = PointerCast(bcx,\n-                                        llboxdest,\n-                                        T_ptr(type_of::type_of(bcx.ccx(),\n-                                                               v_ty)));\n-                bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n-            }\n+            // Just store the pointer into the pair.\n+            llboxdest = PointerCast(bcx,\n+                                    llboxdest,\n+                                    T_ptr(type_of(bcx.ccx(), v_ty)));\n+            bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n         }\n         ty::vstore_uniq => {\n             // Translate the uniquely-owned value into the second element of\n             // the triple. (The first element is the vtable.)\n             let mut llvaldest = GEPi(bcx, lldest, [0, 1]);\n             llvaldest = PointerCast(bcx,\n                                     llvaldest,\n-                                    T_ptr(type_of::type_of(bcx.ccx(), v_ty)));\n+                                    T_ptr(type_of(bcx.ccx(), v_ty)));\n             bcx = expr::trans_into(bcx, val, SaveIn(llvaldest));\n \n             // Get the type descriptor of the wrapped value and store it into"}, {"sha": "30a42210a13b919e8ffcbc7ec681a0522e8b88bd", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,6 +11,8 @@\n use core::prelude::*;\n \n use back::link::mangle_exported_name;\n+use driver::session;\n+use lib::llvm::ValueRef;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n use middle::trans::base::{trans_enum_variant, trans_struct_dtor};\n@@ -26,12 +28,15 @@ use middle::trans::shape;\n use middle::trans::type_of::type_of_fn_from_ty;\n use middle::trans::type_of;\n use middle::trans::type_use;\n+use middle::ty;\n use middle::ty::{FnSig};\n use middle::typeck;\n+use util::ppaux::ty_to_str;\n \n use core::option;\n use core::vec;\n use syntax::ast;\n+use syntax::ast_map;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util::local_def;\n use syntax::parse::token::special_idents;"}, {"sha": "17abebad600dc0e15a8b6929df2d53d6d2e5e67d", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -21,11 +21,13 @@ use middle::resolve;\n use middle::ty;\n use middle::typeck;\n \n-use core::vec;\n+use core::prelude::*;\n use std::oldmap::HashMap;\n+use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n+use syntax::codemap;\n use syntax::print::pprust::expr_to_str;\n use syntax::{visit, ast_util, ast_map};\n "}, {"sha": "dcfa897ab606a1a8e2e340ff3238b7fe9b63b13a", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -22,8 +22,11 @@ use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::type_of::*;\n+use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::option::None;\n+use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n@@ -60,7 +63,7 @@ pub impl Reflector {\n     }\n \n     fn c_size_and_align(&mut self, t: ty::t) -> ~[ValueRef] {\n-        let tr = type_of::type_of(self.bcx.ccx(), t);\n+        let tr = type_of(self.bcx.ccx(), t);\n         let s = machine::llsize_of_real(self.bcx.ccx(), tr);\n         let a = machine::llalign_of_min(self.bcx.ccx(), tr);\n         return ~[self.c_uint(s),\n@@ -351,7 +354,7 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n     let final = sub_block(bcx, ~\"final\");\n     assert bcx.ccx().tcx.intrinsic_defs.contains_key(&tydesc);\n     let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(&tydesc);\n-    let tydesc_ty = type_of::type_of(bcx.ccx(), tydesc_ty);\n+    let tydesc_ty = type_of(bcx.ccx(), tydesc_ty);\n     let mut r = Reflector {\n         visitor_val: visitor_val,\n         visitor_methods: ty::trait_methods(bcx.tcx(), visitor_trait_id),"}, {"sha": "72e4fa2f4ebed230d1a92175a6d8ccc8f30cc865", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -25,6 +25,7 @@ use util::ppaux::ty_to_str;\n \n use core::dvec::DVec;\n use core::option::is_some;\n+use core::str;\n use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast;"}, {"sha": "4ce60daf60f826bce4fd1f1950a37e0524430dc7", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,20 +10,27 @@\n \n \n use back::abi;\n-use lib::llvm::{ValueRef, TypeRef};\n+use lib;\n+use lib::llvm::{llvm, ValueRef, TypeRef};\n+use middle::trans::base;\n+use middle::trans::base::*;\n use middle::trans::build::*;\n+use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr::{Dest, Ignore, SaveIn};\n use middle::trans::expr;\n use middle::trans::glue;\n-use middle::trans::shape::{llsize_of, nonzero_llsize_of};\n+use middle::trans::machine::{llsize_of, nonzero_llsize_of};\n use middle::trans::type_of;\n use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n+use core::uint;\n+use core::vec;\n use syntax::ast;\n+use syntax::codemap;\n use syntax::codemap::span;\n use syntax::print::pprust::{expr_to_str};\n \n@@ -81,7 +88,7 @@ pub fn alloc_raw(bcx: block, unit_ty: ty::t,\n     let vecbodyty = ty::mk_mut_unboxed_vec(bcx.tcx(), unit_ty);\n     let vecsize = Add(bcx, alloc, llsize_of(ccx, ccx.opaque_vec_type));\n \n-    let MallocResult {bcx, box: bx, body} =\n+    let base::MallocResult {bcx, box: bx, body} =\n         base::malloc_general_dyn(bcx, vecbodyty, heap, vecsize);\n     Store(bcx, fill, GEPi(bcx, body, [0u, abi::vec_elt_fill]));\n     Store(bcx, alloc, GEPi(bcx, body, [0u, abi::vec_elt_alloc]));\n@@ -91,7 +98,7 @@ pub fn alloc_raw(bcx: block, unit_ty: ty::t,\n \n pub fn alloc_uniq_raw(bcx: block, unit_ty: ty::t,\n                       fill: ValueRef, alloc: ValueRef) -> Result {\n-    alloc_raw(bcx, unit_ty, fill, alloc, heap_for_unique(bcx, unit_ty))\n+    alloc_raw(bcx, unit_ty, fill, alloc, base::heap_for_unique(bcx, unit_ty))\n }\n \n pub fn alloc_vec(bcx: block,\n@@ -305,13 +312,13 @@ pub fn trans_uniq_or_managed_vstore(bcx: block,\n                     let llptrval = PointerCast(bcx, llptrval, T_ptr(T_i8()));\n                     let llsizeval = C_uint(bcx.ccx(), s.len());\n                     let typ = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n-                    let lldestval = datum::scratch_datum(bcx, typ, false);\n+                    let lldestval = scratch_datum(bcx, typ, false);\n                     let bcx = callee::trans_lang_call(\n                         bcx,\n                         bcx.tcx().lang_items.strdup_uniq_fn(),\n                         ~[ llptrval, llsizeval ],\n                         expr::SaveIn(lldestval.to_ref_llval(bcx)));\n-                    return datum::DatumBlock {\n+                    return DatumBlock {\n                         bcx: bcx,\n                         datum: lldestval\n                     };\n@@ -508,8 +515,8 @@ pub fn get_base_and_len(bcx: block,\n             (base, len)\n         }\n         ty::vstore_uniq | ty::vstore_box => {\n-            let body = tvec::get_bodyptr(bcx, llval);\n-            (tvec::get_dataptr(bcx, body), tvec::get_fill(bcx, body))\n+            let body = get_bodyptr(bcx, llval);\n+            (get_dataptr(bcx, body), get_fill(bcx, body))\n         }\n     }\n }"}, {"sha": "7d3aa4c24f461a37b4d9e1f1a541f122edc3cb9e", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,12 +11,16 @@\n \n use lib::llvm::llvm;\n use lib::llvm::{TypeRef};\n+use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::common;\n use middle::trans::expr;\n use middle::trans::machine;\n+use middle::ty;\n use util::ppaux;\n \n+use core::option::None;\n+use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast;\n \n@@ -387,7 +391,7 @@ pub fn type_of_dtor(ccx: @CrateContext, self_ty: ty::t) -> TypeRef {\n pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n     let addrspace = base::get_tydesc(ccx, t).addrspace;\n     debug!(\"type_of_rooted %s in addrspace %u\",\n-           ty_to_str(ccx.tcx, t), addrspace as uint);\n+           ppaux::ty_to_str(ccx.tcx, t), addrspace as uint);\n     return T_root(type_of(ccx, t), addrspace);\n }\n "}, {"sha": "ff92f265cc06abd9cac96ef8ffefef1991c42a0f", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -32,13 +32,17 @@ use metadata::csearch;\n use middle::freevars;\n use middle::trans::common::*;\n use middle::trans::inline;\n+use middle::ty;\n+use middle::typeck;\n \n use core::option;\n+use core::option::{Some, None, Option};\n use core::uint;\n use core::vec;\n use std::list::{List, Cons, Nil};\n use std::list;\n use std::oldmap::HashMap;\n+use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_map;\n use syntax::ast_util;"}, {"sha": "7db7625840461c29a07ce7680f14828230f291cf", "filename": "src/librustc/middle/trans/uniq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -17,6 +17,7 @@ use middle::trans::common::*;\n use middle::trans::datum::immediate_rvalue;\n use middle::trans::datum;\n use middle::trans::glue;\n+use middle::ty;\n \n use syntax::ast;\n "}, {"sha": "90f97a939ad69122f863e2022972e8a8c0c0f403", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -269,7 +269,6 @@ struct ctxt_ {\n     adjustments: HashMap<ast::node_id, @AutoAdjustment>,\n     normalized_cache: HashMap<t, t>,\n     lang_items: middle::lang_items::LanguageItems,\n-    legacy_boxed_traits: HashMap<node_id, ()>,\n     // A mapping from an implementation ID to the method info and trait\n     // method ID of the provided (a.k.a. default) methods in the traits that\n     // that implementation implements.\n@@ -831,7 +830,6 @@ pub fn mk_ctxt(s: session::Session,\n         adjustments: HashMap(),\n         normalized_cache: new_ty_hash(),\n         lang_items: lang_items,\n-        legacy_boxed_traits: HashMap(),\n         provided_methods: HashMap(),\n         provided_method_sources: HashMap(),\n         supertraits: HashMap(),\n@@ -3714,7 +3712,7 @@ pub enum DtorKind {\n     TraitDtor(def_id)\n }\n \n-impl DtorKind {\n+pub impl DtorKind {\n     pure fn is_not_present(&const self) -> bool {\n         match *self {\n             NoDtor => true,"}, {"sha": "2dbf74e1666b4714b6f1f525f89ff0d33294752e", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 97, "deletions": 133, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -97,8 +97,8 @@ pub fn lookup_vtables(vcx: &VtableContext,\n     let mut result = ~[], i = 0u;\n     for substs.tps.each |ty| {\n         for ty::iter_bound_traits_and_supertraits(\n-            tcx, bounds[i]) |trait_ty| {\n-\n+            tcx, bounds[i]) |trait_ty|\n+        {\n             debug!(\"about to subst: %?, %?\",\n                    ppaux::ty_to_str(tcx, trait_ty),\n                    ty::substs_to_str(tcx, substs));\n@@ -585,138 +585,102 @@ pub fn early_resolve_expr(ex: @ast::expr,\n         }\n       }\n       ast::expr_cast(src, _) => {\n-        let target_ty = fcx.expr_ty(ex);\n-        match ty::get(target_ty).sty {\n-          ty::ty_trait(_, _, vstore) => {\n-            // Look up vtables for the type we're casting to, passing in the\n-            // source and target type.\n-            //\n-            // XXX: This is invariant and shouldn't be. --pcw\n-\n-            let ty = fcx.expr_ty(src);\n-            let vcx = VtableContext { ccx: fcx.ccx, infcx: fcx.infcx() };\n-            let vtable_opt =\n-                lookup_vtable(&vcx,\n-                              &location_info_for_expr(ex),\n-                              ty,\n-                              target_ty,\n-                              true,\n-                              is_early);\n-            match vtable_opt {\n-                None => {\n-                    // Try the new-style boxed trait; \"@int as @Trait\".\n-                    // Or the new-style region trait; \"&int as &Trait\".\n-                    // Or the new-style uniquely-owned trait; \"~int as\n-                    // ~Trait\".\n-                    let mut err = false;\n-                    let ty = structurally_resolved_type(fcx, ex.span, ty);\n-                    match ty::get(ty).sty {\n-                        ty::ty_box(mt) | ty::ty_rptr(_, mt) |\n-                        ty::ty_uniq(mt) => {\n-                            // Ensure that the trait vstore and the pointer\n-                            // type match.\n-                            match (&ty::get(ty).sty, vstore) {\n-                                (&ty::ty_box(_), ty::vstore_box) |\n-                                (&ty::ty_uniq(_), ty::vstore_uniq) |\n-                                (&ty::ty_rptr(*), ty::vstore_slice(*)) => {\n-                                    let location_info =\n-                                        &location_info_for_expr(ex);\n-                                    let vtable_opt =\n-                                        lookup_vtable(&vcx,\n-                                                      location_info,\n-                                                      mt.ty,\n-                                                      target_ty,\n-                                                      true,\n-                                                      is_early);\n-                                    match vtable_opt {\n-                                        Some(vtable) => {\n-                                            // Map this expression to that\n-                                            // vtable (that is: \"ex has vtable\n-                                            // <vtable>\")\n-                                            if !is_early {\n-                                                let vtable_map =\n-                                                    cx.vtable_map;\n-                                                vtable_map.insert(ex.id,\n-                                                                  @~[vtable]);\n-                                            }\n-                                        }\n-                                        None => err = true\n-                                    }\n-\n-                                    // Now, if this is &trait, we need to link\n-                                    // the regions.\n-                                    match (&ty::get(ty).sty, vstore) {\n-                                        (&ty::ty_rptr(ra, _),\n-                                         ty::vstore_slice(rb)) => {\n-                                            infer::mk_subr(fcx.infcx(),\n-                                                           false,\n-                                                           ex.span,\n-                                                           rb,\n-                                                           ra);\n-                                        }\n-                                        _ => {}\n-                                    }\n-                                }\n-                                (&ty::ty_box(_), _) => {\n-                                    fcx.ccx.tcx.sess.span_err(ex.span,\n-                                                              ~\"must cast \\\n-                                                                a boxed \\\n-                                                                pointer to \\\n-                                                                a boxed\n-                                                                trait\");\n-                                    err = true;\n-                                }\n-                                (&ty::ty_rptr(*), _) => {\n-                                    fcx.ccx.tcx.sess.span_err(ex.span,\n-                                                              ~\"must cast \\\n-                                                                a borrowed \\\n-                                                                pointer to \\\n-                                                                a borrowed \\\n-                                                                trait\");\n-                                }\n-                                (&ty::ty_uniq(*), _) => {\n-                                    fcx.ccx.tcx.sess.span_err(ex.span,\n-                                                              ~\"must cast \\\n-                                                                a unique \\\n-                                                                pointer to \\\n-                                                                a uniquely-\\\n-                                                                owned trait\");\n-                                }\n-                                _ => {\n-                                    fcx.ccx.tcx.sess.impossible_case(\n-                                        ex.span,\n-                                        ~\"impossible combination of type and \\\n-                                          trait vstore\");\n-                                }\n-                            }\n-                        }\n-                        _ => err = true\n-                    }\n-\n-                    if err {\n-                        fcx.tcx().sess.span_fatal(\n-                            ex.span,\n-                            fmt!(\"failed to find an implementation of trait \\\n-                                  %s for %s\",\n-                                 fcx.infcx().ty_to_str(target_ty),\n-                                 fcx.infcx().ty_to_str(ty)));\n-                    }\n-                }\n-                Some(vtable) => {\n-                    /*\n-                    Map this expression to that vtable (that is: \"ex has\n-                    vtable <vtable>\")\n-                    */\n-                    if !is_early {\n-                        let vtable_map = cx.vtable_map;\n-                        vtable_map.insert(ex.id, @~[vtable]);\n-                    }\n-                    fcx.tcx().legacy_boxed_traits.insert(ex.id, ());\n-                }\n-            }\n+          let target_ty = fcx.expr_ty(ex);\n+          match ty::get(target_ty).sty {\n+              ty::ty_trait(_, _, vstore) => {\n+                  // Look up vtables for the type we're casting to,\n+                  // passing in the source and target type.  The source\n+                  // must be a pointer type suitable to the object sigil,\n+                  // e.g.: `@x as @Trait`, `&x as &Trait` or `~x as ~Trait`\n+                  let ty = structurally_resolved_type(fcx, ex.span,\n+                                                      fcx.expr_ty(src));\n+                  match (&ty::get(ty).sty, vstore) {\n+                      (&ty::ty_box(mt), ty::vstore_box) |\n+                      (&ty::ty_uniq(mt), ty::vstore_uniq) |\n+                      (&ty::ty_rptr(_, mt), ty::vstore_slice(*)) => {\n+                          let location_info =\n+                              &location_info_for_expr(ex);\n+                          let vcx = VtableContext {\n+                              ccx: fcx.ccx,\n+                              infcx: fcx.infcx()\n+                          };\n+                          let vtable_opt =\n+                              lookup_vtable(&vcx,\n+                                            location_info,\n+                                            mt.ty,\n+                                            target_ty,\n+                                            true,\n+                                            is_early);\n+                          match vtable_opt {\n+                              Some(vtable) => {\n+                                  // Map this expression to that\n+                                  // vtable (that is: \"ex has vtable\n+                                  // <vtable>\")\n+                                  if !is_early {\n+                                      let vtable_map =\n+                                          cx.vtable_map;\n+                                      vtable_map.insert(ex.id,\n+                                                        @~[vtable]);\n+                                  }\n+                              }\n+                              None => {\n+                                  fcx.tcx().sess.span_err(\n+                                      ex.span,\n+                                      fmt!(\"failed to find an implementation \\\n+                                            of trait %s for %s\",\n+                                           fcx.infcx().ty_to_str(target_ty),\n+                                           fcx.infcx().ty_to_str(mt.ty)));\n+                              }\n+                          }\n+\n+                          // Now, if this is &trait, we need to link the\n+                          // regions.\n+                          match (&ty::get(ty).sty, vstore) {\n+                              (&ty::ty_rptr(ra, _),\n+                               ty::vstore_slice(rb)) => {\n+                                  infer::mk_subr(fcx.infcx(),\n+                                                 false,\n+                                                 ex.span,\n+                                                 rb,\n+                                                 ra);\n+                              }\n+                              _ => {}\n+                          }\n+                      }\n+\n+                      (_, ty::vstore_box(*)) => {\n+                          fcx.ccx.tcx.sess.span_err(\n+                              ex.span,\n+                              fmt!(\"can only cast an @-pointer \\\n+                                    to an @-object, not a %s\",\n+                                   ty::ty_sort_str(fcx.tcx(), ty)));\n+                      }\n+\n+                      (_, ty::vstore_uniq(*)) => {\n+                          fcx.ccx.tcx.sess.span_err(\n+                              ex.span,\n+                              fmt!(\"can only cast an ~-pointer \\\n+                                    to a ~-object, not a %s\",\n+                                   ty::ty_sort_str(fcx.tcx(), ty)));\n+                      }\n+\n+                      (_, ty::vstore_slice(*)) => {\n+                          fcx.ccx.tcx.sess.span_err(\n+                              ex.span,\n+                              fmt!(\"can only cast an &-pointer \\\n+                                    to an &-object, not a %s\",\n+                                   ty::ty_sort_str(fcx.tcx(), ty)));\n+                      }\n+\n+                      (_, ty::vstore_fixed(*)) => {\n+                          fcx.tcx().sess.span_bug(\n+                              ex.span,\n+                              fmt!(\"trait with fixed vstore\"));\n+                      }\n+                  }\n+              }\n+              _ => { /* not a cast to a trait; ignore */ }\n           }\n-          _ => ()\n-        }\n       }\n       _ => ()\n     }"}, {"sha": "6ad58bc5d4f437e1520997882580a3242b7c6710", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -87,7 +87,7 @@ use syntax::ast;\n // function.\n pub enum Coerce = CombineFields;\n \n-impl Coerce {\n+pub impl Coerce {\n     fn tys(&self, a: ty::t, b: ty::t) -> CoerceResult {\n         debug!(\"Coerce.tys(%s => %s)\",\n                a.inf_str(self.infcx),"}, {"sha": "e140bcad11c52851a2612bfe5d10361dd306e5af", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -316,7 +316,7 @@ pub fn super_modes<C:Combine>(\n     ty::unify_mode(tcx, expected_found(self, a, b))\n }\n \n-fn super_args<C:Combine>(\n+pub fn super_args<C:Combine>(\n     self: &C, a: ty::arg, b: ty::arg)\n     -> cres<ty::arg> {\n "}, {"sha": "981d7be3d5f69020baab4de8b22f790a55bae4ec", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -18,9 +18,14 @@ use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n+use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::isr_alist;\n+use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n use syntax::ast::{noreturn, pure_fn, ret_style, return_val, unsafe_fn};\n+use syntax::ast::{Onceness, purity};\n+use syntax::codemap::span;\n+use util::common::{indent, indenter};\n use util::ppaux::mt_to_str;\n \n use std::list;"}, {"sha": "fe12af52d26e1de1ac49f32a3f7e91bd83809c26", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,7 +34,7 @@\n \n use core::prelude::*;\n \n-use middle::ty::{RegionVid, TyVar};\n+use middle::ty::{RegionVid, TyVar, Vid};\n use middle::ty;\n use middle::typeck::isr_alist;\n use middle::typeck::infer::*;\n@@ -46,6 +46,7 @@ use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::to_str::InferStr;\n+use util::common::indenter;\n \n use std::list;\n "}, {"sha": "83cbd4c745c0c5f51df41b879e055fb87b769b16", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -17,12 +17,17 @@ use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n+use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::isr_alist;\n+use util::common::indent;\n use util::ppaux::mt_to_str;\n \n use std::list;\n+use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn, noreturn};\n use syntax::ast::{pure_fn, ret_style, return_val, unsafe_fn};\n+use syntax::ast::{Onceness, purity};\n+use syntax::codemap::span;\n \n pub enum Lub = CombineFields;  // least-upper-bound: common supertype\n "}, {"sha": "aff2d599a0ef17fb441712f07586a5de13b1978e", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -551,7 +551,7 @@ struct Snapshot {\n     region_vars_snapshot: uint,\n }\n \n-impl @mut InferCtxt {\n+pub impl @mut InferCtxt {\n     fn combine_fields(&self, a_is_expected: bool,\n                       span: span) -> CombineFields {\n         CombineFields {infcx: *self,\n@@ -643,7 +643,7 @@ fn next_simple_var<V:Copy,T:Copy>(\n     return id;\n }\n \n-impl @mut InferCtxt {\n+pub impl @mut InferCtxt {\n     fn next_ty_var_id(&self) -> TyVid {\n         let id = self.ty_var_counter;\n         self.ty_var_counter += 1;"}, {"sha": "d016a6f790a60764e76e80aa2df75fc16227bd71", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -1218,7 +1218,7 @@ fn TwoRegionsMap() -> TwoRegionsMap {\n     return HashMap();\n }\n \n-impl RegionVarBindings {\n+pub impl RegionVarBindings {\n     fn infer_variable_values(&mut self) -> ~[GraphNodeValue] {\n         let mut graph = self.construct_graph();\n         self.expansion(&mut graph);"}, {"sha": "aaaf3b425c227b928087cd282a3446d32552da84", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use middle::ty;\n+use middle::ty::TyVar;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::cres;\n@@ -19,11 +20,14 @@ use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::*;\n+use util::common::{indent, indenter};\n use util::ppaux::bound_region_to_str;\n \n use std::list::Nil;\n use std::list;\n-use syntax::ast::{m_const, purity, ret_style};\n+use syntax::ast;\n+use syntax::ast::{Onceness, m_const, purity, ret_style};\n+use syntax::codemap::span;\n \n \n pub enum Sub = CombineFields;  // \"subtype\", \"subregion\" etc"}, {"sha": "9701e370ca8ce310986cd8488693b10f214ef831", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -79,7 +79,7 @@ fn setup_env(test_name: &str, source_string: &str) -> Env {\n                 err_messages: messages};\n }\n \n-impl Env {\n+pub impl Env {\n     fn create_region_hierarchy(&self, rh: &RH) {\n         for rh.sub.each |child_rh| {\n             self.create_region_hierarchy(child_rh);"}, {"sha": "d82667285ff3367b90a9a932c0869b12c1de3016", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -70,11 +70,11 @@ pub fn bound_self_region(rp: Option<ty::region_variance>)\n     }\n }\n \n-pub struct anon_rscope { anon: ty::Region, base: region_scope }\n+pub struct anon_rscope { anon: ty::Region, base: @region_scope }\n pub fn in_anon_rscope<RS:region_scope + Copy + Durable>(self: RS,\n                                                         r: ty::Region)\n                                                      -> @anon_rscope {\n-    @anon_rscope {anon: r, base: self as region_scope}\n+    @anon_rscope {anon: r, base: @self as @region_scope}\n }\n \n impl region_scope for @anon_rscope {\n@@ -97,7 +97,7 @@ pub struct binding_rscope {\n \n pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(self: RS)\n     -> @mut binding_rscope {\n-    let base = self as region_scope;\n+    let base = @self as @region_scope;\n     @mut binding_rscope { base: base, anon_bindings: 0 }\n }\n "}, {"sha": "f7de1997d537383f04ef3a9c83912dcfccd87993", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -174,7 +174,7 @@ pub struct IndexEntry {\n     link: ~str\n }\n \n-impl Doc {\n+pub impl Doc {\n     fn CrateDoc(&self) -> CrateDoc {\n         option::get(vec::foldl(None, self.pages, |_m, page| {\n             match copy *page {\n@@ -190,7 +190,7 @@ impl Doc {\n }\n \n /// Some helper methods on ModDoc, mostly for testing\n-impl ModDoc {\n+pub impl ModDoc {\n     fn mods(&self) -> ~[ModDoc] {\n         do vec::filter_mapped(self.items) |itemtag| {\n             match copy *itemtag {"}, {"sha": "1a370947d6980b88c978e3b01a7ece7510e0bb93", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -51,7 +51,7 @@ fn test() {\n          fn ifn() { } \\\n          enum ienum { ivar } \\\n          trait itrait { fn a(); } \\\n-         impl int { fn a() { } } \\\n+         pub impl int { fn a() { } } \\\n          type itype = int; \\\n          struct istruct { f: () }\";\n     do astsrv::from_str(source) |srv| {"}, {"sha": "69c5026cbd1ff2f100be9f36fe5d4df3b5361b90", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 8, "deletions": 71, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -21,7 +21,7 @@ use core::cell::Cell;\n use core::pipes;\n use core::prelude::*;\n use core::private::{SharedMutableState, shared_mutable_state};\n-use core::private::{clone_shared_mutable_state, unwrap_shared_mutable_state};\n+use core::private::{clone_shared_mutable_state};\n use core::private::{get_shared_mutable_state, get_shared_immutable_state};\n use core::ptr;\n use core::task;\n@@ -30,7 +30,7 @@ use core::util;\n /// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n pub struct Condvar { is_mutex: bool, failed: &mut bool, cond: &sync::Condvar }\n \n-impl &Condvar {\n+pub impl &Condvar {\n     /// Atomically exit the associated ARC and block until a signal is sent.\n     #[inline(always)]\n     fn wait() { self.wait_on(0) }\n@@ -104,20 +104,6 @@ pub fn clone<T:Const + Owned>(rc: &ARC<T>) -> ARC<T> {\n     ARC { x: unsafe { clone_shared_mutable_state(&rc.x) } }\n }\n \n-/**\n- * Retrieve the data back out of the ARC. This function blocks until the\n- * reference given to it is the last existing one, and then unwrap the data\n- * instead of destroying it.\n- *\n- * If multiple tasks call unwrap, all but the first will fail. Do not call\n- * unwrap from a task that holds another reference to the same ARC; it is\n- * guaranteed to deadlock.\n- */\n-pub fn unwrap<T:Const + Owned>(rc: ARC<T>) -> T {\n-    let ARC { x: x } = rc;\n-    unsafe { unwrap_shared_mutable_state(x) }\n-}\n-\n impl<T:Const + Owned> Clone for ARC<T> {\n     fn clone(&self) -> ARC<T> {\n         clone(self)\n@@ -158,7 +144,7 @@ impl<T:Owned> Clone for MutexARC<T> {\n     }\n }\n \n-impl<T:Owned> &MutexARC<T> {\n+pub impl<T:Owned> &MutexARC<T> {\n \n     /**\n      * Access the underlying mutable data with mutual exclusion from other\n@@ -213,23 +199,6 @@ impl<T:Owned> &MutexARC<T> {\n     }\n }\n \n-/**\n- * Retrieves the data, blocking until all other references are dropped,\n- * exactly as arc::unwrap.\n- *\n- * Will additionally fail if another task has failed while accessing the arc.\n- */\n-// FIXME(#3724) make this a by-move method on the arc\n-pub fn unwrap_mutex_arc<T:Owned>(arc: MutexARC<T>) -> T {\n-    let MutexARC { x: x } = arc;\n-    let inner = unsafe { unwrap_shared_mutable_state(x) };\n-    let MutexARCInner { failed: failed, data: data, _ } = inner;\n-    if failed {\n-        fail!(~\"Can't unwrap poisoned MutexARC - another task failed inside!\")\n-    }\n-    data\n-}\n-\n // Common code for {mutex.access,rwlock.write}{,_cond}.\n #[inline(always)]\n #[doc(hidden)]\n@@ -301,7 +270,7 @@ pub fn rw_arc_with_condvars<T:Const + Owned>(\n     RWARC { x: unsafe { shared_mutable_state(data) }, cant_nest: () }\n }\n \n-impl<T:Const + Owned> RWARC<T> {\n+pub impl<T:Const + Owned> RWARC<T> {\n     /// Duplicate a rwlock-protected ARC, as arc::clone.\n     fn clone(&self) -> RWARC<T> {\n         RWARC { x: unsafe { clone_shared_mutable_state(&self.x) },\n@@ -310,7 +279,7 @@ impl<T:Const + Owned> RWARC<T> {\n \n }\n \n-impl<T:Const + Owned> &RWARC<T> {\n+pub impl<T:Const + Owned> &RWARC<T> {\n     /**\n      * Access the underlying data mutably. Locks the rwlock in write mode;\n      * other readers and writers will block.\n@@ -411,24 +380,6 @@ impl<T:Const + Owned> &RWARC<T> {\n     }\n }\n \n-/**\n- * Retrieves the data, blocking until all other references are dropped,\n- * exactly as arc::unwrap.\n- *\n- * Will additionally fail if another task has failed while accessing the arc\n- * in write mode.\n- */\n-// FIXME(#3724) make this a by-move method on the arc\n-pub fn unwrap_rw_arc<T:Const + Owned>(arc: RWARC<T>) -> T {\n-    let RWARC { x: x, _ } = arc;\n-    let inner = unsafe { unwrap_shared_mutable_state(x) };\n-    let RWARCInner { failed: failed, data: data, _ } = inner;\n-    if failed {\n-        fail!(~\"Can't unwrap poisoned RWARC - another task failed inside!\")\n-    }\n-    data\n-}\n-\n // Borrowck rightly complains about immutably aliasing the rwlock in order to\n // lock it. This wraps the unsafety, with the justification that the 'lock'\n // field is never overwritten; only 'failed' and 'data'.\n@@ -445,7 +396,7 @@ pub enum RWWriteMode<T> =\n /// The \"read permission\" token used for RWARC.write_downgrade().\n pub enum RWReadMode<T> = (&T, sync::RWlockReadMode);\n \n-impl<T:Const + Owned> &RWWriteMode<T> {\n+pub impl<T:Const + Owned> &RWWriteMode<T> {\n     /// Access the pre-downgrade RWARC in write mode.\n     fn write<U>(blk: fn(x: &mut T) -> U) -> U {\n         match *self {\n@@ -475,7 +426,7 @@ impl<T:Const + Owned> &RWWriteMode<T> {\n     }\n }\n \n-impl<T:Const + Owned> &RWReadMode<T> {\n+pub impl<T:Const + Owned> &RWReadMode<T> {\n     /// Access the post-downgrade rwlock in read mode.\n     fn read<U>(blk: fn(x: &T) -> U) -> U {\n         match *self {\n@@ -497,6 +448,7 @@ mod tests {\n     use arc::*;\n     use arc;\n \n+    use core::cell::Cell;\n     use core::option::{Some, None};\n     use core::option;\n     use core::pipes;\n@@ -585,21 +537,6 @@ mod tests {\n         }\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n-    pub fn test_mutex_arc_unwrap_poison() {\n-        let arc = MutexARC(1);\n-        let arc2 = ~(&arc).clone();\n-        let (p, c) = comm::stream();\n-        do task::spawn || {\n-            do arc2.access |one| {\n-                c.send(());\n-                assert *one == 2;\n-            }\n-        }\n-        let _ = p.recv();\n-        let one = unwrap_mutex_arc(arc);\n-        assert one == 1;\n-    }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_wr() {\n         let arc = ~RWARC(1);\n         let arc2 = ~arc.clone();"}, {"sha": "a30ee94a42b0fcd1702d642fbb131931a4c4b9ea", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -161,7 +161,7 @@ unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TypeDesc, bool) {\n     (reinterpret_cast(&(p & !1)), p & 1 == 1)\n }\n \n-impl &Arena {\n+pub impl &Arena {\n     // Functions for the POD part of the arena\n     fn alloc_pod_grow(n_bytes: uint, align: uint) -> *u8 {\n         // Allocate a new chunk."}, {"sha": "cf278b07c9d9898afaa0e88b2f1cb41577493e4d", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -27,7 +27,7 @@ fn small_mask(nbits: uint) -> uint {\n     (1 << nbits) - 1\n }\n \n-impl SmallBitv {\n+pub impl SmallBitv {\n     static fn new(bits: uint) -> SmallBitv {\n         SmallBitv {bits: bits}\n     }\n@@ -124,7 +124,7 @@ fn big_mask(nbits: uint, elem: uint) -> uint {\n     }\n }\n \n-impl BigBitv {\n+pub impl BigBitv {\n     static fn new(storage: ~[uint]) -> BigBitv {\n         BigBitv {storage: storage}\n     }\n@@ -256,7 +256,7 @@ priv impl Bitv {\n \n }\n \n-impl Bitv {\n+pub impl Bitv {\n     static fn new(nbits: uint, init: bool) -> Bitv {\n         let rep = if nbits <= uint::bits {\n             Small(~SmallBitv::new(if init {!0} else {0}))\n@@ -591,7 +591,7 @@ pub struct BitvSet {\n     priv bitv: BigBitv\n }\n \n-impl BitvSet {\n+pub impl BitvSet {\n     /// Creates a new bit vector set with initially no contents\n     static fn new() -> BitvSet {\n         BitvSet{ size: 0, bitv: BigBitv::new(~[0]) }"}, {"sha": "f6fcf6c8d3b9a4217e5ac901ef9fac548452b703", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -37,7 +37,7 @@ impl<T> Mutable for Deque<T> {\n     }\n }\n \n-impl<T> Deque<T> {\n+pub impl<T> Deque<T> {\n     static pure fn new() -> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n               elts: vec::from_fn(initial_capacity, |_| None)}\n@@ -116,6 +116,9 @@ fn get<T>(elts: &r/[Option<T>], i: uint) -> &r/T {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use core::cmp::Eq;\n+    use core::kinds::{Durable, Copy};\n+    use core::prelude::debug;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "7d04f6760793ee3759df174030e7cb5f34dfeda5", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -279,7 +279,7 @@ pub mod reader {\n         }\n     }\n \n-    impl Decoder {\n+    pub impl Decoder {\n         fn read_opaque<R>(&self, op: fn(Doc) -> R) -> R {\n             do self.push_doc(self.next_doc(EsOpaque)) {\n                 op(copy self.parent)\n@@ -451,7 +451,7 @@ pub mod writer {\n     }\n \n     // FIXME (#2741): Provide a function to write the standard ebml header.\n-    impl Encoder {\n+    pub impl Encoder {\n         fn start_tag(tag_id: uint) {\n             debug!(\"Start tag %u\", tag_id);\n \n@@ -571,7 +571,7 @@ pub mod writer {\n         }\n     }\n \n-    impl Encoder {\n+    pub impl Encoder {\n         fn emit_opaque(&self, f: fn()) {\n             do self.wr_tag(EsOpaque as uint) {\n                 f()"}, {"sha": "73dbe4bea5742e374331e0d20dac1396fd3f1814", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -636,6 +636,7 @@ mod test {\n     use DefaultEncoder = json::Encoder;\n     use DefaultDecoder = json::Decoder;\n \n+    use flatpipes::{Flattener, Unflattener};\n     use flatpipes::flatteners::*;\n     use flatpipes::bytepipes::*;\n     use flatpipes::pod;\n@@ -647,7 +648,7 @@ mod test {\n \n     use core::dvec::DVec;\n     use core::int;\n-    use core::io::BytesReader;\n+    use core::io::{BytesReader, BytesWriter};\n     use core::io;\n     use core::prelude::*;\n     use core::result;"}, {"sha": "c577540612591cd59233f97d81aa0b6d06e1d994", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -49,14 +49,14 @@ priv enum FutureState<A> {\n }\n \n /// Methods on the `future` type\n-impl<A:Copy> Future<A> {\n+pub impl<A:Copy> Future<A> {\n     fn get() -> A {\n         //! Get the value of the future\n         *(self.get_ref())\n     }\n }\n \n-impl<A> Future<A> {\n+pub impl<A> Future<A> {\n \n     pure fn get_ref(&self) -> &self/A {\n         /*!\n@@ -150,7 +150,7 @@ pub mod test {\n \n     use future::*;\n \n-    use core::comm::oneshot;\n+    use core::comm::{oneshot, send_one};\n     use core::task;\n \n     #[test]"}, {"sha": "dd20558325906b8e68273278a52c8bdf8a338cc3", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -445,7 +445,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n }\n \n #[deriving_eq]\n-enum FailType {\n+pub enum FailType {\n     ArgumentMissing_,\n     UnrecognizedOption_,\n     OptionMissing_,"}, {"sha": "d1a65517aad0f7de788df7d11408ddf504b8d3df", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -1208,6 +1208,7 @@ mod tests {\n     use core::prelude::*;\n \n     use json::*;\n+    use serialize;\n \n     use core::result;\n     use core::hashmap::linear::LinearMap;"}, {"sha": "dcbf7e60d8956072c959f704ea7fd2a5f9b4378c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -820,7 +820,7 @@ pub fn socket_buf(sock: TcpSocket) -> TcpSocketBuf {\n }\n \n /// Convenience methods extending `net::tcp::tcp_socket`\n-impl TcpSocket {\n+pub impl TcpSocket {\n     pub fn read_start() -> result::Result<@Port<\n         result::Result<~[u8], TcpErrData>>, TcpErrData> {\n         read_start(&self)"}, {"sha": "08b7b3d6ae506087dd6e53aef5136705b2b8fe44", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 86, "deletions": 82, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -730,98 +730,102 @@ impl to_bytes::IterBytes for Url {\n     }\n }\n \n+// Put a few tests outside of the 'test' module so they can test the internal\n+// functions and those functions don't need 'pub'\n+\n+#[test]\n+fn test_split_char_first() {\n+    let (u,v) = split_char_first(~\"hello, sweet world\", ',');\n+    assert u == ~\"hello\";\n+    assert v == ~\" sweet world\";\n+\n+    let (u,v) = split_char_first(~\"hello sweet world\", ',');\n+    assert u == ~\"hello sweet world\";\n+    assert v == ~\"\";\n+}\n+\n+#[test]\n+fn test_get_authority() {\n+    let (u, h, p, r) = get_authority(\n+        \"//user:pass@rust-lang.org/something\").unwrap();\n+    assert u == Some(UserInfo::new(~\"user\", Some(~\"pass\")));\n+    assert h == ~\"rust-lang.org\";\n+    assert p.is_none();\n+    assert r == ~\"/something\";\n+\n+    let (u, h, p, r) = get_authority(\n+        \"//rust-lang.org:8000?something\").unwrap();\n+    assert u.is_none();\n+    assert h == ~\"rust-lang.org\";\n+    assert p == Some(~\"8000\");\n+    assert r == ~\"?something\";\n+\n+    let (u, h, p, r) = get_authority(\n+        \"//rust-lang.org#blah\").unwrap();\n+    assert u.is_none();\n+    assert h == ~\"rust-lang.org\";\n+    assert p.is_none();\n+    assert r == ~\"#blah\";\n+\n+    // ipv6 tests\n+    let (_, h, _, _) = get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334#blah\").unwrap();\n+    assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n+\n+    let (_, h, p, _) = get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\").unwrap();\n+    assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n+    assert p == Some(~\"8000\");\n+\n+    let (u, h, p, _) = get_authority(\n+        \"//us:p@2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\"\n+    ).unwrap();\n+    assert u == Some(UserInfo::new(~\"us\", Some(~\"p\")));\n+    assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n+    assert p == Some(~\"8000\");\n+\n+    // invalid authorities;\n+    assert get_authority(\"//user:pass@rust-lang:something\").is_err();\n+    assert get_authority(\"//user@rust-lang:something:/path\").is_err();\n+    assert get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:800a\").is_err();\n+    assert get_authority(\n+        \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000:00\").is_err();\n+\n+    // these parse as empty, because they don't start with '//'\n+    let (_, h, _, _) = get_authority(~\"user:pass@rust-lang\").unwrap();\n+    assert h == ~\"\";\n+    let (_, h, _, _) = get_authority(~\"rust-lang.org\").unwrap();\n+    assert h == ~\"\";\n+}\n+\n+#[test]\n+fn test_get_path() {\n+    let (p, r) = get_path(\"/something+%20orother\", true).unwrap();\n+    assert p == ~\"/something+ orother\";\n+    assert r == ~\"\";\n+    let (p, r) = get_path(\"test@email.com#fragment\", false).unwrap();\n+    assert p == ~\"test@email.com\";\n+    assert r == ~\"#fragment\";\n+    let (p, r) = get_path(~\"/gen/:addr=?q=v\", false).unwrap();\n+    assert p == ~\"/gen/:addr=\";\n+    assert r == ~\"?q=v\";\n+\n+    //failure cases\n+    assert get_path(~\"something?q\", true).is_err();\n+}\n+\n #[cfg(test)]\n mod tests {\n     use core::prelude::*;\n \n     use net_url::*;\n     use net_url::UserInfo;\n \n+    use core::hashmap::linear::LinearMap;\n     use core::result;\n     use core::str;\n \n-    #[test]\n-    pub fn test_split_char_first() {\n-        let (u,v) = split_char_first(~\"hello, sweet world\", ',');\n-        assert u == ~\"hello\";\n-        assert v == ~\" sweet world\";\n-\n-        let (u,v) = split_char_first(~\"hello sweet world\", ',');\n-        assert u == ~\"hello sweet world\";\n-        assert v == ~\"\";\n-    }\n-\n-    #[test]\n-    pub fn test_get_authority() {\n-        let (u, h, p, r) = get_authority(\n-            \"//user:pass@rust-lang.org/something\").unwrap();\n-        assert u == Some(UserInfo::new(~\"user\", Some(~\"pass\")));\n-        assert h == ~\"rust-lang.org\";\n-        assert p.is_none();\n-        assert r == ~\"/something\";\n-\n-        let (u, h, p, r) = get_authority(\n-            \"//rust-lang.org:8000?something\").unwrap();\n-        assert u.is_none();\n-        assert h == ~\"rust-lang.org\";\n-        assert p == Some(~\"8000\");\n-        assert r == ~\"?something\";\n-\n-        let (u, h, p, r) = get_authority(\n-            \"//rust-lang.org#blah\").unwrap();\n-        assert u.is_none();\n-        assert h == ~\"rust-lang.org\";\n-        assert p.is_none();\n-        assert r == ~\"#blah\";\n-\n-        // ipv6 tests\n-        let (_, h, _, _) = get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334#blah\").unwrap();\n-        assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n-\n-        let (_, h, p, _) = get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\").unwrap();\n-        assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n-        assert p == Some(~\"8000\");\n-\n-        let (u, h, p, _) = get_authority(\n-            \"//us:p@2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000#blah\"\n-        ).unwrap();\n-        assert u == Some(UserInfo::new(~\"us\", Some(~\"p\")));\n-        assert h == ~\"2001:0db8:85a3:0042:0000:8a2e:0370:7334\";\n-        assert p == Some(~\"8000\");\n-\n-        // invalid authorities;\n-        assert get_authority(\"//user:pass@rust-lang:something\").is_err();\n-        assert get_authority(\"//user@rust-lang:something:/path\").is_err();\n-        assert get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:800a\").is_err();\n-        assert get_authority(\n-            \"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000:00\").is_err();\n-\n-        // these parse as empty, because they don't start with '//'\n-        let (_, h, _, _) = get_authority(~\"user:pass@rust-lang\").unwrap();\n-        assert h == ~\"\";\n-        let (_, h, _, _) = get_authority(~\"rust-lang.org\").unwrap();\n-        assert h == ~\"\";\n-    }\n-\n-    #[test]\n-    pub fn test_get_path() {\n-        let (p, r) = get_path(\"/something+%20orother\", true).unwrap();\n-        assert p == ~\"/something+ orother\";\n-        assert r == ~\"\";\n-        let (p, r) = get_path(\"test@email.com#fragment\", false).unwrap();\n-        assert p == ~\"test@email.com\";\n-        assert r == ~\"#fragment\";\n-        let (p, r) = get_path(~\"/gen/:addr=?q=v\", false).unwrap();\n-        assert p == ~\"/gen/:addr=\";\n-        assert r == ~\"?q=v\";\n-\n-        //failure cases\n-        assert get_path(~\"something?q\", true).is_err();\n-    }\n-\n     #[test]\n     pub fn test_url_parse() {\n         let url = ~\"http://user:pass@rust-lang.org/doc?s=v#something\";"}, {"sha": "1d21f749b32a6a31b8fab0ec993f490d1e79965e", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -134,7 +134,9 @@ pub mod chained {\n             }\n             self.chains = new_chains;\n         }\n+    }\n \n+    pub impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n         pure fn each_entry(blk: fn(@Entry<K,V>) -> bool) {\n             // n.b. we can't use vec::iter() here because self.chains\n             // is stored in a mutable location.\n@@ -168,7 +170,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n+    pub impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n         pure fn contains_key(&self, k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n@@ -252,7 +254,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq + IterBytes + Hash + Copy,V:Copy> T<K, V> {\n+    pub impl<K:Eq + IterBytes + Hash + Copy,V:Copy> T<K, V> {\n         pure fn find(&self, k: &K) -> Option<V> {\n             match self.search_tbl(k, k.hash_keyed(0,0) as uint) {\n               NotFound => None,\n@@ -325,7 +327,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq + IterBytes + Hash + Copy + ToStr,V:ToStr + Copy> T<K, V> {\n+    pub impl<K:Eq + IterBytes + Hash + Copy + ToStr,V:ToStr + Copy> T<K, V> {\n         fn to_writer(wr: io::Writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");"}, {"sha": "4b92bd7543a7d1c84adab51f5b5b05da4b4961b7", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -48,7 +48,7 @@ impl<T:Ord> Mutable for PriorityQueue<T> {\n     fn clear(&mut self) { self.data.truncate(0) }\n }\n \n-impl <T:Ord> PriorityQueue<T> {\n+pub impl <T:Ord> PriorityQueue<T> {\n     /// Returns the greatest item in the queue - fails if empty\n     pure fn top(&self) -> &self/T { &self.data[0] }\n "}, {"sha": "e8c1413e90a82fbc8211b7cd7805cc83ad5b9d16", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -63,7 +63,7 @@ const k3: u32 = 0xCA62C1D6u32;\n \n \n /// Construct a `sha` object\n-pub fn sha1() -> Sha1 {\n+pub fn sha1() -> @Sha1 {\n     struct Sha1State\n         { h: ~[u32],\n           len_low: u32,\n@@ -269,7 +269,7 @@ pub fn sha1() -> Sha1 {\n          computed: false,\n          work_buf: @mut vec::from_elem(work_buf_len, 0u32)\n     };\n-    let mut sh = (st) as Sha1;\n+    let mut sh = @st as @Sha1;\n     sh.reset();\n     return sh;\n }"}, {"sha": "43fab9df1631e953626f119b060b2c360efe683a", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -404,7 +404,7 @@ fn MergeState<T>() -> MergeState<T> {\n     }\n }\n \n-impl<T:Copy + Ord> MergeState<T> {\n+pub impl<T:Copy + Ord> MergeState<T> {\n     fn push_run(&self, run_base: uint, run_len: uint) {\n         let tmp = RunState{base: run_base, len: run_len};\n         self.runs.push(tmp);"}, {"sha": "39d3fd569a6266aab5b9c4a9d9fbd6d26a0a2ea6", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -100,7 +100,7 @@ fn new_sem_and_signal(count: int, num_condvars: uint)\n }\n \n #[doc(hidden)]\n-impl<Q:Owned> &Sem<Q> {\n+pub impl<Q:Owned> &Sem<Q> {\n     fn acquire() {\n         let mut waiter_nobe = None;\n         unsafe {\n@@ -136,7 +136,7 @@ impl<Q:Owned> &Sem<Q> {\n }\n // FIXME(#3154) move both copies of this into Sem<Q>, and unify the 2 structs\n #[doc(hidden)]\n-impl &Sem<()> {\n+pub impl &Sem<()> {\n     fn access<U>(blk: fn() -> U) -> U {\n         let mut release = None;\n         unsafe {\n@@ -149,7 +149,7 @@ impl &Sem<()> {\n     }\n }\n #[doc(hidden)]\n-impl &Sem<~[Waitqueue]> {\n+pub impl &Sem<~[Waitqueue]> {\n     fn access<U>(blk: fn() -> U) -> U {\n         let mut release = None;\n         unsafe {\n@@ -192,7 +192,7 @@ pub struct Condvar { priv sem: &Sem<~[Waitqueue]> }\n \n impl Drop for Condvar { fn finalize(&self) {} }\n \n-impl &Condvar {\n+pub impl &Condvar {\n     /**\n      * Atomically drop the associated lock, and block until a signal is sent.\n      *\n@@ -344,7 +344,7 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n }\n \n #[doc(hidden)]\n-impl &Sem<~[Waitqueue]> {\n+pub impl &Sem<~[Waitqueue]> {\n     // The only other place that condvars get built is rwlock_write_mode.\n     fn access_cond<U>(blk: fn(c: &Condvar) -> U) -> U {\n         do self.access { blk(&Condvar { sem: self }) }\n@@ -370,7 +370,7 @@ impl Clone for Semaphore {\n     }\n }\n \n-impl &Semaphore {\n+pub impl &Semaphore {\n     /**\n      * Acquire a resource represented by the semaphore. Blocks if necessary\n      * until resource(s) become available.\n@@ -399,7 +399,7 @@ impl &Semaphore {\n  * A task which fails while holding a mutex will unlock the mutex as it\n  * unwinds.\n  */\n-struct Mutex { priv sem: Sem<~[Waitqueue]> }\n+pub struct Mutex { priv sem: Sem<~[Waitqueue]> }\n \n /// Create a new mutex, with one associated condvar.\n pub fn Mutex() -> Mutex { mutex_with_condvars(1) }\n@@ -418,7 +418,7 @@ impl Clone for Mutex {\n     fn clone(&self) -> Mutex { Mutex { sem: Sem((*self.sem).clone()) } }\n }\n \n-impl &Mutex {\n+pub impl &Mutex {\n     /// Run a function with ownership of the mutex.\n     fn lock<U>(blk: fn() -> U) -> U { (&self.sem).access(blk) }\n \n@@ -447,7 +447,7 @@ struct RWlockInner {\n  * A task which fails while holding an rwlock will unlock the rwlock as it\n  * unwinds.\n  */\n-struct RWlock {\n+pub struct RWlock {\n     priv order_lock:  Semaphore,\n     priv access_lock: Sem<~[Waitqueue]>,\n     priv state:       Exclusive<RWlockInner>\n@@ -467,7 +467,7 @@ pub fn rwlock_with_condvars(num_condvars: uint) -> RWlock {\n                                              read_count: 0 }) }\n }\n \n-impl &RWlock {\n+pub impl &RWlock {\n     /// Create a new handle to the rwlock.\n     fn clone() -> RWlock {\n         RWlock { order_lock:  (&(self.order_lock)).clone(),\n@@ -688,15 +688,15 @@ impl Drop for RWlockWriteMode { fn finalize(&self) {} }\n pub struct RWlockReadMode  { priv lock: &RWlock }\n impl Drop for RWlockReadMode { fn finalize(&self) {} }\n \n-impl &RWlockWriteMode {\n+pub impl &RWlockWriteMode {\n     /// Access the pre-downgrade rwlock in write mode.\n     fn write<U>(blk: fn() -> U) -> U { blk() }\n     /// Access the pre-downgrade rwlock in write mode with a condvar.\n     fn write_cond<U>(blk: fn(c: &Condvar) -> U) -> U {\n         blk(&Condvar { sem: &self.lock.access_lock })\n     }\n }\n-impl &RWlockReadMode {\n+pub impl &RWlockReadMode {\n     /// Access the post-downgrade rwlock in read mode.\n     fn read<U>(blk: fn() -> U) -> U { blk() }\n }\n@@ -712,6 +712,7 @@ mod tests {\n     use sync::*;\n \n     use core::cast;\n+    use core::cell::Cell;\n     use core::option;\n     use core::pipes;\n     use core::ptr;"}, {"sha": "49a8dff4a962db4d101d1e18f5180e0ddae8b8c8", "filename": "src/libstd/test.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -46,34 +46,10 @@ extern mod rustrt {\n // colons. This way if some test runner wants to arrange the tests\n // hierarchically it may.\n \n-#[cfg(stage0)]\n-pub enum TestName {\n-    // Stage0 doesn't understand sendable &static/str yet\n-    StaticTestName(&static/[u8]),\n-    DynTestName(~str)\n-}\n-\n-#[cfg(stage0)]\n-impl ToStr for TestName {\n-    pure fn to_str(&self) -> ~str {\n-        match self {\n-            &StaticTestName(s) => str::from_bytes(s),\n-            &DynTestName(s) => s.to_str()\n-        }\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub enum TestName {\n     StaticTestName(&static/str),\n     DynTestName(~str)\n }\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n impl ToStr for TestName {\n     pure fn to_str(&self) -> ~str {\n         match self {"}, {"sha": "6e80665d80e13bb8937aa86b20d68d78599fb56c", "filename": "src/libstd/time.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -47,7 +47,7 @@ pub struct Timespec { sec: i64, nsec: i32 }\n  * -1.2 seconds before the epoch is represented by `Timespec { sec: -2_i64,\n  * nsec: 800_000_000_i32 }`.\n  */\n-impl Timespec {\n+pub impl Timespec {\n     static pure fn new(sec: i64, nsec: i32) -> Timespec {\n         assert nsec >= 0 && nsec < NSEC_PER_SEC;\n         Timespec { sec: sec, nsec: nsec }\n@@ -208,7 +208,7 @@ pub pure fn strftime(format: &str, tm: &Tm) -> ~str {\n     unsafe { do_strftime(format, tm) }\n }\n \n-impl Tm {\n+pub impl Tm {\n     /// Convert time to the seconds from January 1, 1970\n     fn to_timespec() -> Timespec {\n         unsafe {\n@@ -892,6 +892,7 @@ mod tests {\n     use core::float;\n     use core::os;\n     use core::result;\n+    use core::result::{Err, Ok};\n     use core::str;\n     use core::u64;\n     use core::uint;\n@@ -902,15 +903,13 @@ mod tests {\n         const some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n \n         let tv1 = get_time();\n-        log(debug, ~\"tv1=\" + uint::to_str(tv1.sec as uint) + ~\" sec + \"\n-                   + uint::to_str(tv1.nsec as uint) + ~\" nsec\");\n+        debug!(\"tv1=%? sec + %? nsec\", tv1.sec as uint, tv1.nsec as uint);\n \n         assert tv1.sec > some_recent_date;\n         assert tv1.nsec < 1000000000i32;\n \n         let tv2 = get_time();\n-        log(debug, ~\"tv2=\" + uint::to_str(tv2.sec as uint) + ~\" sec + \"\n-                   + uint::to_str(tv2.nsec as uint) + ~\" nsec\");\n+        debug!(\"tv2=%? sec + %? nsec\", tv2.sec as uint, tv2.nsec as uint);\n \n         assert tv2.sec >= tv1.sec;\n         assert tv2.sec < some_future_date;\n@@ -924,16 +923,16 @@ mod tests {\n         let s0 = precise_time_s();\n         let ns1 = precise_time_ns();\n \n-        log(debug, ~\"s0=\" + float::to_str_digits(s0, 9u) + ~\" sec\");\n+        debug!(\"s0=%s sec\", float::to_str_digits(s0, 9u));\n         assert s0 > 0.;\n         let ns0 = (s0 * 1000000000.) as u64;\n-        log(debug, ~\"ns0=\" + u64::to_str(ns0) + ~\" ns\");\n+        debug!(\"ns0=%? ns\", ns0);\n \n-        log(debug, ~\"ns1=\" + u64::to_str(ns1) + ~\" ns\");\n+        debug!(\"ns1=%? ns\", ns0);\n         assert ns1 >= ns0;\n \n         let ns2 = precise_time_ns();\n-        log(debug, ~\"ns2=\" + u64::to_str(ns2) + ~\" ns\");\n+        debug!(\"ns2=%? ns\", ns0);\n         assert ns2 >= ns1;\n     }\n "}, {"sha": "88e4ade4b826e2a333f0e9f60f3a35c9d08a3053", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -177,7 +177,7 @@ impl<K:Ord,V> Map<K, V> for TreeMap<K, V> {\n     }\n }\n \n-impl <K:Ord,V> TreeMap<K, V> {\n+pub impl <K:Ord,V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n@@ -207,8 +207,8 @@ pub struct TreeMapIterator<K, V> {\n /// Advance the iterator to the next node (in order) and return a\n /// tuple with a reference to the key and value. If there are no\n /// more nodes, return `None`.\n-fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n- -> Option<(&r/K, &r/V)> {\n+pub fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n+                        -> Option<(&r/K, &r/V)> {\n     while !iter.stack.is_empty() || iter.node.is_some() {\n         match *iter.node {\n           Some(ref x) => {\n@@ -226,7 +226,7 @@ fn map_next<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>)\n }\n \n /// Advance the iterator through the map\n-fn map_advance<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>,\n+pub fn map_advance<K: Ord, V>(iter: &mut TreeMapIterator/&r<K, V>,\n                           f: fn((&r/K, &r/V)) -> bool) {\n     loop {\n         match map_next(iter) {\n@@ -480,7 +480,7 @@ impl<T:Ord> Set<T> for TreeSet<T> {\n     }\n }\n \n-impl <T:Ord> TreeSet<T> {\n+pub impl <T:Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n@@ -518,7 +518,7 @@ struct TreeNode<K, V> {\n     level: uint\n }\n \n-impl <K:Ord,V> TreeNode<K, V> {\n+pub impl <K:Ord,V> TreeNode<K, V> {\n     #[inline(always)]\n     static pure fn new(key: K, value: V) -> TreeNode<K, V> {\n         TreeNode{key: key, value: value, left: None, right: None, level: 1}\n@@ -683,7 +683,11 @@ fn remove<K:Ord,V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n #[cfg(test)]\n mod test_treemap {\n     use super::*;\n+    use core::cmp::{Ord, Eq};\n+    use core::option::{Some, Option, None};\n+    use core::rand;\n     use core::str;\n+    use core::vec;\n \n     #[test]\n     fn find_empty() {"}, {"sha": "37d9b3221b2d1f3c0c0ca6fe1ec40f40ea97517c", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -123,9 +123,11 @@ fn spawn_loop() -> IoTask {\n mod test {\n     use core::prelude::*;\n \n+    use get_gl = get;\n     use uv::iotask;\n     use uv::ll;\n     use uv_global_loop::*;\n+    use uv_iotask::IoTask;\n \n     use core::iter;\n     use core::libc;"}, {"sha": "14726a0854de198ffc2e48aed6ee59d06e5c2bea", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 105, "deletions": 109, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -202,124 +202,120 @@ extern fn tear_down_close_cb(handle: *ll::uv_async_t) {\n }\n \n #[cfg(test)]\n-mod test {\n-    use core::prelude::*;\n-\n-    use uv::ll;\n-    use uv_iotask::*;\n-\n-    use core::iter;\n-    use core::libc;\n-    use core::ptr;\n-    use core::task;\n-    use core::pipes::{stream, Chan, SharedChan, Port};\n-\n-    extern fn async_close_cb(handle: *ll::uv_async_t) {\n-        unsafe {\n-            log(debug, fmt!(\"async_close_cb handle %?\", handle));\n-            let exit_ch = &(*(ll::get_data_for_uv_handle(handle)\n-                            as *AhData)).exit_ch;\n-            let exit_ch = exit_ch.clone();\n-            exit_ch.send(());\n-        }\n-    }\n-    extern fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int) {\n-        unsafe {\n-            log(debug,\n-                fmt!(\"async_handle_cb handle %? status %?\",handle,status));\n-            ll::close(handle, async_close_cb);\n-        }\n-    }\n-    struct AhData {\n-        iotask: IoTask,\n-        exit_ch: SharedChan<()>\n+extern fn async_close_cb(handle: *ll::uv_async_t) {\n+    unsafe {\n+        log(debug, fmt!(\"async_close_cb handle %?\", handle));\n+        let exit_ch = &(*(ll::get_data_for_uv_handle(handle)\n+                        as *AhData)).exit_ch;\n+        let exit_ch = exit_ch.clone();\n+        exit_ch.send(());\n     }\n-    fn impl_uv_iotask_async(iotask: &IoTask) {\n-        unsafe {\n-            let async_handle = ll::async_t();\n-            let ah_ptr = ptr::addr_of(&async_handle);\n-            let (exit_po, exit_ch) = stream::<()>();\n-            let ah_data = AhData {\n-                iotask: iotask.clone(),\n-                exit_ch: SharedChan(exit_ch)\n-            };\n-            let ah_data_ptr: *AhData = unsafe {\n-                ptr::to_unsafe_ptr(&ah_data)\n-            };\n-            debug!(\"about to interact\");\n-            do interact(iotask) |loop_ptr| {\n-                unsafe {\n-                    debug!(\"interacting\");\n-                    ll::async_init(loop_ptr, ah_ptr, async_handle_cb);\n-                    ll::set_data_for_uv_handle(\n-                        ah_ptr, ah_data_ptr as *libc::c_void);\n-                    ll::async_send(ah_ptr);\n-                }\n-            };\n-            debug!(\"waiting for async close\");\n-            exit_po.recv();\n-        }\n+}\n+\n+#[cfg(test)]\n+extern fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int) {\n+    unsafe {\n+        log(debug,\n+            fmt!(\"async_handle_cb handle %? status %?\",handle,status));\n+        ll::close(handle, async_close_cb);\n     }\n+}\n+\n+#[cfg(test)]\n+struct AhData {\n+    iotask: IoTask,\n+    exit_ch: SharedChan<()>\n+}\n \n-    // this fn documents the bear minimum neccesary to roll your own\n-    // high_level_loop\n-    unsafe fn spawn_test_loop(exit_ch: ~Chan<()>) -> IoTask {\n-        let (iotask_port, iotask_ch) = stream::<IoTask>();\n-        do task::spawn_sched(task::ManualThreads(1u)) {\n-            debug!(\"about to run a test loop\");\n-            run_loop(&iotask_ch);\n-            exit_ch.send(());\n+#[cfg(test)]\n+fn impl_uv_iotask_async(iotask: &IoTask) {\n+    unsafe {\n+        let async_handle = ll::async_t();\n+        let ah_ptr = ptr::addr_of(&async_handle);\n+        let (exit_po, exit_ch) = stream::<()>();\n+        let ah_data = AhData {\n+            iotask: iotask.clone(),\n+            exit_ch: SharedChan(exit_ch)\n+        };\n+        let ah_data_ptr: *AhData = unsafe {\n+            ptr::to_unsafe_ptr(&ah_data)\n         };\n-        return iotask_port.recv();\n+        debug!(\"about to interact\");\n+        do interact(iotask) |loop_ptr| {\n+            unsafe {\n+                debug!(\"interacting\");\n+                ll::async_init(loop_ptr, ah_ptr, async_handle_cb);\n+                ll::set_data_for_uv_handle(\n+                    ah_ptr, ah_data_ptr as *libc::c_void);\n+                ll::async_send(ah_ptr);\n+            }\n+        };\n+        debug!(\"waiting for async close\");\n+        exit_po.recv();\n     }\n+}\n \n-    extern fn lifetime_handle_close(handle: *libc::c_void) {\n-        unsafe {\n-            log(debug, fmt!(\"lifetime_handle_close ptr %?\", handle));\n-        }\n-    }\n+// this fn documents the bear minimum neccesary to roll your own\n+// high_level_loop\n+#[cfg(test)]\n+unsafe fn spawn_test_loop(exit_ch: ~Chan<()>) -> IoTask {\n+    let (iotask_port, iotask_ch) = stream::<IoTask>();\n+    do task::spawn_sched(task::ManualThreads(1u)) {\n+        debug!(\"about to run a test loop\");\n+        run_loop(&iotask_ch);\n+        exit_ch.send(());\n+    };\n+    return iotask_port.recv();\n+}\n \n-    extern fn lifetime_async_callback(handle: *libc::c_void,\n-                                     status: libc::c_int) {\n-        log(debug, fmt!(\"lifetime_handle_close ptr %? status %?\",\n-                        handle, status));\n+#[cfg(test)]\n+extern fn lifetime_handle_close(handle: *libc::c_void) {\n+    unsafe {\n+        log(debug, fmt!(\"lifetime_handle_close ptr %?\", handle));\n     }\n+}\n \n-    #[test]\n-    fn test_uv_iotask_async() {\n-        unsafe {\n-            let (exit_po, exit_ch) = stream::<()>();\n-            let iotask = &spawn_test_loop(~exit_ch);\n-\n-            debug!(\"spawned iotask\");\n-\n-            // using this handle to manage the lifetime of the\n-            // high_level_loop, as it will exit the first time one of\n-            // the impl_uv_hl_async() is cleaned up with no one ref'd\n-            // handles on the loop (Which can happen under\n-            // race-condition type situations.. this ensures that the\n-            // loop lives until, at least, all of the\n-            // impl_uv_hl_async() runs have been called, at least.\n-            let (work_exit_po, work_exit_ch) = stream::<()>();\n-            let work_exit_ch = SharedChan(work_exit_ch);\n-            for iter::repeat(7u) {\n-                let iotask_clone = iotask.clone();\n-                let work_exit_ch_clone = work_exit_ch.clone();\n-                do task::spawn_sched(task::ManualThreads(1u)) {\n-                    debug!(\"async\");\n-                    impl_uv_iotask_async(&iotask_clone);\n-                    debug!(\"done async\");\n-                    work_exit_ch_clone.send(());\n-                };\n-            };\n-            for iter::repeat(7u) {\n-                debug!(\"waiting\");\n-                work_exit_po.recv();\n+#[cfg(test)]\n+extern fn lifetime_async_callback(handle: *libc::c_void,\n+                                 status: libc::c_int) {\n+    log(debug, fmt!(\"lifetime_handle_close ptr %? status %?\",\n+                    handle, status));\n+}\n+\n+#[test]\n+fn test_uv_iotask_async() {\n+    unsafe {\n+        let (exit_po, exit_ch) = stream::<()>();\n+        let iotask = &spawn_test_loop(~exit_ch);\n+\n+        debug!(\"spawned iotask\");\n+\n+        // using this handle to manage the lifetime of the\n+        // high_level_loop, as it will exit the first time one of\n+        // the impl_uv_hl_async() is cleaned up with no one ref'd\n+        // handles on the loop (Which can happen under\n+        // race-condition type situations.. this ensures that the\n+        // loop lives until, at least, all of the\n+        // impl_uv_hl_async() runs have been called, at least.\n+        let (work_exit_po, work_exit_ch) = stream::<()>();\n+        let work_exit_ch = SharedChan(work_exit_ch);\n+        for iter::repeat(7u) {\n+            let iotask_clone = iotask.clone();\n+            let work_exit_ch_clone = work_exit_ch.clone();\n+            do task::spawn_sched(task::ManualThreads(1u)) {\n+                debug!(\"async\");\n+                impl_uv_iotask_async(&iotask_clone);\n+                debug!(\"done async\");\n+                work_exit_ch_clone.send(());\n             };\n-            log(debug, ~\"sending teardown_loop msg..\");\n-            exit(iotask);\n-            exit_po.recv();\n-            log(debug, ~\"after recv on exit_po.. exiting..\");\n-        }\n+        };\n+        for iter::repeat(7u) {\n+            debug!(\"waiting\");\n+            work_exit_po.recv();\n+        };\n+        log(debug, ~\"sending teardown_loop msg..\");\n+        exit(iotask);\n+        exit_po.recv();\n+        log(debug, ~\"after recv on exit_po.. exiting..\");\n     }\n }"}, {"sha": "b7111bfb0231856aed72d38d539dfbd8cd6cd408", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -1199,6 +1199,7 @@ pub mod test {\n \n     use uv_ll::*;\n \n+    use core::comm::{SharedChan, stream};\n     use core::libc;\n     use core::ptr;\n     use core::str;\n@@ -1687,7 +1688,7 @@ pub mod test {\n \n     // this is the impl for a test that is (maybe) ran on a\n     // per-platform/arch basis below\n-    fn impl_uv_tcp_server_and_request() {\n+    pub fn impl_uv_tcp_server_and_request() {\n         unsafe {\n             let bind_ip = ~\"0.0.0.0\";\n             let request_ip = ~\"127.0.0.1\";"}, {"sha": "592ac40e0824f3c7eb6bc2edd8e879d3ef7b8af7", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -132,7 +132,7 @@ impl cmp::Ord for WorkKey {\n     }\n }\n \n-impl WorkKey {\n+pub impl WorkKey {\n     static fn new(kind: &str, name: &str) -> WorkKey {\n     WorkKey { kind: kind.to_owned(), name: name.to_owned() }\n     }\n@@ -168,7 +168,7 @@ struct Database {\n     mut db_dirty: bool\n }\n \n-impl Database {\n+pub impl Database {\n     fn prepare(&mut self, fn_name: &str,\n                declared_inputs: &WorkMap) -> Option<(WorkMap, WorkMap, ~str)>\n     {\n@@ -199,7 +199,7 @@ struct Logger {\n     a: ()\n }\n \n-impl Logger {\n+pub impl Logger {\n     fn info(i: &str) {\n         io::println(~\"workcache: \" + i.to_owned());\n     }\n@@ -254,7 +254,7 @@ fn digest_file(path: &Path) -> ~str {\n     sha.result_str()\n }\n \n-impl Context {\n+pub impl Context {\n \n     static fn new(db: @Mut<Database>,\n                   lg: @Mut<Logger>,\n@@ -356,7 +356,7 @@ impl TPrep for @Mut<Prep> {\n     }\n }\n \n-impl<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>> Work<T> {\n+pub impl<T:Owned+Encodable<json::Encoder>+Decodable<json::Decoder>> Work<T> {\n     static fn new(p: @Mut<Prep>, e: Either<T,PortOne<(Exec,T)>>) -> Work<T> {\n         Work { prep: p, res: Some(e) }\n     }"}, {"sha": "1053473a3a58996a741597a6bbc189b7d86771bf", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -162,7 +162,7 @@ pub struct Generics {\n     ty_params: OptVec<TyParam>\n }\n \n-impl Generics {\n+pub impl Generics {\n     fn is_empty(&self) -> bool {\n         self.lifetimes.len() + self.ty_params.len() == 0\n     }"}, {"sha": "0627e063d976cb44f9c11496419d76ad69c9c34a", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -16,6 +16,7 @@ use ast_util::{inlined_item_utils, path_to_ident, stmt_id};\n use ast_util;\n use attr;\n use codemap;\n+use codemap::spanned;\n use diagnostic::span_handler;\n use parse::token::ident_interner;\n use print::pprust;"}, {"sha": "7e0cd2640b2c43f7dd9a2c4b20acf8fece50e0fd", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use ast::*;\n use ast;\n use ast_util;\n-use codemap::{span, BytePos, dummy_sp};\n+use codemap::{span, BytePos, dummy_sp, spanned};\n use parse::token;\n use visit;\n use opt_vec;"}, {"sha": "8cebe3cd18709eaf65440e912c313fd1c82b2dd0", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -93,6 +93,7 @@ use core::prelude::*;\n use ast;\n use ast_util;\n use attr;\n+use codemap;\n use codemap::span;\n use ext::base::*;\n use parse;\n@@ -1310,7 +1311,7 @@ mod test {\n     }\n \n \n-    fn to_call_log (val: Encodable<TestEncoder>) -> ~[call] {\n+    fn to_call_log<E:Encodable<TestEncoder>>(val: E) -> ~[call] {\n         let mut te = TestEncoder {call_log: @mut ~[]};\n         val.encode(&te);\n         copy *te.call_log\n@@ -1323,8 +1324,7 @@ mod test {\n     }\n \n     #[test] fn encode_enum_test () {\n-        check_equal (to_call_log(Book(34,44)\n-                                 as Encodable::<TestEncoder>),\n+        check_equal (to_call_log(Book(34,44)),\n                      ~[CallToEmitEnum (~\"Written\"),\n                        CallToEmitEnumVariant (~\"Book\",0,2),\n                        CallToEmitEnumVariantArg (0),\n@@ -1339,8 +1339,7 @@ mod test {\n     pub struct HasPos { pos : BPos }\n \n     #[test] fn encode_newtype_test () {\n-        check_equal (to_call_log (HasPos {pos:BPos(48)}\n-                                 as Encodable::<TestEncoder>),\n+        check_equal (to_call_log (HasPos {pos:BPos(48)}),\n                     ~[CallToEmitStruct(~\"HasPos\",1),\n                       CallToEmitField(~\"pos\",0),\n                       CallToEmitUint(48)]);"}, {"sha": "7d3c7cafa9525b622815834bcd3e7decc2cca16d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -82,7 +82,7 @@ pub enum SyntaxExtension {\n     IdentTT(SyntaxExpanderTTItem),\n }\n \n-type SyntaxEnv = @mut MapChain<Name, Transformer>;\n+pub type SyntaxEnv = @mut MapChain<Name, Transformer>;\n \n // Name : the domain of SyntaxEnvs\n // want to change these to uints....\n@@ -98,7 +98,7 @@ type Name = @~str;\n // toward a more uniform syntax syntax (sorry) where blocks are just\n // another kind of transformer.\n \n-enum Transformer {\n+pub enum Transformer {\n     // this identifier maps to a syntax extension or macro\n     SE(SyntaxExtension),\n     // should blocks occurring here limit macro scopes?\n@@ -494,6 +494,7 @@ mod test {\n     use super::*;\n     use super::MapChain;\n     use util::testing::check_equal;\n+    use core::hashmap::linear::LinearMap;\n \n     #[test] fn testenv () {\n         let mut a = LinearMap::new();"}, {"sha": "4f53bf62efbab671b19f158c3a789f7a4b71ce3f", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,8 +10,11 @@\n \n use core::prelude::*;\n \n+use ast;\n+use codemap::span;\n use ext::base::*;\n use ext::base;\n+use parse::token;\n \n pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {"}, {"sha": "50047d2ce4166fee9eba81760b54ada9369d7d95", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -38,7 +38,7 @@ enum Junction {\n     Disjunction,\n }\n \n-impl Junction {\n+pub impl Junction {\n     fn to_binop(self) -> binop {\n         match self {\n             Conjunction => and,"}, {"sha": "91a9de9c051e899cf7bd39a699956571372b88b3", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,13 +15,14 @@\n  * interface.\n  */\n \n+use prelude::*;\n+\n+use ast;\n+use codemap::span;\n use ext::base::*;\n use ext::base;\n use ext::build::mk_uniq_str;\n \n-use core::option;\n-use core::os;\n-\n pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n "}, {"sha": "e3408a47c9a40752865bbb0111c4bb1b6966feec", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,13 +10,16 @@\n \n use core::prelude::*;\n \n+use ast::{blk_, attribute_, attr_outer, meta_word};\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast;\n use attr;\n-use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan};\n+use codemap;\n+use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan, spanned};\n use ext::base::*;\n use fold::*;\n+use parse;\n use parse::{parser, parse_item_from_source_str, new_parser_from_tts};\n \n use core::option;\n@@ -184,7 +187,7 @@ pub fn expand_item(extsbox: @mut SyntaxEnv,\n }\n \n // does this attribute list contain \"macro_escape\" ?\n-fn contains_macro_escape (attrs: &[ast::attribute]) -> bool{\n+pub fn contains_macro_escape (attrs: &[ast::attribute]) -> bool{\n     let mut accum = false;\n     do attrs.each |attr| {\n         let mname = attr::get_attr_name(attr);\n@@ -490,7 +493,13 @@ pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n #[cfg(test)]\n mod test {\n     use super::*;\n+    use ast;\n+    use ast::{attribute_, attr_outer, meta_word};\n+    use codemap;\n+    use codemap::spanned;\n+    use parse;\n     use util::testing::check_equal;\n+    use core::option::{None, Some};\n \n     // make sure that fail! is present\n     #[test] fn fail_exists_test () {"}, {"sha": "35b11962524995e8c6f47adf55a648c2ea53f01a", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -22,6 +22,7 @@ use ast;\n use codemap::span;\n use ext::base::*;\n use ext::base;\n+use ext::build;\n use ext::build::*;\n use private::extfmt::ct::*;\n "}, {"sha": "368520acd2d14a6333c5e8ee855ff8084e4a3bfa", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::*;\n+use core::io::WriterUtil;\n+\n use ast;\n use codemap;\n use ext::base::*;\n use ext::base;\n use print;\n \n-use core::io::WriterUtil;\n-use core::option;\n-\n pub fn expand_syntax_ext(cx: ext_ctxt,\n                          sp: codemap::span,\n                          tt: &[ast::token_tree])"}, {"sha": "40d0e2c5db24e4a5210f0c4e1e3f8f177b3294f7", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -20,7 +20,7 @@ use ast;\n use ast_util::{ident_to_path};\n use ast_util;\n use attr;\n-use codemap::{span, respan, dummy_sp};\n+use codemap::{span, respan, dummy_sp, spanned};\n use codemap;\n use ext::base::{ext_ctxt, mk_ctxt};\n use ext::quote::rt::*;"}, {"sha": "a5ca24c67378c4b4f763f93c2517f3304d02dd43", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,7 +10,9 @@\n \n // Parsing pipes protocols from token trees.\n \n+use ast_util;\n use ext::pipes::pipec::*;\n+use ext::pipes::proto::*;\n use parse::common::SeqSep;\n use parse::parser;\n use parse::token;"}, {"sha": "968a0e5f77eb4d51da8a8b28005911b11f003d3b", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,8 +10,9 @@\n \n // A protocol compiler for Rust.\n \n+use ast;\n use ast::ident;\n-use codemap::dummy_sp;\n+use codemap::{dummy_sp, spanned};\n use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n use ext::pipes::ast_builder::{path_global};"}, {"sha": "4349ffaea4301976f72d0e6dd538c7fd5e3d4c1c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,10 +34,12 @@ use core::str;\n \n pub mod rt {\n     use ast;\n+    use codemap;\n     use ext::base::ext_ctxt;\n     use parse;\n     use print::pprust;\n \n+    use core::prelude::*;\n     use core::str;\n \n     pub use ast::*;\n@@ -49,7 +51,7 @@ pub mod rt {\n     use print::pprust;\n     use print::pprust::{item_to_str, ty_to_str};\n \n-    trait ToTokens {\n+    pub trait ToTokens {\n         pub fn to_tokens(&self, _cx: ext_ctxt) -> ~[token_tree];\n     }\n \n@@ -73,7 +75,7 @@ pub mod rt {\n \n     */\n \n-    trait ToSource {\n+    pub trait ToSource {\n         // Takes a thing and generates a string containing rust code for it.\n         pub fn to_source(&self, cx: ext_ctxt) -> ~str;\n     }\n@@ -164,7 +166,7 @@ pub mod rt {\n         }\n     }\n \n-    trait ExtParseUtils {\n+    pub trait ExtParseUtils {\n         fn parse_item(s: ~str) -> @ast::item;\n         fn parse_expr(s: ~str) -> @ast::expr;\n         fn parse_stmt(s: ~str) -> @ast::stmt;"}, {"sha": "296305bb62e17c042d7bee19275f180fb3b1c9d6", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use codemap;\n use codemap::{FileMap, Loc, Pos, ExpandedFrom, span};\n use codemap::{CallInfo, NameAndSpan};\n use ext::base::*;\n use ext::base;\n use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_base_str};\n+use parse;\n use print::pprust;\n \n use core::io;"}, {"sha": "fae9e1651d3426bc34881e37f9e5ee8591603903", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // Earley-like parser for macros.\n+use ast;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use codemap::{BytePos, mk_sp};\n use codemap;\n@@ -23,6 +24,7 @@ use core::dvec::DVec;\n use core::dvec;\n use core::io;\n use core::option;\n+use core::option::{Option, Some, None};\n use core::str;\n use core::uint;\n use core::vec;"}, {"sha": "f820669ab1c6d5a1be5b1f7502e06466bcdc3471", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 124, "deletions": 115, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,35 +12,36 @@ use core::prelude::*;\n \n use ast::*;\n use ast;\n-use codemap::span;\n+use codemap::{span, spanned};\n+use opt_vec::OptVec;\n \n use core::option;\n use core::vec;\n \n pub trait ast_fold {\n-    fn fold_crate(&crate) -> crate;\n-    fn fold_view_item(@view_item) -> @view_item;\n-    fn fold_foreign_item(@foreign_item) -> @foreign_item;\n-    fn fold_item(@item) -> Option<@item>;\n-    fn fold_struct_field(@struct_field) -> @struct_field;\n-    fn fold_item_underscore(&item_) -> item_;\n-    fn fold_method(@method) -> @method;\n-    fn fold_block(&blk) -> blk;\n-    fn fold_stmt(&stmt) -> @stmt;\n-    fn fold_arm(&arm) -> arm;\n-    fn fold_pat(@pat) -> @pat;\n-    fn fold_decl(@decl) -> @decl;\n-    fn fold_expr(@expr) -> @expr;\n-    fn fold_ty(@Ty) -> @Ty;\n-    fn fold_mod(&_mod) -> _mod;\n-    fn fold_foreign_mod(&foreign_mod) -> foreign_mod;\n-    fn fold_variant(&variant) -> variant;\n-    fn fold_ident(ident) -> ident;\n-    fn fold_path(@path) -> @path;\n-    fn fold_local(@local) -> @local;\n-    fn map_exprs(fn@(@expr) -> @expr, &[@expr]) -> ~[@expr];\n-    fn new_id(node_id) -> node_id;\n-    fn new_span(span) -> span;\n+    fn fold_crate(@self, &crate) -> crate;\n+    fn fold_view_item(@self, @view_item) -> @view_item;\n+    fn fold_foreign_item(@self, @foreign_item) -> @foreign_item;\n+    fn fold_item(@self, @item) -> Option<@item>;\n+    fn fold_struct_field(@self, @struct_field) -> @struct_field;\n+    fn fold_item_underscore(@self, &item_) -> item_;\n+    fn fold_method(@self, @method) -> @method;\n+    fn fold_block(@self, &blk) -> blk;\n+    fn fold_stmt(@self, &stmt) -> @stmt;\n+    fn fold_arm(@self, &arm) -> arm;\n+    fn fold_pat(@self, @pat) -> @pat;\n+    fn fold_decl(@self, @decl) -> @decl;\n+    fn fold_expr(@self, @expr) -> @expr;\n+    fn fold_ty(@self, @Ty) -> @Ty;\n+    fn fold_mod(@self, &_mod) -> _mod;\n+    fn fold_foreign_mod(@self, &foreign_mod) -> foreign_mod;\n+    fn fold_variant(@self, &variant) -> variant;\n+    fn fold_ident(@self, ident) -> ident;\n+    fn fold_path(@self, @path) -> @path;\n+    fn fold_local(@self, @local) -> @local;\n+    fn map_exprs(@self, fn@(@expr) -> @expr, &[@expr]) -> ~[@expr];\n+    fn new_id(@self, node_id) -> node_id;\n+    fn new_span(@self, span) -> span;\n }\n \n // We may eventually want to be able to fold over type parameters, too\n@@ -77,7 +78,7 @@ pub type ast_fold_fns = @AstFoldFns;\n /* some little folds that probably aren't useful to have in ast_fold itself*/\n \n //used in noop_fold_item and noop_fold_crate and noop_fold_crate_directive\n-fn fold_meta_item_(mi: @meta_item, fld: ast_fold) -> @meta_item {\n+fn fold_meta_item_(mi: @meta_item, fld: @ast_fold) -> @meta_item {\n     @spanned {\n         node:\n             match mi.node {\n@@ -96,7 +97,7 @@ fn fold_meta_item_(mi: @meta_item, fld: ast_fold) -> @meta_item {\n         span: fld.new_span(mi.span) }\n }\n //used in noop_fold_item and noop_fold_crate\n-fn fold_attribute_(at: attribute, fld: ast_fold) -> attribute {\n+fn fold_attribute_(at: attribute, fld: @ast_fold) -> attribute {\n     spanned {\n         node: ast::attribute_ {\n             style: at.node.style,\n@@ -107,7 +108,7 @@ fn fold_attribute_(at: attribute, fld: ast_fold) -> attribute {\n     }\n }\n //used in noop_fold_foreign_item and noop_fold_fn_decl\n-fn fold_arg_(a: arg, fld: ast_fold) -> arg {\n+fn fold_arg_(a: arg, fld: @ast_fold) -> arg {\n     ast::arg {\n         mode: a.mode,\n         is_mutbl: a.is_mutbl,\n@@ -117,56 +118,58 @@ fn fold_arg_(a: arg, fld: ast_fold) -> arg {\n     }\n }\n //used in noop_fold_expr, and possibly elsewhere in the future\n-fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n+fn fold_mac_(m: mac, fld: @ast_fold) -> mac {\n     spanned {\n         node: match m.node { mac_invoc_tt(*) => copy m.node },\n         span: fld.new_span(m.span),\n     }\n }\n \n-pub fn fold_fn_decl(decl: &ast::fn_decl, fld: ast_fold) -> ast::fn_decl {\n+pub fn fold_fn_decl(decl: &ast::fn_decl, fld: @ast_fold) -> ast::fn_decl {\n     ast::fn_decl {\n         inputs: decl.inputs.map(|x| fold_arg_(*x, fld)),\n         output: fld.fold_ty(decl.output),\n         cf: decl.cf,\n     }\n }\n \n-fn fold_ty_param_bound(tpb: &TyParamBound, fld: ast_fold) -> TyParamBound {\n+fn fold_ty_param_bound(tpb: &TyParamBound, fld: @ast_fold) -> TyParamBound {\n     match *tpb {\n         TraitTyParamBound(ty) => TraitTyParamBound(fld.fold_ty(ty)),\n         RegionTyParamBound => RegionTyParamBound\n     }\n }\n \n-pub fn fold_ty_param(tp: TyParam, fld: ast_fold) -> TyParam {\n+pub fn fold_ty_param(tp: TyParam,\n+                     fld: @ast_fold) -> TyParam {\n     TyParam {ident: tp.ident,\n              id: fld.new_id(tp.id),\n              bounds: @tp.bounds.map(|x| fold_ty_param_bound(x, fld))}\n }\n \n pub fn fold_ty_params(tps: &OptVec<TyParam>,\n-                      fld: ast_fold) -> OptVec<TyParam> {\n+                      fld: @ast_fold) -> OptVec<TyParam> {\n     tps.map(|tp| fold_ty_param(*tp, fld))\n }\n \n-pub fn fold_lifetime(l: &Lifetime, fld: ast_fold) -> Lifetime {\n+pub fn fold_lifetime(l: &Lifetime,\n+                     fld: @ast_fold) -> Lifetime {\n     Lifetime {id: fld.new_id(l.id),\n               span: fld.new_span(l.span),\n               ident: l.ident}\n }\n \n pub fn fold_lifetimes(lts: &OptVec<Lifetime>,\n-                      fld: ast_fold) -> OptVec<Lifetime> {\n+                      fld: @ast_fold) -> OptVec<Lifetime> {\n     lts.map(|l| fold_lifetime(l, fld))\n }\n \n-pub fn fold_generics(generics: &Generics, fld: ast_fold) -> Generics {\n+pub fn fold_generics(generics: &Generics, fld: @ast_fold) -> Generics {\n     Generics {ty_params: fold_ty_params(&generics.ty_params, fld),\n               lifetimes: fold_lifetimes(&generics.lifetimes, fld)}\n }\n \n-pub fn noop_fold_crate(c: &crate_, fld: ast_fold) -> crate_ {\n+pub fn noop_fold_crate(c: &crate_, fld: @ast_fold) -> crate_ {\n     let fold_meta_item = |x| fold_meta_item_(x, fld);\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n@@ -177,12 +180,12 @@ pub fn noop_fold_crate(c: &crate_, fld: ast_fold) -> crate_ {\n     }\n }\n \n-fn noop_fold_view_item(vi: view_item_, _fld: ast_fold) -> view_item_ {\n+fn noop_fold_view_item(vi: view_item_, _fld: @ast_fold) -> view_item_ {\n     return /* FIXME (#2543) */ copy vi;\n }\n \n \n-fn noop_fold_foreign_item(ni: @foreign_item, fld: ast_fold)\n+fn noop_fold_foreign_item(ni: @foreign_item, fld: @ast_fold)\n     -> @foreign_item {\n     let fold_arg = |x| fold_arg_(x, fld);\n     let fold_attribute = |x| fold_attribute_(x, fld);\n@@ -212,7 +215,7 @@ fn noop_fold_foreign_item(ni: @foreign_item, fld: ast_fold)\n     }\n }\n \n-pub fn noop_fold_item(i: @item, fld: ast_fold) -> Option<@item> {\n+pub fn noop_fold_item(i: @item, fld: @ast_fold) -> Option<@item> {\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n     Some(@ast::item { ident: fld.fold_ident(i.ident),\n@@ -223,15 +226,15 @@ pub fn noop_fold_item(i: @item, fld: ast_fold) -> Option<@item> {\n                       span: fld.new_span(i.span) })\n }\n \n-fn noop_fold_struct_field(sf: @struct_field, fld: ast_fold)\n+fn noop_fold_struct_field(sf: @struct_field, fld: @ast_fold)\n                        -> @struct_field {\n     @spanned { node: ast::struct_field_ { kind: copy sf.node.kind,\n                                           id: sf.node.id,\n                                           ty: fld.fold_ty(sf.node.ty) },\n                span: sf.span }\n }\n \n-pub fn noop_fold_item_underscore(i: &item_, fld: ast_fold) -> item_ {\n+pub fn noop_fold_item_underscore(i: &item_, fld: @ast_fold) -> item_ {\n     match *i {\n         item_const(t, e) => item_const(fld.fold_ty(t), fld.fold_expr(e)),\n         item_fn(ref decl, purity, ref generics, ref body) => {\n@@ -295,7 +298,7 @@ pub fn noop_fold_item_underscore(i: &item_, fld: ast_fold) -> item_ {\n     }\n }\n \n-fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n+fn fold_struct_def(struct_def: @ast::struct_def, fld: @ast_fold)\n                 -> @ast::struct_def {\n     let dtor = do option::map(&struct_def.dtor) |dtor| {\n         let dtor_body = fld.fold_block(&dtor.node.body);\n@@ -316,14 +319,14 @@ fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n     }\n }\n \n-fn fold_trait_ref(p: @trait_ref, fld: ast_fold) -> @trait_ref {\n+fn fold_trait_ref(p: @trait_ref, fld: @ast_fold) -> @trait_ref {\n     @ast::trait_ref {\n         path: fld.fold_path(p.path),\n         ref_id: fld.new_id(p.ref_id),\n     }\n }\n \n-fn fold_struct_field(f: @struct_field, fld: ast_fold) -> @struct_field {\n+fn fold_struct_field(f: @struct_field, fld: @ast_fold) -> @struct_field {\n     @spanned {\n         node: ast::struct_field_ {\n             kind: copy f.node.kind,\n@@ -334,7 +337,7 @@ fn fold_struct_field(f: @struct_field, fld: ast_fold) -> @struct_field {\n     }\n }\n \n-fn noop_fold_method(m: @method, fld: ast_fold) -> @method {\n+fn noop_fold_method(m: @method, fld: @ast_fold) -> @method {\n     @ast::method {\n         ident: fld.fold_ident(m.ident),\n         attrs: /* FIXME (#2543) */ copy m.attrs,\n@@ -351,7 +354,7 @@ fn noop_fold_method(m: @method, fld: ast_fold) -> @method {\n }\n \n \n-pub fn noop_fold_block(b: &blk_, fld: ast_fold) -> blk_ {\n+pub fn noop_fold_block(b: &blk_, fld: @ast_fold) -> blk_ {\n     ast::blk_ {\n         view_items: b.view_items.map(|x| fld.fold_view_item(*x)),\n         stmts: b.stmts.map(|x| fld.fold_stmt(*x)),\n@@ -361,7 +364,7 @@ pub fn noop_fold_block(b: &blk_, fld: ast_fold) -> blk_ {\n     }\n }\n \n-fn noop_fold_stmt(s: &stmt_, fld: ast_fold) -> stmt_ {\n+fn noop_fold_stmt(s: &stmt_, fld: @ast_fold) -> stmt_ {\n     let fold_mac = |x| fold_mac_(x, fld);\n     match *s {\n         stmt_decl(d, nid) => stmt_decl(fld.fold_decl(d), fld.new_id(nid)),\n@@ -371,15 +374,15 @@ fn noop_fold_stmt(s: &stmt_, fld: ast_fold) -> stmt_ {\n     }\n }\n \n-fn noop_fold_arm(a: &arm, fld: ast_fold) -> arm {\n+fn noop_fold_arm(a: &arm, fld: @ast_fold) -> arm {\n     arm {\n         pats: a.pats.map(|x| fld.fold_pat(*x)),\n         guard: a.guard.map(|x| fld.fold_expr(*x)),\n         body: fld.fold_block(&a.body),\n     }\n }\n \n-pub fn noop_fold_pat(p: &pat_, fld: ast_fold) -> pat_ {\n+pub fn noop_fold_pat(p: &pat_, fld: @ast_fold) -> pat_ {\n     match *p {\n         pat_wild => pat_wild,\n         pat_ident(binding_mode, pth, ref sub) => {\n@@ -431,7 +434,7 @@ pub fn noop_fold_pat(p: &pat_, fld: ast_fold) -> pat_ {\n     }\n }\n \n-fn noop_fold_decl(d: &decl_, fld: ast_fold) -> decl_ {\n+fn noop_fold_decl(d: &decl_, fld: @ast_fold) -> decl_ {\n     match *d {\n         decl_local(ref ls) => decl_local(ls.map(|x| fld.fold_local(*x))),\n         decl_item(it) => {\n@@ -446,13 +449,13 @@ fn noop_fold_decl(d: &decl_, fld: ast_fold) -> decl_ {\n pub fn wrap<T>(f: fn@(&T, ast_fold) -> T)\n     -> fn@(&T, span, ast_fold) -> (T, span)\n {\n-    fn@(x: &T, s: span, fld: ast_fold) -> (T, span) {\n+    fn@(x: &T, s: span, fld: @ast_fold) -> (T, span) {\n         (f(x, fld), s)\n     }\n }\n \n-pub fn noop_fold_expr(e: &expr_, fld: ast_fold) -> expr_ {\n-    fn fold_field_(field: field, fld: ast_fold) -> field {\n+pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n+    fn fold_field_(field: field, fld: @ast_fold) -> field {\n         spanned {\n             node: ast::field_ {\n                 mutbl: field.node.mutbl,\n@@ -594,15 +597,15 @@ pub fn noop_fold_expr(e: &expr_, fld: ast_fold) -> expr_ {\n     }\n }\n \n-pub fn noop_fold_ty(t: &ty_, fld: ast_fold) -> ty_ {\n+pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n     let fold_mac = |x| fold_mac_(x, fld);\n-    fn fold_mt(mt: &mt, fld: ast_fold) -> mt {\n+    fn fold_mt(mt: &mt, fld: @ast_fold) -> mt {\n         mt {\n             ty: fld.fold_ty(mt.ty),\n             mutbl: mt.mutbl,\n         }\n     }\n-    fn fold_field(f: ty_field, fld: ast_fold) -> ty_field {\n+    fn fold_field(f: ty_field, fld: @ast_fold) -> ty_field {\n         spanned {\n             node: ast::ty_field_ {\n                 ident: fld.fold_ident(f.node.ident),\n@@ -648,14 +651,14 @@ pub fn noop_fold_ty(t: &ty_, fld: ast_fold) -> ty_ {\n }\n \n // ...nor do modules\n-pub fn noop_fold_mod(m: &_mod, fld: ast_fold) -> _mod {\n+pub fn noop_fold_mod(m: &_mod, fld: @ast_fold) -> _mod {\n     ast::_mod {\n         view_items: vec::map(m.view_items, |x| fld.fold_view_item(*x)),\n         items: vec::filter_mapped(m.items, |x| fld.fold_item(*x)),\n     }\n }\n \n-fn noop_fold_foreign_mod(nm: &foreign_mod, fld: ast_fold) -> foreign_mod {\n+fn noop_fold_foreign_mod(nm: &foreign_mod, fld: @ast_fold) -> foreign_mod {\n     ast::foreign_mod {\n         sort: nm.sort,\n         abi: nm.abi,\n@@ -664,8 +667,8 @@ fn noop_fold_foreign_mod(nm: &foreign_mod, fld: ast_fold) -> foreign_mod {\n     }\n }\n \n-fn noop_fold_variant(v: &variant_, fld: ast_fold) -> variant_ {\n-    fn fold_variant_arg_(va: variant_arg, fld: ast_fold) -> variant_arg {\n+fn noop_fold_variant(v: &variant_, fld: @ast_fold) -> variant_ {\n+    fn fold_variant_arg_(va: variant_arg, fld: @ast_fold) -> variant_arg {\n         ast::variant_arg { ty: fld.fold_ty(va.ty), id: fld.new_id(va.id) }\n     }\n     let fold_variant_arg = |x| fold_variant_arg_(x, fld);\n@@ -730,19 +733,21 @@ fn noop_fold_variant(v: &variant_, fld: ast_fold) -> variant_ {\n     }\n }\n \n-fn noop_fold_ident(i: ident, _fld: ast_fold) -> ident {\n+fn noop_fold_ident(i: ident, _fld: @ast_fold) -> ident {\n     /* FIXME (#2543) */ copy i\n }\n \n-fn noop_fold_path(p: @path, fld: ast_fold) -> path {\n-    ast::path { span: fld.new_span(p.span),\n-                global: p.global,\n-                idents: p.idents.map(|x| fld.fold_ident(*x)),\n-                rp: p.rp,\n-                types: p.types.map(|x| fld.fold_ty(*x)) }\n+fn noop_fold_path(p: @path, fld: @ast_fold) -> path {\n+    ast::path {\n+        span: fld.new_span(p.span),\n+        global: p.global,\n+        idents: p.idents.map(|x| fld.fold_ident(*x)),\n+        rp: p.rp,\n+        types: p.types.map(|x| fld.fold_ty(*x)),\n+    }\n }\n \n-fn noop_fold_local(l: &local_, fld: ast_fold) -> local_ {\n+fn noop_fold_local(l: &local_, fld: @ast_fold) -> local_ {\n     local_ {\n         is_mutbl: l.is_mutbl,\n         ty: fld.fold_ty(l.ty),\n@@ -786,115 +791,119 @@ pub fn default_ast_fold() -> ast_fold_fns {\n         fold_local: wrap(noop_fold_local),\n         map_exprs: noop_map_exprs,\n         new_id: noop_id,\n-        new_span: noop_span\n+        new_span: noop_span,\n     }\n }\n \n-impl ast_fold for ast_fold_fns {\n+impl ast_fold for AstFoldFns {\n     /* naturally, a macro to write these would be nice */\n-    fn fold_crate(c: &crate) -> crate {\n-        let (n, s) = (self.fold_crate)(&c.node, c.span, self as ast_fold);\n+    fn fold_crate(@self, c: &crate) -> crate {\n+        let (n, s) = (self.fold_crate)(&c.node, c.span, self as @ast_fold);\n         spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn fold_view_item(x: @view_item) ->\n+    fn fold_view_item(@self, x: @view_item) ->\n        @view_item {\n         @ast::view_item {\n-            node: (self.fold_view_item)(x.node, self as ast_fold),\n+            node: (self.fold_view_item)(x.node, self as @ast_fold),\n             attrs: vec::map(x.attrs, |a|\n-                  fold_attribute_(*a, self as ast_fold)),\n+                  fold_attribute_(*a, self as @ast_fold)),\n             vis: x.vis,\n             span: (self.new_span)(x.span),\n         }\n     }\n-    fn fold_foreign_item(x: @foreign_item) -> @foreign_item {\n-        (self.fold_foreign_item)(x, self as ast_fold)\n+    fn fold_foreign_item(@self, x: @foreign_item) -> @foreign_item {\n+        (self.fold_foreign_item)(x, self as @ast_fold)\n     }\n-    fn fold_item(i: @item) -> Option<@item> {\n-        (self.fold_item)(i, self as ast_fold)\n+    fn fold_item(@self, i: @item) -> Option<@item> {\n+        (self.fold_item)(i, self as @ast_fold)\n     }\n-    fn fold_struct_field(sf: @struct_field) -> @struct_field {\n+    fn fold_struct_field(@self, sf: @struct_field) -> @struct_field {\n         @spanned {\n             node: ast::struct_field_ {\n                 kind: copy sf.node.kind,\n                 id: sf.node.id,\n-                ty: (self as ast_fold).fold_ty(sf.node.ty),\n+                ty: (self as @ast_fold).fold_ty(sf.node.ty),\n             },\n             span: (self.new_span)(sf.span),\n         }\n     }\n-    fn fold_item_underscore(i: &item_) -> item_ {\n-        (self.fold_item_underscore)(i, self as ast_fold)\n+    fn fold_item_underscore(@self, i: &item_) -> item_ {\n+        (self.fold_item_underscore)(i, self as @ast_fold)\n     }\n-    fn fold_method(x: @method) -> @method {\n-        (self.fold_method)(x, self as ast_fold)\n+    fn fold_method(@self, x: @method) -> @method {\n+        (self.fold_method)(x, self as @ast_fold)\n     }\n-    fn fold_block(x: &blk) -> blk {\n-        let (n, s) = (self.fold_block)(&x.node, x.span, self as ast_fold);\n+    fn fold_block(@self, x: &blk) -> blk {\n+        let (n, s) = (self.fold_block)(&x.node, x.span, self as @ast_fold);\n         spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn fold_stmt(x: &stmt) -> @stmt {\n-        let (n, s) = (self.fold_stmt)(&x.node, x.span, self as ast_fold);\n+    fn fold_stmt(@self, x: &stmt) -> @stmt {\n+        let (n, s) = (self.fold_stmt)(&x.node, x.span, self as @ast_fold);\n         @spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn fold_arm(x: &arm) -> arm {\n-        (self.fold_arm)(x, self as ast_fold)\n+    fn fold_arm(@self, x: &arm) -> arm {\n+        (self.fold_arm)(x, self as @ast_fold)\n     }\n-    fn fold_pat(x: @pat) -> @pat {\n-        let (n, s) =  (self.fold_pat)(&x.node, x.span, self as ast_fold);\n+    fn fold_pat(@self, x: @pat) -> @pat {\n+        let (n, s) =  (self.fold_pat)(&x.node, x.span, self as @ast_fold);\n         @pat {\n             id: (self.new_id)(x.id),\n             node: n,\n             span: (self.new_span)(s),\n         }\n     }\n-    fn fold_decl(x: @decl) -> @decl {\n-        let (n, s) = (self.fold_decl)(&x.node, x.span, self as ast_fold);\n+    fn fold_decl(@self, x: @decl) -> @decl {\n+        let (n, s) = (self.fold_decl)(&x.node, x.span, self as @ast_fold);\n         @spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn fold_expr(x: @expr) -> @expr {\n-        let (n, s) = (self.fold_expr)(&x.node, x.span, self as ast_fold);\n+    fn fold_expr(@self, x: @expr) -> @expr {\n+        let (n, s) = (self.fold_expr)(&x.node, x.span, self as @ast_fold);\n         @expr {\n             id: (self.new_id)(x.id),\n             callee_id: (self.new_id)(x.callee_id),\n             node: n,\n             span: (self.new_span)(s),\n         }\n     }\n-    fn fold_ty(x: @Ty) -> @Ty {\n-        let (n, s) = (self.fold_ty)(&x.node, x.span, self as ast_fold);\n+    fn fold_ty(@self, x: @Ty) -> @Ty {\n+        let (n, s) = (self.fold_ty)(&x.node, x.span, self as @ast_fold);\n         @Ty {\n             id: (self.new_id)(x.id),\n             node: n,\n             span: (self.new_span)(s),\n         }\n     }\n-    fn fold_mod(x: &_mod) -> _mod {\n-        (self.fold_mod)(x, self as ast_fold)\n+    fn fold_mod(@self, x: &_mod) -> _mod {\n+        (self.fold_mod)(x, self as @ast_fold)\n     }\n-    fn fold_foreign_mod(x: &foreign_mod) -> foreign_mod {\n-        (self.fold_foreign_mod)(x, self as ast_fold)\n+    fn fold_foreign_mod(@self, x: &foreign_mod) -> foreign_mod {\n+        (self.fold_foreign_mod)(x, self as @ast_fold)\n     }\n-    fn fold_variant(x: &variant) -> variant {\n-        let (n, s) = (self.fold_variant)(&x.node, x.span, self as ast_fold);\n+    fn fold_variant(@self, x: &variant) -> variant {\n+        let (n, s) = (self.fold_variant)(&x.node, x.span, self as @ast_fold);\n         spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn fold_ident(x: ident) -> ident {\n-        (self.fold_ident)(x, self as ast_fold)\n+    fn fold_ident(@self, x: ident) -> ident {\n+        (self.fold_ident)(x, self as @ast_fold)\n     }\n-    fn fold_path(x: @path) -> @path {\n-        @(self.fold_path)(x, self as ast_fold)\n+    fn fold_path(@self, x: @path) -> @path {\n+        @(self.fold_path)(x, self as @ast_fold)\n     }\n-    fn fold_local(x: @local) -> @local {\n-        let (n, s) = (self.fold_local)(&x.node, x.span, self as ast_fold);\n+    fn fold_local(@self, x: @local) -> @local {\n+        let (n, s) = (self.fold_local)(&x.node, x.span, self as @ast_fold);\n         @spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn map_exprs(f: fn@(@expr) -> @expr, e: &[@expr]) -> ~[@expr] {\n+    fn map_exprs(\n+        @self,\n+        f: fn@(@expr) -> @expr,\n+        e: &[@expr]\n+    ) -> ~[@expr] {\n         (self.map_exprs)(f, e)\n     }\n-    fn new_id(node_id: ast::node_id) -> node_id {\n+    fn new_id(@self, node_id: ast::node_id) -> node_id {\n         (self.new_id)(node_id)\n     }\n-    fn new_span(span: span) -> span {\n+    fn new_span(@self, span: span) -> span {\n         (self.new_span)(span)\n     }\n }\n@@ -906,7 +915,7 @@ pub impl ast_fold {\n }\n \n pub fn make_fold(afp: ast_fold_fns) -> ast_fold {\n-    afp as ast_fold\n+    afp as @ast_fold\n }\n \n //"}, {"sha": "28f84613740fb73e952f3b61dc7efbfaf3e8d96c", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,6 +15,7 @@ use codemap::spanned;\n use codemap::BytePos;\n use parse::common::*; //resolve bug?\n use parse::token;\n+use parse::parser::Parser;\n \n use core::either::{Either, Left, Right};\n "}, {"sha": "ed71fa411c69fd7e740eba1990bee26f22a04bde", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -773,10 +773,14 @@ fn consume_whitespace(rdr: @mut StringReader) {\n \n #[cfg(test)]\n pub mod test {\n-\n     use super::*;\n-    use util::interner;\n+\n+    use ast;\n+    use codemap::{BytePos, CodeMap, span};\n+    use core::option::None;\n     use diagnostic;\n+    use parse::token;\n+    use util::interner;\n     use util::testing::{check_equal, check_equal_ptr};\n \n     // represents a testing reader (incl. both reader and interner)"}, {"sha": "887f064018f37823230d983fa8bcdc6eb1a2f006", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -299,6 +299,8 @@ mod test {\n     use super::*;\n     use std::serialize::Encodable;\n     use std;\n+    use core::io;\n+    use core::option::None;\n     use core::str;\n     use util::testing::*;\n \n@@ -314,7 +316,7 @@ mod test {\n             @~\"fn foo (x : int) { x; }\",\n             ~[],\n             new_parse_sess(None));\n-        check_equal(to_json_str(tts as Encodable::<std::json::Encoder>),\n+        check_equal(to_json_str(@tts as Encodable::<std::json::Encoder>),\n                     ~\"[[\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"fn\\\",false]]]],\\\n                       [\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"foo\\\",false]]]],\\\n                       [\\\"tt_delim\\\",[[[\\\"tt_tok\\\",[,[\\\"LPAREN\\\",[]]]],\\"}, {"sha": "e2a89d2a28cc153e92d43050304c399e997121af", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use ast::*;\n use parse::token::*;\n use parse::token::Token;"}, {"sha": "f08b042ad6aed5b4454e5a516caf59b29ea11c88", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2300,11 +2300,14 @@ pub fn print_onceness(s: @ps, o: ast::Onceness) {\n \n #[cfg(test)]\n pub mod test {\n+    use super::*;\n+\n     use ast;\n     use ast_util;\n+    use codemap;\n+    use core::cmp::Eq;\n+    use core::option::None;\n     use parse;\n-    use super::*;\n-    //use util;\n     use util::testing::check_equal;\n \n     fn string_check<T:Eq> (given : &T, expected: &T) {"}, {"sha": "5919271664e30e4bb557083e3045428cacfd3ed8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -16,6 +16,7 @@ use ast_util;\n use codemap::span;\n use parse;\n use opt_vec;\n+use opt_vec::OptVec;\n \n use core::option;\n use core::vec;"}, {"sha": "761dbeade538bf6ee0cbdd95800379114cd455c2", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -342,8 +342,11 @@ rust_kernel::register_exit_function(spawn_fn runner, fn_env_pair *f) {\n     assert(!at_exit_started && \"registering at_exit function after exit\");\n \n     if (at_exit_runner) {\n-        assert(runner == at_exit_runner\n-               && \"there can be only one at_exit_runner\");\n+        // FIXME #2912 Would be very nice to assert this but we can't because\n+        // of the way coretest works (the test case ends up using its own\n+        // function)\n+        //assert(runner == at_exit_runner\n+        //       && \"there can be only one at_exit_runner\");\n     }\n \n     at_exit_runner = runner;"}, {"sha": "fc72551e7dd35ad98b74b5f3a8bca087328ff75f", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -1,3 +1,11 @@\n+S 2013-02-27 a6d9689\n+  freebsd-x86_64 d33b5ebbf3335f6a8a5cc23572f630ad66539830\n+  linux-i386 22f5c2a91941735007ed804586fc0f0e82fc3601\n+  linux-x86_64 328fb144edbed8cabb8c2c6306304e3d8460ef60\n+  macos-i386 5dda51347f9aba4c70a0890d3ec084d98a49c015\n+  macos-x86_64 ca57514c51d6a38d53a92a8eab212379872baddb\n+  winnt-i386 1ba692a33072597ae124736c9e4040197bc5c1cb\n+\n S 2013-02-04 2f46b76\n   freebsd-x86_64 d33b5ebbf3335f6a8a5cc23572f630ad66539830\n   linux-i386 7537519ae3de82592d6150b9ca81cd4bf45d9457"}, {"sha": "c04cdbcab1adbd24b25b3f6a298f75d8da4508c5", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,12 +10,12 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv mut meows : uint,\n+        priv meows : uint,\n         how_hungry : int,\n     }\n \n     pub impl cat {\n-      priv fn nap() { for uint::range(1, 10000u) |_i|{}}\n+      priv fn nap(&self) { for uint::range(1, 10000u) |_i|{}}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "92452cbe8fdc41b49fbdc3ee0c3dca69325a6ccd", "filename": "src/test/auxiliary/impl_privacy_xc_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -4,7 +4,7 @@ pub struct Fish {\n     x: int\n }\n \n-impl Fish {\n+pub impl Fish {\n     fn swim(&self) {}\n }\n "}, {"sha": "afe7d4a6e8b2c655cdae2bb6477ebcfcd8e2162b", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -16,5 +16,5 @@ pub trait i<T> { }\n pub fn f<T>() -> i<T> {\n     impl<T> i<T> for () { }\n \n-    () as i::<T>\n+    @() as @i<T>\n }"}, {"sha": "e7a929547255468a24d360daef58468fb000f1d9", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,7 +11,7 @@\n \n enum S = ();\n \n-impl S {\n+pub impl S {\n     fn foo() { }\n }\n "}, {"sha": "5e73b286530db901c4a01a26e6835606f0c1f2f2", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -31,7 +31,7 @@ fn timed(result: &mut float, op: fn()) {\n     *result = (end - start);\n }\n \n-impl Results {\n+pub impl Results {\n     fn bench_int<T:Set<uint>>(&mut self, rng: @rand::Rng, num_keys: uint,\n                                rand_cap: uint, f: fn() -> T) {\n         {"}, {"sha": "9825671bc8aea74734dce21fe6efc0d0990fe3d5", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -40,7 +40,7 @@ fn Noise2DContext() -> ~Noise2DContext {\n     }\n }\n \n-impl Noise2DContext {\n+pub impl Noise2DContext {\n     #[inline(always)]\n     fn get_gradient(&self, x: int, y: int) -> Vec2 {\n         let idx = self.permutations[x & 255] + self.permutations[y & 255];"}, {"sha": "a52b7889017cc20194254caa5321a8be55c74082", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -112,7 +112,7 @@ fn writer(path: ~str, pport: comm::Port<Line>, size: uint)\n {\n     let cout: io::Writer = match path {\n         ~\"\" => {\n-            Devnull as io::Writer\n+            @Devnull as @io::Writer\n         }\n         ~\"-\" => {\n             io::stdout()"}, {"sha": "0a2834a95e62edfe85e299427e36372ee923a954", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct cat {\n   how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n \n   fn speak() { self.meows += 1u; }\n }"}, {"sha": "068bb7cd7a61d86eeb1d9ef233e3c9888918a036", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,7 +10,7 @@\n \n use core::either::*;\n enum X = Either<(uint,uint),extern fn()>;\n-impl &X {\n+pub impl &X {\n     fn with(blk: fn(x: &Either<(uint,uint),extern fn()>)) {\n         blk(&**self)\n     }"}, {"sha": "2c68429baec926eadd428eca46ed1f1d15cb4c96", "filename": "src/test/compile-fail/borrowck-call-method-from-mut-aliasable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int,\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn f(&self) {}\n     fn g(&const self) {}\n     fn h(&mut self) {}"}, {"sha": "476a790b85ede49d8db7f85e56a1f22e99ed4707", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n   n: LinearSet<int>,\n }\n \n-impl Foo {\n+pub impl Foo {\n   fn foo(&mut self, fun: fn(&int)) {\n     for self.n.each |f| {\n       fun(f);"}, {"sha": "61cf346ffa4848b41a71c48385c73e3cea94cf9a", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -19,7 +19,7 @@ impl ops::Add<int,int> for Point {\n     }\n }\n \n-impl Point {\n+pub impl Point {\n     fn times(z: int) -> int {\n         self.x * self.y * z\n     }"}, {"sha": "092fb4a5b6675c2f34ff19db1f309c0e32d43713", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -19,7 +19,7 @@ struct cat {\n   name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n \n   fn eat() -> bool {\n     if self.how_hungry > 0 {\n@@ -58,6 +58,6 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n fn main() {\n-  let nyan : noisy  = cat(0, 2, ~\"nyan\") as noisy;\n+  let nyan : noisy  = @cat(0, 2, ~\"nyan\") as @noisy;\n   nyan.eat(); //~ ERROR type `@noisy` does not implement any method in scope named `eat`\n }"}, {"sha": "9a574b984ca4758a9e2e63d56afc4972cbd57c15", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,6 +14,6 @@ struct cat {\n   tail: int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn meow() { tail += 1; } //~ ERROR: Did you mean: `self.tail`\n }"}, {"sha": "8ec63ddc634c5892eec5c2c7c1a3f5c8751ad9e6", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ pub mod stream {\n         use core::option;\n         use core::pipes;\n \n-        impl<T:Owned> Stream<T> {\n+        pub impl<T:Owned> Stream<T> {\n             pub fn recv() -> extern fn(+v: Stream<T>) -> ::stream::Stream<T> {\n               // resolve really should report just one error here.\n               // Change the test case when it changes."}, {"sha": "e6d16042445e8dbb69320792e14818354e436e9d", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -16,7 +16,7 @@ fn siphash(k0 : u64) {\n         v0: u64,\n     }\n \n-    impl siphash {\n+    pub impl siphash {\n         fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: `k0`."}, {"sha": "530dadd7e90944bdd539ef0282ef48c97a00e1b4", "filename": "src/test/compile-fail/issue-3080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n enum x = ();\n-impl x {\n+pub impl x {\n     unsafe fn with() { } // This should fail\n }\n "}, {"sha": "1207ddcb9a042f6083e82b9ec2e11aa27b3c7c7e", "filename": "src/test/compile-fail/issue-3311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3311.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     u: ~()\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn get_s(&self) -> &self/str {\n         self.s\n     }"}, {"sha": "040bd46ab8c8dd7779308bfdebb6906115b78399", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,7 +13,7 @@ struct Obj {\n     member: uint\n }\n \n-impl Obj {\n+pub impl Obj {\n     static pure fn boom() -> bool {\n         return 1+1 == 2\n     }"}, {"sha": "09a3f3d89c46ce57a4643859c13fd13252a6f9b2", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,7 +15,7 @@ mod my_mod {\n     pub fn MyStruct () -> MyStruct {\n         MyStruct {priv_field: 4}\n     }\n-    impl MyStruct {\n+    pub impl MyStruct {\n         priv fn happyfun() {}\n     }\n }"}, {"sha": "d4d97c69354bc5f1447c6c772f8d37fc9abaa685", "filename": "src/test/compile-fail/issue-4366.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// regression test for issue 4366\n+\n+// ensures that 'use foo:*' doesn't import non-public 'use' statements in the\n+// module 'foo'\n+\n+mod foo {\n+    pub fn foo() {}\n+}\n+mod a {\n+    pub mod b {\n+        use foo::foo;\n+        type bar = int;\n+    }\n+    pub mod sub {\n+        use a::b::*;\n+        fn sub() -> bar { foo(); 1 } //~ ERROR: unresolved name: `foo`\n+        //~^ ERROR: use of undeclared type name `bar`\n+    }\n+}\n+\n+mod m1 {\n+    fn foo() {}\n+}\n+use m1::*;\n+\n+fn main() {\n+    foo(); //~ ERROR: unresolved name: `foo`\n+}\n+"}, {"sha": "f369e765d694772de6918435d52fa0012ff7f1bd", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -16,7 +16,7 @@ impl<A:Copy> repeat<A> for @A {\n \n fn repeater<A:Copy>(v: @A) -> repeat<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    v as repeat::<A> // No\n+    @v as repeat::<A> // No\n }\n \n fn main() {"}, {"sha": "2e0f27748619571fa07dda7d08261b4a29b2b793", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -26,22 +26,22 @@ fn to_foo<T:Copy>(t: T) {\n     // the fn body itself.\n     let v = &3;\n     struct F<T> { f: T }\n-    let x = F {f:t} as foo;\n+    let x = @F {f:t} as foo;\n     assert x.foo(v) == 3;\n }\n \n fn to_foo_2<T:Copy>(t: T) -> foo {\n     // Not OK---T may contain borrowed ptrs and it is going to escape\n     // as part of the returned foo value\n     struct F<T> { f: T }\n-    F {f:t} as foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n+    @F {f:t} as foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n }\n \n fn to_foo_3<T:Copy + &static>(t: T) -> foo {\n     // OK---T may escape as part of the returned foo value, but it is\n     // owned and hence does not contain borrowed ptrs\n     struct F<T> { f: T }\n-    F {f:t} as foo\n+    @F {f:t} as foo\n }\n \n fn main() {"}, {"sha": "30f6a5f9b2dd732709d709d31574408c747494c7", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,11 +11,11 @@\n trait foo { fn foo(); }\n \n fn to_foo<T:Copy + foo>(t: T) -> foo {\n-    t as foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n+    @t as @foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n }\n \n fn to_foo2<T:Copy + foo + &static>(t: T) -> foo {\n-    t as foo\n+    @t as @foo\n }\n \n fn main() {}"}, {"sha": "8512e8d13dc79a9bbe0a1f9d3a5ee0e3d9d0bc1f", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,8 +14,8 @@ use core::hashmap::linear::LinearMap;\n // Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: Map<~str, ~str> = LinearMap::new::<~str, ~str>() as\n+    let x: @Map<~str, ~str> = @LinearMap::new::<~str, ~str>() as\n         Map::<~str, ~str>;\n-    let y: Map<uint, ~str> = x;\n+    let y: @Map<uint, ~str> = @x;\n     //~^ ERROR mismatched types: expected `@core::container::Map/&<uint,~str>`\n }"}, {"sha": "3a63cdee20c83bc2a4c94f6a390a33f90b30cf89", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,7 +15,7 @@ struct cat {\n   how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn eat() {\n     self.how_hungry -= 5;\n   }"}, {"sha": "7414dc5721621b3ce5e7c21bc58685a643586515", "filename": "src/test/compile-fail/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:attempted access of field `nap` on type\n-// xfail-test Cross-crate impl method privacy doesn't work\n // xfail-fast\n // aux-build:cci_class_5.rs\n extern mod cci_class_5;\n use cci_class_5::kitties::*;\n \n fn main() {\n   let nyan : cat = cat(52, 99);\n-  nyan.nap();\n+  nyan.nap();   //~ ERROR method `nap` is private\n }"}, {"sha": "7b64623e16c3e193fd03bd260f0bd47cabb4d8f5", "filename": "src/test/compile-fail/private-method-inherited.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -0,0 +1,15 @@\n+// Tests that inherited visibility applies to methods.\n+\n+mod a {\n+    pub struct Foo;\n+\n+    impl Foo {\n+        fn f(self) {}\n+    }\n+}\n+\n+fn main() {\n+    let x = a::Foo;\n+    x.f();  //~ ERROR method `f` is private\n+}\n+"}, {"sha": "96657edb5b1addcf66ae4de45c68bd2913b25835", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct dog {\n     cats_chased: uint,\n }\n \n-impl dog {\n+pub impl dog {\n     fn chase_cat(&mut self) {\n         let p: &static/mut uint = &mut self.cats_chased; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n         *p += 1u;"}, {"sha": "b9a9e2f38f5aa2299ba990187a033a011e5982d6", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct dog {\n     food: uint,\n }\n \n-impl dog {\n+pub impl dog {\n     fn chase_cat(&mut self) {\n         for uint::range(0u, 10u) |_i| {\n             let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements"}, {"sha": "811d7c452e38666b5173eeb658893cbdd92a7c12", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,5 +34,5 @@ fn get_v(gc: get_ctxt) -> uint {\n fn main() {\n     let ctxt = ctxt { v: 22u };\n     let hc = has_ctxt { c: &ctxt };\n-    assert get_v(hc as get_ctxt) == 22u;\n+    assert get_v(@hc as get_ctxt) == 22u;\n }"}, {"sha": "c5978e55fb3e404a1f96db60ec21d2df08506e2f", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -23,7 +23,7 @@ impl get_ctxt for has_ctxt {\n fn make_gc() -> get_ctxt  {\n     let ctxt = ctxt { v: 22u };\n     let hc = has_ctxt { c: &ctxt }; //~ ERROR illegal borrow\n-    return hc as get_ctxt;\n+    return @hc as get_ctxt;\n }\n \n fn main() {"}, {"sha": "0ddaf25710c94ec16c697e07ab604232a7f0a8e7", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -17,7 +17,7 @@ fn make_gc1(gc: get_ctxt/&a) -> get_ctxt/&b  {\n }\n \n fn make_gc2(gc: get_ctxt/&a) -> get_ctxt/&b  {\n-    return gc as get_ctxt; //~ ERROR cannot infer an appropriate lifetime\n+    return @gc as get_ctxt; //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {"}, {"sha": "08b6c0f71fe6e34134601a1755b7ebfa67c7f49e", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -19,7 +19,7 @@ impl add for int {\n fn do_add<A:add>(x: A, y: A) -> A { x.plus(y) }\n \n fn main() {\n-    let x = 3 as add;\n-    let y = 4 as add;\n+    let x = @3 as @add;\n+    let y = @4 as @add;\n     do_add(x, y); //~ ERROR a boxed trait with self types may not be passed as a bounded type\n }"}, {"sha": "94bcea8f1d3bfc989c40704f73bf28e3474afbe4", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,7 +34,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n \n fn main() {\n     let b = box_impl::<@int>(box::<@int> {f: @3});\n-    set_box_trait(b as box_trait::<@int>, @mut 5);\n+    set_box_trait(@b as box_trait::<@int>, @mut 5);\n     //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);\n     //~^ ERROR values differ in mutability"}, {"sha": "d0738be09c7cdb48cd652c281dafe2090604f949", "filename": "src/test/compile-fail/trait-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-cast.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,7 +11,7 @@\n trait foo<T> { }\n \n fn bar(x: foo<uint>) -> foo<int> {\n-    return (x as foo::<int>);\n+    return (@x as foo::<int>);\n     //~^ ERROR mismatched types: expected `@foo<int>` but found `@foo<uint>`\n     //~^^ ERROR mismatched types: expected `@foo<int>` but found `@foo<uint>`\n     // This is unfortunate -- new handling of parens means the error message"}, {"sha": "dc7c7cec65f3fcc7d5d474fd0c603dfaff2cc25b", "filename": "src/test/compile-fail/trait-or-new-type-instead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: implement a trait or new type instead\n-impl <T> Option<T> {\n+pub impl <T> Option<T> {\n     fn foo() { }\n }\n "}, {"sha": "a00e63b60d7d52156749fd50d8a12c97a1377a5d", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,5 +15,5 @@ impl bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n fn main() {\n     10i.dup::<int>(); //~ ERROR does not take type parameters\n     10i.blah::<int, int>(); //~ ERROR incorrect number of type parameters\n-    (10 as bar).dup(); //~ ERROR contains a self-type\n+    (@10 as bar).dup(); //~ ERROR contains a self-type\n }"}, {"sha": "b0a2bc8ec1275a370f70256ac45e8604fd9a30f1", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -6,7 +6,7 @@ impl Drop for S {\n     fn finalize(&self) {}\n }\n \n-impl S {\n+pub impl S {\n     fn foo(self) -> int {\n         self.bar();\n         return self.x;  //~ ERROR use of moved value"}, {"sha": "3eded9fd4f39c1370627e3c3fcd5d20bf543d3d7", "filename": "src/test/compile-fail/use-after-move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2,7 +2,7 @@ struct S {\n     x: ~int\n }\n \n-impl S {\n+pub impl S {\n     fn foo(self) -> int {\n         self.bar();\n         return *self.x;  //~ ERROR use of moved value"}, {"sha": "f026f217b99d18f5ea3953bc3187c0b029d12e17", "filename": "src/test/pretty/record-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// NOTE this is a pretty-printer bug that I fixed, but it's\n-// not in the snapshot yet. After a new snapshot, can un-xfail\n-// xfail-pretty\n+// xfail-test\n // pp-exact\n struct Thing {\n     x: int,"}, {"sha": "905670f8fb7b67beba0f16fcf54e4012eb167a86", "filename": "src/test/run-fail/unwind-box-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -23,7 +23,7 @@ impl i for ~int {\n }\n \n fn main() {\n-    let x = ~0 as i;\n+    let x = @~0 as @i;\n     failfn();\n     log(error, x);\n }"}, {"sha": "2ec0b59e13feebcd6fc2772eccba13498c7a6802", "filename": "src/test/run-pass/anon-trait-static-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int\n }\n \n-impl Foo {\n+pub impl Foo {\n     static fn new() -> Foo {\n         Foo { x: 3 }\n     }"}, {"sha": "1b4c22e80f3e627610f6ef93dc5fb6583e8afdaf", "filename": "src/test/run-pass/auto-ref-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,7 +13,7 @@\n \n enum Foo = uint;\n \n-impl Foo {\n+pub impl Foo {\n     fn len(&self) -> uint { **self }\n }\n "}, {"sha": "883cffa792bfbb9c4275ab6b29f11086652633de", "filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int,\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn f(&const self) {}\n }\n "}, {"sha": "bfde19993e9e0a757c43d74d2a7914b6f60a4b7c", "filename": "src/test/run-pass/autoderef-method-on-trait-monomorphized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait-monomorphized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait-monomorphized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait-monomorphized.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -21,6 +21,6 @@ fn is_equal<D:double>(x: @D, exp: uint) {\n }\n \n pub fn main() {\n-    let x = @(3u as double);\n+    let x = @(@3u as @double);\n     is_equal(x, 6);\n }"}, {"sha": "65a274d7764576b2293c05a3844b70c750ec01ba", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -17,6 +17,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = @(3u as double);\n+    let x = @(@3u as @double);\n     assert x.double() == 6u;\n }"}, {"sha": "d8612155f6cd7feb480ca0b5f3380112036a91bb", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2,7 +2,7 @@ struct Wizard {\n     spells: ~[&static/str]\n }\n \n-impl Wizard {\n+pub impl Wizard {\n     fn cast(&mut self) {\n         for self.spells.each |&spell| {\n             io::println(spell);"}, {"sha": "1d2c30108f1d554988443a1cf7fdfb7f33c809b3", "filename": "src/test/run-pass/boxed-trait-with-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -19,7 +19,7 @@ impl Foo for int {\n }\n \n pub fn main() {\n-    let x = 3 as @Foo;\n+    let x = @3 as @Foo;\n     x.foo();\n }\n "}, {"sha": "1db3d4b38d7978db70acf38b9ffd57d69b5985c9", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -21,7 +21,7 @@ fn print_out<T:ToStr>(thing: T, expected: ~str) {\n }\n \n pub fn main() {\n-  let nyan : ToStr  = cat(0u, 2, ~\"nyan\") as ToStr;\n+  let nyan : @ToStr = @cat(0u, 2, ~\"nyan\") as @ToStr;\n   print_out(nyan, ~\"nyan\");\n }\n "}, {"sha": "5cf68174075fac58fd886ab8965fad8e2f95a3f6", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -18,7 +18,7 @@ struct dog {\n   volume : @mut int,\n }\n \n-impl dog {\n+pub impl dog {\n     priv fn bark() -> int {\n       debug!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n@@ -55,7 +55,7 @@ impl noisy for cat {\n   fn speak() -> int { self.meow() as int }\n }\n \n-impl cat {\n+pub impl cat {\n   fn meow_count() -> uint { *self.meows }\n }\n \n@@ -86,8 +86,8 @@ fn annoy_neighbors<T:noisy>(critter: T) {\n pub fn main() {\n   let nyan : cat  = cat(0u, 2, ~\"nyan\");\n   let whitefang : dog = dog();\n-  annoy_neighbors((copy nyan) as noisy);\n-  annoy_neighbors((copy whitefang) as noisy);\n+  annoy_neighbors(@(copy nyan) as @noisy);\n+  annoy_neighbors(@(copy whitefang) as @noisy);\n   assert(nyan.meow_count() == 10u);\n   assert(*whitefang.volume == 1);\n }"}, {"sha": "a15afa60c7522367434a9d7b09d45c372e6848a2", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -22,7 +22,7 @@ impl noisy for cat {\n   fn speak(&mut self) { self.meow(); }\n }\n \n-impl cat {\n+pub impl cat {\n   fn eat(&mut self) -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");\n@@ -56,6 +56,6 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n pub fn main() {\n-  let mut nyan: noisy = cat(0u, 2, ~\"nyan\") as noisy;\n+  let mut nyan: @noisy = @cat(0u, 2, ~\"nyan\") as @noisy;\n   nyan.speak();\n }"}, {"sha": "f71675c06be0ab681500b0a57a849e6f2ab7db2d", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,7 +34,7 @@ struct cat<T> {\n     name : T,\n }\n \n-impl<T> cat<T> {\n+pub impl<T> cat<T> {\n     fn speak(&mut self) { self.meow(); }\n \n     fn eat(&mut self) -> bool {\n@@ -103,7 +103,7 @@ impl<T> Map<int, T> for cat<T> {\n     }\n }\n \n-impl<T> cat<T> {\n+pub impl<T> cat<T> {\n     pure fn get(&self, k: &int) -> &self/T {\n         match self.find(k) {\n           Some(v) => { v }"}, {"sha": "aa77dbb62c0a7260ccecf17dae2581d236874008", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -20,7 +20,7 @@ struct cat {\n   name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n     fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n             error!(\"OM NOM NOM\");"}, {"sha": "896b139110f26352c43e568216609cf88454a147", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -32,7 +32,7 @@ priv impl cat {\n     }\n }\n \n-impl cat {\n+pub impl cat {\n     fn eat(&mut self) -> bool {\n         if self.how_hungry > 0 {\n             error!(\"OM NOM NOM\");"}, {"sha": "f65bcf7be8e69f4c89dc93a46103d59cedd07339", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct cat {\n   how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n     fn speak(&mut self) { self.meows += 1u; }\n     fn meow_count(&mut self) -> uint { self.meows }\n }"}, {"sha": "654260d8399995a853a449a1cd98104bddc68268", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,7 +15,7 @@ struct cat<U> {\n     how_hungry : int,\n }\n \n-impl<U> cat<U> {\n+pub impl<U> cat<U> {\n     fn speak<T>(&mut self, stuff: ~[T]) {\n         self.meows += stuff.len();\n     }"}, {"sha": "b232be3255025ef7e6145ad507fc3a897538dfb5", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -18,7 +18,7 @@ struct cat {\n     name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n     fn speak(&mut self) { self.meow(); }\n \n     fn eat(&mut self) -> bool {\n@@ -63,6 +63,6 @@ fn print_out<T:ToStr>(thing: T, expected: ~str) {\n }\n \n pub fn main() {\n-  let mut nyan : ToStr = cat(0u, 2, ~\"nyan\") as ToStr;\n+  let mut nyan : @ToStr = @cat(0u, 2, ~\"nyan\") as @ToStr;\n   print_out(nyan, ~\"nyan\");\n }"}, {"sha": "29354c54d8ba096521bb80e01d0ae78738504b3f", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct cat<U> {\n     how_hungry : int,\n }\n \n-impl<U> cat<U> {\n+pub impl<U> cat<U> {\n     fn speak(&mut self) { self.meows += 1u; }\n     fn meow_count(&mut self) -> uint { self.meows }\n }"}, {"sha": "505537af7a1bc77bbc5287bb170cb34a7a6b5f10", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct cat {\n     how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn speak(&mut self) {}\n }\n "}, {"sha": "0d8d7fc37a915ba19100ec6bb0175dfa528c5a2b", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -15,7 +15,7 @@ struct cat {\n     name : ~str,\n }\n \n-impl cat {\n+pub impl cat {\n     fn speak(&mut self) { self.meow(); }\n \n     fn eat(&mut self) -> bool {"}, {"sha": "35f963d8fb9912d56699a6e44e3c1d32be70bf79", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2,7 +2,7 @@ struct SpeechMaker {\n     speeches: uint\n }\n \n-impl SpeechMaker {\n+pub impl SpeechMaker {\n     pure fn how_many(&self) -> uint { self.speeches }\n }\n "}, {"sha": "fd47c262d6a7d225bfb9cae5ce65b64eb00ab18b", "filename": "src/test/run-pass/coerce-reborrow-mut-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2,7 +2,7 @@ struct SpeechMaker {\n     speeches: uint\n }\n \n-impl SpeechMaker {\n+pub impl SpeechMaker {\n     fn talk(&mut self) {\n         self.speeches += 1;\n     }"}, {"sha": "57cfdd2f9d4708880696d49d99ce6c05537b63b8", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -11,7 +11,7 @@\n enum E { V, VV(int) }\n const C: E = V;\n \n-impl E {\n+pub impl E {\n     fn method(&self) {\n         match *self {\n             V => {}"}, {"sha": "e019140d1a015103ae0612a6c5c16c45720a4844", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct Box {\n     x: uint\n }\n \n-impl Box {\n+pub impl Box {\n     fn set_many(&mut self, xs: &[uint]) {\n         for xs.each |x| { self.x = *x; }\n     }"}, {"sha": "5df155e4ad3fc4dc4481df4ef4e7ca9a2d1045fd", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -30,7 +30,7 @@ fn linear_map<K,V>() -> LinearMap<K,V> {\n         size: 0})\n }\n \n-impl<K,V> LinearMap<K,V> {\n+pub impl<K,V> LinearMap<K,V> {\n     fn len(&mut self) -> uint {\n         self.size\n     }"}, {"sha": "92f745d7d5384da040b970c6207362cfa52cc92b", "filename": "src/test/run-pass/explicit-self-objects-ext-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,6 +34,6 @@ impl Reader for S {\n \n pub fn main() {\n     let x = S { x: 1, y: 2 };\n-    let x = x as @Reader;\n+    let x = @x as @Reader;\n     x.read_bytes(0);\n }"}, {"sha": "92f745d7d5384da040b970c6207362cfa52cc92b", "filename": "src/test/run-pass/explicit-self-objects-ext-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,6 +34,6 @@ impl Reader for S {\n \n pub fn main() {\n     let x = S { x: 1, y: 2 };\n-    let x = x as @Reader;\n+    let x = @x as @Reader;\n     x.read_bytes(0);\n }"}, {"sha": "2cfd327dc4e5388edc00e107179f28d7d7dbf53c", "filename": "src/test/run-pass/explicit-self-objects-ext-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,6 +34,6 @@ impl Reader for S {\n \n pub fn main() {\n     let x = S { x: 1, y: 2 };\n-    let x = x as @Reader;\n+    let x = @x as @Reader;\n     x.read_bytes(0);\n }"}, {"sha": "3945be779041defc34a9f394023067ddc81b5227", "filename": "src/test/run-pass/explicit-self-objects-ext-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -34,6 +34,6 @@ impl Reader for S {\n \n pub fn main() {\n     let x = S { x: 1, y: 2 };\n-    let x = x as @Reader;\n+    let x = @x as @Reader;\n     x.read_bytes(0);\n }"}, {"sha": "885eb9837a7109878ead989304819d1419a44d32", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -26,7 +26,7 @@ fn compute_area(shape: &shape) -> float {\n     }\n }\n \n-impl shape {\n+pub impl shape {\n     // self is in the implicit self region\n     fn select<T>(&self, threshold: float,\n                  a: &r/T, b: &r/T) -> &r/T {\n@@ -54,7 +54,7 @@ fn thing(x: A) -> thing {\n     }\n }\n \n-impl thing {\n+pub impl thing {\n     fn foo(@self) -> int { *self.x.a }\n     fn bar(~self) -> int { *self.x.a }\n     fn quux(&self) -> int { *self.x.a }"}, {"sha": "88e220670ba2c2f859e87924676b6fe8b6da3771", "filename": "src/test/run-pass/impl-implicit-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-implicit-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,7 +13,7 @@ enum option_<T> {\n     some_(T),\n }\n \n-impl<T> option_<T> {\n+pub impl<T> option_<T> {\n     fn foo() -> bool { true }\n }\n \n@@ -22,7 +22,7 @@ enum option__ {\n     some__(int)\n }\n \n-impl option__ {\n+pub impl option__ {\n     fn foo() -> bool { true }\n }\n "}, {"sha": "85ed524118b4f004209b4231e8ccb0f14c2c1e8b", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -33,6 +33,6 @@ fn f<A:Copy>(x: clam<A>, a: A) {\n pub fn main() {\n \n   let c = foo(42);\n-  let d: clam<int> = c as clam::<int>;\n+  let d: clam<int> = @c as clam::<int>;\n   f(d, c.x);\n }"}, {"sha": "f60db84eb865f8803d8a5de987933ff65cb458b2", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,7 +13,7 @@ struct foo<A> {\n     x: A,\n }\n \n-impl<A:Copy> foo<A> {\n+pub impl<A:Copy> foo<A> {\n    fn bar<B,C:clam<A>>(c: C) -> B {\n      fail!();\n    }"}, {"sha": "9e45a6b53c2b63f3f303a198f02156a38b7417ab", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ trait clam<A> { }\n \n enum foo = int;\n \n-impl foo {\n+pub impl foo {\n     fn bar<B,C:clam<B>>(c: C) -> B { fail!(); }\n }\n "}, {"sha": "73bf97ad7af8dfae85a7bef4c6dd069134850e7a", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct c1<T> {\n     x: T,\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f1(x: int) {\n     }\n }\n@@ -23,7 +23,7 @@ fn c1<T:Copy>(x: T) -> c1<T> {\n     }\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f2(x: int) {\n     }\n }"}, {"sha": "973b8d851611cde926a65b7969f2ac9123729b85", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct c1<T> {\n     x: T,\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f1(x: T) {}\n }\n \n@@ -22,7 +22,7 @@ fn c1<T:Copy>(x: T) -> c1<T> {\n     }\n }\n \n-impl<T:Copy> c1<T> {\n+pub impl<T:Copy> c1<T> {\n     fn f2(x: T) {}\n }\n "}, {"sha": "33023db5323fcf625a400462c9a2273fb9fd567f", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -17,7 +17,7 @@ impl Drop for socket {\n     fn finalize(&self) {}\n }\n \n-impl socket {\n+pub impl socket {\n \n     fn set_identity()  {\n         do closure {"}, {"sha": "57e5aa39864c06f6a109abb937b977cbe83db84a", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct font {\n     fontbuf: &self/~[u8],\n }\n \n-impl font {\n+pub impl font {\n     fn buf() -> &self/~[u8] {\n         self.fontbuf\n     }"}, {"sha": "a76d2242b402c0a4de9b16b9f94f008c945ec526", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ trait hax { }\n impl<A> hax for A { } \n \n fn perform_hax<T:&static>(x: @T) -> hax {\n-    x as hax \n+    @x as @hax\n }\n \n fn deadcode() {"}, {"sha": "14e27dce63d15b0f079c3c7f5fc660524be94641", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait hax { } \n-impl<A> hax for A { } \n+trait hax { }\n+impl<A> hax for A { }\n \n fn perform_hax<T:&static>(x: @T) -> hax {\n-    x as hax \n+    @x as @hax\n }\n \n fn deadcode() {"}, {"sha": "3ed7d2f842d12b77adfea305036aa95b3fba7e3c", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -60,7 +60,7 @@ fn square_from_char(c: char) -> square {\n }\n \n fn read_board_grid<rdr: &static + io::Reader>(+in: rdr) -> ~[~[square]] {\n-    let in = (in) as io::Reader;\n+    let in = @in as @io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {\n         let mut row = ~[];"}, {"sha": "64af4de46a242766276765844151462aa6f5fd52", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n   //   let y = @({a: 4i});\n   //    let z = @({a: 4i} as it);\n   //    let z = @({a: true} as it);\n-    let z = @(true as it);\n+    let z = @(@true as it);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "9ecc46c17ac346d00b7e0d3acb3f20d63d812a26", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -19,7 +19,7 @@ fn thing() -> thing {\n         x: 0\n     }\n }\n-impl thing { fn f(self) {} }\n+pub impl thing { fn f(self) {} }\n \n pub fn main() {\n     let z = thing();"}, {"sha": "bfde19993e9e0a757c43d74d2a7914b6f60a4b7c", "filename": "src/test/run-pass/issue-3305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3305.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -21,6 +21,6 @@ fn is_equal<D:double>(x: @D, exp: uint) {\n }\n \n pub fn main() {\n-    let x = @(3u as double);\n+    let x = @(@3u as @double);\n     is_equal(x, 6);\n }"}, {"sha": "2f7cb998e1ae6d687697d733d0ae833f71404cd1", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -13,7 +13,7 @@ struct list<T> {\n     next: Option<@mut list<T>>\n }\n \n-impl<T> list<T>{\n+pub impl<T> list<T>{\n     fn addEnd(&mut self, element: &self/T) {\n         let newList = list {\n             element: element,"}, {"sha": "b113e902963b5eefb10765ea969cd53bd3745d40", "filename": "src/test/run-pass/issue-3860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -10,7 +10,7 @@\n \n struct Foo { x: int }\n \n-impl Foo {\n+pub impl Foo {\n     fn stuff(&mut self) -> &self/mut Foo {\n         return self;\n     }"}, {"sha": "1a09a8b860f8454f627d7f9b4c89de2a9663134a", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -23,7 +23,7 @@ struct X {\n     err: ErrPrinter\n }\n \n-impl X {\n+pub impl X {\n     fn boom() {\n         exit(self.err, \"prog\", \"arg\");\n     }"}, {"sha": "0ef09d396634315c740055434aee2fbb48aa391c", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -16,7 +16,7 @@ impl<A:Copy> repeat<A> for @A {\n \n fn repeater<A:Copy>(v: @A) -> repeat<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    v as repeat::<A> // No\n+    @v as repeat::<A> // No\n }\n \n pub fn main() {"}, {"sha": "56c16d928741d5e61b6113882220bb6d7e03c77a", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n     y: int,\n }\n \n-impl Foo {\n+pub impl Foo {\n     fn sum() -> int {\n         self.x + self.y\n     }"}, {"sha": "d84646957283a77411fb1313d175c1cee02d9a93", "filename": "src/test/run-pass/move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fmove-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fmove-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -2,7 +2,7 @@ struct S {\n     x: ~str\n }\n \n-impl S {\n+pub impl S {\n     fn foo(self) {\n         self.bar();\n     }"}, {"sha": "2f2930dbab7c7f3e8eff839ce4203b78137de864", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     i: int,\n   }\n \n-  impl b {\n+  pub impl b {\n     fn do_stuff() -> int { return 37; }\n   }\n "}, {"sha": "b56f7fa961e2db117c722b2beeb338cce7404955", "filename": "src/test/run-pass/operator-overloading-explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading-explicit-self.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -12,7 +12,7 @@ struct S {\n     x: int\n }\n \n-impl S {\n+pub impl S {\n     pure fn add(&self, other: &S) -> S {\n         S { x: self.x + other.x }\n     }"}, {"sha": "a77e6acbb2508373d673a59d0476a80bef19f449", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// tjc: un-xfail after snapshot\n // xfail-test\n-// xfail-pretty\n \n // Protocols\n proto! foo ("}, {"sha": "0abb758bd7e8eb7cce620e9945f95802232d462e", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct cat {\n     how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n   fn meow_count(&mut self) -> uint { self.meows }\n }\n "}, {"sha": "1fab77cb5c8672d01ca59b506ded367e1faffc14", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -14,7 +14,7 @@ struct cat {\n     how_hungry : int,\n }\n \n-impl cat {\n+pub impl cat {\n     fn play(&mut self) {\n         self.meows += 1u;\n         self.nap();"}, {"sha": "c472e5305840503a957e109f0b24f7ce50cd4e02", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -30,7 +30,7 @@ fn align(size: uint, align: uint) -> uint {\n \n enum ptr_visit_adaptor<V> = Inner<V>;\n \n-impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n+pub impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n \n     #[inline(always)]\n     fn bump(sz: uint) {\n@@ -478,7 +478,7 @@ struct Stuff {\n     vals: ~[~str]\n }\n \n-impl my_visitor {\n+pub impl my_visitor {\n     fn get<T>(f: fn(T)) {\n         unsafe {\n             f(*(self.ptr1 as *T));\n@@ -489,7 +489,7 @@ impl my_visitor {\n         unsafe {\n             let u = my_visitor(*self);\n             let v = ptr_visit_adaptor::<my_visitor>(Inner {inner: u});\n-            visit_tydesc(inner, v as TyVisitor);\n+            visit_tydesc(inner, @v as @TyVisitor);\n             true\n         }\n     }\n@@ -644,7 +644,7 @@ pub fn main() {\n         let td = get_tydesc_for(r);\n         unsafe { error!(\"tydesc sz: %u, align: %u\",\n                         (*td).size, (*td).align); }\n-        let v = v as TyVisitor;\n+        let v = @v as @TyVisitor;\n         visit_tydesc(td, v);\n \n         for (copy u.vals).each |s| {"}, {"sha": "2b9930778b2490ba37cb2eed6c933ea6b04c6911", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -30,5 +30,5 @@ pub fn main() {\n     let ctxt = Ctxt { v: 22 };\n     let hc = HasCtxt { c: &ctxt };\n \n-    assert get_v(hc as get_ctxt) == 22;\n+    assert get_v(@hc as @get_ctxt) == 22;\n }"}, {"sha": "2b00aea2b4cef68f1b1162941b6d99626858cd92", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fecd0ba77066e604cec9d3866b76edc626b5d3/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=85fecd0ba77066e604cec9d3866b76edc626b5d3", "patch": "@@ -18,7 +18,7 @@ impl Drop for shrinky_pointer {\n     }\n }\n \n-impl shrinky_pointer {\n+pub impl shrinky_pointer {\n   fn look_at() -> int { return **(self.i); }\n }\n "}]}