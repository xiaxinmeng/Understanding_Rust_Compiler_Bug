{"sha": "c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYmFhOGMwYTdjMGY5MGMzNjMwYzVlYWNjOGY4NzgzNTA1YzkwZWM=", "commit": {"author": {"name": "Matt Ickstadt", "email": "mattico8@gmail.com", "date": "2017-04-08T21:43:30Z"}, "committer": {"name": "Matt Ickstadt", "email": "mattico8@gmail.com", "date": "2017-04-24T02:23:50Z"}, "message": "Use Vec::splice impl in string::Splice::drop()", "tree": {"sha": "3abe1c9606f99483adb2f8a00b016567ddd1c466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3abe1c9606f99483adb2f8a00b016567ddd1c466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec", "html_url": "https://github.com/rust-lang/rust/commit/c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec/comments", "author": {"login": "mattico", "id": 853158, "node_id": "MDQ6VXNlcjg1MzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/853158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattico", "html_url": "https://github.com/mattico", "followers_url": "https://api.github.com/users/mattico/followers", "following_url": "https://api.github.com/users/mattico/following{/other_user}", "gists_url": "https://api.github.com/users/mattico/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattico/subscriptions", "organizations_url": "https://api.github.com/users/mattico/orgs", "repos_url": "https://api.github.com/users/mattico/repos", "events_url": "https://api.github.com/users/mattico/events{/privacy}", "received_events_url": "https://api.github.com/users/mattico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattico", "id": 853158, "node_id": "MDQ6VXNlcjg1MzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/853158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattico", "html_url": "https://github.com/mattico", "followers_url": "https://api.github.com/users/mattico/followers", "following_url": "https://api.github.com/users/mattico/following{/other_user}", "gists_url": "https://api.github.com/users/mattico/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattico/subscriptions", "organizations_url": "https://api.github.com/users/mattico/orgs", "repos_url": "https://api.github.com/users/mattico/repos", "events_url": "https://api.github.com/users/mattico/events{/privacy}", "received_events_url": "https://api.github.com/users/mattico/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "html_url": "https://github.com/rust-lang/rust/commit/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7"}], "stats": {"total": 16, "additions": 1, "deletions": 15}, "files": [{"sha": "0a82fda09cb84dc935d38cb02715b7793aee7c74", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c3baa8c0a7c0f90c3630c5eacc8f8783505c90ec", "patch": "@@ -2242,21 +2242,7 @@ impl<'a, 'b> Drop for Splice<'a, 'b> {\n     fn drop(&mut self) {\n         unsafe {\n             let vec = (*self.string).as_mut_vec();\n-            let range_len = self.end - self.start;\n-            let replacement_len = self.replace_with.len();\n-            let tail_len = vec.len() - self.end;\n-            if replacement_len > range_len {\n-                vec.reserve(replacement_len - range_len);\n-            }\n-            if replacement_len != range_len {\n-                let src = vec.as_ptr().offset(self.end as isize);\n-                let dst = vec.as_mut_ptr().offset((self.start + replacement_len) as isize);\n-                ptr::copy(src, dst, tail_len);\n-            }\n-            let src = self.replace_with.as_ptr();\n-            let dst = vec.as_mut_ptr().offset(self.start as isize);\n-            ptr::copy(src, dst, replacement_len);\n-            vec.set_len(self.start + replacement_len + tail_len);\n+            vec.splice(self.start..self.end, self.replace_with.bytes());\n         }\n     }\n }"}]}