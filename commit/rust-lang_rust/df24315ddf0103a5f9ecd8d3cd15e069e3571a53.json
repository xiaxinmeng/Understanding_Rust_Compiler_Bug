{"sha": "df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjQzMTVkZGYwMTAzYTVmOWVjZDhkM2NkMTVlMDY5ZTM1NzFhNTM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-18T18:38:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-30T16:10:08Z"}, "message": "Adjust profiling.", "tree": {"sha": "f39e7b2cd3d07cc3bddea02f66cd6ef4c12ef917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39e7b2cd3d07cc3bddea02f66cd6ef4c12ef917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "html_url": "https://github.com/rust-lang/rust/commit/df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe89f3236c08abd8fd2c81cdd2f41ff2066f13ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe89f3236c08abd8fd2c81cdd2f41ff2066f13ac", "html_url": "https://github.com/rust-lang/rust/commit/fe89f3236c08abd8fd2c81cdd2f41ff2066f13ac"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "f92ee85f62e697ca7b6065afc57a25ece1b0f013", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "patch": "@@ -1,6 +1,7 @@\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::QueryInvocationId;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n@@ -241,6 +242,7 @@ impl<K: DepKind> DepGraph<K> {\n \n             // Intern the new `DepNode`.\n             let (dep_node_index, prev_and_color) = data.current.intern_node(\n+                dcx.profiler(),\n                 &data.previous,\n                 key,\n                 edges,\n@@ -271,7 +273,12 @@ impl<K: DepKind> DepGraph<K> {\n \n     /// Executes something within an \"anonymous\" task, that is, a task the\n     /// `DepNode` of which is determined by the list of inputs it read from.\n-    pub fn with_anon_task<OP, R>(&self, dep_kind: K, op: OP) -> (R, DepNodeIndex)\n+    pub fn with_anon_task<Ctxt: DepContext<DepKind = K>, OP, R>(\n+        &self,\n+        cx: Ctxt,\n+        dep_kind: K,\n+        op: OP,\n+    ) -> (R, DepNodeIndex)\n     where\n         OP: FnOnce() -> R,\n     {\n@@ -298,8 +305,12 @@ impl<K: DepKind> DepGraph<K> {\n                 hash: data.current.anon_id_seed.combine(hasher.finish()).into(),\n             };\n \n-            let dep_node_index =\n-                data.current.intern_new_node(target_dep_node, task_deps.reads, Fingerprint::ZERO);\n+            let dep_node_index = data.current.intern_new_node(\n+                cx.profiler(),\n+                target_dep_node,\n+                task_deps.reads,\n+                Fingerprint::ZERO,\n+            );\n \n             (result, dep_node_index)\n         } else {\n@@ -628,8 +639,11 @@ impl<K: DepKind> DepGraph<K> {\n \n         // We allocating an entry for the node in the current dependency graph and\n         // adding all the appropriate edges imported from the previous graph\n-        let dep_node_index =\n-            data.current.promote_node_and_deps_to_current(&data.previous, prev_dep_node_index);\n+        let dep_node_index = data.current.promote_node_and_deps_to_current(\n+            tcx.dep_context().profiler(),\n+            &data.previous,\n+            prev_dep_node_index,\n+        );\n \n         // ... emitting any stored diagnostic ...\n \n@@ -943,14 +957,16 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     /// Assumes that this is a node that has no equivalent in the previous dep-graph.\n     fn intern_new_node(\n         &self,\n+        profiler: &SelfProfilerRef,\n         key: DepNode<K>,\n         edges: EdgesVec,\n         current_fingerprint: Fingerprint,\n     ) -> DepNodeIndex {\n         match self.new_node_to_index.get_shard_by_value(&key).lock().entry(key) {\n             Entry::Occupied(entry) => *entry.get(),\n             Entry::Vacant(entry) => {\n-                let dep_node_index = self.encoder.borrow().send(key, current_fingerprint, edges);\n+                let dep_node_index =\n+                    self.encoder.borrow().send(profiler, key, current_fingerprint, edges);\n                 entry.insert(dep_node_index);\n                 #[cfg(debug_assertions)]\n                 self.record_edge(dep_node_index, key);\n@@ -961,6 +977,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n \n     fn intern_node(\n         &self,\n+        profiler: &SelfProfilerRef,\n         prev_graph: &PreviousDepGraph<K>,\n         key: DepNode<K>,\n         edges: EdgesVec,\n@@ -985,7 +1002,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n                         Some(dep_node_index) => dep_node_index,\n                         None => {\n                             let dep_node_index =\n-                                self.encoder.borrow().send(key, fingerprint, edges);\n+                                self.encoder.borrow().send(profiler, key, fingerprint, edges);\n                             prev_index_to_index[prev_index] = Some(dep_node_index);\n                             dep_node_index\n                         }\n@@ -1007,7 +1024,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n                         Some(dep_node_index) => dep_node_index,\n                         None => {\n                             let dep_node_index =\n-                                self.encoder.borrow().send(key, fingerprint, edges);\n+                                self.encoder.borrow().send(profiler, key, fingerprint, edges);\n                             prev_index_to_index[prev_index] = Some(dep_node_index);\n                             dep_node_index\n                         }\n@@ -1032,7 +1049,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n                     Some(dep_node_index) => dep_node_index,\n                     None => {\n                         let dep_node_index =\n-                            self.encoder.borrow().send(key, Fingerprint::ZERO, edges);\n+                            self.encoder.borrow().send(profiler, key, Fingerprint::ZERO, edges);\n                         prev_index_to_index[prev_index] = Some(dep_node_index);\n                         dep_node_index\n                     }\n@@ -1050,14 +1067,15 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             let fingerprint = fingerprint.unwrap_or(Fingerprint::ZERO);\n \n             // This is a new node: it didn't exist in the previous compilation session.\n-            let dep_node_index = self.intern_new_node(key, edges, fingerprint);\n+            let dep_node_index = self.intern_new_node(profiler, key, edges, fingerprint);\n \n             (dep_node_index, None)\n         }\n     }\n \n     fn promote_node_and_deps_to_current(\n         &self,\n+        profiler: &SelfProfilerRef,\n         prev_graph: &PreviousDepGraph<K>,\n         prev_index: SerializedDepNodeIndex,\n     ) -> DepNodeIndex {\n@@ -1070,6 +1088,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             None => {\n                 let key = prev_graph.index_to_node(prev_index);\n                 let dep_node_index = self.encoder.borrow().send(\n+                    profiler,\n                     key,\n                     prev_graph.fingerprint_by_index(prev_index),\n                     prev_graph"}, {"sha": "27f7e5730a7a2cd085dfbfcc3e0cdc81e31049c2", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "patch": "@@ -16,6 +16,7 @@ use super::query::DepGraphQuery;\n use super::{DepKind, DepNode, DepNodeIndex};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize};\n@@ -293,10 +294,12 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n \n     pub(crate) fn send(\n         &self,\n+        profiler: &SelfProfilerRef,\n         node: DepNode<K>,\n         fingerprint: Fingerprint,\n         edges: SmallVec<[DepNodeIndex; 8]>,\n     ) -> DepNodeIndex {\n+        let _prof_timer = profiler.generic_activity(\"incr_comp_encode_dep_graph\");\n         let node = NodeInfo { node, fingerprint, edges };\n         self.status.lock().encode_node(&node, &self.record_graph)\n     }"}, {"sha": "fb8a53048fabaa4a5073e8a3fd60a2d2db3254d1", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "patch": "@@ -449,9 +449,11 @@ where\n \n         let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n             tcx.start_query(job.id, diagnostics, || {\n-                tcx.dep_context()\n-                    .dep_graph()\n-                    .with_anon_task(query.dep_kind, || query.compute(tcx, key))\n+                tcx.dep_context().dep_graph().with_anon_task(\n+                    *tcx.dep_context(),\n+                    query.dep_kind,\n+                    || query.compute(tcx, key),\n+                )\n             })\n         });\n "}, {"sha": "0a15ca87d16e00ea625752e7b68b521b0216c09d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df24315ddf0103a5f9ecd8d3cd15e069e3571a53/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=df24315ddf0103a5f9ecd8d3cd15e069e3571a53", "patch": "@@ -981,7 +981,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         OP: FnOnce(&mut Self) -> R,\n     {\n         let (result, dep_node) =\n-            self.tcx().dep_graph.with_anon_task(DepKind::TraitSelect, || op(self));\n+            self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));\n         self.tcx().dep_graph.read_index(dep_node);\n         (result, dep_node)\n     }"}]}