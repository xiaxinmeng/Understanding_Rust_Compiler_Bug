{"sha": "11fbb573951d61b7de9b773750c206253a5db974", "node_id": "C_kwDOAAsO6NoAKDExZmJiNTczOTUxZDYxYjdkZTliNzczNzUwYzIwNjI1M2E1ZGI5NzQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-25T18:34:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:06:03Z"}, "message": "Simplify diagnostic_items.", "tree": {"sha": "0e2eb6937d816856a86654c360ef853c6f0b828c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e2eb6937d816856a86654c360ef853c6f0b828c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11fbb573951d61b7de9b773750c206253a5db974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11fbb573951d61b7de9b773750c206253a5db974", "html_url": "https://github.com/rust-lang/rust/commit/11fbb573951d61b7de9b773750c206253a5db974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11fbb573951d61b7de9b773750c206253a5db974/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fd012439d75fd6ce561a6518b9b8fd399f455f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fd012439d75fd6ce561a6518b9b8fd399f455f", "html_url": "https://github.com/rust-lang/rust/commit/70fd012439d75fd6ce561a6518b9b8fd399f455f"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "ad119c4e07306c09e5ac4b23567bf5f3febe7fd0", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11fbb573951d61b7de9b773750c206253a5db974/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fbb573951d61b7de9b773750c206253a5db974/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=11fbb573951d61b7de9b773750c206253a5db974", "patch": "@@ -64,13 +64,17 @@ impl ModuleItems {\n         self.foreign_items.iter().copied()\n     }\n \n-    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+    pub fn owners(&self) -> impl Iterator<Item = OwnerId> + '_ {\n         self.items\n             .iter()\n-            .map(|id| id.owner_id.def_id)\n-            .chain(self.trait_items.iter().map(|id| id.owner_id.def_id))\n-            .chain(self.impl_items.iter().map(|id| id.owner_id.def_id))\n-            .chain(self.foreign_items.iter().map(|id| id.owner_id.def_id))\n+            .map(|id| id.owner_id)\n+            .chain(self.trait_items.iter().map(|id| id.owner_id))\n+            .chain(self.impl_items.iter().map(|id| id.owner_id))\n+            .chain(self.foreign_items.iter().map(|id| id.owner_id))\n+    }\n+\n+    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+        self.owners().map(|id| id.def_id)\n     }\n \n     pub fn par_items(&self, f: impl Fn(ItemId) + Send + Sync) {"}, {"sha": "ae3d40b0ec5165834acd947ad95258b4d471c44b", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/11fbb573951d61b7de9b773750c206253a5db974/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fbb573951d61b7de9b773750c206253a5db974/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=11fbb573951d61b7de9b773750c206253a5db974", "patch": "@@ -11,43 +11,53 @@\n \n use rustc_ast as ast;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n+use rustc_hir::OwnerId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_span::symbol::{kw::Empty, sym, Symbol};\n \n use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n \n-fn observe_item(tcx: TyCtxt<'_>, diagnostic_items: &mut DiagnosticItems, def_id: LocalDefId) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let attrs = tcx.hir().attrs(hir_id);\n+fn observe_item<'tcx>(tcx: TyCtxt<'tcx>, diagnostic_items: &mut DiagnosticItems, owner: OwnerId) {\n+    let attrs = tcx.hir().attrs(owner.into());\n     if let Some(name) = extract(attrs) {\n         // insert into our table\n-        collect_item(tcx, diagnostic_items, name, def_id.to_def_id());\n+        collect_item(tcx, diagnostic_items, name, owner.to_def_id());\n     }\n }\n \n fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item_def_id: DefId) {\n     items.id_to_name.insert(item_def_id, name);\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n-            let orig_span = tcx.hir().span_if_local(original_def_id);\n-            let orig_crate_name =\n-                orig_span.is_none().then(|| tcx.crate_name(original_def_id.krate));\n-            match tcx.hir().span_if_local(item_def_id) {\n-                Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n-                None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n-                    span: orig_span,\n-                    orig_crate_name: orig_crate_name.unwrap_or(Empty),\n-                    have_orig_crate_name: orig_crate_name.map(|_| ()),\n-                    crate_name: tcx.crate_name(item_def_id.krate),\n-                    name,\n-                }),\n-            };\n+            report_duplicate_item(tcx, name, original_def_id, item_def_id);\n         }\n     }\n }\n \n+fn report_duplicate_item(\n+    tcx: TyCtxt<'_>,\n+    name: Symbol,\n+    original_def_id: DefId,\n+    item_def_id: DefId,\n+) {\n+    let (orig_span, orig_crate_name, have_orig_crate_name) = match original_def_id.as_local() {\n+        Some(local_original) => (Some(tcx.def_span(local_original)), Empty, None),\n+        None => (None, tcx.crate_name(original_def_id.krate), Some(())),\n+    };\n+    match tcx.hir().span_if_local(item_def_id) {\n+        Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n+        None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n+            span: orig_span,\n+            orig_crate_name,\n+            have_orig_crate_name,\n+            crate_name: tcx.crate_name(item_def_id.krate),\n+            name,\n+        }),\n+    };\n+}\n+\n /// Extract the first `rustc_diagnostic_item = \"$name\"` out of a list of attributes.\n fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n     attrs.iter().find_map(|attr| {\n@@ -64,21 +74,8 @@ fn diagnostic_items(tcx: TyCtxt<'_>, cnum: CrateNum) -> DiagnosticItems {\n \n     // Collect diagnostic items in this crate.\n     let crate_items = tcx.hir_crate_items(());\n-\n-    for id in crate_items.items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.trait_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.impl_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.foreign_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n+    for id in crate_items.owners() {\n+        observe_item(tcx, &mut diagnostic_items, id);\n     }\n \n     diagnostic_items"}]}