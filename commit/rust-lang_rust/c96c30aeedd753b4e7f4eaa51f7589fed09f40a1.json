{"sha": "c96c30aeedd753b4e7f4eaa51f7589fed09f40a1", "node_id": "C_kwDOAAsO6NoAKGM5NmMzMGFlZWRkNzUzYjRlN2Y0ZWFhNTFmNzU4OWZlZDA5ZjQwYTE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-04-03T19:09:53Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-04-03T19:10:02Z"}, "message": "test that modifications to the source don't become visible after io::copy", "tree": {"sha": "d2b84b30dffe74d797dd81a3697b237bea051b70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2b84b30dffe74d797dd81a3697b237bea051b70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96c30aeedd753b4e7f4eaa51f7589fed09f40a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96c30aeedd753b4e7f4eaa51f7589fed09f40a1", "html_url": "https://github.com/rust-lang/rust/commit/c96c30aeedd753b4e7f4eaa51f7589fed09f40a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96c30aeedd753b4e7f4eaa51f7589fed09f40a1/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "html_url": "https://github.com/rust-lang/rust/commit/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "a524270e3fb85bccde2baf0baf82d0725fbf3be5", "filename": "library/std/src/sys/unix/kernel_copy/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c96c30aeedd753b4e7f4eaa51f7589fed09f40a1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96c30aeedd753b4e7f4eaa51f7589fed09f40a1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs?ref=c96c30aeedd753b4e7f4eaa51f7589fed09f40a1", "patch": "@@ -83,6 +83,48 @@ fn copies_append_mode_sink() -> Result<()> {\n     Ok(())\n }\n \n+#[test]\n+fn dont_splice_pipes_from_files() -> Result<()> {\n+    // splicing to a pipe and then modifying the source could lead to changes\n+    // becoming visible in an unexpected order.\n+\n+    use crate::io::SeekFrom;\n+    use crate::os::unix::fs::FileExt;\n+    use crate::process::{ChildStdin, ChildStdout};\n+    use crate::sys_common::FromInner;\n+\n+    let (read_end, write_end) = crate::sys::pipe::anon_pipe()?;\n+\n+    let mut read_end = ChildStdout::from_inner(read_end);\n+    let mut write_end = ChildStdin::from_inner(write_end);\n+\n+    let tmp_path = tmpdir();\n+    let file = tmp_path.join(\"to_be_modified\");\n+    let mut file =\n+        crate::fs::OpenOptions::new().create_new(true).read(true).write(true).open(file)?;\n+\n+    const SZ: usize = libc::PIPE_BUF as usize;\n+\n+    // put data in page cache\n+    let mut buf: [u8; SZ] = [0x01; SZ];\n+    file.write_all(&buf).unwrap();\n+\n+    // copy page into pipe\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+    assert!(io::copy(&mut file, &mut write_end).unwrap() == SZ as u64);\n+\n+    // modify file\n+    buf[0] = 0x02;\n+    file.write_at(&buf, 0).unwrap();\n+\n+    // read from pipe\n+    read_end.read_exact(buf.as_mut_slice()).unwrap();\n+\n+    assert_eq!(buf[0], 0x01, \"data in pipe should reflect the original, not later modifications\");\n+\n+    Ok(())\n+}\n+\n #[bench]\n fn bench_file_to_file_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;"}]}