{"sha": "7017058e6b289ea6253e62b9ffdae5dea036855f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTcwNThlNmIyODllYTYyNTNlNjJiOWZmZGFlNWRlYTAzNjg1NWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T02:29:17Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "ast: add `Defaultness` to `Item`, making `AssocItem` an alias.", "tree": {"sha": "51039fff9bade083cf45102cfb011e3d824dde77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51039fff9bade083cf45102cfb011e3d824dde77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7017058e6b289ea6253e62b9ffdae5dea036855f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7017058e6b289ea6253e62b9ffdae5dea036855f", "html_url": "https://github.com/rust-lang/rust/commit/7017058e6b289ea6253e62b9ffdae5dea036855f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7017058e6b289ea6253e62b9ffdae5dea036855f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d41fc138bf57db0d5491d0886a676c3ade4b746f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41fc138bf57db0d5491d0886a676c3ade4b746f", "html_url": "https://github.com/rust-lang/rust/commit/d41fc138bf57db0d5491d0886a676c3ade4b746f"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "503310c6db539a96d479f29ba97cd403b542ec92", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -1016,8 +1016,8 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        let ast::ForeignItem { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, ast::Defaultness::Final, kind, vis);\n+        let ast::Item { id, span, ident, attrs, kind, vis, defaultness, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, *defaultness, kind, vis);\n     }\n \n     fn print_nested_item_kind("}, {"sha": "70b9fccbafc1534285082d3641bc191bd6c29bf4", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -30,6 +30,7 @@ pub fn expand_global_asm<'cx>(\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::ItemKind::GlobalAsm(P(global_asm)),\n             vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            defaultness: ast::Defaultness::Final,\n             span: cx.with_def_site_ctxt(sp),\n             tokens: None,\n         })]),"}, {"sha": "1d8ade1b2ba789661036c7532169fcecf6a08df8", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -162,30 +162,21 @@ impl MutVisitor for EntryPointCleaner {\n         // #[allow(dead_code)] to avoid printing warnings.\n         let item = match entry::entry_point_type(&item, self.depth) {\n             EntryPointType::MainNamed | EntryPointType::MainAttr | EntryPointType::Start => item\n-                .map(|ast::Item { id, ident, attrs, kind, vis, span, tokens }| {\n+                .map(|ast::Item { id, ident, attrs, kind, vis, defaultness, span, tokens }| {\n                     let allow_ident = Ident::new(sym::allow, self.def_site);\n                     let dc_nested = attr::mk_nested_word_item(Ident::from_str_and_span(\n                         \"dead_code\",\n                         self.def_site,\n                     ));\n                     let allow_dead_code_item = attr::mk_list_item(allow_ident, vec![dc_nested]);\n                     let allow_dead_code = attr::mk_attr_outer(allow_dead_code_item);\n+                    let attrs = attrs\n+                        .into_iter()\n+                        .filter(|attr| !attr.check_name(sym::main) && !attr.check_name(sym::start))\n+                        .chain(iter::once(allow_dead_code))\n+                        .collect();\n \n-                    ast::Item {\n-                        id,\n-                        ident,\n-                        attrs: attrs\n-                            .into_iter()\n-                            .filter(|attr| {\n-                                !attr.check_name(sym::main) && !attr.check_name(sym::start)\n-                            })\n-                            .chain(iter::once(allow_dead_code))\n-                            .collect(),\n-                        kind,\n-                        vis,\n-                        span,\n-                        tokens,\n-                    }\n+                    ast::Item { id, ident, attrs, kind, vis, defaultness, span, tokens }\n                 }),\n             EntryPointType::None | EntryPointType::OtherMain => item,\n         };\n@@ -321,6 +312,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n         vis: respan(sp, ast::VisibilityKind::Public),\n+        defaultness: ast::Defaultness::Final,\n         span: sp,\n         tokens: None,\n     });"}, {"sha": "246b3bff71d4eda65943468b17213ef9182bc293", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -588,6 +588,7 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             kind,\n             vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            defaultness: ast::Defaultness::Final,\n             span,\n             tokens: None,\n         })"}, {"sha": "ba26780dea204b4cfd9fabff08a861399ae169cc", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -358,6 +358,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             ident: Ident::invalid(),\n             id: ast::DUMMY_NODE_ID,\n             vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n+            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })]);\n "}, {"sha": "e7e4f482a5e31156f93b8c8cb5cdccbfc8505f11", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -26,6 +26,7 @@ pub fn placeholder(\n     let ident = ast::Ident::invalid();\n     let attrs = Vec::new();\n     let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n+    let defaultness = ast::Defaultness::Final;\n     let span = DUMMY_SP;\n     let expr_placeholder = || {\n         P(ast::Expr {\n@@ -46,6 +47,7 @@ pub fn placeholder(\n             span,\n             ident,\n             vis,\n+            defaultness,\n             attrs,\n             kind: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n@@ -76,6 +78,7 @@ pub fn placeholder(\n                 span,\n                 ident,\n                 vis,\n+                defaultness,\n                 attrs,\n                 kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n                 tokens: None,"}, {"sha": "602be37257361293f4c37761b610a0385352127a", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -464,6 +464,7 @@ impl CStore {\n                     legacy: def.legacy,\n                 }),\n                 vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                defaultness: ast::Defaultness::Final,\n                 tokens: None,\n             },\n             data.root.edition,"}, {"sha": "190baa9b2d90edcd575ad8e9dbf486fc305f56c8", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -85,7 +85,7 @@ impl<'a> Parser<'a> {\n         let vis = self.parse_visibility(FollowedByType::No)?;\n \n         if let Some((ident, kind)) = self.parse_item_kind(&mut attrs, macros_allowed, lo, &vis)? {\n-            return Ok(Some(P(self.mk_item(lo, ident, kind, vis, attrs))));\n+            return Ok(Some(P(self.mk_item(lo, ident, kind, vis, Defaultness::Final, attrs))));\n         }\n \n         // FAILURE TO PARSE ITEM\n@@ -866,7 +866,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, |_| true, &vis)?;\n-        let item = self.mk_item(lo, ident, kind, vis, attrs);\n+        let item = self.mk_item(lo, ident, kind, vis, Defaultness::Final, attrs);\n         self.error_on_foreign_const(&item);\n         Ok(P(item))\n     }\n@@ -1420,10 +1420,11 @@ impl<'a> Parser<'a> {\n         ident: Ident,\n         kind: K,\n         vis: Visibility,\n+        defaultness: Defaultness,\n         attrs: Vec<Attribute>,\n     ) -> Item<K> {\n         let span = lo.to(self.prev_span);\n-        Item { ident, attrs, id: DUMMY_NODE_ID, kind, vis, span, tokens: None }\n+        Item { ident, attrs, id: DUMMY_NODE_ID, kind, vis, defaultness, span, tokens: None }\n     }\n }\n "}, {"sha": "dd3319fcba155b01c6a3eb2f58fe50b8e6410411", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -2411,16 +2411,19 @@ impl VariantData {\n     }\n }\n \n-/// An item.\n-///\n-/// The name might be a dummy name in case of anonymous items.\n+/// An item definition.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item<K = ItemKind> {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,\n+    /// The name of the item.\n+    /// It might be a dummy name in case of anonymous items.\n     pub ident: Ident,\n+    /// The `default`ness of this item.\n+    /// This should only occur in syntactically well-formed code in associated contexts.\n+    pub defaultness: Defaultness,\n \n     pub kind: K,\n \n@@ -2613,19 +2616,7 @@ pub type ForeignItemKind = AssocItemKind;\n \n /// Represents associated items.\n /// These include items in `impl` and `trait` definitions.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct AssocItem {\n-    pub attrs: Vec<Attribute>,\n-    pub id: NodeId,\n-    pub span: Span,\n-    pub vis: Visibility,\n-    pub ident: Ident,\n-\n-    pub defaultness: Defaultness,\n-    pub kind: AssocItemKind,\n-    /// See `Item::tokens` for what this is.\n-    pub tokens: Option<TokenStream>,\n-}\n+pub type AssocItem = Item<AssocItemKind>;\n \n /// Represents non-free item kinds.\n ///"}, {"sha": "cd485e7137808b3726f0c555b0cca6e0d43cf400", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -722,6 +722,6 @@ macro_rules! derive_has_attrs {\n }\n \n derive_has_attrs! {\n-    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::AssocItem, ast::Arm,\n+    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::Arm,\n     ast::Field, ast::FieldPat, ast::Variant, ast::Param, GenericParam\n }"}, {"sha": "048026cbb248ef5d39c50e04ecf886902e0954c6", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -948,8 +948,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     mut item: P<AssocItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<AssocItem>; 1]> {\n-    let AssocItem { id, ident, vis, defaultness: _, attrs, kind, span, tokens: _ } =\n-        item.deref_mut();\n+    let Item { id, ident, vis, defaultness: _, attrs, kind, span, tokens: _ } = item.deref_mut();\n     walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }\n@@ -1004,6 +1003,7 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n             attrs,\n             id: DUMMY_NODE_ID,\n             vis: respan(span.shrink_to_lo(), VisibilityKind::Public),\n+            defaultness: Defaultness::Final,\n             span,\n             kind: ItemKind::Mod(module),\n             tokens: None,\n@@ -1031,7 +1031,7 @@ pub fn noop_flat_map_item<T: MutVisitor>(\n     mut item: P<Item>,\n     visitor: &mut T,\n ) -> SmallVec<[P<Item>; 1]> {\n-    let Item { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n+    let Item { ident, attrs, id, kind, vis, defaultness: _, span, tokens: _ } = item.deref_mut();\n     visitor.visit_ident(ident);\n     visit_attrs(attrs, visitor);\n     visitor.visit_id(id);\n@@ -1049,7 +1049,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n     mut item: P<ForeignItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<ForeignItem>; 1]> {\n-    let ForeignItem { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n+    let Item { ident, attrs, id, kind, vis, defaultness: _, span, tokens: _ } = item.deref_mut();\n     walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }"}, {"sha": "244cb80064ebc35e0451d81977455b0e96b57f61", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -526,7 +526,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n }\n \n pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignItem) {\n-    let ForeignItem { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n+    let ForeignItem { id, span, ident, vis, defaultness: _, attrs, kind, tokens: _ } = item;\n     walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Foreign);\n }\n "}, {"sha": "bbda63955e0b7a4b3d815664cef30b1ac1c10b87", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7017058e6b289ea6253e62b9ffdae5dea036855f/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=7017058e6b289ea6253e62b9ffdae5dea036855f", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"defaultness\":\"Final\",\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}]}