{"sha": "98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YWVhYzI5MzBkZmQ2NGVmMWNiNTJjM2EyMGUxZjM2MDlmZWVlOGU=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2014-12-27T12:00:48Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2014-12-27T12:00:48Z"}, "message": "Extend span debugger", "tree": {"sha": "934e07e7cd4da35c2b03a7750e1cdb6362e07469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/934e07e7cd4da35c2b03a7750e1cdb6362e07469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "html_url": "https://github.com/rust-lang/rust/commit/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4da75892219ee8fed5fc8801a37ffe82520083d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4da75892219ee8fed5fc8801a37ffe82520083d", "html_url": "https://github.com/rust-lang/rust/commit/d4da75892219ee8fed5fc8801a37ffe82520083d"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "5e563ae9d6dfa9b47e5663a40c2c8ba033961655", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "patch": "@@ -138,8 +138,8 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n         krate.encode(&mut json).unwrap();\n     }\n \n-    if sess.opts.show_span.is_some() {\n-        syntax::show_span::run(sess.diagnostic(), &krate);\n+    if let Some(ref s) = sess.opts.show_span {\n+        syntax::show_span::run(sess.diagnostic(), s.as_slice(), &krate);\n     }\n \n     krate"}, {"sha": "51d655ec0f2c5075070a48299c7af70402b6d537", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98aeac2930dfd64ef1cb52c3a20e1f3609feee8e/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=98aeac2930dfd64ef1cb52c3a20e1f3609feee8e", "patch": "@@ -13,27 +13,73 @@\n //! This module shows spans for all expressions in the crate\n //! to help with compiler debugging.\n \n+use std::str::FromStr;\n+\n use ast;\n use diagnostic;\n use visit;\n use visit::Visitor;\n \n+enum Mode {\n+    Expression,\n+    Pattern,\n+    Type,\n+}\n+\n+impl FromStr for Mode {\n+    fn from_str(s: &str) -> Option<Mode> {\n+        let mode = match s {\n+            \"expr\" => Mode::Expression,\n+            \"pat\" => Mode::Pattern,\n+            \"ty\" => Mode::Type,\n+            _ => return None\n+        };\n+        Some(mode)\n+    }\n+}\n+\n struct ShowSpanVisitor<'a> {\n     span_diagnostic: &'a diagnostic::SpanHandler,\n+    mode: Mode,\n }\n \n impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n-        self.span_diagnostic.span_note(e.span, \"expression\");\n+        if let Mode::Expression = self.mode {\n+            self.span_diagnostic.span_note(e.span, \"expression\");\n+        }\n         visit::walk_expr(self, e);\n     }\n \n+    fn visit_pat(&mut self, p: &ast::Pat) {\n+        if let Mode::Pattern = self.mode {\n+            self.span_diagnostic.span_note(p.span, \"pattern\");\n+        }\n+        visit::walk_pat(self, p);\n+    }\n+\n+    fn visit_ty(&mut self, t: &ast::Ty) {\n+        if let Mode::Type = self.mode {\n+            self.span_diagnostic.span_note(t.span, \"type\");\n+        }\n+        visit::walk_ty(self, t);\n+    }\n+\n     fn visit_mac(&mut self, macro: &ast::Mac) {\n         visit::walk_mac(self, macro);\n     }\n }\n \n-pub fn run(span_diagnostic: &diagnostic::SpanHandler, krate: &ast::Crate) {\n-    let mut v = ShowSpanVisitor { span_diagnostic: span_diagnostic };\n+pub fn run(span_diagnostic: &diagnostic::SpanHandler,\n+           mode: &str,\n+           krate: &ast::Crate) {\n+    let mode = match mode.parse() {\n+        Some(mode) => mode,\n+        None => return\n+    };\n+    let mut v = ShowSpanVisitor {\n+        span_diagnostic: span_diagnostic,\n+        mode: mode,\n+    };\n     visit::walk_crate(&mut v, krate);\n }"}]}