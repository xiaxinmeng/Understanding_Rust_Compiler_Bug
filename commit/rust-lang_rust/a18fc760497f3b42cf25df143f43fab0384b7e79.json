{"sha": "a18fc760497f3b42cf25df143f43fab0384b7e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGZjNzYwNDk3ZjNiNDJjZjI1ZGYxNDNmNDNmYWIwMzg0YjdlNzk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-31T04:53:04Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-01T19:10:07Z"}, "message": "Refactor `directive.import(binding)` -> `resolver.import(binding, directive)`.", "tree": {"sha": "846bbce840de4ae1e86bc2145c7c850b72aab608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846bbce840de4ae1e86bc2145c7c850b72aab608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18fc760497f3b42cf25df143f43fab0384b7e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18fc760497f3b42cf25df143f43fab0384b7e79", "html_url": "https://github.com/rust-lang/rust/commit/a18fc760497f3b42cf25df143f43fab0384b7e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18fc760497f3b42cf25df143f43fab0384b7e79/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db8ca6ca2cc400e4cdd95a2cf8867766d376730", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db8ca6ca2cc400e4cdd95a2cf8867766d376730", "html_url": "https://github.com/rust-lang/rust/commit/0db8ca6ca2cc400e4cdd95a2cf8867766d376730"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "6986f99926e1e43d9dd07874d5d25b29a9d4d6df", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a18fc760497f3b42cf25df143f43fab0384b7e79/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18fc760497f3b42cf25df143f43fab0384b7e79/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a18fc760497f3b42cf25df143f43fab0384b7e79", "patch": "@@ -71,19 +71,6 @@ pub struct ImportDirective<'a> {\n }\n \n impl<'a> ImportDirective<'a> {\n-    // Given the binding to which this directive resolves in a particular namespace,\n-    // this returns the binding for the name this directive defines in that namespace.\n-    fn import(&'a self, binding: &'a NameBinding<'a>) -> NameBinding<'a> {\n-        NameBinding {\n-            kind: NameBindingKind::Import {\n-                binding: binding,\n-                directive: self,\n-            },\n-            span: self.span,\n-            vis: self.vis,\n-        }\n-    }\n-\n     pub fn is_glob(&self) -> bool {\n         match self.subclass { ImportDirectiveSubclass::GlobImport { .. } => true, _ => false }\n     }\n@@ -258,6 +245,20 @@ impl<'a> ::ModuleS<'a> {\n }\n \n impl<'a> Resolver<'a> {\n+    // Given a binding and an import directive that resolves to it,\n+    // return the corresponding binding defined by the import directive.\n+    fn import(&mut self, binding: &'a NameBinding<'a>, directive: &'a ImportDirective<'a>)\n+              -> NameBinding<'a> {\n+        NameBinding {\n+            kind: NameBindingKind::Import {\n+                binding: binding,\n+                directive: directive,\n+            },\n+            span: directive.span,\n+            vis: directive.vis,\n+        }\n+    }\n+\n     // Define the name or return the existing binding if there is a collision.\n     pub fn try_define<T>(&mut self, module: Module<'a>, name: Name, ns: Namespace, binding: T)\n                          -> Result<(), &'a NameBinding<'a>>\n@@ -305,7 +306,8 @@ impl<'a> Resolver<'a> {\n         // Define `new_binding` in `module`s glob importers.\n         if new_binding.is_importable() && new_binding.is_pseudo_public() {\n             for &(importer, directive) in module.glob_importers.borrow_mut().iter() {\n-                let _ = self.try_define(importer, name, ns, directive.import(new_binding));\n+                let imported_binding = self.import(new_binding, directive);\n+                let _ = self.try_define(importer, name, ns, imported_binding);\n             }\n         }\n \n@@ -408,7 +410,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             });\n-            let dummy_binding = directive.import(dummy_binding);\n+            let dummy_binding = self.import(dummy_binding, directive);\n \n             let _ = self.try_define(source_module, target, ValueNS, dummy_binding.clone());\n             let _ = self.try_define(source_module, target, TypeNS, dummy_binding);\n@@ -512,10 +514,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 Success(binding) if !self.is_accessible(binding.vis) => {}\n                 Success(binding) if !determined.get() => {\n                     determined.set(true);\n-                    let imported_binding = directive.import(binding);\n+                    let imported_binding = self.import(binding, directive);\n                     let conflict = self.try_define(module, target, ns, imported_binding);\n                     if let Err(old_binding) = conflict {\n-                        let binding = &directive.import(binding);\n+                        let binding = &self.import(binding, directive);\n                         self.report_conflict(module, target, ns, binding, old_binding);\n                     }\n                     privacy_error = false;\n@@ -556,7 +558,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             for &(ns, result) in &[(ValueNS, &value_result), (TypeNS, &type_result)] {\n                 let binding = match *result { Success(binding) => binding, _ => continue };\n                 self.privacy_errors.push(PrivacyError(directive.span, source, binding));\n-                let _ = self.try_define(module, target, ns, directive.import(binding));\n+                let imported_binding = self.import(binding, directive);\n+                let _ = self.try_define(module, target, ns, imported_binding);\n             }\n         }\n \n@@ -638,7 +641,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }).collect::<Vec<_>>();\n         for ((name, ns), binding) in bindings {\n             if binding.is_importable() && binding.is_pseudo_public() {\n-                let _ = self.try_define(module, name, ns, directive.import(binding));\n+                let imported_binding = self.import(binding, directive);\n+                let _ = self.try_define(module, name, ns, imported_binding);\n             }\n         }\n "}]}