{"sha": "fc202ca034e0d657b41b98ad0b28d43fd32f3982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjAyY2EwMzRlMGQ2NTdiNDFiOThhZDBiMjhkNDNmZDMyZjM5ODI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-06T18:36:43Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-06T18:38:23Z"}, "message": "Remove support for old-style for\n\nCloses #1619", "tree": {"sha": "119721c91573c4f2d8e0ec625df853746f713e72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119721c91573c4f2d8e0ec625df853746f713e72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc202ca034e0d657b41b98ad0b28d43fd32f3982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc202ca034e0d657b41b98ad0b28d43fd32f3982", "html_url": "https://github.com/rust-lang/rust/commit/fc202ca034e0d657b41b98ad0b28d43fd32f3982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc202ca034e0d657b41b98ad0b28d43fd32f3982/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c902eafa14803ca9fcb0b59ce852bdabca826c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c902eafa14803ca9fcb0b59ce852bdabca826c6f", "html_url": "https://github.com/rust-lang/rust/commit/c902eafa14803ca9fcb0b59ce852bdabca826c6f"}], "stats": {"total": 201, "additions": 37, "deletions": 164}, "files": [{"sha": "afe55bf159eafa91d7e0efd85bd60628661b533d", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -1000,11 +1000,11 @@ the function name.\n \n ~~~~\n fn iter<T>(seq: [T], f: fn(T)) {\n-    for elt: T in seq { f(elt); }\n+    for seq.each {|elt| f(elt); }\n }\n fn map<T, U>(seq: [T], f: fn(T) -> U) -> [U] {\n     let mut acc = [];\n-    for elt in seq { acc += [f(elt)]; }\n+    for seq.each {|elt| acc += [f(elt)]; }\n     acc\n }\n ~~~~\n@@ -2113,7 +2113,7 @@ An example a for loop:\n \n let v: [foo] = [a, b, c];\n \n-for e: foo in v {\n+for v.each {|e|\n     bar(e);\n }\n ~~~~\n@@ -2228,7 +2228,7 @@ fn main() {\n ~~~~\n \n Multiple alternative patterns may be joined with the `|` operator.  A\n-range of values may be specified with `to`.  For example:\n+range of values may be specified with `to`. For example:\n \n ~~~~\n # let x = 2;"}, {"sha": "9a5ce0fed573445145329c65039486359400619b", "filename": "doc/tutorial.md", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -690,19 +690,6 @@ do {\n } while any_cake_left();\n ~~~~\n \n-When iterating over a vector, use `for` instead.\n-\n-~~~~\n-for elt in [\"red\", \"green\", \"blue\"] {\n-    io::println(elt);\n-}\n-~~~~\n-\n-This will go over each element in the given vector (a three-element\n-vector of strings, in this case), and repeatedly execute the body with\n-`elt` bound to the current element. You may add an optional type\n-declaration (`elt: str`) for the iteration variable if you want.\n-\n For more involved iteration, such as going over the elements of a hash\n table, Rust uses higher-order functions. We'll come back to those in a\n moment.\n@@ -1095,8 +1082,8 @@ enum color {\n ~~~~\n \n If an explicit discriminator is not specified for a variant, the value\n-defaults to the value of the previous variant plus one.  If the first\n-variant does not have a discriminator, it defaults to 0.  For example,\n+defaults to the value of the previous variant plus one. If the first\n+variant does not have a discriminator, it defaults to 0. For example,\n the value of `north` is 0, `east` is 1, etc.\n \n When an enum is C-like the `as` cast operator can be used to get the\n@@ -1399,7 +1386,7 @@ not sure.\n \n ~~~~\n fn for_each(v: [mut @int], iter: fn(@int)) {\n-   for elt in v { iter(elt); }\n+   for v.each {|elt| iter(elt); }\n }\n ~~~~\n \n@@ -1422,7 +1409,7 @@ with the `copy` operator:\n ~~~~\n type mutrec = {mut x: int};\n fn for_each(v: [mut mutrec], iter: fn(mutrec)) {\n-   for elt in v { iter(copy elt); }\n+   for v.each {|elt| iter(copy elt); }\n }\n ~~~~\n \n@@ -1509,7 +1496,7 @@ fn for_rev<T>(v: [T], act: fn(T)) {\n \n fn map<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n     let mut acc = [];\n-    for elt in v { acc += [f(elt)]; }\n+    for v.each {|elt| acc += [f(elt)]; }\n     ret acc;\n }\n ~~~~\n@@ -1987,7 +1974,7 @@ parameters.\n # iface to_str { fn to_str() -> str; }\n fn comma_sep<T: to_str>(elts: [T]) -> str {\n     let mut result = \"\", first = true;\n-    for elt in elts {\n+    for elts.each {|elt|\n         if first { first = false; }\n         else { result += \", \"; }\n         result += elt.to_str();\n@@ -2017,7 +2004,7 @@ iface seq<T> {\n impl <T> of seq<T> for [T] {\n     fn len() -> uint { vec::len(self) }\n     fn iter(b: fn(T)) {\n-        for elt in self { b(elt); }\n+        for self.each {|elt| b(elt); }\n     }\n }\n ~~~~\n@@ -2037,7 +2024,7 @@ However, consider this function:\n ~~~~\n # iface drawable { fn draw(); }\n fn draw_all<T: drawable>(shapes: [T]) {\n-    for shape in shapes { shape.draw(); }\n+    for shapes.each {|shape| shape.draw(); }\n }\n ~~~~\n \n@@ -2051,7 +2038,7 @@ the function to be written simply like this:\n ~~~~\n # iface drawable { fn draw(); }\n fn draw_all(shapes: [drawable]) {\n-    for shape in shapes { shape.draw(); }\n+    for shapes.each {|shape| shape.draw(); }\n }\n ~~~~\n \n@@ -2136,7 +2123,7 @@ native mod crypto {\n \n fn as_hex(data: [u8]) -> str {\n     let mut acc = \"\";\n-    for byte in data { acc += #fmt(\"%02x\", byte as uint); }\n+    for data.each {|byte| acc += #fmt(\"%02x\", byte as uint); }\n     ret acc;\n }\n "}, {"sha": "8b04bc8fb050d19b78c7b613767fbe654ad252f5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -196,17 +196,20 @@ fn check_error_patterns(props: test_props,\n \n     let mut next_err_idx = 0u;\n     let mut next_err_pat = props.error_patterns[next_err_idx];\n+    let mut done = false;\n     for str::split_char(procres.stderr, '\\n').each {|line|\n         if str::contains(line, next_err_pat) {\n             #debug(\"found error pattern %s\", next_err_pat);\n             next_err_idx += 1u;\n             if next_err_idx == vec::len(props.error_patterns) {\n                 #debug(\"found all error patterns\");\n-                ret;\n+                done = true;\n+                break;\n             }\n             next_err_pat = props.error_patterns[next_err_idx];\n         }\n     }\n+    if done { ret; }\n \n     let missing_patterns =\n         vec::slice(props.error_patterns, next_err_idx,"}, {"sha": "7b76487baf746066bce5e863c6458a60cab64cb6", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -71,7 +71,6 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           ast::expr_if_check(_, _, _) { false }\n           ast::expr_block(_) { false }\n           ast::expr_alt(_, _, _) { false }\n-          ast::expr_for(_, _, _) { false }\n           ast::expr_while(_, _) { false }\n \n           // https://github.com/mozilla/rust/issues/955"}, {"sha": "192563c95fbc93a5f2220f35f82bf52a8af76ca3", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -717,6 +717,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore]\n     fn test_env_getenv() {\n         let e = env();\n         assert vec::len(e) > 0u;"}, {"sha": "b2e0583c61b1aa42022f9fd7d2065f54c0322859", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -289,7 +289,6 @@ enum expr_ {\n     expr_cast(@expr, @ty),\n     expr_if(@expr, blk, option<@expr>),\n     expr_while(@expr, blk),\n-    expr_for(@local, @expr, blk),\n     expr_do_while(blk, @expr),\n     /* Conditionless loop (can be exited with break, cont, ret, or fail)\n        Same semantics as while(true) { body }, but typestate knows that the"}, {"sha": "07411a3051d4aef02caa2ea1c7df9fe7b12550da", "filename": "src/librustsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Ffold.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -416,10 +416,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_while(cond, body) {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n           }\n-          expr_for(decl, expr, blk) {\n-            expr_for(fld.fold_local(decl), fld.fold_expr(expr),\n-                     fld.fold_block(blk))\n-          }\n           expr_do_while(blk, expr) {\n             expr_do_while(fld.fold_block(blk), fld.fold_expr(expr))\n           }"}, {"sha": "c2f1dd58096a5b51cd9bc86ce9d44e085ef7d181", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -1405,36 +1405,18 @@ fn parse_else_expr(p: parser) -> @ast::expr {\n \n fn parse_for_expr(p: parser) -> @ast::expr {\n     let lo = p.last_span;\n-    // FIXME remove this kludge after migration and snapshotting (#1619)\n-    let new_style = alt p.token {\n-      token::IDENT(_, false) { alt p.look_ahead(1u) {\n-        token::DOT | token::LPAREN { true }\n-        _ { false }\n-      } }\n-      token::IDENT(_, true) { true }\n-      _ { false }\n-    };\n-    if new_style {\n-        let call = parse_expr_res(p, RESTRICT_STMT_EXPR);\n-        alt call.node {\n-          ast::expr_call(f, args, true) {\n-            let b_arg = vec::last(args);\n-            let last = mk_expr(p, b_arg.span.lo, b_arg.span.hi,\n-                               ast::expr_loop_body(b_arg));\n-            @{node: ast::expr_call(f, vec::init(args) + [last], true)\n-              with *call}\n-          }\n-          _ {\n-            p.span_fatal(lo, \"`for` must be followed by a block call\");\n-          }\n-        }\n-    } else {\n-        p.warn(\"old-style for\");\n-        let decl = parse_local(p, false, false);\n-        expect_word(p, \"in\");\n-        let seq = parse_expr(p);\n-        let body = parse_block_no_value(p);\n-        mk_expr(p, lo.lo, body.span.hi, ast::expr_for(decl, seq, body))\n+    let call = parse_expr_res(p, RESTRICT_STMT_EXPR);\n+    alt call.node {\n+      ast::expr_call(f, args, true) {\n+        let b_arg = vec::last(args);\n+        let last = mk_expr(p, b_arg.span.lo, b_arg.span.hi,\n+                           ast::expr_loop_body(b_arg));\n+        @{node: ast::expr_call(f, vec::init(args) + [last], true)\n+          with *call}\n+      }\n+      _ {\n+        p.span_fatal(lo, \"`for` must be followed by a block call\");\n+      }\n     }\n }\n \n@@ -1755,8 +1737,7 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n       ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n       | ast::expr_alt(_, _, _) | ast::expr_block(_)\n       | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n-      | ast::expr_loop(_) | ast::expr_for(_, _, _)\n-      | ast::expr_call(_, _, true) {\n+      | ast::expr_loop(_) | ast::expr_call(_, _, true) {\n         false\n       }\n       _ { true }"}, {"sha": "3e5a123bd73afa82fd0a7d8b88019d3909de936b", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -935,12 +935,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n-      ast::expr_for(decl, expr, blk) {\n-        head(s, \"for\");\n-        print_for_decl(s, decl, expr);\n-        space(s.s);\n-        print_block(s, blk);\n-      }\n       ast::expr_do_while(blk, expr) {\n         head(s, \"do\");\n         space(s.s);"}, {"sha": "be08202ea4097a6e6cbc9b61c8eaca1f6fee5aae", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -359,11 +359,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       }\n       expr_while(x, b) { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n       expr_loop(b) { v.visit_block(b, e, v); }\n-      expr_for(dcl, x, b) {\n-        v.visit_local(dcl, e, v);\n-        v.visit_expr(x, e, v);\n-        v.visit_block(b, e, v);\n-      }\n       expr_do_while(b, x) { v.visit_block(b, e, v); v.visit_expr(x, e, v); }\n       expr_alt(x, arms, _) {\n         v.visit_expr(x, e, v);"}, {"sha": "2dc09a9a60a58f590df498ef082bda6b0ed99f9a", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -103,10 +103,6 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n         visit_expr(cx, f, sc, v);\n       }\n       ast::expr_alt(input, arms, _) { check_alt(*cx, input, arms, sc, v); }\n-      ast::expr_for(decl, seq, blk) {\n-        visit_expr(cx, seq, sc, v);\n-        check_loop(*cx, sc) {|| check_for(*cx, decl, seq, blk, sc, v); }\n-      }\n       ast::expr_path(pt) {\n         check_var(*cx, ex, pt, ex.id, false, sc);\n         handled = false;"}, {"sha": "5082aba13948566b05d472bc68bb0ad39569684a", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -11,7 +11,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n         },\n         visit_expr: {|e: @expr, cx: ctx, v: visit::vt<ctx>|\n             alt e.node {\n-              expr_for(_, e, b) | expr_while(e, b) | expr_do_while(b, e) {\n+              expr_while(e, b) | expr_do_while(b, e) {\n                 v.visit_expr(e, cx, v);\n                 v.visit_block(b, {in_loop: true with cx}, v);\n               }"}, {"sha": "14eba36fbe0f3f3517d54dc4483f1eb67885274c", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -106,10 +106,6 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n       expr_while(_, _) | expr_do_while(_, _) | expr_loop(_) {\n         visit_block(lp, cx) {|| visit::visit_expr(ex, cx, v);}\n       }\n-      expr_for(_, coll, blk) {\n-        v.visit_expr(coll, cx, v);\n-        visit_block(lp, cx) {|| visit::visit_block(blk, cx, v);}\n-      }\n       expr_alt(input, arms, _) {\n         v.visit_expr(input, cx, v);\n         let before = cx.current;"}, {"sha": "cd9eb5b394564c9fd57d4ceea0217779c6c0ad9c", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -408,7 +408,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n     e.sess.abort_if_errors();\n \n     fn walk_expr(e: @env, exp: @ast::expr, sc: scopes, v: vt<scopes>) {\n-        visit_expr_with_scope(exp, sc, v);\n+        visit::visit_expr(exp, sc, v);\n         alt exp.node {\n           ast::expr_path(p) {\n             maybe_insert(e, exp.id,\n@@ -613,18 +613,6 @@ fn visit_arm_with_scope(a: ast::arm, sc: scopes, v: vt<scopes>) {\n     v.visit_block(a.body, sc_inner, v);\n }\n \n-fn visit_expr_with_scope(x: @ast::expr, sc: scopes, v: vt<scopes>) {\n-    alt x.node {\n-      ast::expr_for(decl, coll, blk) {\n-        let new_sc = cons(scope_loop(decl), @sc);\n-        v.visit_expr(coll, sc, v);\n-        v.visit_local(decl, new_sc, v);\n-        v.visit_block(blk, new_sc, v);\n-      }\n-      _ { visit::visit_expr(x, sc, v); }\n-    }\n-}\n-\n // This is only for irrefutable patterns (e.g. ones that appear in a let)\n // So if x occurs, and x is already known to be a enum, that's always an error\n fn visit_local_with_scope(e: @env, loc: @local, sc:scopes, v:vt<scopes>) {"}, {"sha": "7c7627a7a12015295a17a72d205db55a66149704", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -1685,39 +1685,6 @@ fn trans_if(cx: block, cond: @ast::expr, thn: ast::blk,\n     ret join_returns(cx, [then_bcx, else_bcx], [then_dest, else_dest], dest);\n }\n \n-fn trans_for(cx: block, local: @ast::local, seq: @ast::expr,\n-             body: ast::blk) -> block {\n-    let _icx = cx.insn_ctxt(\"trans_for\");\n-    fn inner(bcx: block, local: @ast::local, curr: ValueRef, t: ty::t,\n-             body: ast::blk, outer_next_cx: block) -> block {\n-        let next_cx = sub_block(bcx, \"next\");\n-        let scope_cx = loop_scope_block(bcx, cont_other(next_cx),\n-                                        outer_next_cx, \"for loop scope\",\n-                                        body.span);\n-        Br(bcx, scope_cx.llbb);\n-        let curr = PointerCast(bcx, curr,\n-                               T_ptr(type_of(bcx.ccx(), t)));\n-        let bcx = alt::bind_irrefutable_pat(scope_cx, local.node.pat,\n-                                                  curr, false);\n-        let bcx = trans_block(bcx, body, ignore);\n-        cleanup_and_Br(bcx, scope_cx, next_cx.llbb);\n-        ret next_cx;\n-    }\n-    let ccx = cx.ccx();\n-    let next_cx = sub_block(cx, \"next\");\n-    let seq_ty = expr_ty(cx, seq);\n-    let {bcx: bcx, val: seq} = trans_temp_expr(cx, seq);\n-    let seq = PointerCast(bcx, seq, T_ptr(ccx.opaque_vec_type));\n-    let mut fill = tvec::get_fill(bcx, seq);\n-    if ty::type_is_str(seq_ty) {\n-        fill = Sub(bcx, fill, C_int(ccx, 1));\n-    }\n-    let bcx = tvec::iter_vec_raw(bcx, seq, seq_ty, fill,\n-                                 bind inner(_, local, _, _, body, next_cx));\n-    Br(bcx, next_cx.llbb);\n-    ret next_cx;\n-}\n-\n fn trans_while(cx: block, cond: @ast::expr, body: ast::blk)\n     -> block {\n     let _icx = cx.insn_ctxt(\"trans_while\");\n@@ -3148,10 +3115,6 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             trans_check_expr(bcx, a, \"Claim\")\n         };\n       }\n-      ast::expr_for(decl, seq, body) {\n-        assert dest == ignore;\n-        ret trans_for(bcx, decl, seq, body);\n-      }\n       ast::expr_while(cond, body) {\n         assert dest == ignore;\n         ret trans_while(bcx, cond, body);"}, {"sha": "9945d877bc14ce4c09901ab58b5fcc1de509cc74", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -190,7 +190,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n             }\n         }\n       }\n-      expr_for(_, _, _) | expr_do_while(_, _) | expr_alt(_, _, _) |\n+      expr_do_while(_, _) | expr_alt(_, _, _) |\n       expr_block(_) | expr_if(_, _, _) | expr_while(_, _) |\n       expr_fail(_) | expr_break | expr_cont | expr_unary(_, _) |\n       expr_lit(_) | expr_assert(_) | expr_check(_, _) |"}, {"sha": "4f77285569622ab163d5f3531b9c693579a69e5f", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -453,9 +453,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         set_pre_and_post(fcx.ccx, e.id, block_precond(fcx.ccx, body),\n                          loop_postcond);\n       }\n-      expr_for(d, index, body) {\n-        find_pre_post_loop(fcx, d, index, body, e.id);\n-      }\n       expr_index(val, sub) { find_pre_post_exprs(fcx, [val, sub], e.id); }\n       expr_alt(ex, alts, _) {\n         find_pre_post_expr(fcx, ex);"}, {"sha": "da6b29c3d438ee8290d8ac1ff238f718e27749dd", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -561,9 +561,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                             false_postcond(num_constrs));\n         }\n       }\n-      expr_for(d, index, body) {\n-        ret find_pre_post_state_loop(fcx, pres, d, index, body, e.id);\n-      }\n       expr_index(val, sub) {\n         ret find_pre_post_state_two(fcx, pres, val, sub, e.id, oper_pure);\n       }"}, {"sha": "0a0c59dbef08307ee4ec90e9615890b8ed53dbff", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -2955,21 +2955,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             check_expr_with(fcx, cond, ty::mk_bool(tcx)) |\n                 check_then_else(fcx, thn, elsopt, id, expr.span);\n       }\n-      ast::expr_for(decl, seq, body) {\n-        bot = check_expr(fcx, seq);\n-        let mut elt_ty;\n-        let ety = fcx.expr_ty(seq);\n-        alt structure_of(fcx, expr.span, ety) {\n-          ty::ty_vec(vec_elt_ty) { elt_ty = vec_elt_ty.ty; }\n-          ty::ty_str { elt_ty = ty::mk_mach_uint(tcx, ast::ty_u8); }\n-          _ {\n-            tcx.sess.span_fatal(expr.span,\n-                                \"mismatched types: expected vector or string \"\n-                                + \"but found `\" + ty_to_str(tcx, ety) + \"`\");\n-          }\n-        }\n-        bot |= check_for(fcx, decl, elt_ty, body, id);\n-      }\n       ast::expr_while(cond, body) {\n         bot = check_expr_with(fcx, cond, ty::mk_bool(tcx));\n         check_block_no_value(fcx, body);"}, {"sha": "73f8eb90963d9f12a829c2eaa46269fe06ad9294", "filename": "src/test/compile-fail/unsafe-for.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c902eafa14803ca9fcb0b59ce852bdabca826c6f/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c902eafa14803ca9fcb0b59ce852bdabca826c6f/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs?ref=c902eafa14803ca9fcb0b59ce852bdabca826c6f", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern:invalidate reference x\n-\n-fn main() {\n-    let v: [mut {mut x: int}] = [mut {mut x: 1}];\n-    for v.each {|x| v[0] = {mut x: 2}; log(debug, x); }\n-}"}, {"sha": "464203ed6cfe4defc33a49f70caaed0254ca1d01", "filename": "src/test/compile-fail/vec-concat-bug.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc202ca034e0d657b41b98ad0b28d43fd32f3982/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs?ref=fc202ca034e0d657b41b98ad0b28d43fd32f3982", "patch": "@@ -1,3 +1,5 @@\n+// xfail-test\n+\n fn concat<T: copy>(v: [const [const T]]) -> [T] {\n     let mut r = [];\n "}]}