{"sha": "c615bed38784b6f38a30865f48898af821894fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MTViZWQzODc4NGI2ZjM4YTMwODY1ZjQ4ODk4YWY4MjE4OTRmYWU=", "commit": {"author": {"name": "Jakub Kulik", "email": "kulikjak@gmail.com", "date": "2021-02-16T14:02:04Z"}, "committer": {"name": "Jakub Kulik", "email": "kulikjak@gmail.com", "date": "2021-03-01T14:05:31Z"}, "message": "Change default Solaris x86 target to x86_64-pc-solaris", "tree": {"sha": "ae77a8ea10ac84410e3a996d2f2b56cbc7c984ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae77a8ea10ac84410e3a996d2f2b56cbc7c984ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c615bed38784b6f38a30865f48898af821894fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c615bed38784b6f38a30865f48898af821894fae", "html_url": "https://github.com/rust-lang/rust/commit/c615bed38784b6f38a30865f48898af821894fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c615bed38784b6f38a30865f48898af821894fae/comments", "author": {"login": "kulikjak", "id": 18516837, "node_id": "MDQ6VXNlcjE4NTE2ODM3", "avatar_url": "https://avatars.githubusercontent.com/u/18516837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kulikjak", "html_url": "https://github.com/kulikjak", "followers_url": "https://api.github.com/users/kulikjak/followers", "following_url": "https://api.github.com/users/kulikjak/following{/other_user}", "gists_url": "https://api.github.com/users/kulikjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/kulikjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kulikjak/subscriptions", "organizations_url": "https://api.github.com/users/kulikjak/orgs", "repos_url": "https://api.github.com/users/kulikjak/repos", "events_url": "https://api.github.com/users/kulikjak/events{/privacy}", "received_events_url": "https://api.github.com/users/kulikjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kulikjak", "id": 18516837, "node_id": "MDQ6VXNlcjE4NTE2ODM3", "avatar_url": "https://avatars.githubusercontent.com/u/18516837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kulikjak", "html_url": "https://github.com/kulikjak", "followers_url": "https://api.github.com/users/kulikjak/followers", "following_url": "https://api.github.com/users/kulikjak/following{/other_user}", "gists_url": "https://api.github.com/users/kulikjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/kulikjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kulikjak/subscriptions", "organizations_url": "https://api.github.com/users/kulikjak/orgs", "repos_url": "https://api.github.com/users/kulikjak/repos", "events_url": "https://api.github.com/users/kulikjak/events{/privacy}", "received_events_url": "https://api.github.com/users/kulikjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2731d8e9338d8fe844e19d3fbb39617753e65f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2731d8e9338d8fe844e19d3fbb39617753e65f4", "html_url": "https://github.com/rust-lang/rust/commit/d2731d8e9338d8fe844e19d3fbb39617753e65f4"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "a3900ebcea99c687398df144d1bd0e4145cb5901", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -1536,7 +1536,7 @@ fn parse_target_triple(matches: &getopts::Matches, error_format: ErrorOutputType\n                 early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n             })\n         }\n-        Some(target) => TargetTriple::from_alias(target),\n+        Some(target) => TargetTriple::TargetTriple(target),\n         _ => TargetTriple::from_triple(host_triple()),\n     }\n }"}, {"sha": "039e9a8b2745f9ae7685dbc54a637dbb19383521", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -736,9 +736,8 @@ supported_targets! {\n     (\"armv7r-none-eabi\", armv7r_none_eabi),\n     (\"armv7r-none-eabihf\", armv7r_none_eabihf),\n \n-    // `x86_64-pc-solaris` is an alias for `x86_64_sun_solaris` for backwards compatibility reasons.\n-    // (See <https://github.com/rust-lang/rust/issues/40531>.)\n-    (\"x86_64-sun-solaris\", \"x86_64-pc-solaris\", x86_64_sun_solaris),\n+    (\"x86_64-pc-solaris\", x86_64_pc_solaris),\n+    (\"x86_64-sun-solaris\", x86_64_sun_solaris),\n     (\"sparcv9-sun-solaris\", sparcv9_sun_solaris),\n \n     (\"x86_64-unknown-illumos\", x86_64_unknown_illumos),\n@@ -1986,24 +1985,6 @@ impl TargetTriple {\n         Ok(TargetTriple::TargetPath(canonicalized_path))\n     }\n \n-    /// Creates a target triple from its alias\n-    pub fn from_alias(triple: String) -> Self {\n-        macro_rules! target_aliases {\n-            ( $(($alias:literal, $target:literal ),)+ ) => {\n-                match triple.as_str() {\n-                    $( $alias => TargetTriple::from_triple($target), )+\n-                    _ => TargetTriple::TargetTriple(triple),\n-                }\n-            }\n-        }\n-\n-        target_aliases! {\n-            // `x86_64-pc-solaris` is an alias for `x86_64_sun_solaris` for backwards compatibility reasons.\n-            // (See <https://github.com/rust-lang/rust/issues/40531>.)\n-            (\"x86_64-pc-solaris\", \"x86_64-sun-solaris\"),\n-        }\n-    }\n-\n     /// Returns a string triple for this target.\n     ///\n     /// If this target is a path, the file name (without extension) is returned."}, {"sha": "59731f25821ffb2e28daba18e0554f492ab973a4", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -3,7 +3,6 @@ use crate::spec::TargetOptions;\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"solaris\".to_string(),\n-        vendor: \"sun\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,"}, {"sha": "abc46a8c9c3ac322209a1a43284fa1c18679ce30", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n+    base.vendor = \"sun\".to_string();\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "75eece74ff97d8b4b4f6f760b17a5ab789892cde", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+\n+pub fn target() -> Target {\n+    let mut base = super::solaris_base::opts();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.cpu = \"x86-64\".to_string();\n+    base.vendor = \"pc\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+\n+    Target {\n+        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n+        arch: \"x86_64\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "63e524fa8a9a2cf6a75e90085d84599cc4bc952a", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -4,6 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n+    base.vendor = \"sun\".to_string();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n "}, {"sha": "62bf4ffd380a0fd8bc61c01c6a52a1725a5cddc1", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c615bed38784b6f38a30865f48898af821894fae/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c615bed38784b6f38a30865f48898af821894fae/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c615bed38784b6f38a30865f48898af821894fae", "patch": "@@ -240,13 +240,16 @@ def default_build_triple(verbose):\n         else:\n             ostype = 'unknown-linux-gnu'\n     elif ostype == 'SunOS':\n-        ostype = 'sun-solaris'\n+        ostype = 'pc-solaris'\n         # On Solaris, uname -m will return a machine classification instead\n         # of a cpu type, so uname -p is recommended instead.  However, the\n         # output from that option is too generic for our purposes (it will\n         # always emit 'i386' on x86/amd64 systems).  As such, isainfo -k\n         # must be used instead.\n         cputype = require(['isainfo', '-k']).decode(default_encoding)\n+        # sparc cpus have sun as a target vendor\n+        if 'sparc' in cputype:\n+            ostype = 'sun-solaris'\n     elif ostype.startswith('MINGW'):\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:"}]}