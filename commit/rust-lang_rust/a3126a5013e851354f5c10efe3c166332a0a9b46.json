{"sha": "a3126a5013e851354f5c10efe3c166332a0a9b46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMTI2YTUwMTNlODUxMzU0ZjVjMTBlZmUzYzE2NjMzMmEwYTliNDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-03T22:53:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-16T15:20:57Z"}, "message": "resolve: Introduce a new scope for derive helpers", "tree": {"sha": "ee693cc8d2a6ff07919166ebdeb6c4307167f57a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee693cc8d2a6ff07919166ebdeb6c4307167f57a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3126a5013e851354f5c10efe3c166332a0a9b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3126a5013e851354f5c10efe3c166332a0a9b46", "html_url": "https://github.com/rust-lang/rust/commit/a3126a5013e851354f5c10efe3c166332a0a9b46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3126a5013e851354f5c10efe3c166332a0a9b46/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c064630e77a9e14040176aa8e8eea67f7adcc643", "url": "https://api.github.com/repos/rust-lang/rust/commits/c064630e77a9e14040176aa8e8eea67f7adcc643", "html_url": "https://github.com/rust-lang/rust/commit/c064630e77a9e14040176aa8e8eea67f7adcc643"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "f2858a62156421e3e69ec565307975debcfec21f", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=a3126a5013e851354f5c10efe3c166332a0a9b46", "patch": "@@ -368,6 +368,15 @@ impl<'a> Resolver<'a> {\n         let mut suggestions = Vec::new();\n         self.visit_scopes(scope_set, parent_scope, ident, |this, scope, use_prelude, _| {\n             match scope {\n+                Scope::DeriveHelpers(expn_id) => {\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n+                    if filter_fn(res) {\n+                        suggestions.extend(this.helper_attrs.get(&expn_id)\n+                                               .into_iter().flatten().map(|ident| {\n+                            TypoSuggestion::from_res(ident.name, res)\n+                        }));\n+                    }\n+                }\n                 Scope::DeriveHelpersCompat => {\n                     let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n                     if filter_fn(res) {"}, {"sha": "0f410c623bafab3e9f6a3287df077b734e720b70", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a3126a5013e851354f5c10efe3c166332a0a9b46", "patch": "@@ -45,7 +45,7 @@ use syntax::symbol::{kw, sym};\n use syntax::source_map::Spanned;\n use syntax::visit::{self, Visitor};\n use syntax_expand::base::SyntaxExtension;\n-use syntax_pos::hygiene::{MacroKind, ExpnId, Transparency, SyntaxContext};\n+use syntax_pos::hygiene::{MacroKind, ExpnId, ExpnKind, Transparency, SyntaxContext};\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Applicability, DiagnosticBuilder};\n \n@@ -97,6 +97,7 @@ impl Determinacy {\n /// but not for late resolution yet.\n #[derive(Clone, Copy)]\n enum Scope<'a> {\n+    DeriveHelpers(ExpnId),\n     DeriveHelpersCompat,\n     MacroRules(LegacyScope<'a>),\n     CrateRoot,\n@@ -942,6 +943,8 @@ pub struct Resolver<'a> {\n     /// Legacy scopes *produced* by expanding the macro invocations,\n     /// include all the `macro_rules` items and other invocations generated by them.\n     output_legacy_scopes: FxHashMap<ExpnId, LegacyScope<'a>>,\n+    /// Helper attributes that are in scope for the given expansion.\n+    helper_attrs: FxHashMap<ExpnId, Vec<Ident>>,\n \n     /// Avoid duplicated errors for \"name already defined\".\n     name_already_seen: FxHashMap<Name, Span>,\n@@ -1219,6 +1222,7 @@ impl<'a> Resolver<'a> {\n             non_macro_attrs: [non_macro_attr(false), non_macro_attr(true)],\n             invocation_parent_scopes,\n             output_legacy_scopes: Default::default(),\n+            helper_attrs: Default::default(),\n             macro_defs,\n             local_macro_def_scopes: FxHashMap::default(),\n             name_already_seen: FxHashMap::default(),\n@@ -1467,23 +1471,26 @@ impl<'a> Resolver<'a> {\n         //    in prelude, not sure where exactly (creates ambiguities with any other prelude names).\n \n         let rust_2015 = ident.span.rust_2015();\n-        let (ns, is_absolute_path) = match scope_set {\n-            ScopeSet::All(ns, _) => (ns, false),\n-            ScopeSet::AbsolutePath(ns) => (ns, true),\n-            ScopeSet::Macro(_) => (MacroNS, false),\n+        let (ns, macro_kind, is_absolute_path) = match scope_set {\n+            ScopeSet::All(ns, _) => (ns, None, false),\n+            ScopeSet::AbsolutePath(ns) => (ns, None, true),\n+            ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),\n         };\n         // Jump out of trait or enum modules, they do not act as scopes.\n         let module = parent_scope.module.nearest_item_scope();\n         let mut scope = match ns {\n             _ if is_absolute_path => Scope::CrateRoot,\n             TypeNS | ValueNS => Scope::Module(module),\n-            MacroNS => Scope::DeriveHelpersCompat,\n+            MacroNS => Scope::DeriveHelpers(parent_scope.expansion),\n         };\n         let mut ident = ident.modern();\n         let mut use_prelude = !module.no_implicit_prelude;\n \n         loop {\n             let visit = match scope {\n+                // Derive helpers are not in scope when resolving derives in the same container.\n+                Scope::DeriveHelpers(expn_id) =>\n+                    !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive)),\n                 Scope::DeriveHelpersCompat => true,\n                 Scope::MacroRules(..) => true,\n                 Scope::CrateRoot => true,\n@@ -1505,6 +1512,17 @@ impl<'a> Resolver<'a> {\n             }\n \n             scope = match scope {\n+                Scope::DeriveHelpers(expn_id) if expn_id != ExpnId::root() => {\n+                    // Derive helpers are not visible to code generated by bang or derive macros.\n+                    let expn_data = expn_id.expn_data();\n+                    match expn_data.kind {\n+                        ExpnKind::Root |\n+                        ExpnKind::Macro(MacroKind::Bang, _) |\n+                        ExpnKind::Macro(MacroKind::Derive, _) => Scope::DeriveHelpersCompat,\n+                        _ => Scope::DeriveHelpers(expn_data.parent),\n+                    }\n+                }\n+                Scope::DeriveHelpers(..) => Scope::DeriveHelpersCompat,\n                 Scope::DeriveHelpersCompat =>\n                     Scope::MacroRules(parent_scope.legacy),\n                 Scope::MacroRules(legacy_scope) => match legacy_scope {"}, {"sha": "c1d0abece4233f84dab7d1b0943b0cf3a95bef16", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a3126a5013e851354f5c10efe3c166332a0a9b46", "patch": "@@ -237,15 +237,23 @@ impl<'a> base::Resolver for Resolver<'a> {\n                 // - Derives in the container need to know whether one of them is a built-in `Copy`.\n                 // FIXME: Try to avoid repeated resolutions for derives here and in expansion.\n                 let mut exts = Vec::new();\n+                let mut helper_attrs = Vec::new();\n                 for path in derives {\n                     exts.push(match self.resolve_macro_path(\n                         path, Some(MacroKind::Derive), &parent_scope, true, force\n                     ) {\n-                        Ok((Some(ext), _)) => ext,\n+                        Ok((Some(ext), _)) => {\n+                            let span = path.segments.last().unwrap().ident.span.modern();\n+                            helper_attrs.extend(\n+                                ext.helper_attrs.iter().map(|name| Ident::new(*name, span))\n+                            );\n+                            ext\n+                        }\n                         Ok(_) | Err(Determinacy::Determined) => self.dummy_ext(MacroKind::Derive),\n                         Err(Determinacy::Undetermined) => return Err(Indeterminate),\n                     })\n                 }\n+                self.helper_attrs.insert(invoc_id, helper_attrs);\n                 return Ok(InvocationRes::DeriveContainer(exts));\n             }\n         };\n@@ -498,6 +506,18 @@ impl<'a> Resolver<'a> {\n                 Flags::empty(),\n             ));\n             let result = match scope {\n+                Scope::DeriveHelpers(expn_id) => {\n+                    if let Some(attr) = this.helper_attrs.get(&expn_id).and_then(|attrs| {\n+                        attrs.iter().rfind(|i| ident == **i)\n+                    }) {\n+                        let binding = (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n+                                       ty::Visibility::Public, attr.span, expn_id)\n+                                       .to_name_binding(this.arenas);\n+                        Ok((binding, Flags::empty()))\n+                    } else {\n+                        Err(Determinacy::Determined)\n+                    }\n+                }\n                 Scope::DeriveHelpersCompat => {\n                     let mut result = Err(Determinacy::Determined);\n                     for derive in parent_scope.derives {"}, {"sha": "a8f4eea4cb70b9b6c907e9f4971c0ec68fc00125", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=a3126a5013e851354f5c10efe3c166332a0a9b46", "patch": "@@ -1,3 +1,4 @@\n+// edition:2018\n // aux-build:test-macros.rs\n \n #[macro_use]\n@@ -11,8 +12,7 @@ struct S {\n     // FIXME No ambiguity, attributes in non-macro positions are not resolved properly\n     #[empty_helper]\n     field: [u8; {\n-        // FIXME No ambiguity, derive helpers are not put into scope for non-attributes\n-        use empty_helper;\n+        use empty_helper; //~ ERROR `empty_helper` is ambiguous\n \n         // FIXME No ambiguity, derive helpers are not put into scope for inner items\n         #[empty_helper]"}, {"sha": "ca9d6125e4bfaebbe5616e75a14a4e90b8ecc602", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3126a5013e851354f5c10efe3c166332a0a9b46/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=a3126a5013e851354f5c10efe3c166332a0a9b46", "patch": "@@ -1,21 +1,39 @@\n+error[E0659]: `empty_helper` is ambiguous (name vs any other name during import resolution)\n+  --> $DIR/derive-helper-shadowing.rs:15:13\n+   |\n+LL |         use empty_helper;\n+   |             ^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `empty_helper` could refer to the derive helper attribute defined here\n+  --> $DIR/derive-helper-shadowing.rs:10:10\n+   |\n+LL | #[derive(Empty)]\n+   |          ^^^^^\n+note: `empty_helper` could also refer to the attribute macro imported here\n+  --> $DIR/derive-helper-shadowing.rs:7:5\n+   |\n+LL | use test_macros::empty_attr as empty_helper;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n+\n error[E0659]: `empty_helper` is ambiguous (derive helper attribute vs any other name)\n-  --> $DIR/derive-helper-shadowing.rs:8:3\n+  --> $DIR/derive-helper-shadowing.rs:9:3\n    |\n LL | #[empty_helper]\n    |   ^^^^^^^^^^^^ ambiguous name\n    |\n note: `empty_helper` could refer to the derive helper attribute defined here\n-  --> $DIR/derive-helper-shadowing.rs:9:10\n+  --> $DIR/derive-helper-shadowing.rs:10:10\n    |\n LL | #[derive(Empty)]\n    |          ^^^^^\n note: `empty_helper` could also refer to the attribute macro imported here\n-  --> $DIR/derive-helper-shadowing.rs:6:5\n+  --> $DIR/derive-helper-shadowing.rs:7:5\n    |\n LL | use test_macros::empty_attr as empty_helper;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `crate::empty_helper` to refer to this attribute macro unambiguously\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}]}