{"sha": "8864668d536071dee35a472b459586d733105444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NjQ2NjhkNTM2MDcxZGVlMzVhNDcyYjQ1OTU4NmQ3MzMxMDU0NDQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-12T21:33:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:29Z"}, "message": "rustc: re-complicate the TyLayout API and use better names.", "tree": {"sha": "d27e641f68bddec70e0f5f1b3f21bc5af966031b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27e641f68bddec70e0f5f1b3f21bc5af966031b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8864668d536071dee35a472b459586d733105444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8864668d536071dee35a472b459586d733105444", "html_url": "https://github.com/rust-lang/rust/commit/8864668d536071dee35a472b459586d733105444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8864668d536071dee35a472b459586d733105444/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa811d728a2957c9a7a79c03a6e6e73b9372997e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa811d728a2957c9a7a79c03a6e6e73b9372997e", "html_url": "https://github.com/rust-lang/rust/commit/aa811d728a2957c9a7a79c03a6e6e73b9372997e"}], "stats": {"total": 229, "additions": 109, "deletions": 120}, "files": [{"sha": "3150014564881d1a96e751b66d03c36a6b7fc643", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 52, "deletions": 59, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -227,12 +227,6 @@ impl<'a> HasDataLayout for &'a TargetDataLayout {\n     }\n }\n \n-impl<'a, 'tcx> HasDataLayout for TyCtxt<'a, 'tcx, 'tcx> {\n-    fn data_layout(&self) -> &TargetDataLayout {\n-        &self.data_layout\n-    }\n-}\n-\n /// Endianness of the target, which must match cfg(target-endian).\n #[derive(Copy, Clone)]\n pub enum Endian {\n@@ -2089,80 +2083,85 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n     }\n }\n \n-/// A pair of a type and its layout. Implements various\n-/// type traversal APIs (e.g. recursing into fields).\n+/// The details of the layout of a type, alongside the type itself.\n+/// Provides various type traversal APIs (e.g. recursing into fields).\n+///\n+/// Note that the details are NOT guaranteed to always be identical\n+/// to those obtained from `layout_of(ty)`, as we need to produce\n+/// layouts for which Rust types do not exist, such as enum variants\n+/// or synthetic fields of enums (i.e. discriminants) and fat pointers.\n #[derive(Copy, Clone, Debug)]\n-pub struct TyLayout<'tcx> {\n+pub struct FullLayout<'tcx> {\n     pub ty: Ty<'tcx>,\n-    pub layout: &'tcx Layout,\n     pub variant_index: Option<usize>,\n+    pub layout: &'tcx Layout,\n }\n \n-impl<'tcx> Deref for TyLayout<'tcx> {\n+impl<'tcx> Deref for FullLayout<'tcx> {\n     type Target = Layout;\n     fn deref(&self) -> &Layout {\n         self.layout\n     }\n }\n \n-pub trait LayoutTyper<'tcx>: HasDataLayout {\n-    type TyLayout;\n-\n+pub trait HasTyCtxt<'tcx>: HasDataLayout {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx>;\n-    fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout;\n-    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx>;\n }\n \n-/// Combines a tcx with the parameter environment so that you can\n-/// compute layout operations.\n-#[derive(Copy, Clone)]\n-pub struct LayoutCx<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+impl<'a, 'gcx, 'tcx> HasDataLayout for TyCtxt<'a, 'gcx, 'tcx> {\n+    fn data_layout(&self) -> &TargetDataLayout {\n+        &self.data_layout\n+    }\n }\n \n-impl<'a, 'tcx> LayoutCx<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, param_env: ty::ParamEnv<'tcx>) -> Self {\n-        LayoutCx { tcx, param_env }\n+impl<'a, 'gcx, 'tcx> HasTyCtxt<'gcx> for TyCtxt<'a, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'gcx> {\n+        self.global_tcx()\n     }\n }\n \n-impl<'a, 'tcx> HasDataLayout for LayoutCx<'a, 'tcx> {\n+impl<'a, 'gcx, 'tcx, T: Copy> HasDataLayout for (TyCtxt<'a, 'gcx, 'tcx>, T) {\n     fn data_layout(&self) -> &TargetDataLayout {\n-        &self.tcx.data_layout\n+        self.0.data_layout()\n     }\n }\n \n-impl<'a, 'tcx> LayoutTyper<'tcx> for LayoutCx<'a, 'tcx> {\n-    type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n-\n-    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n-        self.tcx\n+impl<'a, 'gcx, 'tcx, T: Copy> HasTyCtxt<'gcx> for (TyCtxt<'a, 'gcx, 'tcx>, T) {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'gcx> {\n+        self.0.tcx()\n     }\n+}\n+\n+pub trait LayoutOf<T> {\n+    type FullLayout;\n+\n+    fn layout_of(self, ty: T) -> Self::FullLayout;\n+}\n+\n+impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for (TyCtxt<'a, 'tcx, 'tcx>, ty::ParamEnv<'tcx>) {\n+    type FullLayout = Result<FullLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        let ty = self.normalize_projections(ty);\n+    fn layout_of(self, ty: Ty<'tcx>) -> Self::FullLayout {\n+        let (tcx, param_env) = self;\n \n-        Ok(TyLayout {\n+        let ty = tcx.normalize_associated_type_in_env(&ty, param_env);\n+\n+        Ok(FullLayout {\n             ty,\n-            layout: ty.layout(self.tcx, self.param_env)?,\n-            variant_index: None\n+            variant_index: None,\n+            layout: ty.layout(tcx, param_env)?,\n         })\n     }\n-\n-    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx.normalize_associated_type_in_env(&ty, self.param_env)\n-    }\n }\n \n-impl<'a, 'tcx> TyLayout<'tcx> {\n+impl<'a, 'tcx> FullLayout<'tcx> {\n     pub fn for_variant(&self, variant_index: usize) -> Self {\n         let is_enum = match self.ty.sty {\n             ty::TyAdt(def, _) => def.is_enum(),\n             _ => false\n         };\n         assert!(is_enum);\n-        TyLayout {\n+        FullLayout {\n             variant_index: Some(variant_index),\n             ..*self\n         }\n@@ -2199,7 +2198,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n \n         match *self.layout {\n             Scalar { .. } => {\n-                bug!(\"TyLayout::field_count({:?}): not applicable\", self)\n+                bug!(\"FullLayout::field_count({:?}): not applicable\", self)\n             }\n \n             // Handled above (the TyAdt case).\n@@ -2222,9 +2221,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n         }\n     }\n \n-    fn field_type_unnormalized<C: LayoutTyper<'tcx>>(&self, cx: C, i: usize) -> Ty<'tcx> {\n-        let tcx = cx.tcx();\n-\n+    fn field_type_unnormalized(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, i: usize) -> Ty<'tcx> {\n         let ptr_field_type = |pointee: Ty<'tcx>| {\n             assert!(i < 2);\n             let slice = |element: Ty<'tcx>| {\n@@ -2238,7 +2235,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                 ty::TySlice(element) => slice(element),\n                 ty::TyStr => slice(tcx.types.u8),\n                 ty::TyDynamic(..) => tcx.mk_mut_ptr(tcx.mk_nil()),\n-                _ => bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n+                _ => bug!(\"FullLayout::field_type({:?}): not applicable\", self)\n             }\n         };\n \n@@ -2253,7 +2250,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             ty::TyFnDef(..) |\n             ty::TyDynamic(..) |\n             ty::TyForeign(..) => {\n-                bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n+                bug!(\"FullLayout::field_type({:?}): not applicable\", self)\n             }\n \n             // Potentially-fat pointers.\n@@ -2311,20 +2308,16 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n \n             ty::TyProjection(_) | ty::TyAnon(..) | ty::TyParam(_) |\n             ty::TyInfer(_) | ty::TyError => {\n-                bug!(\"TyLayout::field_type: unexpected type `{}`\", self.ty)\n+                bug!(\"FullLayout::field_type: unexpected type `{}`\", self.ty)\n             }\n         }\n     }\n \n-    pub fn field_type<C: LayoutTyper<'tcx>>(&self, cx: C, i: usize) -> Ty<'tcx> {\n-        cx.normalize_projections(self.field_type_unnormalized(cx, i))\n-    }\n-\n-    pub fn field<C: LayoutTyper<'tcx>>(&self,\n-                                       cx: C,\n-                                       i: usize)\n-                                       -> C::TyLayout {\n-        cx.layout_of(self.field_type(cx, i))\n+    pub fn field<C: LayoutOf<Ty<'tcx>> + HasTyCtxt<'tcx>>(&self,\n+                                                          cx: C,\n+                                                          i: usize)\n+                                                          -> C::FullLayout {\n+        cx.layout_of(self.field_type_unnormalized(cx.tcx(), i))\n     }\n }\n "}, {"sha": "211c88b4b2294a324a4122f97934d734f9be7332", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -35,8 +35,8 @@ use type_::Type;\n \n use rustc::hir;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, Align, Layout, Size, TyLayout};\n-use rustc::ty::layout::{HasDataLayout, LayoutTyper};\n+use rustc::ty::layout::{self, Align, Layout, Size, FullLayout};\n+use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc_back::PanicStrategy;\n \n use libc::c_uint;\n@@ -274,7 +274,7 @@ pub trait LayoutExt<'tcx> {\n     fn homogeneous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg>;\n }\n \n-impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n+impl<'tcx> LayoutExt<'tcx> for FullLayout<'tcx> {\n     fn is_aggregate(&self) -> bool {\n         match *self.layout {\n             Layout::Scalar { .. } |\n@@ -471,7 +471,7 @@ impl CastTarget {\n #[derive(Clone, Copy, Debug)]\n pub struct ArgType<'tcx> {\n     kind: ArgKind,\n-    pub layout: TyLayout<'tcx>,\n+    pub layout: FullLayout<'tcx>,\n     /// Cast target, either a single uniform or a pair of registers.\n     pub cast: Option<CastTarget>,\n     /// Dummy argument, which is emitted before the real argument.\n@@ -481,7 +481,7 @@ pub struct ArgType<'tcx> {\n }\n \n impl<'a, 'tcx> ArgType<'tcx> {\n-    fn new(layout: TyLayout<'tcx>) -> ArgType<'tcx> {\n+    fn new(layout: FullLayout<'tcx>) -> ArgType<'tcx> {\n         ArgType {\n             kind: ArgKind::Direct,\n             layout,"}, {"sha": "62888556f1498966c2ce25340db4cfa970bc86c1", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -42,7 +42,7 @@\n //!   taken to it, implementing them for Rust seems difficult.\n \n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, Align, HasDataLayout, LayoutTyper, Size, TyLayout};\n+use rustc::ty::layout::{self, Align, HasDataLayout, LayoutOf, Size, FullLayout};\n \n use context::CrateContext;\n use type_::Type;\n@@ -207,7 +207,7 @@ pub fn memory_index_to_gep(index: u64) -> u64 {\n }\n \n pub fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n-                                 layout: TyLayout<'tcx>,\n+                                 layout: FullLayout<'tcx>,\n                                  variant: &layout::Struct) -> Vec<Type> {\n     let field_count = layout.field_count();\n     debug!(\"struct_llfields: variant: {:?}\", variant);"}, {"sha": "225919c6a3afd2945af2d8a19b1911a3c7d3fd0a", "filename": "src/librustc_trans/cabi_s390x.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcabi_s390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcabi_s390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_s390x.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -14,7 +14,7 @@\n use abi::{FnType, ArgType, LayoutExt, Reg};\n use context::CrateContext;\n \n-use rustc::ty::layout::{self, Layout, TyLayout};\n+use rustc::ty::layout::{self, Layout, FullLayout};\n \n fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n     if !ret.layout.is_aggregate() && ret.layout.size(ccx).bits() <= 64 {\n@@ -25,7 +25,7 @@ fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tc\n }\n \n fn is_single_fp_element<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                  layout: TyLayout<'tcx>) -> bool {\n+                                  layout: FullLayout<'tcx>) -> bool {\n     match *layout {\n         Layout::Scalar { value: layout::F32, .. } |\n         Layout::Scalar { value: layout::F64, .. } => true,"}, {"sha": "0f9f9b87b5cf82c66c2f64e7338cd93ce1b625d3", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -11,7 +11,7 @@\n use abi::{ArgAttribute, FnType, LayoutExt, Reg, RegKind};\n use common::CrateContext;\n \n-use rustc::ty::layout::{self, Layout, TyLayout};\n+use rustc::ty::layout::{self, Layout, FullLayout};\n \n #[derive(PartialEq)]\n pub enum Flavor {\n@@ -20,7 +20,7 @@ pub enum Flavor {\n }\n \n fn is_single_fp_element<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                  layout: TyLayout<'tcx>) -> bool {\n+                                  layout: FullLayout<'tcx>) -> bool {\n     match *layout {\n         Layout::Scalar { value: layout::F32, .. } |\n         Layout::Scalar { value: layout::F64, .. } => true,"}, {"sha": "34c795316ba14740017374fdf7fe080fdcdbc9e0", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -14,7 +14,7 @@\n use abi::{ArgType, ArgAttribute, CastTarget, FnType, LayoutExt, Reg, RegKind};\n use context::CrateContext;\n \n-use rustc::ty::layout::{self, Layout, TyLayout, Size};\n+use rustc::ty::layout::{self, Layout, FullLayout, Size};\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n enum Class {\n@@ -53,7 +53,7 @@ fn classify_arg<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &ArgType<'tcx>)\n     }\n \n     fn classify<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                          layout: TyLayout<'tcx>,\n+                          layout: FullLayout<'tcx>,\n                           cls: &mut [Class],\n                           off: Size)\n                           -> Result<(), Memory> {"}, {"sha": "e259e19ac93a25e1857a6361aa6bc7975ee6a9a4", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -27,7 +27,7 @@ use type_::Type;\n use value::Value;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::layout::{HasDataLayout, Layout, LayoutTyper};\n+use rustc::ty::layout::{HasDataLayout, Layout, LayoutOf};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::hir;\n \n@@ -81,8 +81,8 @@ pub fn type_is_imm_pair<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)\n             }\n \n             // The two fields must be both immediates.\n-            type_is_immediate(ccx, layout.field_type(ccx, 0)) &&\n-            type_is_immediate(ccx, layout.field_type(ccx, 1))\n+            type_is_immediate(ccx, layout.field(ccx, 0).ty) &&\n+            type_is_immediate(ccx, layout.field(ccx, 1).ty)\n         }\n         _ => false\n     }"}, {"sha": "647cc54effe9d254ad83fbcfd7e94f13f54e8105", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -29,7 +29,7 @@ use rustc::middle::trans::Stats;\n use rustc_data_structures::stable_hasher::StableHashingContextProvider;\n use rustc::session::config::{self, NoDebugInfo};\n use rustc::session::Session;\n-use rustc::ty::layout::{LayoutCx, LayoutError, LayoutTyper, TyLayout};\n+use rustc::ty::layout::{LayoutError, LayoutOf, FullLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_trans_utils;\n@@ -648,48 +648,44 @@ impl<'a, 'tcx> ty::layout::HasDataLayout for &'a SharedCrateContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> ty::layout::HasTyCtxt<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+}\n+\n impl<'a, 'tcx> ty::layout::HasDataLayout for &'a CrateContext<'a, 'tcx> {\n     fn data_layout(&self) -> &ty::layout::TargetDataLayout {\n         &self.shared.tcx.data_layout\n     }\n }\n \n-impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n-    type TyLayout = TyLayout<'tcx>;\n-\n+impl<'a, 'tcx> ty::layout::HasTyCtxt<'tcx> for &'a CrateContext<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n-        self.tcx\n+        self.shared.tcx\n     }\n+}\n \n-    fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n-        LayoutCx::new(self.tcx, param_env)\n+impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for &'a SharedCrateContext<'a, 'tcx> {\n+    type FullLayout = FullLayout<'tcx>;\n+\n+    fn layout_of(self, ty: Ty<'tcx>) -> Self::FullLayout {\n+        (self.tcx, ty::ParamEnv::empty(traits::Reveal::All))\n             .layout_of(ty)\n             .unwrap_or_else(|e| match e {\n                 LayoutError::SizeOverflow(_) => self.sess().fatal(&e.to_string()),\n                 _ => bug!(\"failed to get layout for `{}`: {}\", ty, e)\n             })\n     }\n-\n-    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx().fully_normalize_associated_types_in(&ty)\n-    }\n }\n \n-impl<'a, 'tcx> LayoutTyper<'tcx> for &'a CrateContext<'a, 'tcx> {\n-    type TyLayout = TyLayout<'tcx>;\n+impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for &'a CrateContext<'a, 'tcx> {\n+    type FullLayout = FullLayout<'tcx>;\n \n-    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n-        self.shared.tcx\n-    }\n \n-    fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n+    fn layout_of(self, ty: Ty<'tcx>) -> Self::FullLayout {\n         self.shared.layout_of(ty)\n     }\n-\n-    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.shared.normalize_projections(ty)\n-    }\n }\n \n /// Declare any llvm intrinsics that you might need"}, {"sha": "703456ab41bd2e43aecbc41af37d59cdcd248bc4", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -32,7 +32,7 @@ use rustc::ty::util::TypeIdHasher;\n use rustc::ich::Fingerprint;\n use common::{self, CrateContext};\n use rustc::ty::{self, AdtKind, Ty};\n-use rustc::ty::layout::{self, Align, LayoutTyper, Size, TyLayout};\n+use rustc::ty::layout::{self, Align, LayoutOf, Size, FullLayout};\n use rustc::session::{Session, config};\n use rustc::util::nodemap::FxHashMap;\n use rustc::util::common::path2cstr;\n@@ -1072,7 +1072,7 @@ fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n //=-----------------------------------------------------------------------------\n \n struct UnionMemberDescriptionFactory<'tcx> {\n-    layout: TyLayout<'tcx>,\n+    layout: FullLayout<'tcx>,\n     variant: &'tcx ty::VariantDef,\n     span: Span,\n }\n@@ -1139,7 +1139,7 @@ fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n // offset of zero bytes).\n struct EnumMemberDescriptionFactory<'tcx> {\n     enum_type: Ty<'tcx>,\n-    type_rep: TyLayout<'tcx>,\n+    type_rep: FullLayout<'tcx>,\n     discriminant_type_metadata: Option<DIType>,\n     containing_scope: DIScope,\n     file_metadata: DIFile,\n@@ -1318,7 +1318,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                 // of discriminant instead of us having to recover its path.\n                 fn compute_field_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                 name: &mut String,\n-                                                layout: TyLayout<'tcx>,\n+                                                layout: FullLayout<'tcx>,\n                                                 offset: Size,\n                                                 size: Size) {\n                     for i in 0..layout.field_count() {\n@@ -1409,13 +1409,13 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                    -> (DICompositeType, MemberDescriptionFactory<'tcx>) {\n     let layout = cx.layout_of(enum_type);\n     let maybe_discr = match *layout {\n-        layout::General { .. } => Some(layout.field_type(cx, 0)),\n+        layout::General { .. } => Some(layout.field(cx, 0).ty),\n         _ => None,\n     };\n \n     let layout = layout.for_variant(variant_index);\n     let mut field_tys = (0..layout.field_count()).map(|i| {\n-        layout.field_type(cx, i)\n+        layout.field(cx, i).ty\n     }).collect::<Vec<_>>();\n \n     if let Some(discr) = maybe_discr {"}, {"sha": "53c5c82b8e3f1af3ae62cfb79c431c4c5c3cfa52", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -43,7 +43,7 @@ use std::ptr;\n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use rustc::ty::layout::{self, LayoutTyper};\n+use rustc::ty::layout::{self, LayoutOf};\n \n pub mod gdb;\n mod utils;"}, {"sha": "8f4a983feb8b6f843bcfa3913e0b13780c43589a", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -19,7 +19,7 @@ use common::*;\n use llvm::{ValueRef};\n use llvm;\n use meth;\n-use rustc::ty::layout::LayoutTyper;\n+use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n use value::Value;\n \n@@ -74,7 +74,7 @@ pub fn size_and_align_of_dst<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, inf\n \n             // Recurse to get the size of the dynamically sized field (must be\n             // the last field).\n-            let field_ty = layout.field_type(ccx, layout.field_count() - 1);\n+            let field_ty = layout.field(ccx, layout.field_count() - 1).ty;\n             let (unsized_size, unsized_align) = size_and_align_of_dst(bcx, field_ty, info);\n \n             // FIXME (#26403, #27023): We should be adding padding"}, {"sha": "cf5d43e2f2b6f7437a675ad8d1ae39482f550ffc", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -12,7 +12,7 @@ use llvm::{self, ValueRef, BasicBlockRef};\n use rustc::middle::lang_items;\n use rustc::middle::const_val::{ConstEvalErr, ConstInt, ErrKind};\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::layout::LayoutTyper;\n+use rustc::ty::layout::LayoutOf;\n use rustc::traits;\n use rustc::mir;\n use abi::{Abi, FnType, ArgType};"}, {"sha": "b52d0da6580c475bfc28a2b89583cfada5a89e9f", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -18,7 +18,7 @@ use rustc::traits;\n use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::ty::layout::{self, LayoutTyper, Size};\n+use rustc::ty::layout::{self, LayoutOf, Size};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::subst::{Kind, Substs, Subst};\n use rustc_apfloat::{ieee, Float, Status};\n@@ -1157,7 +1157,7 @@ fn trans_const_adt<'a, 'tcx>(\n /// a two-element struct will locate it at offset 4, and accesses to it\n /// will read the wrong memory.\n fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                layout: layout::TyLayout<'tcx>,\n+                                layout: layout::FullLayout<'tcx>,\n                                 st: &layout::Struct,\n                                 vals: &[Const<'tcx>],\n                                 discr: Option<Const<'tcx>>)"}, {"sha": "0b9be3e49d1e7a9372c00cae775324c0aad41d73", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -10,7 +10,7 @@\n \n use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::layout::{self, Align, Layout, LayoutTyper, Size};\n+use rustc::ty::layout::{self, Align, Layout, LayoutOf, Size};\n use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n                 l = l.for_variant(variant_index)\n             }\n         }\n-        let fty = l.field_type(ccx, ix);\n+        let fty = l.field(ccx, ix).ty;\n \n         let alignment = self.alignment | Alignment::from(&*l);\n "}, {"sha": "f365de123cd118921d31055045ef284d84849a0b", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -12,7 +12,7 @@ use libc::c_uint;\n use llvm::{self, ValueRef, BasicBlockRef};\n use llvm::debuginfo::DIScope;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::layout::{self, LayoutTyper};\n+use rustc::ty::layout::{self, LayoutOf};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n use rustc::infer::TransNormalize;"}, {"sha": "f43115b84d46a885bd5c844b9cc0232fe5ccb06d", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -10,7 +10,7 @@\n \n use llvm::ValueRef;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::LayoutTyper;\n+use rustc::ty::layout::LayoutOf;\n use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -140,10 +140,10 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n                 let layout = bcx.ccx.layout_of(self.ty);\n \n                 let a = bcx.extract_value(llval, layout.llvm_field_index(0));\n-                let a = base::to_immediate(bcx, a, layout.field_type(bcx.ccx, 0));\n+                let a = base::to_immediate(bcx, a, layout.field(bcx.ccx, 0).ty);\n \n                 let b = bcx.extract_value(llval, layout.llvm_field_index(1));\n-                let b = base::to_immediate(bcx, b, layout.field_type(bcx.ccx, 1));\n+                let b = base::to_immediate(bcx, b, layout.field(bcx.ccx, 1).ty);\n \n                 self.val = OperandValue::Pair(a, b);\n             }"}, {"sha": "e83d4c586e7bc833fe1e5fd2d05bce541f993cfc", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::layout::{Layout, LayoutTyper};\n+use rustc::ty::layout::{Layout, LayoutOf};\n use rustc::mir;\n use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n use rustc_apfloat::{ieee, Float, Status, Round};"}, {"sha": "feb2b0569319af421c05e8dc031c2cc3f5784c8a", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8864668d536071dee35a472b459586d733105444/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=8864668d536071dee35a472b459586d733105444", "patch": "@@ -12,7 +12,7 @@ use abi::FnType;\n use adt;\n use common::*;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::layout::{Align, Layout, LayoutTyper, Size, TyLayout};\n+use rustc::ty::layout::{Align, Layout, LayoutOf, Size, FullLayout};\n use trans_item::DefPathBasedNames;\n use type_::Type;\n \n@@ -235,14 +235,14 @@ pub trait LayoutLlvmExt {\n     fn llvm_field_index(&self, index: usize) -> u64;\n }\n \n-impl<'tcx> LayoutLlvmExt for TyLayout<'tcx> {\n+impl<'tcx> LayoutLlvmExt for FullLayout<'tcx> {\n     fn llvm_field_index(&self, index: usize) -> u64 {\n         match **self {\n             Layout::Scalar { .. } |\n             Layout::CEnum { .. } |\n             Layout::UntaggedUnion { .. } |\n             Layout::RawNullablePointer { .. } => {\n-                bug!(\"TyLayout::llvm_field_index({:?}): not applicable\", self)\n+                bug!(\"FullLayout::llvm_field_index({:?}): not applicable\", self)\n             }\n \n             Layout::Vector { .. } |\n@@ -271,7 +271,7 @@ impl<'tcx> LayoutLlvmExt for TyLayout<'tcx> {\n                 if self.variant_index == Some(nndiscr as usize) {\n                     adt::memory_index_to_gep(nonnull.memory_index[index] as u64)\n                 } else {\n-                    bug!(\"TyLayout::llvm_field_index({:?}): not applicable\", self)\n+                    bug!(\"FullLayout::llvm_field_index({:?}): not applicable\", self)\n                 }\n             }\n         }"}]}