{"sha": "84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YjkxZDZmNWM3YTQ5MTU5ZjQ2ZjliZWMzN2I1N2JkN2UwYTYxYmU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-19T17:56:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-21T20:02:53Z"}, "message": "add more aliases", "tree": {"sha": "254a12494c9ee2390a70f6d5994f606004f9a2f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254a12494c9ee2390a70f6d5994f606004f9a2f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "html_url": "https://github.com/rust-lang/rust/commit/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b0856849e625cde4418b403fb4bee7b7875c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b0856849e625cde4418b403fb4bee7b7875c46", "html_url": "https://github.com/rust-lang/rust/commit/03b0856849e625cde4418b403fb4bee7b7875c46"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "2f3a7ebbe7726ddc86de79a3d47bb826304cc3d0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "patch": "@@ -98,6 +98,7 @@\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n+#![feature(doc_alias)]\n \n #![cfg_attr(not(stage0), feature(mmx_target_feature))]\n #![cfg_attr(not(stage0), feature(tbm_target_feature))]"}, {"sha": "346d404fa8c5924d5e6dd8186792ab40bdc275d5", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "patch": "@@ -295,6 +295,7 @@ macro_rules! debug_assert_ne {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"?\")]\n macro_rules! try {\n     ($expr:expr) => (match $expr {\n         $crate::result::Result::Ok(val) => val,"}, {"sha": "a1f6030428f1ef073b7d95d8fe4fa9ca37e01291", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "patch": "@@ -87,6 +87,7 @@\n     message=\"cannot add `{RHS}` to `{Self}`\",\n     label=\"no implementation for `{Self} + {RHS}`\",\n )]\n+#[doc(alias = \"+\")]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -183,6 +184,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot subtract `{RHS}` from `{Self}`\",\n                          label=\"no implementation for `{Self} - {RHS}`\")]\n+#[doc(alias = \"-\")]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -301,6 +303,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n                          label=\"no implementation for `{Self} * {RHS}`\")]\n+#[doc(alias = \"*\")]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -423,6 +426,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n                          label=\"no implementation for `{Self} / {RHS}`\")]\n+#[doc(alias = \"/\")]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -506,6 +510,7 @@ div_impl_float! { f32 f64 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n                          label=\"no implementation for `{Self} % {RHS}`\")]\n+#[doc(alias = \"%\")]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -589,6 +594,7 @@ rem_impl_float! { f32 f64 }\n /// ```\n #[lang = \"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"-\")]\n pub trait Neg {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -664,6 +670,8 @@ neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot add-assign `{Rhs}` to `{Self}`\",\n                          label=\"no implementation for `{Self} += {Rhs}`\")]\n+#[doc(alias = \"+\")]\n+#[doc(alias = \"+=\")]\n pub trait AddAssign<Rhs=Self> {\n     /// Performs the `+=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -718,6 +726,8 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot subtract-assign `{Rhs}` from `{Self}`\",\n                          label=\"no implementation for `{Self} -= {Rhs}`\")]\n+#[doc(alias = \"-\")]\n+#[doc(alias = \"-=\")]\n pub trait SubAssign<Rhs=Self> {\n     /// Performs the `-=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -763,6 +773,8 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot multiply-assign `{Rhs}` to `{Self}`\",\n                          label=\"no implementation for `{Self} *= {Rhs}`\")]\n+#[doc(alias = \"*\")]\n+#[doc(alias = \"*=\")]\n pub trait MulAssign<Rhs=Self> {\n     /// Performs the `*=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -808,6 +820,8 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot divide-assign `{Self}` by `{Rhs}`\",\n                          label=\"no implementation for `{Self} /= {Rhs}`\")]\n+#[doc(alias = \"/\")]\n+#[doc(alias = \"/=\")]\n pub trait DivAssign<Rhs=Self> {\n     /// Performs the `/=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -856,6 +870,8 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(message=\"cannot mod-assign `{Self}` by `{Rhs}``\",\n                          label=\"no implementation for `{Self} %= {Rhs}`\")]\n+#[doc(alias = \"%\")]\n+#[doc(alias = \"%=\")]\n pub trait RemAssign<Rhs=Self> {\n     /// Performs the `%=` operation.\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "0a0e92a91800614a75608bd7099eb2e4fe79ab54", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "patch": "@@ -62,6 +62,9 @@\n #[lang = \"index\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"]\")]\n+#[doc(alias = \"[\")]\n+#[doc(alias = \"[]\")]\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -146,6 +149,9 @@ pub trait Index<Idx: ?Sized> {\n #[lang = \"index_mut\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(alias = \"[\")]\n+#[doc(alias = \"]\")]\n+#[doc(alias = \"[]\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4f2d30aa6a8a77b79fe8401f7acfed8904c38b86", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "patch": "@@ -28,6 +28,7 @@\n                that implement `{Try}`\",\n       label=\"the `?` operator cannot be applied to type `{Self}`\")\n )]\n+#[doc(alias = \"?\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "8248ee71474c257b7699454c89c7b75394052904", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b91d6f5c7a49159f46f9bec37b57bd7e0a61be/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=84b91d6f5c7a49159f46f9bec37b57bd7e0a61be", "patch": "@@ -502,6 +502,9 @@ mod prim_pointer { }\n mod prim_array { }\n \n #[doc(primitive = \"slice\")]\n+#[doc(alias = \"[\")]\n+#[doc(alias = \"]\")]\n+#[doc(alias = \"[]\")]\n //\n /// A dynamically-sized view into a contiguous sequence, `[T]`.\n ///\n@@ -600,6 +603,9 @@ mod prim_slice { }\n mod prim_str { }\n \n #[doc(primitive = \"tuple\")]\n+#[doc(alias = \"(\")]\n+#[doc(alias = \")\")]\n+#[doc(alias = \"()\")]\n //\n /// A finite heterogeneous sequence, `(T, U, ..)`.\n ///\n@@ -822,6 +828,7 @@ mod prim_isize { }\n mod prim_usize { }\n \n #[doc(primitive = \"reference\")]\n+#[doc(alias = \"&\")]\n //\n /// References, both shared and mutable.\n ///"}]}