{"sha": "7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYzNjZTNiYmQ1OWYwYjU4NzZhNWQzYzBiMDJhYThmODkzYTJiZGQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-03-25T03:06:32Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-14T04:37:25Z"}, "message": "Combine 'Extern' and 'ExternPrivate'", "tree": {"sha": "e97d054a265d319ba16a1951ee7cb3061ee4b740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e97d054a265d319ba16a1951ee7cb3061ee4b740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyyuQUACgkQtAh+UQ6Y\nsWRqcg/8C7iYBGkSm4x3IeYN/1A+rKfWpevhxPNh5NSNeXzzdI6HzIitV27pRa6p\nmH1XjQrOpuIjW8PlA96CenCdUAKUnetNj4T8EsTprgXTSuyIENub2RIxjD6N/iRQ\n4WHjWC8TatqsxaddP7YpPNx8Bd7xUuOPSHC0aYS+Vq8x1j1xvxigYd2U3780IXZi\nYFvBllYfdtua6XxGMSXvVWEQTJIr8Uov6RLdtji1c//hdzUGWVPiOkc4bFu04ytI\nT2v9tj/bR3XW2N5YXaBeOz/gqmPx9FnBLNojc+TQsJiFiiJMK3WPhH6wbU2TivkV\n+Y7BM9ywISHSv9YL67qTYmDWVQXoMP9M3ebEaPk0c3skbvvM+rZnnZBpyDZdWKtG\n+ZOI+QxnjWv5eXxCmXuUeO3C4ndtdxbwVAOofKH93PZJyGERUjpPvlnIGycLr6D2\n4oXUtAkbdjsLPojEn6NvcxTupCv/s6cdRKikLLpHASuYZ+Z9N6za2DHgsb95jphZ\nOI0FMP83IDzOeK/Q/i4/nmHuYW7iK4juiP1IFfosJpMTwUTsWVvnOkAFX7/ETj6a\nUvS4CGUsiFYF7XjWiZ62ev9hmllAqSHWo4IqcIkQ6bk9E9Zs/8eIuj2TZ8SsKPja\nfyxjkJBKuhEb4csj8EGeS4tZWIOgeABaWZ69Q7QUl45mIs3/Elo=\n=la11\n-----END PGP SIGNATURE-----", "payload": "tree e97d054a265d319ba16a1951ee7cb3061ee4b740\nparent 21491dc7012ae50ecdc694b5ee664ecc502ae2c5\nauthor Aaron Hill <aa1ronham@gmail.com> 1553483192 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1555216645 -0400\n\nCombine 'Extern' and 'ExternPrivate'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "html_url": "https://github.com/rust-lang/rust/commit/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21491dc7012ae50ecdc694b5ee664ecc502ae2c5", "html_url": "https://github.com/rust-lang/rust/commit/21491dc7012ae50ecdc694b5ee664ecc502ae2c5"}], "stats": {"total": 97, "additions": 61, "deletions": 36}, "files": [{"sha": "2a4ff69cbd7ca6cc824b6fe13c74d6a5b091e4e7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "patch": "@@ -283,33 +283,24 @@ impl OutputTypes {\n // DO NOT switch BTreeMap or BTreeSet out for an unsorted container type! That\n // would break dependency tracking for command-line arguments.\n #[derive(Clone, Hash)]\n-pub struct Externs(BTreeMap<String, BTreeSet<Option<String>>>);\n+pub struct Externs(BTreeMap<String, BTreeSet<ExternEntry>>);\n \n+#[derive(Clone, Hash, Eq, PartialEq, Ord, PartialOrd, Debug)]\n+pub struct ExternEntry {\n+    pub location: Option<String>,\n+    pub public: bool\n+}\n \n impl Externs {\n-    pub fn new(data: BTreeMap<String, BTreeSet<Option<String>>>) -> Externs {\n+    pub fn new(data: BTreeMap<String, BTreeSet<ExternEntry>>) -> Externs {\n         Externs(data)\n     }\n \n-    pub fn get(&self, key: &str) -> Option<&BTreeSet<Option<String>>> {\n-        self.0.get(key)\n-    }\n-\n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<Option<String>>> {\n-        self.0.iter()\n-    }\n-}\n-\n-// Similar to 'Externs', but used for the '--extern-private' option\n-#[derive(Clone, Hash)]\n-pub struct ExternPrivates(BTreeMap<String, BTreeSet<String>>);\n-\n-impl ExternPrivates {\n-    pub fn get(&self, key: &str) -> Option<&BTreeSet<String>> {\n+    pub fn get(&self, key: &str) -> Option<&BTreeSet<ExternEntry>> {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<String>> {\n+    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<ExternEntry>> {\n         self.0.iter()\n     }\n }\n@@ -446,7 +437,7 @@ top_level_options!(\n \n         // The crates to consider private when\n         // checking leaked private dependency types in public interfaces\n-        extern_private: ExternPrivates [UNTRACKED],\n+        //extern_private: ExternPrivates [UNTRACKED],\n     }\n );\n \n@@ -649,7 +640,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n-            extern_private: ExternPrivates(BTreeMap::new())\n+            //extern_private: ExternPrivates(BTreeMap::new())\n         }\n     }\n }\n@@ -2331,7 +2322,7 @@ pub fn build_session_options_and_crate_config(\n         )\n     }\n \n-    let mut extern_private: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n+    /*let mut extern_private: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n \n     for arg in matches.opt_strs(\"extern-private\").into_iter() {\n         let mut parts = arg.splitn(2, '=');\n@@ -2346,10 +2337,16 @@ pub fn build_session_options_and_crate_config(\n             .or_default()\n             .insert(location);\n \n-    }\n+    }*/\n+\n+    // We start out with a Vec<(Option<String>, bool)>>,\n+    // and later convert it into a BTreeSet<(Option<String>, bool)>\n+    // This allows to modify entries in-place to set their correct\n+    // 'public' value\n+    let mut externs: BTreeMap<_, BTreeMap<Option<String>, bool>> = BTreeMap::new();\n+    for (arg, public) in matches.opt_strs(\"extern\").into_iter().map(|v| (v, true))\n+        .chain(matches.opt_strs(\"extern-private\").into_iter().map(|v| (v, false))) {\n \n-    let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n-    for arg in matches.opt_strs(\"extern\").into_iter() {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().unwrap_or_else(||\n             early_error(error_format, \"--extern value must not be empty\"));\n@@ -2362,11 +2359,37 @@ pub fn build_session_options_and_crate_config(\n             );\n         };\n \n+\n+        // Externsl crates start out public,\n+        // and become private if we later see\n+        // an '--extern-private' key. They never\n+        // go back to being public once we've seen\n+        // '--extern-private', so we logical-AND\n+        // their current and new 'public' value together\n+\n         externs\n             .entry(name.to_owned())\n             .or_default()\n-            .insert(location);\n-    }\n+            .entry(location)\n+            .and_modify(|e| *e &= public)\n+            .or_insert(public);\n+    }\n+\n+    // Now that we've determined the 'public' status of each extern,\n+    // collect them into a set of ExternEntry\n+    let externs: BTreeMap<String, BTreeSet<ExternEntry>> = externs.into_iter()\n+        .map(|(k, v)| {\n+            let values =v.into_iter().map(|(location, public)| {\n+                ExternEntry {\n+                    location,\n+                    public\n+                }\n+            }).collect::<BTreeSet<ExternEntry>>();\n+            (k, values)\n+        })\n+        .collect();\n+        \n+\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n@@ -2417,7 +2440,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n             edition,\n-            extern_private: ExternPrivates(extern_private)\n+            //extern_private: ExternPrivates(extern_private)\n         },\n         cfg,\n     )"}, {"sha": "7c5b5dc7113ae933aefa5c243924eda558bd84f4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "patch": "@@ -133,7 +133,7 @@ impl<'a> CrateLoader<'a> {\n             let source = &self.cstore.get_crate_data(cnum).source;\n             if let Some(locs) = self.sess.opts.externs.get(&*name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n-                let found = locs.iter().filter_map(|l| l.as_ref()).any(|l| {\n+                let found = locs.iter().filter_map(|l| l.location.as_ref()).any(|l| {\n                     let l = fs::canonicalize(l).ok();\n                     source.dylib.as_ref().map(|p| &p.0) == l.as_ref() ||\n                     source.rlib.as_ref().map(|p| &p.0) == l.as_ref()\n@@ -202,13 +202,14 @@ impl<'a> CrateLoader<'a> {\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n         let mut private_dep = false;\n-        if let Some(s) = self.sess.opts.extern_private.get(&name.as_str()) {\n-            for path in s {\n-                let p = Some(path.as_str());\n+        if let Some(s) = self.sess.opts.externs.get(&name.as_str()) {\n+            for entry in s {\n+                let p = entry.location.as_ref().map(|s| s.as_str());\n                 if p == lib.dylib.as_ref().and_then(|r| r.0.to_str()) ||\n                     p == lib.rlib.as_ref().and_then(|r| r.0.to_str()) {\n \n-                    private_dep = true;\n+                    private_dep = !entry.public;\n+                    break;\n                 }\n             }\n         }"}, {"sha": "f56ca5af76e8f93414531ca00b1bb8f6c811ae14", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "patch": "@@ -444,9 +444,9 @@ impl<'a> Context<'a> {\n             self.should_match_name = false;\n             if let Some(s) = self.sess.opts.externs.get(&self.crate_name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n-                if s.iter().any(|l| l.is_some()) {\n+                if s.iter().any(|l| l.location.is_some()) {\n                     return self.find_commandline_library(\n-                        s.iter().filter_map(|l| l.as_ref()),\n+                        s.iter().filter_map(|l| l.location.as_ref()),\n                     );\n                 }\n             }"}, {"sha": "80c0911fee1eac358b0d810f1b6774da94c1d75c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=7cc3ce3bbd59f0b5876a5d3c0b02aa8f893a2bdd", "patch": "@@ -7,7 +7,7 @@ use errors::emitter::ColorConfig;\n use getopts;\n use rustc::lint::Level;\n use rustc::session::early_error;\n-use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n+use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs, ExternEntry};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n                              get_cmd_lint_options};\n use rustc::session::search_paths::SearchPath;\n@@ -588,7 +588,8 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n                         enable `--extern crate_name` without `=path`\".to_string());\n         }\n         let name = name.to_string();\n-        externs.entry(name).or_default().insert(location);\n+        // For Rustdoc purposes, we can treat all externs as public\n+        externs.entry(name).or_default().insert(ExternEntry { location, public: true });\n     }\n     Ok(Externs::new(externs))\n }"}]}