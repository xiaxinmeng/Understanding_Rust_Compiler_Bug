{"sha": "b6818be41dea90e53344f84770f5e0faaacee4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODE4YmU0MWRlYTkwZTUzMzQ0Zjg0NzcwZjVlMGZhYWFjZWU0YTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-12T14:18:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-21T14:52:14Z"}, "message": "Add long error explanations", "tree": {"sha": "b14ffb3c7e637eeefd43490868600432cd82dbf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b14ffb3c7e637eeefd43490868600432cd82dbf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6818be41dea90e53344f84770f5e0faaacee4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6818be41dea90e53344f84770f5e0faaacee4a8", "html_url": "https://github.com/rust-lang/rust/commit/b6818be41dea90e53344f84770f5e0faaacee4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6818be41dea90e53344f84770f5e0faaacee4a8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a45dd7e711abdd3bcfb6292bba836485ee82fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a45dd7e711abdd3bcfb6292bba836485ee82fae", "html_url": "https://github.com/rust-lang/rust/commit/0a45dd7e711abdd3bcfb6292bba836485ee82fae"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "2d59051ec4a537465b80ae6d9448054b4142a696", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b6818be41dea90e53344f84770f5e0faaacee4a8/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6818be41dea90e53344f84770f5e0faaacee4a8/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=b6818be41dea90e53344f84770f5e0faaacee4a8", "patch": "@@ -201,6 +201,74 @@ where appropriate is ongoing. Try using an unquoted name instead:\n pub fn something() {}\n ```\n \"##,\n+\n+E0583: r##\"\n+A file wasn't found for an out-of-line module.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0583\n+mod file_that_doesnt_exist; // error: file not found for module\n+\n+fn main() {}\n+```\n+\n+Please be sure that a file corresponding to the module exists. If you\n+want to use a module named `file_that_doesnt_exist`, you need to have a file\n+named `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\n+same directory.\n+\"##,\n+\n+E0585: r##\"\n+A documentation comment that doesn't document anything was found.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0585\n+fn main() {\n+    // The following doc comment will fail:\n+    /// This is a useless doc comment!\n+}\n+```\n+\n+Documentation comments need to be followed by items, including functions,\n+types, modules, etc. Examples:\n+\n+```\n+/// I'm documenting the following struct:\n+struct Foo;\n+\n+/// I'm documenting the following function:\n+fn foo() {}\n+```\n+\"##,\n+\n+E0586: r##\"\n+An inclusive range was used with no end.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0586\n+let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+let x = &tmp[1...]; // error: inclusive range was used with no end\n+```\n+\n+An inclusive range needs an end in order to *include* it. If you just need a\n+start and no end, use a non-inclusive range (with `..`):\n+\n+```\n+let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+let x = &tmp[1..]; // ok!\n+```\n+\n+Or put an end to your inclusive range:\n+\n+```\n+let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+let x = &tmp[1...3]; // ok!\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {\n@@ -224,8 +292,5 @@ register_diagnostics! {\n     E0555, // malformed feature attribute, expected #![feature(...)]\n     E0556, // malformed feature, expected just one word\n     E0557, // feature has been removed\n-    E0583, // file not found for module\n     E0584, // file for module `..` found at both .. and ..\n-    E0585, // documentation comment that doesn't document anything\n-    E0586, // inclusive range with no end\n }"}, {"sha": "b5b8a6bc0ef64c80f08a32ed04739606146392a4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b6818be41dea90e53344f84770f5e0faaacee4a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6818be41dea90e53344f84770f5e0faaacee4a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b6818be41dea90e53344f84770f5e0faaacee4a8", "patch": "@@ -219,7 +219,7 @@ fn is_ident_or_underscore(t: &token::Token) -> bool {\n pub struct ModulePath {\n     pub name: String,\n     pub path_exists: bool,\n-    pub result: Result<ModulePathSuccess, Errors>,\n+    pub result: Result<ModulePathSuccess, Error>,\n }\n \n pub struct ModulePathSuccess {\n@@ -233,7 +233,7 @@ pub struct ModulePathError {\n     pub help_msg: String,\n }\n \n-pub enum Errors {\n+pub enum Error {\n     FileNotFoundForModule {\n         mod_name: String,\n         default_path: String,\n@@ -249,13 +249,13 @@ pub enum Errors {\n     InclusiveRangeWithNoEnd,\n }\n \n-impl Errors {\n+impl Error {\n     pub fn span_err<'a>(self, sp: Span, handler: &'a errors::Handler) -> DiagnosticBuilder<'a> {\n         match self {\n-            Errors::FileNotFoundForModule { ref mod_name,\n-                                            ref default_path,\n-                                            ref secondary_path,\n-                                            ref dir_path } => {\n+            Error::FileNotFoundForModule { ref mod_name,\n+                                           ref default_path,\n+                                           ref secondary_path,\n+                                           ref dir_path } => {\n                 let mut err = struct_span_err!(handler, sp, E0583,\n                                                \"file not found for module `{}`\", mod_name);\n                 err.help(&format!(\"name the file either {} or {} inside the directory {:?}\",\n@@ -264,7 +264,7 @@ impl Errors {\n                                   dir_path));\n                 err\n             }\n-            Errors::DuplicatePaths { ref mod_name, ref default_path, ref secondary_path } => {\n+            Error::DuplicatePaths { ref mod_name, ref default_path, ref secondary_path } => {\n                 let mut err = struct_span_err!(handler, sp, E0584,\n                                                \"file for module `{}` found at both {} and {}\",\n                                                mod_name,\n@@ -273,14 +273,14 @@ impl Errors {\n                 err.help(\"delete or rename one of them to remove the ambiguity\");\n                 err\n             }\n-            Errors::UselessDocComment => {\n+            Error::UselessDocComment => {\n                 let mut err = struct_span_err!(handler, sp, E0585,\n                                   \"found a documentation comment that doesn't document anything\");\n                 err.help(\"doc comments must come before what they document, maybe a comment was \\\n                           intended with `//`?\");\n                 err\n             }\n-            Errors::InclusiveRangeWithNoEnd => {\n+            Error::InclusiveRangeWithNoEnd => {\n                 let mut err = struct_span_err!(handler, sp, E0586,\n                                                \"inclusive range with no end\");\n                 err.help(\"inclusive ranges must be bounded at the end (`...b` or `a...b`)\");\n@@ -518,7 +518,7 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n-                        self.span_fatal_err(self.prev_span, Errors::UselessDocComment)\n+                        self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n                     } else {\n                         let mut err = self.fatal(&format!(\"expected identifier, found `{}`\",\n                                                           self.this_token_to_string()));\n@@ -1009,7 +1009,7 @@ impl<'a> Parser<'a> {\n     pub fn span_fatal(&self, sp: Span, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(sp, m)\n     }\n-    pub fn span_fatal_err(&self, sp: Span, err: Errors) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal_err(&self, sp: Span, err: Error) -> DiagnosticBuilder<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n     pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> DiagnosticBuilder<'a> {\n@@ -2001,7 +2001,7 @@ impl<'a> Parser<'a> {\n                     limits: RangeLimits)\n                     -> PResult<'a, ast::ExprKind> {\n         if end.is_none() && limits == RangeLimits::Closed {\n-            Err(self.span_fatal_err(self.span, Errors::InclusiveRangeWithNoEnd))\n+            Err(self.span_fatal_err(self.span, Error::InclusiveRangeWithNoEnd))\n         } else {\n             Ok(ExprKind::Range(start, end, limits))\n         }\n@@ -3916,7 +3916,7 @@ impl<'a> Parser<'a> {\n                     let unused_attrs = |attrs: &[_], s: &mut Self| {\n                         if attrs.len() > 0 {\n                             if s.prev_token_kind == PrevTokenKind::DocComment {\n-                                self.span_fatal_err(s.prev_span, Errors::UselessDocComment).emit();\n+                                s.span_fatal_err(s.prev_span, Error::UselessDocComment).emit();\n                             } else {\n                                 s.span_err(s.span, \"expected statement after outer attribute\");\n                             }\n@@ -5050,7 +5050,7 @@ impl<'a> Parser<'a> {\n             }\n             token::CloseDelim(token::Brace) => {}\n             token::DocComment(_) => return Err(self.span_fatal_err(self.span,\n-                                                                   Errors::UselessDocComment)),\n+                                                                   Error::UselessDocComment)),\n             _ => return Err(self.span_fatal_help(self.span,\n                     &format!(\"expected `,`, or `}}`, found `{}`\", self.this_token_to_string()),\n                     \"struct fields should be separated by commas\")),\n@@ -5231,13 +5231,13 @@ impl<'a> Parser<'a> {\n                 directory_ownership: DirectoryOwnership::Owned,\n                 warn: false,\n             }),\n-            (false, false) => Err(Errors::FileNotFoundForModule {\n+            (false, false) => Err(Error::FileNotFoundForModule {\n                 mod_name: mod_name.clone(),\n                 default_path: default_path_str,\n                 secondary_path: secondary_path_str,\n                 dir_path: format!(\"{}\", dir_path.display()),\n             }),\n-            (true, true) => Err(Errors::DuplicatePaths {\n+            (true, true) => Err(Error::DuplicatePaths {\n                 mod_name: mod_name.clone(),\n                 default_path: default_path_str,\n                 secondary_path: secondary_path_str,"}]}