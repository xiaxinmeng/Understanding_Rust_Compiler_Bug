{"sha": "86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "node_id": "C_kwDOAAsO6NoAKDg2YzUzNGYyNDRiZDcyZGM5ZTllYzFiZTBiZmRmMDEzMTYwMmNhMzA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-05T08:58:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T08:58:40Z"}, "message": "Merge #10440\n\n10440: Fix Clippy warnings and replace some `if let`s with `match` r=Veykril a=arzg\n\nI decided to try fixing a bunch of Clippy warnings. I am aware of this project\u2019s opinion of Clippy (I have read both [rust-lang/clippy#5537](https://github.com/rust-lang/rust-clippy/issues/5537) and [rust-analyzer/rowan#57 (comment)](https://github.com/rust-analyzer/rowan/pull/57#discussion_r415676159)), so I totally understand if part of or the entirety of this PR is rejected. In particular, I can see how the semicolons and `if let` vs `match` commits provide comparatively little benefit when compared to the ensuing churn.\r\n\r\nI tried to separate each kind of change into its own commit to make it easier to discard certain changes. I also only applied Clippy suggestions where I thought they provided a definite improvement to the code (apart from semicolons, which is IMO more of a formatting/consistency question than a linting question). In the end I accumulated a list of 28 Clippy lints I ignored entirely.\r\n\r\nSidenote: I should really have asked about this on Zulip before going through all 1,555 `if let`s in the codebase to decide which ones definitely look better as `match` :P\n\nCo-authored-by: Aramis Razzaghipour <aramisnoah@gmail.com>", "tree": {"sha": "011f9a20db2f5ceb64c845ff9ba6e4a9065cb8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/011f9a20db2f5ceb64c845ff9ba6e4a9065cb8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXBPACRBK7hj4Ov3rIwAAGHUIAHAo+O1GxNppwA53s7F+8NHl\nIf1thHqlWy9c5cRfj6BJq3Uc1n4KUPOhBqqJAs4RgYnNGoeZ6AGpVEO1u/SYqK+y\nfleHt8XA33CmMPDh+sxSS3mfOxh0ZZr4ZlafCdLYIeCwSDHWR3O0T/sA0iHr81jo\n/s8ZvYNNUzJ+Yaw1FTMDCkuDG7QF1swcUuhHvXdvb364ruQDmtRwx+VVKdtsgtjN\ntV1drnLGWQUY+rr0BWq/gDsGLQXRF6SGM752wzCw9yT/gTUhIaHSeVMAwnGanJNr\nK3RSZCL/nuK09o0QKCVEQtM1yoi9lgk0TjCNq++j4irPeNfSuNpnwNwTR07kvo8=\n=O5KT\n-----END PGP SIGNATURE-----\n", "payload": "tree 011f9a20db2f5ceb64c845ff9ba6e4a9065cb8f6\nparent bf817232216416f023fb5e36514a8fc25c4be461\nparent 9583dd572597fd1e3bbde80e0b8cf68ad8acc090\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633424320 +0000\ncommitter GitHub <noreply@github.com> 1633424320 +0000\n\nMerge #10440\n\n10440: Fix Clippy warnings and replace some `if let`s with `match` r=Veykril a=arzg\n\nI decided to try fixing a bunch of Clippy warnings. I am aware of this project\u2019s opinion of Clippy (I have read both [rust-lang/clippy#5537](https://github.com/rust-lang/rust-clippy/issues/5537) and [rust-analyzer/rowan#57 (comment)](https://github.com/rust-analyzer/rowan/pull/57#discussion_r415676159)), so I totally understand if part of or the entirety of this PR is rejected. In particular, I can see how the semicolons and `if let` vs `match` commits provide comparatively little benefit when compared to the ensuing churn.\r\n\r\nI tried to separate each kind of change into its own commit to make it easier to discard certain changes. I also only applied Clippy suggestions where I thought they provided a definite improvement to the code (apart from semicolons, which is IMO more of a formatting/consistency question than a linting question). In the end I accumulated a list of 28 Clippy lints I ignored entirely.\r\n\r\nSidenote: I should really have asked about this on Zulip before going through all 1,555 `if let`s in the codebase to decide which ones definitely look better as `match` :P\n\nCo-authored-by: Aramis Razzaghipour <aramisnoah@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "html_url": "https://github.com/rust-lang/rust/commit/86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf817232216416f023fb5e36514a8fc25c4be461", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf817232216416f023fb5e36514a8fc25c4be461", "html_url": "https://github.com/rust-lang/rust/commit/bf817232216416f023fb5e36514a8fc25c4be461"}, {"sha": "9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "url": "https://api.github.com/repos/rust-lang/rust/commits/9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "html_url": "https://github.com/rust-lang/rust/commit/9583dd572597fd1e3bbde80e0b8cf68ad8acc090"}], "stats": {"total": 877, "additions": 399, "deletions": 478}, "files": [{"sha": "0661d776f1720a91ba420e388369966e8a40c8ff", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -179,7 +179,7 @@ impl FlycheckActor {\n                         tracing::error!(\n                             \"Flycheck failed to run the following command: {:?}\",\n                             self.check_command()\n-                        )\n+                        );\n                     }\n                     self.progress(Progress::DidFinish(res));\n                 }\n@@ -253,14 +253,14 @@ impl FlycheckActor {\n     }\n \n     fn send(&self, check_task: Message) {\n-        (self.sender)(check_task)\n+        (self.sender)(check_task);\n     }\n }\n \n struct CargoHandle {\n     child: JodChild,\n     #[allow(unused)]\n-    thread: jod_thread::JoinHandle<io::Result<bool>>,\n+    thread: jod_thread::JoinHandle<bool>,\n     receiver: Receiver<CargoMessage>,\n }\n \n@@ -279,7 +279,7 @@ impl CargoHandle {\n         // It is okay to ignore the result, as it only errors if the process is already dead\n         let _ = self.child.kill();\n         let exit_status = self.child.wait()?;\n-        let read_at_least_one_message = self.thread.join()?;\n+        let read_at_least_one_message = self.thread.join();\n         if !exit_status.success() && !read_at_least_one_message {\n             // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n             // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n@@ -304,7 +304,7 @@ impl CargoActor {\n     fn new(child_stdout: process::ChildStdout, sender: Sender<CargoMessage>) -> CargoActor {\n         CargoActor { child_stdout, sender }\n     }\n-    fn run(self) -> io::Result<bool> {\n+    fn run(self) -> bool {\n         // We manually read a line at a time, instead of using serde's\n         // stream deserializers, because the deserializer cannot recover\n         // from an error, resulting in it getting stuck, because we try to\n@@ -334,20 +334,20 @@ impl CargoActor {\n                     // Skip certain kinds of messages to only spend time on what's useful\n                     JsonMessage::Cargo(message) => match message {\n                         cargo_metadata::Message::CompilerArtifact(artifact) if !artifact.fresh => {\n-                            self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap()\n+                            self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap();\n                         }\n                         cargo_metadata::Message::CompilerMessage(msg) => {\n-                            self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap()\n+                            self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap();\n                         }\n                         _ => (),\n                     },\n                     JsonMessage::Rustc(message) => {\n-                        self.sender.send(CargoMessage::Diagnostic(message)).unwrap()\n+                        self.sender.send(CargoMessage::Diagnostic(message)).unwrap();\n                     }\n                 }\n             }\n         }\n-        Ok(read_at_least_one_message)\n+        read_at_least_one_message\n     }\n }\n "}, {"sha": "c356a71ed61472a9a7dc9d6cc07a1a3035687f85", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -1119,7 +1119,7 @@ impl DefWithBody {\n                                 if let ast::Expr::RecordExpr(record_expr) =\n                                     &source_ptr.value.to_node(&root)\n                                 {\n-                                    if let Some(_) = record_expr.record_expr_field_list() {\n+                                    if record_expr.record_expr_field_list().is_some() {\n                                         acc.push(\n                                             MissingFields {\n                                                 file: source_ptr.file_id,\n@@ -1143,7 +1143,7 @@ impl DefWithBody {\n                                 if let Some(expr) = source_ptr.value.as_ref().left() {\n                                     let root = source_ptr.file_syntax(db.upcast());\n                                     if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n-                                        if let Some(_) = record_pat.record_pat_field_list() {\n+                                        if record_pat.record_pat_field_list().is_some() {\n                                             acc.push(\n                                                 MissingFields {\n                                                     file: source_ptr.file_id,\n@@ -2119,10 +2119,9 @@ impl Impl {\n         };\n \n         let fp = TyFingerprint::for_inherent_impl(&ty);\n-        let fp = if let Some(fp) = fp {\n-            fp\n-        } else {\n-            return Vec::new();\n+        let fp = match fp {\n+            Some(fp) => fp,\n+            None => return Vec::new(),\n         };\n \n         let mut all = Vec::new();"}, {"sha": "4c1a3344ec9b55f3e3cddd1e85cebe8d201f84da", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -474,10 +474,9 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::PrefixExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                if let Some(op) = e.op_kind() {\n-                    self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr)\n-                } else {\n-                    self.alloc_expr(Expr::Missing, syntax_ptr)\n+                match e.op_kind() {\n+                    Some(op) => self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr),\n+                    None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n             }\n             ast::Expr::ClosureExpr(e) => {\n@@ -624,10 +623,9 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {\n-        if let Some(expr) = expr {\n-            self.collect_expr(expr)\n-        } else {\n-            self.missing_expr()\n+        match expr {\n+            Some(expr) => self.collect_expr(expr),\n+            None => self.missing_expr(),\n         }\n     }\n \n@@ -724,10 +722,9 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block_opt(&mut self, expr: Option<ast::BlockExpr>) -> ExprId {\n-        if let Some(block) = expr {\n-            self.collect_block(block)\n-        } else {\n-            self.missing_expr()\n+        match expr {\n+            Some(block) => self.collect_block(block),\n+            None => self.missing_expr(),\n         }\n     }\n \n@@ -890,10 +887,9 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_pat_opt(&mut self, pat: Option<ast::Pat>) -> PatId {\n-        if let Some(pat) = pat {\n-            self.collect_pat(pat)\n-        } else {\n-            self.missing_pat()\n+        match pat {\n+            Some(pat) => self.collect_pat(pat),\n+            None => self.missing_pat(),\n         }\n     }\n "}, {"sha": "3251638c7aaeda6da0fd10c968bfccfdb067b37d", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -209,10 +209,9 @@ fn find_path_inner(\n             ) {\n                 path.push_segment(name);\n \n-                let new_path = if let Some(best_path) = best_path {\n-                    select_best_path(best_path, path, prefer_no_std)\n-                } else {\n-                    path\n+                let new_path = match best_path {\n+                    Some(best_path) => select_best_path(best_path, path, prefer_no_std),\n+                    None => path,\n                 };\n                 best_path_len = new_path.len();\n                 best_path = Some(new_path);\n@@ -243,10 +242,9 @@ fn find_path_inner(\n         });\n \n         for path in extern_paths {\n-            let new_path = if let Some(best_path) = best_path {\n-                select_best_path(best_path, path, prefer_no_std)\n-            } else {\n-                path\n+            let new_path = match best_path {\n+                Some(best_path) => select_best_path(best_path, path, prefer_no_std),\n+                None => path,\n             };\n             best_path = Some(new_path);\n         }\n@@ -261,12 +259,11 @@ fn find_path_inner(\n         }\n     }\n \n-    if let Some(prefix) = prefixed.map(PrefixKind::prefix) {\n-        best_path.or_else(|| {\n+    match prefixed.map(PrefixKind::prefix) {\n+        Some(prefix) => best_path.or_else(|| {\n             scope_name.map(|scope_name| ModPath::from_segments(prefix, vec![scope_name]))\n-        })\n-    } else {\n-        best_path\n+        }),\n+        None => best_path,\n     }\n }\n \n@@ -346,15 +343,13 @@ fn find_local_import_locations(\n \n         if let Some((name, vis)) = data.scope.name_of(item) {\n             if vis.is_visible_from(db, from) {\n-                let is_private = if let Visibility::Module(private_to) = vis {\n-                    private_to.local_id == module.local_id\n-                } else {\n-                    false\n+                let is_private = match vis {\n+                    Visibility::Module(private_to) => private_to.local_id == module.local_id,\n+                    Visibility::Public => false,\n                 };\n-                let is_original_def = if let Some(module_def_id) = item.as_module_def_id() {\n-                    data.scope.declarations().any(|it| it == module_def_id)\n-                } else {\n-                    false\n+                let is_original_def = match item.as_module_def_id() {\n+                    Some(module_def_id) => data.scope.declarations().any(|it| it == module_def_id),\n+                    None => false,\n                 };\n \n                 // Ignore private imports. these could be used if we are"}, {"sha": "b7a5758a0a2c95496a03a5a2c0655bcb87334a95", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -475,10 +475,9 @@ macro_rules! mod_items {\n                 }\n \n                 fn id_from_mod_item(mod_item: ModItem) -> Option<FileItemTreeId<Self>> {\n-                    if let ModItem::$typ(id) = mod_item {\n-                        Some(id)\n-                    } else {\n-                        None\n+                    match mod_item {\n+                        ModItem::$typ(id) => Some(id),\n+                        _ => None,\n                     }\n                 }\n "}, {"sha": "30f11cc69435ecbea1b41695d6dc1a4a70b5c0f9", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -400,13 +400,10 @@ impl DefMap {\n         };\n         let from_scope_or_builtin = match shadow {\n             BuiltinShadowMode::Module => from_scope.or(from_builtin),\n-            BuiltinShadowMode::Other => {\n-                if let Some(ModuleDefId::ModuleId(_)) = from_scope.take_types() {\n-                    from_builtin.or(from_scope)\n-                } else {\n-                    from_scope.or(from_builtin)\n-                }\n-            }\n+            BuiltinShadowMode::Other => match from_scope.take_types() {\n+                Some(ModuleDefId::ModuleId(_)) => from_builtin.or(from_scope),\n+                Some(_) | None => from_scope.or(from_builtin),\n+            },\n         };\n         let from_extern_prelude = self\n             .extern_prelude"}, {"sha": "6b777cfeff4ec4e6787b7b08f170ecdaf9cb8828", "filename": "crates/hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -18,10 +18,9 @@ pub(crate) fn convert_path(\n     path: ast::Path,\n     hygiene: &Hygiene,\n ) -> Option<ModPath> {\n-    let prefix = if let Some(qual) = path.qualifier() {\n-        Some(convert_path(db, prefix, qual, hygiene)?)\n-    } else {\n-        prefix\n+    let prefix = match path.qualifier() {\n+        Some(qual) => Some(convert_path(db, prefix, qual, hygiene)?),\n+        None => prefix,\n     };\n \n     let segment = path.segment()?;"}, {"sha": "cfc69feccc6ca4ce3220e572370e7846597ccbd7", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -214,10 +214,9 @@ impl TypeRef {\n     }\n \n     pub(crate) fn from_ast_opt(ctx: &LowerCtx, node: Option<ast::Type>) -> Self {\n-        if let Some(node) = node {\n-            TypeRef::from_ast(ctx, node)\n-        } else {\n-            TypeRef::Error\n+        match node {\n+            Some(node) => TypeRef::from_ast(ctx, node),\n+            None => TypeRef::Error,\n         }\n     }\n "}, {"sha": "552603dce7a8b8ff3792d5ae1e85f2b553a4a3e6", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -48,10 +48,9 @@ impl Name {\n \n     /// Resolve a name from the text of token.\n     fn resolve(raw_text: &str) -> Name {\n-        if let Some(text) = raw_text.strip_prefix(\"r#\") {\n-            Name::new_text(SmolStr::new(text))\n-        } else {\n-            Name::new_text(raw_text.into())\n+        match raw_text.strip_prefix(\"r#\") {\n+            Some(text) => Name::new_text(SmolStr::new(text)),\n+            None => Name::new_text(raw_text.into()),\n         }\n     }\n "}, {"sha": "4dc46a2cdeaffbd33fd60f5ab2f22037fab4bc35", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -109,10 +109,9 @@ pub(crate) fn deref(\n     ty: InEnvironment<&Canonical<Ty>>,\n ) -> Option<Canonical<Ty>> {\n     let _p = profile::span(\"deref\");\n-    if let Some(derefed) = builtin_deref(&ty.goal.value) {\n-        Some(Canonical { value: derefed, binders: ty.goal.binders.clone() })\n-    } else {\n-        deref_by_trait(db, krate, ty)\n+    match builtin_deref(&ty.goal.value) {\n+        Some(derefed) => Some(Canonical { value: derefed, binders: ty.goal.binders.clone() }),\n+        None => deref_by_trait(db, krate, ty),\n     }\n }\n "}, {"sha": "36c56820eb67fa39efe54d8fbf3f73f8e4bf60e6", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -104,10 +104,9 @@ impl TyExt for Ty {\n     }\n \n     fn as_fn_def(&self, db: &dyn HirDatabase) -> Option<FunctionId> {\n-        if let Some(CallableDefId::FunctionId(func)) = self.callable_def(db) {\n-            Some(func)\n-        } else {\n-            None\n+        match self.callable_def(db) {\n+            Some(CallableDefId::FunctionId(func)) => Some(func),\n+            Some(CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_)) | None => None,\n         }\n     }\n     fn as_reference(&self) -> Option<(&Ty, Lifetime, Mutability)> {"}, {"sha": "f9439c706e302a1ddfc5c8bc792ad55deaca455f", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -105,10 +105,9 @@ impl IntRange {\n \n     #[inline]\n     fn from_range(lo: u128, hi: u128, scalar_ty: Scalar) -> IntRange {\n-        if let Scalar::Bool = scalar_ty {\n-            IntRange { range: lo..=hi }\n-        } else {\n-            unimplemented!()\n+        match scalar_ty {\n+            Scalar::Bool => IntRange { range: lo..=hi },\n+            _ => unimplemented!(),\n         }\n     }\n "}, {"sha": "adce43aa07ead99525bdabbec310bb289ad3aa6b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -167,10 +167,9 @@ impl<'a> HirFormatter<'a> {\n     }\n \n     pub fn should_truncate(&self) -> bool {\n-        if let Some(max_size) = self.max_size {\n-            self.curr_size >= max_size\n-        } else {\n-            false\n+        match self.max_size {\n+            Some(max_size) => self.curr_size >= max_size,\n+            None => false,\n         }\n     }\n "}, {"sha": "f5bc898a85b2ad01681226e2ec463a85f394f965", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -264,10 +264,9 @@ impl<'a> InferenceContext<'a> {\n \n                 // collect explicitly written argument types\n                 for arg_type in arg_types.iter() {\n-                    let arg_ty = if let Some(type_ref) = arg_type {\n-                        self.make_ty(type_ref)\n-                    } else {\n-                        self.table.new_type_var()\n+                    let arg_ty = match arg_type {\n+                        Some(type_ref) => self.make_ty(type_ref),\n+                        None => self.table.new_type_var(),\n                     };\n                     sig_tys.push(arg_ty);\n                 }"}, {"sha": "9aaf7db87be58fbb1a3d74d1b9196f40bd87b1dc", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -204,10 +204,9 @@ impl<'a> InferenceContext<'a> {\n                 } else {\n                     BindingMode::convert(*mode)\n                 };\n-                let inner_ty = if let Some(subpat) = subpat {\n-                    self.infer_pat(*subpat, &expected, default_bm)\n-                } else {\n-                    expected\n+                let inner_ty = match subpat {\n+                    Some(subpat) => self.infer_pat(*subpat, &expected, default_bm),\n+                    None => expected,\n                 };\n                 let inner_ty = self.insert_type_vars_shallow(inner_ty);\n "}, {"sha": "c40ef7f587553c3e9c7b7ef3a5e1a3350b1a2de0", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -324,10 +324,9 @@ impl<'a> InferenceTable<'a> {\n \n     /// Unify two types and register new trait goals that arise from that.\n     pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n-        let result = if let Ok(r) = self.try_unify(ty1, ty2) {\n-            r\n-        } else {\n-            return false;\n+        let result = match self.try_unify(ty1, ty2) {\n+            Ok(r) => r,\n+            Err(_) => return false,\n         };\n         self.register_infer_ok(result);\n         true"}, {"sha": "af1d5fdb6a7ccf8a7b2b31182c8aac9731ca7ef5", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -369,10 +369,9 @@ impl<'a> TyLoweringContext<'a> {\n                 Some((it, None)) => it,\n                 _ => return None,\n             };\n-        if let TypeNs::GenericParam(param_id) = resolution {\n-            Some(param_id)\n-        } else {\n-            None\n+        match resolution {\n+            TypeNs::GenericParam(param_id) => Some(param_id),\n+            _ => None,\n         }\n     }\n "}, {"sha": "8e6ab8af0f2fac19d136fffd681146fd674c486f", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -82,10 +82,9 @@ impl TyFingerprint {\n             TyKind::Ref(_, _, ty) => return TyFingerprint::for_trait_impl(ty),\n             TyKind::Tuple(_, subst) => {\n                 let first_ty = subst.interned().get(0).map(|arg| arg.assert_ty_ref(&Interner));\n-                if let Some(ty) = first_ty {\n-                    return TyFingerprint::for_trait_impl(ty);\n-                } else {\n-                    TyFingerprint::Unit\n+                match first_ty {\n+                    Some(ty) => return TyFingerprint::for_trait_impl(ty),\n+                    None => TyFingerprint::Unit,\n                 }\n             }\n             TyKind::AssociatedType(_, _)"}, {"sha": "29250dca00ccafd2fc806ea141db80f79e91a833", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -195,10 +195,9 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                 mismatch.expected.display_test(&db),\n                 mismatch.actual.display_test(&db)\n             );\n-            if let Some(annotation) = mismatches.remove(&range) {\n-                assert_eq!(actual, annotation);\n-            } else {\n-                format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual);\n+            match mismatches.remove(&range) {\n+                Some(annotation) => assert_eq!(actual, annotation),\n+                None => format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual),\n             }\n         }\n         for (expr, mismatch) in inference_result.expr_type_mismatches() {\n@@ -215,10 +214,9 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                 mismatch.expected.display_test(&db),\n                 mismatch.actual.display_test(&db)\n             );\n-            if let Some(annotation) = mismatches.remove(&range) {\n-                assert_eq!(actual, annotation);\n-            } else {\n-                format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual);\n+            match mismatches.remove(&range) {\n+                Some(annotation) => assert_eq!(actual, annotation),\n+                None => format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual),\n             }\n         }\n     }"}, {"sha": "01c1259fc54ed1e5e8c0ba72b446601b6ca057f3", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -292,10 +292,9 @@ impl TryToNav for hir::Impl {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n         let derive_attr = self.is_builtin_derive(db);\n-        let frange = if let Some(item) = &derive_attr {\n-            item.syntax().original_file_range(db)\n-        } else {\n-            src.syntax().original_file_range(db)\n+        let frange = match &derive_attr {\n+            Some(item) => item.syntax().original_file_range(db),\n+            None => src.syntax().original_file_range(db),\n         };\n         let focus_range = if derive_attr.is_some() {\n             None"}, {"sha": "4851f9aee0c7fbd331356e595db0f5bfc098db56", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -136,10 +136,9 @@ fn remove_newline(\n             }\n             T!['}'] => {\n                 // Removes: comma, newline (incl. surrounding whitespace)\n-                let space = if let Some(left) = prev.prev_sibling_or_token() {\n-                    compute_ws(left.kind(), next.kind())\n-                } else {\n-                    \" \"\n+                let space = match prev.prev_sibling_or_token() {\n+                    Some(left) => compute_ws(left.kind(), next.kind()),\n+                    None => \" \",\n                 };\n                 edit.replace(\n                     TextRange::new(prev.text_range().start(), token.text_range().end()),"}, {"sha": "e02c0dfd84b80439d5ab749de06e2457d7b0d940", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -156,7 +156,7 @@ fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameRe\n         _ => bail!(\"Cannot rename local to self outside of function\"),\n     };\n \n-    if let Some(_) = fn_def.self_param(sema.db) {\n+    if fn_def.self_param(sema.db).is_some() {\n         bail!(\"Method already has a self parameter\");\n     }\n "}, {"sha": "eb1a04c3f7614d8f2dd6f1b3c1a7f6689fbbf382", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -103,10 +103,9 @@ impl StaticIndex<'_> {\n         for token in tokens {\n             let range = token.text_range();\n             let node = token.parent().unwrap();\n-            let def = if let Some(x) = get_definition(&sema, token.clone()) {\n-                x\n-            } else {\n-                continue;\n+            let def = match get_definition(&sema, token.clone()) {\n+                Some(x) => x,\n+                None => continue,\n             };\n             let id = if let Some(x) = self.def_map.get(&def) {\n                 *x\n@@ -124,10 +123,9 @@ impl StaticIndex<'_> {\n             let token = self.tokens.get_mut(id).unwrap();\n             token.references.push(ReferenceData {\n                 range: FileRange { range, file_id },\n-                is_definition: if let Some(x) = def.try_to_nav(self.db) {\n-                    x.file_id == file_id && x.focus_or_full_range() == range\n-                } else {\n-                    false\n+                is_definition: match def.try_to_nav(self.db) {\n+                    Some(x) => x.file_id == file_id && x.focus_or_full_range() == range,\n+                    None => false,\n                 },\n             });\n             result.tokens.push((range, id));"}, {"sha": "c4577e63500cf6d69f1d79f9cd47e47098f724cc", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -330,7 +330,7 @@ fn traverse(\n             }\n         }\n \n-        if let Some(_) = macro_highlighter.highlight(element_to_highlight.clone()) {\n+        if macro_highlighter.highlight(element_to_highlight.clone()).is_some() {\n             continue;\n         }\n "}, {"sha": "92dc2ee73a31bc90f1ef449135e1b621a6c196aa", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n     let cond = while_expr.condition()?;\n \n     // Don't handle while let\n-    if let Some(_) = cond.pat() {\n+    if cond.pat().is_some() {\n         return None;\n     };\n "}, {"sha": "a367d97afed4b631f923f47ede1b3e14af9a49e1", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -827,10 +827,9 @@ impl FunctionBody {\n         locals\n             .map(|local| (local, local.source(ctx.db())))\n             .filter(|(_, src)| is_defined_outside_of_body(ctx, self, src))\n-            .filter_map(|(local, src)| {\n-                if let Either::Left(src) = src.value {\n-                    Some((local, src))\n-                } else {\n+            .filter_map(|(local, src)| match src.value {\n+                Either::Left(src) => Some((local, src)),\n+                Either::Right(_) => {\n                     stdx::never!(false, \"Local::is_self returned false, but source is SelfParam\");\n                     None\n                 }"}, {"sha": "8968e0cd098ed010e47035490e0f40b8602334bd", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -76,10 +76,11 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 None => to_extract.syntax().text_range(),\n             };\n \n-            if let Anchor::WrapInBlock(_) = anchor {\n-                format_to!(buf, \"{{ let {} = \", var_name);\n-            } else {\n-                format_to!(buf, \"let {} = \", var_name);\n+            match anchor {\n+                Anchor::Before(_) | Anchor::Replace(_) => {\n+                    format_to!(buf, \"let {} = \", var_name)\n+                }\n+                Anchor::WrapInBlock(_) => format_to!(buf, \"{{ let {} = \", var_name),\n             };\n             format_to!(buf, \"{}\", to_extract.syntax());\n "}, {"sha": "baf956355105a3c7cb24e92d5e6e4ad99032eb9f", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -192,10 +192,9 @@ impl FunctionTemplate {\n             Some(cap) => {\n                 let cursor = if self.should_focus_return_type {\n                     // Focus the return type if there is one\n-                    if let Some(ref ret_type) = self.ret_type {\n-                        ret_type.syntax()\n-                    } else {\n-                        self.tail_expr.syntax()\n+                    match self.ret_type {\n+                        Some(ref ret_type) => ret_type.syntax(),\n+                        None => self.tail_expr.syntax(),\n                     }\n                 } else {\n                     self.tail_expr.syntax()\n@@ -428,10 +427,9 @@ fn fn_args(\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n                 if !ty.is_empty() && ty.starts_with('&') {\n-                    if let Some((new_ty, _)) = useless_type_special_case(\"\", &ty[1..].to_owned()) {\n-                        new_ty\n-                    } else {\n-                        ty\n+                    match useless_type_special_case(\"\", &ty[1..].to_owned()) {\n+                        Some((new_ty, _)) => new_ty,\n+                        None => ty,\n                     }\n                 } else {\n                     ty\n@@ -523,11 +521,7 @@ fn fn_arg_type(\n         return None;\n     }\n \n-    if let Ok(rendered) = ty.display_source_code(ctx.db(), target_module.into()) {\n-        Some(rendered)\n-    } else {\n-        None\n-    }\n+    ty.display_source_code(ctx.db(), target_module.into()).ok()\n }\n \n /// Returns the position inside the current mod or file\n@@ -560,20 +554,14 @@ fn next_space_for_fn_in_module(\n ) -> Option<(FileId, GeneratedFunctionTarget)> {\n     let file = module_source.file_id.original_file(db);\n     let assist_item = match &module_source.value {\n-        hir::ModuleSource::SourceFile(it) => {\n-            if let Some(last_item) = it.items().last() {\n-                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n-            } else {\n-                GeneratedFunctionTarget::BehindItem(it.syntax().clone())\n-            }\n-        }\n-        hir::ModuleSource::Module(it) => {\n-            if let Some(last_item) = it.item_list().and_then(|it| it.items().last()) {\n-                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n-            } else {\n-                GeneratedFunctionTarget::InEmptyItemList(it.item_list()?.syntax().clone())\n-            }\n-        }\n+        hir::ModuleSource::SourceFile(it) => match it.items().last() {\n+            Some(last_item) => GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()),\n+            None => GeneratedFunctionTarget::BehindItem(it.syntax().clone()),\n+        },\n+        hir::ModuleSource::Module(it) => match it.item_list().and_then(|it| it.items().last()) {\n+            Some(last_item) => GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()),\n+            None => GeneratedFunctionTarget::InEmptyItemList(it.item_list()?.syntax().clone()),\n+        },\n         hir::ModuleSource::BlockExpr(it) => {\n             if let Some(last_item) =\n                 it.statements().take_while(|stmt| matches!(stmt, ast::Stmt::Item(_))).last()"}, {"sha": "509758a58225be338213708be10ef508b2b3ab6e", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -141,10 +141,9 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext) -> Opt\n             for (file_id, refs) in usages.into_iter() {\n                 inline_refs_for_file(file_id, refs);\n             }\n-            if let Some(refs) = current_file_usage {\n-                inline_refs_for_file(def_file, refs);\n-            } else {\n-                builder.edit_file(def_file);\n+            match current_file_usage {\n+                Some(refs) => inline_refs_for_file(def_file, refs),\n+                None => builder.edit_file(def_file),\n             }\n             if remove_def {\n                 builder.delete(ast_func.syntax().text_range());"}, {"sha": "d142397c24f0b525df9277698d3f1afbf5e26f73", "filename": "crates/ide_assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -127,12 +127,9 @@ impl<'a> AssignmentsCollector<'a> {\n         }\n     }\n     fn collect_block(&mut self, block: &ast::BlockExpr) -> Option<()> {\n-        let last_expr = block.tail_expr().or_else(|| {\n-            if let ast::Stmt::ExprStmt(stmt) = block.statements().last()? {\n-                stmt.expr()\n-            } else {\n-                None\n-            }\n+        let last_expr = block.tail_expr().or_else(|| match block.statements().last()? {\n+            ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n+            ast::Stmt::Item(_) | ast::Stmt::LetStmt(_) => None,\n         })?;\n \n         if let ast::Expr::BinExpr(expr) = last_expr {"}, {"sha": "0b33acc39be05aea56199853cd0aef1fc09f6067", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -181,10 +181,9 @@ fn find_trait_method(\n fn item_as_trait(db: &RootDatabase, item: hir::ItemInNs) -> Option<hir::Trait> {\n     let item_module_def = item.as_module_def()?;\n \n-    if let hir::ModuleDef::Trait(trait_) = item_module_def {\n-        Some(trait_)\n-    } else {\n-        item_module_def.as_assoc_item(db)?.containing_trait(db)\n+    match item_module_def {\n+        hir::ModuleDef::Trait(trait_) => Some(trait_),\n+        _ => item_module_def.as_assoc_item(db)?.containing_trait(db),\n     }\n }\n "}, {"sha": "3d4ab968fbb8c02a311ac61b58b2ea29ee34e300", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -250,13 +250,10 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             };\n             Some(make::expr_method_call(receiver, make::name_ref(method), arg_list))\n         }\n-        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::UnaryOp::Not => {\n-            if let ast::Expr::ParenExpr(parexpr) = pe.expr()? {\n-                parexpr.expr()\n-            } else {\n-                pe.expr()\n-            }\n-        }\n+        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::UnaryOp::Not => match pe.expr()? {\n+            ast::Expr::ParenExpr(parexpr) => parexpr.expr(),\n+            _ => pe.expr(),\n+        },\n         ast::Expr::Literal(lit) => match lit.kind() {\n             ast::LiteralKind::Bool(b) => match b {\n                 true => Some(ast::Expr::Literal(make::expr_literal(\"false\"))),\n@@ -276,13 +273,10 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n     let first_node_text = |pat: &ast::Pat| pat.syntax().first_child().map(|node| node.text());\n \n     let pat_head = match pat {\n-        ast::Pat::IdentPat(bind_pat) => {\n-            if let Some(p) = bind_pat.pat() {\n-                first_node_text(&p)\n-            } else {\n-                return pat.syntax().text() == var.syntax().text();\n-            }\n-        }\n+        ast::Pat::IdentPat(bind_pat) => match bind_pat.pat() {\n+            Some(p) => first_node_text(&p),\n+            None => return pat.syntax().text() == var.syntax().text(),\n+        },\n         pat => first_node_text(pat),\n     };\n "}, {"sha": "74523234b0e2f6c3b2784d63ea86a0bacf67ae66", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -144,10 +144,9 @@ fn is_valid_name(name: &str) -> bool {\n fn is_useless_method(method: &ast::MethodCallExpr) -> bool {\n     let ident = method.name_ref().and_then(|it| it.ident_token());\n \n-    if let Some(ident) = ident {\n-        USELESS_METHODS.contains(&ident.text())\n-    } else {\n-        false\n+    match ident {\n+        Some(ident) => USELESS_METHODS.contains(&ident.text()),\n+        None => false,\n     }\n }\n "}, {"sha": "d6e15e6af7b3e474aad709dec1d3639fadb17f15", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -509,10 +509,9 @@ impl<'a> CompletionContext<'a> {\n                             .and_then(|pat| self.sema.type_of_pat(&pat))\n                             .or_else(|| it.initializer().and_then(|it| self.sema.type_of_expr(&it)))\n                             .map(TypeInfo::original);\n-                        let name = if let Some(ast::Pat::IdentPat(ident)) = it.pat() {\n-                            ident.name().map(NameOrNameRef::Name)\n-                        } else {\n-                            None\n+                        let name = match it.pat() {\n+                            Some(ast::Pat::IdentPat(ident)) => ident.name().map(NameOrNameRef::Name),\n+                            Some(_) | None => None,\n                         };\n \n                         (ty, name)"}, {"sha": "904624f9ab0161d1c67a9614a826bf5832fdb3ec", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -74,10 +74,9 @@ impl<'a> FunctionRender<'a> {\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n-        let call = if let Some(receiver) = &self.receiver {\n-            format!(\"{}.{}\", receiver, &self.name)\n-        } else {\n-            self.name.clone()\n+        let call = match &self.receiver {\n+            Some(receiver) => format!(\"{}.{}\", receiver, &self.name),\n+            None => self.name.clone(),\n         };\n         let mut item =\n             CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), call.clone());"}, {"sha": "521296fd9b723a0ca4febd23c7f775c16fbdae80", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -63,10 +63,9 @@ fn build_completion(\n         .set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n         .detail(&pat);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        item.insert_snippet(snippet_cap, pat);\n-    } else {\n-        item.insert_text(pat);\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, pat),\n+        None => item.insert_text(pat),\n     };\n     item.build()\n }"}, {"sha": "810b51effd3857764d152f41c61bed7e9a65c976", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -38,10 +38,9 @@ fn build_completion(\n         .set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n         .detail(&literal);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        item.insert_snippet(snippet_cap, literal);\n-    } else {\n-        item.insert_text(literal);\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n+        None => item.insert_text(literal),\n     };\n     item.build()\n }"}, {"sha": "4fb5c770e52d9a1fe96daa52dbd52b0b0dac4042", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -318,7 +318,7 @@ pub fn source_edit_from_references(\n }\n \n fn source_edit_from_name(edit: &mut TextEditBuilder, name: &ast::Name, new_name: &str) -> bool {\n-    if let Some(_) = ast::RecordPatField::for_field_name(name) {\n+    if ast::RecordPatField::for_field_name(name).is_some() {\n         if let Some(ident_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n             cov_mark::hit!(rename_record_pat_field_name_split);\n             // Foo { ref mut field } -> Foo { new_name: ref mut field }"}, {"sha": "9cdd270b8036a2d52a40c7d2c7cff40c2f264aa7", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -47,10 +47,9 @@ impl ResolvedRule {\n     ) -> Result<ResolvedRule, SsrError> {\n         let resolver =\n             Resolver { resolution_scope, placeholders_by_stand_in: rule.placeholders_by_stand_in };\n-        let resolved_template = if let Some(template) = rule.template {\n-            Some(resolver.resolve_pattern_tree(template)?)\n-        } else {\n-            None\n+        let resolved_template = match rule.template {\n+            Some(template) => Some(resolver.resolve_pattern_tree(template)?),\n+            None => None,\n         };\n         Ok(ResolvedRule {\n             pattern: resolver.resolve_pattern_tree(rule.pattern)?,"}, {"sha": "991955fca6d79606d0eda2e88c94c01e48688735", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -67,11 +67,11 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn stmt(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::No, true)\n+        expressions::stmt(p, expressions::StmtWithSemi::No, true);\n     }\n \n     pub(crate) fn stmt_optional_semi(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::Optional, false)\n+        expressions::stmt(p, expressions::StmtWithSemi::Optional, false);\n     }\n \n     pub(crate) fn visibility(p: &mut Parser) {\n@@ -84,7 +84,7 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn item(p: &mut Parser) {\n-        items::item_or_macro(p, true)\n+        items::item_or_macro(p, true);\n     }\n \n     pub(crate) fn macro_items(p: &mut Parser) {\n@@ -109,7 +109,7 @@ pub(crate) mod entry_points {\n     }\n \n     pub(crate) fn attr(p: &mut Parser) {\n-        attributes::outer_attrs(p)\n+        attributes::outer_attrs(p);\n     }\n }\n \n@@ -128,8 +128,7 @@ pub(crate) fn reparser(\n         EXTERN_ITEM_LIST => items::extern_item_list,\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n         ASSOC_ITEM_LIST => match parent? {\n-            IMPL => items::assoc_item_list,\n-            TRAIT => items::assoc_item_list,\n+            IMPL | TRAIT => items::assoc_item_list,\n             _ => return None,\n         },\n         ITEM_LIST => items::item_list,\n@@ -246,7 +245,7 @@ fn name_r(p: &mut Parser, recovery: TokenSet) {\n }\n \n fn name(p: &mut Parser) {\n-    name_r(p, TokenSet::EMPTY)\n+    name_r(p, TokenSet::EMPTY);\n }\n \n fn name_ref(p: &mut Parser) {"}, {"sha": "1efffca515cb48bd8bd939ddb13540c3322d3083", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -2,13 +2,13 @@ use super::*;\n \n pub(super) fn inner_attrs(p: &mut Parser) {\n     while p.at(T![#]) && p.nth(1) == T![!] {\n-        attr(p, true)\n+        attr(p, true);\n     }\n }\n \n pub(super) fn outer_attrs(p: &mut Parser) {\n     while p.at(T![#]) {\n-        attr(p, false)\n+        attr(p, false);\n     }\n }\n "}, {"sha": "aa171674ed9f0d095cfe379f28ebda2bf1f73827", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -139,7 +139,7 @@ pub(super) fn expr_block_contents(p: &mut Parser) {\n             continue;\n         }\n \n-        stmt(p, StmtWithSemi::Yes, false)\n+        stmt(p, StmtWithSemi::Yes, false);\n     }\n }\n \n@@ -311,7 +311,7 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n         _ => {\n             // test full_range_expr\n             // fn foo() { xs[..]; }\n-            for &op in [T![..=], T![..]].iter() {\n+            for op in [T![..=], T![..]] {\n                 if p.at(op) {\n                     m = p.start();\n                     p.bump(op);\n@@ -468,12 +468,12 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     let m = lhs.precede(p);\n     p.bump(T![.]);\n     if p.at(IDENT) || p.at(INT_NUMBER) {\n-        name_ref_or_index(p)\n+        name_ref_or_index(p);\n     } else if p.at(FLOAT_NUMBER) {\n         // FIXME: How to recover and instead parse INT + T![.]?\n         p.bump_any();\n     } else {\n-        p.error(\"expected field name or number\")\n+        p.error(\"expected field name or number\");\n     }\n     m.complete(p, FIELD_EXPR)\n }"}, {"sha": "7075ae297f01541e0b45087c4334e3debe34909b", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -374,7 +374,7 @@ fn match_expr(p: &mut Parser) -> CompletedMarker {\n     if p.at(T!['{']) {\n         match_arm_list(p);\n     } else {\n-        p.error(\"expected `{`\")\n+        p.error(\"expected `{`\");\n     }\n     m.complete(p, MATCH_EXPR)\n }\n@@ -602,7 +602,7 @@ fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     if p.at(T!['{']) {\n         stmt_list(p);\n     } else {\n-        p.error(\"expected a block\")\n+        p.error(\"expected a block\");\n     }\n     m.complete(p, BLOCK_EXPR)\n }\n@@ -639,7 +639,7 @@ fn meta_var_expr(p: &mut Parser) -> CompletedMarker {\n         }\n         _ => {\n             while !p.at(R_DOLLAR) {\n-                p.bump_any()\n+                p.bump_any();\n             }\n             p.bump(R_DOLLAR);\n             m.complete(p, ERROR)"}, {"sha": "00ccbf5010eefb0f06f50edbed0836db15324933", "filename": "crates/parser/src/grammar/generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -34,7 +34,7 @@ fn generic_param(p: &mut Parser) {\n         T![const] => const_param(p, m),\n         _ => {\n             m.abandon(p);\n-            p.err_and_bump(\"expected type parameter\")\n+            p.err_and_bump(\"expected type parameter\");\n         }\n     }\n }\n@@ -62,7 +62,7 @@ fn type_param(p: &mut Parser, m: Marker) {\n         // test type_param_default\n         // struct S<T = i32>;\n         p.bump(T![=]);\n-        types::type_(p)\n+        types::type_(p);\n     }\n     m.complete(p, TYPE_PARAM);\n }"}, {"sha": "9de9afde5d362464980d648f3c7ff5124bd89717", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -20,7 +20,7 @@ use super::*;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attrs(p);\n     while !p.at(EOF) && !(p.at(T!['}']) && stop_on_r_curly) {\n-        item_or_macro(p, stop_on_r_curly)\n+        item_or_macro(p, stop_on_r_curly);\n     }\n }\n \n@@ -165,7 +165,7 @@ pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n                     p.bump_remap(T![default]);\n                     p.bump(T![async]);\n                     if is_unsafe {\n-                        p.bump(T![unsafe])\n+                        p.bump(T![unsafe]);\n                     }\n                     has_mods = true;\n                 }\n@@ -404,7 +404,7 @@ fn fn_(p: &mut Parser, m: Marker) {\n         // trait T { fn foo(); }\n         p.bump(T![;]);\n     } else {\n-        expressions::block_expr(p)\n+        expressions::block_expr(p);\n     }\n     m.complete(p, FN);\n }"}, {"sha": "42ebecc6d6c8a341601f53d1113e2063feb11b47", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -58,7 +58,7 @@ pub(super) fn enum_(p: &mut Parser, m: Marker) {\n     if p.at(T!['{']) {\n         variant_list(p);\n     } else {\n-        p.error(\"expected `{`\")\n+        p.error(\"expected `{`\");\n     }\n     m.complete(p, ENUM);\n }"}, {"sha": "98064cd98ad6f5b794df0f0f89d81cc4b631ad38", "filename": "crates/parser/src/grammar/items/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -4,12 +4,12 @@ use super::*;\n // const C: u32 = 92;\n pub(super) fn konst(p: &mut Parser, m: Marker) {\n     p.bump(T![const]);\n-    const_or_static(p, m, true)\n+    const_or_static(p, m, true);\n }\n \n pub(super) fn static_(p: &mut Parser, m: Marker) {\n     p.bump(T![static]);\n-    const_or_static(p, m, false)\n+    const_or_static(p, m, false);\n }\n \n fn const_or_static(p: &mut Parser, m: Marker, is_const: bool) {\n@@ -27,7 +27,7 @@ fn const_or_static(p: &mut Parser, m: Marker, is_const: bool) {\n     if p.at(T![:]) {\n         types::ascription(p);\n     } else {\n-        p.error(\"missing type for `const` or `static`\")\n+        p.error(\"missing type for `const` or `static`\");\n     }\n     if p.eat(T![=]) {\n         expressions::expr(p);"}, {"sha": "a000f515cc084aba2238c6579c1a09cd7fe1e92b", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -6,21 +6,21 @@ use super::*;\n // fn c(x: i32, ) {}\n // fn d(x: i32, y: ()) {}\n pub(super) fn param_list_fn_def(p: &mut Parser) {\n-    list_(p, Flavor::FnDef)\n+    list_(p, Flavor::FnDef);\n }\n \n // test param_list_opt_patterns\n // fn foo<F: FnMut(&mut Foo<'a>)>(){}\n pub(super) fn param_list_fn_trait(p: &mut Parser) {\n-    list_(p, Flavor::FnTrait)\n+    list_(p, Flavor::FnTrait);\n }\n \n pub(super) fn param_list_fn_ptr(p: &mut Parser) {\n-    list_(p, Flavor::FnPointer)\n+    list_(p, Flavor::FnPointer);\n }\n \n pub(super) fn param_list_closure(p: &mut Parser) {\n-    list_(p, Flavor::Closure)\n+    list_(p, Flavor::Closure);\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -104,13 +104,13 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n         Flavor::FnDef => {\n             patterns::pattern(p);\n             if variadic_param(p) {\n-                res = Variadic(true)\n+                res = Variadic(true);\n             } else if p.at(T![:]) {\n-                types::ascription(p)\n+                types::ascription(p);\n             } else {\n                 // test_err missing_fn_param_type\n                 // fn f(x y: i32, z, t: i32) {}\n-                p.error(\"missing type for function parameter\")\n+                p.error(\"missing type for function parameter\");\n             }\n         }\n         // test value_parameters_no_patterns\n@@ -128,11 +128,11 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n             if (p.at(IDENT) || p.at(UNDERSCORE)) && p.nth(1) == T![:] && !p.nth_at(1, T![::]) {\n                 patterns::pattern_single(p);\n                 if variadic_param(p) {\n-                    res = Variadic(true)\n+                    res = Variadic(true);\n                 } else if p.at(T![:]) {\n-                    types::ascription(p)\n+                    types::ascription(p);\n                 } else {\n-                    p.error(\"missing type for function parameter\")\n+                    p.error(\"missing type for function parameter\");\n                 }\n             } else {\n                 types::type_(p);"}, {"sha": "0cc0ed31aaf05940fe5a8e18fb10fd6cc0a44729", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -16,15 +16,15 @@ pub(super) fn is_use_path_start(p: &Parser) -> bool {\n }\n \n pub(super) fn use_path(p: &mut Parser) {\n-    path(p, Mode::Use)\n+    path(p, Mode::Use);\n }\n \n pub(crate) fn type_path(p: &mut Parser) {\n-    path(p, Mode::Type)\n+    path(p, Mode::Type);\n }\n \n pub(super) fn expr_path(p: &mut Parser) {\n-    path(p, Mode::Expr)\n+    path(p, Mode::Expr);\n }\n \n pub(crate) fn type_path_for_qualifier(p: &mut Parser, qual: CompletedMarker) -> CompletedMarker {\n@@ -117,7 +117,7 @@ fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n                 params::param_list_fn_trait(p);\n                 opt_ret_type(p);\n             } else {\n-                generic_args::opt_generic_arg_list(p, false)\n+                generic_args::opt_generic_arg_list(p, false);\n             }\n         }\n         Mode::Expr => generic_args::opt_generic_arg_list(p, true),"}, {"sha": "5fe1a7b13bede09aed8da433c814fefe2e9bf20c", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn pattern(p: &mut Parser) {\n \n /// Parses a pattern list separated by pipes `|`.\n pub(super) fn pattern_top(p: &mut Parser) {\n-    pattern_top_r(p, PAT_RECOVERY_SET)\n+    pattern_top_r(p, PAT_RECOVERY_SET);\n }\n \n pub(crate) fn pattern_single(p: &mut Parser) {\n@@ -78,7 +78,7 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n \n         // FIXME: support half_open_range_patterns (`..=2`),\n         // exclusive_range_pattern (`..5`) with missing lhs\n-        for &range_op in [T![...], T![..=], T![..]].iter() {\n+        for range_op in [T![...], T![..=], T![..]] {\n             if p.at(range_op) {\n                 let m = lhs.precede(p);\n                 p.bump(range_op);"}, {"sha": "1a6fb651cbd91a8a3220a7f4e2ec6466881b2269", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -57,7 +57,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n pub(super) fn ascription(p: &mut Parser) {\n     assert!(p.at(T![:]));\n     p.bump(T![:]);\n-    type_(p)\n+    type_(p);\n }\n \n fn paren_or_tuple_type(p: &mut Parser) {\n@@ -204,7 +204,7 @@ fn fn_ptr_type(p: &mut Parser) {\n     if p.at(T!['(']) {\n         params::param_list_fn_ptr(p);\n     } else {\n-        p.error(\"expected parameters\")\n+        p.error(\"expected parameters\");\n     }\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n@@ -274,7 +274,7 @@ fn dyn_trait_type(p: &mut Parser) {\n // type C = self::Foo;\n // type D = super::Foo;\n pub(super) fn path_type(p: &mut Parser) {\n-    path_type_(p, true)\n+    path_type_(p, true);\n }\n \n // test macro_call_type"}, {"sha": "89dfea52f8f9d1c0c6d6d6f3ccd276b65e8ee4ed", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -177,7 +177,7 @@ impl<'t> Parser<'t> {\n         if kind == EOF {\n             return;\n         }\n-        self.do_bump(kind, 1)\n+        self.do_bump(kind, 1);\n     }\n \n     /// Advances the parser by one token, remapping its kind.\n@@ -200,7 +200,7 @@ impl<'t> Parser<'t> {\n     /// does.\n     pub(crate) fn error<T: Into<String>>(&mut self, message: T) {\n         let msg = ParseError(Box::new(message.into()));\n-        self.push_event(Event::Error { msg })\n+        self.push_event(Event::Error { msg });\n     }\n \n     /// Consume the next token if it is `kind` or emit an error\n@@ -258,7 +258,7 @@ impl<'t> Parser<'t> {\n     }\n \n     fn push_event(&mut self, event: Event) {\n-        self.events.push(event)\n+        self.events.push(event);\n     }\n }\n "}, {"sha": "cd4894c1e8b5f3398d3efd72f3d7d583b0d5687b", "filename": "crates/parser/src/token_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fparser%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftoken_set.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -14,7 +14,7 @@ impl TokenSet {\n         let mut i = 0;\n         while i < kinds.len() {\n             res |= mask(kinds[i]);\n-            i += 1\n+            i += 1;\n         }\n         TokenSet(res)\n     }"}, {"sha": "41731c8d27b030612aaaa63b913e2c82acfec8d5", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -271,7 +271,7 @@ impl RelPath {\n /// Taken from <https://github.com/rust-lang/cargo/blob/79c769c3d7b4c2cf6a93781575b7f592ef974255/src/cargo/util/paths.rs#L60-L85>\n fn normalize_path(path: &Path) -> PathBuf {\n     let mut components = path.components().peekable();\n-    let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().cloned() {\n+    let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().copied() {\n         components.next();\n         PathBuf::from(c.as_os_str())\n     } else {"}, {"sha": "8437444e183a0ec5c971217a8346476c3d9e5bce", "filename": "crates/proc_macro_api/src/msg/flat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -246,7 +246,7 @@ impl<'a> Writer<'a> {\n \n     fn enqueue(&mut self, subtree: &'a tt::Subtree) -> u32 {\n         let idx = self.subtree.len();\n-        let delimiter_id = subtree.delimiter.map(|it| it.id).unwrap_or_else(TokenId::unspecified);\n+        let delimiter_id = subtree.delimiter.map_or(TokenId::unspecified(), |it| it.id);\n         let delimiter_kind = subtree.delimiter.map(|it| it.kind);\n         self.subtree.push(SubtreeRepr { id: delimiter_id, kind: delimiter_kind, tt: [!0, !0] });\n         self.work.push_back((idx, subtree));\n@@ -320,7 +320,7 @@ impl Reader {\n                     })\n                     .collect(),\n             };\n-            res[i] = Some(s)\n+            res[i] = Some(s);\n         }\n \n         res[0].take().unwrap()"}, {"sha": "a77433a551219d2ccd8d1d9a87bb1db7a7a65250", "filename": "crates/proc_macro_srv/src/abis/abi_1_47/rustc_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -497,10 +497,9 @@ impl server::Literal for Rustc {\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n-        let n = if let Ok(n) = n.parse::<i128>() {\n-            n.to_string()\n-        } else {\n-            n.parse::<u128>().unwrap().to_string()\n+        let n = match n.parse::<i128>() {\n+            Ok(n) => n.to_string(),\n+            Err(_) => n.parse::<u128>().unwrap().to_string(),\n         };\n         Literal { text: n.into(), id: tt::TokenId::unspecified() }\n     }"}, {"sha": "498fa7ea2dca7fd736d6e8320feb21eb27148355", "filename": "crates/proc_macro_srv/src/abis/abi_1_55/rustc_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -500,10 +500,9 @@ impl server::Literal for Rustc {\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n-        let n = if let Ok(n) = n.parse::<i128>() {\n-            n.to_string()\n-        } else {\n-            n.parse::<u128>().unwrap().to_string()\n+        let n = match n.parse::<i128>() {\n+            Ok(n) => n.to_string(),\n+            Err(_) => n.parse::<u128>().unwrap().to_string(),\n         };\n         Literal { text: n.into(), id: tt::TokenId::unspecified() }\n     }"}, {"sha": "fb8a4c8cbe878d4a757d740204cb792d128101bf", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/rustc_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -504,10 +504,9 @@ impl server::Literal for Rustc {\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n-        let n = if let Ok(n) = n.parse::<i128>() {\n-            n.to_string()\n-        } else {\n-            n.parse::<u128>().unwrap().to_string()\n+        let n = match n.parse::<i128>() {\n+            Ok(n) => n.to_string(),\n+            Err(_) => n.parse::<u128>().unwrap().to_string(),\n         };\n         Literal { text: n.into(), id: tt::TokenId::unspecified() }\n     }"}, {"sha": "b562c193e7137b9c420b5377f5a3fe42740479e4", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -93,7 +93,7 @@ struct ProfilerImpl {\n impl ProfileSpan {\n     pub fn detail(mut self, detail: impl FnOnce() -> String) -> ProfileSpan {\n         if let Some(profiler) = &mut self.0 {\n-            profiler.detail = Some(detail())\n+            profiler.detail = Some(detail());\n         }\n         self\n     }\n@@ -114,7 +114,7 @@ impl HeartbeatSpan {\n     #[inline]\n     pub fn new(enabled: bool) -> Self {\n         if enabled {\n-            with_profile_stack(|it| it.heartbeats(true))\n+            with_profile_stack(|it| it.heartbeats(true));\n         }\n         Self { enabled }\n     }\n@@ -123,7 +123,7 @@ impl HeartbeatSpan {\n impl Drop for HeartbeatSpan {\n     fn drop(&mut self) {\n         if self.enabled {\n-            with_profile_stack(|it| it.heartbeats(false))\n+            with_profile_stack(|it| it.heartbeats(false));\n         }\n     }\n }\n@@ -238,7 +238,7 @@ impl ProfileStack {\n             self.heartbeat(frame.heartbeats);\n             let avg_span = duration / (frame.heartbeats + 1);\n             if avg_span > self.filter.heartbeat_longer_than {\n-                eprintln!(\"Too few heartbeats {} ({}/{:?})?\", label, frame.heartbeats, duration)\n+                eprintln!(\"Too few heartbeats {} ({}/{:?})?\", label, frame.heartbeats, duration);\n             }\n         }\n \n@@ -292,7 +292,7 @@ fn print(\n         accounted_for += tree[child].duration;\n \n         if tree[child].duration.as_millis() > longer_than.as_millis() {\n-            print(tree, child, level + 1, longer_than, out)\n+            print(tree, child, level + 1, longer_than, out);\n         } else {\n             let (total_duration, cnt) =\n                 short_children.entry(tree[child].label).or_insert((Duration::default(), 0));\n@@ -301,7 +301,7 @@ fn print(\n         }\n     }\n \n-    for (child_msg, (duration, count)) in short_children.iter() {\n+    for (child_msg, (duration, count)) in &short_children {\n         writeln!(out, \"    {}{} - {} ({} calls)\", current_indent, ms(*duration), child_msg, count)\n             .expect(\"printing profiling info\");\n     }"}, {"sha": "c5f6bccca1143a418b1479afaa85c042568a2ced", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -92,7 +92,7 @@ pub fn cpu_span() -> CpuSpan {\n     {\n         eprintln!(\n             r#\"cpu profiling is disabled, uncomment `default = [ \"cpu_profiler\" ]` in Cargo.toml to enable.\"#\n-        )\n+        );\n     }\n \n     CpuSpan { _private: () }"}, {"sha": "43b1ce9e6dab5ff0afef9b8be897eb3c27147297", "filename": "crates/profile/src/stop_watch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fstop_watch.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -70,15 +70,15 @@ impl fmt::Display for StopWatchSpan {\n             let mut prefix = \"\";\n             if instructions > 10000 {\n                 instructions /= 1000;\n-                prefix = \"k\"\n+                prefix = \"k\";\n             }\n             if instructions > 10000 {\n                 instructions /= 1000;\n-                prefix = \"m\"\n+                prefix = \"m\";\n             }\n             if instructions > 10000 {\n                 instructions /= 1000;\n-                prefix = \"g\"\n+                prefix = \"g\";\n             }\n             write!(f, \", {}{}instr\", instructions, prefix)?;\n         }"}, {"sha": "99780343fd28a94ee03831fc8fe9cfde85235c3b", "filename": "crates/rust-analyzer/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Frust-analyzer%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Frust-analyzer%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fbuild.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -4,7 +4,7 @@ use std::{env, path::PathBuf, process::Command};\n \n fn main() {\n     set_rerun();\n-    println!(\"cargo:rustc-env=REV={}\", rev())\n+    println!(\"cargo:rustc-env=REV={}\", rev());\n }\n \n fn set_rerun() {"}, {"sha": "6cb6b0a8d02482a411e42eda0af861d58f59b8e2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -427,10 +427,9 @@ pub(crate) fn handle_workspace_symbol(\n         // If no explicit marker was set, check request params. If that's also empty\n         // use global config.\n         if !all_symbols {\n-            let search_kind = if let Some(ref search_kind) = params.search_kind {\n-                search_kind\n-            } else {\n-                &config.search_kind\n+            let search_kind = match params.search_kind {\n+                Some(ref search_kind) => search_kind,\n+                None => &config.search_kind,\n             };\n             all_symbols = match search_kind {\n                 lsp_ext::WorkspaceSymbolSearchKind::OnlyTypes => false,\n@@ -439,10 +438,9 @@ pub(crate) fn handle_workspace_symbol(\n         }\n \n         if !libs {\n-            let search_scope = if let Some(ref search_scope) = params.search_scope {\n-                search_scope\n-            } else {\n-                &config.search_scope\n+            let search_scope = match params.search_scope {\n+                Some(ref search_scope) => search_scope,\n+                None => &config.search_scope,\n             };\n             libs = match search_scope {\n                 lsp_ext::WorkspaceSymbolSearchScope::Workspace => false,"}, {"sha": "398e846a14c2a8ab4dec9c0f62fae2b22abd48d3", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -33,9 +33,9 @@ pub fn list_files(dir: &Path) -> Vec<PathBuf> {\n                 path.file_name().unwrap_or_default().to_str().unwrap_or_default().starts_with('.');\n             if !is_hidden {\n                 if file_type.is_dir() {\n-                    work.push(path)\n+                    work.push(path);\n                 } else if file_type.is_file() {\n-                    res.push(path)\n+                    res.push(path);\n                 }\n             }\n         }\n@@ -66,7 +66,7 @@ impl CommentBlock {\n                         panic!(\n                             \"Use plain (non-doc) comments with tags like {}:\\n    {}\",\n                             tag, first\n-                        )\n+                        );\n                     }\n \n                     block.id = id.trim().to_string();\n@@ -106,7 +106,7 @@ impl CommentBlock {\n             }\n         }\n         if !block.contents.is_empty() {\n-            res.push(block)\n+            res.push(block);\n         }\n         res\n     }\n@@ -139,7 +139,7 @@ fn ensure_rustfmt() {\n         panic!(\n             \"Failed to run rustfmt from toolchain 'stable'. \\\n                  Please run `rustup component add rustfmt --toolchain stable` to install it.\",\n-        )\n+        );\n     }\n }\n \n@@ -185,7 +185,7 @@ pub fn ensure_file_contents(file: &Path, contents: &str) {\n         let _ = fs::create_dir_all(parent);\n     }\n     fs::write(file, contents).unwrap();\n-    panic!(\"some file was not up to date and has been updated, simply re-run the tests\")\n+    panic!(\"some file was not up to date and has been updated, simply re-run the tests\");\n }\n \n fn normalize_newlines(s: &str) -> String {"}, {"sha": "bfa6024679bdb9a3dc296f60dcb060e23b4acb71", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -45,7 +45,7 @@ fn to_snake_case<F: Fn(&char) -> char>(s: &str, change_case: F) -> String {\n         if c.is_ascii_uppercase() && prev {\n             // This check is required to not translate `Weird_Case` into `weird__case`.\n             if !buf.ends_with('_') {\n-                buf.push('_')\n+                buf.push('_');\n             }\n         }\n         prev = true;\n@@ -60,7 +60,7 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n         return;\n     }\n     // FIXME: do this in place.\n-    *buf = buf.replace(from, to)\n+    *buf = buf.replace(from, to);\n }\n \n pub fn trim_indent(mut text: &str) -> String {\n@@ -101,7 +101,7 @@ pub fn defer<F: FnOnce()>(f: F) -> impl Drop {\n     impl<F: FnOnce()> Drop for D<F> {\n         fn drop(&mut self) {\n             if let Some(f) = self.0.take() {\n-                f()\n+                f();\n             }\n         }\n     }"}, {"sha": "f8fafc5a677242ceb7532dcf62e28f444adc05d4", "filename": "crates/stdx/src/panic_context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fpanic_context.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -25,25 +25,25 @@ impl PanicContext {\n                 if !ctx.is_empty() {\n                     eprintln!(\"Panic context:\");\n                     for frame in ctx.iter() {\n-                        eprintln!(\"> {}\\n\", frame)\n+                        eprintln!(\"> {}\\n\", frame);\n                     }\n                 }\n-                default_hook(panic_info)\n-            })\n+                default_hook(panic_info);\n+            });\n         };\n-        panic::set_hook(Box::new(hook))\n+        panic::set_hook(Box::new(hook));\n     }\n }\n \n impl Drop for PanicContext {\n     fn drop(&mut self) {\n-        with_ctx(|ctx| assert!(ctx.pop().is_some()))\n+        with_ctx(|ctx| assert!(ctx.pop().is_some()));\n     }\n }\n \n fn with_ctx(f: impl FnOnce(&mut Vec<String>)) {\n     thread_local! {\n         static CTX: RefCell<Vec<String>> = RefCell::new(Vec::new());\n     }\n-    CTX.with(|ctx| f(&mut *ctx.borrow_mut()))\n+    CTX.with(|ctx| f(&mut *ctx.borrow_mut()));\n }"}, {"sha": "34cabf7807d97f48d55fe8111d68ff6128fc8ae7", "filename": "crates/stdx/src/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fstdx%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fstdx%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fprocess.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -42,9 +42,9 @@ pub fn streaming_output(\n                 };\n                 for line in String::from_utf8_lossy(new_lines).lines() {\n                     if is_out {\n-                        on_stdout_line(line)\n+                        on_stdout_line(line);\n                     } else {\n-                        on_stderr_line(line)\n+                        on_stderr_line(line);\n                     }\n                 }\n             }"}, {"sha": "bce02971c610ee93cc8e1f44c5c70c541e5896ff", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -112,15 +112,15 @@ impl TreeDiff {\n     pub fn into_text_edit(&self, builder: &mut TextEditBuilder) {\n         let _p = profile::span(\"into_text_edit\");\n \n-        for (anchor, to) in self.insertions.iter() {\n+        for (anchor, to) in &self.insertions {\n             let offset = match anchor {\n                 TreeDiffInsertPos::After(it) => it.text_range().end(),\n                 TreeDiffInsertPos::AsFirstChild(it) => it.text_range().start(),\n             };\n             to.iter().for_each(|to| builder.insert(offset, to.to_string()));\n         }\n-        for (from, to) in self.replacements.iter() {\n-            builder.replace(from.text_range(), to.to_string())\n+        for (from, to) in &self.replacements {\n+            builder.replace(from.text_range(), to.to_string());\n         }\n         for text_range in self.deletions.iter().map(SyntaxElement::text_range) {\n             builder.delete(text_range);\n@@ -217,9 +217,8 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                             cov_mark::hit!(diff_insertions);\n                             insert = true;\n                             break;\n-                        } else {\n-                            look_ahead_scratch.push(rhs_child);\n                         }\n+                        look_ahead_scratch.push(rhs_child);\n                     }\n                     let drain = look_ahead_scratch.drain(..);\n                     if insert {\n@@ -233,7 +232,7 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                         diff.insertions.entry(insert_pos).or_insert_with(Vec::new).extend(drain);\n                         rhs_children = rhs_children_clone;\n                     } else {\n-                        go(diff, lhs_ele, rhs_ele)\n+                        go(diff, lhs_ele, rhs_ele);\n                     }\n                 }\n             }"}, {"sha": "43a9c6756d576dba7ed2229462ae3ac3cc756292", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -126,7 +126,7 @@ impl IndentLevel {\n             if let Some(ws) = ast::Whitespace::cast(token) {\n                 if ws.text().contains('\\n') {\n                     let new_ws = make::tokens::whitespace(&format!(\"{}{}\", ws.syntax(), self));\n-                    ted::replace(ws.syntax(), &new_ws)\n+                    ted::replace(ws.syntax(), &new_ws);\n                 }\n             }\n         }\n@@ -143,7 +143,7 @@ impl IndentLevel {\n                     let new_ws = make::tokens::whitespace(\n                         &ws.syntax().text().replace(&format!(\"\\n{}\", self), \"\\n\"),\n                     );\n-                    ted::replace(ws.syntax(), &new_ws)\n+                    ted::replace(ws.syntax(), &new_ws);\n                 }\n             }\n         }"}, {"sha": "552d6fc1e3ebbf699355dd0ef0cc4210e819fffe", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -49,7 +49,7 @@ impl GenericParamsOwnerEdit for ast::Fn {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -60,10 +60,9 @@ impl GenericParamsOwnerEdit for ast::Impl {\n         match self.generic_param_list() {\n             Some(it) => it,\n             None => {\n-                let position = if let Some(imp_token) = self.impl_token() {\n-                    Position::after(imp_token)\n-                } else {\n-                    Position::last_child_of(self.syntax())\n+                let position = match self.impl_token() {\n+                    Some(imp_token) => Position::after(imp_token),\n+                    None => Position::last_child_of(self.syntax()),\n                 };\n                 create_generic_param_list(position)\n             }\n@@ -72,12 +71,11 @@ impl GenericParamsOwnerEdit for ast::Impl {\n \n     fn get_or_create_where_clause(&self) -> ast::WhereClause {\n         if self.where_clause().is_none() {\n-            let position = if let Some(items) = self.assoc_item_list() {\n-                Position::before(items.syntax())\n-            } else {\n-                Position::last_child_of(self.syntax())\n+            let position = match self.assoc_item_list() {\n+                Some(items) => Position::before(items.syntax()),\n+                None => Position::last_child_of(self.syntax()),\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -102,12 +100,11 @@ impl GenericParamsOwnerEdit for ast::Trait {\n \n     fn get_or_create_where_clause(&self) -> ast::WhereClause {\n         if self.where_clause().is_none() {\n-            let position = if let Some(items) = self.assoc_item_list() {\n-                Position::before(items.syntax())\n-            } else {\n-                Position::last_child_of(self.syntax())\n+            let position = match self.assoc_item_list() {\n+                Some(items) => Position::before(items.syntax()),\n+                None => Position::last_child_of(self.syntax()),\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -145,7 +142,7 @@ impl GenericParamsOwnerEdit for ast::Struct {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -177,7 +174,7 @@ impl GenericParamsOwnerEdit for ast::Enum {\n             } else {\n                 Position::last_child_of(self.syntax())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position);\n         }\n         self.where_clause().unwrap()\n     }\n@@ -234,7 +231,7 @@ impl ast::GenericParamList {\n             }\n             None => {\n                 let after_l_angle = Position::after(self.l_angle_token().unwrap());\n-                ted::insert(after_l_angle, generic_param.syntax())\n+                ted::insert(after_l_angle, generic_param.syntax());\n             }\n         }\n     }\n@@ -247,18 +244,15 @@ impl ast::WhereClause {\n                 ted::append_child_raw(self.syntax(), make::token(T![,]));\n             }\n         }\n-        ted::append_child(self.syntax(), predicate.syntax())\n+        ted::append_child(self.syntax(), predicate.syntax());\n     }\n }\n \n impl ast::TypeBoundList {\n     pub fn remove(&self) {\n-        if let Some(colon) =\n-            self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:])\n-        {\n-            ted::remove_all(colon..=self.syntax().clone().into())\n-        } else {\n-            ted::remove(self.syntax())\n+        match self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:]) {\n+            Some(colon) => ted::remove_all(colon..=self.syntax().clone().into()),\n+            None => ted::remove(self.syntax()),\n         }\n     }\n }\n@@ -267,15 +261,15 @@ impl ast::PathSegment {\n     pub fn get_or_create_generic_arg_list(&self) -> ast::GenericArgList {\n         if self.generic_arg_list().is_none() {\n             let arg_list = make::generic_arg_list().clone_for_update();\n-            ted::append_child(self.syntax(), arg_list.syntax())\n+            ted::append_child(self.syntax(), arg_list.syntax());\n         }\n         self.generic_arg_list().unwrap()\n     }\n }\n \n impl ast::UseTree {\n     pub fn remove(&self) {\n-        for &dir in [Direction::Next, Direction::Prev].iter() {\n+        for dir in [Direction::Next, Direction::Prev] {\n             if let Some(next_use_tree) = neighbor(self, dir) {\n                 let separators = self\n                     .syntax()\n@@ -286,7 +280,7 @@ impl ast::UseTree {\n                 break;\n             }\n         }\n-        ted::remove(self.syntax())\n+        ted::remove(self.syntax());\n     }\n }\n \n@@ -301,13 +295,13 @@ impl ast::Use {\n             let ws_text = next_ws.syntax().text();\n             if let Some(rest) = ws_text.strip_prefix('\\n') {\n                 if rest.is_empty() {\n-                    ted::remove(next_ws.syntax())\n+                    ted::remove(next_ws.syntax());\n                 } else {\n-                    ted::replace(next_ws.syntax(), make::tokens::whitespace(rest))\n+                    ted::replace(next_ws.syntax(), make::tokens::whitespace(rest));\n                 }\n             }\n         }\n-        ted::remove(self.syntax())\n+        ted::remove(self.syntax());\n     }\n }\n \n@@ -455,7 +449,7 @@ impl ast::RecordExprField {\n     /// This will either replace the initializer, or in the case that this is a shorthand convert\n     /// the initializer into the name ref and insert the expr as the new initializer.\n     pub fn replace_expr(&self, expr: ast::Expr) {\n-        if let Some(_) = self.name_ref() {\n+        if self.name_ref().is_some() {\n             match self.expr() {\n                 Some(prev) => ted::replace(prev.syntax(), expr.syntax()),\n                 None => ted::append_child(self.syntax(), expr.syntax()),\n@@ -525,7 +519,7 @@ pub trait Indent: AstNode + Clone + Sized {\n     fn reindent_to(&self, target_level: IndentLevel) {\n         let current_level = IndentLevel::from_node(self.syntax());\n         self.dedent(current_level);\n-        self.indent(target_level)\n+        self.indent(target_level);\n     }\n }\n "}, {"sha": "f16dcd56e96f411a7be957b545ea93490ab64632", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -257,7 +257,7 @@ pub fn block_expr(\n         format_to!(buf, \"    {}\\n\", stmt);\n     }\n     if let Some(tail_expr) = tail_expr {\n-        format_to!(buf, \"    {}\\n\", tail_expr)\n+        format_to!(buf, \"    {}\\n\", tail_expr);\n     }\n     buf += \"}\";\n     ast_from_text(&format!(\"fn f() {}\", buf))\n@@ -644,9 +644,14 @@ pub fn fn_(\n     ret_type: Option<ast::RetType>,\n     is_async: bool,\n ) -> ast::Fn {\n-    let type_params =\n-        if let Some(type_params) = type_params { format!(\"<{}>\", type_params) } else { \"\".into() };\n-    let ret_type = if let Some(ret_type) = ret_type { format!(\"{} \", ret_type) } else { \"\".into() };\n+    let type_params = match type_params {\n+        Some(type_params) => format!(\"<{}>\", type_params),\n+        None => \"\".into(),\n+    };\n+    let ret_type = match ret_type {\n+        Some(ret_type) => format!(\"{} \", ret_type),\n+        None => \"\".into(),\n+    };\n     let visibility = match visibility {\n         None => String::new(),\n         Some(it) => format!(\"{} \", it),"}, {"sha": "2e6544f090e04efe67a98af7e23cd89b00efb259", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -276,9 +276,9 @@ impl ast::Path {\n \n impl ast::Use {\n     pub fn is_simple_glob(&self) -> bool {\n-        self.use_tree()\n-            .map(|use_tree| use_tree.use_tree_list().is_none() && use_tree.star_token().is_some())\n-            .unwrap_or(false)\n+        self.use_tree().map_or(false, |use_tree| {\n+            use_tree.use_tree_list().is_none() && use_tree.star_token().is_some()\n+        })\n     }\n }\n \n@@ -549,10 +549,9 @@ impl ast::FieldExpr {\n     }\n \n     pub fn field_access(&self) -> Option<FieldKind> {\n-        if let Some(nr) = self.name_ref() {\n-            Some(FieldKind::Name(nr))\n-        } else {\n-            self.index_token().map(FieldKind::Index)\n+        match self.name_ref() {\n+            Some(nr) => Some(FieldKind::Name(nr)),\n+            None => self.index_token().map(FieldKind::Index),\n         }\n     }\n }"}, {"sha": "2f8312d5d1ece495311cf8239add7bdfe139cf8a", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -283,10 +283,9 @@ pub trait HasFormatSpecifier: AstToken {\n     where\n         F: FnMut(TextRange, FormatSpecifier),\n     {\n-        let char_ranges = if let Some(char_ranges) = self.char_ranges() {\n-            char_ranges\n-        } else {\n-            return;\n+        let char_ranges = match self.char_ranges() {\n+            Some(char_ranges) => char_ranges,\n+            None => return,\n         };\n         let mut chars = char_ranges.iter().peekable();\n \n@@ -528,10 +527,11 @@ pub trait HasFormatSpecifier: AstToken {\n                         }\n                     }\n \n-                    if let Some((_, Ok('}'))) = chars.peek() {\n-                        skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n-                    } else {\n-                        continue;\n+                    match chars.peek() {\n+                        Some((_, Ok('}'))) => {\n+                            skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n+                        }\n+                        Some((_, _)) | None => continue,\n                     }\n                 }\n                 _ => {\n@@ -609,7 +609,7 @@ impl HasFormatSpecifier for ast::String {\n                 TextRange::new(range.start.try_into().unwrap(), range.end.try_into().unwrap())\n                     + offset,\n                 unescaped_char,\n-            ))\n+            ));\n         });\n \n         Some(res)\n@@ -631,7 +631,7 @@ impl ast::IntNumber {\n \n         let mut text = token.text();\n         if let Some(suffix) = self.suffix() {\n-            text = &text[..text.len() - suffix.len()]\n+            text = &text[..text.len() - suffix.len()];\n         }\n \n         let radix = self.radix();\n@@ -688,7 +688,7 @@ impl Radix {\n     pub const ALL: &'static [Radix] =\n         &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n \n-    const fn prefix_len(&self) -> usize {\n+    const fn prefix_len(self) -> usize {\n         match self {\n             Self::Decimal => 0,\n             _ => 2,"}, {"sha": "95e37944cc4d14ff0faf9d28d35d49c8eae02626", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -28,7 +28,7 @@ pub fn function_declaration(node: &ast::Fn) -> String {\n         format_to!(buf, \"{} \", abi);\n     }\n     if let Some(name) = node.name() {\n-        format_to!(buf, \"fn {}\", name)\n+        format_to!(buf, \"fn {}\", name);\n     }\n     if let Some(type_params) = node.generic_param_list() {\n         format_to!(buf, \"{}\", type_params);"}, {"sha": "11dfc63a65bb16f89e5d5e7d66ac38940dfd60d9", "filename": "crates/syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -44,8 +44,7 @@ impl<'t> TokenSource for TextTokenSource<'t> {\n     fn is_keyword(&self, kw: &str) -> bool {\n         self.token_offset_pairs\n             .get(self.curr.1)\n-            .map(|(token, offset)| &self.text[TextRange::at(*offset, token.len)] == kw)\n-            .unwrap_or(false)\n+            .map_or(false, |(token, offset)| &self.text[TextRange::at(*offset, token.len)] == kw)\n     }\n }\n \n@@ -55,8 +54,7 @@ fn mk_token(pos: usize, token_offset_pairs: &[(Token, TextSize)]) -> parser::Tok\n             token.kind,\n             token_offset_pairs\n                 .get(pos + 1)\n-                .map(|(_, next_offset)| offset + token.len == *next_offset)\n-                .unwrap_or(false),\n+                .map_or(false, |(_, next_offset)| offset + token.len == *next_offset),\n         ),\n         None => (EOF, false),\n     };"}, {"sha": "8c1de92048fe2480be7c47f41c3e838441a40dac", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -88,7 +88,7 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n     }\n \n     fn error(&mut self, error: ParseError) {\n-        self.inner.error(error, self.text_pos)\n+        self.inner.error(error, self.text_pos);\n     }\n }\n \n@@ -108,7 +108,7 @@ impl<'a> TextTreeSink<'a> {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingFinish => {\n                 self.eat_trivias();\n-                self.inner.finish_node()\n+                self.inner.finish_node();\n             }\n             State::PendingStart | State::Normal => unreachable!(),\n         }"}, {"sha": "57ae64cafe0cca8ec57cac9e5e4bfb9af6a02812", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -81,7 +81,7 @@ impl<N: AstNode> PartialEq for AstPtr<N> {\n \n impl<N: AstNode> Hash for AstPtr<N> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.raw.hash(state)\n+        self.raw.hash(state);\n     }\n }\n "}, {"sha": "bd7ea0240b9cae557528674722f20f1f4fd64da7", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -56,19 +56,19 @@ impl SyntaxTreeBuilder {\n \n     pub fn token(&mut self, kind: SyntaxKind, text: &str) {\n         let kind = RustLanguage::kind_to_raw(kind);\n-        self.inner.token(kind, text)\n+        self.inner.token(kind, text);\n     }\n \n     pub fn start_node(&mut self, kind: SyntaxKind) {\n         let kind = RustLanguage::kind_to_raw(kind);\n-        self.inner.start_node(kind)\n+        self.inner.start_node(kind);\n     }\n \n     pub fn finish_node(&mut self) {\n-        self.inner.finish_node()\n+        self.inner.finish_node();\n     }\n \n     pub fn error(&mut self, error: parser::ParseError, text_pos: TextSize) {\n-        self.errors.push(SyntaxError::new_at_offset(*error.0, text_pos))\n+        self.errors.push(SyntaxError::new_at_offset(*error.0, text_pos));\n     }\n }"}, {"sha": "a47b4b11c0ae6e5e22f288e7fc4288726c5f034d", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -77,23 +77,23 @@ impl Position {\n }\n \n pub fn insert(position: Position, elem: impl Element) {\n-    insert_all(position, vec![elem.syntax_element()])\n+    insert_all(position, vec![elem.syntax_element()]);\n }\n pub fn insert_raw(position: Position, elem: impl Element) {\n-    insert_all_raw(position, vec![elem.syntax_element()])\n+    insert_all_raw(position, vec![elem.syntax_element()]);\n }\n pub fn insert_all(position: Position, mut elements: Vec<SyntaxElement>) {\n     if let Some(first) = elements.first() {\n         if let Some(ws) = ws_before(&position, first) {\n-            elements.insert(0, ws.into())\n+            elements.insert(0, ws.into());\n         }\n     }\n     if let Some(last) = elements.last() {\n         if let Some(ws) = ws_after(&position, last) {\n-            elements.push(ws.into())\n+            elements.push(ws.into());\n         }\n     }\n-    insert_all_raw(position, elements)\n+    insert_all_raw(position, elements);\n }\n pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n     let (parent, index) = match position.repr {\n@@ -104,47 +104,47 @@ pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n }\n \n pub fn remove(elem: impl Element) {\n-    elem.syntax_element().detach()\n+    elem.syntax_element().detach();\n }\n pub fn remove_all(range: RangeInclusive<SyntaxElement>) {\n-    replace_all(range, Vec::new())\n+    replace_all(range, Vec::new());\n }\n pub fn remove_all_iter(range: impl IntoIterator<Item = SyntaxElement>) {\n     let mut it = range.into_iter();\n     if let Some(mut first) = it.next() {\n         match it.last() {\n             Some(mut last) => {\n                 if first.index() > last.index() {\n-                    mem::swap(&mut first, &mut last)\n+                    mem::swap(&mut first, &mut last);\n                 }\n-                remove_all(first..=last)\n+                remove_all(first..=last);\n             }\n             None => remove(first),\n         }\n     }\n }\n \n pub fn replace(old: impl Element, new: impl Element) {\n-    replace_with_many(old, vec![new.syntax_element()])\n+    replace_with_many(old, vec![new.syntax_element()]);\n }\n pub fn replace_with_many(old: impl Element, new: Vec<SyntaxElement>) {\n     let old = old.syntax_element();\n-    replace_all(old.clone()..=old, new)\n+    replace_all(old.clone()..=old, new);\n }\n pub fn replace_all(range: RangeInclusive<SyntaxElement>, new: Vec<SyntaxElement>) {\n     let start = range.start().index();\n     let end = range.end().index();\n     let parent = range.start().parent().unwrap();\n-    parent.splice_children(start..end + 1, new)\n+    parent.splice_children(start..end + 1, new);\n }\n \n pub fn append_child(node: &(impl Into<SyntaxNode> + Clone), child: impl Element) {\n     let position = Position::last_child_of(node);\n-    insert(position, child)\n+    insert(position, child);\n }\n pub fn append_child_raw(node: &(impl Into<SyntaxNode> + Clone), child: impl Element) {\n     let position = Position::last_child_of(node);\n-    insert_raw(position, child)\n+    insert_raw(position, child);\n }\n \n fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {"}, {"sha": "022db39f33090b32d5e41cba1935a8a97e245962", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -227,12 +227,9 @@ where\n     T: crate::AstNode,\n     F: Fn(&str) -> Result<T, ()>,\n {\n-    dir_tests(&test_data_dir(), ok_paths, \"rast\", |text, path| {\n-        if let Ok(node) = f(text) {\n-            format!(\"{:#?}\", crate::ast::AstNode::syntax(&node))\n-        } else {\n-            panic!(\"Failed to parse '{:?}'\", path);\n-        }\n+    dir_tests(&test_data_dir(), ok_paths, \"rast\", |text, path| match f(text) {\n+        Ok(node) => format!(\"{:#?}\", crate::ast::AstNode::syntax(&node)),\n+        Err(_) => panic!(\"Failed to parse '{:?}'\", path),\n     });\n     dir_tests(&test_data_dir(), err_paths, \"rast\", |text, path| {\n         if f(text).is_ok() {"}, {"sha": "d2b58774903e6cec347678bce39cf0ba09642366", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -215,7 +215,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n         .flat_map(|node| node.traits.iter().map(move |t| (t, node)))\n         .into_group_map()\n         .into_iter()\n-        .sorted_by_key(|(k, _)| k.clone())\n+        .sorted_by_key(|(k, _)| *k)\n         .map(|(trait_name, nodes)| {\n             let name = format_ident!(\"Any{}\", trait_name);\n             let trait_name = format_ident!(\"{}\", trait_name);\n@@ -558,12 +558,13 @@ impl Field {\n }\n \n fn lower(grammar: &Grammar) -> AstSrc {\n-    let mut res = AstSrc::default();\n-\n-    res.tokens = \"Whitespace Comment String ByteString IntNumber FloatNumber\"\n-        .split_ascii_whitespace()\n-        .map(|it| it.to_string())\n-        .collect::<Vec<_>>();\n+    let mut res = AstSrc {\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber\"\n+            .split_ascii_whitespace()\n+            .map(|it| it.to_string())\n+            .collect::<Vec<_>>(),\n+        ..Default::default()\n+    };\n \n     let nodes = grammar.iter().collect::<Vec<_>>();\n "}, {"sha": "521ffce20ef6b6a7f4944bb9697f700ba2973488", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -137,7 +137,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                         if let Err(err) = char {\n                             push_err(1, (range.start, err));\n                         }\n-                    })\n+                    });\n                 }\n             }\n         }\n@@ -148,7 +148,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                         if let Err(err) = char {\n                             push_err(2, (range.start, err));\n                         }\n-                    })\n+                    });\n                 }\n             }\n         }"}, {"sha": "8eb4a10a3f502b4e3d24141f4e5c4b5fd6e4e9f8", "filename": "crates/syntax/src/validation/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -19,6 +19,6 @@ pub(crate) fn validate_block_expr(block: ast::BlockExpr, errors: &mut Vec<Syntax\n                 \"A block in this position cannot accept inner attributes\",\n                 attr.syntax().text_range(),\n             )\n-        }))\n+        }));\n     }\n }"}, {"sha": "24502ddb41aff489af210866ddbf1f4e93ca2aee", "filename": "crates/test_utils/src/assert_linear.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftest_utils%2Fsrc%2Fassert_linear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftest_utils%2Fsrc%2Fassert_linear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fassert_linear.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -43,7 +43,7 @@ impl AssertLinear {\n     }\n \n     pub fn sample(&mut self, x: f64, y: f64) {\n-        self.rounds.last_mut().unwrap().samples.push((x, y))\n+        self.rounds.last_mut().unwrap().samples.push((x, y));\n     }\n }\n \n@@ -54,7 +54,7 @@ impl Drop for AssertLinear {\n             for round in &self.rounds {\n                 eprintln!(\"\\n{}\", round.plot);\n             }\n-            panic!(\"Doesn't look linear!\")\n+            panic!(\"Doesn't look linear!\");\n         }\n     }\n }"}, {"sha": "5ea7a994b4fc76abd5653b8977ee08019d92452e", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -142,14 +142,14 @@ impl Fixture {\n \n             if line.starts_with(\"//-\") {\n                 let meta = Fixture::parse_meta_line(line);\n-                res.push(meta)\n+                res.push(meta);\n             } else {\n                 if line.starts_with(\"// \")\n                     && line.contains(':')\n                     && !line.contains(\"::\")\n                     && line.chars().all(|it| !it.is_uppercase())\n                 {\n-                    panic!(\"looks like invalid metadata line: {:?}\", line)\n+                    panic!(\"looks like invalid metadata line: {:?}\", line);\n                 }\n \n                 if let Some(entry) = res.last_mut() {\n@@ -256,9 +256,9 @@ impl MiniCore {\n         let line = line.strip_prefix(\"//- minicore:\").unwrap().trim();\n         for entry in line.split(\", \") {\n             if res.has_flag(entry) {\n-                panic!(\"duplicate minicore flag: {:?}\", entry)\n+                panic!(\"duplicate minicore flag: {:?}\", entry);\n             }\n-            res.activated_flags.push(entry.to_string())\n+            res.activated_flags.push(entry.to_string());\n         }\n \n         res\n@@ -310,7 +310,7 @@ impl MiniCore {\n         // Fixed point loop to compute transitive closure of flags.\n         loop {\n             let mut changed = false;\n-            for &(u, v) in implications.iter() {\n+            for &(u, v) in &implications {\n                 if self.has_flag(u) && !self.has_flag(v) {\n                     self.activated_flags.push(v.to_string());\n                     changed = true;\n@@ -354,7 +354,7 @@ impl MiniCore {\n             }\n \n             if keep {\n-                buf.push_str(line)\n+                buf.push_str(line);\n             }\n             if line_region {\n                 active_regions.pop().unwrap();"}, {"sha": "146e4f0c3060c276d4a9700bfb93e655bd334927", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -244,7 +244,7 @@ pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n \n                             range + line_start.1\n                         };\n-                        res.push((range, content))\n+                        res.push((range, content));\n                     }\n                     LineAnnotation::Continuation { mut offset, content } => {\n                         offset += annotation_offset;\n@@ -301,7 +301,7 @@ fn extract_line_annotations(mut line: &str) -> Vec<LineAnnotation> {\n         let mut file = false;\n         if !continuation && content.starts_with(\"file\") {\n             file = true;\n-            content = &content[\"file\".len()..]\n+            content = &content[\"file\".len()..];\n         }\n \n         let content = content.trim().to_string();\n@@ -371,7 +371,7 @@ fn main() {\n pub fn skip_slow_tests() -> bool {\n     let should_skip = std::env::var(\"CI\").is_err() && std::env::var(\"RUN_SLOW_TESTS\").is_err();\n     if should_skip {\n-        eprintln!(\"ignoring slow test\")\n+        eprintln!(\"ignoring slow test\");\n     } else {\n         let path = project_root().join(\"./target/.slow_tests_cookie\");\n         fs::write(&path, \".\").unwrap();\n@@ -432,7 +432,7 @@ pub fn bench(label: &'static str) -> impl Drop {\n \n     impl Drop for Bencher {\n         fn drop(&mut self) {\n-            eprintln!(\"{}: {}\", self.label, self.sw.elapsed())\n+            eprintln!(\"{}: {}\", self.label, self.sw.elapsed());\n         }\n     }\n "}, {"sha": "e9700c560ad3b64771d44833b02cdb954bf747df", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -90,13 +90,13 @@ impl TextEdit {\n         }\n \n         let mut total_len = TextSize::of(&*text);\n-        for indel in self.indels.iter() {\n+        for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.end() - indel.delete.start();\n         }\n         let mut buf = String::with_capacity(total_len.into());\n         let mut prev = 0;\n-        for indel in self.indels.iter() {\n+        for indel in &self.indels {\n             let start: usize = indel.delete.start().into();\n             let end: usize = indel.delete.end().into();\n             if start > prev {\n@@ -110,7 +110,7 @@ impl TextEdit {\n \n         // FIXME: figure out a way to mutate the text in-place or reuse the\n         // memory in some other way\n-        *text = buf\n+        *text = buf;\n     }\n \n     pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {\n@@ -126,7 +126,7 @@ impl TextEdit {\n \n     pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n         let mut res = offset;\n-        for indel in self.indels.iter() {\n+        for indel in &self.indels {\n             if indel.delete.start() >= offset {\n                 break;\n             }\n@@ -163,13 +163,13 @@ impl TextEditBuilder {\n         self.indels.is_empty()\n     }\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n-        self.indel(Indel::replace(range, replace_with))\n+        self.indel(Indel::replace(range, replace_with));\n     }\n     pub fn delete(&mut self, range: TextRange) {\n-        self.indel(Indel::delete(range))\n+        self.indel(Indel::delete(range));\n     }\n     pub fn insert(&mut self, offset: TextSize, text: String) {\n-        self.indel(Indel::insert(offset, text))\n+        self.indel(Indel::insert(offset, text));\n     }\n     pub fn finish(self) -> TextEdit {\n         let mut indels = self.indels;"}, {"sha": "1fa61c41ddbc57a07942b3d94558264558321099", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -194,8 +194,7 @@ impl<'a> Cursor<'a> {\n                 TokenTree::Subtree(subtree) => Some(TokenTreeRef::Subtree(subtree, Some(tt))),\n             },\n             Some(Entry::Subtree(tt, subtree, _)) => Some(TokenTreeRef::Subtree(subtree, *tt)),\n-            Some(Entry::End(_)) => None,\n-            None => None,\n+            Some(Entry::End(_)) | None => None,\n         }\n     }\n \n@@ -206,10 +205,9 @@ impl<'a> Cursor<'a> {\n     /// Bump the cursor\n     pub fn bump(self) -> Cursor<'a> {\n         if let Some(Entry::End(exit)) = self.buffer.entry(&self.ptr) {\n-            if let Some(exit) = exit {\n-                Cursor::create(self.buffer, *exit)\n-            } else {\n-                self\n+            match exit {\n+                Some(exit) => Cursor::create(self.buffer, *exit),\n+                None => self,\n             }\n         } else {\n             Cursor::create(self.buffer, EntryPtr(self.ptr.0, self.ptr.1 + 1))"}, {"sha": "9eca970ee218fa8b40b44660b9dfdeb1f08ad8d9", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -161,15 +161,15 @@ impl fmt::Display for Subtree {\n         };\n         f.write_str(l)?;\n         let mut needs_space = false;\n-        for tt in self.token_trees.iter() {\n+        for tt in &self.token_trees {\n             if needs_space {\n                 f.write_str(\" \")?;\n             }\n             needs_space = true;\n             match tt {\n                 TokenTree::Leaf(Leaf::Punct(p)) => {\n                     needs_space = p.spacing == Spacing::Alone;\n-                    fmt::Display::fmt(p, f)?\n+                    fmt::Display::fmt(p, f)?;\n                 }\n                 tt => fmt::Display::fmt(tt, f)?,\n             }\n@@ -215,7 +215,7 @@ impl Subtree {\n             .iter()\n             .map(|c| match c {\n                 TokenTree::Subtree(c) => c.count(),\n-                _ => 0,\n+                TokenTree::Leaf(_) => 0,\n             })\n             .sum::<usize>();\n "}, {"sha": "a2a53cdc9eb0e4f23269c478c7d932dd2e09b4cb", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -38,7 +38,7 @@ impl loader::Handle for NotifyHandle {\n         NotifyHandle { sender, _thread: thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {\n-        self.sender.send(Message::Config(config)).unwrap()\n+        self.sender.send(Message::Config(config)).unwrap();\n     }\n     fn invalidate(&mut self, path: AbsPathBuf) {\n         self.sender.send(Message::Invalidate(path)).unwrap();\n@@ -84,7 +84,7 @@ impl NotifyActor {\n                         if !config.watch.is_empty() {\n                             let (watcher_sender, watcher_receiver) = unbounded();\n                             let watcher = log_notify_error(RecommendedWatcher::new(move |event| {\n-                                watcher_sender.send(event).unwrap()\n+                                watcher_sender.send(event).unwrap();\n                             }));\n                             self.watcher = watcher.map(|it| (it, watcher_receiver));\n                         }\n@@ -99,7 +99,7 @@ impl NotifyActor {\n                         for (i, entry) in config.load.into_iter().enumerate() {\n                             let watch = config.watch.contains(&i);\n                             if watch {\n-                                self.watched_entries.push(entry.clone())\n+                                self.watched_entries.push(entry.clone());\n                             }\n                             let files = self.load_entry(entry, watch);\n                             self.send(loader::Message::Loaded { files });\n@@ -149,7 +149,7 @@ impl NotifyActor {\n                                 Some((path, contents))\n                             })\n                             .collect();\n-                        self.send(loader::Message::Loaded { files })\n+                        self.send(loader::Message::Loaded { files });\n                     }\n                 }\n             }\n@@ -165,7 +165,7 @@ impl NotifyActor {\n                 .into_iter()\n                 .map(|file| {\n                     if watch {\n-                        self.watch(file.clone())\n+                        self.watch(file.clone());\n                     }\n                     let contents = read(file.as_path());\n                     (file, contents)\n@@ -174,7 +174,7 @@ impl NotifyActor {\n             loader::Entry::Directories(dirs) => {\n                 let mut res = Vec::new();\n \n-                for root in dirs.include.iter() {\n+                for root in &dirs.include {\n                     let walkdir =\n                         WalkDir::new(root).follow_links(true).into_iter().filter_entry(|entry| {\n                             if !entry.file_type().is_dir() {\n@@ -218,7 +218,7 @@ impl NotifyActor {\n         }\n     }\n     fn send(&mut self, msg: loader::Message) {\n-        (self.sender)(msg)\n+        (self.sender)(msg);\n     }\n }\n "}, {"sha": "6a89263e53988723aaa0623a036c3f1e69ff1c51", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -112,7 +112,7 @@ impl FileSetConfig {\n         let mut res = vec![FileSet::default(); self.len()];\n         for (file_id, path) in vfs.iter() {\n             let root = self.classify(path, &mut scratch_space);\n-            res[root].insert(file_id, path.clone())\n+            res[root].insert(file_id, path.clone());\n         }\n         res\n     }\n@@ -157,7 +157,7 @@ impl FileSetConfigBuilder {\n \n     /// Add a new set of paths prefixes.\n     pub fn add_file_set(&mut self, roots: Vec<VfsPath>) {\n-        self.roots.push(roots)\n+        self.roots.push(roots);\n     }\n \n     /// Build the `FileSetConfig`."}, {"sha": "39a16664211a98991c23362c51e6ef3e67828550", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -73,9 +73,8 @@ impl VfsPath {\n     pub fn starts_with(&self, other: &VfsPath) -> bool {\n         match (&self.0, &other.0) {\n             (VfsPathRepr::PathBuf(lhs), VfsPathRepr::PathBuf(rhs)) => lhs.starts_with(rhs),\n-            (VfsPathRepr::PathBuf(_), _) => false,\n             (VfsPathRepr::VirtualPath(lhs), VfsPathRepr::VirtualPath(rhs)) => lhs.starts_with(rhs),\n-            (VfsPathRepr::VirtualPath(_), _) => false,\n+            (VfsPathRepr::PathBuf(_) | VfsPathRepr::VirtualPath(_), _) => false,\n         }\n     }\n \n@@ -357,7 +356,7 @@ impl VirtualPath {\n             if !res.pop() {\n                 return None;\n             }\n-            path = &path[\"../\".len()..]\n+            path = &path[\"../\".len()..];\n         }\n         path = path.trim_start_matches(\"./\");\n         res.0 = format!(\"{}/{}\", res.0, path);"}, {"sha": "162d556fb7f8eac2e6b9e3d4e1f1623e7df7fa69", "filename": "lib/arena/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/lib%2Farena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/lib%2Farena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Flib.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -63,15 +63,15 @@ impl<T> Eq for Idx<T> {}\n \n impl<T> Hash for Idx<T> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.raw.hash(state)\n+        self.raw.hash(state);\n     }\n }\n \n impl<T> fmt::Debug for Idx<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut type_name = std::any::type_name::<T>();\n         if let Some(idx) = type_name.rfind(':') {\n-            type_name = &type_name[idx + 1..]\n+            type_name = &type_name[idx + 1..];\n         }\n         write!(f, \"Idx::<{}>({})\", type_name, self.raw)\n     }"}, {"sha": "d026df6c15025e2df8111023fade58819afda49b", "filename": "xtask/src/install.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -13,7 +13,7 @@ const REQUIRED_RUST_VERSION: u32 = 55;\n impl flags::Install {\n     pub(crate) fn run(self) -> Result<()> {\n         if cfg!(target_os = \"macos\") {\n-            fix_path_for_mac().context(\"Fix path for mac\")?\n+            fix_path_for_mac().context(\"Fix path for mac\")?;\n         }\n         if let Some(server) = self.server() {\n             install_server(server).context(\"install server\")?;\n@@ -148,7 +148,7 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n         eprintln!(\n             \"\\nWARNING: at least rust 1.{}.0 is required to compile rust-analyzer\\n\",\n             REQUIRED_RUST_VERSION,\n-        )\n+        );\n     }\n     let features = match opts.malloc {\n         Malloc::System => &[][..],"}, {"sha": "d0ddf27b4df2316b18d4d7b67d3f863c4e0ef818", "filename": "xtask/src/release.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c534f244bd72dc9e9ec1be0bfdf0131602ca30/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=86c534f244bd72dc9e9ec1be0bfdf0131602ca30", "patch": "@@ -33,15 +33,13 @@ impl flags::Release {\n         let commit = cmd!(\"git rev-parse HEAD\").read()?;\n         let changelog_n = read_dir(changelog_dir.as_path())?.len();\n \n-        for &adoc in [\n+        for adoc in [\n             \"manual.adoc\",\n             \"generated_assists.adoc\",\n             \"generated_config.adoc\",\n             \"generated_diagnostic.adoc\",\n             \"generated_features.adoc\",\n-        ]\n-        .iter()\n-        {\n+        ] {\n             let src = project_root().join(\"./docs/user/\").join(adoc);\n             let dst = website_root.join(adoc);\n "}]}