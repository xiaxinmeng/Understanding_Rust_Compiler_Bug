{"sha": "e4d2f94a834f0679d18ae03ef47bddb59a2ac042", "node_id": "C_kwDOAAsO6NoAKGU0ZDJmOTRhODM0ZjA2NzlkMThhZTAzZWY0N2JkZGI1OWEyYWMwNDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T18:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T18:10:51Z"}, "message": "Auto merge of #101212 - eholk:dyn-star, r=compiler-errors\n\nInitial implementation of dyn*\n\nThis PR adds extremely basic and incomplete support for [dyn*](https://smallcultfollowing.com/babysteps//blog/2022/03/29/dyn-can-we-make-dyn-sized/). The goal is to get something in tree behind a flag to make collaboration easier, and also to make sure the implementation so far is not unreasonable. This PR does quite a few things:\n\n* Introduce `dyn_star` feature flag\n* Adds parsing for `dyn* Trait` types\n* Defines `dyn* Trait` as a sized type\n* Adds support for explicit casts, like `42usize as dyn* Debug`\n  * Including const evaluation of such casts\n* Adds codegen for drop glue so things are cleaned up properly when a `dyn* Trait` object goes out of scope\n* Adds codegen for method calls, at least for methods that take `&self`\n\nQuite a bit is still missing, but this gives us a starting point. Note that this is never intended to become stable surface syntax for Rust, but rather `dyn*` is planned to be used as an implementation detail for async functions in dyn traits.\n\nJoint work with `@nikomatsakis` and `@compiler-errors.`\n\nr? `@bjorn3`", "tree": {"sha": "dffa94039be268c9cc81990ba5a42b5f8e7a2c00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dffa94039be268c9cc81990ba5a42b5f8e7a2c00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d2f94a834f0679d18ae03ef47bddb59a2ac042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d2f94a834f0679d18ae03ef47bddb59a2ac042", "html_url": "https://github.com/rust-lang/rust/commit/e4d2f94a834f0679d18ae03ef47bddb59a2ac042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d2f94a834f0679d18ae03ef47bddb59a2ac042/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c831d6960b96bbf23e788291ddc25c9aa2cb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c831d6960b96bbf23e788291ddc25c9aa2cb23", "html_url": "https://github.com/rust-lang/rust/commit/11c831d6960b96bbf23e788291ddc25c9aa2cb23"}, {"sha": "6d544a8a4c9ab5cd4b228532e2501980881801b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d544a8a4c9ab5cd4b228532e2501980881801b7", "html_url": "https://github.com/rust-lang/rust/commit/6d544a8a4c9ab5cd4b228532e2501980881801b7"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "399474d79e3b6c30d20f0d8f3921af1185bbf987", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d2f94a834f0679d18ae03ef47bddb59a2ac042/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d2f94a834f0679d18ae03ef47bddb59a2ac042/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=e4d2f94a834f0679d18ae03ef47bddb59a2ac042", "patch": "@@ -701,6 +701,10 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     operand.unsize_value(fx, lval);\n                 }\n+                Rvalue::Cast(CastKind::DynStar, _, _) => {\n+                    // FIXME(dyn-star)\n+                    unimplemented!()\n+                }\n                 Rvalue::Discriminant(place) => {\n                     let place = codegen_place(fx, place);\n                     let value = place.to_cvalue(fx);"}, {"sha": "cfaadca9491079bca03a5390a70cca0c8d604083", "filename": "src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4d2f94a834f0679d18ae03ef47bddb59a2ac042/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d2f94a834f0679d18ae03ef47bddb59a2ac042/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=e4d2f94a834f0679d18ae03ef47bddb59a2ac042", "patch": "@@ -815,7 +815,8 @@ pub(crate) fn assert_assignable<'tcx>(\n             );\n             // fn(&T) -> for<'l> fn(&'l T) is allowed\n         }\n-        (&ty::Dynamic(from_traits, _), &ty::Dynamic(to_traits, _)) => {\n+        (&ty::Dynamic(from_traits, _, _from_kind), &ty::Dynamic(to_traits, _, _to_kind)) => {\n+            // FIXME(dyn-star): Do the right thing with DynKinds\n             for (from, to) in from_traits.iter().zip(to_traits) {\n                 let from =\n                     fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), from);"}]}