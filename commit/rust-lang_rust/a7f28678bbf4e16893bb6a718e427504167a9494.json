{"sha": "a7f28678bbf4e16893bb6a718e427504167a9494", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjI4Njc4YmJmNGUxNjg5M2JiNmE3MThlNDI3NTA0MTY3YTk0OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-23T19:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-23T19:50:46Z"}, "message": "Auto merge of #62902 - Mark-Simulacrum:rollup-mxfk0mm, r=Mark-Simulacrum\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #60951 (more specific errors in src/librustc/mir/interpret/error.rs)\n - #62523 (Delay bug to resolve HRTB ICE)\n - #62656 (explain how to search in slice without owned data)\n - #62791 (Handle more cases of typos misinterpreted as type ascription)\n - #62804 (rustc_typeck: improve diagnostics for _ const/static declarations)\n - #62808 (Revert \"Disable stack probing for gnux32.\")\n - #62817 (Tweak span for variant not found error)\n - #62842 (Add tests for issue-58887)\n - #62851 (move unescape module to rustc_lexer)\n - #62859 (Place::as_place_ref is now Place::as_ref)\n - #62869 (add rustc_private as a proper language feature gate)\n - #62880 (normalize use of backticks in compiler messages for librustc_allocator)\n - #62885 (Change \"OSX\" to \"macOS\")\n - #62889 (Update stage0.txt)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2aa23f2346e84f1de0ce1756217913edccd742f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa23f2346e84f1de0ce1756217913edccd742f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f28678bbf4e16893bb6a718e427504167a9494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f28678bbf4e16893bb6a718e427504167a9494", "html_url": "https://github.com/rust-lang/rust/commit/a7f28678bbf4e16893bb6a718e427504167a9494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f28678bbf4e16893bb6a718e427504167a9494/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299ef86e1f8b3e53154f834115752c719b611fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/299ef86e1f8b3e53154f834115752c719b611fa1", "html_url": "https://github.com/rust-lang/rust/commit/299ef86e1f8b3e53154f834115752c719b611fa1"}, {"sha": "c939db7404fdce109ddf8d2fbfceac6ff99b0e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/c939db7404fdce109ddf8d2fbfceac6ff99b0e26", "html_url": "https://github.com/rust-lang/rust/commit/c939db7404fdce109ddf8d2fbfceac6ff99b0e26"}], "stats": {"total": 1154, "additions": 777, "deletions": 377}, "files": [{"sha": "40df6a47378717da376995cc79a8f86f4c3de117", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -200,11 +200,11 @@ fetch snapshots, and an OS that can execute the available snapshot binaries.\n \n Snapshot binaries are currently built and tested on several platforms:\n \n-| Platform / Architecture  | x86 | x86_64 |\n-|--------------------------|-----|--------|\n-| Windows (7, 8, 10, ...)  | \u2713   | \u2713      |\n-| Linux (2.6.18 or later)  | \u2713   | \u2713      |\n-| OSX (10.7 Lion or later) | \u2713   | \u2713      |\n+| Platform / Architecture    | x86 | x86_64 |\n+|----------------------------|-----|--------|\n+| Windows (7, 8, 10, ...)    | \u2713   | \u2713      |\n+| Linux (2.6.18 or later)    | \u2713   | \u2713      |\n+| macOS (10.7 Lion or later) | \u2713   | \u2713      |\n \n You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work."}, {"sha": "99f88591eea3eeca2e1a9828b00265a71e5d53e2", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -553,10 +553,12 @@ impl char {\n     /// 'XID_Start' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to `ID_Start` but modified for closure under `NFKx`.\n-    #[unstable(feature = \"rustc_private\",\n-               reason = \"mainly needed for compiler internals\",\n-               issue = \"27812\")]\n-    #[inline]\n+    #[cfg_attr(bootstrap,\n+               unstable(feature = \"rustc_private\",\n+                        reason = \"mainly needed for compiler internals\",\n+                        issue = \"27812\"))]\n+    #[cfg_attr(not(bootstrap),\n+               unstable(feature = \"unicode_internals\", issue = \"0\"))]\n     pub fn is_xid_start(self) -> bool {\n         derived_property::XID_Start(self)\n     }\n@@ -567,9 +569,12 @@ impl char {\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n-    #[unstable(feature = \"rustc_private\",\n-               reason = \"mainly needed for compiler internals\",\n-               issue = \"27812\")]\n+    #[cfg_attr(bootstrap,\n+               unstable(feature = \"rustc_private\",\n+                        reason = \"mainly needed for compiler internals\",\n+                        issue = \"27812\"))]\n+    #[cfg_attr(not(bootstrap),\n+               unstable(feature = \"unicode_internals\", issue = \"0\"))]\n     #[inline]\n     pub fn is_xid_continue(self) -> bool {\n         derived_property::XID_Continue(self)"}, {"sha": "e7b820e79e5cf8cc1ded819a456036b4cf1dbd04", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1263,6 +1263,15 @@ impl<T> [T] {\n     /// assert!(v.contains(&30));\n     /// assert!(!v.contains(&50));\n     /// ```\n+    ///\n+    /// If you do not have an `&T`, but just an `&U` such that `T: Borrow<U>`\n+    /// (e.g. `String: Borrow<str>`), you can use `iter().any`:\n+    ///\n+    /// ```\n+    /// let v = [String::from(\"hello\"), String::from(\"world\")]; // slice of `String`\n+    /// assert!(v.iter().any(|e| e == \"hello\")); // search with `&str`\n+    /// assert!(!v.iter().any(|e| e == \"hi\"));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains(&self, x: &T) -> bool\n         where T: PartialEq"}, {"sha": "f1c2b1fb8713363a83997e06f234f994f37a05eb", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -13,6 +13,7 @@\n \n #![feature(nll)]\n #![feature(rustc_private)]\n+#![feature(unicode_internals)]\n \n pub use Piece::*;\n pub use Position::*;"}, {"sha": "4bfe953e45c0bb601d80d72f8cf25eb5ff701602", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -764,16 +764,17 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n         }\n \n-        span_bug!(\n+        // Errors in earlier passes can yield error variables without\n+        // resolution errors here; delay ICE in favor of those errors.\n+        self.tcx().sess.delay_span_bug(\n             self.var_infos[node_idx].origin.span(),\n-            \"collect_error_for_expanding_node() could not find \\\n-             error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n-             upper_bounds={:#?}\",\n-            node_idx,\n-            node_universe,\n-            lower_bounds,\n-            upper_bounds\n-        );\n+            &format!(\"collect_error_for_expanding_node() could not find \\\n+                      error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n+                      upper_bounds={:#?}\",\n+                     node_idx,\n+                     node_universe,\n+                     lower_bounds,\n+                     upper_bounds));\n     }\n \n     fn collect_concrete_regions("}, {"sha": "6ab07c9679e7a0eb05472797093e737c18d0362e", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -228,6 +228,24 @@ impl<'tcx> From<InterpError<'tcx, u64>> for InterpErrorInfo<'tcx> {\n \n pub type AssertMessage<'tcx> = InterpError<'tcx, mir::Operand<'tcx>>;\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum PanicMessage<O> {\n+    Panic {\n+        msg: Symbol,\n+        line: u32,\n+        col: u32,\n+        file: Symbol,\n+    },\n+    BoundsCheck {\n+        len: O,\n+        index: O,\n+    },\n+    Overflow(mir::BinOp),\n+    OverflowNeg,\n+    DivisionByZero,\n+    RemainderByZero,\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InterpError<'tcx, O> {\n     /// This variant is used by machines to signal their own errors that do not\n@@ -266,11 +284,6 @@ pub enum InterpError<'tcx, O> {\n     Unimplemented(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n-    BoundsCheck { len: O, index: O },\n-    Overflow(mir::BinOp),\n-    OverflowNeg,\n-    DivisionByZero,\n-    RemainderByZero,\n     Intrinsic(String),\n     InvalidChar(u128),\n     StackFrameLimitReached,\n@@ -298,12 +311,7 @@ pub enum InterpError<'tcx, O> {\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n-    Panic {\n-        msg: Symbol,\n-        line: u32,\n-        col: u32,\n-        file: Symbol,\n-    },\n+    Panic(PanicMessage<O>),\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n     UnimplementedTraitSelection,\n@@ -369,8 +377,6 @@ impl<'tcx, O> InterpError<'tcx, O> {\n                 \"tried to dereference a function pointer\",\n             ExecuteMemory =>\n                 \"tried to treat a memory pointer as a function pointer\",\n-            BoundsCheck{..} =>\n-                \"array index out of bounds\",\n             Intrinsic(..) =>\n                 \"intrinsic failed\",\n             NoMirFor(..) =>\n@@ -422,8 +428,32 @@ impl<'tcx, O> InterpError<'tcx, O> {\n                 two\",\n             Unreachable =>\n                 \"entered unreachable code\",\n-            Panic { .. } =>\n+            Panic(PanicMessage::Panic{..}) =>\n                 \"the evaluated program panicked\",\n+            Panic(PanicMessage::BoundsCheck{..}) =>\n+                \"array index out of bounds\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Add)) =>\n+                \"attempt to add with overflow\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Sub)) =>\n+                \"attempt to subtract with overflow\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Mul)) =>\n+                \"attempt to multiply with overflow\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Div)) =>\n+                \"attempt to divide with overflow\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Rem)) =>\n+                \"attempt to calculate the remainder with overflow\",\n+            Panic(PanicMessage::OverflowNeg) =>\n+                \"attempt to negate with overflow\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Shr)) =>\n+                \"attempt to shift right with overflow\",\n+            Panic(PanicMessage::Overflow(mir::BinOp::Shl)) =>\n+                \"attempt to shift left with overflow\",\n+            Panic(PanicMessage::Overflow(op)) =>\n+                bug!(\"{:?} cannot overflow\", op),\n+            Panic(PanicMessage::DivisionByZero) =>\n+                \"attempt to divide by zero\",\n+            Panic(PanicMessage::RemainderByZero) =>\n+                \"attempt to calculate the remainder with a divisor of zero\",\n             ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n             PathNotFound(_) =>\n@@ -436,17 +466,6 @@ impl<'tcx, O> InterpError<'tcx, O> {\n                 \"encountered overly generic constant\",\n             ReferencedConstant =>\n                 \"referenced constant has errors\",\n-            Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n-            Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\",\n-            Overflow(mir::BinOp::Mul) => \"attempt to multiply with overflow\",\n-            Overflow(mir::BinOp::Div) => \"attempt to divide with overflow\",\n-            Overflow(mir::BinOp::Rem) => \"attempt to calculate the remainder with overflow\",\n-            OverflowNeg => \"attempt to negate with overflow\",\n-            Overflow(mir::BinOp::Shr) => \"attempt to shift right with overflow\",\n-            Overflow(mir::BinOp::Shl) => \"attempt to shift left with overflow\",\n-            Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n-            DivisionByZero => \"attempt to divide by zero\",\n-            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n             GeneratorResumedAfterReturn => \"generator resumed after completion\",\n             GeneratorResumedAfterPanic => \"generator resumed after panicking\",\n             InfiniteLoop =>\n@@ -493,8 +512,6 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                     callee_ty, caller_ty),\n             FunctionArgCountMismatch =>\n                 write!(f, \"tried to call a function with incorrect number of arguments\"),\n-            BoundsCheck { ref len, ref index } =>\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             ReallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n@@ -518,8 +535,10 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            Panic { ref msg, line, col, ref file } =>\n+            Panic(PanicMessage::Panic { ref msg, line, col, ref file }) =>\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n+            Panic(PanicMessage::BoundsCheck { ref len, ref index }) =>\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n             Exit(code) =>"}, {"sha": "5bec64d39fa62660905b85b8e781883e57b81878", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -12,7 +12,7 @@ mod pointer;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n-    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n+    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, PanicMessage\n };\n \n pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};"}, {"sha": "0e3b8459115e30e96c325fc62adc720eac402a29", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -5,7 +5,7 @@ use crate::ty::layout::{self, HasDataLayout, Size};\n use rustc_macros::HashStable;\n \n use super::{\n-    AllocId, InterpResult,\n+    AllocId, InterpResult, PanicMessage\n };\n \n /// Used by `check_in_alloc` to indicate context of check\n@@ -76,13 +76,13 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     #[inline]\n     fn offset<'tcx>(&self, val: u64, i: u64) -> InterpResult<'tcx, u64> {\n         let (res, over) = self.overflowing_offset(val, i);\n-        if over { err!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n+        if over { err!(Panic(PanicMessage::Overflow(mir::BinOp::Add))) } else { Ok(res) }\n     }\n \n     #[inline]\n     fn signed_offset<'tcx>(&self, val: u64, i: i64) -> InterpResult<'tcx, u64> {\n         let (res, over) = self.overflowing_signed_offset(val, i128::from(i));\n-        if over { err!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n+        if over { err!(Panic(PanicMessage::Overflow(mir::BinOp::Add))) } else { Ok(res) }\n     }\n }\n "}, {"sha": "b1b6be4ae17f8424842d156d8b3c560f6623055d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n-use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n+use crate::mir::interpret::{ConstValue, PanicMessage, InterpError::Panic, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::rustc_serialize as serialize;\n use crate::ty::adjustment::PointerCast;\n@@ -1931,7 +1931,7 @@ impl<'tcx> Place<'tcx> {\n         iterate_over2(place_base, place_projection, &Projections::Empty, op)\n     }\n \n-    pub fn as_place_ref(&self) -> PlaceRef<'_, 'tcx> {\n+    pub fn as_ref(&self) -> PlaceRef<'_, 'tcx> {\n         PlaceRef {\n             base: &self.base,\n             projection: &self.projection,\n@@ -3152,11 +3152,11 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let msg = if let InterpError::BoundsCheck { ref len, ref index } = *msg {\n-                    InterpError::BoundsCheck {\n+                let msg = if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n+                    Panic(PanicMessage::BoundsCheck {\n                         len: len.fold_with(folder),\n                         index: index.fold_with(folder),\n-                    }\n+                    })\n                 } else {\n                     msg.clone()\n                 };\n@@ -3197,7 +3197,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    if let InterpError::BoundsCheck { ref len, ref index } = *msg {\n+                    if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n                         len.visit_with(visitor) || index.visit_with(visitor)\n                     } else {\n                         false"}, {"sha": "dca56cc526ce5b51401b1f1562e77232a7039515", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -515,7 +515,8 @@ macro_rules! make_mir_visitor {\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n                 use crate::mir::interpret::InterpError::*;\n-                if let BoundsCheck { len, index } = msg {\n+                use crate::mir::interpret::PanicMessage::BoundsCheck;\n+                if let Panic(BoundsCheck { len, index }) = msg {\n                     self.visit_operand(len, location);\n                     self.visit_operand(index, location);\n                 }"}, {"sha": "af63fffc0f9b4074a7fd32b0f9ed733d40e6c562", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -79,7 +79,7 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n \n         if self.found {\n             self.handler\n-                .span_err(item.span, \"cannot define more than one #[global_allocator]\");\n+                .span_err(item.span, \"cannot define more than one `#[global_allocator]`\");\n             return smallvec![item];\n         }\n         self.found = true;\n@@ -280,7 +280,7 @@ impl AllocFnFactory<'_> {\n             AllocatorTy::Unit => (self.cx.ty(self.span, TyKind::Tup(Vec::new())), expr),\n \n             AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n-                panic!(\"can't convert AllocatorTy to an output\")\n+                panic!(\"can't convert `AllocatorTy` to an output\")\n             }\n         }\n     }"}, {"sha": "907689541f97884ba0d60d8e662b24a56eb31070", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -238,7 +238,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                    context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n-        self.process_place(&place.as_place_ref(), context, location);\n+        self.process_place(&place.as_ref(), context, location);\n     }\n \n     fn visit_local(&mut self,"}, {"sha": "c0a446157d35c97d45f43d822146eff9e2fe0026", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n-use rustc::mir::interpret::InterpError;\n+use rustc::mir::interpret::{InterpError, PanicMessage};\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n use crate::base;\n@@ -253,7 +253,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             PassMode::Direct(_) | PassMode::Pair(..) => {\n                 let op =\n-                    self.codegen_consume(&mut bx, &mir::Place::RETURN_PLACE.as_place_ref());\n+                    self.codegen_consume(&mut bx, &mir::Place::RETURN_PLACE.as_ref());\n                 if let Ref(llval, _, align) = op.val {\n                     bx.load(llval, align)\n                 } else {\n@@ -314,7 +314,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return\n         }\n \n-        let place = self.codegen_place(&mut bx, &location.as_place_ref());\n+        let place = self.codegen_place(&mut bx, &location.as_ref());\n         let (args1, args2);\n         let mut args = if let Some(llextra) = place.llextra {\n             args2 = [place.llval, llextra];\n@@ -368,7 +368,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let mir::interpret::InterpError::OverflowNeg = *msg {\n+            if let InterpError::Panic(PanicMessage::OverflowNeg) = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -403,7 +403,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match *msg {\n-            InterpError::BoundsCheck { ref len, ref index } => {\n+            InterpError::Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n \n@@ -1171,7 +1171,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 LocalRef::Place(place) => self.codegen_transmute_into(bx, src, place),\n                 LocalRef::UnsizedPlace(_) => bug!(\"transmute must not involve unsized locals\"),\n                 LocalRef::Operand(None) => {\n-                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(&dst.as_place_ref()));\n+                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(&dst.as_ref()));\n                     assert!(!dst_layout.ty.has_erasable_regions());\n                     let place = PlaceRef::alloca(bx, dst_layout, \"transmute_temp\");\n                     place.storage_live(bx);\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         } else {\n-            let dst = self.codegen_place(bx, &dst.as_place_ref());\n+            let dst = self.codegen_place(bx, &dst.as_ref());\n             self.codegen_transmute_into(bx, src, dst);\n         }\n     }"}, {"sha": "302dcfcc682a3e423088ba35c6a8c219f21ef9e9", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match *operand {\n             mir::Operand::Copy(ref place) |\n             mir::Operand::Move(ref place) => {\n-                self.codegen_consume(bx, &place.as_place_ref())\n+                self.codegen_consume(bx, &place.as_ref())\n             }\n \n             mir::Operand::Constant(ref constant) => {"}, {"sha": "202cf147f1fcbcefa8fce6fe83555acd4235399a", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::Ref(_, bk, ref place) => {\n-                let cg_place = self.codegen_place(&mut bx, &place.as_place_ref());\n+                let cg_place = self.codegen_place(&mut bx, &place.as_ref());\n \n                 let ty = cg_place.layout.ty;\n \n@@ -446,7 +446,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::Discriminant(ref place) => {\n                 let discr_ty = rvalue.ty(&*self.mir, bx.tcx());\n-                let discr =  self.codegen_place(&mut bx, &place.as_place_ref())\n+                let discr =  self.codegen_place(&mut bx, &place.as_ref())\n                     .codegen_get_discr(&mut bx, discr_ty);\n                 (bx, OperandRef {\n                     val: OperandValue::Immediate(discr),\n@@ -527,7 +527,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         }\n         // use common size calculation for non zero-sized types\n-        let cg_value = self.codegen_place(bx, &place.as_place_ref());\n+        let cg_value = self.codegen_place(bx, &place.as_ref());\n         cg_value.len(bx.cx())\n     }\n "}, {"sha": "3717be4b4175338fb1200a4f36c999ae50bd90c3", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -46,12 +46,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     }\n                 } else {\n-                    let cg_dest = self.codegen_place(&mut bx, &place.as_place_ref());\n+                    let cg_dest = self.codegen_place(&mut bx, &place.as_ref());\n                     self.codegen_rvalue(bx, cg_dest, rvalue)\n                 }\n             }\n             mir::StatementKind::SetDiscriminant{ref place, variant_index} => {\n-                self.codegen_place(&mut bx, &place.as_place_ref())\n+                self.codegen_place(&mut bx, &place.as_ref())\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx\n             }\n@@ -73,7 +73,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             mir::StatementKind::InlineAsm(ref asm) => {\n                 let outputs = asm.outputs.iter().map(|output| {\n-                    self.codegen_place(&mut bx, &output.as_place_ref())\n+                    self.codegen_place(&mut bx, &output.as_ref())\n                 }).collect();\n \n                 let input_vals = asm.inputs.iter()"}, {"sha": "c02abe6b89f97e51027ed6d8342cb3a4bf1790dd", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1,9 +1,9 @@\n // We want to be able to build this crate with a stable compiler, so feature\n-// flags should optional.\n-#![cfg_attr(not(feature = \"unicode-xid\"), feature(rustc_private))]\n+// flags should be optional.\n #![cfg_attr(not(feature = \"unicode-xid\"), feature(unicode_internals))]\n \n mod cursor;\n+pub mod unescape;\n \n use crate::cursor::{Cursor, EOF_CHAR};\n "}, {"sha": "70085df9948ebb8ad6ff44ca2965476e970945a9", "filename": "src/librustc_lexer/src/unescape.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -5,7 +5,7 @@ use std::str::Chars;\n use std::ops::Range;\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(crate) enum EscapeError {\n+pub enum EscapeError {\n     ZeroChars,\n     MoreThanOneChar,\n \n@@ -35,22 +35,22 @@ pub(crate) enum EscapeError {\n \n /// Takes a contents of a char literal (without quotes), and returns an\n /// unescaped char or an error\n-pub(crate) fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n+pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n     let mut chars = literal_text.chars();\n     unescape_char_or_byte(&mut chars, Mode::Char)\n         .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n }\n \n /// Takes a contents of a string literal (without quotes) and produces a\n /// sequence of escaped characters or errors.\n-pub(crate) fn unescape_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n     unescape_str_or_byte_str(literal_text, Mode::Str, callback)\n }\n \n-pub(crate) fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n+pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n     let mut chars = literal_text.chars();\n     unescape_char_or_byte(&mut chars, Mode::Byte)\n         .map(byte_from_char)\n@@ -59,7 +59,7 @@ pub(crate) fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeErro\n \n /// Takes a contents of a string literal (without quotes) and produces a\n /// sequence of escaped characters or errors.\n-pub(crate) fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<u8, EscapeError>),\n {\n@@ -72,7 +72,7 @@ where\n /// sequence of characters or errors.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n@@ -83,7 +83,7 @@ where\n /// sequence of characters or errors.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<u8, EscapeError>),\n {\n@@ -93,26 +93,26 @@ where\n }\n \n #[derive(Debug, Clone, Copy)]\n-pub(crate) enum Mode {\n+pub enum Mode {\n     Char,\n     Str,\n     Byte,\n     ByteStr,\n }\n \n impl Mode {\n-    fn in_single_quotes(self) -> bool {\n+    pub fn in_single_quotes(self) -> bool {\n         match self {\n             Mode::Char | Mode::Byte => true,\n             Mode::Str | Mode::ByteStr => false,\n         }\n     }\n \n-    pub(crate) fn in_double_quotes(self) -> bool {\n+    pub fn in_double_quotes(self) -> bool {\n         !self.in_single_quotes()\n     }\n \n-    pub(crate) fn is_bytes(self) -> bool {\n+    pub fn is_bytes(self) -> bool {\n         match self {\n             Mode::Byte | Mode::ByteStr => true,\n             Mode::Char | Mode::Str => false,", "previous_filename": "src/libsyntax/parse/unescape.rs"}, {"sha": "5d0e490ebea5a0549ae4e43bfa4b9d994d66bfee", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -139,14 +139,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let is_partial_move = move_site_vec.iter().any(|move_site| {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n-                used_place != moved_place.as_place_ref()\n-                    && used_place.is_prefix_of(moved_place.as_place_ref())\n+                used_place != moved_place.as_ref()\n+                    && used_place.is_prefix_of(moved_place.as_ref())\n             });\n             for move_site in &move_site_vec {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n \n-                let move_spans = self.move_spans(moved_place.as_place_ref(), move_out.source);\n+                let move_spans = self.move_spans(moved_place.as_ref(), move_out.source);\n                 let move_span = move_spans.args_or_use();\n \n                 let move_msg = if move_spans.for_closure() {\n@@ -223,7 +223,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 let ty = place.ty(self.body, self.infcx.tcx).ty;\n                 let opt_name =\n-                    self.describe_place_with_options(place.as_place_ref(), IncludingDowncast(true));\n+                    self.describe_place_with_options(place.as_ref(), IncludingDowncast(true));\n                 let note_msg = match opt_name {\n                     Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n@@ -275,24 +275,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"report_move_out_while_borrowed: location={:?} place={:?} span={:?} borrow={:?}\",\n             location, place, span, borrow\n         );\n-        let value_msg = match self.describe_place(place.as_place_ref()) {\n+        let value_msg = match self.describe_place(place.as_ref()) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n-        let borrow_msg = match self.describe_place(borrow.borrowed_place.as_place_ref()) {\n+        let borrow_msg = match self.describe_place(borrow.borrowed_place.as_ref()) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n \n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.args_or_use();\n \n-        let move_spans = self.move_spans(place.as_place_ref(), location);\n+        let move_spans = self.move_spans(place.as_ref(), location);\n         let span = move_spans.args_or_use();\n \n         let mut err = self.cannot_move_when_borrowed(\n             span,\n-            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n         );\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n@@ -326,21 +326,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // Conflicting borrows are reported separately, so only check for move\n         // captures.\n-        let use_spans = self.move_spans(place.as_place_ref(), location);\n+        let use_spans = self.move_spans(place.as_ref(), location);\n         let span = use_spans.var_or_use();\n \n         let mut err = self.cannot_use_when_mutably_borrowed(\n             span,\n-            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n             borrow_span,\n-            &self.describe_place(borrow.borrowed_place.as_place_ref())\n+            &self.describe_place(borrow.borrowed_place.as_ref())\n                 .unwrap_or_else(|| \"_\".to_owned()),\n         );\n \n         borrow_spans.var_span_label(&mut err, {\n             let place = &borrow.borrowed_place;\n             let desc_place =\n-                self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned());\n+                self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned());\n \n             format!(\"borrow occurs due to use of `{}`{}\", desc_place, borrow_spans.describe())\n         });\n@@ -517,7 +517,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n-            let borrow_place_desc = self.describe_place(borrow_place.as_place_ref())\n+            let borrow_place_desc = self.describe_place(borrow_place.as_ref())\n                                         .unwrap_or_else(|| \"_\".to_owned());\n             issued_spans.var_span_label(\n                 &mut err,\n@@ -650,8 +650,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                                 return Some((\n                                     describe_base_place,\n-                                    describe_place(first_borrowed_place.as_place_ref()),\n-                                    describe_place(second_borrowed_place.as_place_ref()),\n+                                    describe_place(first_borrowed_place.as_ref()),\n+                                    describe_place(second_borrowed_place.as_ref()),\n                                     union_ty.to_string(),\n                                 ));\n                             }\n@@ -666,7 +666,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // If we didn't find a field access into a union, or both places match, then\n                 // only return the description of the first place.\n                 (\n-                    describe_place(first_borrowed_place.as_place_ref()),\n+                    describe_place(first_borrowed_place.as_ref()),\n                     \"\".to_string(),\n                     \"\".to_string(),\n                     \"\".to_string(),\n@@ -697,7 +697,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n \n         let drop_span = place_span.1;\n-        let root_place = self.prefixes(borrow.borrowed_place.as_place_ref(), PrefixSet::All)\n+        let root_place = self.prefixes(borrow.borrowed_place.as_ref(), PrefixSet::All)\n             .last()\n             .unwrap();\n \n@@ -730,21 +730,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }, borrow_span));\n \n         if let StorageDeadOrDrop::Destructor(dropped_ty) =\n-            self.classify_drop_access_kind(borrow.borrowed_place.as_place_ref())\n+            self.classify_drop_access_kind(borrow.borrowed_place.as_ref())\n         {\n             // If a borrow of path `B` conflicts with drop of `D` (and\n             // we're not in the uninteresting case where `B` is a\n             // prefix of `D`), then report this as a more interesting\n             // destructor conflict.\n-            if !borrow.borrowed_place.as_place_ref().is_prefix_of(place_span.0.as_place_ref()) {\n+            if !borrow.borrowed_place.as_ref().is_prefix_of(place_span.0.as_ref()) {\n                 self.report_borrow_conflicts_with_destructor(\n                     location, borrow, place_span, kind, dropped_ty,\n                 );\n                 return;\n             }\n         }\n \n-        let place_desc = self.describe_place(borrow.borrowed_place.as_place_ref());\n+        let place_desc = self.describe_place(borrow.borrowed_place.as_ref());\n \n         let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n         let explanation = self.explain_why_borrow_contains_point(location, &borrow, kind_place);\n@@ -951,12 +951,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_borrow_across_destructor(borrow_span);\n \n-        let what_was_dropped = match self.describe_place(place.as_place_ref()) {\n+        let what_was_dropped = match self.describe_place(place.as_ref()) {\n             Some(name) => format!(\"`{}`\", name.as_str()),\n             None => String::from(\"temporary value\"),\n         };\n \n-        let label = match self.describe_place(borrow.borrowed_place.as_place_ref()) {\n+        let label = match self.describe_place(borrow.borrowed_place.as_ref()) {\n             Some(borrowed) => format!(\n                 \"here, drop of {D} needs exclusive access to `{B}`, \\\n                  because the type `{T}` implements the `Drop` trait\",\n@@ -1127,7 +1127,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"`{}` is borrowed here\", place_desc),\n             )\n         } else {\n-            let root_place = self.prefixes(borrow.borrowed_place.as_place_ref(),\n+            let root_place = self.prefixes(borrow.borrowed_place.as_ref(),\n                                            PrefixSet::All)\n                 .last()\n                 .unwrap();\n@@ -1390,7 +1390,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let mut err = self.cannot_mutate_in_match_guard(\n                 span,\n                 loan_span,\n-                &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+                &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n                 \"assign\",\n             );\n             loan_spans.var_span_label(\n@@ -1406,7 +1406,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = self.cannot_assign_to_borrowed(\n             span,\n             loan_span,\n-            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n         );\n \n         loan_spans.var_span_label(\n@@ -1466,8 +1466,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 is_user_variable: None,\n                 ..\n             })\n-            | None => (self.describe_place(place.as_place_ref()), assigned_span),\n-            Some(decl) => (self.describe_place(err_place.as_place_ref()), decl.source_info.span),\n+            | None => (self.describe_place(place.as_ref()), assigned_span),\n+            Some(decl) => (self.describe_place(err_place.as_ref()), decl.source_info.span),\n         };\n \n         let mut err = self.cannot_reassign_immutable("}, {"sha": "a05c77aad6700903e86bedd213034f579be3162a", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -855,7 +855,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     def_id, is_generator, places\n                 );\n                 if let Some((args_span, var_span)) = self.closure_span(\n-                    *def_id, Place::from(target).as_place_ref(), places\n+                    *def_id, Place::from(target).as_ref(), places\n                 ) {\n                     return ClosureUse {\n                         is_generator,\n@@ -895,7 +895,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             for (upvar, place) in self.infcx.tcx.upvars(def_id)?.values().zip(places) {\n                 match place {\n                     Operand::Copy(place) |\n-                    Operand::Move(place) if target_place == place.as_place_ref() => {\n+                    Operand::Move(place) if target_place == place.as_ref() => {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n                         return Some((*args_span, upvar.span));\n                     },"}, {"sha": "8d27a32a285d8499e544273623c5a50c1f68565a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -560,7 +560,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -591,7 +591,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                         self.check_if_path_or_subpath_is_moved(\n                             location,\n                             InitializationRequiringAction::Use,\n-                            (output.as_place_ref(), o.span),\n+                            (output.as_ref(), o.span),\n                             flow_state,\n                         );\n                     } else {\n@@ -733,8 +733,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::interpret::InterpError::BoundsCheck;\n-                if let BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::interpret::{InterpError::Panic, PanicMessage};\n+                if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }\n@@ -1154,7 +1154,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Update,\n-                    (place_span.0.as_place_ref(), place_span.1),\n+                    (place_span.0.as_ref(), place_span.1),\n                     flow_state,\n                 );\n             }\n@@ -1232,7 +1232,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     action,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1260,7 +1260,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1309,7 +1309,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn propagate_closure_used_mut_upvar(&mut self, operand: &Operand<'tcx>) {\n         let propagate_closure_used_mut_place = |this: &mut Self, place: &Place<'tcx>| {\n             if place.projection.is_some() {\n-                if let Some(field) = this.is_upvar_field_projection(place.as_place_ref()) {\n+                if let Some(field) = this.is_upvar_field_projection(place.as_ref()) {\n                     this.used_mut_upvars.push(field);\n                 }\n             } else if let PlaceBase::Local(local) = place.base {\n@@ -1401,7 +1401,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1419,7 +1419,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1437,7 +1437,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) {\n         debug!(\"check_for_invalidation_at_exit({:?})\", borrow);\n         let place = &borrow.borrowed_place;\n-        let root_place = self.prefixes(place.as_place_ref(), PrefixSet::All).last().unwrap();\n+        let root_place = self.prefixes(place.as_ref(), PrefixSet::All).last().unwrap();\n \n         // FIXME(nll-rfc#40): do more precise destructor tracking here. For now\n         // we just know that all locals are dropped at function exit (otherwise"}, {"sha": "738a091b0dd7624c809df545a033708c627de49d", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let move_spans = self.move_spans(original_path.as_place_ref(), location);\n+                let move_spans = self.move_spans(original_path.as_ref(), location);\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n                     use_spans: move_spans,\n                     original_path,\n@@ -160,7 +160,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let from_simple_let = match_place.is_none();\n         let match_place = match_place.as_ref().unwrap_or(move_from);\n \n-        match self.move_data.rev_lookup.find(match_place.as_place_ref()) {\n+        match self.move_data.rev_lookup.find(match_place.as_ref()) {\n             // Error with the match place\n             LookupResult::Parent(_) => {\n                 for ge in &mut *grouped_errors {\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n             // Error with the pattern\n             LookupResult::Exact(_) => {\n-                let mpi = match self.move_data.rev_lookup.find(move_from.as_place_ref()) {\n+                let mpi = match self.move_data.rev_lookup.find(move_from.as_ref()) {\n                     LookupResult::Parent(Some(mpi)) => mpi,\n                     // move_from should be a projection from match_place.\n                     _ => unreachable!(\"Probably not unreachable...\"),\n@@ -242,7 +242,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 };\n             debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n                    original_path.is_upvar_field_projection={:?}\", original_path, span, kind,\n-                   self.is_upvar_field_projection(original_path.as_place_ref()));\n+                   self.is_upvar_field_projection(original_path.as_ref()));\n             (\n                 match kind {\n                     IllegalMoveOriginKind::Static => {\n@@ -277,7 +277,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         span: Span\n     ) -> DiagnosticBuilder<'a> {\n         let description = if place.projection.is_none() {\n-            format!(\"static item `{}`\", self.describe_place(place.as_place_ref()).unwrap())\n+            format!(\"static item `{}`\", self.describe_place(place.as_ref()).unwrap())\n         } else {\n             let mut base_static = &place.projection;\n             while let Some(box Projection { base: Some(ref proj), .. }) = base_static {\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             format!(\n                 \"`{:?}` as `{:?}` is a static item\",\n-                self.describe_place(place.as_place_ref()).unwrap(),\n+                self.describe_place(place.as_ref()).unwrap(),\n                 self.describe_place(base_static).unwrap(),\n             )\n         };\n@@ -308,7 +308,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         // borrow to provide feedback about why this\n         // was a move rather than a copy.\n         let ty = deref_target_place.ty(self.body, self.infcx.tcx).ty;\n-        let upvar_field = self.prefixes(move_place.as_place_ref(), PrefixSet::All)\n+        let upvar_field = self.prefixes(move_place.as_ref(), PrefixSet::All)\n             .find_map(|p| self.is_upvar_field_projection(p));\n \n         let deref_base = match deref_target_place.projection {\n@@ -363,10 +363,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let upvar_name = upvar.name;\n                 let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n \n-                let place_name = self.describe_place(move_place.as_place_ref()).unwrap();\n+                let place_name = self.describe_place(move_place.as_ref()).unwrap();\n \n                 let place_description = if self\n-                    .is_upvar_field_projection(move_place.as_place_ref())\n+                    .is_upvar_field_projection(move_place.as_ref())\n                     .is_some()\n                 {\n                     format!(\"`{}`, a {}\", place_name, capture_description)\n@@ -393,7 +393,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             _ => {\n                 let source = self.borrowed_content_source(deref_base);\n                 match (\n-                    self.describe_place(move_place.as_place_ref()),\n+                    self.describe_place(move_place.as_ref()),\n                     source.describe_for_named_place(),\n                 ) {\n                     (Some(place_desc), Some(source_desc)) => {\n@@ -455,7 +455,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.body, self.infcx.tcx).ty;\n-                    let place_desc = match self.describe_place(move_from.as_place_ref()) {\n+                    let place_desc = match self.describe_place(move_from.as_ref()) {\n                         Some(desc) => format!(\"`{}`\", desc),\n                         None => format!(\"value\"),\n                     };\n@@ -483,7 +483,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             GroupedMoveError::OtherIllegalMove { ref original_path, use_spans, .. } => {\n                 let span = use_spans.var_or_use();\n                 let place_ty = original_path.ty(self.body, self.infcx.tcx).ty;\n-                let place_desc = match self.describe_place(original_path.as_place_ref()) {\n+                let place_desc = match self.describe_place(original_path.as_ref()) {\n                     Some(desc) => format!(\"`{}`\", desc),\n                     None => format!(\"value\"),\n                 };"}, {"sha": "937c6383be341e50f3a5429440820650ce969147", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let item_msg;\n         let reason;\n         let mut opt_source = None;\n-        let access_place_desc = self.describe_place(access_place.as_place_ref());\n+        let access_place_desc = self.describe_place(access_place.as_ref());\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n@@ -77,7 +77,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 ));\n \n                 item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                if self.is_upvar_field_projection(access_place.as_place_ref()).is_some() {\n+                if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n                     let name = self.upvars[upvar_index.index()].name;\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ));\n \n                     reason =\n-                        if self.is_upvar_field_projection(access_place.as_place_ref()).is_some() {\n+                        if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                             \", as it is a captured variable in a `Fn` closure\".to_string()\n                         } else {\n                             \", as `Fn` closures cannot mutate their captured variables\".to_string()\n@@ -244,7 +244,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\n                         \"mutable borrow occurs due to use of `{}` in closure\",\n                         // always Some() if the message is printed.\n-                        self.describe_place(access_place.as_place_ref()).unwrap_or_default(),\n+                        self.describe_place(access_place.as_ref()).unwrap_or_default(),\n                     )\n                 );\n                 borrow_span"}, {"sha": "aba3ef1cbbfc9a64ec41f9e2ee9f0bbdd2f77898", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -252,7 +252,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some(Cause::LiveVar(local, location)) => {\n                 let span = body.source_info(location).span;\n                 let spans = self\n-                    .move_spans(Place::from(local).as_place_ref(), location)\n+                    .move_spans(Place::from(local).as_ref(), location)\n                     .or_else(|| self.borrow_spans(span, location));\n \n                 let borrow_location = location;\n@@ -305,7 +305,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     if let Some(region_name) = region_name {\n                         let opt_place_desc =\n-                            self.describe_place(borrow.borrowed_place.as_place_ref());\n+                            self.describe_place(borrow.borrowed_place.as_ref());\n                         BorrowExplanation::MustBeValidFor {\n                             category,\n                             from_closure,"}, {"sha": "90df0c91c7235b43ee33d46701274214c14001f2", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -207,8 +207,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 cleanup: _,\n             } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::interpret::InterpError::BoundsCheck;\n-                if let BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::interpret::{InterpError::Panic, PanicMessage::BoundsCheck};\n+                if let Panic(BoundsCheck { ref len, ref index }) = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "6ce2f968ed72d0f9c469bcec382a4a0fabc2cb91", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -28,7 +28,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{InterpError::BoundsCheck, ConstValue};\n+use rustc::mir::interpret::{InterpError::Panic, ConstValue, PanicMessage};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -1606,7 +1606,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let BoundsCheck { ref len, ref index } = *msg {\n+                if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "da3f165482655a9ffea313041c0753bed4649bbc", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -50,7 +50,7 @@ pub(super) fn each_borrow_involving_path<'tcx, F, I, S>(\n             body,\n             &borrowed.borrowed_place,\n             borrowed.kind,\n-            place.as_place_ref(),\n+            place.as_ref(),\n             access,\n             places_conflict::PlaceConflictBias::Overlap,\n         ) {"}, {"sha": "b2a03147ecf803dfd5ad567bb0949556da714afe", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -36,7 +36,7 @@ crate fn places_conflict<'tcx>(\n         body,\n         borrow_place,\n         BorrowKind::Mut { allow_two_phase_borrow: true },\n-        access_place.as_place_ref(),\n+        access_place.as_ref(),\n         AccessDepth::Deep,\n         bias,\n     )"}, {"sha": "42d08a728e0a749805f305a86f3425e1c10de1b1", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -4,7 +4,7 @@ use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::mir::interpret::InterpError::BoundsCheck;\n+use rustc::mir::interpret::{InterpError::Panic, PanicMessage::BoundsCheck};\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n \n@@ -105,10 +105,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     ),\n                 );\n \n-                let msg = BoundsCheck {\n+                let msg = Panic(BoundsCheck {\n                     len: Operand::Move(len),\n                     index: Operand::Copy(Place::from(idx)),\n-                };\n+                });\n                 let success = this.assert(block, Operand::Move(lt), true, msg, expr_span);\n                 success.and(slice.index(idx))\n             }"}, {"sha": "8790ebc41693faa9d5ba93256150c401ae98655c", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -7,7 +7,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::InterpError;\n+use rustc::mir::interpret::{InterpError::Panic, PanicMessage};\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        InterpError::OverflowNeg,\n+                        Panic(PanicMessage::OverflowNeg),\n                         expr_span,\n                     );\n                 }\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = InterpError::Overflow(op);\n+            let err = Panic(PanicMessage::Overflow(op));\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -412,9 +412,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (InterpError::DivisionByZero, InterpError::Overflow(op))\n+                    (Panic(PanicMessage::DivisionByZero), Panic(PanicMessage::Overflow(op)))\n                 } else {\n-                    (InterpError::RemainderByZero, InterpError::Overflow(op))\n+                    (Panic(PanicMessage::RemainderByZero), Panic(PanicMessage::Overflow(op)))\n                 };\n \n                 // Check for / 0"}, {"sha": "d72b0addae91500e6900d52617bb4aeacd15b83c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1304,7 +1304,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 prefix_cursor = base;\n             }\n \n-            all_fake_borrows.push(place.as_place_ref());\n+            all_fake_borrows.push(place.as_ref());\n         }\n \n         // Deduplicate and ensure a deterministic order."}, {"sha": "c071b3101fce3f2651cb04ae147216b86043b96d", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -171,7 +171,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n     let move_data = &ctxt.move_data;\n     for arg in body.args_iter() {\n         let place = mir::Place::from(arg);\n-        let lookup_result = move_data.rev_lookup.find(place.as_place_ref());\n+        let lookup_result = move_data.rev_lookup.find(place.as_ref());\n         on_lookup_result_bits(tcx, body, move_data,\n                               lookup_result,\n                               |mpi| callback(mpi, DropFlagState::Present));"}, {"sha": "69bbe087921404ba5d3f4f977986050f75ffd3f7", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'tcx> {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.body, self.move_data(),\n-                              self.move_data().rev_lookup.find(dest_place.as_place_ref()),\n+                              self.move_data().rev_lookup.find(dest_place.as_ref()),\n                               |mpi| { in_out.insert(mpi); });\n     }\n }\n@@ -367,7 +367,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'tcx> {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 0 (initialized).\n         on_lookup_result_bits(self.tcx, self.body, self.move_data(),\n-                              self.move_data().rev_lookup.find(dest_place.as_place_ref()),\n+                              self.move_data().rev_lookup.find(dest_place.as_ref()),\n                               |mpi| { in_out.remove(mpi); });\n     }\n }\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.body, self.move_data(),\n-                              self.move_data().rev_lookup.find(dest_place.as_place_ref()),\n+                              self.move_data().rev_lookup.find(dest_place.as_ref()),\n                               |mpi| { in_out.insert(mpi); });\n     }\n }"}, {"sha": "366b96b53b42312bd46173597a32e3605f000349", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -274,9 +274,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     // move-path for the interior so it will be separate from\n                     // the exterior.\n                     self.create_move_path(&place.clone().deref());\n-                    self.gather_init(place.as_place_ref(), InitKind::Shallow);\n+                    self.gather_init(place.as_ref(), InitKind::Shallow);\n                 } else {\n-                    self.gather_init(place.as_place_ref(), InitKind::Deep);\n+                    self.gather_init(place.as_ref(), InitKind::Deep);\n                 }\n                 self.gather_rvalue(rval);\n             }\n@@ -286,7 +286,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::InlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect {\n-                        self.gather_init(output.as_place_ref(), InitKind::Deep);\n+                        self.gather_init(output.as_ref(), InitKind::Deep);\n                     }\n                 }\n                 for (_, input) in asm.inputs.iter() {\n@@ -376,7 +376,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             TerminatorKind::DropAndReplace { ref location, ref value, .. } => {\n                 self.create_move_path(location);\n                 self.gather_operand(value);\n-                self.gather_init(location.as_place_ref(), InitKind::Deep);\n+                self.gather_init(location.as_ref(), InitKind::Deep);\n             }\n             TerminatorKind::Call {\n                 ref func,\n@@ -391,7 +391,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 if let Some((ref destination, _bb)) = *destination {\n                     self.create_move_path(destination);\n-                    self.gather_init(destination.as_place_ref(), InitKind::NonPanicPathOnly);\n+                    self.gather_init(destination.as_ref(), InitKind::NonPanicPathOnly);\n                 }\n             }\n         }"}, {"sha": "6623661f938fe6cbc2470ddcd83e25c54c15d522", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n-    InterpResult, InterpError, Scalar,\n+    InterpResult, InterpError, Scalar, PanicMessage,\n };\n \n use super::{\n@@ -261,7 +261,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(InterpError::Panic { msg, file, line, col }.into());\n+            return Err(InterpError::Panic(PanicMessage::Panic { msg, file, line, col }).into());\n         } else if Some(def_id) == self.tcx.lang_items().begin_panic_fn() {\n             assert!(args.len() == 2);\n             // &'static str, &(&'static str, u32, u32)\n@@ -279,7 +279,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(InterpError::Panic { msg, file, line, col }.into());\n+            return Err(InterpError::Panic(PanicMessage::Panic { msg, file, line, col }).into());\n         } else {\n             return Ok(false);\n         }"}, {"sha": "b4edee72a4d19bb901406d5fc9c94e70ac5bd7e4", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ use rustc::mir;\n use rustc::ty::{self, layout::TyLayout};\n use syntax::ast::FloatTy;\n use rustc_apfloat::Float;\n-use rustc::mir::interpret::{InterpResult, Scalar};\n+use rustc::mir::interpret::{InterpResult, PanicMessage, Scalar};\n \n use super::{InterpCx, PlaceTy, Immediate, Machine, ImmTy};\n \n@@ -173,8 +173,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 return Ok((Scalar::from_bool(op(&l, &r)), false));\n             }\n             let op: Option<fn(i128, i128) -> (i128, bool)> = match bin_op {\n-                Div if r == 0 => return err!(DivisionByZero),\n-                Rem if r == 0 => return err!(RemainderByZero),\n+                Div if r == 0 => return err!(Panic(PanicMessage::DivisionByZero)),\n+                Rem if r == 0 => return err!(Panic(PanicMessage::RemainderByZero)),\n                 Div => Some(i128::overflowing_div),\n                 Rem => Some(i128::overflowing_rem),\n                 Add => Some(i128::overflowing_add),\n@@ -231,8 +231,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Add => u128::overflowing_add,\n                     Sub => u128::overflowing_sub,\n                     Mul => u128::overflowing_mul,\n-                    Div if r == 0 => return err!(DivisionByZero),\n-                    Rem if r == 0 => return err!(RemainderByZero),\n+                    Div if r == 0 => return err!(Panic(PanicMessage::DivisionByZero)),\n+                    Rem if r == 0 => return err!(Panic(PanicMessage::RemainderByZero)),\n                     Div => u128::overflowing_div,\n                     Rem => u128::overflowing_rem,\n                     _ => bug!(),"}, {"sha": "8fe882934dfb58c9934b5a400a39173eb044ef7e", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::TypeFoldable;\n \n use super::{\n     GlobalId, AllocId, Allocation, Scalar, InterpResult, Pointer, PointerArithmetic,\n-    InterpCx, Machine, AllocMap, AllocationExtra,\n+    InterpCx, Machine, AllocMap, AllocationExtra, PanicMessage,\n     RawConst, Immediate, ImmTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind, LocalValue\n };\n \n@@ -356,7 +356,7 @@ where\n                     // This can be violated because this runs during promotion on code where the\n                     // type system has not yet ensured that such things don't happen.\n                     debug!(\"tried to access element {} of array/slice with length {}\", field, len);\n-                    return err!(BoundsCheck { len, index: field });\n+                    return err!(Panic(PanicMessage::BoundsCheck { len, index: field }));\n                 }\n                 stride * field\n             }"}, {"sha": "a85b77c7b8143e397250cca72a2057252d36b6f1", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic, InterpError, Scalar,\n+    InterpResult, PointerArithmetic, InterpError, Scalar, PanicMessage,\n     InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n@@ -137,19 +137,23 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     // Compute error message\n                     use rustc::mir::interpret::InterpError::*;\n                     return match *msg {\n-                        BoundsCheck { ref len, ref index } => {\n+                        Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n                             let len = self.read_immediate(self.eval_operand(len, None)?)\n                                 .expect(\"can't eval len\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n                             let index = self.read_immediate(self.eval_operand(index, None)?)\n                                 .expect(\"can't eval index\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n-                            err!(BoundsCheck { len, index })\n+                            err!(Panic(PanicMessage::BoundsCheck { len, index }))\n                         }\n-                        Overflow(op) => Err(Overflow(op).into()),\n-                        OverflowNeg => Err(OverflowNeg.into()),\n-                        DivisionByZero => Err(DivisionByZero.into()),\n-                        RemainderByZero => Err(RemainderByZero.into()),\n+                        Panic(PanicMessage::Overflow(op)) =>\n+                            Err(Panic(PanicMessage::Overflow(op)).into()),\n+                        Panic(PanicMessage::OverflowNeg) =>\n+                            Err(Panic(PanicMessage::OverflowNeg).into()),\n+                        Panic(PanicMessage::DivisionByZero) =>\n+                            Err(Panic(PanicMessage::DivisionByZero).into()),\n+                        Panic(PanicMessage::RemainderByZero) =>\n+                            Err(Panic(PanicMessage::RemainderByZero).into()),\n                         GeneratorResumedAfterReturn |\n                         GeneratorResumedAfterPanic => unimplemented!(),\n                         _ => bug!(),"}, {"sha": "d573423906c2ab58047d55c5bde6bfba735e7282", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -79,7 +79,7 @@ impl MirPass for AddRetag {\n         let needs_retag = |place: &Place<'tcx>| {\n             // FIXME: Instead of giving up for unstable places, we should introduce\n             // a temporary and retag on that.\n-            is_stable(place.as_place_ref())\n+            is_stable(place.as_ref())\n                 && may_have_reference(place.ty(&*local_decls, tcx).ty, tcx)\n         };\n "}, {"sha": "37fcd744a3883eaee60fc400fc68c4f92b415914", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n };\n-use rustc::mir::interpret::{InterpError, Scalar, GlobalId, InterpResult};\n+use rustc::mir::interpret::{InterpError::Panic, Scalar, GlobalId, InterpResult, PanicMessage};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -339,12 +339,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     // FIXME: implement\n                     => {},\n \n-                    | Panic { .. }\n-                    | BoundsCheck{..}\n-                    | Overflow(_)\n-                    | OverflowNeg\n-                    | DivisionByZero\n-                    | RemainderByZero\n+                    | Panic(_)\n                     => {\n                         diagnostic.report_as_lint(\n                             self.ecx.tcx,\n@@ -522,7 +517,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             // Need to do overflow check here: For actual CTFE, MIR\n                             // generation emits code that does this before calling the op.\n                             if prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n-                                return err!(OverflowNeg);\n+                                return err!(Panic(PanicMessage::OverflowNeg));\n                             }\n                         }\n                         UnOp::Not => {\n@@ -600,7 +595,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        let err = InterpError::Overflow(op).into();\n+                        let err = Panic(PanicMessage::Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n@@ -838,11 +833,11 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             .expect(\"some part of a failing const eval must be local\");\n                         use rustc::mir::interpret::InterpError::*;\n                         let msg = match msg {\n-                            Overflow(_) |\n-                            OverflowNeg |\n-                            DivisionByZero |\n-                            RemainderByZero => msg.description().to_owned(),\n-                            BoundsCheck { ref len, ref index } => {\n+                            Panic(PanicMessage::Overflow(_)) |\n+                            Panic(PanicMessage::OverflowNeg) |\n+                            Panic(PanicMessage::DivisionByZero) |\n+                            Panic(PanicMessage::RemainderByZero) => msg.description().to_owned(),\n+                            Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n                                 let len = self\n                                     .eval_operand(len, source_info)\n                                     .expect(\"len must be const\");"}, {"sha": "0a021d9b8fa066d3b3c8f7ac44686cfba0f595ff", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -105,7 +105,7 @@ fn find_dead_unwinds<'tcx>(\n             init_data.apply_location(tcx, body, env, loc);\n         }\n \n-        let path = match env.move_data.rev_lookup.find(location.as_place_ref()) {\n+        let path = match env.move_data.rev_lookup.find(location.as_ref()) {\n             LookupResult::Exact(e) => e,\n             LookupResult::Parent(..) => {\n                 debug!(\"find_dead_unwinds: has parent; skipping\");\n@@ -360,7 +360,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 statement_index: data.statements.len()\n             });\n \n-            let path = self.move_data().rev_lookup.find(location.as_place_ref());\n+            let path = self.move_data().rev_lookup.find(location.as_ref());\n             debug!(\"collect_drop_flags: {:?}, place {:?} ({:?})\",\n                    bb, location, path);\n \n@@ -399,7 +399,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             match terminator.kind {\n                 TerminatorKind::Drop { ref location, target, unwind } => {\n                     let init_data = self.initialization_data_at(loc);\n-                    match self.move_data().rev_lookup.find(location.as_place_ref()) {\n+                    match self.move_data().rev_lookup.find(location.as_ref()) {\n                         LookupResult::Exact(path) => {\n                             elaborate_drop(\n                                 &mut Elaborator {\n@@ -488,7 +488,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             is_cleanup: false,\n         });\n \n-        match self.move_data().rev_lookup.find(location.as_place_ref()) {\n+        match self.move_data().rev_lookup.find(location.as_ref()) {\n             LookupResult::Exact(path) => {\n                 debug!(\"elaborate_drop_and_replace({:?}) - tracked {:?}\", terminator, path);\n                 let init_data = self.initialization_data_at(loc);\n@@ -558,7 +558,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 assert!(!self.patch.is_patched(bb));\n \n                 let loc = Location { block: tgt, statement_index: 0 };\n-                let path = self.move_data().rev_lookup.find(place.as_place_ref());\n+                let path = self.move_data().rev_lookup.find(place.as_ref());\n                 on_lookup_result_bits(\n                     self.tcx, self.body, self.move_data(), path,\n                     |child| self.set_drop_flag(loc, child, DropFlagState::Present)\n@@ -632,7 +632,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 assert!(!self.patch.is_patched(bb));\n \n                 let loc = Location { block: bb, statement_index: data.statements.len() };\n-                let path = self.move_data().rev_lookup.find(place.as_place_ref());\n+                let path = self.move_data().rev_lookup.find(place.as_ref());\n                 on_lookup_result_bits(\n                     self.tcx, self.body, self.move_data(), path,\n                     |child| self.set_drop_flag(loc, child, DropFlagState::Present)"}, {"sha": "ffeaf4e19c22a76008d1a6a3a92d8b8caf68565a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -243,7 +243,7 @@ trait Qualif {\n     fn in_operand(cx: &ConstCx<'_, 'tcx>, operand: &Operand<'tcx>) -> bool {\n         match *operand {\n             Operand::Copy(ref place) |\n-            Operand::Move(ref place) => Self::in_place(cx, place.as_place_ref()),\n+            Operand::Move(ref place) => Self::in_place(cx, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n                 if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n@@ -272,7 +272,7 @@ trait Qualif {\n             Rvalue::NullaryOp(..) => false,\n \n             Rvalue::Discriminant(ref place) |\n-            Rvalue::Len(ref place) => Self::in_place(cx, place.as_place_ref()),\n+            Rvalue::Len(ref place) => Self::in_place(cx, place.as_ref()),\n \n             Rvalue::Use(ref operand) |\n             Rvalue::Repeat(ref operand, _) |\n@@ -298,7 +298,7 @@ trait Qualif {\n                     }\n                 }\n \n-                Self::in_place(cx, place.as_place_ref())\n+                Self::in_place(cx, place.as_ref())\n             }\n \n             Rvalue::Aggregate(_, ref operands) => {"}, {"sha": "7fe8480c819e6f690aee0fbda0a9a983c2b598fe", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -168,7 +168,7 @@ fn each_block<'tcx, O>(\n         if place == peek_arg_place {\n             if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_place) = **rvalue {\n                 // Okay, our search is over.\n-                match move_data.rev_lookup.find(peeking_at_place.as_place_ref()) {\n+                match move_data.rev_lookup.find(peeking_at_place.as_ref()) {\n                     LookupResult::Exact(peek_mpi) => {\n                         let bit_state = on_entry.contains(peek_mpi);\n                         debug!(\"rustc_peek({:?} = &{:?}) bit_state: {}\",\n@@ -192,7 +192,7 @@ fn each_block<'tcx, O>(\n             }\n         }\n \n-        let lhs_mpi = move_data.rev_lookup.find(place.as_place_ref());\n+        let lhs_mpi = move_data.rev_lookup.find(place.as_ref());\n \n         debug!(\"rustc_peek: computing effect on place: {:?} ({:?}) in stmt: {:?}\",\n                place, lhs_mpi, stmt);"}, {"sha": "0b2d7aacc4ddf79160293087a3c40fff1bb6fd9a", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mx32\".to_string());\n-    // BUG: temporarily workaround #59674\n-    base.stack_probes = false;\n+    base.stack_probes = true;\n     base.has_elf_tls = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743"}, {"sha": "5799e58a727a867aa52744516a4076082edef155", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1650,7 +1650,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n-                        err.span_label(span, format!(\"variant not found in `{}`\", qself_ty));\n+                        err.span_label(\n+                            assoc_ident.span,\n+                            format!(\"variant not found in `{}`\", qself_ty),\n+                        );\n                     }\n \n                     if let Some(sp) = tcx.hir().span_if_local(adt_def.did) {"}, {"sha": "21cd4b694ae4ca625047e323b6b12d9f597ba8b8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -759,40 +759,40 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::Ty>, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n-                hir::ItemKind::Const(_, body) |\n-                hir::ItemKind::Static(_, _, body) =>\n-                    Some((body, None, None)),\n+                hir::ItemKind::Const(ref ty, body) |\n+                hir::ItemKind::Static(ref ty, _, body) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n-                    Some((body, Some(header), Some(decl))),\n+                    Some((body, None, Some(header), Some(decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::TraitItem(item) => {\n             match item.node {\n-                hir::TraitItemKind::Const(_, Some(body)) =>\n-                    Some((body, None, None)),\n+                hir::TraitItemKind::Const(ref ty, Some(body)) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n-                    Some((body, Some(&sig.header), Some(&sig.decl))),\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::ImplItem(item) => {\n             match item.node {\n-                hir::ImplItemKind::Const(_, body) =>\n-                    Some((body, None, None)),\n+                hir::ImplItemKind::Const(ref ty, body) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::ImplItemKind::Method(ref sig, body) =>\n-                    Some((body, Some(&sig.header), Some(&sig.decl))),\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n-        Node::AnonConst(constant) => Some((constant.body, None, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None, None)),\n         _ => None,\n     }\n }\n@@ -825,7 +825,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, fn_header, fn_decl) = primary_body_of(tcx, id)\n+    let (body_id, body_ty, fn_header, fn_decl) = primary_body_of(tcx, id)\n         .unwrap_or_else(|| {\n             span_bug!(span, \"can't type-check body of {:?}\", def_id);\n         });\n@@ -856,7 +856,10 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n             fcx\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n-            let expected_type = tcx.type_of(def_id);\n+            let expected_type = body_ty.and_then(|ty| match ty.node {\n+                hir::TyKind::Infer => Some(AstConv::ast_ty_to_ty(&fcx, ty)),\n+                _ => None\n+            }).unwrap_or_else(|| tcx.type_of(def_id));\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, &expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n "}, {"sha": "053ef1f8f8297a2c640045eb7a601d1c2f6c9e68", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1135,6 +1135,26 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n+fn infer_placeholder_type(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    body_id: hir::BodyId,\n+    span: Span,\n+) -> Ty<'_> {\n+    let ty = tcx.typeck_tables_of(def_id).node_type(body_id.hir_id);\n+    let mut diag = bad_placeholder_type(tcx, span);\n+    if ty != tcx.types.err {\n+        diag.span_suggestion(\n+            span,\n+            \"replace `_` with the correct type\",\n+            ty.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+    diag.emit();\n+    ty\n+}\n+\n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n@@ -1160,7 +1180,16 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n-            TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n+            TraitItemKind::Const(ref ty, body_id)  => {\n+                body_id.and_then(|body_id| {\n+                    if let hir::TyKind::Infer = ty.node {\n+                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span))\n+                    } else {\n+                        None\n+                    }\n+                }).unwrap_or_else(|| icx.to_ty(ty))\n+            },\n+            TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n             TraitItemKind::Type(_, None) => {\n                 if !fail {\n                     return None;\n@@ -1174,7 +1203,13 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n-            ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n+            ImplItemKind::Const(ref ty, body_id) => {\n+                if let hir::TyKind::Infer = ty.node {\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                } else {\n+                    icx.to_ty(ty)\n+                }\n+            },\n             ImplItemKind::Existential(_) => {\n                 if tcx\n                     .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n@@ -1199,10 +1234,16 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n \n         Node::Item(item) => {\n             match item.node {\n-                ItemKind::Static(ref t, ..)\n-                | ItemKind::Const(ref t, _)\n-                | ItemKind::Ty(ref t, _)\n-                | ItemKind::Impl(.., ref t, _) => icx.to_ty(t),\n+                ItemKind::Static(ref ty, .., body_id)\n+                | ItemKind::Const(ref ty, body_id) => {\n+                    if let hir::TyKind::Infer = ty.node {\n+                        infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                    } else {\n+                        icx.to_ty(ty)\n+                    }\n+                },\n+                ItemKind::Ty(ref ty, _)\n+                | ItemKind::Impl(.., ref ty, _) => icx.to_ty(ty),\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id, substs)"}, {"sha": "3627ce6a5aa501865a4435448d17492c908d221e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -21,6 +21,7 @@\n #![feature(inner_deref)]\n #![feature(never_type)]\n #![feature(mem_take)]\n+#![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "43f0eaae7c97e36eaee669b295fdbbfd093b6fb7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -126,6 +126,9 @@ declare_features! (\n \n     // no-tracking-issue-start\n \n+    // Allows using compiler's own crates.\n+    (active, rustc_private, \"1.0.0\", Some(27812), None),\n+\n     // Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n "}, {"sha": "f4fc87506f357247666cca64a661a88d750cc84d", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,6 +2,7 @@ use crate::ast::{\n     self, Arg, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, VariantData,\n };\n+use crate::feature_gate::{feature_err, UnstableFeatures};\n use crate::parse::{SeqSep, PResult, Parser, ParseSess};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n use crate::parse::token::{self, TokenKind};\n@@ -326,8 +327,8 @@ impl<'a> Parser<'a> {\n             self.token.is_keyword(kw::Return) ||\n             self.token.is_keyword(kw::While)\n         );\n-        let cm = self.sess.source_map();\n-        match (cm.lookup_line(self.token.span.lo()), cm.lookup_line(sp.lo())) {\n+        let sm = self.sess.source_map();\n+        match (sm.lookup_line(self.token.span.lo()), sm.lookup_line(sp.lo())) {\n             (Ok(ref a), Ok(ref b)) if a.line != b.line && is_semi_suggestable => {\n                 // The spans are in different lines, expected `;` and found `let` or `return`.\n                 // High likelihood that it is only a missing `;`.\n@@ -365,9 +366,53 @@ impl<'a> Parser<'a> {\n                 err.span_label(self.token.span, \"unexpected token\");\n             }\n         }\n+        self.maybe_annotate_with_ascription(&mut err, false);\n         Err(err)\n     }\n \n+    pub fn maybe_annotate_with_ascription(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        maybe_expected_semicolon: bool,\n+    ) {\n+        if let Some((sp, likely_path)) = self.last_type_ascription {\n+            let sm = self.sess.source_map();\n+            let next_pos = sm.lookup_char_pos(self.token.span.lo());\n+            let op_pos = sm.lookup_char_pos(sp.hi());\n+\n+            if likely_path {\n+                err.span_suggestion(\n+                    sp,\n+                    \"maybe write a path separator here\",\n+                    \"::\".to_string(),\n+                    match self.sess.unstable_features {\n+                        UnstableFeatures::Disallow => Applicability::MachineApplicable,\n+                        _ => Applicability::MaybeIncorrect,\n+                    },\n+                );\n+            } else if op_pos.line != next_pos.line && maybe_expected_semicolon {\n+                err.span_suggestion(\n+                    sp,\n+                    \"try using a semicolon\",\n+                    \";\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else if let UnstableFeatures::Disallow = self.sess.unstable_features {\n+                err.span_label(sp, \"tried to parse a type due to this\");\n+            } else {\n+                err.span_label(sp, \"tried to parse a type due to this type ascription\");\n+            }\n+            if let UnstableFeatures::Disallow = self.sess.unstable_features {\n+                // Give extra information about type ascription only if it's a nightly compiler.\n+            } else {\n+                err.note(\"`#![feature(type_ascription)]` lets you annotate an expression with a \\\n+                          type: `<expr>: <type>`\");\n+                err.note(\"for more information, see \\\n+                          https://github.com/rust-lang/rust/issues/23416\");\n+            }\n+        }\n+    }\n+\n     /// Eats and discards tokens until one of `kets` is encountered. Respects token trees,\n     /// passes through any errors encountered. Used for error recovery.\n     crate fn eat_to_tokens(&mut self, kets: &[&TokenKind]) {\n@@ -556,7 +601,7 @@ impl<'a> Parser<'a> {\n         .collect::<Vec<_>>();\n \n         if !discriminant_spans.is_empty() && has_fields {\n-            let mut err = crate::feature_gate::feature_err(\n+            let mut err = feature_err(\n                 sess,\n                 sym::arbitrary_enum_discriminant,\n                 discriminant_spans.clone(),\n@@ -769,8 +814,8 @@ impl<'a> Parser<'a> {\n                 return Ok(recovered);\n             }\n         }\n-        let cm = self.sess.source_map();\n-        match (cm.lookup_line(prev_sp.lo()), cm.lookup_line(sp.lo())) {\n+        let sm = self.sess.source_map();\n+        match (sm.lookup_line(prev_sp.lo()), sm.lookup_line(sp.lo())) {\n             (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n                 // When the spans are in the same line, it means that the only content\n                 // between them is whitespace, point only at the found token.\n@@ -887,47 +932,9 @@ impl<'a> Parser<'a> {\n             self.look_ahead(2, |t| t.is_ident()) ||\n             self.look_ahead(1, |t| t == &token::Colon) &&  // `foo:bar:baz`\n             self.look_ahead(2, |t| t.is_ident()) ||\n-            self.look_ahead(1, |t| t == &token::ModSep) &&  // `foo:bar::baz`\n-            self.look_ahead(2, |t| t.is_ident())\n-    }\n-\n-    crate fn bad_type_ascription(\n-        &self,\n-        err: &mut DiagnosticBuilder<'a>,\n-        lhs_span: Span,\n-        cur_op_span: Span,\n-        next_sp: Span,\n-        maybe_path: bool,\n-    ) {\n-        err.span_label(self.token.span, \"expecting a type here because of type ascription\");\n-        let cm = self.sess.source_map();\n-        let next_pos = cm.lookup_char_pos(next_sp.lo());\n-        let op_pos = cm.lookup_char_pos(cur_op_span.hi());\n-        if op_pos.line != next_pos.line {\n-            err.span_suggestion(\n-                cur_op_span,\n-                \"try using a semicolon\",\n-                \";\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else {\n-            if maybe_path {\n-                err.span_suggestion(\n-                    cur_op_span,\n-                    \"maybe you meant to write a path separator here\",\n-                    \"::\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else {\n-                err.note(\"`#![feature(type_ascription)]` lets you annotate an \\\n-                          expression with a type: `<expr>: <type>`\")\n-                    .span_note(\n-                        lhs_span,\n-                        \"this expression expects an ascribed type after the colon\",\n-                    )\n-                    .help(\"this might be indicative of a syntax error elsewhere\");\n-            }\n-        }\n+            self.look_ahead(1, |t| t == &token::ModSep) &&\n+            (self.look_ahead(2, |t| t.is_ident()) ||   // `foo:bar::baz`\n+             self.look_ahead(2, |t| t == &token::Lt))  // `foo:bar::<baz>`\n     }\n \n     crate fn recover_seq_parse_error("}, {"sha": "b97801a50d4721cbc6c9c88f5976388c9e9ed435", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1,12 +1,12 @@\n use crate::parse::ParseSess;\n use crate::parse::token::{self, Token, TokenKind};\n use crate::symbol::{sym, Symbol};\n-use crate::parse::unescape;\n use crate::parse::unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n \n use errors::{FatalError, Diagnostic, DiagnosticBuilder};\n use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION};\n use rustc_lexer::Base;\n+use rustc_lexer::unescape;\n \n use std::borrow::Cow;\n use std::char;"}, {"sha": "6409acba573ad33a43b9b0f49a2ec426807da896", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -4,9 +4,6 @@ use crate::ast::{self, Lit, LitKind};\n use crate::parse::parser::Parser;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token, TokenKind};\n-use crate::parse::unescape::{unescape_char, unescape_byte};\n-use crate::parse::unescape::{unescape_str, unescape_byte_str};\n-use crate::parse::unescape::{unescape_raw_str, unescape_raw_byte_str};\n use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n@@ -15,6 +12,9 @@ use errors::{Applicability, Handler};\n use log::debug;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n+use rustc_lexer::unescape::{unescape_char, unescape_byte};\n+use rustc_lexer::unescape::{unescape_str, unescape_byte_str};\n+use rustc_lexer::unescape::{unescape_raw_str, unescape_raw_byte_str};\n \n use std::ascii;\n "}, {"sha": "225065c1cf11f84a7886bb1df712f74b3b4971df", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -32,7 +32,6 @@ pub mod token;\n crate mod classify;\n crate mod diagnostics;\n crate mod literal;\n-crate mod unescape;\n crate mod unescape_error_reporting;\n \n /// Info about a parsing session."}, {"sha": "da38869463737d5d09873a5c3ebf23849baa2c7f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -239,6 +239,7 @@ pub struct Parser<'a> {\n     /// error.\n     crate unclosed_delims: Vec<UnmatchedBrace>,\n     crate last_unexpected_token_span: Option<Span>,\n+    crate last_type_ascription: Option<(Span, bool /* likely path typo */)>,\n     /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n     crate subparser_name: Option<&'static str>,\n }\n@@ -502,6 +503,7 @@ impl<'a> Parser<'a> {\n             max_angle_bracket_count: 0,\n             unclosed_delims: Vec::new(),\n             last_unexpected_token_span: None,\n+            last_type_ascription: None,\n             subparser_name,\n         };\n \n@@ -1422,7 +1424,10 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let msg = format!(\"expected type, found {}\", self.this_token_descr());\n-            return Err(self.fatal(&msg));\n+            let mut err = self.fatal(&msg);\n+            err.span_label(self.token.span, \"expected type\");\n+            self.maybe_annotate_with_ascription(&mut err, true);\n+            return Err(err);\n         };\n \n         let span = lo.to(self.prev_span);\n@@ -2823,10 +2828,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an associative expression with operators of at least `min_prec` precedence.\n-    fn parse_assoc_expr_with(&mut self,\n-                                 min_prec: usize,\n-                                 lhs: LhsExpr)\n-                                 -> PResult<'a, P<Expr>> {\n+    fn parse_assoc_expr_with(\n+        &mut self,\n+        min_prec: usize,\n+        lhs: LhsExpr,\n+    ) -> PResult<'a, P<Expr>> {\n         let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {\n             expr\n         } else {\n@@ -2840,9 +2846,11 @@ impl<'a> Parser<'a> {\n                 self.parse_prefix_expr(attrs)?\n             }\n         };\n+        let last_type_ascription_set = self.last_type_ascription.is_some();\n \n         match (self.expr_is_complete(&lhs), AssocOp::from_token(&self.token)) {\n             (true, None) => {\n+                self.last_type_ascription = None;\n                 // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n                 return Ok(lhs);\n             }\n@@ -2857,12 +2865,14 @@ impl<'a> Parser<'a> {\n             // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n             // `if x { a } else { b } && if y { c } else { d }`\n             if !self.look_ahead(1, |t| t.is_reserved_ident()) => {\n+                self.last_type_ascription = None;\n                 // These cases are ambiguous and can't be identified in the parser alone\n                 let sp = self.sess.source_map().start_point(self.token.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 return Ok(lhs);\n             }\n             (true, Some(ref op)) if !op.can_continue_expr_unambiguously() => {\n+                self.last_type_ascription = None;\n                 return Ok(lhs);\n             }\n             (true, Some(_)) => {\n@@ -2921,21 +2931,9 @@ impl<'a> Parser<'a> {\n                 continue\n             } else if op == AssocOp::Colon {\n                 let maybe_path = self.could_ascription_be_path(&lhs.node);\n-                let next_sp = self.token.span;\n+                self.last_type_ascription = Some((self.prev_span, maybe_path));\n \n-                lhs = match self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type) {\n-                    Ok(lhs) => lhs,\n-                    Err(mut err) => {\n-                        self.bad_type_ascription(\n-                            &mut err,\n-                            lhs_span,\n-                            cur_op_span,\n-                            next_sp,\n-                            maybe_path,\n-                        );\n-                        return Err(err);\n-                    }\n-                };\n+                lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;\n                 continue\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {\n                 // If we didn\u2019t have to handle `x..`/`x..=`, it would be pretty easy to\n@@ -3020,6 +3018,9 @@ impl<'a> Parser<'a> {\n \n             if let Fixity::None = fixity { break }\n         }\n+        if last_type_ascription_set {\n+            self.last_type_ascription = None;\n+        }\n         Ok(lhs)\n     }\n "}, {"sha": "bc3ee8620e06835f96c150c122347b4553c97016", "filename": "src/libsyntax/parse/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -3,12 +3,11 @@\n use std::ops::Range;\n use std::iter::once;\n \n+use rustc_lexer::unescape::{EscapeError, Mode};\n use syntax_pos::{Span, BytePos};\n \n use crate::errors::{Handler, Applicability};\n \n-use super::unescape::{EscapeError, Mode};\n-\n pub(crate) fn emit_unescape_error(\n     handler: &Handler,\n     // interior part of the literal, without quotes"}, {"sha": "e53660b656865ddb87f29650eb1c364da43b4dd3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -141,7 +141,10 @@ fn parse_args<'a>(\n \n     while p.token != token::Eof {\n         if !p.eat(&token::Comma) {\n-            return Err(ecx.struct_span_err(p.token.span, \"expected token: `,`\"));\n+            let mut err = ecx.struct_span_err(p.token.span, \"expected token: `,`\");\n+            err.span_label(p.token.span, \"expected `,`\");\n+            p.maybe_annotate_with_ascription(&mut err, false);\n+            return Err(err);\n         }\n         if p.token == token::Eof {\n             break;"}, {"sha": "7de90278ed732a55ca4a79d02b17b29d2a690100", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -12,6 +12,7 @@\n #![feature(decl_macro)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "14d65bef8f6dd41aede5b5550bc9ff90edf25fea", "filename": "src/stage0.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -25,9 +25,9 @@ cargo: beta\n #\n # This means that there's a small window of time (a few days) where artifacts\n # are downloaded from dev-static.rust-lang.org instead of static.rust-lang.org.\n-# In order to ease this transition we have an extra key is in this configuration\n-# file below. When uncommented this will instruct the bootstrap.py script to\n-# download from dev-static.rust-lang.org.\n+# In order to ease this transition we have an extra key which is in the \n+# configuration file below. When uncommented this will instruct the bootstrap.py\n+# script to download from dev-static.rust-lang.org.\n #\n # This key is typically commented out at all times. If you're looking at a\n # stable release tarball it should *definitely* be commented out. If you're"}, {"sha": "0f81fc41823ba13654876ff35bff907c1fe5a042", "filename": "src/test/ui/allocator/two-allocators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -4,6 +4,6 @@ use std::alloc::System;\n static A: System = System;\n #[global_allocator]\n static B: System = System;\n-//~^ ERROR: cannot define more than one #[global_allocator]\n+//~^ ERROR: cannot define more than one `#[global_allocator]`\n \n fn main() {}"}, {"sha": "6b0c2b2a25d38516d5d66c5c6223da5149937b5e", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -1,4 +1,4 @@\n-error: cannot define more than one #[global_allocator]\n+error: cannot define more than one `#[global_allocator]`\n   --> $DIR/two-allocators.rs:6:1\n    |\n LL | static B: System = System;"}, {"sha": "5b01314d8ad4ff3f85375a0577b58c9184b21c12", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -10,13 +10,13 @@ error: expected token: `,`\n   --> $DIR/bad-format-args.rs:3:16\n    |\n LL |     format!(\"\" 1);\n-   |                ^\n+   |                ^ expected `,`\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:4:19\n    |\n LL |     format!(\"\", 1 1);\n-   |                   ^\n+   |                   ^ expected `,`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "beb8941320bc2d83bb20dc4420345200a0b01480", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -11,7 +11,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/E0121.rs:3:13\n    |\n LL | static BAR: _ = \"test\";\n-   |             ^ not allowed in type signatures\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace `_` with the correct type: `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f038648ec2149e851bc551a3370626b4f2f91025", "filename": "src/test/ui/existential-type/issue-58887.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fexistential-type%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fexistential-type%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential-type%2Fissue-58887.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,23 @@\n+#![feature(existential_type)]\n+\n+trait UnwrapItemsExt {\n+    type Iter;\n+    fn unwrap_items(self) -> Self::Iter;\n+}\n+\n+impl<I, T, E> UnwrapItemsExt for I\n+where\n+    I: Iterator<Item = Result<T, E>>,\n+    E: std::fmt::Debug,\n+{\n+    existential type Iter: Iterator<Item = T>;\n+    //~^ ERROR: could not find defining uses\n+\n+    fn unwrap_items(self) -> Self::Iter {\n+    //~^ ERROR: type parameter `T` is part of concrete type\n+    //~| ERROR: type parameter `E` is part of concrete type\n+        self.map(|x| x.unwrap())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "800f4b7e059fbd8d02807bec810c5e0a3ae2f46e", "filename": "src/test/ui/existential-type/issue-58887.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fexistential-type%2Fissue-58887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fexistential-type%2Fissue-58887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential-type%2Fissue-58887.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,30 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for existential type\n+  --> $DIR/issue-58887.rs:16:41\n+   |\n+LL |       fn unwrap_items(self) -> Self::Iter {\n+   |  _________________________________________^\n+LL | |\n+LL | |\n+LL | |         self.map(|x| x.unwrap())\n+LL | |     }\n+   | |_____^\n+\n+error: type parameter `E` is part of concrete type but not used in parameter list for existential type\n+  --> $DIR/issue-58887.rs:16:41\n+   |\n+LL |       fn unwrap_items(self) -> Self::Iter {\n+   |  _________________________________________^\n+LL | |\n+LL | |\n+LL | |         self.map(|x| x.unwrap())\n+LL | |     }\n+   | |_____^\n+\n+error: could not find defining uses\n+  --> $DIR/issue-58887.rs:13:5\n+   |\n+LL |     existential type Iter: Iterator<Item = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7b8944bb0a0b8fd5d0dd2bc6276b77ce6522fb08", "filename": "src/test/ui/feature-gate/rustc-private.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,5 @@\n+// gate-test-rustc_private\n+\n+extern crate libc; //~ ERROR  use of unstable library feature 'rustc_private'\n+\n+fn main() {}"}, {"sha": "be320718145e0abea306191b91b753859506eb40", "filename": "src/test/ui/feature-gate/rustc-private.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n+  --> $DIR/rustc-private.rs:3:1\n+   |\n+LL | extern crate libc;\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "454d7e5e9cdea8c97c43968bcb2ff226ed3bb8ae", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,50 @@\n+trait T0<'a, A> {\n+    type O;\n+}\n+\n+struct L<T> {\n+    f: T,\n+}\n+\n+// explicitly named variants of what one would normally denote by the\n+// unit type `()`. Why do this? So that we can differentiate them in\n+// the diagnostic output.\n+struct Unit1;\n+struct Unit2;\n+struct Unit3;\n+struct Unit4;\n+\n+impl<'a, A, T> T0<'a, A> for L<T>\n+where\n+    T: FnMut(A) -> Unit3,\n+{\n+    type O = T::Output;\n+}\n+\n+trait T1: for<'r> Ty<'r> {\n+    fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n+    where\n+        F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n+    {\n+        unimplemented!();\n+    }\n+}\n+\n+trait Ty<'a> {\n+    type V;\n+}\n+\n+fn main() {\n+    let v = Unit2.m(\n+        //~^ ERROR type mismatch\n+        //~| ERROR type mismatch\n+        L {\n+            f : |x| { drop(x); Unit4 }\n+        });\n+}\n+\n+impl<'a> Ty<'a> for Unit2 {\n+    type V = &'a u8;\n+}\n+\n+impl T1 for Unit2 {}"}, {"sha": "c2d0e0c2a26bc077ed41b93068e730b08fa50b84", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,22 @@\n+error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (<Unit2 as Ty<'r>>::V,)>>::O == <_ as Ty<'r>>::V`\n+  --> $DIR/issue-62203-hrtb-ice.rs:38:19\n+   |\n+LL |     let v = Unit2.m(\n+   |                   ^ expected struct `Unit4`, found associated type\n+   |\n+   = note: expected type `Unit4`\n+              found type `<_ as Ty<'_>>::V`\n+\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as std::ops::FnOnce<((&u8,),)>>::Output == Unit3`\n+  --> $DIR/issue-62203-hrtb-ice.rs:38:19\n+   |\n+LL |     let v = Unit2.m(\n+   |                   ^ expected struct `Unit4`, found struct `Unit3`\n+   |\n+   = note: expected type `Unit4`\n+              found type `Unit3`\n+   = note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "0fe167963c3f4b3f84d680d081f078115c928a6f", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -87,15 +87,12 @@ error: expected type, found `4`\n   --> $DIR/issue-22644.rs:34:28\n    |\n LL |     println!(\"{}\", a: &mut 4);\n-   |                            ^ expecting a type here because of type ascription\n+   |                     -      ^ expected type\n+   |                     |\n+   |                     tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/issue-22644.rs:34:20\n-   |\n-LL |     println!(\"{}\", a: &mut 4);\n-   |                    ^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 9 previous errors\n "}, {"sha": "acb093b51428b3ab5b4b57418266c8c8ac08f634", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,15 +2,12 @@ error: expected type, found `42`\n   --> $DIR/issue-34255-1.rs:8:24\n    |\n LL |     Test::Drill(field: 42);\n-   |                        ^^ expecting a type here because of type ascription\n+   |                      - ^^ expected type\n+   |                      |\n+   |                      tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/issue-34255-1.rs:8:17\n-   |\n-LL |     Test::Drill(field: 42);\n-   |                 ^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to previous error\n "}, {"sha": "75eb55fa50bb33e5531210a355861e0bf6684130", "filename": "src/test/ui/issues/issue-39616.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `0`\n   --> $DIR/issue-39616.rs:1:12\n    |\n LL | fn foo(a: [0; 1]) {}\n-   |            ^\n+   |            ^ expected type\n \n error: expected one of `)`, `,`, `->`, `where`, or `{`, found `]`\n   --> $DIR/issue-39616.rs:1:16"}, {"sha": "108542c9b6f135b3dd91162bcd17d671a5416ff4", "filename": "src/test/ui/issues/issue-44406.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -15,7 +15,10 @@ LL |         bar(baz: $rest)\n    |                - help: try using a semicolon: `;`\n ...\n LL |     foo!(true);\n-   |          ^^^^ expecting a type here because of type ascription\n+   |          ^^^^ expected type\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bacba10b55fba490dafb837daf829e6f5f4a8de9", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -12,15 +12,12 @@ error: expected type, found keyword `loop`\n   --> $DIR/lifetime_starts_expressions.rs:6:26\n    |\n LL |     loop { break 'label: loop { break 'label 42; }; }\n-   |                          ^^^^ expecting a type here because of type ascription\n+   |                        - ^^^^ expected type\n+   |                        |\n+   |                        tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/lifetime_starts_expressions.rs:6:12\n-   |\n-LL |     loop { break 'label: loop { break 'label 42; }; }\n-   |            ^^^^^^^^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f96848f8239f7ec437b017814c51c014ecea4b60", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected token: `,`\n   --> $DIR/missing-comma.rs:19:19\n    |\n LL |     println!(\"{}\" a);\n-   |                   ^\n+   |                   ^ expected `,`\n \n error: no rules expected the token `b`\n   --> $DIR/missing-comma.rs:21:12"}, {"sha": "2aff328393538c0031c1df39ce7706c693cc8452", "filename": "src/test/ui/parser/issue-33262.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fissue-33262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fissue-33262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33262.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `{`\n   --> $DIR/issue-33262.rs:4:22\n    |\n LL |     for i in 0..a as { }\n-   |                      ^\n+   |                      ^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "f02f60e4bfb1df142f74a4886049a65d524b500e", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `'static`\n   --> $DIR/trait-object-macro-matcher.rs:9:8\n    |\n LL |     m!('static);\n-   |        ^^^^^^^\n+   |        ^^^^^^^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "2311887a6fb36d35e6177d7c6da3bb10776084b9", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `{`\n   --> $DIR/recover-enum2.rs:6:18\n    |\n LL |             abc: {},\n-   |                  ^\n+   |                  ^ expected type\n \n error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n   --> $DIR/recover-enum2.rs:25:22"}, {"sha": "b46d3ca9c233ca2371fe33c3d989f57ca13a72a0", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,15 +2,12 @@ error: expected type, found `3`\n   --> $DIR/recover-from-bad-variant.rs:7:26\n    |\n LL |     let x = Enum::Foo(a: 3, b: 4);\n-   |                          ^ expecting a type here because of type ascription\n+   |                        - ^ expected type\n+   |                        |\n+   |                        tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/recover-from-bad-variant.rs:7:23\n-   |\n-LL |     let x = Enum::Foo(a: 3, b: 4);\n-   |                       ^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error[E0532]: expected tuple struct/variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9"}, {"sha": "02b518e251678a718703c171590878175cac2b7c", "filename": "src/test/ui/parser/removed-syntax-mut-vec-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mut-vec-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mut-vec-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mut-vec-ty.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found keyword `mut`\n   --> $DIR/removed-syntax-mut-vec-ty.rs:1:11\n    |\n LL | type v = [mut isize];\n-   |           ^^^\n+   |           ^^^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "0a1655840b5509752ac70a4c634598976c98b55e", "filename": "src/test/ui/parser/removed-syntax-record.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-record.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-record.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-record.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `{`\n   --> $DIR/removed-syntax-record.rs:1:10\n    |\n LL | type t = { f: () };\n-   |          ^\n+   |          ^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "7ffc26e9edead1542253912856dff347ae444faa", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -29,7 +29,7 @@ error: expected type, found `'a`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n LL |     let _: Box<('a) + Trait>;\n-   |         -       ^^\n+   |         -       ^^ expected type\n    |         |\n    |         while parsing the type for `_`\n "}, {"sha": "b4338e2055431f74c9a3370704e9b067c9b9196b", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -23,9 +23,7 @@ LL | enum Shape {\n    | ---------- variant `Rombus` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n-   |                                  -------^^^^^^\n-   |                                  |\n-   |                                  variant not found in `Shape`\n+   |                                         ^^^^^^ variant not found in `Shape`\n \n error[E0599]: no variant or associated item named `Squareee` found for type `Shape` in the current scope\n   --> $DIR/suggest-variants.rs:15:12"}, {"sha": "4a8d2f57d89d388a55552ab5c12a82a99009ad9f", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,9 +2,12 @@ error: expected type, found `\"foo\"`\n   --> $DIR/type-ascription-instead-of-method.rs:2:13\n    |\n LL |     Box:new(\"foo\".to_string())\n-   |        -    ^^^^^ expecting a type here because of type ascription\n+   |        -    ^^^^^ expected type\n    |        |\n-   |        help: maybe you meant to write a path separator here: `::`\n+   |        help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to previous error\n "}, {"sha": "7e9a31c06c8b249169fa5b6a343fbbad68d115a0", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,9 +2,12 @@ error: expected type, found `\"\"`\n   --> $DIR/type-ascription-instead-of-variant.rs:2:25\n    |\n LL |     let _ = Option:Some(\"\");\n-   |                   -     ^^ expecting a type here because of type ascription\n+   |                   -     ^^ expected type\n    |                   |\n-   |                   help: maybe you meant to write a path separator here: `::`\n+   |                   help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to previous error\n "}, {"sha": "c11a248d3c7d12652be9de002952f28450078235", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,15 @@\n+struct Reactor {\n+    input_cells: Vec<usize>,\n+}\n+\n+impl Reactor {\n+    pub fn new() -> Self {\n+        input_cells: Vec::new()\n+        //~^ ERROR cannot find value `input_cells` in this scope\n+        //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n+        //~| ERROR wrong number of type arguments: expected 1, found 0\n+        //~| WARNING this was previously accepted by the compiler but is being phased out\n+    }\n+}\n+\n+// This case isn't currently being handled gracefully, including for completeness."}, {"sha": "531455b82b4245f254179af1ae992dd7f29bbebd", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,30 @@\n+error[E0425]: cannot find value `input_cells` in this scope\n+  --> $DIR/issue-34255-1.rs:7:9\n+   |\n+LL |         input_cells: Vec::new()\n+   |         ^^^^^^^^^^^ a field by this name exists in `Self`\n+\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-34255-1.rs:7:30\n+   |\n+LL |         input_cells: Vec::new()\n+   |                              ^^\n+   |\n+   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+\n+error[E0601]: `main` function not found in crate `issue_34255_1`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-34255-1.rs`\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/issue-34255-1.rs:7:22\n+   |\n+LL |         input_cells: Vec::new()\n+   |                      ^^^^^^^^^^ expected 1 type argument\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0425, E0601.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "ceb1dd89daea9b96383b59765ef73e475b1ff979", "filename": "src/test/ui/type/ascription/issue-47666.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let _ = Option:Some(vec![0, 1]); //~ ERROR expected type, found\n+}\n+\n+// This case isn't currently being handled gracefully due to the macro invocation."}, {"sha": "7aa899f795c7d6b452e977ec5830c5864073a19f", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,13 @@\n+error: expected type, found reserved keyword `box`\n+  --> $DIR/issue-47666.rs:2:25\n+   |\n+LL |     let _ = Option:Some(vec![0, 1]);\n+   |                         ^^^^^^^^^^\n+   |                         |\n+   |                         expected type\n+   |                         in this macro invocation\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "6d65760e299b502265de517b1eba844989a962e2", "filename": "src/test/ui/type/ascription/issue-54516.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,6 @@\n+use std::collections::BTreeMap;\n+\n+fn main() {\n+    println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n+    //~^ ERROR expected token: `,`\n+}"}, {"sha": "a846f3bc320e6f5ed0dc16ae36bda0395f12628b", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,13 @@\n+error: expected token: `,`\n+  --> $DIR/issue-54516.rs:4:58\n+   |\n+LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n+   |                            -                             ^ expected `,`\n+   |                            |\n+   |                            help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+\n+error: aborting due to previous error\n+"}, {"sha": "8fb06c887bd3e7a16a332717fb881702f95e94e2", "filename": "src/test/ui/type/ascription/issue-60933.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let u: usize = std::mem:size_of::<u32>();\n+    //~^ ERROR expected one of\n+}"}, {"sha": "c2fc7bbcfc8651df024835ab2e48bfa6b17ea602", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `!`, `::`, or `;`, found `(`\n+  --> $DIR/issue-60933.rs:2:43\n+   |\n+LL |     let u: usize = std::mem:size_of::<u32>();\n+   |                            -              ^ expected one of `!`, `::`, or `;` here\n+   |                            |\n+   |                            help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+\n+error: aborting due to previous error\n+"}, {"sha": "3fe676de59dab2f1c6b60bcead98564a61e6bd35", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `10`\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:31\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |         --                    ^^\n+   |         --                    ^^ expected type\n    |         ||\n    |         |help: use `=` if you meant to assign\n    |         while parsing the type for `x`"}, {"sha": "8fbcb3969a79aa616970023f4064a78ea13c294c", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -4,21 +4,21 @@ error: expected type, found `0`\n LL |     println!(\"test\"):\n    |                     - help: try using a semicolon: `;`\n LL |     0;\n-   |     ^ expecting a type here because of type ascription\n+   |     ^ expected type\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: expected type, found `0`\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:23\n    |\n LL |     println!(\"test\"): 0;\n-   |                       ^ expecting a type here because of type ascription\n+   |                     - ^ expected type\n+   |                     |\n+   |                     tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n-   |\n-LL |     println!(\"test\"): 0;\n-   |     ^^^^^^^^^^^^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b4d9966c3d0b50259e1f64cd57839b3085d7b2b", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -23,13 +23,19 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:11:15\n    |\n LL | static TEST3: _ = \"test\";\n-   |               ^ not allowed in type signatures\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:14:15\n    |\n LL | static TEST4: _ = 145;\n-   |               ^ not allowed in type signatures\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:17:16\n@@ -122,13 +128,19 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:64:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:67:22\n    |\n LL |     static FN_TEST4: _ = 145;\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:70:23"}, {"sha": "905fc35350ed02e4e38cce373dc99fcf578707c3", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -4,6 +4,24 @@\n fn test1() -> _ { Some(42) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n+const TEST2: _ = 42u32;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+const TEST3: _ = Some(42);\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+trait Test4 {\n+    const TEST4: _ = 42;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n+\n+struct Test5;\n+\n+impl Test5 {\n+    const TEST5: _ = 13;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n+\n pub fn main() {\n     let _: Option<usize> = test1();\n     let _: f64 = test1();"}, {"sha": "c5b9566290c114b9fb2de41a0b89b06921a4305e", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f28678bbf4e16893bb6a718e427504167a9494/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=a7f28678bbf4e16893bb6a718e427504167a9494", "patch": "@@ -7,6 +7,42 @@ LL | fn test1() -> _ { Some(42) }\n    |               not allowed in type signatures\n    |               help: replace `_` with the correct return type: `std::option::Option<i32>`\n \n-error: aborting due to previous error\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:7:14\n+   |\n+LL | const TEST2: _ = 42u32;\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace `_` with the correct type: `u32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:10:14\n+   |\n+LL | const TEST3: _ = Some(42);\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace `_` with the correct type: `std::option::Option<i32>`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:14:18\n+   |\n+LL |     const TEST4: _ = 42;\n+   |                  ^\n+   |                  |\n+   |                  not allowed in type signatures\n+   |                  help: replace `_` with the correct type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:21:18\n+   |\n+LL |     const TEST5: _ = 13;\n+   |                  ^\n+   |                  |\n+   |                  not allowed in type signatures\n+   |                  help: replace `_` with the correct type: `i32`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}]}