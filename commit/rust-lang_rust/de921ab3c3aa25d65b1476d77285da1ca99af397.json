{"sha": "de921ab3c3aa25d65b1476d77285da1ca99af397", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTIxYWIzYzNhYTI1ZDY1YjE0NzZkNzcyODVkYTFjYTk5YWYzOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-05T19:09:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-05T19:09:22Z"}, "message": "Auto merge of #75428 - the8472:fix-copy-eopnotsupp, r=joshtriplett\n\nWorkarounds for copy_file_range issues\n\nfixes #75387\nfixes #75446", "tree": {"sha": "802cb52c77d098a57d90067999d68f1ec266a44f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/802cb52c77d098a57d90067999d68f1ec266a44f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de921ab3c3aa25d65b1476d77285da1ca99af397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de921ab3c3aa25d65b1476d77285da1ca99af397", "html_url": "https://github.com/rust-lang/rust/commit/de921ab3c3aa25d65b1476d77285da1ca99af397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de921ab3c3aa25d65b1476d77285da1ca99af397/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f44fb9232dc960d213d0df4a203c387215a5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f44fb9232dc960d213d0df4a203c387215a5ff", "html_url": "https://github.com/rust-lang/rust/commit/04f44fb9232dc960d213d0df4a203c387215a5ff"}, {"sha": "4ddedd521418d67e845ecb43dc02c09b0af53022", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddedd521418d67e845ecb43dc02c09b0af53022", "html_url": "https://github.com/rust-lang/rust/commit/4ddedd521418d67e845ecb43dc02c09b0af53022"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "566ac0920dc8f5762842b3585c20fc1cb5fc6d06", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/de921ab3c3aa25d65b1476d77285da1ca99af397/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de921ab3c3aa25d65b1476d77285da1ca99af397/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=de921ab3c3aa25d65b1476d77285da1ca99af397", "patch": "@@ -1140,14 +1140,14 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     }\n \n     let (mut reader, reader_metadata) = open_from(from)?;\n-    let len = reader_metadata.len();\n+    let max_len = u64::MAX;\n     let (mut writer, _) = open_to_and_set_permissions(to, reader_metadata)?;\n \n     let has_copy_file_range = HAS_COPY_FILE_RANGE.load(Ordering::Relaxed);\n     let mut written = 0u64;\n-    while written < len {\n+    while written < max_len {\n         let copy_result = if has_copy_file_range {\n-            let bytes_to_copy = cmp::min(len - written, usize::MAX as u64) as usize;\n+            let bytes_to_copy = cmp::min(max_len - written, usize::MAX as u64) as usize;\n             let copy_result = unsafe {\n                 // We actually don't have to adjust the offsets,\n                 // because copy_file_range adjusts the file offset automatically\n@@ -1162,7 +1162,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n             };\n             if let Err(ref copy_err) = copy_result {\n                 match copy_err.raw_os_error() {\n-                    Some(libc::ENOSYS) | Some(libc::EPERM) => {\n+                    Some(libc::ENOSYS | libc::EPERM | libc::EOPNOTSUPP) => {\n                         HAS_COPY_FILE_RANGE.store(false, Ordering::Relaxed);\n                     }\n                     _ => {}\n@@ -1173,18 +1173,25 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n             Err(io::Error::from_raw_os_error(libc::ENOSYS))\n         };\n         match copy_result {\n+            Ok(0) if written == 0 => {\n+                // fallback to work around several kernel bugs where copy_file_range will fail to\n+                // copy any bytes and return 0 instead of an error if\n+                // - reading virtual files from the proc filesystem which appear to have 0 size\n+                //   but are not empty. noted in coreutils to affect kernels at least up to 5.6.19.\n+                // - copying from an overlay filesystem in docker. reported to occur on fedora 32.\n+                return io::copy(&mut reader, &mut writer);\n+            }\n+            Ok(0) => return Ok(written), // reached EOF\n             Ok(ret) => written += ret as u64,\n             Err(err) => {\n                 match err.raw_os_error() {\n-                    Some(os_err)\n-                        if os_err == libc::ENOSYS\n-                            || os_err == libc::EXDEV\n-                            || os_err == libc::EINVAL\n-                            || os_err == libc::EPERM =>\n-                    {\n+                    Some(\n+                        libc::ENOSYS | libc::EXDEV | libc::EINVAL | libc::EPERM | libc::EOPNOTSUPP,\n+                    ) => {\n                         // Try fallback io::copy if either:\n                         // - Kernel version is < 4.5 (ENOSYS)\n                         // - Files are mounted on different fs (EXDEV)\n+                        // - copy_file_range is broken in various ways on RHEL/CentOS 7 (EOPNOTSUPP)\n                         // - copy_file_range is disallowed, for example by seccomp (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n                         assert_eq!(written, 0);"}]}