{"sha": "ea3540c1a8efb3b9c56847f831b08abb3be2d978", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzU0MGMxYThlZmIzYjljNTY4NDdmODMxYjA4YWJiM2JlMmQ5Nzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T16:32:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T18:19:32Z"}, "message": "Store impls in CrateDefMap", "tree": {"sha": "51f7d436f126e197bb6d961aad33b65ef351d7db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51f7d436f126e197bb6d961aad33b65ef351d7db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3540c1a8efb3b9c56847f831b08abb3be2d978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3540c1a8efb3b9c56847f831b08abb3be2d978", "html_url": "https://github.com/rust-lang/rust/commit/ea3540c1a8efb3b9c56847f831b08abb3be2d978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3540c1a8efb3b9c56847f831b08abb3be2d978/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080dd31f8460cba0298405fbcfcab8b61a4667ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/080dd31f8460cba0298405fbcfcab8b61a4667ff", "html_url": "https://github.com/rust-lang/rust/commit/080dd31f8460cba0298405fbcfcab8b61a4667ff"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "49e33ccc4ed8c587c0e5cc30fc711763bbd48063", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea3540c1a8efb3b9c56847f831b08abb3be2d978/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3540c1a8efb3b9c56847f831b08abb3be2d978/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=ea3540c1a8efb3b9c56847f831b08abb3be2d978", "patch": "@@ -73,7 +73,7 @@ use crate::{\n         diagnostics::DefDiagnostic, path_resolution::ResolveMode, per_ns::PerNs, raw::ImportId,\n     },\n     path::Path,\n-    AstId, CrateModuleId, FunctionId, ModuleDefId, ModuleId, TraitId,\n+    AstId, CrateModuleId, FunctionId, ImplId, ModuleDefId, ModuleId, TraitId,\n };\n \n /// Contains all top-level defs from a macro-expanded crate\n@@ -122,6 +122,7 @@ pub struct ModuleData {\n     ///\n     /// Note that non-inline modules, by definition, live inside non-macro file.\n     pub definition: Option<FileId>,\n+    pub impls: Vec<ImplId>,\n }\n \n #[derive(Default, Debug, PartialEq, Eq, Clone)]"}, {"sha": "c9ccb90239f5261b6d9bdab36b63a585f7a16da6", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea3540c1a8efb3b9c56847f831b08abb3be2d978/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3540c1a8efb3b9c56847f831b08abb3be2d978/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ea3540c1a8efb3b9c56847f831b08abb3be2d978", "patch": "@@ -19,7 +19,7 @@ use crate::{\n         per_ns::PerNs, raw, CrateDefMap, ModuleData, Resolution, ResolveMode,\n     },\n     path::{Path, PathKind},\n-    AdtId, AstId, AstItemDef, ConstId, CrateModuleId, EnumId, EnumVariantId, FunctionId,\n+    AdtId, AstId, AstItemDef, ConstId, CrateModuleId, EnumId, EnumVariantId, FunctionId, ImplId,\n     LocationCtx, ModuleDefId, ModuleId, StaticId, StructId, StructOrUnionId, TraitId, TypeAliasId,\n     UnionId,\n };\n@@ -571,6 +571,15 @@ where\n                         .push((self.module_id, import_id, self.raw_items[import_id].clone())),\n                     raw::RawItemKind::Def(def) => self.define_def(&self.raw_items[def]),\n                     raw::RawItemKind::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n+                    raw::RawItemKind::Impl(imp) => {\n+                        let module = ModuleId {\n+                            krate: self.def_collector.def_map.krate,\n+                            module_id: self.module_id,\n+                        };\n+                        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n+                        let imp_id = ImplId::from_ast_id(ctx, self.raw_items[imp].ast_id);\n+                        self.def_collector.def_map.modules[self.module_id].impls.push(imp_id)\n+                    }\n                 }\n             }\n         }"}, {"sha": "a0a2c7273c6b254a86123886fd4a6e396392f0a0", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ea3540c1a8efb3b9c56847f831b08abb3be2d978/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3540c1a8efb3b9c56847f831b08abb3be2d978/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=ea3540c1a8efb3b9c56847f831b08abb3be2d978", "patch": "@@ -28,6 +28,7 @@ pub struct RawItems {\n     imports: Arena<ImportId, ImportData>,\n     defs: Arena<Def, DefData>,\n     macros: Arena<Macro, MacroData>,\n+    impls: Arena<Impl, ImplData>,\n     /// items for top-level module\n     items: Vec<RawItem>,\n }\n@@ -121,6 +122,13 @@ impl Index<Macro> for RawItems {\n     }\n }\n \n+impl Index<Impl> for RawItems {\n+    type Output = ImplData;\n+    fn index(&self, idx: Impl) -> &ImplData {\n+        &self.impls[idx]\n+    }\n+}\n+\n // Avoid heap allocation on items without attributes.\n type Attrs = Option<Arc<[Attr]>>;\n \n@@ -142,6 +150,7 @@ pub(super) enum RawItemKind {\n     Import(ImportId),\n     Def(Def),\n     Macro(Macro),\n+    Impl(Impl),\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -203,6 +212,15 @@ pub(super) struct MacroData {\n     pub(super) builtin: bool,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(super) struct Impl(RawId);\n+impl_arena_id!(Impl);\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub(super) struct ImplData {\n+    pub(super) ast_id: FileAstId<ast::ImplBlock>,\n+}\n+\n struct RawItemsCollector {\n     raw_items: RawItems,\n     source_ast_id_map: Arc<AstIdMap>,\n@@ -236,8 +254,8 @@ impl RawItemsCollector {\n                 self.add_extern_crate_item(current_module, extern_crate);\n                 return;\n             }\n-            ast::ModuleItem::ImplBlock(_) => {\n-                // impls don't participate in name resolution\n+            ast::ModuleItem::ImplBlock(it) => {\n+                self.add_impl(current_module, it);\n                 return;\n             }\n             ast::ModuleItem::StructDef(it) => {\n@@ -376,6 +394,13 @@ impl RawItemsCollector {\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n \n+    fn add_impl(&mut self, current_module: Option<Module>, imp: ast::ImplBlock) {\n+        let attrs = self.parse_attrs(&imp);\n+        let ast_id = self.source_ast_id_map.ast_id(&imp);\n+        let imp = self.raw_items.impls.alloc(ImplData { ast_id });\n+        self.push_item(current_module, attrs, RawItemKind::Impl(imp))\n+    }\n+\n     fn push_import(\n         &mut self,\n         current_module: Option<Module>,"}]}