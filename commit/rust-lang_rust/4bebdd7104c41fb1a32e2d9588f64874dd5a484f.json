{"sha": "4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "node_id": "C_kwDOAAsO6NoAKDRiZWJkZDcxMDRjNDFmYjFhMzJlMmQ5NTg4ZjY0ODc0ZGQ1YTQ4NGY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-29T12:34:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T13:58:50Z"}, "message": "box a bunch of large types", "tree": {"sha": "43b073ff2c1f7b28ffc0233b2e052d5e0243c6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b073ff2c1f7b28ffc0233b2e052d5e0243c6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "html_url": "https://github.com/rust-lang/rust/commit/4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec74653652e59fc209506c084357ccee922a2d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec74653652e59fc209506c084357ccee922a2d73", "html_url": "https://github.com/rust-lang/rust/commit/ec74653652e59fc209506c084357ccee922a2d73"}], "stats": {"total": 162, "additions": 83, "deletions": 79}, "files": [{"sha": "14c190daf3512827880d5960bb5a055a3e6ea98c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -2917,11 +2917,11 @@ pub enum ItemKind {\n     /// A static item (`static`).\n     ///\n     /// E.g., `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`.\n-    Static(Static),\n+    Static(Box<Static>),\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(ConstItem),\n+    Const(Box<ConstItem>),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n@@ -3037,7 +3037,7 @@ pub type AssocItem = Item<AssocItemKind>;\n pub enum AssocItemKind {\n     /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n-    Const(ConstItem),\n+    Const(Box<ConstItem>),\n     /// An associated function.\n     Fn(Box<Fn>),\n     /// An associated type.\n@@ -3049,7 +3049,7 @@ pub enum AssocItemKind {\n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n-            Self::Const(ConstItem { defaultness, .. })\n+            Self::Const(box ConstItem { defaultness, .. })\n             | Self::Fn(box Fn { defaultness, .. })\n             | Self::Type(box TyAlias { defaultness, .. }) => defaultness,\n             Self::MacCall(..) => Defaultness::Final,\n@@ -3099,7 +3099,7 @@ impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n             ForeignItemKind::Static(a, b, c) => {\n-                ItemKind::Static(Static { ty: a, mutability: b, expr: c })\n+                ItemKind::Static(Static { ty: a, mutability: b, expr: c }.into())\n             }\n             ForeignItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             ForeignItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n@@ -3113,7 +3113,7 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Static(Static { ty: a, mutability: b, expr: c }) => {\n+            ItemKind::Static(box Static { ty: a, mutability: b, expr: c }) => {\n                 ForeignItemKind::Static(a, b, c)\n             }\n             ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),\n@@ -3132,8 +3132,8 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n-    static_assert_size!(AssocItem, 104);\n-    static_assert_size!(AssocItemKind, 32);\n+    static_assert_size!(AssocItem, 88);\n+    static_assert_size!(AssocItemKind, 16);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 32);\n     static_assert_size!(Expr, 72);"}, {"sha": "4d569e0fb94c90436e5a282b8bea084eb41f9c87", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -1030,7 +1030,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(Static { ty, mutability: _, expr }) => {\n+        ItemKind::Static(box Static { ty, mutability: _, expr }) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }"}, {"sha": "970bda58f350cede4d08c77b624886502b31518e", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -305,8 +305,8 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     match &item.kind {\n         ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(Static { ty, mutability: _, expr })\n-        | ItemKind::Const(ConstItem { ty, expr, .. }) => {\n+        ItemKind::Static(box Static { ty, mutability: _, expr })\n+        | ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n@@ -675,7 +675,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(ConstItem { ty, expr, .. }) => {\n+        AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }"}, {"sha": "803dbbffbd8635316856cdbe049f7e4a87e9e3fb", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -229,11 +229,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }\n-            ItemKind::Static(ast::Static { ty: t, mutability: m, expr: e }) => {\n+            ItemKind::Static(box ast::Static { ty: t, mutability: m, expr: e }) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, *m, body_id)\n             }\n-            ItemKind::Const(ast::ConstItem { ty, expr, .. }) => {\n+            ItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                 let (ty, body_id) = self.lower_const_item(ty, span, expr.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n@@ -708,7 +708,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = hir_id.expect_owner();\n \n         let (generics, kind, has_default) = match &i.kind {\n-            AssocItemKind::Const(ConstItem { ty, expr, .. }) => {\n+            AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 let body = expr.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n@@ -809,7 +809,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.lower_attrs(hir_id, &i.attrs);\n \n         let (generics, kind) = match &i.kind {\n-            AssocItemKind::Const(ConstItem { ty, expr, .. }) => {\n+            AssocItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                 let ty =\n                     self.lower_ty(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::ConstTy));\n                 ("}, {"sha": "431a569c1e0d899a4439584580f5cc93d0293637", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -983,14 +983,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().emit_err(errors::FieldlessUnion { span: item.span });\n                 }\n             }\n-            ItemKind::Const(ConstItem { defaultness, expr: None, .. }) => {\n+            ItemKind::Const(box ConstItem { defaultness, expr: None, .. }) => {\n                 self.check_defaultness(item.span, *defaultness);\n                 self.session.emit_err(errors::ConstWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n                 });\n             }\n-            ItemKind::Static(Static { expr: None, .. }) => {\n+            ItemKind::Static(box Static { expr: None, .. }) => {\n                 self.session.emit_err(errors::StaticWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),\n@@ -1259,7 +1259,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n-                AssocItemKind::Const(ConstItem { expr: None, .. }) => {\n+                AssocItemKind::Const(box ConstItem { expr: None, .. }) => {\n                     self.session.emit_err(errors::AssocConstWithoutBody {\n                         span: item.span,\n                         replace_span: self.ending_semi_or_hi(item.span),"}, {"sha": "e2d133eb233a2280b61b1707f56bff5e55c42091", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -157,7 +157,7 @@ impl<'a> State<'a> {\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n             }\n-            ast::ItemKind::Static(Static { ty, mutability: mutbl, expr: body }) => {\n+            ast::ItemKind::Static(box Static { ty, mutability: mutbl, expr: body }) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(\n                     item.ident,\n@@ -168,7 +168,7 @@ impl<'a> State<'a> {\n                     def,\n                 );\n             }\n-            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr }) => {\n+            ast::ItemKind::Const(box ast::ConstItem { defaultness, ty, expr }) => {\n                 self.print_item_const(\n                     item.ident,\n                     None,\n@@ -515,7 +515,7 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Fn(box ast::Fn { defaultness, sig, generics, body }) => {\n                 self.print_fn_full(sig, ident, generics, vis, *defaultness, body.as_deref(), attrs);\n             }\n-            ast::AssocItemKind::Const(ast::ConstItem { defaultness, ty, expr }) => {\n+            ast::AssocItemKind::Const(box ast::ConstItem { defaultness, ty, expr }) => {\n                 self.print_item_const(ident, None, ty, expr.as_deref(), vis, *defaultness);\n             }\n             ast::AssocItemKind::Type(box ast::TyAlias {"}, {"sha": "34361a6d868e59db2ca39b0eb6a4c846ebbd1ca3", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -25,12 +25,12 @@ pub fn expand(\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n     let (item, is_stmt, ty_span) =\n         if let Annotatable::Item(item) = &item\n-            && let ItemKind::Static(ast::Static { ty, ..}) = &item.kind\n+            && let ItemKind::Static(box ast::Static { ty, ..}) = &item.kind\n         {\n             (item, false, ecx.with_def_site_ctxt(ty.span))\n         } else if let Annotatable::Stmt(stmt) = &item\n             && let StmtKind::Item(item) = &stmt.kind\n-            && let ItemKind::Static(ast::Static { ty, ..}) = &item.kind\n+            && let ItemKind::Static(box ast::Static { ty, ..}) = &item.kind\n         {\n             (item, true, ecx.with_def_site_ctxt(ty.span))\n         } else {"}, {"sha": "a76ed4ee6cee35727467db0f5f5cbf6f563e5e0f", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -254,25 +254,27 @@ pub fn expand_test_or_bench(\n \n     let location_info = get_location_info(cx, &item);\n \n-    let mut test_const = cx.item(\n-        sp,\n-        Ident::new(item.ident.name, sp),\n-        thin_vec![\n-            // #[cfg(test)]\n-            cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n-            // #[rustc_test_marker = \"test_case_sort_key\"]\n-            cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n-        ],\n-        // const $ident: test::TestDescAndFn =\n-        ast::ItemKind::Const(ast::ConstItem {\n-            defaultness: ast::Defaultness::Final,\n-            ty: cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n-            // test::TestDescAndFn {\n-            expr: Some(\n-                cx.expr_struct(\n-                    sp,\n-                    test_path(\"TestDescAndFn\"),\n-                    thin_vec![\n+    let mut test_const =\n+        cx.item(\n+            sp,\n+            Ident::new(item.ident.name, sp),\n+            thin_vec![\n+                // #[cfg(test)]\n+                cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n+                // #[rustc_test_marker = \"test_case_sort_key\"]\n+                cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n+            ],\n+            // const $ident: test::TestDescAndFn =\n+            ast::ItemKind::Const(\n+                ast::ConstItem {\n+                    defaultness: ast::Defaultness::Final,\n+                    ty: cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n+                    // test::TestDescAndFn {\n+                    expr: Some(\n+                        cx.expr_struct(\n+                            sp,\n+                            test_path(\"TestDescAndFn\"),\n+                            thin_vec![\n                         // desc: test::TestDesc {\n                         field(\n                             \"desc\",\n@@ -359,10 +361,12 @@ pub fn expand_test_or_bench(\n                         // testfn: test::StaticTestFn(...) | test::StaticBenchFn(...)\n                         field(\"testfn\", test_fn), // }\n                     ],\n-                ), // }\n+                        ), // }\n+                    ),\n+                }\n+                .into(),\n             ),\n-        }),\n-    );\n+        );\n     test_const = test_const.map(|mut tc| {\n         tc.vis.kind = ast::VisibilityKind::Public;\n         tc"}, {"sha": "59c588b39554e695fbdf4bd8667cd8945828a29a", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -627,7 +627,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             name,\n             AttrVec::new(),\n-            ast::ItemKind::Static(ast::Static { ty, mutability, expr: Some(expr) }),\n+            ast::ItemKind::Static(ast::Static { ty, mutability, expr: Some(expr) }.into()),\n         )\n     }\n \n@@ -643,7 +643,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             name,\n             AttrVec::new(),\n-            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr: Some(expr) }),\n+            ast::ItemKind::Const(ast::ConstItem { defaultness, ty, expr: Some(expr) }.into()),\n         )\n     }\n "}, {"sha": "c856e973e5c821abd87bc000f8beb056d8bdafdd", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -805,8 +805,8 @@ trait UnusedDelimLint {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         use ast::ItemKind::*;\n \n-        if let Const(ast::ConstItem { expr: Some(expr), .. })\n-        | Static(ast::Static { expr: Some(expr), .. }) = &item.kind\n+        if let Const(box ast::ConstItem { expr: Some(expr), .. })\n+        | Static(box ast::Static { expr: Some(expr), .. }) = &item.kind\n         {\n             self.check_unused_delims_expr(\n                 cx,"}, {"sha": "66fa9fb38d424c1424c31a1ac487660ce91f92ad", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -228,7 +228,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n             let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n-            (ident, ItemKind::Static(Static { ty, mutability: m, expr }))\n+            (ident, ItemKind::Static(Box::new(Static { ty, mutability: m, expr })))\n         } else if let Const::Yes(const_span) = self.parse_constness(Case::Sensitive) {\n             // CONST ITEM\n             if self.token.is_keyword(kw::Impl) {\n@@ -237,7 +237,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.recover_const_mut(const_span);\n                 let (ident, ty, expr) = self.parse_item_global(None)?;\n-                (ident, ItemKind::Const(ConstItem { defaultness: def_(), ty, expr }))\n+                (ident, ItemKind::Const(Box::new(ConstItem { defaultness: def_(), ty, expr })))\n             }\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n@@ -863,13 +863,13 @@ impl<'a> Parser<'a> {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Static(Static { ty, mutability: _, expr }) => {\n+                        ItemKind::Static(box Static { ty, mutability: _, expr }) => {\n                             self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n-                            AssocItemKind::Const(ConstItem {\n+                            AssocItemKind::Const(Box::new(ConstItem {\n                                 defaultness: Defaultness::Final,\n                                 ty,\n                                 expr,\n-                            })\n+                            }))\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n                     },\n@@ -1119,7 +1119,7 @@ impl<'a> Parser<'a> {\n                 let kind = match ForeignItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Const(ConstItem { ty, expr, .. }) => {\n+                        ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n                             self.sess.emit_err(errors::ExternItemCannotBeConst {\n                                 ident_span: ident.span,\n                                 const_span: span.with_hi(ident.span.lo()),"}, {"sha": "10d282a21a7ced5bc2d8b3b2af6391707a7ec66d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -688,7 +688,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             }\n \n             // These items live in the value namespace.\n-            ItemKind::Static(ast::Static { mutability, .. }) => {\n+            ItemKind::Static(box ast::Static { mutability, .. }) => {\n                 let res = Res::Def(DefKind::Static(mutability), def_id);\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }"}, {"sha": "d38bfc62abd9b6fd83dc02263e9d68be39ce7016", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -2346,8 +2346,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 });\n             }\n \n-            ItemKind::Static(ast::Static { ref ty, ref expr, .. })\n-            | ItemKind::Const(ast::ConstItem { ref ty, ref expr, .. }) => {\n+            ItemKind::Static(box ast::Static { ref ty, ref expr, .. })\n+            | ItemKind::Const(box ast::ConstItem { ref ty, ref expr, .. }) => {\n                 self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n@@ -2625,7 +2625,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for item in trait_items {\n             self.resolve_doc_links(&item.attrs, MaybeExported::Ok(item.id));\n             match &item.kind {\n-                AssocItemKind::Const(ast::ConstItem { ty, expr, .. }) => {\n+                AssocItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                     self.visit_ty(ty);\n                     // Only impose the restrictions of `ConstRibKind` for an\n                     // actual constant expression in a provided default.\n@@ -2800,7 +2800,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         use crate::ResolutionError::*;\n         self.resolve_doc_links(&item.attrs, MaybeExported::ImplItem(trait_id.ok_or(&item.vis)));\n         match &item.kind {\n-            AssocItemKind::Const(ast::ConstItem { ty, expr, .. }) => {\n+            AssocItemKind::Const(box ast::ConstItem { ty, expr, .. }) => {\n                 debug!(\"resolve_implementation AssocItemKind::Const\");\n                 // If this is a trait impl, ensure the const\n                 // exists in trait"}, {"sha": "aa47f3aed54d454d698ba2ccf9d3bb929fd3205e", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -100,13 +100,13 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         }\n \n         if !item.span.from_expansion() {\n-            if let ItemKind::Const(ConstItem { ty: ref var_type, .. }) = item.kind {\n+            if let ItemKind::Const(box ConstItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(Static{ ty: ref var_type,.. }) = item.kind {\n+            if let ItemKind::Static(box Static { ty: ref var_type,.. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "0d2a7440c4659b7296de61c3526c9ad891579de5", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -286,8 +286,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(ast::Static{ ty: lt, mutability: lm, expr: le}), Static(ast::Static { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Static(box ast::Static{ ty: lt, mutability: lm, expr: le}), Static(box ast::Static { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,\n@@ -451,7 +451,7 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(ast::ConstItem { defaultness: rd, ty: rt, expr: re})) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re})) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,"}, {"sha": "43779cfaecd3a7f1625d816e4f56da5983528dd1", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bebdd7104c41fb1a32e2d9588f64874dd5a484f/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "patch": "@@ -1804,13 +1804,15 @@ pub(crate) struct StaticParts<'a> {\n \n impl<'a> StaticParts<'a> {\n     pub(crate) fn from_item(item: &'a ast::Item) -> Self {\n-        let (defaultness, prefix, ty, mutability, expr) = match item.kind {\n-            ast::ItemKind::Static(ast::Static { ref ty, mutability, ref expr}) => {\n-                (None, \"static\", ty, mutability, expr)\n-            }\n-            ast::ItemKind::Const(ast::ConstItem { defaultness, ref ty, ref expr}) => {\n-                (Some(defaultness), \"const\", ty, ast::Mutability::Not, expr)\n-            }\n+        let (defaultness, prefix, ty, mutability, expr) = match &item.kind {\n+            ast::ItemKind::Static(s) => (None, \"static\", &s.ty, s.mutability, &s.expr),\n+            ast::ItemKind::Const(c) => (\n+                Some(c.defaultness),\n+                \"const\",\n+                &c.ty,\n+                ast::Mutability::Not,\n+                &c.expr,\n+            ),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1826,10 +1828,8 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_trait_item(ti: &'a ast::AssocItem) -> Self {\n-        let (defaultness, ty, expr_opt) = match ti.kind {\n-            ast::AssocItemKind::Const(ast::ConstItem {defaultness, ref ty, ref expr}) => {\n-                (defaultness, ty, expr)\n-            }\n+        let (defaultness, ty, expr_opt) = match &ti.kind {\n+            ast::AssocItemKind::Const(c) => (c.defaultness, &c.ty, &c.expr),\n             _ => unreachable!(),\n         };\n         StaticParts {\n@@ -1845,8 +1845,8 @@ impl<'a> StaticParts<'a> {\n     }\n \n     pub(crate) fn from_impl_item(ii: &'a ast::AssocItem) -> Self {\n-        let (defaultness, ty, expr) = match ii.kind {\n-            ast::AssocItemKind::Const(ast::ConstItem { defaultness, ref ty, ref expr}) => (defaultness, ty, expr),\n+        let (defaultness, ty, expr) = match &ii.kind {\n+            ast::AssocItemKind::Const(c) => (c.defaultness, &c.ty, &c.expr),\n             _ => unreachable!(),\n         };\n         StaticParts {"}]}