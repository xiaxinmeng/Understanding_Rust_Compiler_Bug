{"sha": "8188f12aaab8b650a13a93f71cf8d0647aa522f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxODhmMTJhYWFiOGI2NTBhMTNhOTNmNzFjZjhkMDY0N2FhNTIyZjc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-09T08:58:49Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-09T17:01:22Z"}, "message": "Rollup merge of #53183 - estebank:println-comma, r=oli-obk\n\nSuggest comma when missing in macro call\n\nWhen missing a comma in a macro call, suggest it, regardless of\nposition. When a macro call doesn't match any of the patterns, check\nif the call's token stream could be missing a comma between two idents,\nand if so, create a new token stream containing the comma and try to\nmatch against the macro patterns. If successful, emit the suggestion.\n\nThis works on arbitrary macros, with no need of special support from\nthe macro writers.\n\n```\nerror: no rules expected the token `d`\n  --> $DIR/missing-comma.rs:26:18\n   |\nLL |     foo!(a, b, c d, e);\n   |                 -^\n   |                 |\n   |                 help: missing comma here\n```\nFollow up to #52397.", "tree": {"sha": "0cc004c33d9d294a5a90b26308ab6925122245fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc004c33d9d294a5a90b26308ab6925122245fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8188f12aaab8b650a13a93f71cf8d0647aa522f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltsc2IACgkQ/vbIBR0O\nATxUbA//cZJo46zkturyRra3L1qG65BOCklA1pKJ/QmY4rit8QYGTiU19L1u5RNe\nxFmSt5yxdCeHFMp+DSNWPXfiWTaQHOUUvQK+7bb3vzr4klNN8tPCWzuqnM+OLZMU\ntTQLxXmkEbgOZFHZC6C/p535ewTCrovtGsNDFB6DHuGa36Hz/ZRd4zHKad6S4/oE\ngVAgc7bEO2Ggv546gXsoXlNXDVYq3dxSlvsrcXRXqzAPe+ipx+PSKigC6Y6D9gKx\npUngxUJJUO7ESkvx9bOih0XiGtqICU0SZwRX9RDL+sJ0NwacIMq7VXhWcouiTn5N\n7OW4rIrGtD/NZDUyIGHjhGfksz6FNfnH4Ya0zh8FFimMIUzE1agh3lLDwUUOuBtJ\nmJ1E3JHz2VGLNNtuXguLrsEX0tHuA/NRkFUEu4mpsCITsK3oh2EOGpBfSwnMcuJk\n8+nkWzHMrZKlKKUHUlN7XRToNie29ntkqj4GnR5Hhck8Bxv7ZwGBQZnqFMbRQ747\nARzOkY+/AVProe17OUUoiPGNFXha0A1Lp2dS+WYOq0/S8w6n8vF5g0zAbCSOpvCZ\ni5o+7bXN+gRWeulZ61Ri7U7bE4vNqgTRDOhKmanchFt+hVH6u1fi1+3V6CgnjCgq\n72hGv5uqhT4O8NBpjVbc81GzQGxOs+Oahrhyk2jQ2yGqD2d71kE=\n=/kLn\n-----END PGP SIGNATURE-----", "payload": "tree 0cc004c33d9d294a5a90b26308ab6925122245fe\nparent 7f886cf12b39e4079a9db1f3c5075b40de574a67\nparent f4039affa338fc5640c102ac5786a491bc94201f\nauthor kennytm <kennytm@gmail.com> 1533805129 +0800\ncommitter kennytm <kennytm@gmail.com> 1533834082 +0800\n\nRollup merge of #53183 - estebank:println-comma, r=oli-obk\n\nSuggest comma when missing in macro call\n\nWhen missing a comma in a macro call, suggest it, regardless of\nposition. When a macro call doesn't match any of the patterns, check\nif the call's token stream could be missing a comma between two idents,\nand if so, create a new token stream containing the comma and try to\nmatch against the macro patterns. If successful, emit the suggestion.\n\nThis works on arbitrary macros, with no need of special support from\nthe macro writers.\n\n```\nerror: no rules expected the token `d`\n  --> $DIR/missing-comma.rs:26:18\n   |\nLL |     foo!(a, b, c d, e);\n   |                 -^\n   |                 |\n   |                 help: missing comma here\n```\nFollow up to #52397.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8188f12aaab8b650a13a93f71cf8d0647aa522f7", "html_url": "https://github.com/rust-lang/rust/commit/8188f12aaab8b650a13a93f71cf8d0647aa522f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8188f12aaab8b650a13a93f71cf8d0647aa522f7/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f886cf12b39e4079a9db1f3c5075b40de574a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f886cf12b39e4079a9db1f3c5075b40de574a67", "html_url": "https://github.com/rust-lang/rust/commit/7f886cf12b39e4079a9db1f3c5075b40de574a67"}, {"sha": "f4039affa338fc5640c102ac5786a491bc94201f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4039affa338fc5640c102ac5786a491bc94201f", "html_url": "https://github.com/rust-lang/rust/commit/f4039affa338fc5640c102ac5786a491bc94201f"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "f51d079a6c058fca39408024557156c80a6634b0", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8188f12aaab8b650a13a93f71cf8d0647aa522f7", "patch": "@@ -181,7 +181,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n         for lhs in lhses { // try each arm's matchers\n             let lhs_tt = match *lhs {\n                 quoted::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n-                _ => cx.span_bug(sp, \"malformed macro lhs\")\n+                _ => continue,\n             };\n             match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n                 Success(_) => {\n@@ -191,7 +191,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                         err.span_suggestion_short(\n                             comma_span,\n                             \"missing comma here\",\n-                            \",\".to_string(),\n+                            \", \".to_string(),\n                         );\n                     }\n                 }"}, {"sha": "fda975e6c456bdd16dbad09bba0d029c4e8f27cb", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=8188f12aaab8b650a13a93f71cf8d0647aa522f7", "patch": "@@ -186,21 +186,43 @@ impl TokenStream {\n     /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`\n     /// separating the two arguments with a comma for diagnostic suggestions.\n     pub(crate) fn add_comma(&self) -> Option<(TokenStream, Span)> {\n-        // Used to suggest if a user writes `println!(\"{}\" a);`\n+        // Used to suggest if a user writes `foo!(a b);`\n         if let TokenStreamKind::Stream(ref slice) = self.kind {\n-            if slice.len() == 2 {\n-                let comma_span = match slice[0] {\n-                    TokenStream { kind: TokenStreamKind::Tree(TokenTree::Token(sp, _)) } |\n-                    TokenStream { kind: TokenStreamKind::Tree(TokenTree::Delimited(sp, _)) } => {\n-                        sp.shrink_to_hi()\n+            let mut suggestion = None;\n+            let mut iter = slice.iter().enumerate().peekable();\n+            while let Some((pos, ts)) = iter.next() {\n+                if let Some((_, next)) = iter.peek() {\n+                    match (ts, next) {\n+                        (TokenStream {\n+                            kind: TokenStreamKind::Tree(TokenTree::Token(_, token::Token::Comma))\n+                        }, _) |\n+                        (_, TokenStream {\n+                            kind: TokenStreamKind::Tree(TokenTree::Token(_, token::Token::Comma))\n+                        }) => {}\n+                        (TokenStream {\n+                            kind: TokenStreamKind::Tree(TokenTree::Token(sp, _))\n+                        }, _) |\n+                        (TokenStream {\n+                            kind: TokenStreamKind::Tree(TokenTree::Delimited(sp, _))\n+                        }, _) => {\n+                            let sp = sp.shrink_to_hi();\n+                            let comma = TokenStream {\n+                                kind: TokenStreamKind::Tree(TokenTree::Token(sp, token::Comma)),\n+                            };\n+                            suggestion = Some((pos, comma, sp));\n+                        }\n+                        _ => {}\n                     }\n-                    _ => DUMMY_SP,\n-                };\n-                let comma = TokenStream {\n-                    kind: TokenStreamKind::Tree(TokenTree::Token(comma_span, token::Comma)),\n-                };\n-                let slice = RcSlice::new(vec![slice[0].clone(), comma, slice[1].clone()]);\n-                return Some((TokenStream { kind: TokenStreamKind::Stream(slice) }, comma_span));\n+                }\n+            }\n+            if let Some((pos, comma, sp)) = suggestion {\n+                let mut new_slice = vec![];\n+                let parts = slice.split_at(pos + 1);\n+                new_slice.extend_from_slice(parts.0);\n+                new_slice.push(comma);\n+                new_slice.extend_from_slice(parts.1);\n+                let slice = RcSlice::new(new_slice);\n+                return Some((TokenStream { kind: TokenStreamKind::Stream(slice) }, sp));\n             }\n         }\n         None"}, {"sha": "07e69b9619d1f9683c8d6aa2ba2281e795767c1e", "filename": "src/test/ui/macros/missing-comma.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs?ref=8188f12aaab8b650a13a93f71cf8d0647aa522f7", "patch": "@@ -9,12 +9,22 @@\n // except according to those terms.\n \n macro_rules! foo {\n-    ($a:ident, $b:ident) => ()\n+    ($a:ident) => ();\n+    ($a:ident, $b:ident) => ();\n+    ($a:ident, $b:ident, $c:ident) => ();\n+    ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+    ($a:ident, $b:ident, $c:ident, $d:ident, $e:ident) => ();\n }\n \n fn main() {\n     println!(\"{}\" a);\n     //~^ ERROR expected token: `,`\n     foo!(a b);\n     //~^ ERROR no rules expected the token `b`\n+    foo!(a, b, c, d e);\n+    //~^ ERROR no rules expected the token `e`\n+    foo!(a, b, c d, e);\n+    //~^ ERROR no rules expected the token `d`\n+    foo!(a, b, c d e);\n+    //~^ ERROR no rules expected the token `d`\n }"}, {"sha": "9d8de87e5bb7f154237d97be5c51e0bf5d91c7ca", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8188f12aaab8b650a13a93f71cf8d0647aa522f7/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=8188f12aaab8b650a13a93f71cf8d0647aa522f7", "patch": "@@ -1,16 +1,38 @@\n error: expected token: `,`\n-  --> $DIR/missing-comma.rs:16:19\n+  --> $DIR/missing-comma.rs:20:19\n    |\n LL |     println!(\"{}\" a);\n    |                   ^\n \n error: no rules expected the token `b`\n-  --> $DIR/missing-comma.rs:18:12\n+  --> $DIR/missing-comma.rs:22:12\n    |\n LL |     foo!(a b);\n    |           -^\n    |           |\n    |           help: missing comma here\n \n-error: aborting due to 2 previous errors\n+error: no rules expected the token `e`\n+  --> $DIR/missing-comma.rs:24:21\n+   |\n+LL |     foo!(a, b, c, d e);\n+   |                    -^\n+   |                    |\n+   |                    help: missing comma here\n+\n+error: no rules expected the token `d`\n+  --> $DIR/missing-comma.rs:26:18\n+   |\n+LL |     foo!(a, b, c d, e);\n+   |                 -^\n+   |                 |\n+   |                 help: missing comma here\n+\n+error: no rules expected the token `d`\n+  --> $DIR/missing-comma.rs:28:18\n+   |\n+LL |     foo!(a, b, c d e);\n+   |                  ^\n+\n+error: aborting due to 5 previous errors\n "}]}