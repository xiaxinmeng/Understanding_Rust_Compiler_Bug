{"sha": "9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NjZlYWFiYTRkMDhkZDllYjNjYmJiMWE5MjU1NWYyM2Q1ZjFhMTA=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-20T15:40:02Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-22T10:24:19Z"}, "message": "rustc: replace uses of old deriving attribute with new one", "tree": {"sha": "4aa4244fdb718eec5ae78042089ef7bad741cc80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa4244fdb718eec5ae78042089ef7bad741cc80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "html_url": "https://github.com/rust-lang/rust/commit/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d7d601558e8f3cb6ef008ecaa76bf0ed67890c", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d7d601558e8f3cb6ef008ecaa76bf0ed67890c", "html_url": "https://github.com/rust-lang/rust/commit/72d7d601558e8f3cb6ef008ecaa76bf0ed67890c"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "5f9a3e606f201c086b2630fd24a557a282aff450", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -38,7 +38,7 @@ use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n use syntax::print::pprust;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum output_type {\n     output_type_none,\n     output_type_bitcode,"}, {"sha": "a4fdd7f1b52498efa87bbabbcd85ae3b437142e4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -161,7 +161,7 @@ pub fn parse_input(sess: Session, +cfg: ast::crate_cfg, input: input)\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum compile_upto {\n     cu_parse,\n     cu_expand,"}, {"sha": "caf4689688b103a32b23855127f4b83f76c7f946", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -27,10 +27,10 @@ use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n use syntax;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum os { os_win32, os_macos, os_linux, os_android, os_freebsd, }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum arch { arch_x86, arch_x86_64, arch_arm, arch_mips, }\n \n pub enum crate_type { bin_crate, lib_crate, unknown_crate, }\n@@ -104,7 +104,7 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ]\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum OptLevel {\n     No, // -O0\n     Less, // -O1"}, {"sha": "5cdfe6a49f723ca5529dc6e067288495bed56461", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -127,7 +127,7 @@ pub enum RealPredicate {\n \n // enum for the LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum TypeKind {\n     Void      = 0,\n     Half      = 1,"}, {"sha": "655bfc4446ec8beca78625e30e2b1d2247d72c19", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -93,7 +93,7 @@ fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Family {\n     Const,                 // c\n     Fn,                    // f"}, {"sha": "6dfcf6ddf916829163dcc906053f7f616150e0f6", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -51,7 +51,7 @@ struct CheckLoanCtxt {\n }\n \n // if we are enforcing purity, why are we doing so?\n-#[deriving_eq]\n+#[deriving(Eq)]\n enum purity_cause {\n     // enforcing purity because fn was declared pure:\n     pc_pure_fn,\n@@ -80,7 +80,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n     visit::visit_crate(*crate, clcx, vt);\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum assignment_type {\n     at_straight_up,\n     at_swap"}, {"sha": "daa365aade1252e9df3070b9ce64e56c326a9b56", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -340,7 +340,7 @@ pub type root_map = HashMap<root_map_key, RootInfo>;\n // if you have an expression `x.f` and x has type ~@T, we could add an\n // entry {id:x, derefs:0} to refer to `x` itself, `{id:x, derefs:1}`\n // to refer to the deref of the unique pointer, and so on.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct root_map_key {\n     id: ast::node_id,\n     derefs: uint\n@@ -355,7 +355,7 @@ pub type mutbl_map = HashMap<ast::node_id, ()>;\n pub type write_guard_map = HashMap<root_map_key, ()>;\n \n // Errors that can occur\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum bckerr_code {\n     err_mut_uniq,\n     err_mut_variant,\n@@ -367,7 +367,7 @@ pub enum bckerr_code {\n \n // Combination of an error code and the categorization of the expression\n // that caused it\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct bckerr {\n     cmt: cmt,\n     code: bckerr_code\n@@ -382,7 +382,7 @@ pub enum MoveError {\n // shorthand for something that fails with `bckerr` or succeeds with `T`\n pub type bckres<T> = Result<T, bckerr>;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum LoanKind {\n     TotalFreeze,   // Entire path is frozen   (borrowed as &T)\n     PartialFreeze, // Some subpath is frozen  (borrowed as &T)"}, {"sha": "ddc00000c6b4f5fa6086c4fb35983b90e805562c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -183,7 +183,7 @@ pub type matrix = ~[~[@pat]];\n \n pub enum useful { useful(ty::t, ctor), useful_, not_useful }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ctor {\n     single,\n     variant(def_id),"}, {"sha": "7e0a36be0a0209e1f47b315585e0fa5aed3c5d46", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -240,7 +240,7 @@ pub fn process_crate(crate: @ast::crate,\n \n // FIXME (#33): this doesn't handle big integer/float literals correctly\n // (nor does the rest of our literal handling).\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum const_val {\n     const_float(f64),\n     const_int(i64),"}, {"sha": "c95ec0f30831d76493ed854bb7fb603b8de62ac2", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -60,7 +60,7 @@ use syntax::{ast, ast_util, visit};\n  * process.\n  */\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum lint {\n     ctypes,\n     unused_imports,\n@@ -99,7 +99,7 @@ pub fn level_to_str(lv: level) -> &'static str {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum level {\n     allow, warn, deny, forbid\n }"}, {"sha": "d85570444d825862ae113aa25e85f1533f3a0249", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -60,7 +60,7 @@ use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum categorization {\n     cat_rvalue,                     // result of eval'ing some misc expr\n     cat_special(special_kind),      //\n@@ -75,7 +75,7 @@ pub enum categorization {\n }\n \n // different kinds of pointers:\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ptr_kind {\n     uniq_ptr,\n     gc_ptr(ast::mutability),\n@@ -85,7 +85,7 @@ pub enum ptr_kind {\n \n // I am coining the term \"components\" to mean \"pieces of a data\n // structure accessible without a dereference\":\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum comp_kind {\n     comp_tuple,                  // elt in a tuple\n     comp_anon_field,             // anonymous field (in e.g.\n@@ -98,15 +98,15 @@ pub enum comp_kind {\n }\n \n // different kinds of expressions we might evaluate\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum special_kind {\n     sk_method,\n     sk_static_item,\n     sk_implicit_self,   // old by-reference `self`\n     sk_heap_upvar\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McReadOnly,  // Read-only (`const`)\n@@ -119,7 +119,7 @@ pub enum MutabilityCategory {\n // which the value is stored.\n //\n // note: cmt stands for \"categorized mutable type\".\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct cmt_ {\n     id: ast::node_id,          // id of expr/pat producing this value\n     span: span,                // span of same expr/pat\n@@ -134,7 +134,7 @@ pub type cmt = @cmt_;\n // a loan path is like a category, but it exists only when the data is\n // interior to the stack frame.  loan paths are used as the key to a\n // map indicating what is borrowed at any point in time.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum loan_path {\n     lp_local(ast::node_id),\n     lp_arg(ast::node_id),"}, {"sha": "10838a7a8dc2c1a7ec7c20750050f048359fdb9b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -389,7 +389,7 @@ pub fn resolve_crate(sess: Session,\n \n pub type region_paramd_items = HashMap<ast::node_id, region_variance>;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct region_dep {\n     ambient_variance: region_variance,\n     id: ast::node_id"}, {"sha": "1d3a0f8b4b63da32f8a7060370d0d6b2df3126bc", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -122,7 +122,7 @@ pub struct Export2 {\n     reexport: bool,     // Whether this is a reexport.\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum PatternBindingMode {\n     RefutableMode,\n     LocalIrrefutableMode,\n@@ -166,7 +166,7 @@ pub enum NameDefinition {\n \n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Mutability {\n     Mutable,\n     Immutable\n@@ -179,7 +179,7 @@ pub enum SelfBinding {\n \n pub type ResolveVisitor = vt<()>;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ImportDirectiveNS {\n     TypeNSOnly,\n     AnyNS\n@@ -271,7 +271,7 @@ pub enum MethodSort {\n // FIXME #4947: The X-ray flag is kind of questionable in the first\n // place. It might be better to introduce an expr_xray_path instead.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum XrayFlag {\n     NoXray,     //< Private items cannot be accessed.\n     Xray        //< Private items can be accessed.\n@@ -292,13 +292,13 @@ pub enum ModulePrefixResult {\n     PrefixFound(@mut Module, uint)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum AllowCapturingSelfFlag {\n     AllowCapturingSelf,         //< The \"self\" definition can be captured.\n     DontAllowCapturingSelf,     //< The \"self\" definition cannot be captured.\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum NameSearchType {\n     SearchItemsAndPublicImports,    //< Search items and public imports.\n     SearchItemsAndAllImports,       //< Search items and all imports.\n@@ -312,7 +312,7 @@ pub enum BareIdentifierPatternResolution {\n \n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n     ForbidDuplicateTypes,"}, {"sha": "a529fd669394ae5a1a66058de4b9c1a48fac597d", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -1037,7 +1037,7 @@ pub fn pick_col(m: &[@Match]) -> uint {\n     return best_col;\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum branch_kind { no_branch, single, switch, compare, compare_vec_len, }\n \n // Compiles a comparison between two things."}, {"sha": "112d42d8f57e665e9539e4011334073c83507fb6", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -335,14 +335,14 @@ pub fn warn_not_to_commit(ccx: @CrateContext, msg: &str) {\n }\n \n // Heap selectors. Indicate which heap something should go on.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum heap {\n     heap_managed,\n     heap_managed_unique,\n     heap_exchange,\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum cleantype {\n     normal_exit_only,\n     normal_exit_and_unwind\n@@ -1270,7 +1270,7 @@ pub fn is_undef(val: ValueRef) -> bool {\n }\n \n // Used to identify cached monomorphized functions and vtables\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mono_param_id {\n     mono_precise(ty::t, Option<~[mono_id]>),\n     mono_any,\n@@ -1280,7 +1280,7 @@ pub enum mono_param_id {\n               datum::DatumMode),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct mono_id_ {\n     def: ast::def_id,\n     params: ~[mono_param_id],"}, {"sha": "08ed83a9634bb3587bf229a2453ab96a7983d681", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -110,7 +110,7 @@ use core::uint;\n use syntax::ast;\n use syntax::parse::token::special_idents;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum CopyAction {\n     INIT,\n     DROP_EXISTING\n@@ -171,7 +171,7 @@ impl to_bytes::IterBytes for DatumMode {\n }\n \n /// See `Datum cleanup styles` section at the head of this module.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum DatumCleanup {\n     RevokeClean,\n     ZeroMem"}, {"sha": "065942b8fe63b35ac442c14c9b5abf8840f747ce", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -54,13 +54,13 @@ use syntax;\n \n // Note: after typeck, you should use resolved_mode() to convert this mode\n // into an rmode, which will take into account the results of mode inference.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct arg {\n     mode: ast::mode,\n     ty: t\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct field {\n     ident: ast::ident,\n     mt: mt\n@@ -84,7 +84,7 @@ pub struct mt {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum vstore {\n     vstore_fixed(uint),\n     vstore_uniq,\n@@ -94,7 +94,7 @@ pub enum vstore {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum TraitStore {\n     BareTraitStore,             // a plain trait without a sigil\n     BoxTraitStore,              // @Trait\n@@ -111,7 +111,7 @@ pub struct field_ty {\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct creader_cache_key {\n     cnum: int,\n     pos: uint,\n@@ -131,7 +131,7 @@ struct intern_key {\n     o_def_id: Option<ast::def_id>\n }\n \n-// NB: Do not replace this with #[deriving_eq]. The automatically-derived\n+// NB: Do not replace this with #[deriving(Eq)]. The automatically-derived\n // implementation will not recurse through sty and you will get stack\n // exhaustion.\n impl cmp::Eq for intern_key {\n@@ -359,14 +359,14 @@ pub pure fn type_has_regions(t: t) -> bool {\n pub pure fn type_def_id(t: t) -> Option<ast::def_id> { get(t).o_def_id }\n pub pure fn type_id(t: t) -> uint { get(t).id }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct BareFnTy {\n     purity: ast::purity,\n     abi: Abi,\n     sig: FnSig\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ClosureTy {\n     purity: ast::purity,\n     sigil: ast::Sigil,\n@@ -381,7 +381,7 @@ pub struct ClosureTy {\n  *\n  * - `inputs` is the list of arguments and their modes.\n  * - `output` is the return type. */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct FnSig {\n     inputs: ~[arg],\n     output: t\n@@ -400,7 +400,7 @@ impl to_bytes::IterBytes for ClosureTy {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct param_ty {\n     idx: uint,\n     def_id: def_id\n@@ -489,7 +489,7 @@ type opt_region = Option<Region>;\n  * - `self_ty` is the type to which `self` should be remapped, if any.  The\n  *   `self` type is rather funny in that it can only appear on traits and is\n  *   always substituted away to the implementing type for a trait. */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct substs {\n     self_r: opt_region,\n     self_ty: Option<ty::t>,\n@@ -498,7 +498,7 @@ pub struct substs {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in libsyntax/ast.rs as well.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum sty {\n     ty_nil,\n     ty_bot,\n@@ -535,7 +535,7 @@ pub enum sty {\n     ty_unboxed_vec(mt),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum IntVarValue {\n     IntType(ast::int_ty),\n     UintType(ast::uint_ty),\n@@ -592,23 +592,23 @@ pub enum param_bound {\n     bound_trait(t),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyVid(uint);\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct IntVid(uint);\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct FloatVid(uint);\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n #[auto_encode]\n #[auto_decode]\n pub struct RegionVid {\n     id: uint\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),"}, {"sha": "2973492cac4b930cffa6dc34b8fdd97c04ccb641", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -105,13 +105,13 @@ use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n use syntax::ast_map;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum CheckTraitsFlag {\n     CheckTraitsOnly,\n     CheckTraitsAndInherentMethods,\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum AutoderefReceiverFlag {\n     AutoderefReceiver,\n     DontAutoderefReceiver,"}, {"sha": "df309bcec2fa2b22fc5156a116590ab68cfaace1", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -1175,10 +1175,10 @@ priv impl RegionVarBindings {\n \n // ______________________________________________________________________\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Direction { Incoming = 0, Outgoing = 1 }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Classification { Expanding, Contracting }\n \n enum GraphNodeValue { NoValue, Value(Region), ErrorValue }"}, {"sha": "60248687f3f98caeb20be3bf89c75413ed9ccac9", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=9966eaaba4d08dd9eb3cbbb1a92555f23d5f1a10", "patch": "@@ -286,7 +286,7 @@ pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n     compile_input(sess, cfg, input, &odir, &ofile);\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum monitor_msg {\n     fatal,\n     done,"}]}