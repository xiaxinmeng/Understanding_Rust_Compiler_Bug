{"sha": "9175f279b583fa71d8b4f6078af319e9a2155b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNzVmMjc5YjU4M2ZhNzFkOGI0ZjYwNzhhZjMxOWU5YTIxNTViNzU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-10-03T17:57:19Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-10-07T20:48:16Z"}, "message": "add dist::RustcDev for unstable compiler libraries", "tree": {"sha": "54b3cd5c9b01978b5eb14f347bdb491289ef1afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b3cd5c9b01978b5eb14f347bdb491289ef1afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9175f279b583fa71d8b4f6078af319e9a2155b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9175f279b583fa71d8b4f6078af319e9a2155b75", "html_url": "https://github.com/rust-lang/rust/commit/9175f279b583fa71d8b4f6078af319e9a2155b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9175f279b583fa71d8b4f6078af319e9a2155b75/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627", "html_url": "https://github.com/rust-lang/rust/commit/dc8ee51c5418ce37b63f1c9bdee98745f5dfe627"}], "stats": {"total": 104, "additions": 46, "deletions": 58}, "files": [{"sha": "bfba39961a22ef36685c47b145010de6658b7859", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9175f279b583fa71d8b4f6078af319e9a2155b75/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9175f279b583fa71d8b4f6078af319e9a2155b75/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9175f279b583fa71d8b4f6078af319e9a2155b75", "patch": "@@ -443,7 +443,7 @@ impl<'a> Builder<'a> {\n                 dist::Rustc,\n                 dist::DebuggerScripts,\n                 dist::Std,\n-                dist::StdZ,\n+                dist::RustcDev,\n                 dist::Analysis,\n                 dist::Src,\n                 dist::PlainSourceTarball,"}, {"sha": "e5a43dcb29f6386a2ec3471071477a4a1161cf24", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 45, "deletions": 57, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9175f279b583fa71d8b4f6078af319e9a2155b75/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9175f279b583fa71d8b4f6078af319e9a2155b75/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=9175f279b583fa71d8b4f6078af319e9a2155b75", "patch": "@@ -637,6 +637,28 @@ impl Step for DebuggerScripts {\n     }\n }\n \n+fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n+    // The only true set of target libraries came from the build triple, so\n+    // let's reduce redundant work by only producing archives from that host.\n+    if compiler.host != builder.config.build {\n+        builder.info(\"\\tskipping, not a build host\");\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+/// Copy stamped files into an image's `target/lib` directory.\n+fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n+    let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n+    t!(fs::create_dir_all(&dst));\n+    for (path, host) in builder.read_stamp_file(stamp) {\n+        if !host || builder.config.build == target {\n+            builder.copy(&path, &dst.join(path.file_name().unwrap()));\n+        }\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub compiler: Compiler,\n@@ -667,29 +689,19 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-\n-        // The only true set of target libraries came from the build triple, so\n-        // let's reduce redundant work by only producing archives from that host.\n-        if compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n         }\n \n         builder.ensure(compile::Std { compiler, target });\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-        let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n-        t!(fs::create_dir_all(&dst));\n-\n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n-        let stamp = dbg!(compile::libstd_stamp(builder, compiler_to_use, target));\n-        for (path, host) in builder.read_stamp_file(&stamp) {\n-            if !host {\n-                builder.copy(&path, &dst.join(path.file_name().unwrap()));\n-            }\n-        }\n+        let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -708,26 +720,27 @@ impl Step for Std {\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        archive\n     }\n }\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct StdZ {\n+pub struct RustcDev {\n     pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n-impl Step for StdZ {\n+impl Step for RustcDev {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/libstdZ\")\n+        run.path(\"rustc-dev\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(StdZ {\n+        run.builder.ensure(RustcDev {\n             compiler: run.builder.compiler_for(\n                 run.builder.top_stage,\n                 run.builder.config.build,\n@@ -741,64 +754,39 @@ impl Step for StdZ {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        let name = pkgname(builder, \"rust-stdZ\");\n-\n-        // The only true set of target libraries came from the build triple, so\n-        // let's reduce redundant work by only producing archives from that host.\n-        if compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let name = pkgname(builder, \"rustc-dev\");\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n         }\n \n-        // We want to package up as many target libraries as possible\n-        // for the `rust-std` package, so if this is a host target we\n-        // depend on librustc and otherwise we just depend on libtest.\n-        if builder.hosts.iter().any(|t| t == target) {\n-            builder.ensure(compile::Rustc { compiler, target });\n-        } else {\n-            builder.ensure(compile::Std { compiler, target });\n-        }\n+        builder.ensure(compile::Rustc { compiler, target });\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-        let dst = image.join(\"lib/rustlib\").join(target);\n-        t!(fs::create_dir_all(&dst));\n-        let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n-        src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n-        builder.cp_filtered(&src, &dst, &|path| {\n-            if let Some(name) = path.file_name().and_then(|s| s.to_str()) {\n-                if name == builder.config.rust_codegen_backends_dir.as_str() {\n-                    return false\n-                }\n-                if name == \"bin\" {\n-                    return false\n-                }\n-                if name.contains(\"LLVM\") {\n-                    return false\n-                }\n-            }\n-            true\n-        });\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::librustc_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n            .arg(\"--product-name=Rust\")\n            .arg(\"--rel-manifest-dir=rustlib\")\n-           .arg(\"--success-message=stdZ-is-standing-at-the-ready.\")\n+           .arg(\"--success-message=Rust-is-ready-to-develop.\")\n            .arg(\"--image-dir\").arg(&image)\n            .arg(\"--work-dir\").arg(&tmpdir(builder))\n            .arg(\"--output-dir\").arg(&distdir(builder))\n            .arg(format!(\"--package-name={}-{}\", name, target))\n-           .arg(format!(\"--component-name=rust-stdZ-{}\", target))\n+           .arg(format!(\"--component-name=rustc-dev-{}\", target))\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n-        builder.info(&format!(\"Dist std stage{} ({} -> {})\",\n+        builder.info(&format!(\"Dist rustc-dev stage{} ({} -> {})\",\n             compiler.stage, &compiler.host, target));\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        archive\n     }\n }\n "}]}