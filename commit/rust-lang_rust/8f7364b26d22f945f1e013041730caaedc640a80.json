{"sha": "8f7364b26d22f945f1e013041730caaedc640a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNzM2NGIyNmQyMmY5NDVmMWUwMTMwNDE3MzBjYWFlZGM2NDBhODA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-02T00:58:40Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-02T00:58:40Z"}, "message": "Don't try to compute kinds of fictitious types. Indicate a bug instead.", "tree": {"sha": "0c5e59c27b00b1473bdaca8a1b544685807b8792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5e59c27b00b1473bdaca8a1b544685807b8792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f7364b26d22f945f1e013041730caaedc640a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7364b26d22f945f1e013041730caaedc640a80", "html_url": "https://github.com/rust-lang/rust/commit/8f7364b26d22f945f1e013041730caaedc640a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f7364b26d22f945f1e013041730caaedc640a80/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab1b5838b5d35e57f2f8bcc90f8b70c03e4d9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab1b5838b5d35e57f2f8bcc90f8b70c03e4d9c8", "html_url": "https://github.com/rust-lang/rust/commit/2ab1b5838b5d35e57f2f8bcc90f8b70c03e4d9c8"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "07f6e7749ec14a4d609c57195ca2afbcabb041b1", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f7364b26d22f945f1e013041730caaedc640a80/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f7364b26d22f945f1e013041730caaedc640a80/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=8f7364b26d22f945f1e013041730caaedc640a80", "patch": "@@ -1434,14 +1434,8 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       ty_ptr(_) { kind_implicitly_sendable() | kind_const() }\n       // FIXME: this *shouldn't* be implicitly copyable (#2450)\n       ty_str { kind_implicitly_sendable() | kind_const() }\n-      ty_type { kind_copyable() }\n       ty_fn(f) { proto_kind(f.proto) }\n \n-      // Closures have kind determined by capture mode\n-      ty_opaque_closure_ptr(ck_block) { kind_noncopyable() }\n-      ty_opaque_closure_ptr(ck_box) { kind_implicitly_copyable() }\n-      ty_opaque_closure_ptr(ck_uniq) { kind_sendable() }\n-\n       // Those with refcounts raise noncopyable to copyable,\n       // lower sendable to copyable. Therefore just set result to copyable.\n       ty_box(tm) {\n@@ -1456,7 +1450,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n             else { kind_implicitly_copyable() }\n         }\n       }\n-      ty_iface(_, _) | ty_opaque_box { kind_implicitly_copyable() }\n+      ty_iface(_, _) { kind_implicitly_copyable() }\n       ty_rptr(_, _) { kind_implicitly_copyable() }\n \n       // Unique boxes and vecs have the kind of their contained type,\n@@ -1548,6 +1542,9 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       ty_self { kind_noncopyable() }\n \n       ty_var(_) { cx.sess.bug(\"Asked to compute kind of a type variable\"); }\n+      ty_type | ty_opaque_closure_ptr(_) | ty_opaque_box {\n+        cx.sess.bug(\"Asked to compute kind of fictitious type\");\n+      }\n     };\n \n     cx.kind_cache.insert(ty, result);"}]}