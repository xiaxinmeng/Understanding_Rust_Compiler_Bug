{"sha": "8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzZkMTJkMzY2NGFiMGU4ODJjZTk4YmFjZDZmN2Y5NTAwMGY2YTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T09:16:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T15:04:31Z"}, "message": "implement proper panicking for failed index check", "tree": {"sha": "811a914ee2bd4589676b138e1ca40270c15a29fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811a914ee2bd4589676b138e1ca40270c15a29fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "html_url": "https://github.com/rust-lang/rust/commit/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "html_url": "https://github.com/rust-lang/rust/commit/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "abed7ab9dfeb7651df554f84b49c1e1410b534ca", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "patch": "@@ -38,14 +38,15 @@ pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n pub use crate::shims::fs::{FileHandler, EvalContextExt as FileEvalContextExt};\n pub use crate::shims::panic::{CatchUnwindData, EvalContextExt as PanicEvalContextExt};\n+\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n pub use crate::machine::{\n     PAGE_SIZE, STACK_ADDR, STACK_SIZE, NUM_CPUS,\n-    MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n+    MemoryExtra, AllocExtra, FrameData, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n };\n pub use crate::eval::{eval_main, create_ecx, MiriConfig, TerminationInfo};\n "}, {"sha": "07864ac4ee468e90bb3da312c85a645a139dcc50", "filename": "src/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "patch": "@@ -215,6 +215,16 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx.call_intrinsic(span, instance, args, ret, unwind)\n     }\n \n+    #[inline(always)]\n+    fn assert_panic(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n+        msg: &AssertMessage<'tcx>,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        ecx.assert_panic(span, msg, unwind)\n+    }\n+\n     #[inline(always)]\n     fn binary_ptr_op(\n         ecx: &rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,"}, {"sha": "4b9cb6b41955dec3b0509b17b4db7df054a9a9d3", "filename": "src/shims/panic.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a36d12d3664ab0e882ce98bacd6f7f95000f6a2/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=8a36d12d3664ab0e882ce98bacd6f7f95000f6a2", "patch": "@@ -11,11 +11,12 @@\n //!   gets popped *during unwinding*, we take the panic payload and store it according to the extra\n //!   metadata we remembered when pushing said frame.\n \n+use syntax::source_map::Span;\n use rustc::mir;\n-use crate::*;\n-use super::machine::FrameData;\n+use rustc::ty::{self, layout::LayoutOf};\n use rustc_target::spec::PanicStrategy;\n-use crate::rustc_target::abi::LayoutOf;\n+\n+use crate::*;\n \n /// Holds all of the relevant data for a call to\n /// `__rust_maybe_catch_panic`.\n@@ -150,4 +151,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.memory.extra.stacked_borrows.borrow_mut().end_call(extra.call_id);\n         Ok(res)\n     }\n+\n+    fn assert_panic(\n+        &mut self,\n+        span: Span,\n+        msg: &AssertMessage<'tcx>,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        use rustc::mir::interpret::PanicInfo::*;\n+        let this = self.eval_context_mut();\n+\n+        match msg {\n+            BoundsCheck { ref index, ref len } => {\n+                // First arg: Caller location.\n+                let location = this.alloc_caller_location_for_span(span)?;\n+                // Second arg: index.\n+                let index = this.read_scalar(this.eval_operand(index, None)?)?;\n+                // Third arg: len.\n+                let len = this.read_scalar(this.eval_operand(len, None)?)?;\n+\n+                // Call the lang item.\n+                let panic_bounds_check = this.tcx.lang_items().panic_bounds_check_fn().unwrap();\n+                let panic_bounds_check = ty::Instance::mono(this.tcx.tcx, panic_bounds_check);\n+                this.call_function(\n+                    panic_bounds_check,\n+                    &[location.ptr, index.not_undef()?, len.not_undef()?],\n+                    None,\n+                    StackPopCleanup::Goto { ret: None, unwind },\n+                )?;\n+            }\n+            _ => unimplemented!()\n+        }\n+        Ok(())\n+    }\n }"}]}