{"sha": "db90a0b78d9d4f455fa6e1fd9676ca264e370803", "node_id": "C_kwDOAAsO6NoAKGRiOTBhMGI3OGQ5ZDRmNDU1ZmE2ZTFmZDk2NzZjYTI2NGUzNzA4MDM", "commit": {"author": {"name": "beetrees", "email": "b@beetr.ee", "date": "2023-03-30T14:16:06Z"}, "committer": {"name": "beetrees", "email": "b@beetr.ee", "date": "2023-05-15T14:04:39Z"}, "message": "Add creation time support to `FileTimes` on apple and windows", "tree": {"sha": "98a703afa53342963b2f7d7c9721671fc76aed65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a703afa53342963b2f7d7c9721671fc76aed65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db90a0b78d9d4f455fa6e1fd9676ca264e370803", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQT9oej+Slbzs/bk2IuHkb11QZHr1gUCZGI79wAKCRCHkb11QZHr\n1qIGAQDAiXtY2uUw74jTAJLyiqTL5Tqa7qm9CuWHCd7oDwud8gEA0PMa6+feBE5x\nl2t5NCXMev95WhvcHRHPLgQ6GBXCywY=\n=TvM/\n-----END PGP SIGNATURE-----", "payload": "tree 98a703afa53342963b2f7d7c9721671fc76aed65\nparent 8006510ab0f69ee75e9c3f7e8bff3776886dae51\nauthor beetrees <b@beetr.ee> 1680185766 +0100\ncommitter beetrees <b@beetr.ee> 1684159479 +0100\n\nAdd creation time support to `FileTimes` on apple and windows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db90a0b78d9d4f455fa6e1fd9676ca264e370803", "html_url": "https://github.com/rust-lang/rust/commit/db90a0b78d9d4f455fa6e1fd9676ca264e370803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db90a0b78d9d4f455fa6e1fd9676ca264e370803/comments", "author": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8006510ab0f69ee75e9c3f7e8bff3776886dae51", "url": "https://api.github.com/repos/rust-lang/rust/commits/8006510ab0f69ee75e9c3f7e8bff3776886dae51", "html_url": "https://github.com/rust-lang/rust/commit/8006510ab0f69ee75e9c3f7e8bff3776886dae51"}], "stats": {"total": 170, "additions": 144, "deletions": 26}, "files": [{"sha": "5b3f1139a292e39df39318526a62ff522c3416a7", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -15,6 +15,7 @@ use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n use crate::path::{Path, PathBuf};\n+use crate::sealed::Sealed;\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n use crate::time::SystemTime;\n@@ -1391,6 +1392,16 @@ impl FileTimes {\n     }\n }\n \n+impl AsInnerMut<fs_imp::FileTimes> for FileTimes {\n+    fn as_inner_mut(&mut self) -> &mut fs_imp::FileTimes {\n+        &mut self.0\n+    }\n+}\n+\n+// For implementing OS extension traits in `std::os`\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+impl Sealed for FileTimes {}\n+\n impl Permissions {\n     /// Returns `true` if these permissions describe a readonly (unwritable) file.\n     ///"}, {"sha": "6d4d54b7c78c541fa172753923ce59e8d899b814", "filename": "library/std/src/os/ios/fs.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fios%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -1,7 +1,9 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use crate::fs::Metadata;\n-use crate::sys_common::AsInner;\n+use crate::fs::{self, Metadata};\n+use crate::sealed::Sealed;\n+use crate::sys_common::{AsInner, AsInnerMut, IntoInner};\n+use crate::time::SystemTime;\n \n #[allow(deprecated)]\n use crate::os::ios::raw;\n@@ -140,3 +142,19 @@ impl MetadataExt for Metadata {\n         self.as_inner().as_inner().st_lspare as u32\n     }\n }\n+\n+/// OS-specific extensions to [`fs::FileTimes`].\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+pub trait FileTimesExt: Sealed {\n+    /// Set the creation time of a file.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    fn set_created(self, t: SystemTime) -> Self;\n+}\n+\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+impl FileTimesExt for fs::FileTimes {\n+    fn set_created(mut self, t: SystemTime) -> Self {\n+        self.as_inner_mut().set_created(t.into_inner());\n+        self\n+    }\n+}"}, {"sha": "fe82d03d869801f2bedb46012df4760e60702132", "filename": "library/std/src/os/macos/fs.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmacos%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -1,7 +1,9 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use crate::fs::Metadata;\n-use crate::sys_common::AsInner;\n+use crate::fs::{self, Metadata};\n+use crate::sealed::Sealed;\n+use crate::sys_common::{AsInner, AsInnerMut, IntoInner};\n+use crate::time::SystemTime;\n \n #[allow(deprecated)]\n use crate::os::macos::raw;\n@@ -146,3 +148,19 @@ impl MetadataExt for Metadata {\n         [qspare[0] as u64, qspare[1] as u64]\n     }\n }\n+\n+/// OS-specific extensions to [`fs::FileTimes`].\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+pub trait FileTimesExt: Sealed {\n+    /// Set the creation time of a file.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    fn set_created(self, t: SystemTime) -> Self;\n+}\n+\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+impl FileTimesExt for fs::FileTimes {\n+    fn set_created(mut self, t: SystemTime) -> Self {\n+        self.as_inner_mut().set_created(t.into_inner());\n+        self\n+    }\n+}"}, {"sha": "2ecc4c68a962f2da829c557ac610ff63e12570ce", "filename": "library/std/src/os/watchos/fs.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -1,7 +1,9 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use crate::fs::Metadata;\n-use crate::sys_common::AsInner;\n+use crate::fs::{self, Metadata};\n+use crate::sealed::Sealed;\n+use crate::sys_common::{AsInner, AsInnerMut, IntoInner};\n+use crate::time::SystemTime;\n \n #[allow(deprecated)]\n use crate::os::watchos::raw;\n@@ -140,3 +142,19 @@ impl MetadataExt for Metadata {\n         self.as_inner().as_inner().st_lspare as u32\n     }\n }\n+\n+/// OS-specific extensions to [`fs::FileTimes`].\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+pub trait FileTimesExt: Sealed {\n+    /// Set the creation time of a file.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    fn set_created(self, t: SystemTime) -> Self;\n+}\n+\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+impl FileTimesExt for fs::FileTimes {\n+    fn set_created(mut self, t: SystemTime) -> Self {\n+        self.as_inner_mut().set_created(t.into_inner());\n+        self\n+    }\n+}"}, {"sha": "94509e547964bdf5e82df54c1026f98ff4590488", "filename": "library/std/src/os/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -9,7 +9,8 @@ use crate::io;\n use crate::path::Path;\n use crate::sealed::Sealed;\n use crate::sys;\n-use crate::sys_common::{AsInner, AsInnerMut};\n+use crate::sys_common::{AsInner, AsInnerMut, IntoInner};\n+use crate::time::SystemTime;\n \n /// Windows-specific extensions to [`fs::File`].\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n@@ -526,6 +527,22 @@ impl FileTypeExt for fs::FileType {\n     }\n }\n \n+/// Windows-specific extensions to [`fs::FileTimes`].\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+pub trait FileTimesExt: Sealed {\n+    /// Set the creation time of a file.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    fn set_created(self, t: SystemTime) -> Self;\n+}\n+\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+impl FileTimesExt for fs::FileTimes {\n+    fn set_created(mut self, t: SystemTime) -> Self {\n+        self.as_inner_mut().set_created(t.into_inner());\n+        self\n+    }\n+}\n+\n /// Creates a new symlink to a non-directory file on the filesystem.\n ///\n /// The `link` path will be a file symbolic link pointing to the `original`"}, {"sha": "09e9ae2720f5b5bb865518afebd09506ef89e50a", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -349,6 +349,8 @@ pub struct FilePermissions {\n pub struct FileTimes {\n     accessed: Option<SystemTime>,\n     modified: Option<SystemTime>,\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+    created: Option<SystemTime>,\n }\n \n #[derive(Copy, Clone, Eq, Debug)]\n@@ -591,6 +593,11 @@ impl FileTimes {\n     pub fn set_modified(&mut self, t: SystemTime) {\n         self.modified = Some(t);\n     }\n+\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+    pub fn set_created(&mut self, t: SystemTime) {\n+        self.created = Some(t);\n+    }\n }\n \n impl FileType {\n@@ -1215,26 +1222,41 @@ impl File {\n                     io::ErrorKind::Unsupported,\n                     \"setting file times not supported\",\n                 ))\n-            } else if #[cfg(any(target_os = \"android\", target_os = \"macos\"))] {\n+            } else if #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))] {\n+                let mut buf = [mem::MaybeUninit::<libc::timespec>::uninit(); 3];\n+                let mut num_times = 0;\n+                let mut attrlist: libc::attrlist = unsafe { mem::zeroed() };\n+                attrlist.bitmapcount = libc::ATTR_BIT_MAP_COUNT;\n+                if times.created.is_some() {\n+                    buf[num_times].write(to_timespec(times.created)?);\n+                    num_times += 1;\n+                    attrlist.commonattr |= libc::ATTR_CMN_CRTIME;\n+                }\n+                if times.modified.is_some() {\n+                    buf[num_times].write(to_timespec(times.modified)?);\n+                    num_times += 1;\n+                    attrlist.commonattr |= libc::ATTR_CMN_MODTIME;\n+                }\n+                if times.accessed.is_some() {\n+                    buf[num_times].write(to_timespec(times.accessed)?);\n+                    num_times += 1;\n+                    attrlist.commonattr |= libc::ATTR_CMN_ACCTIME;\n+                }\n+                cvt(unsafe { libc::fsetattrlist(\n+                    self.as_raw_fd(),\n+                    (&attrlist as *const libc::attrlist).cast::<libc::c_void>().cast_mut(),\n+                    buf.as_ptr().cast::<libc::c_void>().cast_mut(),\n+                    num_times * mem::size_of::<libc::timespec>(),\n+                    0\n+                ) })?;\n+                Ok(())\n+            } else if #[cfg(target_os = \"android\")] {\n                 let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n-                // futimens requires macOS 10.13, and Android API level 19\n+                // futimens requires Android API level 19\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n                     match futimens.get() {\n                         Some(futimens) => futimens(self.as_raw_fd(), times.as_ptr()),\n-                        #[cfg(target_os = \"macos\")]\n-                        None => {\n-                            fn ts_to_tv(ts: &libc::timespec) -> libc::timeval {\n-                                libc::timeval {\n-                                    tv_sec: ts.tv_sec,\n-                                    tv_usec: (ts.tv_nsec / 1000) as _\n-                                }\n-                            }\n-                            let timevals = [ts_to_tv(&times[0]), ts_to_tv(&times[1])];\n-                            libc::futimes(self.as_raw_fd(), timevals.as_ptr())\n-                        }\n-                        // futimes requires even newer Android.\n-                        #[cfg(target_os = \"android\")]\n                         None => return Err(io::const_io_error!(\n                             io::ErrorKind::Unsupported,\n                             \"setting file times requires Android API level >= 19\","}, {"sha": "21a65bc25f35880d26b85e654c3cee0999b0191c", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db90a0b78d9d4f455fa6e1fd9676ca264e370803/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=db90a0b78d9d4f455fa6e1fd9676ca264e370803", "patch": "@@ -88,8 +88,10 @@ pub struct FilePermissions {\n pub struct FileTimes {\n     accessed: Option<c::FILETIME>,\n     modified: Option<c::FILETIME>,\n+    created: Option<c::FILETIME>,\n }\n-impl core::fmt::Debug for c::FILETIME {\n+\n+impl fmt::Debug for c::FILETIME {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let time = ((self.dwHighDateTime as u64) << 32) | self.dwLowDateTime as u64;\n         f.debug_tuple(\"FILETIME\").field(&time).finish()\n@@ -582,26 +584,34 @@ impl File {\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n         let is_zero = |t: c::FILETIME| t.dwLowDateTime == 0 && t.dwHighDateTime == 0;\n-        if times.accessed.map_or(false, is_zero) || times.modified.map_or(false, is_zero) {\n+        if times.accessed.map_or(false, is_zero)\n+            || times.modified.map_or(false, is_zero)\n+            || times.created.map_or(false, is_zero)\n+        {\n             return Err(io::const_io_error!(\n                 io::ErrorKind::InvalidInput,\n                 \"Cannot set file timestamp to 0\",\n             ));\n         }\n         let is_max =\n             |t: c::FILETIME| t.dwLowDateTime == c::DWORD::MAX && t.dwHighDateTime == c::DWORD::MAX;\n-        if times.accessed.map_or(false, is_max) || times.modified.map_or(false, is_max) {\n+        if times.accessed.map_or(false, is_max)\n+            || times.modified.map_or(false, is_max)\n+            || times.created.map_or(false, is_max)\n+        {\n             return Err(io::const_io_error!(\n                 io::ErrorKind::InvalidInput,\n                 \"Cannot set file timestamp to 0xFFFF_FFFF_FFFF_FFFF\",\n             ));\n         }\n         cvt(unsafe {\n+            let created =\n+                times.created.as_ref().map(|a| a as *const c::FILETIME).unwrap_or(ptr::null());\n             let accessed =\n                 times.accessed.as_ref().map(|a| a as *const c::FILETIME).unwrap_or(ptr::null());\n             let modified =\n                 times.modified.as_ref().map(|a| a as *const c::FILETIME).unwrap_or(ptr::null());\n-            c::SetFileTime(self.as_raw_handle(), ptr::null_mut(), accessed, modified)\n+            c::SetFileTime(self.as_raw_handle(), created, accessed, modified)\n         })?;\n         Ok(())\n     }\n@@ -1005,6 +1015,10 @@ impl FileTimes {\n     pub fn set_modified(&mut self, t: SystemTime) {\n         self.modified = Some(t.into_inner());\n     }\n+\n+    pub fn set_created(&mut self, t: SystemTime) {\n+        self.created = Some(t.into_inner());\n+    }\n }\n \n impl FileType {"}]}