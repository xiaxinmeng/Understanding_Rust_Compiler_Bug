{"sha": "12810b93c5141b9ae31f4af17dcc61b0166314b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyODEwYjkzYzUxNDFiOWFlMzFmNGFmMTdkY2M2MWIwMTY2MzE0YjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-21T16:10:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-21T16:10:07Z"}, "message": "wip", "tree": {"sha": "76de8dec840367b1c6bef89c62f0d71c1c634701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76de8dec840367b1c6bef89c62f0d71c1c634701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12810b93c5141b9ae31f4af17dcc61b0166314b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12810b93c5141b9ae31f4af17dcc61b0166314b0", "html_url": "https://github.com/rust-lang/rust/commit/12810b93c5141b9ae31f4af17dcc61b0166314b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12810b93c5141b9ae31f4af17dcc61b0166314b0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de3a45be6a33e8cc2d7ef86ef0adcbaa0567cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de3a45be6a33e8cc2d7ef86ef0adcbaa0567cf5", "html_url": "https://github.com/rust-lang/rust/commit/9de3a45be6a33e8cc2d7ef86ef0adcbaa0567cf5"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "ae12802564efe65470e33ba4700018ad59a158d2", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12810b93c5141b9ae31f4af17dcc61b0166314b0/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12810b93c5141b9ae31f4af17dcc61b0166314b0/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=12810b93c5141b9ae31f4af17dcc61b0166314b0", "patch": "@@ -8,6 +8,8 @@ use ra_syntax::{\n     ast,\n     AstNode,\n     SyntaxNodeRef,\n+    SourceFileNode,\n+    TextUnit,\n };\n use ra_db::SyntaxDatabase;\n use rustc_hash::{FxHashMap};\n@@ -27,11 +29,6 @@ pub(crate) fn completions(\n ) -> Cancelable<Option<Completions>> {\n     let original_file = db.source_file(position.file_id);\n     // Insert a fake ident to get a valid parse tree\n-    let file = {\n-        let edit = AtomTextEdit::insert(position.offset, \"intellijRulezz\".to_string());\n-        original_file.reparse(&edit)\n-    };\n-\n     let module = ctry!(source_binder::module_from_position(db, position)?);\n \n     let mut acc = Completions::default();\n@@ -59,6 +56,32 @@ pub(crate) fn completions(\n     Ok(Some(acc))\n }\n \n+/// `SyntaxContext` is created early during completion to figure out, where\n+/// exactly is the cursor, syntax-wise.\n+#[derive(Debug)]\n+pub(super) enum SyntaxContext<'a> {\n+    ParameterName(SyntaxNodeRef<'a>),\n+    Other,\n+}\n+\n+impl SyntaxContext {\n+    pub(super) fn new(original_file: &SourceFileNode, offset: TextUnit) -> SyntaxContext {\n+        let file = {\n+            let edit = AtomTextEdit::insert(offset, \"intellijRulezz\".to_string());\n+            original_file.reparse(&edit)\n+        };\n+        if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), offset) {\n+            if is_node::<ast::Param>(name.syntax()) {\n+                if let Some(node) = find_leaf_at_offset(original_file, offset).left_biased() {\n+                    return SyntaxContext::ParameterName(node);\n+                }\n+            }\n+        }\n+\n+        SyntaxContext::Other\n+    }\n+}\n+\n /// Complete repeated parametes, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n /// `spam: &mut Spam` insert text/label and `spam` lookup string will be"}]}