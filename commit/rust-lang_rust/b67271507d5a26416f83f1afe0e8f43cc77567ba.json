{"sha": "b67271507d5a26416f83f1afe0e8f43cc77567ba", "node_id": "C_kwDOAAsO6NoAKGI2NzI3MTUwN2Q1YTI2NDE2ZjgzZjFhZmUwZThmNDNjYzc3NTY3YmE", "commit": {"author": {"name": "Daniil Belov", "email": "belov.dv@phystech.edu", "date": "2022-08-15T10:15:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-06T10:05:54Z"}, "message": "change stdlib circular dependencies handling", "tree": {"sha": "af5c882a86154d51ce43b05a571d77cd62bc9cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5c882a86154d51ce43b05a571d77cd62bc9cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67271507d5a26416f83f1afe0e8f43cc77567ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67271507d5a26416f83f1afe0e8f43cc77567ba", "html_url": "https://github.com/rust-lang/rust/commit/b67271507d5a26416f83f1afe0e8f43cc77567ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67271507d5a26416f83f1afe0e8f43cc77567ba/comments", "author": {"login": "belovdv", "id": 70999565, "node_id": "MDQ6VXNlcjcwOTk5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/70999565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belovdv", "html_url": "https://github.com/belovdv", "followers_url": "https://api.github.com/users/belovdv/followers", "following_url": "https://api.github.com/users/belovdv/following{/other_user}", "gists_url": "https://api.github.com/users/belovdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/belovdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belovdv/subscriptions", "organizations_url": "https://api.github.com/users/belovdv/orgs", "repos_url": "https://api.github.com/users/belovdv/repos", "events_url": "https://api.github.com/users/belovdv/events{/privacy}", "received_events_url": "https://api.github.com/users/belovdv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098cf8802271eacdc463fa66c35da377926d4c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/098cf8802271eacdc463fa66c35da377926d4c4e", "html_url": "https://github.com/rust-lang/rust/commit/098cf8802271eacdc463fa66c35da377926d4c4e"}], "stats": {"total": 163, "additions": 41, "deletions": 122}, "files": [{"sha": "d37a2cc8c8ec1a653081892efd35b7bd398e3884", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 60, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=b67271507d5a26416f83f1afe0e8f43cc77567ba", "patch": "@@ -1,6 +1,6 @@\n use rustc_arena::TypedArena;\n use rustc_ast::CRATE_NODE_ID;\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorGuaranteed, Handler};\n@@ -1714,6 +1714,13 @@ fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor\n /// that are necessary for the linking. They are only present in symbol table but not actually\n /// used in any sections, so the linker will therefore pick relevant rlibs for linking, but\n /// unused `#[no_mangle]` or `#[used]` can still be discard by GC sections.\n+///\n+/// There's a few internal crates in the standard library (aka libcore and\n+/// libstd) which actually have a circular dependence upon one another. This\n+/// currently arises through \"weak lang items\" where libcore requires things\n+/// like `rust_begin_unwind` but libstd ends up defining it. To get this\n+/// circular dependence to work correctly we declare some of these things\n+/// in this synthetic object.\n fn add_linked_symbol_object(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n@@ -2333,65 +2340,10 @@ fn add_upstream_rust_crates<'a>(\n     // crates.\n     let deps = &codegen_results.crate_info.used_crates;\n \n-    // There's a few internal crates in the standard library (aka libcore and\n-    // libstd) which actually have a circular dependence upon one another. This\n-    // currently arises through \"weak lang items\" where libcore requires things\n-    // like `rust_begin_unwind` but libstd ends up defining it. To get this\n-    // circular dependence to work correctly in all situations we'll need to be\n-    // sure to correctly apply the `--start-group` and `--end-group` options to\n-    // GNU linkers, otherwise if we don't use any other symbol from the standard\n-    // library it'll get discarded and the whole application won't link.\n-    //\n-    // In this loop we're calculating the `group_end`, after which crate to\n-    // pass `--end-group` and `group_start`, before which crate to pass\n-    // `--start-group`. We currently do this by passing `--end-group` after\n-    // the first crate (when iterating backwards) that requires a lang item\n-    // defined somewhere else. Once that's set then when we've defined all the\n-    // necessary lang items we'll pass `--start-group`.\n-    //\n-    // Note that this isn't amazing logic for now but it should do the trick\n-    // for the current implementation of the standard library.\n-    let mut group_end = None;\n-    let mut group_start = None;\n-    // Crates available for linking thus far.\n-    let mut available = FxHashSet::default();\n-    // Crates required to satisfy dependencies discovered so far.\n-    let mut required = FxHashSet::default();\n-\n-    let info = &codegen_results.crate_info;\n-    for &cnum in deps.iter().rev() {\n-        if let Some(missing) = info.missing_lang_items.get(&cnum) {\n-            let missing_crates = missing.iter().map(|i| info.lang_item_to_crate.get(i).copied());\n-            required.extend(missing_crates);\n-        }\n-\n-        required.insert(Some(cnum));\n-        available.insert(Some(cnum));\n-\n-        if required.len() > available.len() && group_end.is_none() {\n-            group_end = Some(cnum);\n-        }\n-        if required.len() == available.len() && group_end.is_some() {\n-            group_start = Some(cnum);\n-            break;\n-        }\n-    }\n-\n-    // If we didn't end up filling in all lang items from upstream crates then\n-    // we'll be filling it in with our crate. This probably means we're the\n-    // standard library itself, so skip this for now.\n-    if group_end.is_some() && group_start.is_none() {\n-        group_end = None;\n-    }\n-\n     let mut compiler_builtins = None;\n     let search_path = OnceCell::new();\n \n     for &cnum in deps.iter() {\n-        if group_start == Some(cnum) {\n-            cmd.group_start();\n-        }\n-\n         // We may not pass all crates through to the linker. Some crates may\n         // appear statically in an existing dylib, meaning we'll pick up all the\n         // symbols from the dylib.\n@@ -2470,10 +2422,6 @@ fn add_upstream_rust_crates<'a>(\n             }\n             Linkage::Dynamic => add_dynamic_crate(cmd, sess, &src.dylib.as_ref().unwrap().0),\n         }\n-\n-        if group_end == Some(cnum) {\n-            cmd.group_end();\n-        }\n     }\n \n     // compiler-builtins are always placed last to ensure that they're"}, {"sha": "949a356fce1fcd2f98c077a925dcf88d776ac0de", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=b67271507d5a26416f83f1afe0e8f43cc77567ba", "patch": "@@ -183,8 +183,6 @@ pub trait Linker {\n     fn no_default_libraries(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n     fn subsystem(&mut self, subsystem: &str);\n-    fn group_start(&mut self);\n-    fn group_end(&mut self);\n     fn linker_plugin_lto(&mut self);\n     fn add_eh_frame_header(&mut self) {}\n     fn add_no_exec(&mut self) {}\n@@ -730,18 +728,6 @@ impl<'a> Linker for GccLinker<'a> {\n         self.hint_dynamic(); // Reset to default before returning the composed command line.\n     }\n \n-    fn group_start(&mut self) {\n-        if self.takes_hints() {\n-            self.linker_arg(\"--start-group\");\n-        }\n-    }\n-\n-    fn group_end(&mut self) {\n-        if self.takes_hints() {\n-            self.linker_arg(\"--end-group\");\n-        }\n-    }\n-\n     fn linker_plugin_lto(&mut self) {\n         match self.sess.opts.cg.linker_plugin_lto {\n             LinkerPluginLto::Disabled => {\n@@ -1019,10 +1005,6 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    // MSVC doesn't need group indicators\n-    fn group_start(&mut self) {}\n-    fn group_end(&mut self) {}\n-\n     fn linker_plugin_lto(&mut self) {\n         // Do nothing\n     }\n@@ -1165,10 +1147,6 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n-    // Appears not necessary on Emscripten\n-    fn group_start(&mut self) {}\n-    fn group_end(&mut self) {}\n-\n     fn linker_plugin_lto(&mut self) {\n         // Do nothing\n     }\n@@ -1344,10 +1322,6 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn subsystem(&mut self, _subsystem: &str) {}\n \n-    // Not needed for now with LLD\n-    fn group_start(&mut self) {}\n-    fn group_end(&mut self) {}\n-\n     fn linker_plugin_lto(&mut self) {\n         // Do nothing for now\n     }\n@@ -1476,14 +1450,6 @@ impl<'a> Linker for L4Bender<'a> {\n         self.hint_static(); // Reset to default before returning the composed command line.\n     }\n \n-    fn group_start(&mut self) {\n-        self.cmd.arg(\"--start-group\");\n-    }\n-\n-    fn group_end(&mut self) {\n-        self.cmd.arg(\"--end-group\");\n-    }\n-\n     fn linker_plugin_lto(&mut self) {}\n \n     fn control_flow_guard(&mut self) {}\n@@ -1664,10 +1630,6 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn subsystem(&mut self, _subsystem: &str) {}\n \n-    fn group_start(&mut self) {}\n-\n-    fn group_end(&mut self) {}\n-\n     fn linker_plugin_lto(&mut self) {}\n }\n \n@@ -1777,9 +1739,5 @@ impl<'a> Linker for BpfLinker<'a> {\n \n     fn subsystem(&mut self, _subsystem: &str) {}\n \n-    fn group_start(&mut self) {}\n-\n-    fn group_end(&mut self) {}\n-\n     fn linker_plugin_lto(&mut self) {}\n }"}, {"sha": "545f161139a05b7363b6928a83af4a76e9594ac5", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=b67271507d5a26416f83f1afe0e8f43cc77567ba", "patch": "@@ -12,7 +12,7 @@ use crate::traits::*;\n use crate::{CachedModuleCodegen, CompiledModule, CrateInfo, MemFlags, ModuleCodegen, ModuleKind};\n \n use rustc_attr as attr;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n \n use rustc_data_structures::sync::par_iter;\n@@ -21,10 +21,12 @@ use rustc_data_structures::sync::ParallelIterator;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n+use rustc_hir::weak_lang_items::WEAK_ITEMS_SYMBOLS;\n use rustc_index::vec::Idx;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols;\n+use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n@@ -34,6 +36,7 @@ use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, EntryFnType, OutputType};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n use rustc_target::abi::{Align, VariantIdx};\n \n@@ -815,21 +818,16 @@ impl CrateInfo {\n             crate_name: Default::default(),\n             used_crates,\n             used_crate_source: Default::default(),\n-            lang_item_to_crate: Default::default(),\n-            missing_lang_items: Default::default(),\n             dependency_formats: tcx.dependency_formats(()).clone(),\n             windows_subsystem,\n             natvis_debugger_visualizers: Default::default(),\n         };\n-        let lang_items = tcx.lang_items();\n-\n         let crates = tcx.crates(());\n \n         let n_crates = crates.len();\n         info.native_libraries.reserve(n_crates);\n         info.crate_name.reserve(n_crates);\n         info.used_crate_source.reserve(n_crates);\n-        info.missing_lang_items.reserve(n_crates);\n \n         for &cnum in crates.iter() {\n             info.native_libraries\n@@ -847,19 +845,31 @@ impl CrateInfo {\n             if tcx.is_no_builtins(cnum) {\n                 info.is_no_builtins.insert(cnum);\n             }\n-            let missing = tcx.missing_lang_items(cnum);\n-            for &item in missing.iter() {\n-                if let Ok(id) = lang_items.require(item) {\n-                    info.lang_item_to_crate.insert(item, id.krate);\n-                }\n-            }\n-\n-            // No need to look for lang items that don't actually need to exist.\n-            let missing =\n-                missing.iter().cloned().filter(|&l| lang_items::required(tcx, l)).collect();\n-            info.missing_lang_items.insert(cnum, missing);\n         }\n \n+        // Handle circular dependencies in the standard library.\n+        // See comment before `add_linked_symbol_object` function for the details.\n+        let missing_weak_lang_items: FxHashSet<&Symbol> = info\n+            .used_crates\n+            .iter()\n+            .flat_map(|cnum| {\n+                tcx.missing_lang_items(*cnum)\n+                    .iter()\n+                    .filter(|l| lang_items::required(tcx, **l))\n+                    .filter_map(|item| WEAK_ITEMS_SYMBOLS.get(item))\n+            })\n+            .collect();\n+        info.linked_symbols\n+            .iter_mut()\n+            .filter(|(crate_type, _)| !matches!(crate_type, CrateType::Rlib | CrateType::Staticlib))\n+            .for_each(|(_, linked_symbols)| {\n+                linked_symbols.extend(\n+                    missing_weak_lang_items\n+                        .iter()\n+                        .map(|item| (item.to_string(), SymbolExportKind::Text)),\n+                )\n+            });\n+\n         let embed_visualizers = tcx.sess.crate_types().iter().any(|&crate_type| match crate_type {\n             CrateType::Executable | CrateType::Dylib | CrateType::Cdylib => {\n                 // These are crate types for which we invoke the linker and can embed"}, {"sha": "52da7abcac54e128f7c02bf92814249f36569736", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=b67271507d5a26416f83f1afe0e8f43cc77567ba", "patch": "@@ -25,7 +25,6 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n@@ -152,8 +151,6 @@ pub struct CrateInfo {\n     pub used_libraries: Vec<NativeLib>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates: Vec<CrateNum>,\n-    pub lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n-    pub missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n     pub dependency_formats: Lrc<Dependencies>,\n     pub windows_subsystem: Option<String>,\n     pub natvis_debugger_visualizers: BTreeSet<DebuggerVisualizerFile>,"}, {"sha": "da9c9c1216e9d7c574ae8e3d7beb0ea3b18a84ed", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67271507d5a26416f83f1afe0e8f43cc77567ba/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=b67271507d5a26416f83f1afe0e8f43cc77567ba", "patch": "@@ -18,6 +18,12 @@ pub static WEAK_ITEMS_REFS: LazyLock<FxIndexMap<Symbol, LangItem>> = LazyLock::n\n     map\n });\n \n+pub static WEAK_ITEMS_SYMBOLS: LazyLock<FxIndexMap<LangItem, Symbol>> = LazyLock::new(|| {\n+    let mut map = FxIndexMap::default();\n+    $(map.insert(LangItem::$item, sym::$sym);)*\n+    map\n+});\n+\n pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol>\n {\n     lang_items::extract(attrs).and_then(|(name, _)| {"}]}