{"sha": "b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzk1YTVlYTYwMzFkNTQxYWU4ZWUwYzQ3Y2FiYTdmZGYyMGUxOWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-17T16:55:23Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-30T15:06:11Z"}, "message": "Add a convenience function for testing whether a static is `#[thread_local]`", "tree": {"sha": "22671e7b2650c796f1e2497cba284454e8109aae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22671e7b2650c796f1e2497cba284454e8109aae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "html_url": "https://github.com/rust-lang/rust/commit/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582d52f0bdead9f40600d468bbe8c3be7842248a", "url": "https://api.github.com/repos/rust-lang/rust/commits/582d52f0bdead9f40600d468bbe8c3be7842248a", "html_url": "https://github.com/rust-lang/rust/commit/582d52f0bdead9f40600d468bbe8c3be7842248a"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "9d9b53fc4a87c5adcead1140055b56d1a6676881", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "patch": "@@ -212,6 +212,7 @@ impl CodegenCx<'ll, 'tcx> {\n         let g = if let Some(def_id) = def_id.as_local() {\n             let id = self.tcx.hir().as_local_hir_id(def_id);\n             let llty = self.layout_of(ty).llvm_type(self);\n+            // FIXME: refactor this to work without accessing the HIR\n             let (g, attrs) = match self.tcx.hir().get(id) {\n                 Node::Item(&hir::Item { attrs, span, kind: hir::ItemKind::Static(..), .. }) => {\n                     let sym_str = sym.as_str();"}, {"sha": "a89927ecfb72c7a08b7d426ab4c1eb9c328134c5", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "patch": "@@ -1,6 +1,7 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n use crate::ich::NodeIdHashingMode;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::interpret::{sign_extend, truncate};\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n@@ -528,6 +529,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.static_mutability(def_id).is_some()\n     }\n \n+    /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.\n+    pub fn is_thread_local_static(&self, def_id: DefId) -> bool {\n+        self.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n+    }\n+\n     /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n     pub fn is_mutable_static(&self, def_id: DefId) -> bool {\n         self.static_mutability(def_id) == Some(hir::Mutability::Mut)"}, {"sha": "e7d4b5f5f91a29a7b9cb5537f33e6ef9e2c6706a", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceC\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::{self, Instance, InstanceDef, TyCtxt};\n-use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n@@ -224,7 +223,7 @@ impl Validator<'mir, 'tcx> {\n \n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n         let should_check_for_sync =\n-            const_kind == Some(ConstKind::Static) && !tcx.has_attr(def_id, sym::thread_local);\n+            const_kind == Some(ConstKind::Static) && !tcx.is_thread_local_static(def_id);\n \n         if should_check_for_sync {\n             let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n@@ -267,8 +266,7 @@ impl Validator<'mir, 'tcx> {\n     }\n \n     fn check_static(&mut self, def_id: DefId, span: Span) {\n-        let is_thread_local = self.tcx.has_attr(def_id, sym::thread_local);\n-        if is_thread_local {\n+        if self.tcx.is_thread_local_static(def_id) {\n             self.check_op_spanned(ops::ThreadLocalAccess, span)\n         } else {\n             self.check_op_spanned(ops::StaticAccess, span)"}, {"sha": "ad98920eb63b9353a455e2ea7116f54c24663932", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "patch": "@@ -522,7 +522,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         return Err(Unpromotable);\n                     }\n \n-                    let is_thread_local = self.tcx.has_attr(def_id, sym::thread_local);\n+                    let is_thread_local = self.tcx.is_thread_local_static(def_id);\n                     if is_thread_local {\n                         return Err(Unpromotable);\n                     }"}, {"sha": "b4ef536afb7409ba9de0168d1a5354585915d583", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2395a5ea6031d541ae8ee0c47caba7fdf20e19e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=b2395a5ea6031d541ae8ee0c47caba7fdf20e19e", "patch": "@@ -3,10 +3,9 @@\n use crate::build::scope::DropKind;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n+use rustc_hir as hir;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n-use rustc_hir as hir;\n-use rustc_span::symbol::sym;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building\n@@ -60,7 +59,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 local_decl = local_decl.block_tail(tail_info);\n             }\n             if let ExprKind::StaticRef { def_id, .. } = expr.kind {\n-                let is_thread_local = this.hir.tcx().has_attr(def_id, sym::thread_local);\n+                let is_thread_local = this.hir.tcx().is_thread_local_static(def_id);\n                 local_decl.internal = true;\n                 local_decl.local_info = LocalInfo::StaticRef { def_id, is_thread_local };\n             }"}]}