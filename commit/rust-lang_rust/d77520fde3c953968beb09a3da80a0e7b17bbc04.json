{"sha": "d77520fde3c953968beb09a3da80a0e7b17bbc04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzUyMGZkZTNjOTUzOTY4YmViMDlhM2RhODBhMGU3YjE3YmJjMDQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-22T14:48:18Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-22T14:48:18Z"}, "message": "Merge #310\n\n310: When constructing a crate graph, detect and forbid cycles. r=matklad a=gfreezy\n\nfixed #300\n\nCo-authored-by: gfreezy <gfreezy@gmail.com>", "tree": {"sha": "d9dbc6bca589fec7ffe19fcc502eb9712d0866ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9dbc6bca589fec7ffe19fcc502eb9712d0866ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77520fde3c953968beb09a3da80a0e7b17bbc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77520fde3c953968beb09a3da80a0e7b17bbc04", "html_url": "https://github.com/rust-lang/rust/commit/d77520fde3c953968beb09a3da80a0e7b17bbc04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77520fde3c953968beb09a3da80a0e7b17bbc04/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8fed875c90796b2390f5b966c3f1eca536661af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fed875c90796b2390f5b966c3f1eca536661af1", "html_url": "https://github.com/rust-lang/rust/commit/8fed875c90796b2390f5b966c3f1eca536661af1"}, {"sha": "c0add813e9005a3356c7a8062c9a9c8f8bca6895", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0add813e9005a3356c7a8062c9a9c8f8bca6895", "html_url": "https://github.com/rust-lang/rust/commit/c0add813e9005a3356c7a8062c9a9c8f8bca6895"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "7c3dd9296d0bd5728fd98298dbac85cb6ea3c01a", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d77520fde3c953968beb09a3da80a0e7b17bbc04/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77520fde3c953968beb09a3da80a0e7b17bbc04/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=d77520fde3c953968beb09a3da80a0e7b17bbc04", "patch": "@@ -7,11 +7,13 @@\n /// actual IO is done and lowered to input.\n use std::sync::Arc;\n \n-use rustc_hash::{FxHashMap};\n use relative_path::RelativePathBuf;\n-use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n use salsa;\n \n+use ra_syntax::SmolStr;\n+use rustc_hash::FxHashSet;\n+\n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n /// `FileId`, without inspecting the path. The mapping between `FileId` and path\n@@ -92,10 +94,11 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n-    // FIXME: check that we don't have cycles here.\n-    // Just a simple depth first search from `to` should work,\n-    // the graph is small.\n     pub fn add_dep(&mut self, from: CrateId, name: SmolStr, to: CrateId) {\n+        let mut visited = FxHashSet::default();\n+        if self.dfs_find(from, to, &mut visited) {\n+            panic!(\"Cycle dependencies found.\")\n+        }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to)\n     }\n     pub fn is_empty(&self) -> bool {\n@@ -117,6 +120,52 @@ impl CrateGraph {\n     ) -> impl Iterator<Item = &'a Dependency> + 'a {\n         self.arena[&crate_id].dependencies.iter()\n     }\n+    fn dfs_find(&self, target: CrateId, from: CrateId, visited: &mut FxHashSet<CrateId>) -> bool {\n+        if !visited.insert(from) {\n+            return false;\n+        }\n+\n+        for dep in self.dependencies(from) {\n+            let crate_id = dep.crate_id();\n+            if crate_id == target {\n+                return true;\n+            }\n+\n+            if self.dfs_find(target, crate_id, visited) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{CrateGraph, FxHashMap, FileId, SmolStr};\n+\n+    #[test]\n+    #[should_panic]\n+    fn it_should_painc_because_of_cycle_dependencies() {\n+        let mut graph = CrateGraph::default();\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n+        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n+        graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1);\n+    }\n+\n+    #[test]\n+    fn it_works() {\n+        let mut graph = CrateGraph {\n+            arena: FxHashMap::default(),\n+        };\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n+        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n+    }\n }\n \n salsa::query_group! {"}]}