{"sha": "f6163fce6120b6bde902d1fd8f862d80e67c0721", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTYzZmNlNjEyMGI2YmRlOTAyZDFmZDhmODYyZDgwZTY3YzA3MjE=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-16T18:27:13Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-10-26T22:57:50Z"}, "message": "Suggest for loop instead of while-let when looping over iterators", "tree": {"sha": "c4e00f17a3fb6f6ea90866cd7797622fa8bc8ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e00f17a3fb6f6ea90866cd7797622fa8bc8ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6163fce6120b6bde902d1fd8f862d80e67c0721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6163fce6120b6bde902d1fd8f862d80e67c0721", "html_url": "https://github.com/rust-lang/rust/commit/f6163fce6120b6bde902d1fd8f862d80e67c0721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6163fce6120b6bde902d1fd8f862d80e67c0721/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "html_url": "https://github.com/rust-lang/rust/commit/3fe6ca9def2d9bf1107a2072455c0ab10ce18739"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "664fc0359bfbab1d964bb479b38287aaff5ab05e", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6163fce6120b6bde902d1fd8f862d80e67c0721/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6163fce6120b6bde902d1fd8f862d80e67c0721/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f6163fce6120b6bde902d1fd8f862d80e67c0721", "patch": "@@ -6,7 +6,8 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 68 lints included in this crate:\n+There are 69 lints included in this crate:\n+There are 65 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -74,6 +75,7 @@ name\n [unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                 | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n+[while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)         | warn    | using a while-let loop instead of a for loop on an iterator\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)         | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)           | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN"}, {"sha": "b84c1e2aab6b11bba6fb322e7ae1894b180f130a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6163fce6120b6bde902d1fd8f862d80e67c0721/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6163fce6120b6bde902d1fd8f862d80e67c0721/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f6163fce6120b6bde902d1fd8f862d80e67c0721", "patch": "@@ -138,6 +138,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,\n+        loops::WHILE_LET_ON_ITERATOR,\n         matches::MATCH_BOOL,\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,"}, {"sha": "6b6fbf60c4c1518726739c5ab3326039c4bf4e53", "filename": "src/loops.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6163fce6120b6bde902d1fd8f862d80e67c0721/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6163fce6120b6bde902d1fd8f862d80e67c0721/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=f6163fce6120b6bde902d1fd8f862d80e67c0721", "patch": "@@ -38,14 +38,17 @@ declare_lint!{ pub EXPLICIT_COUNTER_LOOP, Warn,\n \n declare_lint!{ pub EMPTY_LOOP, Warn, \"empty `loop {}` detected\" }\n \n+declare_lint!{ pub WHILE_LET_ON_ITERATOR, Warn, \"using a while-let loop instead of a for loop on an iterator\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP, ITER_NEXT_LOOP,\n                     WHILE_LET_LOOP, UNUSED_COLLECT, REVERSE_RANGE_LOOP,\n-                    EXPLICIT_COUNTER_LOOP, EMPTY_LOOP)\n+                    EXPLICIT_COUNTER_LOOP, EMPTY_LOOP,\n+                    WHILE_LET_ON_ITERATOR)\n     }\n }\n \n@@ -228,6 +231,17 @@ impl LateLintPass for LoopsPass {\n                 }\n             }\n         }\n+        if let ExprMatch(ref expr, ref arms, MatchSource::WhileLetDesugar) = expr.node {\n+            let pat = &arms[0].pats[0].node;\n+            if let (&PatEnum(ref path, _), &ExprMethodCall(method_name, _, _)) = (pat, &expr.node) {\n+                if method_name.node.as_str() == \"next\" &&\n+                        match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) &&\n+                        path.segments.last().unwrap().identifier.name.as_str() == \"Some\" {\n+                    span_lint(cx, WHILE_LET_ON_ITERATOR, expr.span,\n+                              \"this loop could be written as a `for` loop\");\n+                }\n+            }\n+        }\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext, stmt: &Stmt) {"}, {"sha": "efd77a6d9c32415ee81d743cdae2e6cf108747a7", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f6163fce6120b6bde902d1fd8f862d80e67c0721/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6163fce6120b6bde902d1fd8f862d80e67c0721/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=f6163fce6120b6bde902d1fd8f862d80e67c0721", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![deny(while_let_loop, empty_loop)]\n+#![deny(while_let_loop, empty_loop, while_let_on_iterator)]\n #![allow(dead_code, unused)]\n \n fn main() {\n@@ -53,6 +53,23 @@ fn main() {\n     while let Some(x) = y { // no error, obviously\n         println!(\"{}\", x);\n     }\n+\n+\n+    while let Option::Some(x) = (1..20).next() { //~ERROR this loop could be written as a `for` loop\n+        println!(\"{}\", x);\n+    }\n+\n+    while let Some(x) = (1..20).next() { //~ERROR this loop could be written as a `for` loop\n+        println!(\"{}\", x);\n+    }\n+\n+    while let Some(_) = (1..20).next() {} //~ERROR this loop could be written as a `for` loop\n+\n+    while let None = (1..20).next() {} // this is fine (if nonsensical)\n+\n+    if let Some(x) = (1..20).next() { // also fine\n+        println!(\"{}\", x)\n+    }\n }\n \n // regression test (#360)"}]}