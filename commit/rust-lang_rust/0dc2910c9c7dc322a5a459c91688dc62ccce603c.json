{"sha": "0dc2910c9c7dc322a5a459c91688dc62ccce603c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYzI5MTBjOWM3ZGMzMjJhNWE0NTljOTE2ODhkYzYyY2NjZTYwM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-05T10:30:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-05T10:30:41Z"}, "message": "Auto merge of #27458 - mitaa:local_cpath, r=nikomatsakis\n\nThis changes the current behaviour for two cases (that I know of)\r\n```rust\r\nmod foo {\r\n    extern crate bar;\r\n}\r\n// `bar::` changes to `foo::bar::`\r\n```\r\n\r\n```rust\r\nextern crate bar as quux;\r\n// `bar::` changes to `quux::`\r\n```\r\nFor example:\r\n```rust\r\nmod foo {\r\n    extern crate core;\r\n}\r\n\r\nfn assert_clone<T>() where T : Clone { }\r\n\r\nfn main() {\r\n    assert_clone::<foo::core::atomic::AtomicBool>();\r\n    // error: the trait `core::clone::Clone` is not implemented for the type `core::atomic::AtomicBool` [E0277]\r\n    // changes to\r\n    // error: the trait `foo::core::clone::Clone` is not implemented for the type `foo::core::atomic::AtomicBool` [E0277]\r\n}\r\n```\r\n\r\nNotably the following test case broke:\r\n```rust\r\n #[bench]\r\n fn bar(x: isize) { }\r\n //~^ ERROR mismatched types\r\n //~| expected `fn(&mut test::Bencher)`\r\n // changed to\r\n //~| expected `fn(&mut __test::test::Bencher)`\r\n```\r\nIf a crate is linked multiple times the path with the least segments is stored.\r\nPartially addresses #1920. (this doesn't solve the issue raised about re-exports)\r\n\r\nr? @nikomatsakis", "tree": {"sha": "8a553bafeeed8860540c1ac489ed216d19550897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a553bafeeed8860540c1ac489ed216d19550897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dc2910c9c7dc322a5a459c91688dc62ccce603c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc2910c9c7dc322a5a459c91688dc62ccce603c", "html_url": "https://github.com/rust-lang/rust/commit/0dc2910c9c7dc322a5a459c91688dc62ccce603c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dc2910c9c7dc322a5a459c91688dc62ccce603c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6210dcdddb7d7dab3f8fd0e9016b119f82408324", "url": "https://api.github.com/repos/rust-lang/rust/commits/6210dcdddb7d7dab3f8fd0e9016b119f82408324", "html_url": "https://github.com/rust-lang/rust/commit/6210dcdddb7d7dab3f8fd0e9016b119f82408324"}, {"sha": "dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "html_url": "https://github.com/rust-lang/rust/commit/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce"}], "stats": {"total": 405, "additions": 260, "deletions": 145}, "files": [{"sha": "f4561d68906fe09e7b10e23a2eac9508f1f83bf1", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 144, "deletions": 123, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -34,14 +34,22 @@ use syntax::codemap::{self, Span, mk_sp, Pos};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::visit;\n+use syntax::util::small_vector::SmallVector;\n+use ast_map;\n use log;\n \n+pub struct LocalCrateReader<'a, 'b:'a> {\n+    sess: &'a Session,\n+    creader: CrateReader<'a>,\n+    ast_map: &'a ast_map::Map<'b>,\n+}\n+\n pub struct CrateReader<'a> {\n     sess: &'a Session,\n     next_crate_num: ast::CrateNum,\n }\n \n-impl<'a, 'v> visit::Visitor<'v> for CrateReader<'a> {\n+impl<'a, 'b, 'v> visit::Visitor<'v> for LocalCrateReader<'a, 'b> {\n     fn visit_item(&mut self, a: &ast::Item) {\n         self.process_item(a);\n         visit::walk_item(self, a);\n@@ -152,31 +160,6 @@ impl<'a> CrateReader<'a> {\n         }\n     }\n \n-    // Traverses an AST, reading all the information about use'd crates and\n-    // extern libraries necessary for later resolving, typechecking, linking,\n-    // etc.\n-    pub fn read_crates(&mut self, krate: &ast::Crate) {\n-        self.process_crate(krate);\n-        visit::walk_crate(self, krate);\n-\n-        if log_enabled!(log::DEBUG) {\n-            dump_crates(&self.sess.cstore);\n-        }\n-\n-        for &(ref name, kind) in &self.sess.opts.libs {\n-            register_native_lib(self.sess, None, name.clone(), kind);\n-        }\n-    }\n-\n-    fn process_crate(&self, c: &ast::Crate) {\n-        for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n-            match a.value_str() {\n-                Some(ref linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n-                None => { /* fallthrough */ }\n-            }\n-        }\n-    }\n-\n     fn extract_crate_info(&self, i: &ast::Item) -> Option<CrateInfo> {\n         match i.node {\n             ast::ItemExternCrate(ref path_opt) => {\n@@ -201,103 +184,6 @@ impl<'a> CrateReader<'a> {\n         }\n     }\n \n-    fn process_item(&mut self, i: &ast::Item) {\n-        match i.node {\n-            ast::ItemExternCrate(_) => {\n-                if !should_link(i) {\n-                    return;\n-                }\n-\n-                match self.extract_crate_info(i) {\n-                    Some(info) => {\n-                        let (cnum, _, _) = self.resolve_crate(&None,\n-                                                              &info.ident,\n-                                                              &info.name,\n-                                                              None,\n-                                                              i.span,\n-                                                              PathKind::Crate);\n-                        self.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n-                    }\n-                    None => ()\n-                }\n-            }\n-            ast::ItemForeignMod(ref fm) => {\n-                if fm.abi == abi::Rust || fm.abi == abi::RustIntrinsic {\n-                    return;\n-                }\n-\n-                // First, add all of the custom link_args attributes\n-                let link_args = i.attrs.iter()\n-                    .filter_map(|at| if at.name() == \"link_args\" {\n-                        Some(at)\n-                    } else {\n-                        None\n-                    })\n-                    .collect::<Vec<&ast::Attribute>>();\n-                for m in &link_args {\n-                    match m.value_str() {\n-                        Some(linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n-                        None => { /* fallthrough */ }\n-                    }\n-                }\n-\n-                // Next, process all of the #[link(..)]-style arguments\n-                let link_args = i.attrs.iter()\n-                    .filter_map(|at| if at.name() == \"link\" {\n-                        Some(at)\n-                    } else {\n-                        None\n-                    })\n-                    .collect::<Vec<&ast::Attribute>>();\n-                for m in &link_args {\n-                    match m.meta_item_list() {\n-                        Some(items) => {\n-                            let kind = items.iter().find(|k| {\n-                                k.name() == \"kind\"\n-                            }).and_then(|a| a.value_str());\n-                            let kind = match kind {\n-                                Some(k) => {\n-                                    if k == \"static\" {\n-                                        cstore::NativeStatic\n-                                    } else if self.sess.target.target.options.is_like_osx\n-                                              && k == \"framework\" {\n-                                        cstore::NativeFramework\n-                                    } else if k == \"framework\" {\n-                                        cstore::NativeFramework\n-                                    } else if k == \"dylib\" {\n-                                        cstore::NativeUnknown\n-                                    } else {\n-                                        self.sess.span_err(m.span,\n-                                            &format!(\"unknown kind: `{}`\",\n-                                                    k));\n-                                        cstore::NativeUnknown\n-                                    }\n-                                }\n-                                None => cstore::NativeUnknown\n-                            };\n-                            let n = items.iter().find(|n| {\n-                                n.name() == \"name\"\n-                            }).and_then(|a| a.value_str());\n-                            let n = match n {\n-                                Some(n) => n,\n-                                None => {\n-                                    self.sess.span_err(m.span,\n-                                        \"#[link(...)] specified without \\\n-                                         `name = \\\"foo\\\"`\");\n-                                    InternedString::new(\"foo\")\n-                                }\n-                            };\n-                            register_native_lib(self.sess, Some(m.span),\n-                                                n.to_string(), kind);\n-                        }\n-                        None => {}\n-                    }\n-                }\n-            }\n-            _ => { }\n-        }\n-    }\n-\n     fn existing_match(&self, name: &str, hash: Option<&Svh>, kind: PathKind)\n                       -> Option<ast::CrateNum> {\n         let mut ret = None;\n@@ -378,6 +264,7 @@ impl<'a> CrateReader<'a> {\n \n         let cmeta = Rc::new( cstore::crate_metadata {\n             name: name.to_string(),\n+            local_path: RefCell::new(SmallVector::zero()),\n             data: metadata,\n             cnum_map: cnum_map,\n             cnum: cnum,\n@@ -592,6 +479,140 @@ impl<'a> CrateReader<'a> {\n     }\n }\n \n+impl<'a, 'b> LocalCrateReader<'a, 'b> {\n+    pub fn new(sess: &'a Session, map: &'a ast_map::Map<'b>) -> LocalCrateReader<'a, 'b> {\n+        LocalCrateReader {\n+            sess: sess,\n+            creader: CrateReader::new(sess),\n+            ast_map: map,\n+        }\n+    }\n+\n+    // Traverses an AST, reading all the information about use'd crates and\n+    // extern libraries necessary for later resolving, typechecking, linking,\n+    // etc.\n+    pub fn read_crates(&mut self, krate: &ast::Crate) {\n+        self.process_crate(krate);\n+        visit::walk_crate(self, krate);\n+\n+        if log_enabled!(log::DEBUG) {\n+            dump_crates(&self.sess.cstore);\n+        }\n+\n+        for &(ref name, kind) in &self.sess.opts.libs {\n+            register_native_lib(self.sess, None, name.clone(), kind);\n+        }\n+    }\n+\n+    fn process_crate(&self, c: &ast::Crate) {\n+        for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n+            match a.value_str() {\n+                Some(ref linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n+                None => { /* fallthrough */ }\n+            }\n+        }\n+    }\n+\n+    fn process_item(&mut self, i: &ast::Item) {\n+        match i.node {\n+            ast::ItemExternCrate(_) => {\n+                if !should_link(i) {\n+                    return;\n+                }\n+\n+                match self.creader.extract_crate_info(i) {\n+                    Some(info) => {\n+                        let (cnum, cmeta, _) = self.creader.resolve_crate(&None,\n+                                                              &info.ident,\n+                                                              &info.name,\n+                                                              None,\n+                                                              i.span,\n+                                                              PathKind::Crate);\n+                        self.ast_map.with_path(i.id, |path|\n+                            cmeta.update_local_path(path));\n+                        self.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n+                    }\n+                    None => ()\n+                }\n+            }\n+            ast::ItemForeignMod(ref fm) => {\n+                if fm.abi == abi::Rust || fm.abi == abi::RustIntrinsic {\n+                    return;\n+                }\n+\n+                // First, add all of the custom link_args attributes\n+                let link_args = i.attrs.iter()\n+                    .filter_map(|at| if at.name() == \"link_args\" {\n+                        Some(at)\n+                    } else {\n+                        None\n+                    })\n+                    .collect::<Vec<&ast::Attribute>>();\n+                for m in &link_args {\n+                    match m.value_str() {\n+                        Some(linkarg) => self.sess.cstore.add_used_link_args(&linkarg),\n+                        None => { /* fallthrough */ }\n+                    }\n+                }\n+\n+                // Next, process all of the #[link(..)]-style arguments\n+                let link_args = i.attrs.iter()\n+                    .filter_map(|at| if at.name() == \"link\" {\n+                        Some(at)\n+                    } else {\n+                        None\n+                    })\n+                    .collect::<Vec<&ast::Attribute>>();\n+                for m in &link_args {\n+                    match m.meta_item_list() {\n+                        Some(items) => {\n+                            let kind = items.iter().find(|k| {\n+                                k.name() == \"kind\"\n+                            }).and_then(|a| a.value_str());\n+                            let kind = match kind {\n+                                Some(k) => {\n+                                    if k == \"static\" {\n+                                        cstore::NativeStatic\n+                                    } else if self.sess.target.target.options.is_like_osx\n+                                              && k == \"framework\" {\n+                                        cstore::NativeFramework\n+                                    } else if k == \"framework\" {\n+                                        cstore::NativeFramework\n+                                    } else if k == \"dylib\" {\n+                                        cstore::NativeUnknown\n+                                    } else {\n+                                        self.sess.span_err(m.span,\n+                                            &format!(\"unknown kind: `{}`\",\n+                                                    k));\n+                                        cstore::NativeUnknown\n+                                    }\n+                                }\n+                                None => cstore::NativeUnknown\n+                            };\n+                            let n = items.iter().find(|n| {\n+                                n.name() == \"name\"\n+                            }).and_then(|a| a.value_str());\n+                            let n = match n {\n+                                Some(n) => n,\n+                                None => {\n+                                    self.sess.span_err(m.span,\n+                                        \"#[link(...)] specified without \\\n+                                         `name = \\\"foo\\\"`\");\n+                                    InternedString::new(\"foo\")\n+                                }\n+                            };\n+                            register_native_lib(self.sess, Some(m.span),\n+                                                n.to_string(), kind);\n+                        }\n+                        None => {}\n+                    }\n+                }\n+            }\n+            _ => { }\n+        }\n+    }\n+}\n+\n /// Imports the codemap from an external crate into the codemap of the crate\n /// currently being compiled (the \"local crate\").\n ///"}, {"sha": "21d5dac7e5ddb13d97d88bfde4e3ae1914d55120", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -24,7 +24,6 @@ use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::expect;\n-use syntax::parse::token;\n \n use std::collections::hash_map::HashMap;\n \n@@ -89,11 +88,12 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n     let cdata = cstore.get_crate_data(def.krate);\n     let path = decoder::get_item_path(&*cdata, def.node);\n \n-    // FIXME #1920: This path is not always correct if the crate is not linked\n-    // into the root namespace.\n-    let mut r = vec![ast_map::PathMod(token::intern(&cdata.name))];\n-    r.push_all(&path);\n-    r\n+    cdata.with_local_path(|cpath| {\n+        let mut r = Vec::with_capacity(cpath.len() + path.len());\n+        r.push_all(cpath);\n+        r.push_all(&path);\n+        r\n+    })\n }\n \n pub enum FoundAst<'ast> {"}, {"sha": "08c05b768625b0687ddf4b376195825b0d2c5d7f", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -28,7 +28,10 @@ use std::path::PathBuf;\n use flate::Bytes;\n use syntax::ast;\n use syntax::codemap;\n+use syntax::parse::token;\n use syntax::parse::token::IdentInterner;\n+use syntax::util::small_vector::SmallVector;\n+use ast_map;\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external\n@@ -54,6 +57,7 @@ pub struct ImportedFileMap {\n \n pub struct crate_metadata {\n     pub name: String,\n+    pub local_path: RefCell<SmallVector<ast_map::PathElem>>,\n     pub data: MetadataBlob,\n     pub cnum_map: cnum_map,\n     pub cnum: ast::CrateNum,\n@@ -255,6 +259,30 @@ impl crate_metadata {\n             filemaps\n         }\n     }\n+    pub fn with_local_path<T, F>(&self, f: F) -> T\n+    where F: Fn(&[ast_map::PathElem]) -> T {\n+        let cpath = self.local_path.borrow();\n+        if cpath.is_empty() {\n+            let name = ast_map::PathMod(token::intern(&self.name));\n+            f(&[name])\n+        } else {\n+            f(cpath.as_slice())\n+        }\n+    }\n+    pub fn update_local_path<'a, 'b>(&self, candidate: ast_map::PathElems<'a, 'b>) {\n+        let mut cpath = self.local_path.borrow_mut();\n+        let cap = cpath.len();\n+        match cap {\n+            0 => *cpath = candidate.collect(),\n+            1 => (),\n+            _ => {\n+                let candidate: SmallVector<_> = candidate.collect();\n+                if candidate.len() < cap {\n+                    *cpath = candidate;\n+                }\n+            },\n+        }\n+    }\n }\n \n impl MetadataBlob {"}, {"sha": "80db6426917e025d5ad8e97f8c1f8611ffec6a15", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -14,7 +14,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::ast_map;\n use rustc::lint;\n use rustc::metadata;\n-use rustc::metadata::creader::CrateReader;\n+use rustc::metadata::creader::LocalCrateReader;\n use rustc::middle::{stability, ty, reachable};\n use rustc::middle::dependency_format;\n use rustc::middle;\n@@ -609,7 +609,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: Session,\n     let krate = ast_map.krate();\n \n     time(time_passes, \"external crate/lib resolution\", (), |_|\n-         CrateReader::new(&sess).read_crates(krate));\n+         LocalCrateReader::new(&sess, &ast_map).read_crates(krate));\n \n     let lang_items = time(time_passes, \"language item collection\", (), |_|\n                           middle::lang_items::collect_language_items(krate, &sess));"}, {"sha": "8b467c2ba11f93a475a3c19e0cee5c5d5942bbed", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -15,7 +15,7 @@\n #[bench]\n fn bar(x: isize) { }\n //~^ ERROR mismatched types\n-//~| expected `fn(&mut test::Bencher)`\n+//~| expected `fn(&mut __test::test::Bencher)`\n //~| found `fn(isize) {bar}`\n //~| expected &-ptr\n //~| found isize"}, {"sha": "c26c5ff8421d960225202b71239249c9be20984d", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test that absolute path names are correct when a crate is not linked into the root namespace\n+\n+mod foo {\n+    extern crate core;\n+}\n+\n+fn assert_clone<T>() where T : Clone { }\n+\n+fn main() {\n+    assert_clone::<foo::core::atomic::AtomicBool>();\n+    //~^ ERROR the trait `foo::core::clone::Clone` is not implemented for the type `foo::core::\n+}\n\\ No newline at end of file"}, {"sha": "63cfcbdd8c700ac5a4b42191a93e316112f581db", "filename": "src/test/compile-fail/issue-1920-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test that when a crate is linked under another name that that name is used in global paths\n+\n+extern crate core as bar;\n+\n+fn assert_clone<T>() where T : Clone { }\n+\n+fn main() {\n+    assert_clone::<bar::atomic::AtomicBool>();\n+    //~^ ERROR the trait `bar::clone::Clone` is not implemented for the type `bar::atomic::\n+}\n\\ No newline at end of file"}, {"sha": "619c8c3f3a4f01d3b0e60ebd0650a48c67f407c5", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test that when a crate is linked multiple times that the shortest absolute path name is used\n+\n+mod foo {\n+    extern crate core;\n+}\n+\n+extern crate core;\n+\n+fn assert_clone<T>() where T : Clone { }\n+\n+fn main() {\n+    assert_clone::<foo::core::atomic::AtomicBool>();\n+    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `core::atomic::\n+}\n\\ No newline at end of file"}, {"sha": "83e13ff52f69a80c08498de47f1ab90d7fd59984", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 of struct `privacy_tuple_struct::A` is private\n+    let other::A(()) = a; //~ ERROR: field #1 of struct `other::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #1 of struct `privacy_tuple_struct::A` is private\n+    //~^ ERROR: field #1 of struct `other::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n+    let other::B(_b) = b; //~ ERROR: field #1 of struct `other::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n+    //~^ ERROR: field #1 of struct `other::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n+    //~^ ERROR: field #1 of struct `other::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    //~^ ERROR: field #2 of struct `other::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    //~^ ERROR: field #2 of struct `other::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}, {"sha": "aae09cc0eae5cb985376d02a0697dced7c56e5a4", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -37,11 +37,11 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n     c.a;\n     c.b; //~ ERROR: field `b` of struct `inner::B` is private\n \n-    d.a; //~ ERROR: field `a` of struct `struct_field_privacy::A` is private\n+    d.a; //~ ERROR: field `a` of struct `xc::A` is private\n     d.b;\n \n     e.a;\n-    e.b; //~ ERROR: field `b` of struct `struct_field_privacy::B` is private\n+    e.b; //~ ERROR: field `b` of struct `xc::B` is private\n }\n \n fn main() {}"}, {"sha": "8bc8a7a60bdd369695685297fef357360ea48866", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc2910c9c7dc322a5a459c91688dc62ccce603c/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=0dc2910c9c7dc322a5a459c91688dc62ccce603c", "patch": "@@ -22,9 +22,9 @@ struct A {\n fn main () {\n     // external crate struct\n     let k = B {\n-        aa: 20, //~ ERROR structure `struct_field_privacy::B` has no field named `aa`\n+        aa: 20, //~ ERROR structure `xc::B` has no field named `aa`\n         //~^ HELP did you mean `a`?\n-        bb: 20, //~ ERROR structure `struct_field_privacy::B` has no field named `bb`\n+        bb: 20, //~ ERROR structure `xc::B` has no field named `bb`\n     };\n     // local crate struct\n     let l = A {"}]}