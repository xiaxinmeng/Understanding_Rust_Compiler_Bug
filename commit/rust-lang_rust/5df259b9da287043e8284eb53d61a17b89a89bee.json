{"sha": "5df259b9da287043e8284eb53d61a17b89a89bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZjI1OWI5ZGEyODcwNDNlODI4NGViNTNkNjFhMTdiODlhODliZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T22:27:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T22:27:37Z"}, "message": "Auto merge of #27098 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26777, #27067, #27071, #27081, #27091, #27094, #27095\n- Failed merges:", "tree": {"sha": "474e6bafb9e6dc80a3b89e3561e89198269a2fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474e6bafb9e6dc80a3b89e3561e89198269a2fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5df259b9da287043e8284eb53d61a17b89a89bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5df259b9da287043e8284eb53d61a17b89a89bee", "html_url": "https://github.com/rust-lang/rust/commit/5df259b9da287043e8284eb53d61a17b89a89bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5df259b9da287043e8284eb53d61a17b89a89bee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05ac3938bcbdd616930bb010a3bbfa35f22850e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05ac3938bcbdd616930bb010a3bbfa35f22850e", "html_url": "https://github.com/rust-lang/rust/commit/e05ac3938bcbdd616930bb010a3bbfa35f22850e"}, {"sha": "8638dc7f9ae55d9b3102d152b2e2cca92bb83acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8638dc7f9ae55d9b3102d152b2e2cca92bb83acf", "html_url": "https://github.com/rust-lang/rust/commit/8638dc7f9ae55d9b3102d152b2e2cca92bb83acf"}], "stats": {"total": 118, "additions": 107, "deletions": 11}, "files": [{"sha": "a5a0127031ae55cb9bff34cdc309bfb118e6887c", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -250,11 +250,10 @@ that our tests are entirely left out of a normal build.\n \n The second change is the `use` declaration. Because we're in an inner module,\n we need to bring our test function into scope. This can be annoying if you have\n-a large module, and so this is a common use of the `glob` feature. Let's change\n-our `src/lib.rs` to make use of it:\n+a large module, and so this is a common use of globs. Let's change our\n+`src/lib.rs` to make use of it:\n \n ```rust,ignore\n-\n pub fn add_two(a: i32) -> i32 {\n     a + 2\n }"}, {"sha": "2127ac11436b12eb76553815c12158ee5b29cbf7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -231,6 +231,7 @@ impl<T> Vec<T> {\n     ///\n     /// * `ptr` needs to have been previously allocated via `String`/`Vec<T>`\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n+    /// * `length` needs to be the length that less than or equal to `capacity`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's"}, {"sha": "5a3778c3656fcfdb52c4918a59a0a1bca9544c2b", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -946,7 +946,7 @@ impl<T> VecDeque<T> {\n     /// let mut buf = VecDeque::new();\n     /// buf.push_back(10);\n     /// buf.push_back(12);\n-    /// buf.insert(1,11);\n+    /// buf.insert(1, 11);\n     /// assert_eq!(Some(&11), buf.get(1));\n     /// ```\n     pub fn insert(&mut self, i: usize, t: T) {"}, {"sha": "c7125c38aa9707cbbd512bd90ebbc9a42c4f9f1c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -197,6 +197,64 @@ See the Types section of the reference for more information about the primitive\n types:\n \n http://doc.rust-lang.org/reference.html#types\n+\"##,\n+\n+E0364: r##\"\n+Private items cannot be publicly re-exported.  This error indicates that\n+you attempted to `pub use` a type or value that was not itself public.\n+\n+Here is an example that demonstrates the error:\n+\n+```\n+mod foo {\n+    const X: u32 = 1;\n+}\n+pub use foo::X;\n+```\n+\n+The solution to this problem is to ensure that the items that you are\n+re-exporting are themselves marked with `pub`:\n+\n+```\n+mod foo {\n+    pub const X: u32 = 1;\n+}\n+pub use foo::X;\n+```\n+\n+See the 'Use Declarations' section of the reference for more information\n+on this topic:\n+\n+http://doc.rust-lang.org/reference.html#use-declarations\n+\"##,\n+\n+E0365: r##\"\n+Private modules cannot be publicly re-exported.  This error indicates\n+that you attempted to `pub use` a module that was not itself public.\n+\n+Here is an example that demonstrates the error:\n+\n+```\n+mod foo {\n+    pub const X: u32 = 1;\n+}\n+pub use foo as foo2;\n+\n+```\n+The solution to this problem is to ensure that the module that you are\n+re-exporting is itself marked with `pub`:\n+\n+```\n+pub mod foo {\n+    pub const X: u32 = 1;\n+}\n+pub use foo as foo2;\n+```\n+\n+See the 'Use Declarations' section of the reference for more information\n+on this topic:\n+\n+http://doc.rust-lang.org/reference.html#use-declarations\n \"##\n \n }\n@@ -208,8 +266,6 @@ register_diagnostics! {\n     E0254, // import conflicts with imported crate in this module\n     E0257,\n     E0258,\n-    E0364, // item is private\n-    E0365, // item is private\n     E0401, // can't use type parameters from outer function\n     E0402, // cannot use an outer type parameter in this context\n     E0403, // the name `{}` is already used"}, {"sha": "ec02963980bd0689f77251b46b5ddef41dd0c924", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -434,8 +434,13 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     value_result = BoundResult(target_module.clone(),\n                                                (*child_name_bindings).clone());\n                     if directive.is_public && !child_name_bindings.is_public(ValueNS) {\n-                        let msg = format!(\"`{}` is private\", source);\n+                        let msg = format!(\"`{}` is private, and cannot be reexported\",\n+                                          token::get_name(source));\n+                        let note_msg =\n+                            format!(\"Consider marking `{}` as `pub` in the imported module\",\n+                                    token::get_name(source));\n                         span_err!(self.resolver.session, directive.span, E0364, \"{}\", &msg);\n+                        self.resolver.session.span_note(directive.span, &note_msg);\n                         pub_err = true;\n                     }\n                 }\n@@ -444,8 +449,12 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     type_result = BoundResult(target_module.clone(),\n                                               (*child_name_bindings).clone());\n                     if !pub_err && directive.is_public && !child_name_bindings.is_public(TypeNS) {\n-                        let msg = format!(\"`{}` is private\", source);\n+                        let msg = format!(\"`{}` is private, and cannot be reexported\",\n+                                          token::get_name(source));\n+                        let note_msg = format!(\"Consider declaring module `{}` as a `pub mod`\",\n+                                               token::get_name(source));\n                         span_err!(self.resolver.session, directive.span, E0365, \"{}\", &msg);\n+                        self.resolver.session.span_note(directive.span, &note_msg);\n                     }\n                 }\n             }"}, {"sha": "b3ad4774091f24d6a488a16226be8e104a81fdd0", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -115,7 +115,7 @@\n         case \"s\":\n         case \"S\":\n             ev.preventDefault();\n-            $(\".search-input\").focus();\n+            focusSearchBar()\n             break;\n \n         case \"?\":\n@@ -960,5 +960,5 @@\n \n // Sets the focus on the search bar at the top of the page\n function focusSearchBar() {\n-    document.getElementsByName('search')[0].focus();\n+    $('.search-input').focus();\n }"}, {"sha": "a944acad84df14188c8acb0aa8d37f65b232dc41", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -1104,7 +1104,7 @@ impl TokenTree {\n                     tts: vec![TtToken(sp, token::Ident(token::str_to_ident(\"doc\"),\n                                                        token::Plain)),\n                               TtToken(sp, token::Eq),\n-                              TtToken(sp, token::Literal(token::Str_(name), None))],\n+                              TtToken(sp, token::Literal(token::StrRaw(name, 0), None))],\n                     close_span: sp,\n                 }))\n             }"}, {"sha": "669b930ecc92ec4899774fd52bef147737ed7e9b", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -63,12 +63,18 @@ macro_rules! fileline_help {\n macro_rules! register_diagnostics {\n     ($($code:tt),*) => (\n         $(register_diagnostic! { $code })*\n+    );\n+    ($($code:tt),*,) => (\n+        $(register_diagnostic! { $code })*\n     )\n }\n \n #[macro_export]\n macro_rules! register_long_diagnostics {\n     ($($code:tt: $description:tt),*) => (\n         $(register_diagnostic! { $code, $description })*\n+    );\n+    ($($code:tt: $description:tt),*,) => (\n+        $(register_diagnostic! { $code, $description })*\n     )\n }"}, {"sha": "ea92f0ffebe6fc58870424f1fdbcea73902f76dc", "filename": "src/test/run-pass/macro-doc-escapes.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Ftest%2Frun-pass%2Fmacro-doc-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df259b9da287043e8284eb53d61a17b89a89bee/src%2Ftest%2Frun-pass%2Fmacro-doc-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-doc-escapes.rs?ref=5df259b9da287043e8284eb53d61a17b89a89bee", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When expanding a macro, documentation attributes (including documentation comments) must be\n+// passed \"as is\" without being parsed. Otherwise, some text will be incorrectly interpreted as\n+// escape sequences, leading to an ICE.\n+//\n+// Related issues: #25929, #25943\n+\n+macro_rules! homura {\n+    (#[$x:meta]) => ()\n+}\n+\n+homura! {\n+    /// \\madoka \\x41\n+}\n+\n+fn main() { }"}]}