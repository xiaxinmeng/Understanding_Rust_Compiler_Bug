{"sha": "3c8898b1b170ff94450521755579a1971266e70e", "node_id": "C_kwDOAAsO6NoAKDNjODg5OGIxYjE3MGZmOTQ0NTA1MjE3NTU1NzlhMTk3MTI2NmU3MGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-10T15:06:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-10T15:08:40Z"}, "message": "Do not search through all three namespaces in `ItemScope::name_of`", "tree": {"sha": "8c9dc7d8b20f915c5f43ed71492b83b56452d886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9dc7d8b20f915c5f43ed71492b83b56452d886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c8898b1b170ff94450521755579a1971266e70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8898b1b170ff94450521755579a1971266e70e", "html_url": "https://github.com/rust-lang/rust/commit/3c8898b1b170ff94450521755579a1971266e70e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c8898b1b170ff94450521755579a1971266e70e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab657af5b7170e7695b80a3cb73319f47f83116c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab657af5b7170e7695b80a3cb73319f47f83116c", "html_url": "https://github.com/rust-lang/rust/commit/ab657af5b7170e7695b80a3cb73319f47f83116c"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "0a2a6719edc1951f96aa037e62be965687633275", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c8898b1b170ff94450521755579a1971266e70e/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8898b1b170ff94450521755579a1971266e70e/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=3c8898b1b170ff94450521755579a1971266e70e", "patch": "@@ -136,12 +136,17 @@ impl ItemScope {\n \n     /// XXX: this is O(N) rather than O(1), try to not introduce new usages.\n     pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n-        for (name, per_ns) in self.entries() {\n-            if let Some(vis) = item.match_with(per_ns) {\n-                return Some((name, vis));\n+        let (def, mut iter) = match item {\n+            ItemInNs::Macros(def) => {\n+                return self\n+                    .macros\n+                    .iter()\n+                    .find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)));\n             }\n-        }\n-        None\n+            ItemInNs::Types(def) => (def, self.types.iter()),\n+            ItemInNs::Values(def) => (def, self.values.iter()),\n+        };\n+        iter.find_map(|(name, &(other_def, vis))| (other_def == def).then(|| (name, vis)))\n     }\n \n     pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {\n@@ -386,20 +391,6 @@ pub enum ItemInNs {\n }\n \n impl ItemInNs {\n-    fn match_with(self, per_ns: PerNs) -> Option<Visibility> {\n-        match self {\n-            ItemInNs::Types(def) => {\n-                per_ns.types.filter(|(other_def, _)| *other_def == def).map(|(_, vis)| vis)\n-            }\n-            ItemInNs::Values(def) => {\n-                per_ns.values.filter(|(other_def, _)| *other_def == def).map(|(_, vis)| vis)\n-            }\n-            ItemInNs::Macros(def) => {\n-                per_ns.macros.filter(|(other_def, _)| *other_def == def).map(|(_, vis)| vis)\n-            }\n-        }\n-    }\n-\n     pub fn as_module_def_id(self) -> Option<ModuleDefId> {\n         match self {\n             ItemInNs::Types(id) | ItemInNs::Values(id) => Some(id),"}]}