{"sha": "e4a3b9ac699168ae536b79422141e5fa923369b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YTNiOWFjNjk5MTY4YWU1MzZiNzk0MjIxNDFlNWZhOTIzMzY5YjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T08:12:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T08:12:43Z"}, "message": "tutorial: Fill out bounded type test case", "tree": {"sha": "6490e4d4ac8a6f4efe6d5bc17dda79fb4dca288e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6490e4d4ac8a6f4efe6d5bc17dda79fb4dca288e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a3b9ac699168ae536b79422141e5fa923369b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a3b9ac699168ae536b79422141e5fa923369b2", "html_url": "https://github.com/rust-lang/rust/commit/e4a3b9ac699168ae536b79422141e5fa923369b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a3b9ac699168ae536b79422141e5fa923369b2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b95a4daa60d8d337bee5f990213087c2aa272e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95a4daa60d8d337bee5f990213087c2aa272e73", "html_url": "https://github.com/rust-lang/rust/commit/b95a4daa60d8d337bee5f990213087c2aa272e73"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "ccb22c5b5cd3c020b60f6f5d3d0884a7c3af355f", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4a3b9ac699168ae536b79422141e5fa923369b2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4a3b9ac699168ae536b79422141e5fa923369b2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=e4a3b9ac699168ae536b79422141e5fa923369b2", "patch": "@@ -2507,10 +2507,15 @@ values of *an* unknown type that conforms to a given interface.\n However, consider this function:\n \n ~~~~\n+# type circle = int; type rectangle = int;\n # iface drawable { fn draw(); }\n+# impl of drawable for int { fn draw() {} }\n+# fn new_circle() -> int { 1 }\n fn draw_all<T: drawable>(shapes: ~[T]) {\n     for shapes.each |shape| { shape.draw(); }\n }\n+# let c: circle = new_circle();\n+# draw_all(~[c]);\n ~~~~\n \n You can call that on an array of circles, or an array of squares"}]}