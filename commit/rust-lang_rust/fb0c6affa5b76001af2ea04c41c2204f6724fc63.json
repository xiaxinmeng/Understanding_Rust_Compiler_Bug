{"sha": "fb0c6affa5b76001af2ea04c41c2204f6724fc63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMGM2YWZmYTViNzYwMDFhZjJlYTA0YzQxYzIyMDRmNjcyNGZjNjM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-04-28T04:59:54Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-04-28T04:59:54Z"}, "message": "Use format_empty_struct_or_tuple", "tree": {"sha": "a91fdac47f2e95e28e922bd30dd12f377d04563d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91fdac47f2e95e28e922bd30dd12f377d04563d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb0c6affa5b76001af2ea04c41c2204f6724fc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0c6affa5b76001af2ea04c41c2204f6724fc63", "html_url": "https://github.com/rust-lang/rust/commit/fb0c6affa5b76001af2ea04c41c2204f6724fc63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb0c6affa5b76001af2ea04c41c2204f6724fc63/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "html_url": "https://github.com/rust-lang/rust/commit/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299"}], "stats": {"total": 44, "additions": 7, "deletions": 37}, "files": [{"sha": "341cce8a71f2cf52ffe78851cc95f2dd80c09485", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 37, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fb0c6affa5b76001af2ea04c41c2204f6724fc63/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0c6affa5b76001af2ea04c41c2204f6724fc63/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fb0c6affa5b76001af2ea04c41c2204f6724fc63", "patch": "@@ -1190,18 +1190,8 @@ pub fn format_struct_struct(\n     }\n \n     if fields.is_empty() {\n-        let snippet = context.snippet(mk_sp(body_lo, span.hi() - BytePos(1)));\n-        if snippet.trim().is_empty() {\n-            // `struct S {}`\n-        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n-            // fix indent\n-            result.push_str(snippet.trim_right());\n-            result.push('\\n');\n-            result.push_str(&offset.to_string(context.config));\n-        } else {\n-            result.push_str(snippet);\n-        }\n-        result.push('}');\n+        let inner_span = mk_sp(body_lo, span.hi() - BytePos(1));\n+        format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"\", \"}\");\n         return Some(result);\n     }\n \n@@ -1340,31 +1330,11 @@ fn format_tuple_struct(\n     };\n \n     if fields.is_empty() {\n-        // 3 = `();`\n-        let used_width = last_line_used_width(&result, offset.width()) + 3;\n-        if used_width > context.config.max_width() {\n-            result.push('\\n');\n-            result.push_str(&offset\n-                .block_indent(context.config)\n-                .to_string(context.config))\n-        }\n-        result.push('(');\n-        let snippet = context.snippet(mk_sp(\n-            body_lo,\n-            context\n-                .snippet_provider\n-                .span_before(mk_sp(body_lo, span.hi()), \")\"),\n-        ));\n-        if snippet.is_empty() {\n-            // `struct S ()`\n-        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n-            result.push_str(snippet.trim_right());\n-            result.push('\\n');\n-            result.push_str(&offset.to_string(context.config));\n-        } else {\n-            result.push_str(snippet);\n-        }\n-        result.push(')');\n+        let body_hi = context\n+            .snippet_provider\n+            .span_before(mk_sp(body_lo, span.hi()), \")\");\n+        let inner_span = mk_sp(body_lo, body_hi);\n+        format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"(\", \")\");\n     } else {\n         let shape = Shape::indented(offset, context.config).sub_width(1)?;\n         let fields = &fields.iter().collect::<Vec<_>>();"}]}