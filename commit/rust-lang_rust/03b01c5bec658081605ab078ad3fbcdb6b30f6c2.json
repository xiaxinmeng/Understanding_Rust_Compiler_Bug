{"sha": "03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "node_id": "C_kwDOAAsO6NoAKDAzYjAxYzViZWM2NTgwODE2MDVhYjA3OGFkM2ZiY2RiNmIzMGY2YzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-17T14:56:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-17T14:56:30Z"}, "message": "Auto merge of #109253 - matthiaskrgr:rollup-2xmv5zk, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #108958 (Remove box expressions from HIR)\n - #109044 (Prevent stable `libtest` from supporting `-Zunstable-options`)\n - #109155 (Fix riscv64 fuchsia LLVM target name)\n - #109156 (Fix linker detection for clang with prefix)\n - #109181 (inherit_overflow: adapt pattern to also work with v0 mangling)\n - #109198 (Install projection from RPITIT to default trait method opaque correctly)\n - #109215 (Use sort_by_key instead of sort_by)\n - #109229 (Fix invalid markdown link references)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c9d1d3914557ce581d92db8bba3797f3b651b68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d1d3914557ce581d92db8bba3797f3b651b68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "html_url": "https://github.com/rust-lang/rust/commit/03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50c62d225e004f5b488006d3d205a34363a128c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50c62d225e004f5b488006d3d205a34363a128c", "html_url": "https://github.com/rust-lang/rust/commit/c50c62d225e004f5b488006d3d205a34363a128c"}, {"sha": "0584bde84909ac5001834544fbfea593ff6b957a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0584bde84909ac5001834544fbfea593ff6b957a", "html_url": "https://github.com/rust-lang/rust/commit/0584bde84909ac5001834544fbfea593ff6b957a"}], "stats": {"total": 643, "additions": 451, "deletions": 192}, "files": [{"sha": "3893875e9a405a111650ac70ef4d3cead30c2458", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -259,7 +259,6 @@ pub enum ExprPrecedence {\n     Assign,\n     AssignOp,\n \n-    Box,\n     AddrOf,\n     Let,\n     Unary,\n@@ -319,8 +318,7 @@ impl ExprPrecedence {\n             ExprPrecedence::AssignOp => AssocOp::Assign.precedence() as i8,\n \n             // Unary, prefix\n-            ExprPrecedence::Box\n-            | ExprPrecedence::AddrOf\n+            ExprPrecedence::AddrOf\n             // Here `let pats = expr` has `let pats =` as a \"unary\" prefix of `expr`.\n             // However, this is not exactly right. When `let _ = a` is the LHS of a binop we\n             // need parens sometimes. E.g. we can print `(let _ = a) && b` as `let _ = a && b`"}, {"sha": "dbf15a3e05fa9e2fd114880e8f28ade0d5711da7", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -255,7 +255,7 @@ fn sccs_info<'cx, 'tcx>(\n     let var_to_origin = infcx.reg_var_to_origin.borrow();\n \n     let mut var_to_origin_sorted = var_to_origin.clone().into_iter().collect::<Vec<_>>();\n-    var_to_origin_sorted.sort_by(|a, b| a.0.cmp(&b.0));\n+    var_to_origin_sorted.sort_by_key(|vto| vto.0);\n     let mut debug_str = \"region variables to origins:\\n\".to_string();\n     for (reg_var, origin) in var_to_origin_sorted.into_iter() {\n         debug_str.push_str(&format!(\"{:?}: {:?}\\n\", reg_var, origin));\n@@ -2216,7 +2216,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // is in the same SCC or something. In that case, find what\n         // appears to be the most interesting point to report to the\n         // user via an even more ad-hoc guess.\n-        categorized_path.sort_by(|p0, p1| p0.category.cmp(&p1.category));\n+        categorized_path.sort_by_key(|p| p.category);\n         debug!(\"sorted_path={:#?}\", categorized_path);\n \n         (categorized_path.remove(0), extra_info)"}, {"sha": "8bb143ed3da8d0af445ad7d6d4acd5f5fde4aa11", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1199,15 +1199,17 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n                     .unwrap_or(stem);\n \n-                // GCC can have an optional target prefix.\n+                // GCC/Clang can have an optional target prefix.\n                 let flavor = if stem == \"emcc\" {\n                     LinkerFlavor::EmCc\n                 } else if stem == \"gcc\"\n                     || stem.ends_with(\"-gcc\")\n                     || stem == \"g++\"\n                     || stem.ends_with(\"-g++\")\n                     || stem == \"clang\"\n+                    || stem.ends_with(\"-clang\")\n                     || stem == \"clang++\"\n+                    || stem.ends_with(\"-clang++\")\n                 {\n                     LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n                 } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {"}, {"sha": "f4b46b9a131fb8cf9c4e811defde9a885f7c275c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1673,7 +1673,6 @@ pub struct Expr<'hir> {\n impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n-            ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n@@ -1763,7 +1762,6 @@ impl Expr<'_> {\n             | ExprKind::Lit(_)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Unary(..)\n-            | ExprKind::Box(..)\n             | ExprKind::AddrOf(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n@@ -1851,7 +1849,6 @@ impl Expr<'_> {\n             | ExprKind::InlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::ConstBlock(..)\n-            | ExprKind::Box(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n             | ExprKind::DropTemps(..)\n@@ -1862,8 +1859,7 @@ impl Expr<'_> {\n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.kind {\n-            ExprKind::Box(_)\n-            | ExprKind::Array(_)\n+            ExprKind::Array(_)\n             | ExprKind::Call(..)\n             | ExprKind::Tup(_)\n             | ExprKind::Lit(_)\n@@ -1910,8 +1906,6 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n \n #[derive(Debug, HashStable_Generic)]\n pub enum ExprKind<'hir> {\n-    /// A `box x` expression.\n-    Box(&'hir Expr<'hir>),\n     /// Allow anonymous constants from an inline `const` block\n     ConstBlock(AnonConst),\n     /// An array (e.g., `[a, b, c, d]`)."}, {"sha": "234256ab553c5c65e3eac750fb27314de0e1585f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -682,7 +682,6 @@ pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonCo\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n     match expression.kind {\n-        ExprKind::Box(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "872fec3954b2999a1c36738c8430fbcd33d154f4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -557,7 +557,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             check_opaque(tcx, id);\n         }\n         DefKind::ImplTraitPlaceholder => {\n-            let parent = tcx.impl_trait_in_trait_parent(id.owner_id.to_def_id());\n+            let parent = tcx.impl_trait_in_trait_parent_fn(id.owner_id.to_def_id());\n             // Only check the validity of this opaque type if the function has a default body\n             if let hir::Node::TraitItem(hir::TraitItem {\n                 kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),"}, {"sha": "4120ad45f6a6b79a474f096b44710b6a9d7c6c78", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,7 +1,6 @@\n use crate::autoderef::Autoderef;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -1548,16 +1547,27 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n     {\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): Even with the new lowering\n+        // strategy, we can't just call `check_associated_item` on the new RPITITs,\n+        // because tests like `tests/ui/async-await/in-trait/implied-bounds.rs` will fail.\n+        // That's because we need to check that the bounds of the RPITIT hold using\n+        // the special substs that we create during opaque type lowering, otherwise we're\n+        // getting a bunch of early bound and free regions mixed up... Haven't looked too\n+        // deep into this, though.\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n-                && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n-                && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n+                // RPITITs are always eagerly normalized into opaques, so always look for an\n+                // opaque here.\n+                && let ty::Alias(ty::Opaque, opaque_ty) = ty.kind()\n+                && let Some(opaque_def_id) = opaque_ty.def_id.as_local()\n+                && let opaque = tcx.hir().expect_item(opaque_def_id).expect_opaque_ty()\n+                && let hir::OpaqueTyOrigin::FnReturn(source) | hir::OpaqueTyOrigin::AsyncFn(source) = opaque.origin\n+                && source == fn_def_id\n             {\n-                let span = tcx.def_span(proj.def_id);\n-                let bounds = wfcx.tcx().explicit_item_bounds(proj.def_id);\n+                let span = tcx.def_span(opaque_ty.def_id);\n+                let bounds = wfcx.tcx().explicit_item_bounds(opaque_ty.def_id);\n                 let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n-                    let bound = ty::EarlyBinder(bound).subst(tcx, proj.substs);\n+                    let bound = ty::EarlyBinder(bound).subst(tcx, opaque_ty.substs);\n                     let normalized_bound = wfcx.normalize(span, None, bound);\n                     traits::wf::predicate_obligations(\n                         wfcx.infcx,"}, {"sha": "df0258ff7a36cec30173f64ad6589f211f1dcfe2", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, ImplTraitInTraitData, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -76,18 +76,26 @@ pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    // If the def_id is about an RPITIT, delegate explicit_item_bounds to the opaque_def_id that\n-    // generated the synthesized associate type.\n-    let rpitit_info = if let Some(ImplTraitInTraitData::Trait { opaque_def_id, .. }) =\n-        tcx.opt_rpitit_info(def_id)\n-    {\n-        Some(opaque_def_id)\n-    } else {\n-        None\n-    };\n+    match tcx.opt_rpitit_info(def_id) {\n+        // RPITIT's bounds are the same as opaque type bounds, but with\n+        // a projection self type.\n+        Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n+            let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n+            let opaque_ty = item.expect_opaque_ty();\n+            return opaque_type_bounds(\n+                tcx,\n+                opaque_def_id,\n+                opaque_ty.bounds,\n+                tcx.mk_projection(def_id, ty::InternalSubsts::identity_for_item(tcx, def_id)),\n+                item.span,\n+            );\n+        }\n+        // These should have been fed!\n+        Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n+        None => {}\n+    }\n \n-    let bounds_def_id = rpitit_info.unwrap_or(def_id);\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(bounds_def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n@@ -100,12 +108,12 @@ pub(super) fn explicit_item_bounds(\n             ..\n         }) => {\n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-            let item_ty = if *in_trait || rpitit_info.is_some() {\n+            let item_ty = if *in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 tcx.mk_projection(def_id, substs)\n             } else {\n                 tcx.mk_opaque(def_id, substs)\n             };\n-            opaque_type_bounds(tcx, bounds_def_id, bounds, item_ty, *span)\n+            opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }"}, {"sha": "361e8948e851a4b066d3953261b9153d193e3e40", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -112,10 +112,14 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n                 ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                    if matches!(\n-                        self.tcx.def_kind(*def_id),\n-                        DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                    ) =>\n+                    if matches!(self.tcx.def_kind(*def_id), DefKind::OpaqueTy) =>\n+                {\n+                    self.visit_opaque(*def_id, substs)\n+                }\n+                // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) check whether this is necessary\n+                // at all for RPITITs.\n+                ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                    if self.tcx.is_impl_trait_in_trait(*def_id) =>\n                 {\n                     self.visit_opaque(*def_id, substs)\n                 }"}, {"sha": "63ea6c904775f48f576c0180a1376cb0452b93c8", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1366,10 +1366,6 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match expr.kind {\n-            hir::ExprKind::Box(expr) => {\n-                self.word_space(\"Box::new\");\n-                self.print_call_post(std::slice::from_ref(expr));\n-            }\n             hir::ExprKind::Array(exprs) => {\n                 self.print_expr_vec(exprs);\n             }"}, {"sha": "ec391ea80f48b97ca09f91d4fa9988beb2c099b1", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -2,7 +2,6 @@\n \n use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n-use hir::def::DefKind;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -715,14 +714,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n-                self.tcx\n-                    .bound_explicit_item_bounds(proj.def_id)\n-                    .subst_iter_copied(self.tcx, proj.substs)\n-                    .find_map(|(p, s)| get_future_output(p, s))?\n-            }\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n+                .tcx\n+                .bound_explicit_item_bounds(proj.def_id)\n+                .subst_iter_copied(self.tcx, proj.substs)\n+                .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n                 \"async fn generator return type not an inference variable: {ret_ty}\""}, {"sha": "b2a01ad44a8e5022cfbdaec900e54e94819aa2f2", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -284,7 +284,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tcx = self.tcx;\n         match expr.kind {\n-            ExprKind::Box(subexpr) => self.check_expr_box(subexpr, expected),\n             ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),\n             ExprKind::Binary(op, lhs, rhs) => self.check_binop(expr, op, lhs, rhs, expected),\n             ExprKind::Assign(lhs, rhs, span) => {\n@@ -359,16 +358,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_expr_box(&self, expr: &'tcx hir::Expr<'tcx>, expected: Expectation<'tcx>) -> Ty<'tcx> {\n-        let expected_inner = expected.to_option(self).map_or(NoExpectation, |ty| match ty.kind() {\n-            ty::Adt(def, _) if def.is_box() => Expectation::rvalue_hint(self, ty.boxed_ty()),\n-            _ => NoExpectation,\n-        });\n-        let referent_ty = self.check_expr_with_expectation(expr, expected_inner);\n-        self.require_type_is_sized(referent_ty, expr.span, traits::SizedBoxType);\n-        self.tcx.mk_box(referent_ty)\n-    }\n-\n     fn check_expr_unary(\n         &self,\n         unop: hir::UnOp,"}, {"sha": "9aa6c7f103f87116c692562e9baae3548ed95d85", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -356,10 +356,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.walk_captures(closure);\n             }\n \n-            hir::ExprKind::Box(ref base) => {\n-                self.consume_expr(base);\n-            }\n-\n             hir::ExprKind::Yield(value, _) => {\n                 self.consume_expr(value);\n             }"}, {"sha": "1eeb7d984ee04016dd0874c1b431ade81e9650ef", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -190,7 +190,6 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             //\n             // Some of these may be interesting in the future\n             ExprKind::Path(..)\n-            | ExprKind::Box(..)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Array(..)\n             | ExprKind::Call(..)\n@@ -478,7 +477,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::AssignOp(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Block(..)\n-            | ExprKind::Box(..)\n             | ExprKind::Cast(..)\n             | ExprKind::Closure { .. }\n             | ExprKind::ConstBlock(..)"}, {"sha": "9a8d7ca9e33826adf923f0b3564de3e2c0d6309b", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -382,7 +382,6 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Err(_) => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }\n     }"}, {"sha": "de1a2e6a577bf83cc24416a4fe9bfd035c3734ff", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -359,10 +359,12 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         let (def_id, substs) = match *ty.kind() {\n             ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                if matches!(\n-                    self.tcx.def_kind(def_id),\n-                    DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                ) =>\n+                if matches!(self.tcx.def_kind(def_id), DefKind::OpaqueTy) =>\n+            {\n+                (def_id, substs)\n+            }\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                if self.tcx.is_impl_trait_in_trait(def_id) =>\n             {\n                 (def_id, substs)\n             }\n@@ -1757,8 +1759,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 )\n                             }\n                             (true, ty::Alias(ty::Projection, proj))\n-                                if self.tcx.def_kind(proj.def_id)\n-                                    == DefKind::ImplTraitPlaceholder =>\n+                                if self.tcx.is_impl_trait_in_trait(proj.def_id) =>\n                             {\n                                 let sm = self.tcx.sess.source_map();\n                                 let pos = sm.lookup_char_pos(self.tcx.def_span(proj.def_id).lo());"}, {"sha": "b38bbdfe7bb8b9ec4ad55835715a7b82347efa95", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,7 +1,7 @@\n use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n-use rustc_hir::{self as hir, def::DefKind};\n+use rustc_hir as hir;\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n@@ -75,7 +75,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n                     (ty::Param(p), ty::Alias(ty::Projection, proj)) | (ty::Alias(ty::Projection, proj), ty::Param(p))\n-                        if tcx.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n+                        if !tcx.is_impl_trait_in_trait(proj.def_id) =>\n                     {\n                         let p_def_id = tcx\n                             .generics_of(body_owner_def_id)\n@@ -222,7 +222,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Alias(ty::Projection, proj_ty), _) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (ty::Alias(ty::Projection, proj_ty), _) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -231,7 +231,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Alias(ty::Projection, proj_ty)) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (_, ty::Alias(ty::Projection, proj_ty)) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,"}, {"sha": "49f823a47b83d3c462783e33b2b26b5cefa031cf", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -3,7 +3,6 @@ use super::{DefineOpaqueTypes, InferResult};\n use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n-use hir::def::DefKind;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::sync::Lrc;\n@@ -478,9 +477,7 @@ where\n                 }\n             }\n \n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => {\n                 // Skip lifetime parameters that are not captures.\n                 let variances = self.tcx.variances_of(proj.def_id);\n \n@@ -559,8 +556,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // FIXME(RPITIT): Don't replace RPITITs with inference vars.\n                     ty::Alias(ty::Projection, projection_ty)\n                         if !projection_ty.has_escaping_bound_vars()\n-                            && tcx.def_kind(projection_ty.def_id)\n-                                != DefKind::ImplTraitPlaceholder =>\n+                            && !tcx.is_impl_trait_in_trait(projection_ty.def_id) =>\n                     {\n                         self.infer_projection(\n                             param_env,"}, {"sha": "c778574b2c57b15d59070f3f6ba9c18cc78325e4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1028,7 +1028,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::InlineConst => true,\n \n         DefKind::ImplTraitPlaceholder => {\n-            let parent_def_id = tcx.impl_trait_in_trait_parent(def_id.to_def_id());\n+            let parent_def_id = tcx.impl_trait_in_trait_parent_fn(def_id.to_def_id());\n             let assoc_item = tcx.associated_item(parent_def_id);\n             match assoc_item.container {\n                 // Always encode an RPIT in an impl fn, since it always has a body"}, {"sha": "c8860cc55f6b71f3a41dd712792a6af7dd6fcfb3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -191,6 +191,7 @@ rustc_queries! {\n     {\n         desc { \"determine whether the opaque is a type-alias impl trait\" }\n         separate_provide_extern\n+        feedable\n     }\n \n     query unsizing_params_for_adt(key: DefId) -> &'tcx rustc_index::bit_set::BitSet<u32>"}, {"sha": "fb3e9cb1263178a260786aef60b85a889a39a243", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -305,8 +305,6 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be `Sized`.\n     SizedYieldType,\n-    /// Box expression result type must be `Sized`.\n-    SizedBoxType,\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[expr; N]` requires `type_of(expr): Copy`."}, {"sha": "6ef8384d0107a5c75875f1ee0b1b269040e24117", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -2552,12 +2552,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n     }\n \n-    pub fn impl_trait_in_trait_parent(self, mut def_id: DefId) -> DefId {\n-        while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n-            debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n-            def_id = self.parent(def_id);\n+    pub fn impl_trait_in_trait_parent_fn(self, mut def_id: DefId) -> DefId {\n+        match self.opt_rpitit_info(def_id) {\n+            Some(ImplTraitInTraitData::Trait { fn_def_id, .. })\n+            | Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) => fn_def_id,\n+            None => {\n+                while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n+                    debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n+                    def_id = self.parent(def_id);\n+                }\n+                def_id\n+            }\n         }\n-        def_id\n     }\n \n     pub fn impl_method_has_trait_impl_trait_tys(self, def_id: DefId) -> bool {\n@@ -2572,6 +2578,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let Some(trait_item_def_id) = item.trait_item_def_id else { return false; };\n \n+        if self.lower_impl_trait_in_trait_to_assoc_ty() {\n+            return !self.associated_items_for_impl_trait_in_trait(trait_item_def_id).is_empty();\n+        }\n+\n         // FIXME(RPITIT): This does a somewhat manual walk through the signature\n         // of the trait fn to look for any RPITITs, but that's kinda doing a lot\n         // of work. We can probably remove this when we refactor RPITITs to be"}, {"sha": "fffdbfc9660bb1651794167f8c19b0319c42fb60", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Alias(ty::Projection, ref data) => {\n                 if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n-                    && self.tcx().def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n+                    && self.tcx().is_impl_trait_in_trait(data.def_id)\n                 {\n                     return self.pretty_print_opaque_impl_type(data.def_id, data.substs);\n                 } else {"}, {"sha": "4c606b939b25ed0b0eb88998a178c0ca943f71e6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1288,7 +1288,7 @@ impl<'tcx> AliasTy<'tcx> {\n         match tcx.def_kind(self.def_id) {\n             DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.def_id),\n             DefKind::ImplTraitPlaceholder => {\n-                tcx.parent(tcx.impl_trait_in_trait_parent(self.def_id))\n+                tcx.parent(tcx.impl_trait_in_trait_parent_fn(self.def_id))\n             }\n             kind => bug!(\"expected a projection AliasTy; found {kind:?}\"),\n         }"}, {"sha": "cecb8a61aa2f48504542913f09e9a3fb3801e520", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -780,7 +780,6 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::DropTemps(ref source) => {\n                 ExprKind::Use { source: self.mirror_expr(source) }\n             }\n-            hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },\n             hir::ExprKind::Array(ref fields) => {\n                 ExprKind::Array { fields: self.mirror_exprs(fields) }\n             }"}, {"sha": "47e032758f23da1b90be4453357f8af649fd1246", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -300,7 +300,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         record_variants!(\n             (self, e, e.kind, Id::Node(e.hir_id), hir, Expr, ExprKind),\n             [\n-                Box, ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n+                ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n                 DropTemps, Let, If, Loop, Match, Closure, Block, Assign, AssignOp, Field, Index,\n                 Path, AddrOf, Break, Continue, Ret, InlineAsm, Struct, Repeat, Yield, Err\n             ]"}, {"sha": "36324e6f8da4aaadd3573e611b18f3111688a652", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -473,7 +473,6 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Type(..)\n             | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n@@ -1059,8 +1058,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&l, r_succ)\n             }\n \n-            hir::ExprKind::Box(ref e)\n-            | hir::ExprKind::AddrOf(_, _, ref e)\n+            hir::ExprKind::AddrOf(_, _, ref e)\n             | hir::ExprKind::Cast(ref e, _)\n             | hir::ExprKind::Type(ref e, _)\n             | hir::ExprKind::DropTemps(ref e)\n@@ -1425,7 +1423,6 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Closure { .. }\n         | hir::ExprKind::Path(_)\n         | hir::ExprKind::Yield(..)\n-        | hir::ExprKind::Box(..)\n         | hir::ExprKind::Type(..)\n         | hir::ExprKind::Err(_) => {}\n     }"}, {"sha": "f07a64c7c3ca2ad3beb5b84f08148de432859c5d", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -179,8 +179,7 @@ enum ItemKind {\n impl<'tcx> CheckInlineAssembly<'tcx> {\n     fn check_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, span: Span) {\n         match expr.kind {\n-            ExprKind::Box(..)\n-            | ExprKind::ConstBlock(..)\n+            ExprKind::ConstBlock(..)\n             | ExprKind::Array(..)\n             | ExprKind::Call(..)\n             | ExprKind::MethodCall(..)"}, {"sha": "cd67644589846dc071bf2c3bdaf97257e103054f", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -132,7 +132,7 @@ where\n                 projection.trait_ref_and_own_substs(tcx)\n             } else {\n                 // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n+                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n                 let trait_generics = tcx.generics_of(def_id);\n                 (\n                     tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),"}, {"sha": "0585ed76fe815522fc45deefc245104ac4dc0b7b", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{CodeModel, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv64gc-unknown-fuchsia\".into(),\n+        llvm_target: \"riscv64-unknown-fuchsia\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"riscv64\".into(),"}, {"sha": "a9c4e12681635f8a847ad201c2dfe388bb6ee145", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -144,18 +144,22 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n-        if self.tcx.opt_rpitit_info(obligation.cause.body_id.to_def_id()).is_some() {\n-            return OnUnimplementedNote::default();\n-        }\n-\n         let (def_id, substs) = self\n             .impl_similar_to(trait_ref, obligation)\n             .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));\n         let trait_ref = trait_ref.skip_binder();\n \n-        let body_hir = self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n-        let mut flags =\n-            vec![(sym::ItemContext, self.describe_enclosure(body_hir).map(|s| s.to_owned()))];\n+        let mut flags = vec![];\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): HIR is not present for RPITITs,\n+        // but I guess we could synthesize one here. We don't see any errors that rely on\n+        // that yet, though.\n+        let enclosure =\n+            if let Some(body_hir) = self.tcx.opt_local_def_id_to_hir_id(obligation.cause.body_id) {\n+                self.describe_enclosure(body_hir).map(|s| s.to_owned())\n+            } else {\n+                None\n+            };\n+        flags.push((sym::ItemContext, enclosure));\n \n         match obligation.cause.code() {\n             ObligationCauseCode::BuiltinDerivedObligation(..)"}, {"sha": "186bfc701bc4cd701cbfb1eeb24d9d6eb28c9734", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -2944,9 +2944,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::SizedYieldType => {\n                 err.note(\"the yield type of a generator must have a statically known size\");\n             }\n-            ObligationCauseCode::SizedBoxType => {\n-                err.note(\"the type of a box expression must have a statically known size\");\n-            }\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n             }"}, {"sha": "b8d9cff9c489ba2d1208c04cd5ae6c3c26a4ea6f", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1298,7 +1298,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n-        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -2200,7 +2200,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     let tcx = selcx.tcx();\n     let mut obligations = data.nested;\n \n-    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n     let leaf_def = match specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) {\n         Ok(assoc_ty) => assoc_ty,\n         Err(guar) => return Progress::error(tcx, guar),"}, {"sha": "68b1086e8e3f5d8f87fd6374364e3d68c44ca848", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -244,7 +244,7 @@ fn associated_item_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let fn_def_id = tcx.impl_trait_in_trait_parent_fn(opaque_ty_def_id.to_def_id());\n     let trait_def_id = tcx.parent(fn_def_id);\n     assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n \n@@ -289,8 +289,39 @@ fn associated_item_for_impl_trait_in_trait(\n         InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n     )));\n \n-    // Copy generics_of of the opaque.\n-    trait_assoc_ty.generics_of(tcx.generics_of(opaque_ty_def_id).clone());\n+    trait_assoc_ty.is_type_alias_impl_trait(false);\n+\n+    // Copy generics_of of the opaque type item but the trait is the parent.\n+    trait_assoc_ty.generics_of({\n+        let opaque_ty_generics = tcx.generics_of(opaque_ty_def_id);\n+        let opaque_ty_parent_count = opaque_ty_generics.parent_count;\n+        let mut params = opaque_ty_generics.params.clone();\n+\n+        let parent_generics = tcx.generics_of(trait_def_id);\n+        let parent_count = parent_generics.parent_count + parent_generics.params.len();\n+\n+        let mut trait_fn_params = tcx.generics_of(fn_def_id).params.clone();\n+\n+        for param in &mut params {\n+            param.index = param.index + parent_count as u32 + trait_fn_params.len() as u32\n+                - opaque_ty_parent_count as u32;\n+        }\n+\n+        trait_fn_params.extend(params);\n+        params = trait_fn_params;\n+\n+        let param_def_id_to_index =\n+            params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+        ty::Generics {\n+            parent: Some(trait_def_id),\n+            parent_count,\n+            params,\n+            param_def_id_to_index,\n+            has_self: false,\n+            has_late_bound_regions: opaque_ty_generics.has_late_bound_regions,\n+        }\n+    });\n \n     // There are no predicates for the synthesized associated type.\n     trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {"}, {"sha": "9fed1e57c92131f9bbe7a471e20c80115f8da433", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -117,16 +117,22 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n-    // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n-    // synthesized associated type doesn't have extra predicates to assume.\n-    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n-        return tcx.param_env(fn_def_id);\n-    }\n-\n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n+    // When computing the param_env of an RPITIT, use predicates of the containing function,\n+    // *except* for the additional assumption that the RPITIT normalizes to the trait method's\n+    // default opaque type. This is needed to properly check the item bounds of the assoc\n+    // type hold (`check_type_bounds`), since that method already installs a similar projection\n+    // bound, so they will conflict.\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): I don't like this, we should\n+    // at least be making sure that the generics in RPITITs and their parent fn don't\n+    // get out of alignment, or else we do actually need to substitute these predicates.\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        predicates = tcx.predicates_of(fn_def_id).instantiate_identity(tcx).predicates;\n+    }\n+\n     // Finally, we have to normalize the bounds in the environment, in\n     // case they contain any associated type projections. This process\n     // can yield errors if the put in illegal associated types, like\n@@ -160,7 +166,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n \n     let local_did = def_id.as_local();\n-    let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): This isn't correct for\n+    // RPITITs in const trait fn.\n+    let hir_id = local_did.and_then(|def_id| tcx.opt_local_def_id_to_hir_id(def_id));\n \n     // FIXME(consts): This is not exactly in line with the constness query.\n     let constness = match hir_id {\n@@ -268,8 +276,8 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n-            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n+            && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {\n             // We have entered some binders as we've walked into the\n@@ -282,11 +290,24 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                     re\n                 }\n             });\n+\n+            // If we're lowering to associated item, install the opaque type which is just\n+            // the `type_of` of the trait's associated item. If we're using the old lowering\n+            // strategy, then just reinterpret the associated type like an opaque :^)\n+            let default_ty = if self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n+                self\n+                    .tcx\n+                    .type_of(alias_ty.def_id)\n+                    .subst(self.tcx, alias_ty.substs)\n+            } else {\n+                self.tcx.mk_alias(ty::Opaque, alias_ty)\n+            };\n+\n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n                         projection_ty: alias_ty,\n-                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                        term: default_ty.into(),\n                     },\n                     self.bound_vars,\n                 )"}, {"sha": "54971af644c2887235933c1734540e3de1e36952", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -339,6 +339,12 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         \"\"\n     };\n \n+    // `libtest` uses this to know whether or not to support\n+    // `-Zunstable-options`.\n+    if !builder.unstable_features() {\n+        cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n+    }\n+\n     let mut features = String::new();\n \n     // Cranelift doesn't support `asm`."}, {"sha": "989e091a0d2d8235cb699e313112693cad20169d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -426,7 +426,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    if cx.tcx.def_kind(ty.skip_binder().def_id) == DefKind::ImplTraitPlaceholder {\n+    if cx.tcx.is_impl_trait_in_trait(ty.skip_binder().def_id) {\n         let bounds = cx\n             .tcx\n             .explicit_item_bounds(ty.skip_binder().def_id)"}, {"sha": "0281b1c47f8ce9aeaf64636ca6cd1d9e14539fc7", "filename": "src/librustdoc/html/templates/STYLE.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,12 +1,12 @@\n # Style for Templates\n \n-This directory has templates in the [Tera templating language](teradoc), which is very\n-similar to [Jinja2](jinjadoc) and [Django](djangodoc) templates, and also to [Askama](askamadoc).\n+This directory has templates in the [Tera templating language][teradoc], which is very\n+similar to [Jinja2][jinjadoc] and [Django][djangodoc] templates, and also to [Askama][askamadoc].\n \n [teradoc]: https://tera.netlify.app/docs/#templates\n-[jinjadoc]: https://jinja.palletsprojects.com/en/3.0.x/templates/\n-[djangodoc]: https://docs.djangoproject.com/en/3.2/topics/templates/\n-[askamadoc]: https://docs.rs/askama/0.10.5/askama/\n+[jinjadoc]: https://jinja.palletsprojects.com/en/3.1.x/templates/\n+[djangodoc]: https://docs.djangoproject.com/en/4.1/topics/templates/\n+[askamadoc]: https://docs.rs/askama/latest/askama/\n \n We want our rendered output to have as little unnecessary whitespace as\n possible, so that pages load quickly. To achieve that we use Tera's\n@@ -30,8 +30,8 @@ contents don't necessarily need a new line.\n \n Askama templates support quite sophisticated control flow. To keep our templates\n simple and understandable, we use only a subset: `if` and `for`. In particular\n-we avoid [assignments in the template logic](assignments) and [Askama\n-macros](macros). This also may make things easier if we switch to a different\n+we avoid [assignments in the template logic][assignments] and [Askama\n+macros][macros]. This also may make things easier if we switch to a different\n Jinja-style template system, like Askama, in the future.\n \n [assignments]: https://djc.github.io/askama/template_syntax.html#assignments"}, {"sha": "fe28c526be3507692d42f978ef5f1e680c274abc", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -167,7 +167,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(e) | ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n+        ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n         ExprKind::Call(path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 cx.qpath_res(qpath, path.hir_id)"}, {"sha": "f0a1b1dfe56281e29339411eade823f6b21c8bb9", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -124,8 +124,7 @@ fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'t\n #[allow(clippy::too_many_lines)]\n fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: HirId) -> NeverLoopResult {\n     match expr.kind {\n-        ExprKind::Box(e)\n-        | ExprKind::Unary(_, e)\n+        ExprKind::Unary(_, e)\n         | ExprKind::Cast(e, _)\n         | ExprKind::Type(e, _)\n         | ExprKind::Field(e, _)"}, {"sha": "04225beeb704b69a20df0f6bcddd73f389381ac8", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -321,7 +321,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                     self.has_significant_drop = true;\n                 }\n             }\n-            ExprKind::Box(..) |\n             ExprKind::Array(..) |\n             ExprKind::Call(..) |\n             ExprKind::Unary(..) |"}, {"sha": "67618f7038addb2dee7b697369f2c088f56e3282", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -33,10 +33,6 @@ struct SortByKeyDetection {\n /// contains a and the other replaces it with b)\n fn mirrored_exprs(a_expr: &Expr<'_>, a_ident: &Ident, b_expr: &Expr<'_>, b_ident: &Ident) -> bool {\n     match (&a_expr.kind, &b_expr.kind) {\n-        // Two boxes with mirrored contents\n-        (ExprKind::Box(left_expr), ExprKind::Box(right_expr)) => {\n-            mirrored_exprs(left_expr, a_ident, right_expr, b_ident)\n-        },\n         // Two arrays with mirrored contents\n         (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n             iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(left, a_ident, right, b_ident))"}, {"sha": "e3712190e67223db03554879d323b2115d0c0fb6", "filename": "src/tools/clippy/clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -127,8 +127,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => has_no_effect(cx, inner),\n+        | ExprKind::AddrOf(_, _, inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, fields, ref base) => {\n             !has_drop(cx, cx.typeck_results().expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, field.expr))\n@@ -234,8 +233,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n+        | ExprKind::AddrOf(_, _, inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, fields, ref base) => {\n             if has_drop(cx, cx.typeck_results().expr_ty(expr)) {\n                 None"}, {"sha": "ae7d19624ba617a4c695cc2877bb650f8c547c70", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -213,8 +213,7 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n     }\n     loop {\n         expr = match expr.kind {\n-            ExprKind::Box(e)\n-            | ExprKind::AddrOf(_, _, e)\n+            ExprKind::AddrOf(_, _, e)\n             | ExprKind::Block(\n                 &Block {\n                     stmts: [],"}, {"sha": "e12681c0a0ca659d80c22383c6c10c02ae3d6681", "filename": "src/tools/clippy/clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -380,7 +380,6 @@ impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n             | hir::ExprKind::Assign(..)\n             | hir::ExprKind::AssignOp(..)\n             | hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::If(..)"}, {"sha": "bc4adf1596d44d5fc890642306ae22621d086257", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -395,11 +395,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 }\n                 self.expr(field!(let_expr.init));\n             },\n-            ExprKind::Box(inner) => {\n-                bind!(self, inner);\n-                kind!(\"Box({inner})\");\n-                self.expr(inner);\n-            },\n             ExprKind::Array(elements) => {\n                 bind!(self, elements);\n                 kind!(\"Array({elements})\");"}, {"sha": "d3a6929f67e2ce5634c1f6769e192f840043eeda", "filename": "src/tools/clippy/clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -112,7 +112,6 @@ fn qpath_search_pat(path: &QPath<'_>) -> (Pat, Pat) {\n /// Get the search patterns to use for the given expression\n fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n     match e.kind {\n-        ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n         ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n         ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),"}, {"sha": "babbc7294a17348c2d4c0878bc39a9701072eebd", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -199,8 +199,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 },\n \n                 // Memory allocation, custom operator, loop, or call to an unknown function\n-                ExprKind::Box(_)\n-                | ExprKind::Unary(..)\n+                ExprKind::Unary(..)\n                 | ExprKind::Binary(..)\n                 | ExprKind::Loop(..)\n                 | ExprKind::Call(..) => self.eagerness = Lazy,"}, {"sha": "3a6d23ca5c10221b7a81c80f9f389f79e2b1e957", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -249,7 +249,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Box(l), &ExprKind::Box(r)) => self.eq_expr(l, r),\n             (&ExprKind::Call(l_fun, l_args), &ExprKind::Call(r_fun, r_args)) => {\n                 self.inner.allow_side_effects && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             },\n@@ -628,7 +627,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(j);\n                 }\n             },\n-            ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n+            ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n                 self.hash_expr(e);\n             },\n             ExprKind::Call(fun, args) => {"}, {"sha": "44cb5d5756ada6abd2864a5e9088b5d641449d0d", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -133,7 +133,6 @@ impl<'a> Sugg<'a> {\n \n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n             | hir::ExprKind::Closure { .. }"}, {"sha": "86a93f64fb71e78ac5ec52be54d362a8fec4fca0", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -600,7 +600,6 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n                 helper(typeck, false, e, f)?;\n             },\n             ExprKind::Block(&Block { expr: Some(e), .. }, _)\n-            | ExprKind::Box(e)\n             | ExprKind::Cast(e, _)\n             | ExprKind::Unary(_, e) => {\n                 helper(typeck, true, e, f)?;"}, {"sha": "39909d7abfd40b5597f40b171c1259bc68e4d4f9", "filename": "tests/codegen/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fcodegen%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fcodegen%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Finherit_overflow.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -4,7 +4,7 @@\n //[NOASSERT] compile-flags: -Coverflow-checks=off\n \n // CHECK-LABEL: define{{.*}} @assertion\n-// ASSERT: call void @_ZN4core9panicking5panic17h\n+// ASSERT: call void @{{.*4core9panicking5panic}}\n // NOASSERT: ret i8 0\n #[no_mangle]\n pub fn assertion() -> u8 {"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:4:12\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.stderr"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dd1af93d706c43c2a8396e1fafc8316ec8573d19", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.stderr"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "146e74ec2d03b812f1c771f2a7db2978e1e088ac", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics.stderr"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "507500abf4e1cd5501a4b1ec291a6d956761f815", "filename": "tests/ui/async-await/in-trait/async-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:3:12\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "163bb4fcf773daca83158c50d70b7d0ca259cae8", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/default-body-type-err-2.rs:8:9\n+  --> $DIR/default-body-type-err-2.rs:10:9\n    |\n LL |         42\n    |         ^^- help: try using a conversion method: `.to_string()`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.stderr"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/default-body-type-err-2.rs:10:9\n+   |\n+LL |         42\n+   |         ^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         expected `String`, found integer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "623237763100dd7741e88fe5050366650cd9b66f", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![allow(incomplete_features)]\n #![feature(async_fn_in_trait)]"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n-  --> $DIR/default-body-type-err.rs:7:22\n+  --> $DIR/default-body-type-err.rs:10:22\n    |\n LL |     fn lol(&self) -> impl Deref<Target = String> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err.stderr"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n+  --> $DIR/default-body-type-err.rs:10:22\n+   |\n+LL |     fn lol(&self) -> impl Deref<Target = String> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`\n+LL |\n+LL |         &1i32\n+   |         ----- return type was inferred to be `&i32` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "9bd5b7779898b5e0a55d225ef4a84fb7be7ceb01", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![allow(incomplete_features)]\n #![feature(return_position_impl_trait_in_trait)]\n "}, {"sha": "ab6a51c6bcb84d8842eaad3e0c91e66125b88833", "filename": "tests/ui/impl-trait/in-trait/default-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:5:12\n+  --> $DIR/default-method-constraint.rs:7:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/default-method-constraint.stderr"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-constraint.rs:7:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e85fe3c8626f45e003d6a39d9e7ab3d196cad744", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n // This didn't work in the previous default RPITIT method hack attempt\n "}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-102571.rs:20:9\n+  --> $DIR/issue-102571.rs:23:9\n    |\n LL |     let () = t.bar();\n    |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`", "previous_filename": "tests/ui/impl-trait/in-trait/issue-102571.stderr"}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.next.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102571.rs:23:9\n+   |\n+LL |     let () = t.bar();\n+   |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+   |         |\n+   |         expected associated type, found `()`\n+   |\n+   = note: expected associated type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+                    found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f0ddab5e7f2271e5bd470fc3c57e18e4beceb4f1", "filename": "tests/ui/impl-trait/in-trait/issue-102571.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/specialization-broken.rs:16:22\n+  --> $DIR/specialization-broken.rs:19:22\n    |\n LL | default impl<U> Foo for U\n    |              - this type parameter\n@@ -11,15 +11,15 @@ LL |     fn bar(&self) -> U {\n    |                      help: change the output type to match the trait: `impl Sized`\n    |\n note: type in trait\n-  --> $DIR/specialization-broken.rs:9:22\n+  --> $DIR/specialization-broken.rs:12:22\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |                      ^^^^^^^^^^\n    = note: expected signature `fn(&U) -> impl Sized`\n               found signature `fn(&U) -> U`\n \n error: method with return-position `impl Trait` in trait cannot be specialized\n-  --> $DIR/specialization-broken.rs:16:5\n+  --> $DIR/specialization-broken.rs:19:5\n    |\n LL |     fn bar(&self) -> U {\n    |     ^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/specialization-broken.stderr"}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.next.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,31 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:19:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:12:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected signature `fn(&U) -> impl Sized`\n+              found signature `fn(&U) -> U`\n+\n+error: method with return-position `impl Trait` in trait cannot be specialized\n+  --> $DIR/specialization-broken.rs:19:5\n+   |\n+LL |     fn bar(&self) -> U {\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "658d0709717a1bb14eb83d54b6fa287ab436ba2f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n // FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n // But we fixed an ICE anyways.\n "}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:9:22\n+  --> $DIR/wf-bounds.rs:11:22\n    |\n LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n    |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -9,14 +9,14 @@ note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:12:23\n+  --> $DIR/wf-bounds.rs:14:23\n    |\n LL |     fn nya2() -> impl Wf<[u8]>;\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Wf`\n-  --> $DIR/wf-bounds.rs:6:10\n+  --> $DIR/wf-bounds.rs:8:10\n    |\n LL | trait Wf<T> {}\n    |          ^ required by this bound in `Wf`", "previous_filename": "tests/ui/impl-trait/in-trait/wf-bounds.stderr"}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.next.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:11:22\n+   |\n+LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n+   |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:14:23\n+   |\n+LL |     fn nya2() -> impl Wf<[u8]>;\n+   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Wf`\n+  --> $DIR/wf-bounds.rs:8:10\n+   |\n+LL | trait Wf<T> {}\n+   |          ^ required by this bound in `Wf`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Wf<T: ?Sized> {}\n+   |           ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "39f412753159e474249d551b49cf376c29c5a3a0", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03b01c5bec658081605ab078ad3fbcdb6b30f6c2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs?ref=03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "patch": "@@ -1,4 +1,6 @@\n // issue #101663\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}]}