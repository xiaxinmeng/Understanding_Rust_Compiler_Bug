{"sha": "deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYjBmZjQ2ZWI4ODJmNzhlOTNlZDUwNmEyYmNiNGMwNGYyZDk4MmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-11T18:06:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-11T18:06:00Z"}, "message": "Merge pull request #764 from RalfJung/minmax\n\nimplement min and max floating point intrinsics", "tree": {"sha": "d2946162f08f0e04ff1d3658065fd5d00cf65726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2946162f08f0e04ff1d3658065fd5d00cf65726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc/+2ICRBK7hj4Ov3rIwAAdHIIAKs+clD7V9HcUnoGpbbTsMji\nMb7m4GkLymfrsXF8bz1B40BY5KguHONCcaTqJ7N+h00wH+gn0QDiQ9s41ThuimFU\niUo54gLXDRBH5O86bp3K5wA84JSJNcRvPG3VRXUlJSj8dHd0tXOvJ2Pea3inAnyu\n7Wrt1EJd3zpXH/lkrhuWjQEBs9cjG7ScI77GzfHiQngwCO7dToBekrtKmN7WQlDj\n4doJYeMWE5j+n4ZPhfijgq/ZX9GeUEajJrJ2J4V+L/I561ruEvy+23fV9vlagh/2\nQ+BKISV8qpTpq1ybOCkVhi+zJXlFuuL8u4XvH2HrqW6y4CIvUhBwYFQT7ujSgqU=\n=dooF\n-----END PGP SIGNATURE-----\n", "payload": "tree d2946162f08f0e04ff1d3658065fd5d00cf65726\nparent 48897d07607532f102f26413a06c560853f134a4\nparent 6a0d092eaf3150a4ae2e509744c49d5cadc60efc\nauthor Ralf Jung <post@ralfj.de> 1560276360 +0200\ncommitter GitHub <noreply@github.com> 1560276360 +0200\n\nMerge pull request #764 from RalfJung/minmax\n\nimplement min and max floating point intrinsics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "html_url": "https://github.com/rust-lang/rust/commit/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48897d07607532f102f26413a06c560853f134a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/48897d07607532f102f26413a06c560853f134a4", "html_url": "https://github.com/rust-lang/rust/commit/48897d07607532f102f26413a06c560853f134a4"}, {"sha": "6a0d092eaf3150a4ae2e509744c49d5cadc60efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0d092eaf3150a4ae2e509744c49d5cadc60efc", "html_url": "https://github.com/rust-lang/rust/commit/6a0d092eaf3150a4ae2e509744c49d5cadc60efc"}], "stats": {"total": 100, "additions": 74, "deletions": 26}, "files": [{"sha": "8ef35afca0545442d238fbc80cd65d8e42e20514", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -1 +1 @@\n-1cbd8a4d686d1411105f26cddf876c5994e69593\n+8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be"}, {"sha": "3d2c523bf705a2cb7758f23bd0981b609574fac2", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -758,7 +758,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 this.machine.last_error = err;\n             }\n             \"GetLastError\" => {\n-                this.write_scalar(Scalar::from_uint(this.machine.last_error, Size::from_bits(32)), dest)?;\n+                this.write_scalar(Scalar::from_u32(this.machine.last_error), dest)?;\n             }\n \n             \"AddVectoredExceptionHandler\" => {\n@@ -854,7 +854,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 };\n                 // If there was no error, write back how much was written.\n                 if let Some(n) = written {\n-                    this.write_scalar(Scalar::from_uint(n, Size::from_bits(32)), written_place.into())?;\n+                    this.write_scalar(Scalar::from_u32(n), written_place.into())?;\n                 }\n                 // Return whether this was a success.\n                 this.write_scalar("}, {"sha": "451a97eeed724957ac774e3a675c0e110eb96738", "filename": "src/intrinsic.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -1,3 +1,4 @@\n+use rustc_apfloat::Float;\n use rustc::mir;\n use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n use rustc::ty::layout::{self, LayoutOf, Size};\n@@ -186,7 +187,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n             \"sinf32\" | \"fabsf32\" | \"cosf32\" | \"sqrtf32\" | \"expf32\" | \"exp2f32\" | \"logf32\" |\n             \"log10f32\" | \"log2f32\" | \"floorf32\" | \"ceilf32\" | \"truncf32\" => {\n-                let f = this.read_scalar(args[0])?.to_f32()?;\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n                 let f = match intrinsic_name.get() {\n                     \"sinf32\" => f.sin(),\n                     \"fabsf32\" => f.abs(),\n@@ -202,12 +204,13 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     \"truncf32\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_f32(f), dest)?;\n+                this.write_scalar(Scalar::from_u32(f.to_bits()), dest)?;\n             }\n \n             \"sinf64\" | \"fabsf64\" | \"cosf64\" | \"sqrtf64\" | \"expf64\" | \"exp2f64\" | \"logf64\" |\n             \"log10f64\" | \"log2f64\" | \"floorf64\" | \"ceilf64\" | \"truncf64\" => {\n-                let f = this.read_scalar(args[0])?.to_f64()?;\n+                // FIXME: Using host floats.\n+                let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let f = match intrinsic_name.get() {\n                     \"sinf64\" => f.sin(),\n                     \"fabsf64\" => f.abs(),\n@@ -223,7 +226,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     \"truncf64\" => f.trunc(),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_f64(f), dest)?;\n+                this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n             }\n \n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n@@ -240,6 +243,28 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.binop_ignore_overflow(op, a, b, dest)?;\n             }\n \n+            \"minnumf32\" | \"maxnumf32\" => {\n+                let a = this.read_scalar(args[0])?.to_f32()?;\n+                let b = this.read_scalar(args[1])?.to_f32()?;\n+                let res = if intrinsic_name.get().starts_with(\"min\") {\n+                    a.min(b)\n+                } else {\n+                    a.max(b)\n+                };\n+                this.write_scalar(Scalar::from_f32(res), dest)?;\n+            }\n+\n+            \"minnumf64\" | \"maxnumf64\" => {\n+                let a = this.read_scalar(args[0])?.to_f64()?;\n+                let b = this.read_scalar(args[1])?.to_f64()?;\n+                let res = if intrinsic_name.get().starts_with(\"min\") {\n+                    a.min(b)\n+                } else {\n+                    a.max(b)\n+                };\n+                this.write_scalar(Scalar::from_f64(res), dest)?;\n+            }\n+\n             \"exact_div\" => {\n                 // Performs an exact division, resulting in undefined behavior where\n                 // `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`\n@@ -320,19 +345,21 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             }\n \n             \"powf32\" => {\n-                let f = this.read_scalar(args[0])?.to_f32()?;\n-                let f2 = this.read_scalar(args[1])?.to_f32()?;\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                let f2 = f32::from_bits(this.read_scalar(args[1])?.to_u32()?);\n                 this.write_scalar(\n-                    Scalar::from_f32(f.powf(f2)),\n+                    Scalar::from_u32(f.powf(f2).to_bits()),\n                     dest,\n                 )?;\n             }\n \n             \"powf64\" => {\n-                let f = this.read_scalar(args[0])?.to_f64()?;\n-                let f2 = this.read_scalar(args[1])?.to_f64()?;\n+                // FIXME: Using host floats.\n+                let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n+                let f2 = f64::from_bits(this.read_scalar(args[1])?.to_u64()?);\n                 this.write_scalar(\n-                    Scalar::from_f64(f.powf(f2)),\n+                    Scalar::from_u64(f.powf(f2).to_bits()),\n                     dest,\n                 )?;\n             }\n@@ -341,8 +368,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_scalar(args[0])?.to_f32()?;\n                 let b = this.read_scalar(args[1])?.to_f32()?;\n                 let c = this.read_scalar(args[2])?.to_f32()?;\n+                let res = a.mul_add(b, c).value;\n                 this.write_scalar(\n-                    Scalar::from_f32(a * b + c),\n+                    Scalar::from_f32(res),\n                     dest,\n                 )?;\n             }\n@@ -351,26 +379,29 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_scalar(args[0])?.to_f64()?;\n                 let b = this.read_scalar(args[1])?.to_f64()?;\n                 let c = this.read_scalar(args[2])?.to_f64()?;\n+                let res = a.mul_add(b, c).value;\n                 this.write_scalar(\n-                    Scalar::from_f64(a * b + c),\n+                    Scalar::from_f64(res),\n                     dest,\n                 )?;\n             }\n \n             \"powif32\" => {\n-                let f = this.read_scalar(args[0])?.to_f32()?;\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n                 let i = this.read_scalar(args[1])?.to_i32()?;\n                 this.write_scalar(\n-                    Scalar::from_f32(f.powi(i)),\n+                    Scalar::from_u32(f.powi(i).to_bits()),\n                     dest,\n                 )?;\n             }\n \n             \"powif64\" => {\n-                let f = this.read_scalar(args[0])?.to_f64()?;\n+                // FIXME: Using host floats.\n+                let f = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let i = this.read_scalar(args[1])?.to_i32()?;\n                 this.write_scalar(\n-                    Scalar::from_f64(f.powi(i)),\n+                    Scalar::from_u64(f.powi(i).to_bits()),\n                     dest,\n                 )?;\n             }"}, {"sha": "d2b20db06d3ce3a10c9f8873a2a7ec6816f2f71b", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -6,8 +6,8 @@\n extern crate log;\n // From rustc.\n extern crate syntax;\n-#[macro_use]\n-extern crate rustc;\n+extern crate rustc_apfloat;\n+#[macro_use] extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_target;"}, {"sha": "16b795342eab8e749d0efd897c7c28bbe6c7d9c4", "filename": "tests/run-pass/c_enums.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/tests%2Frun-pass%2Fc_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/tests%2Frun-pass%2Fc_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fc_enums.rs?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -11,11 +11,13 @@ enum Signed {\n }\n \n fn foo() -> [u8; 3] {\n-    [Foo::Bar as u8, Foo::Baz as u8, Foo::Quux as u8]\n+    let baz = Foo::Baz; // let-expansion changes the MIR significantly\n+    [Foo::Bar as u8, baz as u8, Foo::Quux as u8]\n }\n \n fn signed() -> [i8; 3] {\n-    [Signed::Bar as i8, Signed::Baz as i8, Signed::Quux as i8]\n+    let baz = Signed::Baz; // let-expansion changes the MIR significantly\n+    [Signed::Bar as i8, baz as i8, Signed::Quux as i8]\n }\n \n fn unsafe_match() -> bool {"}, {"sha": "c1588dae249a57a77553527cc2b5382ece1d4812", "filename": "tests/run-pass/floats.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -1,4 +1,3 @@\n-\n fn main() {\n     assert_eq!(6.0_f32*6.0_f32, 36.0_f32);\n     assert_eq!(6.0_f64*6.0_f64, 36.0_f64);\n@@ -12,4 +11,18 @@ fn main() {\n     assert_eq!(5.0f32 as u32, 5);\n     assert_eq!(5.0f32 as i32, 5);\n     assert_eq!(-5.0f32 as i32, -5);\n+\n+    assert_eq!((1.0 as f32).max(-1.0), 1.0);\n+    assert_eq!((1.0 as f32).min(-1.0), -1.0);\n+    assert_eq!(std::f32::NAN.min(9.0), 9.0);\n+    assert_eq!(std::f32::NAN.max(-9.0), -9.0);\n+    assert_eq!((9.0 as f32).min(std::f32::NAN), 9.0);\n+    assert_eq!((-9.0 as f32).max(std::f32::NAN), -9.0);\n+\n+    assert_eq!((1.0 as f64).max(-1.0), 1.0);\n+    assert_eq!((1.0 as f64).min(-1.0), -1.0);\n+    assert_eq!(std::f64::NAN.min(9.0), 9.0);\n+    assert_eq!(std::f64::NAN.max(-9.0), -9.0);\n+    assert_eq!((9.0 as f64).min(std::f64::NAN), 9.0);\n+    assert_eq!((-9.0 as f64).max(std::f64::NAN), -9.0);\n }"}, {"sha": "6b3d15a5091fc80c2fab3f7b0667f57148aa254b", "filename": "tests/run-pass/intrinsics-math.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/tests%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb0ff46eb882f78e93ed506a2bcb4c04f2d982a/tests%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-math.rs?ref=deb0ff46eb882f78e93ed506a2bcb4c04f2d982a", "patch": "@@ -50,8 +50,10 @@ pub fn main() {\n     assert_approx_eq!(8f32.log2(), 3f32);\n     assert_approx_eq!(f64::consts::E.log2(), f64::consts::LOG2_E);\n \n-    assert_approx_eq!(1.0f32.mul_add(2.0f32, 5.0f32), 7.0f32);\n-    assert_approx_eq!(0.0f64.mul_add(-2.0f64, f64::consts::E), f64::consts::E);\n+    assert_approx_eq!(3.0f32.mul_add(2.0f32, 5.0f32), 11.0);\n+    assert_eq!(0.0f32.mul_add(-2.0, f32::consts::E), f32::consts::E);\n+    assert_approx_eq!(3.0f64.mul_add(2.0, 5.0), 11.0);\n+    assert_eq!(0.0f64.mul_add(-2.0f64, f64::consts::E), f64::consts::E);\n \n     assert_approx_eq!((-1.0f32).abs(), 1.0f32);\n     assert_approx_eq!(34.2f64.abs(), 34.2f64);"}]}