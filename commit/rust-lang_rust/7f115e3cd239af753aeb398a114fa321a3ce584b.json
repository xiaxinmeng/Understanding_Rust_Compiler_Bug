{"sha": "7f115e3cd239af753aeb398a114fa321a3ce584b", "node_id": "C_kwDOAAsO6NoAKDdmMTE1ZTNjZDIzOWFmNzUzYWViMzk4YTExNGZhMzIxYTNjZTU4NGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T13:16:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T13:16:14Z"}, "message": "Auto merge of #101716 - Dylan-DPC:rollup-ayvh6nd, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #100293 (Add inline-llvm option for disabling/enabling LLVM inlining)\n - #100767 (Remove manual <[u8]>::escape_ascii)\n - #101668 (Suggest pub instead of public for const type item)\n - #101671 (Fix naming format of IEEE 754 standard)\n - #101676 (Check that the types in return position `impl Trait` in traits are well-formed)\n - #101681 (Deny return-position `impl Trait` in traits for object safety)\n - #101693 (Update browser UI test 0 10)\n - #101701 (Rustdoc-Json: Add tests for trait impls.)\n - #101706 (rustdoc: remove no-op `#search`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f941d47b92d9baffa335a306be4a71d9a60b1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f941d47b92d9baffa335a306be4a71d9a60b1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f115e3cd239af753aeb398a114fa321a3ce584b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f115e3cd239af753aeb398a114fa321a3ce584b", "html_url": "https://github.com/rust-lang/rust/commit/7f115e3cd239af753aeb398a114fa321a3ce584b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f115e3cd239af753aeb398a114fa321a3ce584b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a93214ec06b57f1eb0cc2fd07e3c4b86b1b1d949", "url": "https://api.github.com/repos/rust-lang/rust/commits/a93214ec06b57f1eb0cc2fd07e3c4b86b1b1d949", "html_url": "https://github.com/rust-lang/rust/commit/a93214ec06b57f1eb0cc2fd07e3c4b86b1b1d949"}, {"sha": "9bf89e72184c4f598360f81cea7612759b560372", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf89e72184c4f598360f81cea7612759b560372", "html_url": "https://github.com/rust-lang/rust/commit/9bf89e72184c4f598360f81cea7612759b560372"}], "stats": {"total": 477, "additions": 372, "deletions": 105}, "files": [{"sha": "97dfb7837674fdcaacbe6e4b660ba5065f0dcab1", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -473,6 +473,7 @@ impl Token {\n                 kw::Extern,\n                 kw::Impl,\n                 kw::Unsafe,\n+                kw::Const,\n                 kw::Static,\n                 kw::Union,\n                 kw::Macro,"}, {"sha": "536b385606c69c5fa98c91a2c4f23eb4558d6b71", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -163,12 +163,7 @@ impl LitKind {\n             }\n             LitKind::Str(symbol, ast::StrStyle::Raw(n)) => (token::StrRaw(n), symbol, None),\n             LitKind::ByteStr(ref bytes) => {\n-                let string = bytes\n-                    .iter()\n-                    .cloned()\n-                    .flat_map(ascii::escape_default)\n-                    .map(Into::<char>::into)\n-                    .collect::<String>();\n+                let string = bytes.escape_ascii().to_string();\n                 (token::ByteStr, Symbol::intern(&string), None)\n             }\n             LitKind::Byte(byte) => {"}, {"sha": "eff2436d41cac65adbe930d1cd7a3e845ebafa65", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -35,6 +35,10 @@ pub fn apply_to_callsite(callsite: &Value, idx: AttributePlace, attrs: &[&Attrib\n /// Get LLVM attribute for the provided inline heuristic.\n #[inline]\n fn inline_attr<'ll>(cx: &CodegenCx<'ll, '_>, inline: InlineAttr) -> Option<&'ll Attribute> {\n+    if !cx.tcx.sess.opts.unstable_opts.inline_llvm {\n+        // disable LLVM inlining\n+        return Some(AttributeKind::NoInline.create_attr(cx.llcx));\n+    }\n     match inline {\n         InlineAttr::Hint => Some(AttributeKind::InlineHint.create_attr(cx.llcx)),\n         InlineAttr::Always => Some(AttributeKind::AlwaysInline.create_attr(cx.llcx)),"}, {"sha": "d7c7037ce1a783b7a2b79faecb024d864216fe5f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -44,7 +44,7 @@ use std::io::{BufWriter, Write};\n use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n-use std::{ascii, char, env, fmt, fs, io, mem, str};\n+use std::{env, fmt, fs, io, mem, str};\n \n pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n@@ -552,14 +552,6 @@ fn link_staticlib<'a>(\n     Ok(())\n }\n \n-fn escape_stdout_stderr_string(s: &[u8]) -> String {\n-    str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n-        let mut x = \"Non-UTF-8 output: \".to_string();\n-        x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n-        x\n-    })\n-}\n-\n /// Use `thorin` (rust implementation of a dwarf packaging utility) to link DWARF objects into a\n /// DWARF package.\n fn link_dwarf_object<'a>(\n@@ -866,7 +858,7 @@ fn link_natively<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                let escaped_output = escape_stdout_stderr_string(&output);\n+                let escaped_output = escape_string(&output);\n                 let mut err = sess.struct_err(&format!(\n                     \"linking with `{}` failed: {}\",\n                     linker_path.display(),\n@@ -934,8 +926,8 @@ fn link_natively<'a>(\n \n                 sess.abort_if_errors();\n             }\n-            info!(\"linker stderr:\\n{}\", escape_stdout_stderr_string(&prog.stderr));\n-            info!(\"linker stdout:\\n{}\", escape_stdout_stderr_string(&prog.stdout));\n+            info!(\"linker stderr:\\n{}\", escape_string(&prog.stderr));\n+            info!(\"linker stdout:\\n{}\", escape_string(&prog.stdout));\n         }\n         Err(e) => {\n             let linker_not_found = e.kind() == io::ErrorKind::NotFound;\n@@ -1065,11 +1057,10 @@ fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: Opti\n }\n \n fn escape_string(s: &[u8]) -> String {\n-    str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n-        let mut x = \"Non-UTF-8 output: \".to_string();\n-        x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n-        x\n-    })\n+    match str::from_utf8(s) {\n+        Ok(s) => s.to_owned(),\n+        Err(_) => format!(\"Non-UTF-8 output: {}\", s.escape_ascii()),\n+    }\n }\n \n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {"}, {"sha": "dd768c5358d5a14b4b341999d8fae559185b988d", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -2633,15 +2633,7 @@ fn pretty_print_const<'tcx>(\n }\n \n fn pretty_print_byte_str(fmt: &mut Formatter<'_>, byte_str: &[u8]) -> fmt::Result {\n-    fmt.write_str(\"b\\\"\")?;\n-    for &c in byte_str {\n-        for e in std::ascii::escape_default(c) {\n-            fmt.write_char(e as char)?;\n-        }\n-    }\n-    fmt.write_str(\"\\\"\")?;\n-\n-    Ok(())\n+    write!(fmt, \"b\\\"{}\\\"\", byte_str.escape_ascii())\n }\n \n fn comma_sep<'tcx>(fmt: &mut Formatter<'_>, elems: Vec<ConstantKind<'tcx>>) -> fmt::Result {"}, {"sha": "a95e6a61854cf62757c58445809ac672aaee7aa2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -915,6 +915,12 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfOutput, _) => {\n                 format!(\"method `{}` references the `Self` type in its return type\", name).into()\n             }\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::ReferencesImplTraitInTrait,\n+                _,\n+            ) => format!(\"method `{}` references an `impl Trait` type in its return type\", name)\n+                .into(),\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -1021,6 +1027,9 @@ pub enum MethodViolationCode {\n     /// e.g., `fn foo(&self) -> Self`\n     ReferencesSelfOutput,\n \n+    /// e.g., `fn foo(&self) -> impl Sized`\n+    ReferencesImplTraitInTrait,\n+\n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,\n "}, {"sha": "e9eecfe78d32cf107b64b19f994af9446476fe86", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1405,14 +1405,7 @@ pub trait PrettyPrinter<'tcx>:\n     }\n \n     fn pretty_print_byte_str(mut self, byte_str: &'tcx [u8]) -> Result<Self::Const, Self::Error> {\n-        define_scoped_cx!(self);\n-        p!(\"b\\\"\");\n-        for &c in byte_str {\n-            for e in std::ascii::escape_default(c) {\n-                self.write_char(e as char)?;\n-            }\n-        }\n-        p!(\"\\\"\");\n+        write!(self, \"b\\\"{}\\\"\", byte_str.escape_ascii())?;\n         Ok(self)\n     }\n "}, {"sha": "a25e3362a0c33ed1966af5451c32265ba513e36d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1345,6 +1345,8 @@ options! {\n         \"hash spans relative to their parent item for incr. comp. (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_llvm: bool = (true, parse_bool, [TRACKED],\n+        \"enable LLVM inlining (default: yes)\"),\n     inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable MIR inlining (default: no)\"),\n     inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],"}, {"sha": "5542f187f93f7ecd6712fc1ee1e92b60e9a4d202", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -13,6 +13,7 @@ use super::elaborate_predicates;\n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n+use hir::def::DefKind;\n use rustc_errors::{FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -431,6 +432,9 @@ fn virtual_call_violation_for_method<'tcx>(\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n         return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n+    if contains_illegal_impl_trait_in_trait(tcx, sig.output()) {\n+        return Some(MethodViolationCode::ReferencesImplTraitInTrait);\n+    }\n \n     // We can't monomorphize things like `fn foo<A>(...)`.\n     let own_counts = tcx.generics_of(method.def_id).own_counts();\n@@ -793,6 +797,12 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                         ControlFlow::CONTINUE\n                     }\n                 }\n+                ty::Projection(ref data)\n+                    if self.tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                {\n+                    // We'll deny these later in their own pass\n+                    ControlFlow::CONTINUE\n+                }\n                 ty::Projection(ref data) => {\n                     // This is a projected type `<Foo as SomeTrait>::X`.\n \n@@ -861,6 +871,22 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n         .is_break()\n }\n \n+pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: ty::Binder<'tcx, Ty<'tcx>>,\n+) -> bool {\n+    // FIXME(RPITIT): Perhaps we should use a visitor here?\n+    ty.skip_binder().walk().any(|arg| {\n+        if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Projection(proj) = ty.kind()\n+        {\n+            tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { object_safety_violations, ..*providers };\n }"}, {"sha": "bc644c694a078c0869ca3e72fdef48a1b1c9d0a0", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1,4 +1,5 @@\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n+use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -1530,6 +1531,49 @@ fn check_fn_or_method<'tcx>(\n     );\n \n     check_where_clauses(wfcx, span, def_id);\n+\n+    check_return_position_impl_trait_in_trait_bounds(\n+        tcx,\n+        wfcx,\n+        def_id,\n+        sig.output(),\n+        hir_decl.output.span(),\n+    );\n+}\n+\n+/// Basically `check_associated_type_bounds`, but separated for now and should be\n+/// deduplicated when RPITITs get lowered into real associated items.\n+fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    wfcx: &WfCheckingCtxt<'_, 'tcx>,\n+    fn_def_id: LocalDefId,\n+    fn_output: Ty<'tcx>,\n+    span: Span,\n+) {\n+    if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n+        && assoc_item.container == ty::AssocItemContainer::TraitContainer\n+    {\n+        for arg in fn_output.walk() {\n+            if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                && let ty::Projection(proj) = ty.kind()\n+                && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+                && tcx.impl_trait_in_trait_parent(proj.item_def_id) == fn_def_id.to_def_id()\n+            {\n+                let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n+                let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+                    let normalized_bound = wfcx.normalize(span, None, bound);\n+                    traits::wf::predicate_obligations(\n+                        wfcx.infcx,\n+                        wfcx.param_env,\n+                        wfcx.body_id,\n+                        normalized_bound,\n+                        bound_span,\n+                    )\n+                });\n+                wfcx.register_obligations(wf_obligations);\n+            }\n+        }\n+    }\n }\n \n const HELP_FOR_SELF_TYPE: &str = \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\"}, {"sha": "d49e29b6e6e7fa82a9956b0d0d60847b9e819d21", "filename": "library/core/src/ffi/c_double.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fffi%2Fc_double.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fffi%2Fc_double.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_double.md?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `double` type.\n \n-This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n+This type will almost always be [`f64`], which is guaranteed to be an [IEEE 754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n \n-[IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n+[IEEE 754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n [`float`]: c_float"}, {"sha": "36374ef43618167b28090a6ed6be74114e84af74", "filename": "library/core/src/ffi/c_float.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fffi%2Fc_float.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fffi%2Fc_float.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_float.md?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1,5 +1,5 @@\n Equivalent to C's `float` type.\n \n-This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n+This type will almost always be [`f32`], which is guaranteed to be an [IEEE 754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n \n-[IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n+[IEEE 754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754"}, {"sha": "970830045b8124667964bd6e8d3dd51333b2f284", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1,7 +1,6 @@\n-use crate::ascii;\n use crate::cmp::Ordering;\n use crate::ffi::c_char;\n-use crate::fmt::{self, Write};\n+use crate::fmt;\n use crate::intrinsics;\n use crate::ops;\n use crate::slice;\n@@ -161,11 +160,7 @@ impl fmt::Display for FromBytesUntilNulError {\n #[stable(feature = \"cstr_debug\", since = \"1.3.0\")]\n impl fmt::Debug for CStr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"\\\"\")?;\n-        for byte in self.to_bytes().iter().flat_map(|&b| ascii::escape_default(b)) {\n-            f.write_char(byte as char)?;\n-        }\n-        write!(f, \"\\\"\")\n+        write!(f, \"\\\"{}\\\"\", self.to_bytes().escape_ascii())\n     }\n }\n "}, {"sha": "2019f71e69b8c635e6d91b410c2403b57c81da32", "filename": "library/core/src/num/dec2flt/decimal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fdecimal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fdecimal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fdecimal.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -32,7 +32,7 @@ impl Default for Decimal {\n impl Decimal {\n     /// The maximum number of digits required to unambiguously round a float.\n     ///\n-    /// For a double-precision IEEE-754 float, this required 767 digits,\n+    /// For a double-precision IEEE 754 float, this required 767 digits,\n     /// so we store the max digits + 1.\n     ///\n     /// We can exactly represent a float in radix `b` from radix 2 if"}, {"sha": "2c6a0ba64f266ea5f4165a4040e9d80039173d06", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -394,7 +394,7 @@ impl f32 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-754 doesn't define just a single NaN value;\n+    /// Note that IEEE 754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -632,7 +632,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE 754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -654,7 +654,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE 754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases.\n@@ -833,7 +833,7 @@ impl f32 {\n     /// Returns the maximum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n-    /// This follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs;\n+    /// This follows the IEEE 754-2008 semantics for maxNum, except for handling of signaling NaNs;\n     /// this function handles all NaNs the same way and avoids maxNum's problems with associativity.\n     /// This also matches the behavior of libm\u2019s fmax.\n     ///\n@@ -853,7 +853,7 @@ impl f32 {\n     /// Returns the minimum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n-    /// This follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs;\n+    /// This follows the IEEE 754-2008 semantics for minNum, except for handling of signaling NaNs;\n     /// this function handles all NaNs the same way and avoids minNum's problems with associativity.\n     /// This also matches the behavior of libm\u2019s fmin.\n     ///\n@@ -1051,9 +1051,9 @@ impl f32 {\n     /// It turns out this is incredibly portable, for two reasons:\n     ///\n     /// * Floats and Ints have the same endianness on all supported platforms.\n-    /// * IEEE-754 very precisely specifies the bit layout of floats.\n+    /// * IEEE 754 very precisely specifies the bit layout of floats.\n     ///\n-    /// However there is one caveat: prior to the 2008 version of IEEE-754, how\n+    /// However there is one caveat: prior to the 2008 version of IEEE 754, how\n     /// to interpret the NaN signaling bit wasn't actually specified. Most platforms\n     /// (notably x86 and ARM) picked the interpretation that was ultimately\n     /// standardized in 2008, but some didn't (notably MIPS). As a result, all"}, {"sha": "fd3c18ce29bd289c3822937e7e4c23b54dc661ad", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -393,7 +393,7 @@ impl f64 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-754 doesn't define just a single NaN value;\n+    /// Note that IEEE 754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -624,7 +624,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE 754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -655,7 +655,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE 754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases.\n@@ -844,7 +844,7 @@ impl f64 {\n     /// Returns the maximum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n-    /// This follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs;\n+    /// This follows the IEEE 754-2008 semantics for maxNum, except for handling of signaling NaNs;\n     /// this function handles all NaNs the same way and avoids maxNum's problems with associativity.\n     /// This also matches the behavior of libm\u2019s fmax.\n     ///\n@@ -864,7 +864,7 @@ impl f64 {\n     /// Returns the minimum of the two numbers, ignoring NaN.\n     ///\n     /// If one of the arguments is NaN, then the other argument is returned.\n-    /// This follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs;\n+    /// This follows the IEEE 754-2008 semantics for minNum, except for handling of signaling NaNs;\n     /// this function handles all NaNs the same way and avoids minNum's problems with associativity.\n     /// This also matches the behavior of libm\u2019s fmin.\n     ///\n@@ -1044,9 +1044,9 @@ impl f64 {\n     /// It turns out this is incredibly portable, for two reasons:\n     ///\n     /// * Floats and Ints have the same endianness on all supported platforms.\n-    /// * IEEE-754 very precisely specifies the bit layout of floats.\n+    /// * IEEE 754 very precisely specifies the bit layout of floats.\n     ///\n-    /// However there is one caveat: prior to the 2008 version of IEEE-754, how\n+    /// However there is one caveat: prior to the 2008 version of IEEE 754, how\n     /// to interpret the NaN signaling bit wasn't actually specified. Most platforms\n     /// (notably x86 and ARM) picked the interpretation that was ultimately\n     /// standardized in 2008, but some didn't (notably MIPS). As a result, all"}, {"sha": "495c1c5ae46c155bb0877a3a22dbc5756f3b2a83", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1353,12 +1353,7 @@ impl Literal {\n     /// Byte string literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn byte_string(bytes: &[u8]) -> Literal {\n-        let string = bytes\n-            .iter()\n-            .cloned()\n-            .flat_map(std::ascii::escape_default)\n-            .map(Into::<char>::into)\n-            .collect::<String>();\n+        let string = bytes.escape_ascii().to_string();\n         Literal::new(bridge::LitKind::ByteStr, &string, None)\n     }\n "}, {"sha": "094085e19428c8f6f4c682dd8fe3541dab368dbf", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::OsStr;\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::Path;\n use crate::sys::cvt;\n-use crate::{ascii, fmt, io, mem, ptr};\n+use crate::{fmt, io, mem, ptr};\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n@@ -64,18 +64,6 @@ enum AddressKind<'a> {\n     Abstract(&'a [u8]),\n }\n \n-struct AsciiEscaped<'a>(&'a [u8]);\n-\n-impl<'a> fmt::Display for AsciiEscaped<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"\\\"\")?;\n-        for byte in self.0.iter().cloned().flat_map(ascii::escape_default) {\n-            write!(fmt, \"{}\", byte as char)?;\n-        }\n-        write!(fmt, \"\\\"\")\n-    }\n-}\n-\n /// An address associated with a Unix socket.\n ///\n /// # Examples\n@@ -343,7 +331,7 @@ impl fmt::Debug for SocketAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.address() {\n             AddressKind::Unnamed => write!(fmt, \"(unnamed)\"),\n-            AddressKind::Abstract(name) => write!(fmt, \"{} (abstract)\", AsciiEscaped(name)),\n+            AddressKind::Abstract(name) => write!(fmt, \"\\\"{}\\\" (abstract)\", name.escape_ascii()),\n             AddressKind::Pathname(path) => write!(fmt, \"{path:?} (pathname)\"),\n         }\n     }"}, {"sha": "b33b080126131da2594b861682e59105e5ba8a31", "filename": "library/test/src/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Ftest%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/library%2Ftest%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fstats.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -14,7 +14,7 @@ pub trait Stats {\n     /// Sum of the samples.\n     ///\n     /// Note: this method sacrifices performance at the altar of accuracy\n-    /// Depends on IEEE-754 arithmetic guarantees. See proof of correctness at:\n+    /// Depends on IEEE 754 arithmetic guarantees. See proof of correctness at:\n     /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric\n     /// Predicates\"][paper]\n     ///"}, {"sha": "2774f8587f40e6c320f48389dfbfefb239415d52", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1 +1 @@\n-0.9.8\n\\ No newline at end of file\n+0.10.0\n\\ No newline at end of file"}, {"sha": "72e04decbe3e018209edc07dec4105b32ed052be", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -1891,11 +1891,6 @@ in storage.js plus the media query with (min-width: 701px)\n \t\tmargin-top: 10px;\n \t}\n \n-\t#search {\n-\t\tmargin-left: 0;\n-\t\tpadding: 0;\n-\t}\n-\n \t.anchor {\n \t\tdisplay: none !important;\n \t}"}, {"sha": "7f97cf220cc55f39a07a69094273bcb58afb3b28", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -6,7 +6,7 @@ size: (1100, 800)\n compare-elements-property: (\".top-doc .docblock\", \".top-doc .docblock > p\", [\"scrollWidth\"])\n assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"801\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n-assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1573\"})\n+assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1572\"})\n \n // Checking it works on other doc blocks as well...\n \n@@ -18,4 +18,4 @@ compare-elements-property: (\n )\n assert-property: (\"#implementations-list > details .docblock\", {\"scrollWidth\": \"801\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n-assert-property: (\"#implementations-list > details .docblock table\", {\"scrollWidth\": \"1573\"})\n+assert-property: (\"#implementations-list > details .docblock table\", {\"scrollWidth\": \"1572\"})"}, {"sha": "dc50185f01b25449fbadde9c78106b0598b53e51", "filename": "src/test/rustdoc-gui/sidebar-mobile-scroll.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -6,7 +6,7 @@ assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n \n // Scroll down.\n scroll-to: \"//h2[@id='blanket-implementations']\"\n-assert-window-property: {\"pageYOffset\": \"702\"}\n+assert-window-property: {\"pageYOffset\": \"643\"}\n \n // Open the sidebar menu.\n click: \".sidebar-menu-toggle\"\n@@ -21,11 +21,11 @@ assert-window-property: {\"pageYOffset\": \"0\"}\n // Close the sidebar menu. Make sure the scroll position gets restored.\n click: \".sidebar-menu-toggle\"\n wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n-assert-window-property: {\"pageYOffset\": \"702\"}\n+assert-window-property: {\"pageYOffset\": \"643\"}\n \n // Now test that scrollability returns when the browser window is just resized.\n click: \".sidebar-menu-toggle\"\n wait-for-css: (\".sidebar\", {\"left\": \"0px\"})\n assert-window-property: {\"pageYOffset\": \"0\"}\n-size: (900, 900)\n-assert-window-property: {\"pageYOffset\": \"702\"}\n+size: (900, 600)\n+assert-window-property: {\"pageYOffset\": \"643\"}"}, {"sha": "4321efcdb17127ecec10455ae256f772095e5a4d", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -224,22 +224,22 @@ click: \"#sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n // We scroll to line 117 to change the scroll position.\n scroll-to: '//*[@id=\"117\"]'\n-assert-window-property: {\"pageYOffset\": \"2519\"}\n+assert-window-property: {\"pageYOffset\": \"2542\"}\n // Expanding the sidebar...\n click: \"#sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"width\": \"500px\"})\n click: \"#sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n // The \"scrollTop\" property should be the same.\n-assert-window-property: {\"pageYOffset\": \"2519\"}\n+assert-window-property: {\"pageYOffset\": \"2542\"}\n \n // We now check that the scroll position is restored if the window is resized.\n size: (500, 700)\n click: \"#sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n assert-window-property: {\"pageYOffset\": \"0\"}\n size: (900, 900)\n-assert-window-property: {\"pageYOffset\": \"2519\"}\n+assert-window-property: {\"pageYOffset\": \"2542\"}\n size: (500, 700)\n click: \"#sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"hidden\"})"}, {"sha": "8c3a0bf5bb78f988f18347e312b4932d2d4f9ab2", "filename": "src/test/rustdoc-gui/toggle-click-deadspace.goml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -4,7 +4,10 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n assert-attribute: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n click: \"h4.code-header\" // This is the position of \"pub\" in \"pub fn a_method\"\n assert-attribute: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n-click: \".impl-items .rustdoc-toggle summary::before\" // This is the position of \"[-]\" next to that pub fn.\n+click-with-offset: (\n+    \".impl-items .rustdoc-toggle summary\",\n+    {\"x\": -24, \"y\": 8}, // This is the position of \"[-]\" next to that pub fn.\n+)\n assert-attribute-false: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n \n // Click the \"Trait\" part of \"impl Trait\" and verify it navigates."}, {"sha": "9a46908f9333bc51a627ee6915d70e29a1b119bc", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -32,6 +32,6 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n size: (600, 600)\n goto: file://|DOC_PATH|/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\n // It shouldn't have an overflow in the topbar either.\n-assert-property: (\".mobile-topbar .location\", {\"scrollWidth\": \"502\"})\n-assert-property: (\".mobile-topbar .location\", {\"clientWidth\": \"502\"})\n+assert-property: (\".mobile-topbar .location\", {\"scrollWidth\": \"500\"})\n+assert-property: (\".mobile-topbar .location\", {\"clientWidth\": \"500\"})\n assert-css: (\".mobile-topbar .location\", {\"overflow-x\": \"hidden\"})"}, {"sha": "832d0fce599095f371a70ec2cdd742a8fad72ca4", "filename": "src/test/rustdoc-json/impls/auxiliary/foreign_struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauxiliary%2Fforeign_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauxiliary%2Fforeign_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauxiliary%2Fforeign_struct.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1 @@\n+pub struct ForeignStruct;"}, {"sha": "2c81bee61282efc42db66b6b3a6fae0b92f71e0a", "filename": "src/test/rustdoc-json/impls/auxiliary/foreign_trait.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauxiliary%2Fforeign_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauxiliary%2Fforeign_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauxiliary%2Fforeign_trait.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1 @@\n+pub trait ForeignTrait {}"}, {"sha": "290c2d571e87457365f445cfdfe6ca34def7e786", "filename": "src/test/rustdoc-json/impls/foreign_for_local.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Fforeign_for_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Fforeign_for_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fforeign_for_local.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,18 @@\n+// aux-build: foreign_trait.rs\n+extern crate foreign_trait;\n+\n+/// ForeignTrait id hack\n+pub use foreign_trait::ForeignTrait as _;\n+// @set ForeignTrait = \"$.index[*][?(@.docs=='ForeignTrait id hack')].inner.id\"\n+\n+pub struct LocalStruct;\n+// @set LocalStruct = \"$.index[*][?(@.name=='LocalStruct')].id\"\n+\n+/// foreign for local\n+impl foreign_trait::ForeignTrait for LocalStruct {}\n+\n+// @set impl = \"$.index[*][?(@.docs=='foreign for local')].id\"\n+// @is \"$.index[*][?(@.docs=='foreign for local')].inner.for.inner.id\" $LocalStruct\n+// @is \"$.index[*][?(@.docs=='foreign for local')].inner.trait.id\" $ForeignTrait\n+\n+// @has \"$.index[*][?(@.name=='LocalStruct')].inner.impls[*]\" $impl"}, {"sha": "74f2f08b5a42f56e742cfde0f4401e7831f3d4a7", "filename": "src/test/rustdoc-json/impls/local_for_foreign.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_foreign.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,18 @@\n+// aux-build: foreign_struct.rs\n+extern crate foreign_struct;\n+\n+/// ForeignStruct id hack\n+pub use foreign_struct::ForeignStruct as _;\n+// @set ForeignStruct = \"$.index[*][?(@.docs=='ForeignStruct id hack')].inner.id\"\n+\n+pub trait LocalTrait {}\n+// @set LocalTrait = \"$.index[*][?(@.name=='LocalTrait')].id\"\n+\n+/// local for foreign\n+impl LocalTrait for foreign_struct::ForeignStruct {}\n+\n+// @set impl = \"$.index[*][?(@.docs=='local for foreign')].id\"\n+// @is \"$.index[*][?(@.docs=='local for foreign')].inner.trait.id\" $LocalTrait\n+// @is \"$.index[*][?(@.docs=='local for foreign')].inner.for.inner.id\" $ForeignStruct\n+\n+// @is \"$.index[*][?(@.name=='LocalTrait')].inner.implementations[*]\" $impl"}, {"sha": "93dedb7ec92d2d3493d3806390196f782c9fcec2", "filename": "src/test/rustdoc-json/impls/local_for_local.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_local.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,15 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set struct = \"$.index[*][?(@.name=='Struct')].id\"\n+pub struct Struct;\n+// @set trait = \"$.index[*][?(@.name=='Trait')].id\"\n+pub trait Trait {}\n+// @set impl = \"$.index[*][?(@.docs=='impl')].id\"\n+/// impl\n+impl Trait for Struct {}\n+\n+// @is \"$.index[*][?(@.name=='Struct')].inner.impls[*]\" $impl\n+// @is \"$.index[*][?(@.name=='Trait')].inner.implementations[*]\" $impl\n+// @is \"$.index[*][?(@.docs=='impl')].inner.trait.id\" $trait\n+// @is \"$.index[*][?(@.docs=='impl')].inner.for.inner.id\" $struct"}, {"sha": "38e7e2658dfd5f474a9585d16ec92ad939dd05c9", "filename": "src/test/rustdoc-json/impls/local_for_local_primitive.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,21 @@\n+#![feature(no_core)]\n+#![feature(rustdoc_internals)]\n+#![no_core]\n+\n+// @set Local = \"$.index[*][?(@.name=='Local')].id\"\n+pub trait Local {}\n+\n+// @is \"$.index[*][?(@.docs=='Local for bool')].inner.trait.id\" $Local\n+// @is \"$.index[*][?(@.docs=='Local for bool')].inner.for.kind\" '\"primitive\"'\n+// @is \"$.index[*][?(@.docs=='Local for bool')].inner.for.inner\" '\"bool\"'\n+/// Local for bool\n+impl Local for bool {}\n+\n+// @set impl =  \"$.index[*][?(@.docs=='Local for bool')].id\"\n+// @is \"$.index[*][?(@.name=='Local')].inner.implementations[*]\" $impl\n+\n+// FIXME(#101695): Test bool's `impls` include \"Local for bool\"\n+// @has \"$.index[*][?(@.name=='bool')]\"\n+#[doc(primitive = \"bool\")]\n+/// Boolean docs\n+mod prim_bool {}"}, {"sha": "7702a526fd84445d8a83a126bf2b483f3afd1005", "filename": "src/test/rustdoc-json/impls/local_for_primitive.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Flocal_for_primitive.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,7 @@\n+// @set local = \"$.index[*][?(@.name=='Local')]\"\n+pub trait Local {}\n+\n+// @set impl = \"$.index[*][?(@.docs=='local for bool')].id\"\n+// @is \"$.index[*][?(@.name=='Local')].inner.implementations[*]\" $impl\n+/// local for bool\n+impl Local for bool {}"}, {"sha": "73aa0a577c4d572cc5a287af87d125bda68a9b30", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -54,6 +54,7 @@\n     -Z                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n     -Z              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n     -Z                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -Z                             inline-llvm=val -- enable LLVM inlining (default: yes)\n     -Z                              inline-mir=val -- enable MIR inlining (default: no)\n     -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n     -Z               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)"}, {"sha": "dd35b9a2d8a7513f5e253bdb4e87243dcb375ac6", "filename": "src/test/ui/impl-trait/in-trait/object-safety.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,22 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    fn baz(&self) -> impl Debug;\n+}\n+\n+impl Foo for u32 {\n+    fn baz(&self) -> u32 {\n+        32\n+    }\n+}\n+\n+fn main() {\n+    let i = Box::new(42_u32) as Box<dyn Foo>;\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+    //~| ERROR the trait `Foo` cannot be made into an object\n+    let s = i.baz();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "9a1554b5e1cbd6e25dd5cfda6a54442e204bbadc", "filename": "src/test/ui/impl-trait/in-trait/object-safety.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,50 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:17:33\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:8\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:13\n+   |\n+LL |     let s = i.baz();\n+   |             ^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:8\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:17:13\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:8\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n+   = note: required by cast to type `Box<dyn Foo>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "2c71583b3123685e2077f9bb583dc8546ea60c18", "filename": "src/test/ui/impl-trait/in-trait/wf-bounds.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,16 @@\n+// issue #101663\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Wf<T> {}\n+\n+trait Uwu {\n+    fn nya() -> impl Wf<Vec<[u8]>>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+\n+    fn nya2() -> impl Wf<[u8]>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+fn main() {}"}, {"sha": "92e36841b70c208c4387bc1365b7a2d09368a3ec", "filename": "src/test/ui/impl-trait/in-trait/wf-bounds.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:9:22\n+   |\n+LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n+   |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |                ^ required by this bound in `Vec`\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:12:23\n+   |\n+LL |     fn nya2() -> impl Wf<[u8]>;\n+   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Wf`\n+  --> $DIR/wf-bounds.rs:6:10\n+   |\n+LL | trait Wf<T> {}\n+   |          ^ required by this bound in `Wf`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Wf<T: ?Sized> {}\n+   |           ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "14f620f41e8cdc9dca290d28076bb24b9babc85f", "filename": "src/test/ui/parser/public-instead-of-pub-3.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.fixed?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+mod test {\n+    pub const X: i32 = 123;\n+    //~^ ERROR expected one of `!` or `::`, found keyword `const`\n+}\n+\n+fn main() {\n+    println!(\"{}\", test::X);\n+}"}, {"sha": "ee27cb1a1a8b24bb78d55787bd77ed99e34db866", "filename": "src/test/ui/parser/public-instead-of-pub-3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.rs?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+mod test {\n+    public const X: i32 = 123;\n+    //~^ ERROR expected one of `!` or `::`, found keyword `const`\n+}\n+\n+fn main() {\n+    println!(\"{}\", test::X);\n+}"}, {"sha": "72efae08dda8e5c4c4bd5dbb48db30011cdc8501", "filename": "src/test/ui/parser/public-instead-of-pub-3.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f115e3cd239af753aeb398a114fa321a3ce584b/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpublic-instead-of-pub-3.stderr?ref=7f115e3cd239af753aeb398a114fa321a3ce584b", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `!` or `::`, found keyword `const`\n+  --> $DIR/public-instead-of-pub-3.rs:3:12\n+   |\n+LL |     public const X: i32 = 123;\n+   |            ^^^^^ expected one of `!` or `::`\n+   |\n+help: write `pub` instead of `public` to make the item public\n+   |\n+LL |     pub const X: i32 = 123;\n+   |     ~~~\n+\n+error: aborting due to previous error\n+"}]}