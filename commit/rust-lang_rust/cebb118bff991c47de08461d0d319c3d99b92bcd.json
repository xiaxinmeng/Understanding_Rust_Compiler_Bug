{"sha": "cebb118bff991c47de08461d0d319c3d99b92bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYmIxMThiZmY5OTFjNDdkZTA4NDYxZDBkMzE5YzNkOTliOTJiY2Q=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-30T19:03:25Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-30T19:03:25Z"}, "message": "Actually encode default associated types\n\nFixes #26636", "tree": {"sha": "f445f9b271208b4677f8f91ea8dd63a70ea0f3cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f445f9b271208b4677f8f91ea8dd63a70ea0f3cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cebb118bff991c47de08461d0d319c3d99b92bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cebb118bff991c47de08461d0d319c3d99b92bcd", "html_url": "https://github.com/rust-lang/rust/commit/cebb118bff991c47de08461d0d319c3d99b92bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cebb118bff991c47de08461d0d319c3d99b92bcd/comments", "author": null, "committer": null, "parents": [{"sha": "40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "html_url": "https://github.com/rust-lang/rust/commit/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "b677e7b85703b2cdca52c156df0309f4f0e60c99", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=cebb118bff991c47de08461d0d319c3d99b92bcd", "patch": "@@ -1451,6 +1451,10 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                     encode_item_sort(rbml_w, 't');\n                     encode_family(rbml_w, 'y');\n \n+                    if let Some(ty) = associated_type.ty {\n+                        encode_type(ecx, rbml_w, ty);\n+                    }\n+\n                     is_nonstatic_method = false;\n                 }\n             }"}, {"sha": "e5f7542aa84c9a12ccf96b968c18c99fd5bb8f60", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=cebb118bff991c47de08461d0d319c3d99b92bcd", "patch": "@@ -904,6 +904,9 @@ fn confirm_impl_candidate<'cx,'tcx>(\n                     // ought to be reported by the type checker method\n                     // `check_impl_items_against_trait`, so here we\n                     // just return TyError.\n+                    debug!(\"confirm_impl_candidate: no associated type {:?} for {:?}\",\n+                           assoc_ty.name,\n+                           trait_ref);\n                     return (selcx.tcx().types.err, vec!());\n                 }\n             }"}, {"sha": "a6b70bf974f959dac4afd70795cba580402ed6d6", "filename": "src/test/auxiliary/xcrate_associated_type_defaults.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Ftest%2Fauxiliary%2Fxcrate_associated_type_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Ftest%2Fauxiliary%2Fxcrate_associated_type_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_associated_type_defaults.rs?ref=cebb118bff991c47de08461d0d319c3d99b92bcd", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    type Input = usize;\n+    fn bar(&self, _: Self::Input) {}\n+}\n+\n+impl Foo for () {}"}, {"sha": "1b6de3b2f7bcf029a4e1cb236b0f0a1227a60842", "filename": "src/test/run-pass/xcrate-associated-type-defaults.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Ftest%2Frun-pass%2Fxcrate-associated-type-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebb118bff991c47de08461d0d319c3d99b92bcd/src%2Ftest%2Frun-pass%2Fxcrate-associated-type-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-associated-type-defaults.rs?ref=cebb118bff991c47de08461d0d319c3d99b92bcd", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate_associated_type_defaults.rs\n+\n+extern crate xcrate_associated_type_defaults;\n+use xcrate_associated_type_defaults::Foo;\n+\n+fn main() {\n+    ().bar(5);\n+}"}]}