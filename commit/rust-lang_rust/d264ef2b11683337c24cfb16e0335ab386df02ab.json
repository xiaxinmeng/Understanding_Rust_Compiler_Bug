{"sha": "d264ef2b11683337c24cfb16e0335ab386df02ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjRlZjJiMTE2ODMzMzdjMjRjZmIxNmUwMzM1YWIzODZkZjAyYWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T06:00:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T00:53:40Z"}, "message": "Rollup merge of #22313 - japaric:iter, r=aturon\n\n `IntoIterator` now has an extra associated item:\n\n``` rust\ntrait IntoIterator {\n    type Item;\n    type IntoIter: Iterator<Self=Self::Item>;\n}\n```\n\nThis lets you bind the iterator \\\"`Item`\\\" directly when writing generic functions:\n\n``` rust\n// hypothetical change, not included in this PR\nimpl Extend<T> for Vec<T> {\n    // you can now write\n    fn extend<I>(&mut self, it: I) where I: IntoIterator<Item=T> { .. }\n    // instead of\n    fn extend<I: IntoIterator>(&mut self, it: I) where I::IntoIter: Iterator<Item=T> { .. }\n}\n```\n\nThe downside is that now you have to write an extra associated type in your `IntoIterator` implementations:\n\n``` diff\n impl<T> IntoIterator for Vec<T> {\n+    type Item = T;\n     type IntoIter = IntoIter<T>;\n\n     fn into_iter(self) -> IntoIter<T> { .. }\n }\n```\n\nBecause this breaks all downstream implementations of `IntoIterator`, this is a [breaking-change]\n\n---\n\nr? @aturon", "tree": {"sha": "7470205f60983dd337b6ebcec633e8bd07725330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7470205f60983dd337b6ebcec633e8bd07725330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d264ef2b11683337c24cfb16e0335ab386df02ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d264ef2b11683337c24cfb16e0335ab386df02ab", "html_url": "https://github.com/rust-lang/rust/commit/d264ef2b11683337c24cfb16e0335ab386df02ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d264ef2b11683337c24cfb16e0335ab386df02ab/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e337a5728a3bedbae542c0c71e1c4185c75be21b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e337a5728a3bedbae542c0c71e1c4185c75be21b", "html_url": "https://github.com/rust-lang/rust/commit/e337a5728a3bedbae542c0c71e1c4185c75be21b"}, {"sha": "e7273784c7a80d8099e495015753d70e63e6d432", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7273784c7a80d8099e495015753d70e63e6d432", "html_url": "https://github.com/rust-lang/rust/commit/e7273784c7a80d8099e495015753d70e63e6d432"}], "stats": {"total": 441, "additions": 441, "deletions": 0}, "files": [{"sha": "1d994839d99410677ea349342c3d6b1b7a5d9675", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -655,6 +655,8 @@ impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -663,6 +665,18 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T: Ord> IntoIterator for BinaryHeap<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n     type IntoIter = Iter<'a, T>;\n \n@@ -671,6 +685,16 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     fn extend<Iter: Iterator<Item=T>>(&mut self, iter: Iter) {"}, {"sha": "ca598a8d4d29255145f51abefe7056be6fb50109", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -1070,6 +1070,8 @@ impl<'a> RandomAccessIterator for Iter<'a> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a> IntoIterator for &'a Bitv {\n     type IntoIter = Iter<'a>;\n \n@@ -1078,6 +1080,16 @@ impl<'a> IntoIterator for &'a Bitv {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a> IntoIterator for &'a Bitv {\n+    type Item = bool;\n+    type IntoIter = Iter<'a>;\n+\n+    fn into_iter(self) -> Iter<'a> {\n+        self.iter()\n+    }\n+}\n+\n /// An implementation of a set using a bit vector as an underlying\n /// representation for holding unsigned numerical elements.\n ///\n@@ -1882,6 +1894,8 @@ impl<'a> Iterator for SymmetricDifference<'a> {\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.0.size_hint() }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a> IntoIterator for &'a BitvSet {\n     type IntoIter = SetIter<'a>;\n \n@@ -1890,6 +1904,16 @@ impl<'a> IntoIterator for &'a BitvSet {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a> IntoIterator for &'a BitvSet {\n+    type Item = usize;\n+    type IntoIter = SetIter<'a>;\n+\n+    fn into_iter(self) -> SetIter<'a> {\n+        self.iter()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::*;"}, {"sha": "84f9825e989b365af71a4cae1a2d1a6dad90ee10", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -462,6 +462,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type IntoIter = IntoIter<K, V>;\n \n@@ -470,6 +472,18 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<K, V> IntoIterator for BTreeMap<K, V> {\n+    type Item = (K, V);\n+    type IntoIter = IntoIter<K, V>;\n+\n+    fn into_iter(self) -> IntoIter<K, V> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n     type IntoIter = Iter<'a, K, V>;\n \n@@ -478,6 +492,18 @@ impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {\n+    type Item = (&'a K, &'a V);\n+    type IntoIter = Iter<'a, K, V>;\n+\n+    fn into_iter(self) -> Iter<'a, K, V> {\n+        self.iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n     type IntoIter = IterMut<'a, K, V>;\n \n@@ -486,6 +512,16 @@ impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> {\n+    type Item = (&'a K, &'a mut V);\n+    type IntoIter = IterMut<'a, K, V>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, K, V> {\n+        self.iter_mut()\n+    }\n+}\n+\n /// A helper enum useful for deciding whether to continue a loop since we can't\n /// return from a closure\n enum Continuation<A, B> {"}, {"sha": "aecf59403119244a66e29c44ae1e3120eb523ca8", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -480,6 +480,8 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IntoIterator for BTreeSet<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -488,6 +490,18 @@ impl<T> IntoIterator for BTreeSet<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IntoIterator for BTreeSet<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n     type IntoIter = Iter<'a, T>;\n \n@@ -496,6 +510,16 @@ impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]"}, {"sha": "27b282ee9a9c1a04ee344d21ef2450180623d7b2", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -837,6 +837,8 @@ impl<A> FromIterator<A> for DList<A> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IntoIterator for DList<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -845,15 +847,49 @@ impl<T> IntoIterator for DList<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IntoIterator for DList<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a, T> IntoIterator for &'a DList<T> {\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a DList<T> {\n+    type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n \n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a, T> IntoIterator for &'a mut DList<T> {\n+    type IntoIter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a mut DList<T> {\n+    type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n     fn into_iter(mut self) -> IterMut<'a, T> {"}, {"sha": "5c37be188fea4c972859790ba405362e53663a98", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -257,6 +257,8 @@ impl<E:CLike> FromIterator<E> for EnumSet<E> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n     type IntoIter = Iter<E>;\n \n@@ -265,6 +267,16 @@ impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n+    type Item = E;\n+    type IntoIter = Iter<E>;\n+\n+    fn into_iter(self) -> Iter<E> {\n+        self.iter()\n+    }\n+}\n+\n impl<E:CLike> Extend<E> for EnumSet<E> {\n     fn extend<I: Iterator<Item=E>>(&mut self, iterator: I) {\n         for element in iterator {"}, {"sha": "0a4ccde923667ef01764443f05c58293ca495895", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -1699,6 +1699,8 @@ impl<A> FromIterator<A> for RingBuf<A> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IntoIterator for RingBuf<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -1707,6 +1709,18 @@ impl<T> IntoIterator for RingBuf<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IntoIterator for RingBuf<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T> IntoIterator for &'a RingBuf<T> {\n     type IntoIter = Iter<'a, T>;\n \n@@ -1715,6 +1729,18 @@ impl<'a, T> IntoIterator for &'a RingBuf<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T> IntoIterator for &'a RingBuf<T> {\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n     type IntoIter = IterMut<'a, T>;\n \n@@ -1723,6 +1749,16 @@ impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n+    type Item = &'a mut T;\n+    type IntoIter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for RingBuf<A> {\n     fn extend<T: Iterator<Item=A>>(&mut self, iterator: T) {"}, {"sha": "6653b960d8dfb254b068ba9619c476d9e73c3efa", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -1403,6 +1403,8 @@ impl<T> FromIterator<T> for Vec<T> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IntoIterator for Vec<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -1411,6 +1413,18 @@ impl<T> IntoIterator for Vec<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IntoIterator for Vec<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T> IntoIterator for &'a Vec<T> {\n     type IntoIter = slice::Iter<'a, T>;\n \n@@ -1419,7 +1433,29 @@ impl<'a, T> IntoIterator for &'a Vec<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T> IntoIterator for &'a Vec<T> {\n+    type Item = &'a T;\n+    type IntoIter = slice::Iter<'a, T>;\n+\n+    fn into_iter(self) -> slice::Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a, T> IntoIterator for &'a mut Vec<T> {\n+    type IntoIter = slice::IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> slice::IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a mut Vec<T> {\n+    type Item = &'a mut T;\n     type IntoIter = slice::IterMut<'a, T>;\n \n     fn into_iter(mut self) -> slice::IterMut<'a, T> {"}, {"sha": "7f9484c58a18575994e941a7ce4e1ce2f8400bb1", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -668,6 +668,8 @@ impl<V> FromIterator<(usize, V)> for VecMap<V> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IntoIterator for VecMap<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -676,15 +678,49 @@ impl<T> IntoIterator for VecMap<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IntoIterator for VecMap<T> {\n+    type Item = (usize, T);\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a, T> IntoIterator for &'a VecMap<T> {\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a VecMap<T> {\n+    type Item = (usize, &'a T);\n     type IntoIter = Iter<'a, T>;\n \n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n+    type IntoIter = IterMut<'a, T>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n+    type Item = (usize, &'a mut T);\n     type IntoIter = IterMut<'a, T>;\n \n     fn into_iter(mut self) -> IterMut<'a, T> {"}, {"sha": "abaa7594d04780678661e93ecb0087070baa9170", "filename": "src/libcore/array.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -48,6 +48,8 @@ macro_rules! array_impls {\n                 }\n             }\n \n+            // NOTE(stage0): remove impl after a snapshot\n+            #[cfg(stage0)]\n             impl<'a, T> IntoIterator for &'a [T; $N] {\n                 type IntoIter = Iter<'a, T>;\n \n@@ -56,7 +58,29 @@ macro_rules! array_impls {\n                 }\n             }\n \n+            #[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+            impl<'a, T> IntoIterator for &'a [T; $N] {\n+                type Item = &'a T;\n+                type IntoIter = Iter<'a, T>;\n+\n+                fn into_iter(self) -> Iter<'a, T> {\n+                    self.iter()\n+                }\n+            }\n+\n+            // NOTE(stage0): remove impl after a snapshot\n+            #[cfg(stage0)]\n+            impl<'a, T> IntoIterator for &'a mut [T; $N] {\n+                type IntoIter = IterMut<'a, T>;\n+\n+                fn into_iter(self) -> IterMut<'a, T> {\n+                    self.iter_mut()\n+                }\n+            }\n+\n+            #[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n             impl<'a, T> IntoIterator for &'a mut [T; $N] {\n+                type Item = &'a mut T;\n                 type IntoIter = IterMut<'a, T>;\n \n                 fn into_iter(self) -> IterMut<'a, T> {"}, {"sha": "03c473ed9674117b0a29bd58280a11f7edbbb0e3", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -118,6 +118,8 @@ pub trait FromIterator<A> {\n     fn from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n }\n \n+// NOTE(stage0): remove trait after a snapshot\n+#[cfg(stage0)]\n /// Conversion into an `Iterator`\n pub trait IntoIterator {\n     type IntoIter: Iterator;\n@@ -127,6 +129,19 @@ pub trait IntoIterator {\n     fn into_iter(self) -> Self::IntoIter;\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+/// Conversion into an `Iterator`\n+pub trait IntoIterator {\n+    type Item;\n+    type IntoIter: Iterator<Item=Self::Item>;\n+\n+    /// Consumes `Self` and returns an iterator over it\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn into_iter(self) -> Self::IntoIter;\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<I> IntoIterator for I where I: Iterator {\n     type IntoIter = I;\n \n@@ -135,6 +150,16 @@ impl<I> IntoIterator for I where I: Iterator {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<I: Iterator> IntoIterator for I {\n+    type Item = I::Item;\n+    type IntoIter = I;\n+\n+    fn into_iter(self) -> I {\n+        self\n+    }\n+}\n+\n /// A type growable from an `Iterator` implementation\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Extend<A> {"}, {"sha": "cd91843f359ea9abae945c6599f8e9c67386ddb4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -626,6 +626,8 @@ impl<'a, T> Default for &'a [T] {\n // Iterators\n //\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T> IntoIterator for &'a [T] {\n     type IntoIter = Iter<'a, T>;\n \n@@ -634,7 +636,29 @@ impl<'a, T> IntoIterator for &'a [T] {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T> IntoIterator for &'a [T] {\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a, T> IntoIterator for &'a mut [T] {\n+    type IntoIter = IterMut<'a, T>;\n+\n+    fn into_iter(self) -> IterMut<'a, T> {\n+        self.iter_mut()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> IntoIterator for &'a mut [T] {\n+    type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n     fn into_iter(self) -> IterMut<'a, T> {"}, {"sha": "e27e7a80246858058081618883503e7c0b5daa74", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -530,6 +530,8 @@ impl<'a,T> Iterator for EnumeratedItems<'a,T> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T> IntoIterator for VecPerParamSpace<T> {\n     type IntoIter = IntoIter<T>;\n \n@@ -538,7 +540,29 @@ impl<T> IntoIterator for VecPerParamSpace<T> {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<T> IntoIterator for VecPerParamSpace<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_vec().into_iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> {\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.as_slice().into_iter()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> {\n+    type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n \n     fn into_iter(self) -> Iter<'a, T> {"}, {"sha": "241e409910f366b859af95528b99f87ac85afb43", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -1372,6 +1372,8 @@ enum VacantEntryState<K, V, M> {\n     NoElem(EmptyBucket<K, V, M>),\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, K, V, S, H> IntoIterator for &'a HashMap<K, V, S>\n     where K: Eq + Hash<H>,\n           S: HashState<Hasher=H>,\n@@ -1384,6 +1386,22 @@ impl<'a, K, V, S, H> IntoIterator for &'a HashMap<K, V, S>\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, K, V, S, H> IntoIterator for &'a HashMap<K, V, S>\n+    where K: Eq + Hash<H>,\n+          S: HashState<Hasher=H>,\n+          H: hash::Hasher<Output=u64>\n+{\n+    type Item = (&'a K, &'a V);\n+    type IntoIter = Iter<'a, K, V>;\n+\n+    fn into_iter(self) -> Iter<'a, K, V> {\n+        self.iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, K, V, S, H> IntoIterator for &'a mut HashMap<K, V, S>\n     where K: Eq + Hash<H>,\n           S: HashState<Hasher=H>,\n@@ -1396,6 +1414,22 @@ impl<'a, K, V, S, H> IntoIterator for &'a mut HashMap<K, V, S>\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, K, V, S, H> IntoIterator for &'a mut HashMap<K, V, S>\n+    where K: Eq + Hash<H>,\n+          S: HashState<Hasher=H>,\n+          H: hash::Hasher<Output=u64>\n+{\n+    type Item = (&'a K, &'a mut V);\n+    type IntoIter = IterMut<'a, K, V>;\n+\n+    fn into_iter(mut self) -> IterMut<'a, K, V> {\n+        self.iter_mut()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<K, V, S, H> IntoIterator for HashMap<K, V, S>\n     where K: Eq + Hash<H>,\n           S: HashState<Hasher=H>,\n@@ -1408,6 +1442,20 @@ impl<K, V, S, H> IntoIterator for HashMap<K, V, S>\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<K, V, S, H> IntoIterator for HashMap<K, V, S>\n+    where K: Eq + Hash<H>,\n+          S: HashState<Hasher=H>,\n+          H: hash::Hasher<Output=u64>\n+{\n+    type Item = (K, V);\n+    type IntoIter = IntoIter<K, V>;\n+\n+    fn into_iter(self) -> IntoIter<K, V> {\n+        self.into_iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);"}, {"sha": "300e208931765087bea28a51755e4399914cf66a", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264ef2b11683337c24cfb16e0335ab386df02ab/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=d264ef2b11683337c24cfb16e0335ab386df02ab", "patch": "@@ -835,6 +835,8 @@ pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a, T, S, H> IntoIterator for &'a HashSet<T, S>\n     where T: Eq + Hash<H>,\n           S: HashState<Hasher=H>,\n@@ -847,11 +849,41 @@ impl<'a, T, S, H> IntoIterator for &'a HashSet<T, S>\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a, T, S, H> IntoIterator for &'a HashSet<T, S>\n+    where T: Eq + Hash<H>,\n+          S: HashState<Hasher=H>,\n+          H: hash::Hasher<Output=u64>\n+{\n+    type Item = &'a T;\n+    type IntoIter = Iter<'a, T>;\n+\n+    fn into_iter(self) -> Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n+impl<T, S, H> IntoIterator for HashSet<T, S>\n+    where T: Eq + Hash<H>,\n+          S: HashState<Hasher=H>,\n+          H: hash::Hasher<Output=u64>\n+{\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        self.into_iter()\n+    }\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T, S, H> IntoIterator for HashSet<T, S>\n     where T: Eq + Hash<H>,\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n+    type Item = T;\n     type IntoIter = IntoIter<T>;\n \n     fn into_iter(self) -> IntoIter<T> {"}]}