{"sha": "565235ee7e2d978e98b84450e15f673c84123a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTIzNWVlN2UyZDk3OGU5OGI4NDQ1MGUxNWY2NzNjODQxMjNhOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-07T14:54:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-07T14:54:17Z"}, "message": "Auto merge of #50454 - Manishearth:edition-preview-fixes, r=alexcrichton\n\nVarious edition preview fixes\n\nImplement a bunch of things discussed in the meeting.", "tree": {"sha": "99e5a6fbe87202d25d4c8842d8fb040c5ac4b3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e5a6fbe87202d25d4c8842d8fb040c5ac4b3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565235ee7e2d978e98b84450e15f673c84123a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565235ee7e2d978e98b84450e15f673c84123a8a", "html_url": "https://github.com/rust-lang/rust/commit/565235ee7e2d978e98b84450e15f673c84123a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565235ee7e2d978e98b84450e15f673c84123a8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62889702c9868682a3112a19c75321508d9eb6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/62889702c9868682a3112a19c75321508d9eb6e6", "html_url": "https://github.com/rust-lang/rust/commit/62889702c9868682a3112a19c75321508d9eb6e6"}, {"sha": "ae4b38ea66523b685b95748e448067724b2995dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4b38ea66523b685b95748e448067724b2995dd", "html_url": "https://github.com/rust-lang/rust/commit/ae4b38ea66523b685b95748e448067724b2995dd"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "175b44991fdfee4835ff0b4a1b38f6e32278fdb9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -14,7 +14,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n use syntax::codemap::Span;\n@@ -341,15 +341,16 @@ impl BuiltinLintDiagnostics {\n         match self {\n             BuiltinLintDiagnostics::Normal => (),\n             BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                let sugg = match sess.codemap().span_to_snippet(span) {\n-                    Ok(ref s) if is_global => format!(\"dyn ({})\", s),\n-                    Ok(s) => format!(\"dyn {}\", s),\n-                    Err(_) => format!(\"dyn <type>\")\n+                let (sugg, app) = match sess.codemap().span_to_snippet(span) {\n+                    Ok(ref s) if is_global => (format!(\"dyn ({})\", s),\n+                                               Applicability::MachineApplicable),\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (format!(\"dyn <type>\"), Applicability::HasPlaceholders)\n                 };\n-                db.span_suggestion(span, \"use `dyn`\", sugg);\n+                db.span_suggestion_with_applicability(span, \"use `dyn`\", sugg, app);\n             }\n             BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n-                let sugg = match sess.codemap().span_to_snippet(span) {\n+                let (sugg, app) = match sess.codemap().span_to_snippet(span) {\n                     Ok(ref s) => {\n                         // FIXME(Manishearth) ideally the emitting code\n                         // can tell us whether or not this is global\n@@ -359,11 +360,11 @@ impl BuiltinLintDiagnostics {\n                             \"::\"\n                         };\n \n-                        format!(\"crate{}{}\", opt_colon, s)\n+                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n                     }\n-                    Err(_) => format!(\"crate::<path>\")\n+                    Err(_) => (format!(\"crate::<path>\"), Applicability::HasPlaceholders)\n                 };\n-                db.span_suggestion(span, \"use `crate`\", sugg);\n+                db.span_suggestion_with_applicability(span, \"use `crate`\", sugg, app);\n             }\n         }\n     }"}, {"sha": "817abe2ceeb76f1a36686bef52aed105c601bf1d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -46,7 +46,7 @@ use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n-use syntax::errors::DiagnosticBuilder;\n+use syntax::errors::{Applicability, DiagnosticBuilder};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1300,7 +1300,19 @@ impl UnreachablePub {\n             } else {\n                 \"pub(crate)\"\n             }.to_owned();\n-            err.span_suggestion(pub_span, \"consider restricting its visibility\", replacement);\n+            let app = if span.ctxt().outer().expn_info().is_none() {\n+                // even if macros aren't involved the suggestion\n+                // may be incorrect -- the user may have mistakenly\n+                // hidden it behind a private module and this lint is\n+                // a helpful way to catch that. However, we're trying\n+                // not to change the nature of the code with this lint\n+                // so it's marked as machine applicable.\n+                Applicability::MachineApplicable\n+            } else {\n+                Applicability::MaybeIncorrect\n+            };\n+            err.span_suggestion_with_applicability(pub_span, \"consider restricting its visibility\",\n+                                                   replacement, app);\n             if exportable {\n                 err.help(\"or consider exporting it for use by other crates\");\n             }"}, {"sha": "074fa914f3772562114cb10d874eb54ced3c6304", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -178,7 +178,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_PARENS);\n \n     add_lint_group!(sess,\n-                    \"rust_2018_idioms\",\n+                    \"rust_2018_migration\",\n                     BARE_TRAIT_OBJECT,\n                     UNREACHABLE_PUB);\n "}, {"sha": "0f931d4374e59337a7e43c78ff7f1cc6f579b030", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -3277,9 +3277,8 @@ impl<'a> Resolver<'a> {\n                     let prev_name = path[0].name;\n                     if prev_name == keywords::Extern.name() ||\n                        prev_name == keywords::CrateRoot.name() &&\n-                       // Note: When this feature stabilizes, this should\n-                       // be gated on sess.rust_2018()\n-                       self.session.features_untracked().extern_absolute_paths {\n+                       self.session.features_untracked().extern_absolute_paths &&\n+                       self.session.rust_2018() {\n                         // `::extern_crate::a::b`\n                         let crate_id = self.crate_loader.process_path_extern(name, ident.span);\n                         let crate_root ="}, {"sha": "6a5a31a885fb9855c880239da9df6a23358da1cc", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -646,7 +646,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if module_path.len() == 1 && (module_path[0].name == keywords::CrateRoot.name() ||\n                                       module_path[0].name == keywords::Extern.name()) {\n             let is_extern = module_path[0].name == keywords::Extern.name() ||\n-                            self.session.features_untracked().extern_absolute_paths;\n+                            (self.session.features_untracked().extern_absolute_paths &&\n+                             self.session.rust_2018());\n             match directive.subclass {\n                 GlobImport { .. } if is_extern => {\n                     return Some((directive.span,"}, {"sha": "7341941c242a4a743092b4f125f6a4cf03fd87a9", "filename": "src/libsyntax/edition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -50,8 +50,8 @@ impl fmt::Display for Edition {\n impl Edition {\n     pub fn lint_name(&self) -> &'static str {\n         match *self {\n-            Edition::Edition2015 => \"edition_2015\",\n-            Edition::Edition2018 => \"edition_2018\",\n+            Edition::Edition2015 => \"rust_2015_breakage\",\n+            Edition::Edition2018 => \"rust_2018_breakage\",\n         }\n     }\n "}, {"sha": "5155408ba63f3143372f4a1db5ea19b312dca792", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -300,7 +300,7 @@ declare_features! (\n     (active, abi_unadjusted, \"1.16.0\", None, None),\n \n     // Procedural macros 2.0.\n-    (active, proc_macro, \"1.16.0\", Some(38356), None),\n+    (active, proc_macro, \"1.16.0\", Some(38356), Some(Edition::Edition2018)),\n \n     // Declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n@@ -324,7 +324,7 @@ declare_features! (\n \n \n     // Allows the `catch {...}` expression\n-    (active, catch_expr, \"1.17.0\", Some(31436), None),\n+    (active, catch_expr, \"1.17.0\", Some(31436), Some(Edition::Edition2018)),\n \n     // Used to preserve symbols (see llvm.used)\n     (active, used, \"1.18.0\", Some(40289), None),\n@@ -1848,6 +1848,14 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n     let mut feature_checker = FeatureChecker::default();\n \n+    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+        if let Some(f_edition) = f_edition {\n+            if f_edition <= crate_edition {\n+                set(&mut features, DUMMY_SP);\n+            }\n+        }\n+    }\n+\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue"}, {"sha": "fcf4714ba9695ff3c4a40a67290072ee34d57a16", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition=2018 -Zunstable-options\n+\n #![feature(extern_absolute_paths)]\n \n use xcrate::S; //~ ERROR can't find crate for `xcrate`"}, {"sha": "c256c5592c2695a1d95975db26f189cee04d9ab7", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition=2018 -Zunstable-options\n+\n #![feature(extern_absolute_paths)]\n \n fn main() {"}, {"sha": "837dc617b3ad056cb539711b3659ddb0f6ffd3bf", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition=2018 -Zunstable-options\n+\n #![feature(extern_absolute_paths)]\n \n use ycrate; //~ ERROR can't find crate for `ycrate`"}, {"sha": "9b7baa0016344221d9de93fc676af7d0e3a727f2", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/single-segment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:xcrate.rs\n+// compile-flags: --edition=2018 -Zunstable-options\n \n #![feature(crate_in_paths)]\n #![feature(extern_absolute_paths)]"}, {"sha": "6a67b5862a815526ed7fb103d30d77333bdfcc0b", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -1,9 +1,9 @@\n -include ../tools.mk\n \n all: extern_absolute_paths.rs extern_in_paths.rs krate2\n-\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis\n+\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018\n \tcat $(TMPDIR)/save-analysis/extern_absolute_paths.json | \"$(PYTHON)\" validate_json.py\n-\t$(RUSTC) extern_in_paths.rs -Zsave-analysis\n+\t$(RUSTC) extern_in_paths.rs -Zsave-analysis --edition=2018\n \tcat $(TMPDIR)/save-analysis/extern_in_paths.json | \"$(PYTHON)\" validate_json.py\n \n krate2: krate2.rs"}, {"sha": "bbe066481a8b15d313c807e0a691b334a2fcdbf7", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:xcrate.rs\n+// compile-flags: --edition=2018 -Zunstable-options\n \n #![feature(extern_absolute_paths)]\n "}, {"sha": "ead462cf0d2cacc09754c6718616cbaffd30e185", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565235ee7e2d978e98b84450e15f673c84123a8a/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs?ref=565235ee7e2d978e98b84450e15f673c84123a8a", "patch": "@@ -12,7 +12,7 @@\n //\n // Regression test for #47075.\n \n-// compile-flags: --test\n+// compile-flags: --test --edition=2018 -Zunstable-options\n \n #![feature(extern_absolute_paths)]\n "}]}