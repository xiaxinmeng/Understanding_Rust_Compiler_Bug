{"sha": "30e39e871fa9064f310d05a295a6c197d9b0da78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZTM5ZTg3MWZhOTA2NGYzMTBkMDVhMjk1YTZjMTk3ZDliMGRhNzg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-14T18:53:42Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-14T22:42:33Z"}, "message": "save-analysis: Deduplicate lookup_{d,r}ef_id functions", "tree": {"sha": "388442a15ec3675f603092ace8c1c218f05d5362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388442a15ec3675f603092ace8c1c218f05d5362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30e39e871fa9064f310d05a295a6c197d9b0da78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30e39e871fa9064f310d05a295a6c197d9b0da78", "html_url": "https://github.com/rust-lang/rust/commit/30e39e871fa9064f310d05a295a6c197d9b0da78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30e39e871fa9064f310d05a295a6c197d9b0da78/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fafd615e5f56a98a0c1c21c88fc6352540926b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fafd615e5f56a98a0c1c21c88fc6352540926b2", "html_url": "https://github.com/rust-lang/rust/commit/0fafd615e5f56a98a0c1c21c88fc6352540926b2"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "c43e07a8c7480d1bc05b7cb8372adcb1d62ee0e3", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30e39e871fa9064f310d05a295a6c197d9b0da78/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e39e871fa9064f310d05a295a6c197d9b0da78/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=30e39e871fa9064f310d05a295a6c197d9b0da78", "patch": "@@ -130,6 +130,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.save_ctxt.span_from_span(span)\n     }\n \n+    fn lookup_def_id(&self, ref_id: NodeId) -> Option<DefId> {\n+        self.save_ctxt.lookup_def_id(ref_id)\n+    }\n+\n     pub fn dump_crate_info(&mut self, name: &str, krate: &ast::Crate) {\n         let source_file = self.tcx.sess.local_crate_source_file.as_ref();\n         let crate_root = source_file.map(|source_file| {\n@@ -223,13 +227,6 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn lookup_def_id(&self, ref_id: NodeId) -> Option<DefId> {\n-        match self.save_ctxt.get_path_res(ref_id) {\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => None,\n-            def => Some(def.def_id()),\n-        }\n-    }\n-\n     fn process_formals(&mut self, formals: &'l [ast::Param], qualname: &str) {\n         for arg in formals {\n             self.visit_pat(&arg.pat);"}, {"sha": "055ccf6c2c4f83c3270fbb4d71dbf3f00f33f481", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30e39e871fa9064f310d05a295a6c197d9b0da78/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e39e871fa9064f310d05a295a6c197d9b0da78/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=30e39e871fa9064f310d05a295a6c197d9b0da78", "patch": "@@ -312,7 +312,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     let impl_id = self.next_impl_id();\n                     let span = self.span_from_span(sub_span);\n \n-                    let type_data = self.lookup_ref_id(typ.id);\n+                    let type_data = self.lookup_def_id(typ.id);\n                     type_data.map(|type_data| {\n                         Data::RelationData(Relation {\n                             kind: RelationKind::Impl {\n@@ -322,7 +322,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                             from: id_from_def_id(type_data),\n                             to: trait_ref\n                                 .as_ref()\n-                                .and_then(|t| self.lookup_ref_id(t.ref_id))\n+                                .and_then(|t| self.lookup_def_id(t.ref_id))\n                                 .map(id_from_def_id)\n                                 .unwrap_or_else(|| null_id()),\n                         },\n@@ -495,7 +495,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_trait_ref_data(&self, trait_ref: &ast::TraitRef) -> Option<Ref> {\n-        self.lookup_ref_id(trait_ref.ref_id).and_then(|def_id| {\n+        self.lookup_def_id(trait_ref.ref_id).and_then(|def_id| {\n             let span = trait_ref.path.span;\n             if generated_code(span) {\n                 return None;\n@@ -870,7 +870,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         })\n     }\n \n-    fn lookup_ref_id(&self, ref_id: NodeId) -> Option<DefId> {\n+    fn lookup_def_id(&self, ref_id: NodeId) -> Option<DefId> {\n         match self.get_path_res(ref_id) {\n             Res::PrimTy(_) | Res::SelfTy(..) | Res::Err => None,\n             def => Some(def.def_id()),"}]}