{"sha": "f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "node_id": "C_kwDOAAsO6NoAKGYwYmUwZWUxYWE1MzE0ZjZjN2JiNjk0OWE4YWZlMTllODRlYWQzNWE", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-15T19:33:56Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-15T19:45:28Z"}, "message": "handle nested macros and add tests for them", "tree": {"sha": "792f7e00372f5115882f6a3ee51186acb17bd0aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/792f7e00372f5115882f6a3ee51186acb17bd0aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "html_url": "https://github.com/rust-lang/rust/commit/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc607fe32ed69ac35b60e962803a2fb2133471cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc607fe32ed69ac35b60e962803a2fb2133471cd", "html_url": "https://github.com/rust-lang/rust/commit/cc607fe32ed69ac35b60e962803a2fb2133471cd"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "ea17e7a6071046349a56dbc8a4dabf253f2da95e", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "patch": "@@ -3,10 +3,10 @@ use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Node, Stmt, StmtKind};\n+use rustc_hir::{Expr, ExprKind, Node};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, BytePos, Pos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -31,9 +31,29 @@ declare_clippy_lint! {\n     \"`dbg!` macro is intended as a debugging tool\"\n }\n \n-fn span_including_semi(cx: &LateContext<'_>, span: Span) -> Span {\n-    let span = cx.sess().source_map().span_extend_to_next_char(span, ';', true);\n-    span.with_hi(span.hi() + rustc_span::BytePos(1))\n+/// Gets the span of the statement up to the next semicolon, if and only if the next\n+/// non-whitespace character actually is a semicolon.\n+/// E.g.\n+/// ```rust,ignore\n+/// \n+///    dbg!();\n+///    ^^^^^^^  this span is returned\n+///\n+///   foo!(dbg!());\n+///             no span is returned\n+/// ```\n+fn span_including_semi(cx: &LateContext<'_>, span: Span) -> Option<Span> {\n+    let sm = cx.sess().source_map();\n+    let sf = sm.lookup_source_file(span.hi());\n+    let src = sf.src.as_ref()?.get(span.hi().to_usize()..)?;\n+    let first_non_whitespace = src.find(|c: char| !c.is_whitespace())?;\n+\n+    if src.as_bytes()[first_non_whitespace] == b';' {\n+        let hi = span.hi() + BytePos::from_usize(first_non_whitespace + 1);\n+        Some(span.with_hi(hi))\n+    } else {\n+        None\n+    }\n }\n \n #[derive(Copy, Clone)]\n@@ -62,16 +82,17 @@ impl LateLintPass<'_> for DbgMacro {\n             let mut applicability = Applicability::MachineApplicable;\n \n             let (sugg_span, suggestion) = match expr.peel_drop_temps().kind {\n-                ExprKind::Block(..) => match cx.tcx.hir().find_parent(expr.hir_id) {\n-                    // dbg!() as a standalone statement, suggest removing the whole statement entirely\n-                    Some(Node::Stmt(\n-                        stmt @ Stmt {\n-                            kind: StmtKind::Semi(_),\n-                            ..\n-                        },\n-                    )) => (span_including_semi(cx, stmt.span.source_callsite()), String::new()),\n-                    // empty dbg!() in arbitrary position (e.g. `foo(dbg!())`), suggest replacing with `foo(())`\n-                    _ => (macro_call.span, String::from(\"()\")),\n+                // dbg!()\n+                ExprKind::Block(..) => {\n+                    // If the `dbg!` macro is a \"free\" statement and not contained within other expressions,\n+                    // remove the whole statement.\n+                    if let Some(Node::Stmt(stmt)) = cx.tcx.hir().find_parent(expr.hir_id)\n+                        && let Some(span) = span_including_semi(cx, stmt.span.source_callsite())\n+                    {\n+                        (span, String::new())\n+                    } else {\n+                        (macro_call.span, String::from(\"()\"))\n+                    }\n                 },\n                 // dbg!(1)\n                 ExprKind::Match(val, ..) => ("}, {"sha": "10788d4048164576db1953db18cc8fb1c26ab5b4", "filename": "tests/ui/dbg_macro.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/tests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/tests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.rs?ref=f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "patch": "@@ -23,10 +23,29 @@ fn main() {\n }\n \n fn issue9914() {\n+    macro_rules! foo {\n+        ($x:expr) => {\n+            $x;\n+        };\n+    }\n+    macro_rules! foo2 {\n+        ($x:expr) => {\n+            $x;\n+        };\n+    }\n+    macro_rules! expand_to_dbg {\n+        () => {\n+            dbg!();\n+        };\n+    }\n+\n     dbg!();\n     #[allow(clippy::let_unit_value)]\n     let _ = dbg!();\n     bar(dbg!());\n+    foo!(dbg!());\n+    foo2!(foo!(dbg!()));\n+    expand_to_dbg!();\n }\n \n mod issue7274 {"}, {"sha": "530e766331777dd24c074c129ec962e8289953ba", "filename": "tests/ui/dbg_macro.stderr", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=f0be0ee1aa5314f6c7bb6949a8afe19e84ead35a", "patch": "@@ -99,7 +99,7 @@ LL |     (1, 2, 3, 4, 5);\n    |     ~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:26:5\n+  --> $DIR/dbg_macro.rs:42:5\n    |\n LL |     dbg!();\n    |     ^^^^^^^\n@@ -111,7 +111,7 @@ LL +\n    |\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:28:13\n+  --> $DIR/dbg_macro.rs:44:13\n    |\n LL |     let _ = dbg!();\n    |             ^^^^^^\n@@ -122,7 +122,7 @@ LL |     let _ = ();\n    |             ~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:29:9\n+  --> $DIR/dbg_macro.rs:45:9\n    |\n LL |     bar(dbg!());\n    |         ^^^^^^\n@@ -133,7 +133,29 @@ LL |     bar(());\n    |         ~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:49:9\n+  --> $DIR/dbg_macro.rs:46:10\n+   |\n+LL |     foo!(dbg!());\n+   |          ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     foo!(());\n+   |          ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:47:16\n+   |\n+LL |     foo2!(foo!(dbg!()));\n+   |                ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     foo2!(foo!(()));\n+   |                ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:68:9\n    |\n LL |         dbg!(2);\n    |         ^^^^^^^\n@@ -144,7 +166,7 @@ LL |         2;\n    |         ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:55:5\n+  --> $DIR/dbg_macro.rs:74:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n@@ -155,7 +177,7 @@ LL |     1;\n    |     ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:60:5\n+  --> $DIR/dbg_macro.rs:79:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n@@ -166,7 +188,7 @@ LL |     1;\n    |     ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:66:9\n+  --> $DIR/dbg_macro.rs:85:9\n    |\n LL |         dbg!(1);\n    |         ^^^^^^^\n@@ -176,5 +198,5 @@ help: remove the invocation before committing it to a version control system\n LL |         1;\n    |         ~\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 18 previous errors\n "}]}