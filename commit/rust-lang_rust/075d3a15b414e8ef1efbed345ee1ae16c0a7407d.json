{"sha": "075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NWQzYTE1YjQxNGU4ZWYxZWZiZWQzNDVlZTFhZTE2YzBhNzQwN2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-07-24T16:52:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-24T16:52:01Z"}, "message": "Rollup merge of #87403 - LeSeulArtichaut:assign-dropping-union, r=oli-obk\n\nImplement `AssignToDroppingUnionField` in THIR unsafeck\n\nr? ``@oli-obk`` cc rust-lang/project-thir-unsafeck#7", "tree": {"sha": "b1ca24290857b77b0305605f701acbfb663a874a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ca24290857b77b0305605f701acbfb663a874a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/EUxCRBK7hj4Ov3rIwAAmw0IAEW0Ssot0eokJ6jnMeU6KVxj\ncOeZwOI55pZF5YR1C9QYfdjRBqzFCW3ZpmhKszUQunJR6SV4X+WXi4INcDdW4f5D\nf6tlL7A2vHMH4wJIgR62PLYV7AqCiphwvtKangfPVWBM1l0C4WcuhrEt1BGh6OYf\nVLzmdSVAuAGRVrhmDpKuIM2lz0txjIplyLVZV67AabftCDnWe4Ctl7Zh7nUn2UiT\nN/iDg24NlzSZmqYlAtIbVJSogKYspkqZhPwEA7IEpX7Unw/aGNGPqR9Uc0jLVvkT\no1F56WlXpHDuIHMDHnzBkjayPlTZxawIES2tpt8xqMUGFTI6gIU36Kl48C7mD8g=\n=QvGh\n-----END PGP SIGNATURE-----\n", "payload": "tree b1ca24290857b77b0305605f701acbfb663a874a\nparent 5c63506bd819c9703493eb783edf5f29659d2301\nparent c5dda05e4e47f8435400c27e31f198f88147dd9e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1627145521 -0700\ncommitter GitHub <noreply@github.com> 1627145521 -0700\n\nRollup merge of #87403 - LeSeulArtichaut:assign-dropping-union, r=oli-obk\n\nImplement `AssignToDroppingUnionField` in THIR unsafeck\n\nr? ``@oli-obk`` cc rust-lang/project-thir-unsafeck#7\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "html_url": "https://github.com/rust-lang/rust/commit/075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c63506bd819c9703493eb783edf5f29659d2301", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c63506bd819c9703493eb783edf5f29659d2301", "html_url": "https://github.com/rust-lang/rust/commit/5c63506bd819c9703493eb783edf5f29659d2301"}, {"sha": "c5dda05e4e47f8435400c27e31f198f88147dd9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dda05e4e47f8435400c27e31f198f88147dd9e", "html_url": "https://github.com/rust-lang/rust/commit/c5dda05e4e47f8435400c27e31f198f88147dd9e"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "21534290d129193acd58c14935790cb5a16a7d6f", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_middle::mir::BorrowKind;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, ParamEnv, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -27,7 +27,9 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     /// The `#[target_feature]` attributes of the body. Used for checking\n     /// calls to functions with `#[target_feature]` (RFC 2396).\n     body_target_features: &'tcx Vec<Symbol>,\n-    in_possible_lhs_union_assign: bool,\n+    /// When inside the LHS of an assignment to a field, this is the type\n+    /// of the LHS and the span of the assignment expression.\n+    assignment_info: Option<(Ty<'tcx>, Span)>,\n     in_union_destructure: bool,\n     param_env: ParamEnv<'tcx>,\n     inside_adt: bool,\n@@ -287,7 +289,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &Expr<'tcx>) {\n-        // could we be in a the LHS of an assignment of a union?\n+        // could we be in the LHS of an assignment to a field?\n         match expr.kind {\n             ExprKind::Field { .. }\n             | ExprKind::VarRef { .. }\n@@ -329,7 +331,12 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             | ExprKind::InlineAsm { .. }\n             | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::LogicalOp { .. }\n-            | ExprKind::Use { .. } => self.in_possible_lhs_union_assign = false,\n+            | ExprKind::Use { .. } => {\n+                // We don't need to save the old value and restore it\n+                // because all the place expressions can't have more\n+                // than one child.\n+                self.assignment_info = None;\n+            }\n         };\n         match expr.kind {\n             ExprKind::Scope { value, lint_level: LintLevel::Explicit(hir_id), region_scope: _ } => {\n@@ -409,32 +416,42 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 self.safety_context = closure_visitor.safety_context;\n             }\n             ExprKind::Field { lhs, .. } => {\n-                // assigning to union field is okay for AccessToUnionField\n-                if let ty::Adt(adt_def, _) = &self.thir[lhs].ty.kind() {\n+                let lhs = &self.thir[lhs];\n+                if let ty::Adt(adt_def, _) = lhs.ty.kind() {\n                     if adt_def.is_union() {\n-                        if self.in_possible_lhs_union_assign {\n-                            // FIXME: trigger AssignToDroppingUnionField unsafety if needed\n+                        if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n+                            // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n+                            if !(assigned_ty\n+                                .ty_adt_def()\n+                                .map_or(false, |adt| adt.is_manually_drop())\n+                                || assigned_ty\n+                                    .is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env))\n+                            {\n+                                self.requires_unsafe(assignment_span, AssignToDroppingUnionField);\n+                            } else {\n+                                // write to non-drop union field, safe\n+                            }\n                         } else {\n                             self.requires_unsafe(expr.span, AccessToUnionField);\n                         }\n                     }\n                 }\n             }\n             ExprKind::Assign { lhs, rhs } | ExprKind::AssignOp { lhs, rhs, .. } => {\n+                let lhs = &self.thir[lhs];\n                 // First, check whether we are mutating a layout constrained field\n                 let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n-                visit::walk_expr(&mut visitor, &self.thir[lhs]);\n+                visit::walk_expr(&mut visitor, lhs);\n                 if visitor.found {\n                     self.requires_unsafe(expr.span, MutationOfLayoutConstrainedField);\n                 }\n \n                 // Second, check for accesses to union fields\n                 // don't have any special handling for AssignOp since it causes a read *and* write to lhs\n                 if matches!(expr.kind, ExprKind::Assign { .. }) {\n-                    // assigning to a union is safe, check here so it doesn't get treated as a read later\n-                    self.in_possible_lhs_union_assign = true;\n-                    visit::walk_expr(self, &self.thir()[lhs]);\n-                    self.in_possible_lhs_union_assign = false;\n+                    self.assignment_info = Some((lhs.ty, expr.span));\n+                    visit::walk_expr(self, lhs);\n+                    self.assignment_info = None;\n                     visit::walk_expr(self, &self.thir()[rhs]);\n                     return; // we have already visited everything by now\n                 }\n@@ -506,12 +523,9 @@ enum UnsafeOpKind {\n     UseOfMutableStatic,\n     UseOfExternStatic,\n     DerefOfRawPointer,\n-    #[allow(dead_code)] // FIXME\n     AssignToDroppingUnionField,\n     AccessToUnionField,\n-    #[allow(dead_code)] // FIXME\n     MutationOfLayoutConstrainedField,\n-    #[allow(dead_code)] // FIXME\n     BorrowOfLayoutConstrainedField,\n     CallToFunctionWith,\n }\n@@ -619,7 +633,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         hir_context: hir_id,\n         body_unsafety,\n         body_target_features,\n-        in_possible_lhs_union_assign: false,\n+        assignment_info: None,\n         in_union_destructure: false,\n         param_env: tcx.param_env(def.did),\n         inside_adt: false,"}, {"sha": "3cb3a18cb7544cbfdab377adba0842e91d1ecfb1", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "patch": "@@ -36,8 +36,8 @@ fn deref_union_field(mut u: URef) {\n \n fn assign_noncopy_union_field(mut u: URefCell) {\n     // FIXME(thir-unsafeck)\n-    u.a = (RefCell::new(0), 1); //[mir]~ ERROR assignment to union field that might need dropping\n-    u.a.0 = RefCell::new(0); //[mir]~ ERROR assignment to union field that might need dropping\n+    u.a = (RefCell::new(0), 1); //~ ERROR assignment to union field that might need dropping\n+    u.a.0 = RefCell::new(0); //~ ERROR assignment to union field that might need dropping\n     u.a.1 = 1; // OK\n }\n "}, {"sha": "e88642b0ff7adbc8ef7894468689e74c90d6bf92", "filename": "src/test/ui/union/union-unsafe.thir.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/075d3a15b414e8ef1efbed345ee1ae16c0a7407d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr?ref=075d3a15b414e8ef1efbed345ee1ae16c0a7407d", "patch": "@@ -6,6 +6,22 @@ LL |     *(u.p) = 13;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:39:5\n+   |\n+LL |     u.a = (RefCell::new(0), 1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n+error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:40:5\n+   |\n+LL |     u.a.0 = RefCell::new(0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+   |\n+   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:47:6\n    |\n@@ -70,6 +86,6 @@ LL |     *u3.a = String::from(\"new\");\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}