{"sha": "b1332670c7c471a59f3da113b366e74ac194c38b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzMyNjcwYzdjNDcxYTU5ZjNkYTExM2IzNjZlNzRhYzE5NGMzOGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T12:12:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T12:20:33Z"}, "message": "Rename UseItem -> Use", "tree": {"sha": "819460af798651f204d855def0c27b02ed4856fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/819460af798651f204d855def0c27b02ed4856fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1332670c7c471a59f3da113b366e74ac194c38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1332670c7c471a59f3da113b366e74ac194c38b", "html_url": "https://github.com/rust-lang/rust/commit/b1332670c7c471a59f3da113b366e74ac194c38b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1332670c7c471a59f3da113b366e74ac194c38b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e381c02ef304fdeafde1c94afd1a10c2085ab716", "url": "https://api.github.com/repos/rust-lang/rust/commits/e381c02ef304fdeafde1c94afd1a10c2085ab716", "html_url": "https://github.com/rust-lang/rust/commit/e381c02ef304fdeafde1c94afd1a10c2085ab716"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "01e7b7a44cba776197fbf55e7d7b5eed69cb5c6c", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -92,7 +92,7 @@ impl AutoImportAssets {\n \n     fn for_regular_path(path_under_caret: ast::Path, ctx: &AssistContext) -> Option<Self> {\n         let syntax_under_caret = path_under_caret.syntax().to_owned();\n-        if syntax_under_caret.ancestors().find_map(ast::UseItem::cast).is_some() {\n+        if syntax_under_caret.ancestors().find_map(ast::Use::cast).is_some() {\n             return None;\n         }\n "}, {"sha": "c775fe25c52fdfcf8f79dc01facf93d42e6273ab", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let mut rewriter = SyntaxRewriter::default();\n     let mut offset = ctx.offset();\n \n-    if let Some(use_item) = tree.syntax().parent().and_then(ast::UseItem::cast) {\n+    if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n         let (merged, to_delete) = next_prev()\n             .filter_map(|dir| neighbor(&use_item, dir))\n             .filter_map(|it| Some((it.clone(), it.use_tree()?)))"}, {"sha": "53496ede1508bd00ac4a54051de2018a16b30865", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn replace_qualified_name_with_use(\n ) -> Option<()> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n-    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n+    if path.syntax().ancestors().find_map(ast::Use::cast).is_some() {\n         return None;\n     }\n \n@@ -85,7 +85,7 @@ fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path:\n             match child {\n                 // Don't modify `use` items, as this can break the `use` item when injecting a new\n                 // import into the use tree.\n-                ast::UseItem(_it) => continue,\n+                ast::Use(_it) => continue,\n                 // Don't descend into submodules, they don't have the same `use` items in scope.\n                 ast::Module(_it) => continue,\n "}, {"sha": "617afe2e945f6b40cdb96e72e737cf810de8e273", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -225,7 +225,7 @@ fn walk_use_tree_for_best_action(\n                 current_use_tree\n                     .syntax()\n                     .ancestors()\n-                    .find_map(ast::UseItem::cast)\n+                    .find_map(ast::Use::cast)\n                     .map(|it| it.syntax().clone()),\n                 true,\n             );\n@@ -254,7 +254,7 @@ fn walk_use_tree_for_best_action(\n             current_use_tree\n                 .syntax()\n                 .ancestors()\n-                .find_map(ast::UseItem::cast)\n+                .find_map(ast::Use::cast)\n                 .map(|it| it.syntax().clone()),\n             true,\n         ),\n@@ -304,7 +304,7 @@ fn walk_use_tree_for_best_action(\n                 current_use_tree\n                     .syntax()\n                     .ancestors()\n-                    .find_map(ast::UseItem::cast)\n+                    .find_map(ast::Use::cast)\n                     .map(|it| it.syntax().clone()),\n                 true,\n             );\n@@ -377,7 +377,7 @@ fn best_action_for_target(\n     let mut storage = Vec::with_capacity(16); // this should be the only allocation\n     let best_action = container\n         .children()\n-        .filter_map(ast::UseItem::cast)\n+        .filter_map(ast::Use::cast)\n         .filter_map(|it| it.use_tree())\n         .map(|u| walk_use_tree_for_best_action(&mut storage, None, u, target))\n         .fold(None, |best, a| match best {"}, {"sha": "5c57d8bde3b9a1da1fbd9ccedbf725030137afb5", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -670,7 +670,7 @@ impl ExprCollector<'_> {\n                     }\n                     ast::Item::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n                     ast::Item::ImplDef(_)\n-                    | ast::Item::UseItem(_)\n+                    | ast::Item::Use(_)\n                     | ast::Item::ExternCrate(_)\n                     | ast::Item::Module(_)\n                     | ast::Item::MacroCall(_) => return None,"}, {"sha": "0bab9c6d8b0da8e78e81c02ca65ddd60577c7a57", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -411,7 +411,7 @@ macro_rules! mod_items {\n }\n \n mod_items! {\n-    Import in imports -> ast::UseItem,\n+    Import in imports -> ast::Use,\n     ExternCrate in extern_crates -> ast::ExternCrate,\n     Function in functions -> ast::FnDef,\n     Struct in structs -> ast::StructDef,\n@@ -482,7 +482,7 @@ pub struct Import {\n     pub is_prelude: bool,\n     /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n     /// `Import`s can map to the same `use` item.\n-    pub ast_id: FileAstId<ast::UseItem>,\n+    pub ast_id: FileAstId<ast::Use>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "8bd0362dce893edd2a0184219199ed51e177b995", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -95,7 +95,7 @@ impl Ctx {\n             ast::Item::TraitDef(_) | ast::Item::ImplDef(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n-            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::UseItem(_) => {}\n+            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::Use(_) => {}\n         };\n \n         let attrs = Attrs::new(item, &self.hygiene);\n@@ -110,7 +110,7 @@ impl Ctx {\n             ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n             ast::Item::TraitDef(ast) => self.lower_trait(ast).map(Into::into),\n             ast::Item::ImplDef(ast) => self.lower_impl(ast).map(Into::into),\n-            ast::Item::UseItem(ast) => Some(ModItems(\n+            ast::Item::Use(ast) => Some(ModItems(\n                 self.lower_use(ast).into_iter().map(Into::into).collect::<SmallVec<_>>(),\n             )),\n             ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n@@ -469,7 +469,7 @@ impl Ctx {\n         Some(id(self.data().impls.alloc(res)))\n     }\n \n-    fn lower_use(&mut self, use_item: &ast::UseItem) -> Vec<FileItemTreeId<Import>> {\n+    fn lower_use(&mut self, use_item: &ast::Use) -> Vec<FileItemTreeId<Import>> {\n         // FIXME: cfg_attr\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let visibility = self.lower_visibility(use_item);"}, {"sha": "68b9f89c375ebdfd69157271ab5f733893aa6e25", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -67,7 +67,7 @@ impl ModPath {\n \n     /// Calls `cb` with all paths, represented by this use item.\n     pub(crate) fn expand_use_item(\n-        item_src: InFile<ast::UseItem>,\n+        item_src: InFile<ast::Use>,\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<ImportAlias>),\n     ) {"}, {"sha": "cc55f6dd6babb772149f40859ee1f4095e574778", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -36,7 +36,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) expected_type: Option<Type>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n     pub(super) function_syntax: Option<ast::FnDef>,\n-    pub(super) use_item_syntax: Option<ast::UseItem>,\n+    pub(super) use_item_syntax: Option<ast::Use>,\n     pub(super) record_lit_syntax: Option<ast::RecordLit>,\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) record_field_syntax: Option<ast::RecordField>,\n@@ -343,7 +343,7 @@ impl<'a> CompletionContext<'a> {\n         }\n \n         self.use_item_syntax =\n-            self.sema.ancestors_with_macros(self.token.parent()).find_map(ast::UseItem::cast);\n+            self.sema.ancestors_with_macros(self.token.parent()).find_map(ast::Use::cast);\n \n         self.function_syntax = self\n             .sema"}, {"sha": "bad0791463d5b1a5c7308da1e7bdd134fc6ebade", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n             }\n             NodeOrToken::Node(node) => {\n                 // Fold groups of imports\n-                if node.kind() == USE_ITEM && !visited_imports.contains(&node) {\n+                if node.kind() == USE && !visited_imports.contains(&node) {\n                     if let Some(range) = contiguous_range_for_group(&node, &mut visited_imports) {\n                         res.push(Fold { range, kind: FoldKind::Imports })\n                     }\n@@ -83,7 +83,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n-        USE_ITEM => Some(FoldKind::Imports),\n+        USE => Some(FoldKind::Imports),\n         ARG_LIST | PARAM_LIST => Some(FoldKind::ArgList),\n         RECORD_FIELD_DEF_LIST\n         | RECORD_FIELD_PAT_LIST"}, {"sha": "8e836a77e1d4c27b11d39794dff9925b74b83a66", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -7,7 +7,7 @@ pub(super) fn use_item(p: &mut Parser, m: Marker) {\n     p.bump(T![use]);\n     use_tree(p, true);\n     p.expect(T![;]);\n-    m.complete(p, USE_ITEM);\n+    m.complete(p, USE);\n }\n \n /// Parse a use 'tree', such as `some::path` in `use some::path;`"}, {"sha": "4f35e0baa58b13861b5814a366b59196cda048f1", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -130,7 +130,7 @@ pub enum SyntaxKind {\n     RET_TYPE,\n     EXTERN_CRATE,\n     MODULE,\n-    USE_ITEM,\n+    USE,\n     STATIC_DEF,\n     CONST_DEF,\n     TRAIT_DEF,"}, {"sha": "213dc494fffcc5e88060cdb55b7a96b4cf61c146", "filename": "crates/ra_ssr/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fsearch.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -237,7 +237,7 @@ fn is_search_permitted(node: &SyntaxNode) -> bool {\n     // and the code is `use foo::{baz, bar}`, we'll match `bar`, since it resolves to `foo::bar`.\n     // However we'll then replace just the part we matched `bar`. We probably need to instead remove\n     // `bar` and insert a new use declaration.\n-    node.kind() != SyntaxKind::USE_ITEM\n+    node.kind() != SyntaxKind::USE\n }\n \n impl UsageCache {"}, {"sha": "6ebe10ff65eddcd2c4b1aad50e54e31003b25bee", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -262,9 +262,9 @@ impl ast::PathSegment {\n     }\n }\n \n-impl ast::UseItem {\n+impl ast::Use {\n     #[must_use]\n-    pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::UseItem {\n+    pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::Use {\n         if let Some(old) = self.use_tree() {\n             return self.replace_descendant(old, use_tree);\n         }"}, {"sha": "be657699ff53054e11a40c5b0fefd6a5dfba3020", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -213,12 +213,12 @@ impl UnionDef {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UseItem {\n+pub struct Use {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for UseItem {}\n-impl ast::VisibilityOwner for UseItem {}\n-impl UseItem {\n+impl ast::AttrsOwner for Use {}\n+impl ast::VisibilityOwner for Use {}\n+impl Use {\n     pub fn use_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![use]) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -1283,7 +1283,7 @@ pub enum Item {\n     TraitDef(TraitDef),\n     TypeAliasDef(TypeAliasDef),\n     UnionDef(UnionDef),\n-    UseItem(UseItem),\n+    Use(Use),\n }\n impl ast::AttrsOwner for Item {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1562,8 +1562,8 @@ impl AstNode for UnionDef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for UseItem {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_ITEM }\n+impl AstNode for Use {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == USE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2811,15 +2811,16 @@ impl From<TypeAliasDef> for Item {\n impl From<UnionDef> for Item {\n     fn from(node: UnionDef) -> Item { Item::UnionDef(node) }\n }\n-impl From<UseItem> for Item {\n-    fn from(node: UseItem) -> Item { Item::UseItem(node) }\n+impl From<Use> for Item {\n+    fn from(node: Use) -> Item { Item::Use(node) }\n }\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN_DEF | IMPL_DEF | MACRO_CALL\n-            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | UNION_DEF\n-            | USE_ITEM => true,\n+            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | UNION_DEF | USE => {\n+                true\n+            }\n             _ => false,\n         }\n     }\n@@ -2838,7 +2839,7 @@ impl AstNode for Item {\n             TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n             TYPE_ALIAS_DEF => Item::TypeAliasDef(TypeAliasDef { syntax }),\n             UNION_DEF => Item::UnionDef(UnionDef { syntax }),\n-            USE_ITEM => Item::UseItem(UseItem { syntax }),\n+            USE => Item::Use(Use { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -2858,7 +2859,7 @@ impl AstNode for Item {\n             Item::TraitDef(it) => &it.syntax,\n             Item::TypeAliasDef(it) => &it.syntax,\n             Item::UnionDef(it) => &it.syntax,\n-            Item::UseItem(it) => &it.syntax,\n+            Item::Use(it) => &it.syntax,\n         }\n     }\n }\n@@ -3531,7 +3532,7 @@ impl std::fmt::Display for UnionDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for UseItem {\n+impl std::fmt::Display for Use {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "0ff69bc2d1dd03fc6f0a52c2ce0427e5f9cf5f34", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -60,7 +60,7 @@ pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::\n     ast_from_text(&format!(\"use {{{}}};\", use_trees))\n }\n \n-pub fn use_item(use_tree: ast::UseTree) -> ast::UseItem {\n+pub fn use_item(use_tree: ast::UseTree) -> ast::Use {\n     ast_from_text(&format!(\"use {};\", use_tree))\n }\n "}, {"sha": "3a58217c479847357d980a80b90c9c2efeafb7db", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -100,7 +100,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RET_TYPE\",\n         \"EXTERN_CRATE\",\n         \"MODULE\",\n-        \"USE_ITEM\",\n+        \"USE\",\n         \"STATIC_DEF\",\n         \"CONST_DEF\",\n         \"TRAIT_DEF\","}, {"sha": "449b0242fb422d34eeee16cd2b4b918fd6945fdf", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1332670c7c471a59f3da113b366e74ac194c38b/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/b1332670c7c471a59f3da113b366e74ac194c38b/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=b1332670c7c471a59f3da113b366e74ac194c38b", "patch": "@@ -17,7 +17,7 @@ Item =\n | TraitDef\n | TypeAliasDef\n | UnionDef\n-| UseItem\n+| Use\n \n Module =\n   Attr* Visibility? 'mod' Name\n@@ -32,7 +32,7 @@ ExternCrate =\n Rename =\n   'as' (Name | '_')\n \n-UseItem =\n+Use =\n   Attr* Visibility? 'use' UseTree ';'\n \n UseTree ="}]}