{"sha": "a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Yjc1MTFhNmNjZjI0MWJhMmNlNmFkMGIwNGU3OWYxZTNkODU2ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-27T00:15:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-27T00:15:49Z"}, "message": "Auto merge of #86645 - FabianWolff:issue-82328, r=LeSeulArtichaut\n\nFix ICE with `-Zunpretty=hir,typed`\n\nThis PR fixes #82328. The `-Zunpretty=hir,typed` pretty-printer maintains an `Option` with type-checking results and sets the `Option` to `Some` when entering a body. However, this leads to an ICE if an expression occurs in a function signature (i.e. outside of a body), such as `128` in\n```rust\nfn foo(-128..=127: i8) {}\n```\nThis PR fixes the ICE by checking (if necessary) whether the expression's owner has a body, and retrieving type-checking results for that on the fly.", "tree": {"sha": "848a00993d06d9cefdda7a3367e60945f0f2335a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/848a00993d06d9cefdda7a3367e60945f0f2335a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "html_url": "https://github.com/rust-lang/rust/commit/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1411de9de38e0fed728874580218338160eb185", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1411de9de38e0fed728874580218338160eb185", "html_url": "https://github.com/rust-lang/rust/commit/a1411de9de38e0fed728874580218338160eb185"}, {"sha": "e8ebf98742a46aef11d382d5cbad3d9bb9098b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ebf98742a46aef11d382d5cbad3d9bb9098b19", "html_url": "https://github.com/rust-lang/rust/commit/e8ebf98742a46aef11d382d5cbad3d9bb9098b19"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "bf131914b97cfe7d043c702b1453594031148847", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "patch": "@@ -293,18 +293,6 @@ struct TypedAnnotation<'tcx> {\n     maybe_typeck_results: Cell<Option<&'tcx ty::TypeckResults<'tcx>>>,\n }\n \n-impl<'tcx> TypedAnnotation<'tcx> {\n-    /// Gets the type-checking results for the current body.\n-    /// As this will ICE if called outside bodies, only call when working with\n-    /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).\n-    #[track_caller]\n-    fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {\n-        self.maybe_typeck_results\n-            .get()\n-            .expect(\"`TypedAnnotation::typeck_results` called outside of body\")\n-    }\n-}\n-\n impl<'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'tcx> {\n     fn sess(&self) -> &Session {\n         &self.tcx.sess\n@@ -336,10 +324,20 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n     }\n     fn post(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n         if let pprust_hir::AnnNode::Expr(expr) = node {\n-            s.s.space();\n-            s.s.word(\"as\");\n-            s.s.space();\n-            s.s.word(self.typeck_results().expr_ty(expr).to_string());\n+            let typeck_results = self.maybe_typeck_results.get().or_else(|| {\n+                self.tcx\n+                    .hir()\n+                    .maybe_body_owned_by(self.tcx.hir().local_def_id_to_hir_id(expr.hir_id.owner))\n+                    .map(|body_id| self.tcx.typeck_body(body_id))\n+            });\n+\n+            if let Some(typeck_results) = typeck_results {\n+                s.s.space();\n+                s.s.word(\"as\");\n+                s.s.space();\n+                s.s.word(typeck_results.expr_ty(expr).to_string());\n+            }\n+\n             s.pclose();\n         }\n     }"}, {"sha": "6e1132a3372864b9c881ba8a6e1112ab9df3f25b", "filename": "src/test/ui/unpretty-expr-fn-arg.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.rs?ref=a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for the ICE described in #82328. The pretty-printer for\n+// `-Zunpretty=hir,typed` would previously retrieve type-checking results\n+// when entering a body, which means that type information was not available\n+// for expressions occurring in function signatures, as in the `foo` example\n+// below, leading to an ICE.\n+\n+// check-pass\n+// compile-flags: -Zunpretty=hir,typed\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+fn foo(-128..=127: i8) {}"}, {"sha": "cb04dfead73215e09a951f6c3b11ed6d93d37138", "filename": "src/test/ui/unpretty-expr-fn-arg.stdout", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty-expr-fn-arg.stdout?ref=a5b7511a6ccf241ba2ce6ad0b04e79f1e3d85686", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for the ICE described in #82328. The pretty-printer for\n+// `-Zunpretty=hir,typed` would previously retrieve type-checking results\n+// when entering a body, which means that type information was not available\n+// for expressions occurring in function signatures, as in the `foo` example\n+// below, leading to an ICE.\n+\n+// check-pass\n+// compile-flags: -Zunpretty=hir,typed\n+#![allow(dead_code)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+fn main() ({ } as ())\n+\n+fn foo((-(128 as i8) as i8) ...(127 as i8): i8) ({ } as ())"}]}