{"sha": "9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "node_id": "C_kwDOAAsO6NoAKDlkNDUyN2JjODA5OWUwZTIyZGYyYjMyZDA1NWFhZWZhNmE2ZTc1OWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T20:58:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-25T20:58:00Z"}, "message": "Rollup merge of #111757 - lowr:fix/lint-attr-on-match-arm, r=eholk\n\nConsider lint check attributes on match arms\n\nCurrently, lint check attributes on match arms have no effect for some lints. This PR makes some lint passes to take those attributes into account.\n\n- `LateContextAndPass` for late lint doesn't update `last_node_with_lint_attrs` when it visits match arms. This leads to lint check attributes on match arms taking no effects on late lints that operate on the arms' pattern:\n\n  ```rust\n  match value {\n      #[deny(non_snake_case)]\n      PAT => {} // `non_snake_case` only warned due to default lint level\n  }\n  ```\n\n  To be honest, I'm not sure whether this is intentional or just an oversight. I've dug the implementation history and searched up issues/PRs but couldn't find any discussion on this.\n\n- `MatchVisitor` doesn't update its lint level when it visits match arms. This leads to check lint attributes on match arms taking no effect on some lints handled by this visitor, namely: `bindings_with_variant_name` and `irrefutable_let_patterns`.\n\n  This seems to be a fallout from #108504. Before 05082f57afbf5d2e8fd7fb67719336d78b58e759, when the visitor operated on HIR rather than THIR, check lint attributes for the said lints were effective. [This playground][play] compiles successfully on current stable (1.69) but fails on current beta and nightly.\n\n  I wasn't sure where best to place the test for this. Let me know if there's a better place.\n\n[play]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=38432b79e535cb175f8f7d6d236d29c3\n[play-match]: https://play.rust-lang.org/?version=beta&mode=debug&edition=2021&gist=629aa71b7c84b269beadeba664e2221d", "tree": {"sha": "b06464234e75b488e44deb38f9e3c708d96de5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b06464234e75b488e44deb38f9e3c708d96de5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkb8vYCRBK7hj4Ov3rIwAA/sAIAKbqqb1Qoiaigc5X9NXLJusz\nCpPplfSuDzvQNCGnGJd9IuTgMnT0kDssq15t19Liz7FoZyGZ+zm9BGZFxoKDARL1\nu1eqPhX57ElbYHmQ2QB3+jbHrT2EGSzLhNAtFehRw1XfKPdvX3p/X3V4wdO5FOaH\nyQainK74Wdb2xHurBvq/k4ClEgUul9Ko3DloeVfLfBhvahiMQ8qBFKsalvIsSg88\nm2rQK4LFSQF5xE0K0Qh1ChcM7t3SLpSW1ZXkBy+OAtti2NR8y3WPqVL1rE81XVs9\nnqFzCW8wOQm6NQTzzjBz03lvQ5FNj9bK4HIMC0RWdPpeInZZsOCXrf4IkFRD4DE=\n=dFDm\n-----END PGP SIGNATURE-----\n", "payload": "tree b06464234e75b488e44deb38f9e3c708d96de5a8\nparent bd7e8b5ef9617d3ac7fbd79596ee1754beef3206\nparent 3a0358783695991a9a06c9c8f96906087b95e400\nauthor Michael Goulet <michael@errs.io> 1685048280 -0700\ncommitter GitHub <noreply@github.com> 1685048280 -0700\n\nRollup merge of #111757 - lowr:fix/lint-attr-on-match-arm, r=eholk\n\nConsider lint check attributes on match arms\n\nCurrently, lint check attributes on match arms have no effect for some lints. This PR makes some lint passes to take those attributes into account.\n\n- `LateContextAndPass` for late lint doesn't update `last_node_with_lint_attrs` when it visits match arms. This leads to lint check attributes on match arms taking no effects on late lints that operate on the arms' pattern:\n\n  ```rust\n  match value {\n      #[deny(non_snake_case)]\n      PAT => {} // `non_snake_case` only warned due to default lint level\n  }\n  ```\n\n  To be honest, I'm not sure whether this is intentional or just an oversight. I've dug the implementation history and searched up issues/PRs but couldn't find any discussion on this.\n\n- `MatchVisitor` doesn't update its lint level when it visits match arms. This leads to check lint attributes on match arms taking no effect on some lints handled by this visitor, namely: `bindings_with_variant_name` and `irrefutable_let_patterns`.\n\n  This seems to be a fallout from #108504. Before 05082f57afbf5d2e8fd7fb67719336d78b58e759, when the visitor operated on HIR rather than THIR, check lint attributes for the said lints were effective. [This playground][play] compiles successfully on current stable (1.69) but fails on current beta and nightly.\n\n  I wasn't sure where best to place the test for this. Let me know if there's a better place.\n\n[play]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=38432b79e535cb175f8f7d6d236d29c3\n[play-match]: https://play.rust-lang.org/?version=beta&mode=debug&edition=2021&gist=629aa71b7c84b269beadeba664e2221d\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "html_url": "https://github.com/rust-lang/rust/commit/9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7e8b5ef9617d3ac7fbd79596ee1754beef3206", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7e8b5ef9617d3ac7fbd79596ee1754beef3206", "html_url": "https://github.com/rust-lang/rust/commit/bd7e8b5ef9617d3ac7fbd79596ee1754beef3206"}, {"sha": "3a0358783695991a9a06c9c8f96906087b95e400", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0358783695991a9a06c9c8f96906087b95e400", "html_url": "https://github.com/rust-lang/rust/commit/3a0358783695991a9a06c9c8f96906087b95e400"}], "stats": {"total": 234, "additions": 170, "deletions": 64}, "files": [{"sha": "8a4a451f8a837377ff2f6fa4e9d2a442937b3541", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -240,8 +240,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {\n-        lint_callback!(self, check_arm, a);\n-        hir_visit::walk_arm(self, a);\n+        self.with_lint_attrs(a.hir_id, |cx| {\n+            lint_callback!(cx, check_arm, a);\n+            hir_visit::walk_arm(cx, a);\n+        })\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {"}, {"sha": "c11a4f7229dac4df4445d1b981580ef40ae489c7", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -90,35 +90,34 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for MatchVisitor<'a, '_, 'tcx> {\n \n     #[instrument(level = \"trace\", skip(self))]\n     fn visit_arm(&mut self, arm: &Arm<'tcx>) {\n-        match arm.guard {\n-            Some(Guard::If(expr)) => {\n-                self.with_let_source(LetSource::IfLetGuard, |this| {\n-                    this.visit_expr(&this.thir[expr])\n-                });\n-            }\n-            Some(Guard::IfLet(ref pat, expr)) => {\n-                self.with_let_source(LetSource::IfLetGuard, |this| {\n-                    this.check_let(pat, expr, LetSource::IfLetGuard, pat.span);\n-                    this.visit_pat(pat);\n-                    this.visit_expr(&this.thir[expr]);\n-                });\n+        self.with_lint_level(arm.lint_level, |this| {\n+            match arm.guard {\n+                Some(Guard::If(expr)) => {\n+                    this.with_let_source(LetSource::IfLetGuard, |this| {\n+                        this.visit_expr(&this.thir[expr])\n+                    });\n+                }\n+                Some(Guard::IfLet(ref pat, expr)) => {\n+                    this.with_let_source(LetSource::IfLetGuard, |this| {\n+                        this.check_let(pat, expr, LetSource::IfLetGuard, pat.span);\n+                        this.visit_pat(pat);\n+                        this.visit_expr(&this.thir[expr]);\n+                    });\n+                }\n+                None => {}\n             }\n-            None => {}\n-        }\n-        self.visit_pat(&arm.pattern);\n-        self.visit_expr(&self.thir[arm.body]);\n+            this.visit_pat(&arm.pattern);\n+            this.visit_expr(&self.thir[arm.body]);\n+        });\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n     fn visit_expr(&mut self, ex: &Expr<'tcx>) {\n         match ex.kind {\n             ExprKind::Scope { value, lint_level, .. } => {\n-                let old_lint_level = self.lint_level;\n-                if let LintLevel::Explicit(hir_id) = lint_level {\n-                    self.lint_level = hir_id;\n-                }\n-                self.visit_expr(&self.thir[value]);\n-                self.lint_level = old_lint_level;\n+                self.with_lint_level(lint_level, |this| {\n+                    this.visit_expr(&this.thir[value]);\n+                });\n                 return;\n             }\n             ExprKind::If { cond, then, else_opt, if_then_scope: _ } => {\n@@ -190,6 +189,17 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         self.let_source = old_let_source;\n     }\n \n+    fn with_lint_level(&mut self, new_lint_level: LintLevel, f: impl FnOnce(&mut Self)) {\n+        if let LintLevel::Explicit(hir_id) = new_lint_level {\n+            let old_lint_level = self.lint_level;\n+            self.lint_level = hir_id;\n+            f(self);\n+            self.lint_level = old_lint_level;\n+        } else {\n+            f(self);\n+        }\n+    }\n+\n     fn check_patterns(&self, pat: &Pat<'tcx>, rf: RefutableFlag) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n         check_for_bindings_named_same_as_variants(self, pat, rf);\n@@ -236,7 +246,9 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         for &arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             let arm = &self.thir.arms[arm];\n-            self.check_patterns(&arm.pattern, Refutable);\n+            self.with_lint_level(arm.lint_level, |this| {\n+                this.check_patterns(&arm.pattern, Refutable);\n+            });\n         }\n \n         let tarms: Vec<_> = arms"}, {"sha": "0c820ef9a29a9a83db048c970244f80dd3196760", "filename": "tests/ui/lint/lint-attr-everywhere-early.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-attr-everywhere-early.rs?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -134,6 +134,14 @@ fn expressions() {\n         }\n     }\n \n+    match f {\n+        #[deny(ellipsis_inclusive_range_patterns)]\n+        Match{f1: 0...100} => {}\n+        //~^ ERROR range patterns are deprecated\n+        //~| WARNING this is accepted in the current edition\n+        _ => {}\n+    }\n+\n     // Statement Block\n     {\n         #![deny(unsafe_code)]"}, {"sha": "fac0eb4faff827d315f845d69389a1d0dd642111", "filename": "tests/ui/lint/lint-attr-everywhere-early.stderr", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-attr-everywhere-early.stderr?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -384,103 +384,117 @@ note: the lint level is defined here\n LL |         #[deny(while_true)]\n    |                ^^^^^^^^^^\n \n+error: `...` range patterns are deprecated\n+  --> $DIR/lint-attr-everywhere-early.rs:139:20\n+   |\n+LL |         Match{f1: 0...100} => {}\n+   |                    ^^^ help: use `..=` for an inclusive range\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-early.rs:138:16\n+   |\n+LL |         #[deny(ellipsis_inclusive_range_patterns)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:140:9\n+  --> $DIR/lint-attr-everywhere-early.rs:148:9\n    |\n LL |         unsafe {}\n    |         ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:139:17\n+  --> $DIR/lint-attr-everywhere-early.rs:147:17\n    |\n LL |         #![deny(unsafe_code)]\n    |                 ^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:144:9\n+  --> $DIR/lint-attr-everywhere-early.rs:152:9\n    |\n LL |         unsafe {}\n    |         ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:143:16\n+  --> $DIR/lint-attr-everywhere-early.rs:151:16\n    |\n LL |         #[deny(unsafe_code)]\n    |                ^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:149:5\n+  --> $DIR/lint-attr-everywhere-early.rs:157:5\n    |\n LL |     unsafe {};\n    |     ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:148:12\n+  --> $DIR/lint-attr-everywhere-early.rs:156:12\n    |\n LL |     #[deny(unsafe_code)]\n    |            ^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:151:27\n+  --> $DIR/lint-attr-everywhere-early.rs:159:27\n    |\n LL |     [#[deny(unsafe_code)] unsafe {123}];\n    |                           ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:151:13\n+  --> $DIR/lint-attr-everywhere-early.rs:159:13\n    |\n LL |     [#[deny(unsafe_code)] unsafe {123}];\n    |             ^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:152:27\n+  --> $DIR/lint-attr-everywhere-early.rs:160:27\n    |\n LL |     (#[deny(unsafe_code)] unsafe {123},);\n    |                           ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:152:13\n+  --> $DIR/lint-attr-everywhere-early.rs:160:13\n    |\n LL |     (#[deny(unsafe_code)] unsafe {123},);\n    |             ^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:154:31\n+  --> $DIR/lint-attr-everywhere-early.rs:162:31\n    |\n LL |     call(#[deny(unsafe_code)] unsafe {123});\n    |                               ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:154:17\n+  --> $DIR/lint-attr-everywhere-early.rs:162:17\n    |\n LL |     call(#[deny(unsafe_code)] unsafe {123});\n    |                 ^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-attr-everywhere-early.rs:156:38\n+  --> $DIR/lint-attr-everywhere-early.rs:164:38\n    |\n LL |     TupleStruct(#[deny(unsafe_code)] unsafe {123});\n    |                                      ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:156:24\n+  --> $DIR/lint-attr-everywhere-early.rs:164:24\n    |\n LL |     TupleStruct(#[deny(unsafe_code)] unsafe {123});\n    |                        ^^^^^^^^^^^\n \n error: `...` range patterns are deprecated\n-  --> $DIR/lint-attr-everywhere-early.rs:167:18\n+  --> $DIR/lint-attr-everywhere-early.rs:175:18\n    |\n LL |             f1: 0...100,\n    |                  ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-early.rs:166:20\n+  --> $DIR/lint-attr-everywhere-early.rs:174:20\n    |\n LL |             #[deny(ellipsis_inclusive_range_patterns)]\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 37 previous errors\n "}, {"sha": "a24355babb63e61f26d2fb04cb04d1450dfb41fb", "filename": "tests/ui/lint/lint-attr-everywhere-late.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-attr-everywhere-late.rs?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -162,6 +162,11 @@ fn expressions() {\n         }\n     }\n \n+    match 123 {\n+        #[deny(non_snake_case)]\n+        ARM_VAR => {} //~ ERROR variable `ARM_VAR` should have a snake case name\n+    }\n+\n     // Statement Block\n     {\n         #![deny(enum_intrinsics_non_enums)]"}, {"sha": "9587556b0c150e31bc62f75b72a383b91f5588b7", "filename": "tests/ui/lint/lint-attr-everywhere-late.stderr", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-attr-everywhere-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-attr-everywhere-late.stderr?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -305,124 +305,136 @@ note: the lint level is defined here\n LL |         #[deny(enum_intrinsics_non_enums)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: variable `ARM_VAR` should have a snake case name\n+  --> $DIR/lint-attr-everywhere-late.rs:167:9\n+   |\n+LL |         ARM_VAR => {}\n+   |         ^^^^^^^ help: convert the identifier to snake case: `arm_var`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:166:16\n+   |\n+LL |         #[deny(non_snake_case)]\n+   |                ^^^^^^^^^^^^^^\n+\n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:168:9\n+  --> $DIR/lint-attr-everywhere-late.rs:173:9\n    |\n LL |         discriminant::<i32>(&123);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:168:29\n+  --> $DIR/lint-attr-everywhere-late.rs:173:29\n    |\n LL |         discriminant::<i32>(&123);\n    |                             ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:167:17\n+  --> $DIR/lint-attr-everywhere-late.rs:172:17\n    |\n LL |         #![deny(enum_intrinsics_non_enums)]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:172:9\n+  --> $DIR/lint-attr-everywhere-late.rs:177:9\n    |\n LL |         discriminant::<i32>(&123);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:172:29\n+  --> $DIR/lint-attr-everywhere-late.rs:177:29\n    |\n LL |         discriminant::<i32>(&123);\n    |                             ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:171:16\n+  --> $DIR/lint-attr-everywhere-late.rs:176:16\n    |\n LL |         #[deny(enum_intrinsics_non_enums)]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:177:5\n+  --> $DIR/lint-attr-everywhere-late.rs:182:5\n    |\n LL |     discriminant::<i32>(&123);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:177:25\n+  --> $DIR/lint-attr-everywhere-late.rs:182:25\n    |\n LL |     discriminant::<i32>(&123);\n    |                         ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:176:12\n+  --> $DIR/lint-attr-everywhere-late.rs:181:12\n    |\n LL |     #[deny(enum_intrinsics_non_enums)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:179:41\n+  --> $DIR/lint-attr-everywhere-late.rs:184:41\n    |\n LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:179:61\n+  --> $DIR/lint-attr-everywhere-late.rs:184:61\n    |\n LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n    |                                                             ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:179:13\n+  --> $DIR/lint-attr-everywhere-late.rs:184:13\n    |\n LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:180:41\n+  --> $DIR/lint-attr-everywhere-late.rs:185:41\n    |\n LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:180:61\n+  --> $DIR/lint-attr-everywhere-late.rs:185:61\n    |\n LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n    |                                                             ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:180:13\n+  --> $DIR/lint-attr-everywhere-late.rs:185:13\n    |\n LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:182:45\n+  --> $DIR/lint-attr-everywhere-late.rs:187:45\n    |\n LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:182:65\n+  --> $DIR/lint-attr-everywhere-late.rs:187:65\n    |\n LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                                                 ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:182:17\n+  --> $DIR/lint-attr-everywhere-late.rs:187:17\n    |\n LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n-  --> $DIR/lint-attr-everywhere-late.rs:184:52\n+  --> $DIR/lint-attr-everywhere-late.rs:189:52\n    |\n LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n-  --> $DIR/lint-attr-everywhere-late.rs:184:72\n+  --> $DIR/lint-attr-everywhere-late.rs:189:72\n    |\n LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                                                        ^^^^\n note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:184:24\n+  --> $DIR/lint-attr-everywhere-late.rs:189:24\n    |\n LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 32 previous errors\n "}, {"sha": "0c1146339c45fe7cd8c0ba4b5df4eb4f34753515", "filename": "tests/ui/lint/lint-match-arms-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-match-arms-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-match-arms-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-match-arms-2.rs?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -0,0 +1,24 @@\n+#![feature(if_let_guard)]\n+#![allow(unused, non_snake_case)]\n+\n+enum E {\n+    A,\n+}\n+\n+#[allow(bindings_with_variant_name, irrefutable_let_patterns)]\n+fn foo() {\n+    match E::A {\n+        #[deny(bindings_with_variant_name)]\n+        A => {}\n+    //~^ ERROR pattern binding `A` is named the same as one of the variants of the type `E`\n+    }\n+\n+    match &E::A {\n+        #[deny(irrefutable_let_patterns)]\n+        a if let b = a => {}\n+    //~^ ERROR irrefutable `if let` guard pattern\n+        _ => {}\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "062d5c12e9610f2068fb57069fa99b00518536c1", "filename": "tests/ui/lint/lint-match-arms-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-match-arms-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d4527bc8099e0e22df2b32d055aaefa6a6e759f/tests%2Fui%2Flint%2Flint-match-arms-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-match-arms-2.stderr?ref=9d4527bc8099e0e22df2b32d055aaefa6a6e759f", "patch": "@@ -0,0 +1,29 @@\n+error[E0170]: pattern binding `A` is named the same as one of the variants of the type `E`\n+  --> $DIR/lint-match-arms-2.rs:12:9\n+   |\n+LL |         A => {}\n+   |         ^ help: to match on the variant, qualify the path: `E::A`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-match-arms-2.rs:11:16\n+   |\n+LL |         #[deny(bindings_with_variant_name)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: irrefutable `if let` guard pattern\n+  --> $DIR/lint-match-arms-2.rs:18:18\n+   |\n+LL |         a if let b = a => {}\n+   |                  ^\n+   |\n+   = note: this pattern will always match, so the guard is useless\n+   = help: consider removing the guard and adding a `let` inside the match arm\n+note: the lint level is defined here\n+  --> $DIR/lint-match-arms-2.rs:17:16\n+   |\n+LL |         #[deny(irrefutable_let_patterns)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0170`."}]}