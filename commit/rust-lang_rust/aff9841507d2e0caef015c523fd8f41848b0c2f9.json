{"sha": "aff9841507d2e0caef015c523fd8f41848b0c2f9", "node_id": "C_kwDOAAsO6NoAKGFmZjk4NDE1MDdkMmUwY2FlZjAxNWM1MjNmZDhmNDE4NDhiMGMyZjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T16:33:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-27T12:53:04Z"}, "message": "remove a now-useless machine hook", "tree": {"sha": "f1f1f6a3cd650ed9d937b348e394792c1d74156c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f1f6a3cd650ed9d937b348e394792c1d74156c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff9841507d2e0caef015c523fd8f41848b0c2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff9841507d2e0caef015c523fd8f41848b0c2f9", "html_url": "https://github.com/rust-lang/rust/commit/aff9841507d2e0caef015c523fd8f41848b0c2f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff9841507d2e0caef015c523fd8f41848b0c2f9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4173e971b8c06d00b5bf9fb0133220cb37cf99da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4173e971b8c06d00b5bf9fb0133220cb37cf99da", "html_url": "https://github.com/rust-lang/rust/commit/4173e971b8c06d00b5bf9fb0133220cb37cf99da"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "6b7b1a6e336fadd403acacee7ea26ea76d3ed5d5", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=aff9841507d2e0caef015c523fd8f41848b0c2f9", "patch": "@@ -187,9 +187,6 @@ pub enum LocalValue<Prov: Provenance = AllocId> {\n \n impl<'tcx, Prov: Provenance + 'static> LocalState<'tcx, Prov> {\n     /// Read the local's value or error if the local is not yet live or not live anymore.\n-    ///\n-    /// Note: This may only be invoked from the `Machine::access_local` hook and not from\n-    /// anywhere else. You may be invalidating machine invariants if you do!\n     #[inline]\n     pub fn access(&self) -> InterpResult<'tcx, &Operand<Prov>> {\n         match &self.value {"}, {"sha": "b151d03681f43df4a89246f7bea8d052cd7d0238", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=aff9841507d2e0caef015c523fd8f41848b0c2f9", "patch": "@@ -215,23 +215,12 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         right: &ImmTy<'tcx, Self::Provenance>,\n     ) -> InterpResult<'tcx, (Scalar<Self::Provenance>, bool, Ty<'tcx>)>;\n \n-    /// Called to read the specified `local` from the `frame`.\n-    /// Since reading a ZST is not actually accessing memory or locals, this is never invoked\n-    /// for ZST reads.\n-    #[inline]\n-    fn access_local<'a>(\n-        frame: &'a Frame<'mir, 'tcx, Self::Provenance, Self::FrameExtra>,\n-        local: mir::Local,\n-    ) -> InterpResult<'tcx, &'a Operand<Self::Provenance>>\n-    where\n-        'tcx: 'mir,\n-    {\n-        frame.locals[local].access()\n-    }\n-\n     /// Called to write the specified `local` from the `frame`.\n     /// Since writing a ZST is not actually accessing memory or locals, this is never invoked\n     /// for ZST reads.\n+    ///\n+    /// Due to borrow checker trouble, we indicate the `frame` as an index rather than an `&mut\n+    /// Frame`.\n     #[inline]\n     fn access_local_mut<'a>(\n         ecx: &'a mut InterpCx<'mir, 'tcx, Self>,"}, {"sha": "91a97fe4d4dd84dec4b661abbe26f8be3e65fd20", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=aff9841507d2e0caef015c523fd8f41848b0c2f9", "patch": "@@ -444,7 +444,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Read from a local. Will not actually access the local if reading from a ZST.\n+    /// Read from a local.\n     /// Will not access memory, instead an indirect `Operand` is returned.\n     ///\n     /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an\n@@ -456,12 +456,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n         let layout = self.layout_of_local(frame, local, layout)?;\n-        let op = if layout.is_zst() {\n-            // Bypass `access_local` (helps in ConstProp)\n-            Operand::Immediate(Immediate::Uninit)\n-        } else {\n-            *M::access_local(frame, local)?\n-        };\n+        let op = *frame.locals[local].access()?;\n         Ok(OpTy { op, layout, align: Some(layout.align.abi) })\n     }\n "}, {"sha": "5ddbc60af5ce08b7d4ddce5b2fa55dae61e03a54", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9841507d2e0caef015c523fd8f41848b0c2f9/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=aff9841507d2e0caef015c523fd8f41848b0c2f9", "patch": "@@ -243,15 +243,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         throw_machine_stop_str!(\"pointer arithmetic or comparisons aren't supported in ConstProp\")\n     }\n \n-    fn access_local<'a>(\n-        frame: &'a Frame<'mir, 'tcx, Self::Provenance, Self::FrameExtra>,\n-        local: Local,\n-    ) -> InterpResult<'tcx, &'a interpret::Operand<Self::Provenance>> {\n-        let l = &frame.locals[local];\n-        // Applying restrictions here is meaningless since they can be circumvented via `force_allocation`.\n-        l.access()\n-    }\n-\n     fn access_local_mut<'a>(\n         ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n         frame: usize,"}]}