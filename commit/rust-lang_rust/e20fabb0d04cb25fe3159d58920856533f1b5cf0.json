{"sha": "e20fabb0d04cb25fe3159d58920856533f1b5cf0", "node_id": "C_kwDOAAsO6NoAKGUyMGZhYmIwZDA0Y2IyNWZlMzE1OWQ1ODkyMDg1NjUzM2YxYjVjZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-25T04:12:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-25T04:12:30Z"}, "message": "Auto merge of #98457 - japaric:gh98378, r=m-ou-se\n\nmake Condvar, Mutex, RwLock const constructors work with the `unsupported` impl\n\napplying this patch locally to the `rust-src` component fixes #98378\n\nhowever, the solution seems wrong to me because PR #97791 didn't add any `rustc_const_stable` attribute to underlying implementations like `std::sys::unix::futex`, so I must be missing something about how const-stability is checked ... maybe the `restricted_std` feature (gate?) has an effect?\n\nfixes #98378\nfixes #98293 (probably)", "tree": {"sha": "de03c67751cd45a374d9acc81832cf8c37fd019f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de03c67751cd45a374d9acc81832cf8c37fd019f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20fabb0d04cb25fe3159d58920856533f1b5cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20fabb0d04cb25fe3159d58920856533f1b5cf0", "html_url": "https://github.com/rust-lang/rust/commit/e20fabb0d04cb25fe3159d58920856533f1b5cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20fabb0d04cb25fe3159d58920856533f1b5cf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58621a4a30db1ae7fcc041e108042c1ce14d3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58621a4a30db1ae7fcc041e108042c1ce14d3bd", "html_url": "https://github.com/rust-lang/rust/commit/e58621a4a30db1ae7fcc041e108042c1ce14d3bd"}, {"sha": "513eda0f7bd1461fab01d7c26eb2ecfa364420cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/513eda0f7bd1461fab01d7c26eb2ecfa364420cd", "html_url": "https://github.com/rust-lang/rust/commit/513eda0f7bd1461fab01d7c26eb2ecfa364420cd"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "527a26a12bcecb87bb087a5be20f2d8ccc74129f", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -7,6 +7,7 @@ pub type MovableCondvar = Condvar;\n \n impl Condvar {\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> Condvar {\n         Condvar {}\n     }"}, {"sha": "87ea475c6e3eb62f80b8f106a56d00335db53d61", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -12,6 +12,7 @@ unsafe impl Sync for Mutex {} // no threads on this platform\n \n impl Mutex {\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> Mutex {\n         Mutex { locked: Cell::new(false) }\n     }"}, {"sha": "5292691b9555749b69712f580e9e08ea0b1251c5", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -12,6 +12,7 @@ unsafe impl Sync for RwLock {} // no threads on this platform\n \n impl RwLock {\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> RwLock {\n         RwLock { mode: Cell::new(0) }\n     }"}, {"sha": "8bc5b24115d1686b767dce76c9356c0ed24b2354", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -15,6 +15,7 @@ pub struct Condvar {\n impl Condvar {\n     /// Creates a new condition variable for use.\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> Self {\n         Self { inner: imp::MovableCondvar::new(), check: CondvarCheck::new() }\n     }"}, {"sha": "4ac9e62bf869568e4995979cfbeb2b7db8d7c849", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -50,6 +50,7 @@ pub struct NoCheck;\n \n #[allow(dead_code)]\n impl NoCheck {\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> Self {\n         Self\n     }"}, {"sha": "7b9f7ef54878539e3a393d13b2c2cd6c688e2659", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -61,6 +61,7 @@ unsafe impl Sync for MovableMutex {}\n impl MovableMutex {\n     /// Creates a new mutex.\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> Self {\n         Self(imp::MovableMutex::new())\n     }"}, {"sha": "042981dac60b4eb7028b1d3f546fafdc1902e0f2", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fabb0d04cb25fe3159d58920856533f1b5cf0/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=e20fabb0d04cb25fe3159d58920856533f1b5cf0", "patch": "@@ -15,6 +15,7 @@ pub struct MovableRwLock(imp::MovableRwLock);\n impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_locks\", since = \"1.63.0\")]\n     pub const fn new() -> Self {\n         Self(imp::MovableRwLock::new())\n     }"}]}