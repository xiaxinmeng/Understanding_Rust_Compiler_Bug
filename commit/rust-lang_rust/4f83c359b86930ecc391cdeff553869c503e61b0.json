{"sha": "4f83c359b86930ecc391cdeff553869c503e61b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODNjMzU5Yjg2OTMwZWNjMzkxY2RlZmY1NTM4NjljNTAzZTYxYjA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-12T08:14:23Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-12T17:58:38Z"}, "message": "Rollup merge of #45005 - leodasvacas:inline-eq-slice-into-eq, r=jseyfried\n\nInline eq_slice into str::eq\n\nIt's the only use of the function.", "tree": {"sha": "33358ed2e8bc861f9a06b451c8d92947ef2f3ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33358ed2e8bc861f9a06b451c8d92947ef2f3ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f83c359b86930ecc391cdeff553869c503e61b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlnfrU4ACgkQ/vbIBR0O\nATzBdw//VSAfzYT2mkRZnv1CAr0k3/yyudNeYhmT5dss5iyfK1bBfUOw6TOXj1AH\nWbjrzwir3SrZ8j6X8hKGkuVJVl8PHYXYRSCE7EoTNAMvrqSAdmnjSFWLTT8b0pM7\nv9AyMaIhAkUOqTuqttzZRDLlY5kBnZ9hEB8RmYymCc1jqd/gOKjNrbPoDzUvdIps\nfcP8yR2VD/lRIbQECDRqfRO/E6XdwN/oTN5GlZ/muEHkPXOhSZM3ka3wRqX+TK+S\ne1VXYOCPovCvEUGAsDrCgeMwQvyI89UDjgkaLP57ozNZKkG7haMb1DsCCkwv3Q4J\n/VxZ6kBjQjk2ziCamQ6hDiI8oqdOchYnjm5joWCtgbhcrfJ+UUBBtZamnAvCVg6t\nKRAz2jm67UmKSZH2ehrULeP9FJmYf+wFlc7PwdFKzlzoXAiYGGTq3zJfoGmMOFRF\ncXd46/KbU/JLvYVg5+hqPO6YLsagcRLAmQi8YnV30FrmgogUTRKJhRLyGD+7URVo\nNAtoLTV8WGM6B6xOEMPTKAcDzuxQ7RW8aeXoTmAr9bKeJiizldWx5F8eeGt2xL+n\nKAy5tE2UdsILlmU+PHy+V6IDwhrLs7qfv2hV5Snj9A4rJh+EVltkh00kivwqtzxS\nkzsmOSKvF54XPvJS8VcnFQ3YWLLfhtG/0XPDOIDdufLoukVWGUc=\n=8bcf\n-----END PGP SIGNATURE-----", "payload": "tree 33358ed2e8bc861f9a06b451c8d92947ef2f3ee5\nparent 445bbde7844eacb3de968e2584db2d44e6c4cbab\nparent bb74c20a5d2594cab6d9416c2ed2cc8bd45fc956\nauthor kennytm <kennytm@gmail.com> 1507796063 +0800\ncommitter kennytm <kennytm@gmail.com> 1507831118 +0800\n\nRollup merge of #45005 - leodasvacas:inline-eq-slice-into-eq, r=jseyfried\n\nInline eq_slice into str::eq\n\nIt's the only use of the function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f83c359b86930ecc391cdeff553869c503e61b0", "html_url": "https://github.com/rust-lang/rust/commit/4f83c359b86930ecc391cdeff553869c503e61b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f83c359b86930ecc391cdeff553869c503e61b0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445bbde7844eacb3de968e2584db2d44e6c4cbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/445bbde7844eacb3de968e2584db2d44e6c4cbab", "html_url": "https://github.com/rust-lang/rust/commit/445bbde7844eacb3de968e2584db2d44e6c4cbab"}, {"sha": "bb74c20a5d2594cab6d9416c2ed2cc8bd45fc956", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb74c20a5d2594cab6d9416c2ed2cc8bd45fc956", "html_url": "https://github.com/rust-lang/rust/commit/bb74c20a5d2594cab6d9416c2ed2cc8bd45fc956"}], "stats": {"total": 13, "additions": 1, "deletions": 12}, "files": [{"sha": "670c2afa66f8597ae24e597cc6dff2faceefaf6e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f83c359b86930ecc391cdeff553869c503e61b0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f83c359b86930ecc391cdeff553869c503e61b0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4f83c359b86930ecc391cdeff553869c503e61b0", "patch": "@@ -1405,16 +1405,6 @@ impl<'a> DoubleEndedIterator for LinesAny<'a> {\n #[allow(deprecated)]\n impl<'a> FusedIterator for LinesAny<'a> {}\n \n-/*\n-Section: Comparing strings\n-*/\n-\n-/// Bytewise slice equality\n-#[inline]\n-fn eq_slice(a: &str, b: &str) -> bool {\n-    a.as_bytes() == b.as_bytes()\n-}\n-\n /*\n Section: UTF-8 validation\n */\n@@ -1590,7 +1580,6 @@ mod traits {\n     use cmp::Ordering;\n     use ops;\n     use slice::{self, SliceIndex};\n-    use str::eq_slice;\n \n     /// Implements ordering of strings.\n     ///\n@@ -1611,7 +1600,7 @@ mod traits {\n     impl PartialEq for str {\n         #[inline]\n         fn eq(&self, other: &str) -> bool {\n-            eq_slice(self, other)\n+            self.as_bytes() == other.as_bytes()\n         }\n         #[inline]\n         fn ne(&self, other: &str) -> bool { !(*self).eq(other) }"}]}