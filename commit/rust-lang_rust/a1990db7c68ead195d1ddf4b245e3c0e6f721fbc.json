{"sha": "a1990db7c68ead195d1ddf4b245e3c0e6f721fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTkwZGI3YzY4ZWFkMTk1ZDFkZGY0YjI0NWUzYzBlNmY3MjFmYmM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T23:58:48Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-07T14:41:48Z"}, "message": "Remove a bunch of dead functions and make some functions private", "tree": {"sha": "5d104521da5b4321a771d82f905f9e2c90cf0b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d104521da5b4321a771d82f905f9e2c90cf0b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc", "html_url": "https://github.com/rust-lang/rust/commit/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b0c470244e612206486bb51f687ef4f6b6e117", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b0c470244e612206486bb51f687ef4f6b6e117", "html_url": "https://github.com/rust-lang/rust/commit/23b0c470244e612206486bb51f687ef4f6b6e117"}], "stats": {"total": 40, "additions": 3, "deletions": 37}, "files": [{"sha": "ddd9776e89383e485d406f8f8150d992e57483ad", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=a1990db7c68ead195d1ddf4b245e3c0e6f721fbc", "patch": "@@ -153,30 +153,6 @@ pub enum Operand<Tag = (), Id = AllocId> {\n     Indirect(MemPlace<Tag, Id>),\n }\n \n-impl<Tag> Operand<Tag> {\n-    #[inline]\n-    pub fn assert_mem_place(self) -> MemPlace<Tag>\n-    where\n-        Tag: ::std::fmt::Debug,\n-    {\n-        match self {\n-            Operand::Indirect(mplace) => mplace,\n-            _ => bug!(\"assert_mem_place: expected Operand::Indirect, got {:?}\", self),\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn assert_immediate(self) -> Immediate<Tag>\n-    where\n-        Tag: ::std::fmt::Debug,\n-    {\n-        match self {\n-            Operand::Immediate(imm) => imm,\n-            _ => bug!(\"assert_immediate: expected Operand::Immediate, got {:?}\", self),\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct OpTy<'tcx, Tag = ()> {\n     op: Operand<Tag>, // Keep this private; it helps enforce invariants."}, {"sha": "f5e8d052b21f1764cc7e94b2389e341e0859fce6", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1990db7c68ead195d1ddf4b245e3c0e6f721fbc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a1990db7c68ead195d1ddf4b245e3c0e6f721fbc", "patch": "@@ -131,13 +131,13 @@ impl<Tag> MemPlace<Tag> {\n     }\n \n     #[inline(always)]\n-    pub fn from_scalar_ptr(ptr: Scalar<Tag>, align: Align) -> Self {\n+    fn from_scalar_ptr(ptr: Scalar<Tag>, align: Align) -> Self {\n         MemPlace { ptr, align, meta: MemPlaceMeta::None }\n     }\n \n     /// Produces a Place that will error if attempted to be read from or written to\n     #[inline(always)]\n-    pub fn null(cx: &impl HasDataLayout) -> Self {\n+    fn null(cx: &impl HasDataLayout) -> Self {\n         Self::from_scalar_ptr(Scalar::ptr_null(cx), Align::from_bytes(1).unwrap())\n     }\n \n@@ -263,20 +263,10 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n impl<Tag: ::std::fmt::Debug> Place<Tag> {\n     /// Produces a Place that will error if attempted to be read from or written to\n     #[inline(always)]\n-    pub fn null(cx: &impl HasDataLayout) -> Self {\n+    fn null(cx: &impl HasDataLayout) -> Self {\n         Place::Ptr(MemPlace::null(cx))\n     }\n \n-    #[inline(always)]\n-    pub fn from_scalar_ptr(ptr: Scalar<Tag>, align: Align) -> Self {\n-        Place::Ptr(MemPlace::from_scalar_ptr(ptr, align))\n-    }\n-\n-    #[inline(always)]\n-    pub fn from_ptr(ptr: Pointer<Tag>, align: Align) -> Self {\n-        Place::Ptr(MemPlace::from_ptr(ptr, align))\n-    }\n-\n     #[inline]\n     pub fn assert_mem_place(self) -> MemPlace<Tag> {\n         match self {"}]}