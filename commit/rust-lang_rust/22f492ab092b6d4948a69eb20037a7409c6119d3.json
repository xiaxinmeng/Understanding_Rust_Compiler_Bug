{"sha": "22f492ab092b6d4948a69eb20037a7409c6119d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjQ5MmFiMDkyYjZkNDk0OGE2OWViMjAwMzdhNzQwOWM2MTE5ZDM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-19T01:57:29Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-19T01:57:56Z"}, "message": "Linked failure: add {un,}linked {un,}parented fail-{up,down} tests.", "tree": {"sha": "544aae3c2a22ff8dd88cb32586933e2c83e47912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544aae3c2a22ff8dd88cb32586933e2c83e47912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f492ab092b6d4948a69eb20037a7409c6119d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f492ab092b6d4948a69eb20037a7409c6119d3", "html_url": "https://github.com/rust-lang/rust/commit/22f492ab092b6d4948a69eb20037a7409c6119d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f492ab092b6d4948a69eb20037a7409c6119d3/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20831d394ac5488ba28cd0370d7ec03cd908fcae", "url": "https://api.github.com/repos/rust-lang/rust/commits/20831d394ac5488ba28cd0370d7ec03cd908fcae", "html_url": "https://github.com/rust-lang/rust/commit/20831d394ac5488ba28cd0370d7ec03cd908fcae"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "69ea441ecfb401e08d8649deb384cba36de75389", "filename": "src/libcore/task.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/22f492ab092b6d4948a69eb20037a7409c6119d3/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f492ab092b6d4948a69eb20037a7409c6119d3/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=22f492ab092b6d4948a69eb20037a7409c6119d3", "patch": "@@ -1153,6 +1153,83 @@ fn test_spawn_raw_unsupervise() {\n     }\n }\n \n+// The following 8 tests test the following 2^3 combinations:\n+// {un,}linked {un,}supervised failure propagation {up,down}wards.\n+\n+#[test] #[ignore(cfg(windows))]\n+fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n+    let builder = task::builder();\n+    task::unsupervise(builder);\n+    do task::run(builder) {\n+        let builder = task::builder();\n+        task::unsupervise(builder);\n+        do task::run(builder) {\n+            // Give middle task a chance to fail-but-not-kill-us.\n+            for iter::repeat(8192) { task::yield(); }\n+            comm::send(ch, ()); // If killed first, grandparent hangs.\n+        }\n+        fail; // Shouldn't kill either (grand)parent or (grand)child.\n+    }\n+    comm::recv(po);\n+}\n+#[test] #[ignore(cfg(windows))]\n+fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n+    let builder = task::builder();\n+    task::unsupervise(builder);\n+    do task::run(builder) { fail; }\n+}\n+#[test] #[ignore(cfg(windows))]\n+fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n+    let builder = task::builder();\n+    task::unsupervise(builder);\n+    task::parent(builder);\n+    do task::run(builder) { fail; }\n+    // Give child a chance to fail-but-not-kill-us.\n+    for iter::repeat(8192) { task::yield(); }\n+}\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_spawn_unlinked_sup_fail_down() {\n+    let builder = task::builder();\n+    task::unsupervise(builder);\n+    task::parent(builder);\n+    do task::run(builder) { loop { task::yield(); } }\n+    fail; // Shouldn't leave a child hanging around.\n+}\n+\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n+    let po = comm::port::<()>();\n+    let _ch = comm::chan(po);\n+    let builder = task::builder();\n+    task::parent(builder);\n+    // Unidirectional \"parenting\" shouldn't override bidirectional linked.\n+    do task::run(builder) { fail; }\n+    comm::recv(po); // We should get punted awake\n+}\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n+    let builder = task::builder();\n+    task::parent(builder);\n+    do task::run(builder) { loop { task::yield(); } }\n+    fail; // *both* mechanisms would be wrong if this didn't kill the child...\n+}\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n+    let po = comm::port::<()>();\n+    let _ch = comm::chan(po);\n+    // Default options are to spawn linked & unsupervised.\n+    do task::spawn { fail; }\n+    comm::recv(po); // We should get punted awake\n+}\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n+    // Default options are to spawn linked & unsupervised.\n+    do task::spawn { loop { task::yield(); } }\n+    fail;\n+}\n+\n #[test]\n #[ignore(cfg(windows))]\n fn test_spawn_raw_notify() {"}]}