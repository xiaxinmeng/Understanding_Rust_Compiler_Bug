{"sha": "ebfd8673a791661d9cb526d9994f2f6bbfa49348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZmQ4NjczYTc5MTY2MWQ5Y2I1MjZkOTk5NGYyZjZiYmZhNDkzNDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T01:37:57Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T11:49:22Z"}, "message": "Remove rustc_hir reexports in rustc::hir.", "tree": {"sha": "084e589725ed9868e6d208e65b63e51d43fefc27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084e589725ed9868e6d208e65b63e51d43fefc27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebfd8673a791661d9cb526d9994f2f6bbfa49348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfd8673a791661d9cb526d9994f2f6bbfa49348", "html_url": "https://github.com/rust-lang/rust/commit/ebfd8673a791661d9cb526d9994f2f6bbfa49348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebfd8673a791661d9cb526d9994f2f6bbfa49348/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c091bba51e937df166dc978ab6de647cfaac719", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c091bba51e937df166dc978ab6de647cfaac719", "html_url": "https://github.com/rust-lang/rust/commit/1c091bba51e937df166dc978ab6de647cfaac719"}], "stats": {"total": 1692, "additions": 866, "deletions": 826}, "files": [{"sha": "83b0bf308d48a1bc5e1930c3d6d0021cd21ee178", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3368,6 +3368,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3411,6 +3412,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_fs_util\",\n+ \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_index\",\n  \"rustc_llvm\",\n@@ -3439,6 +3441,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_fs_util\",\n+ \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_index\",\n  \"rustc_session\",\n@@ -3458,6 +3461,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc-demangle\",\n  \"rustc_data_structures\",\n+ \"rustc_hir\",\n  \"rustc_metadata\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -3502,6 +3506,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_hir\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n@@ -3590,6 +3595,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_fs_util\",\n+ \"rustc_hir\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"serialize\",\n@@ -3656,6 +3662,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_feature\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3707,6 +3714,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_parse\",\n  \"rustc_span\",\n@@ -3733,6 +3741,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n@@ -3781,6 +3790,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_parse\",\n  \"rustc_span\",\n@@ -3794,6 +3804,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc\",\n  \"rustc_error_codes\",\n+ \"rustc_hir\",\n  \"rustc_metadata\",\n  \"rustc_span\",\n  \"syntax\",\n@@ -3807,6 +3818,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n+ \"rustc_hir\",\n  \"rustc_span\",\n  \"rustc_typeck\",\n  \"syntax\",\n@@ -3826,6 +3838,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_expand\",\n  \"rustc_feature\",\n+ \"rustc_hir\",\n  \"rustc_metadata\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3843,6 +3856,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n+ \"rustc_hir\",\n  \"rustc_parse\",\n  \"rustc_span\",\n  \"serde_json\",\n@@ -3911,6 +3925,7 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc_data_structures\",\n+ \"rustc_hir\",\n  \"rustc_macros\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -3939,6 +3954,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "cb3fdff53a3b0ed16a2a245d6e79e3e36b1157cb", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -38,13 +38,13 @@ macro_rules! arena_types {\n             [] tables: rustc::ty::TypeckTables<$tcx>,\n             [] const_allocs: rustc::mir::interpret::Allocation,\n             [] vtable_method: Option<(\n-                rustc::hir::def_id::DefId,\n+                rustc_hir::def_id::DefId,\n                 rustc::ty::subst::SubstsRef<$tcx>\n             )>,\n-            [few, decode] mir_keys: rustc::hir::def_id::DefIdSet,\n+            [few, decode] mir_keys: rustc_hir::def_id::DefIdSet,\n             [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n             [] region_scope_tree: rustc::middle::region::ScopeTree,\n-            [] item_local_set: rustc::hir::ItemLocalSet,\n+            [] item_local_set: rustc_hir::ItemLocalSet,\n             [decode] mir_const_qualif: rustc_index::bit_set::BitSet<rustc::mir::Local>,\n             [] trait_impls_of: rustc::ty::trait_def::TraitImpls,\n             [] dropck_outlives:\n@@ -87,75 +87,75 @@ macro_rules! arena_types {\n                 >,\n             [few] crate_inherent_impls: rustc::ty::CrateInherentImpls,\n             [few] upstream_monomorphizations:\n-                rustc::hir::def_id::DefIdMap<\n+                rustc_hir::def_id::DefIdMap<\n                     rustc_data_structures::fx::FxHashMap<\n                         rustc::ty::subst::SubstsRef<'tcx>,\n-                        rustc::hir::def_id::CrateNum\n+                        rustc_hir::def_id::CrateNum\n                     >\n                 >,\n             [few] diagnostic_items: rustc_data_structures::fx::FxHashMap<\n                 rustc_span::symbol::Symbol,\n-                rustc::hir::def_id::DefId,\n+                rustc_hir::def_id::DefId,\n             >,\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n             [few] lint_levels: rustc::lint::LintLevelMap,\n             [few] stability_index: rustc::middle::stability::Index<'tcx>,\n             [few] features: rustc_feature::Features,\n-            [few] all_traits: Vec<rustc::hir::def_id::DefId>,\n+            [few] all_traits: Vec<rustc_hir::def_id::DefId>,\n             [few] privacy_access_levels: rustc::middle::privacy::AccessLevels,\n             [few] target_features_whitelist: rustc_data_structures::fx::FxHashMap<\n                 String,\n                 Option<rustc_span::symbol::Symbol>\n             >,\n             [few] wasm_import_module_map: rustc_data_structures::fx::FxHashMap<\n-                rustc::hir::def_id::DefId,\n+                rustc_hir::def_id::DefId,\n                 String\n             >,\n             [few] get_lib_features: rustc::middle::lib_features::LibFeatures,\n             [few] defined_lib_features: rustc::middle::lang_items::LanguageItems,\n-            [few] visible_parent_map: rustc::hir::def_id::DefIdMap<rustc::hir::def_id::DefId>,\n+            [few] visible_parent_map: rustc_hir::def_id::DefIdMap<rustc_hir::def_id::DefId>,\n             [few] foreign_module: rustc::middle::cstore::ForeignModule,\n             [few] foreign_modules: Vec<rustc::middle::cstore::ForeignModule>,\n-            [few] reachable_non_generics: rustc::hir::def_id::DefIdMap<\n+            [few] reachable_non_generics: rustc_hir::def_id::DefIdMap<\n                 rustc::middle::exported_symbols::SymbolExportLevel\n             >,\n             [few] crate_variances: rustc::ty::CrateVariancesMap<'tcx>,\n             [few] inferred_outlives_crate: rustc::ty::CratePredicatesMap<'tcx>,\n-            [] upvars: rustc_data_structures::fx::FxIndexMap<rustc::hir::HirId, rustc::hir::Upvar>,\n+            [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n \n             // HIR types\n             [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n-            [] arm: rustc::hir::Arm<$tcx>,\n+            [] arm: rustc_hir::Arm<$tcx>,\n             [] attribute: syntax::ast::Attribute,\n-            [] block: rustc::hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc::hir::BareFnTy<$tcx>,\n-            [few] global_asm: rustc::hir::GlobalAsm,\n-            [] generic_arg: rustc::hir::GenericArg<$tcx>,\n-            [] generic_args: rustc::hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc::hir::GenericBound<$tcx>,\n-            [] generic_param: rustc::hir::GenericParam<$tcx>,\n-            [] expr: rustc::hir::Expr<$tcx>,\n-            [] field: rustc::hir::Field<$tcx>,\n-            [] field_pat: rustc::hir::FieldPat<$tcx>,\n-            [] fn_decl: rustc::hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc::hir::ForeignItem<$tcx>,\n-            [] impl_item_ref: rustc::hir::ImplItemRef<$tcx>,\n-            [] inline_asm: rustc::hir::InlineAsm<$tcx>,\n-            [] local: rustc::hir::Local<$tcx>,\n-            [few] macro_def: rustc::hir::MacroDef<$tcx>,\n-            [] param: rustc::hir::Param<$tcx>,\n-            [] pat: rustc::hir::Pat<$tcx>,\n-            [] path: rustc::hir::Path<$tcx>,\n-            [] path_segment: rustc::hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc::hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc::hir::QPath<$tcx>,\n-            [] stmt: rustc::hir::Stmt<$tcx>,\n-            [] struct_field: rustc::hir::StructField<$tcx>,\n-            [] trait_item_ref: rustc::hir::TraitItemRef,\n-            [] ty: rustc::hir::Ty<$tcx>,\n-            [] type_binding: rustc::hir::TypeBinding<$tcx>,\n-            [] variant: rustc::hir::Variant<$tcx>,\n-            [] where_predicate: rustc::hir::WherePredicate<$tcx>,\n+            [] block: rustc_hir::Block<$tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n+            [few] global_asm: rustc_hir::GlobalAsm,\n+            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n+            [] generic_param: rustc_hir::GenericParam<$tcx>,\n+            [] expr: rustc_hir::Expr<$tcx>,\n+            [] field: rustc_hir::Field<$tcx>,\n+            [] field_pat: rustc_hir::FieldPat<$tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [] local: rustc_hir::Local<$tcx>,\n+            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n+            [] param: rustc_hir::Param<$tcx>,\n+            [] pat: rustc_hir::Pat<$tcx>,\n+            [] path: rustc_hir::Path<$tcx>,\n+            [] path_segment: rustc_hir::PathSegment<$tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n+            [] qpath: rustc_hir::QPath<$tcx>,\n+            [] stmt: rustc_hir::Stmt<$tcx>,\n+            [] struct_field: rustc_hir::StructField<$tcx>,\n+            [] trait_item_ref: rustc_hir::TraitItemRef,\n+            [] ty: rustc_hir::Ty<$tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n+            [] variant: rustc_hir::Variant<$tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "858627a1e896237401287761bbfe4b2c6111826d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -49,13 +49,10 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::map::DefPathHash;\n-use crate::hir::HirId;\n+use crate::ich::{Fingerprint, StableHashingContext};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n-\n-use crate::ich::{Fingerprint, StableHashingContext};\n use crate::traits;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -64,7 +61,10 @@ use crate::traits::query::{\n };\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::HirId;\n use rustc_span::symbol::Symbol;\n use std::fmt;\n use std::hash::Hash;"}, {"sha": "23aef0c42983049ea9055530fe545d9d98cf57a8", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,9 @@\n //! The `DepGraphSafe` trait\n \n-use crate::hir::def_id::DefId;\n-use crate::hir::BodyId;\n use crate::ty::TyCtxt;\n+\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::BodyId;\n use syntax::ast::NodeId;\n \n /// The `DepGraphSafe` trait is used to specify what kinds of values"}, {"sha": "7395b03c4eb80b688752f83e129ed2ddc7d71b90", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,15 +4,15 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir::def_id::DefId;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::hir::DUMMY_HIR_ID;\n-use crate::hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-\n use rustc_error_codes::*;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::DUMMY_HIR_ID;\n+use rustc_hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast::Attribute;"}, {"sha": "db020e39e8eda55ecddbd9999e09bbfcdaf73e7f", "filename": "src/librustc/hir/exports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fexports.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use crate::hir::def::Res;\n-use crate::hir::def_id::DefIdMap;\n use crate::ty;\n \n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::DefIdMap;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "edecfd335fbb70198733c8eab41b3cf5cb6fc2ed", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -31,10 +31,10 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use crate::hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use crate::hir::map::Map;\n-use crate::hir::*;\n \n+use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n+use rustc_hir::*;\n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident, Label, Name};\n "}, {"sha": "2cd44770b02cba6d23957fe22ff20ca3cb94f804", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -11,10 +11,10 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n-use crate::hir as ast;\n use crate::hir::intravisit::FnKind;\n use crate::hir::map;\n-use crate::hir::{Expr, FnDecl, Node};\n+use rustc_hir as ast;\n+use rustc_hir::{Expr, FnDecl, Node};\n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident};\n "}, {"sha": "6879e8fd76348b0261a4787098c273ec1893222f", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n use super::*;\n use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n-use crate::hir;\n-use crate::hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n use crate::hir::map::HirEntryMap;\n use crate::ich::Fingerprint;\n use crate::middle::cstore::CrateStore;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n@@ -268,7 +268,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node),\n                 };\n \n-                let forgot_str = if hir_id == crate::hir::DUMMY_HIR_ID {\n+                let forgot_str = if hir_id == hir::DUMMY_HIR_ID {\n                     format!(\"\\nMaybe you forgot to lower the node id {:?}?\", node_id)\n                 } else {\n                     String::new()"}, {"sha": "67d29b38db2a584b031d217e82e62eafd32a1ad9", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,12 +4,11 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-use crate::hir;\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::ich::Fingerprint;\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_session::node_id::NodeMap;\n use rustc_session::CrateDisambiguator;"}, {"sha": "63299707592033f04f0e65b83918461fd80fd9e6", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,13 @@\n-use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use crate::hir::{self, intravisit, HirId, ItemLocalId};\n+use crate::hir::intravisit;\n+use crate::hir::map::Map;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::{HirId, ItemLocalId};\n \n-pub fn check_crate(hir_map: &hir::map::Map<'_>) {\n+pub fn check_crate(hir_map: &Map<'_>) {\n     hir_map.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());\n@@ -26,19 +29,19 @@ pub fn check_crate(hir_map: &hir::map::Map<'_>) {\n }\n \n struct HirIdValidator<'a, 'hir> {\n-    hir_map: &'a hir::map::Map<'hir>,\n+    hir_map: &'a Map<'hir>,\n     owner_def_index: Option<DefIndex>,\n     hir_ids_seen: FxHashSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n struct OuterVisitor<'a, 'hir> {\n-    hir_map: &'a hir::map::Map<'hir>,\n+    hir_map: &'a Map<'hir>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n impl<'a, 'hir> OuterVisitor<'a, 'hir> {\n-    fn new_inner_visitor(&self, hir_map: &'a hir::map::Map<'hir>) -> HirIdValidator<'a, 'hir> {\n+    fn new_inner_visitor(&self, hir_map: &'a Map<'hir>) -> HirIdValidator<'a, 'hir> {\n         HirIdValidator {\n             hir_map,\n             owner_def_index: None,"}, {"sha": "0a165accb7d52df9c2d6f3c7b827ee2e245d3d71", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,15 +4,16 @@ pub use self::definitions::{\n };\n \n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use crate::hir::print::Nested;\n-use crate::hir::*;\n+use crate::hir::intravisit;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::ty::query::Providers;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::print::Nested;\n+use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;"}, {"sha": "3087fc3c1f2e6c0bd1577fdad6b8e05e9d8b1c20", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -8,8 +8,6 @@ pub mod intravisit;\n pub mod map;\n pub mod upvars;\n \n-pub use rustc_hir::*;\n-\n use crate::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "df02a79ef4cc2b0da07921125469ee0cdcaaeea3", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,12 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n-use crate::hir::def::Res;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::hir::{self, HirId};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::{self, HirId};\n use rustc_span::Span;\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "aade4c3f74c544b375ca943ba4c84a26bee4624f", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,23 +1,22 @@\n-use crate::hir;\n-use crate::hir::def_id::{DefId, DefIndex};\n use crate::hir::map::definitions::Definitions;\n use crate::hir::map::DefPathHash;\n use crate::ich::{self, CachingSourceMapView};\n use crate::middle::cstore::CrateStore;\n use crate::session::Session;\n use crate::ty::{fast_reject, TyCtxt};\n \n-use std::cmp::Ord;\n-\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, SourceFile};\n use syntax::ast;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n-use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n+use std::cmp::Ord;\n \n fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n     debug_assert!(ich::IGNORED_ATTRIBUTES.len() > 0);"}, {"sha": "8961f7cd4bc95e0abc8ecc36449ca7142d05411a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,11 @@\n //! This module contains `HashStable` implementations for various HIR data\n //! types in no particular order.\n \n-use crate::hir;\n-use crate::hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use crate::hir::map::DefPathHash;\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n-\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use std::mem;\n use syntax::attr;"}, {"sha": "e1733794b8d72a0bd8b27fe79c659e5de6185b1e", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,12 +3,11 @@\n \n use crate::ich::StableHashingContext;\n \n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_span::SourceFile;\n use syntax::ast;\n \n-use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use smallvec::SmallVec;\n \n impl<'ctx> rustc_target::HashStableContext for StableHashingContext<'ctx> {}"}, {"sha": "5d765a2a3d3e7be960da6f019291db9142ab578c", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -32,14 +32,14 @@ use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n \n-use crate::hir::def_id::DefId;\n use crate::traits::{Obligation, PredicateObligations};\n use crate::ty::error::TypeError;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, InferConst, Ty, TyCtxt};\n use crate::ty::{IntType, UintType};\n \n+use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast;\n "}, {"sha": "4a41cdb14071be957515464d722ffe2c92a71d48", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n use super::combine::{CombineFields, RelationDir};\n use super::Subtype;\n \n-use crate::hir::def_id::DefId;\n-\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::SubstsRef;\n use crate::ty::TyVar;\n use crate::ty::{self, Ty, TyCtxt};\n \n+use rustc_hir::def_id::DefId;\n+\n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx, 'tcx> {\n     fields: &'combine mut CombineFields<'infcx, 'tcx>,"}, {"sha": "e161ecfa7fa772385c1f1064b7515b333099b39a", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -49,9 +49,7 @@ use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n-use crate::hir::Node;\n+use crate::hir::map;\n use crate::infer::opaque_types;\n use crate::infer::{self, SuppressRegionErrors};\n use crate::middle::region;\n@@ -64,6 +62,9 @@ use crate::ty::{\n     subst::{Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::Node;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_error_codes::*;\n@@ -455,7 +456,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         terr: &TypeError<'tcx>,\n     ) {\n         use hir::def_id::CrateNum;\n-        use hir::map::DisambiguatedDefPathData;\n+        use map::DisambiguatedDefPathData;\n         use ty::print::Printer;\n         use ty::subst::GenericArg;\n \n@@ -851,7 +852,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         sig2: &ty::PolyFnSig<'tcx>,\n     ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n         let get_lifetimes = |sig| {\n-            use crate::hir::def::Namespace;\n+            use rustc_hir::def::Namespace;\n             let mut s = String::new();\n             let (_, (sig, reg)) = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS)\n                 .name_all_regions(sig)"}, {"sha": "091bfba7ca677ff0e9fbc805362243dde512402a", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,13 @@\n-use crate::hir::def::{DefKind, Namespace};\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::hir::{self, Body, Expr, ExprKind, FunctionRetTy, HirId, Local, Pat};\n+use crate::hir::map::Map;\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use crate::ty::print::Print;\n use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n use errors::{Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::{Body, Expr, ExprKind, FunctionRetTy, HirId, Local, Pat};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n@@ -16,7 +18,7 @@ use rustc_error_codes::*;\n struct FindLocalByTypeVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     target_ty: Ty<'tcx>,\n-    hir_map: &'a hir::map::Map<'tcx>,\n+    hir_map: &'a Map<'tcx>,\n     found_local_pattern: Option<&'tcx Pat<'tcx>>,\n     found_arg_pattern: Option<&'tcx Pat<'tcx>>,\n     found_ty: Option<Ty<'tcx>>,\n@@ -25,11 +27,7 @@ struct FindLocalByTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n-    fn new(\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n-        target_ty: Ty<'tcx>,\n-        hir_map: &'a hir::map::Map<'tcx>,\n-    ) -> Self {\n+    fn new(infcx: &'a InferCtxt<'a, 'tcx>, target_ty: Ty<'tcx>, hir_map: &'a Map<'tcx>) -> Self {\n         Self {\n             infcx,\n             target_ty,"}, {"sha": "6edf8f1e78755f9274a52c77a9c489eda2a0a0ca", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::hir::Node;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::middle::resolve_lifetime as rl;\n use crate::ty::{self, Region, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::Node;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// This function calls the `visit_ty` method for the parameters"}, {"sha": "0d56fc57230e3958bd2b64f3bc42b671c867430f", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n-use crate::hir::{FunctionRetTy, TyKind};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty;\n use errors::{Applicability, DiagnosticBuilder};\n+use rustc_hir::{FunctionRetTy, TyKind};\n \n use rustc_error_codes::*;\n "}, {"sha": "af0e5ef8005af6622dc88953a2fb6b6e60566d5f", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,12 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n-use crate::hir::Node;\n-use crate::hir::{Expr, ExprKind::Closure};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n use crate::infer::SubregionOrigin;\n use crate::ty::RegionKind;\n use crate::util::common::ErrorReported;\n+use rustc_hir::{Expr, ExprKind::Closure, Node};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when binding escapes a closure."}, {"sha": "f276dab5000bc20a0c6ad75d35d1f35f702b2ae4", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,5 +1,3 @@\n-use crate::hir::def::Namespace;\n-use crate::hir::def_id::DefId;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::ValuePairs;\n@@ -10,6 +8,8 @@ use crate::ty::print::{FmtPrinter, Print, RegionHighlightMode};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, TyCtxt};\n use errors::DiagnosticBuilder;\n+use rustc_hir::def::Namespace;\n+use rustc_hir::def_id::DefId;\n \n use std::fmt::{self, Write};\n "}, {"sha": "52ccb1454ee2b9af4705652dcc47d492eaa3e4c0", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n //! Helper functions corresponding to lifetime errors due to\n //! anonymous regions.\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty::{self, DefIdTree, Region, Ty};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n \n // The struct contains the information about the anonymous region"}, {"sha": "a930e707c5c15ff4543012d93c3a10fe1aa9ad51", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,13 +9,13 @@\n use graphviz as dot;\n \n use super::Constraint;\n-use crate::hir::def_id::DefIndex;\n use crate::infer::region_constraints::RegionConstraintData;\n use crate::infer::SubregionOrigin;\n use crate::middle::free_region::RegionRelations;\n use crate::middle::region;\n use crate::ty;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::DefIndex;\n \n use std::borrow::Cow;\n use std::collections::btree_map::BTreeMap;"}, {"sha": "e78382c0a3234286f4ab29dc289702b2971e81c9", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,5 @@\n //! Lexical region resolution.\n \n-use crate::hir::def_id::DefId;\n use crate::infer::region_constraints::Constraint;\n use crate::infer::region_constraints::GenericKind;\n use crate::infer::region_constraints::MemberConstraint;\n@@ -19,6 +18,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;"}, {"sha": "4eb8d79a067ef78ece7409f52fd35d70289330ef", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,8 +7,6 @@ pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n pub use crate::ty::IntVarValue;\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::infer::canonical::{Canonical, CanonicalVarValues};\n use crate::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use crate::middle::free_region::RegionRelations;\n@@ -27,6 +25,8 @@ use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use std::cell::{Cell, Ref, RefCell, RefMut};"}, {"sha": "e9b1ebbd3f643a8a778652808d80423ea177d9d8", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,3 @@\n-use crate::hir;\n-use crate::hir::def_id::{DefId, DefIdMap};\n-use crate::hir::Node;\n use crate::infer::outlives::free_region_map::FreeRegionRelations;\n use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin, TypeVariableOriginKind};\n use crate::middle::region;\n@@ -12,6 +9,9 @@ use errors::DiagnosticBuilder;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, DefIdMap};\n+use rustc_hir::Node;\n use rustc_span::Span;\n \n use rustc_error_codes::*;"}, {"sha": "130cffe5022872b3d3675bbb95b23c427da1d3db", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir;\n use crate::infer::outlives::free_region_map::FreeRegionMap;\n use crate::infer::{GenericKind, InferCtxt};\n use crate::traits::query::outlives_bounds::{self, OutlivesBound};\n use crate::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n use rustc_span::Span;\n \n /// The `OutlivesEnvironment` collects information about what outlives"}, {"sha": "45e4a84589eb5b2a273cbbae0cbc429402246409", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -59,7 +59,6 @@\n //! might later infer `?U` to something like `&'b u32`, which would\n //! imply that `'b: 'a`.\n \n-use crate::hir;\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::outlives::verify::VerifyBoundCx;\n use crate::infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n@@ -68,6 +67,7 @@ use crate::ty::outlives::Component;\n use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// Registers that the given region obligation must be resolved"}, {"sha": "0380d0e35e78d196df30642f3be4297a14bce976", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n-use crate::hir::def_id::DefId;\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::{GenericKind, VerifyBound};\n use crate::traits;\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, Ty, TyCtxt};\n use crate::util::captures::Captures;\n+use rustc_hir::def_id::DefId;\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n /// obligation into a series of `'a: 'b` constraints and \"verifys\", as"}, {"sha": "f218bf1134f7fd0017b642903f59a2b1c3c778c8", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,14 +6,14 @@ use self::UndoLog::*;\n use super::unify_key;\n use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n \n-use crate::hir::def_id::DefId;\n use crate::ty::ReStatic;\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::{ReLateBound, ReVar};\n use crate::ty::{Region, RegionVid};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n "}, {"sha": "089c6dd723bce05b46263fbd4ac68c707f65f24b", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,5 +1,5 @@\n-use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, TyVid};\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n "}, {"sha": "0ac682428d632e81343769032a3365dc0bd4bd51", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -16,8 +16,6 @@\n \n use self::TargetLint::*;\n \n-use crate::hir;\n-use crate::hir::def_id::{CrateNum, DefId};\n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n@@ -30,6 +28,8 @@ use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_span::{symbol::Symbol, MultiSpan, Span};\n use std::slice;\n use syntax::ast;"}, {"sha": "69f212a9a3098ffd465d4f19cc39e3b32992274c", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,12 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::declare_tool_lint;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{Ident, Item, ItemKind};"}, {"sha": "78d01ff4fedfc28c9997c6015493a44230e4a51d", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,5 @@\n use std::cmp;\n \n-use crate::hir::HirId;\n use crate::ich::StableHashingContext;\n use crate::lint::builtin;\n use crate::lint::context::{CheckLintNameResult, LintStore};\n@@ -9,6 +8,7 @@ use crate::session::Session;\n use errors::{Applicability, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::HirId;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;"}, {"sha": "2147ff1a2459209f4db64262570a50ffb1fa44a3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -23,10 +23,10 @@ pub use self::LintSource::*;\n \n use rustc_data_structures::sync;\n \n-use crate::hir;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_hir as hir;\n use rustc_session::node_id::NodeMap;\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -109,13 +109,13 @@ macro_rules! late_lint_methods {\n             fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n             fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n             fn check_fn(\n-                a: hir::intravisit::FnKind<$hir>,\n+                a: $crate::hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n             fn check_fn_post(\n-                a: hir::intravisit::FnKind<$hir>,\n+                a: $crate::hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,"}, {"sha": "ee43c35c1d05b9f70e56a5e706dbf8e39b37ab9d", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,15 +2,15 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use crate::hir::map as hir_map;\n use crate::hir::map::definitions::{DefKey, DefPathTable};\n use crate::session::search_paths::PathKind;\n use crate::session::{CrateDisambiguator, Session};\n use crate::ty::{self, TyCtxt};\n-use rustc_data_structures::svh::Svh;\n \n+use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_macros::HashStable;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;"}, {"sha": "e4af54f7771eaba259de388417e3670830592b40", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::ich::StableHashingContext;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use std::cmp;\n use std::mem;\n "}, {"sha": "253e00f9e4db55faa0c80f899746021c8ca69bfb", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,10 +3,10 @@\n //! or explicit bounds. In that case, we track the bounds using the `TransitiveRelation` type,\n //! and use that to decide when one free region outlives another, and so forth.\n \n-use crate::hir::def_id::DefId;\n use crate::infer::outlives::free_region_map::{FreeRegionMap, FreeRegionRelations};\n use crate::middle::region;\n use crate::ty::{self, Region, TyCtxt};\n+use rustc_hir::def_id::DefId;\n \n /// Combines a `region::ScopeTree` (which governs relationships between\n /// scopes) and a `FreeRegionMap` (which governs relationships between"}, {"sha": "220560a67e08842afb3d47e46362533a3e8b1dce", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,15 +9,15 @@\n \n pub use self::LangItem::*;\n \n-use crate::hir;\n use crate::hir::check_attr::Target;\n-use crate::hir::def_id::DefId;\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n use crate::middle::cstore::ExternCrate;\n use crate::middle::weak_lang_items;\n use crate::ty::{self, TyCtxt};\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;"}, {"sha": "4756e83b5e9805982b096ea134d47449a5c2cc2d", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,10 +2,9 @@\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n \n-use crate::hir::def_id::DefIdSet;\n-use crate::hir::HirId;\n-\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::DefIdSet;\n+use rustc_hir::HirId;\n use rustc_macros::HashStable;\n use std::fmt;\n use std::hash::Hash;"}, {"sha": "b2a5efca92df33eb78e2bbfdb8e97b6f70454a67", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,11 +6,11 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n-use crate::hir::Node;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{self, DefIdTree, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::Node;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "c21ba1b3bd2db7342785dbf8c0271dd43e60fe3b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n //! Name resolution for lifetimes: type declarations.\n \n-use crate::hir::def_id::{DefId, LocalDefId};\n-use crate::hir::{GenericParam, ItemLocalId};\n-use crate::hir::{GenericParamKind, LifetimeParamKind};\n use crate::ty;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::{GenericParam, ItemLocalId};\n+use rustc_hir::{GenericParamKind, LifetimeParamKind};\n use rustc_macros::HashStable;\n \n /// The origin of a named lifetime definition."}, {"sha": "a29b1b48c24f937c787f841ba93b25cacb1bcfe0", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,17 +3,17 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::hir::def::DefKind;\n-use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n-use crate::hir::{self, HirId};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n-\n use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::GateIssue;\n+use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n+use rustc_hir::{self, HirId};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;"}, {"sha": "8e6ac165fab17287dae7e413997cd8099c297d21", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,12 +3,12 @@\n use crate::middle::lang_items;\n use crate::session::config;\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::hir::intravisit;\n use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::PanicStrategy;"}, {"sha": "f54b9231d1acf1b816ccfef8794d526dc889220e", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,5 @@\n use super::{CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n \n-use crate::hir;\n use crate::hir::map::definitions::DefPathData;\n use crate::mir;\n use crate::ty::layout::{Align, LayoutError, Size};\n@@ -10,6 +9,7 @@ use crate::ty::{self, layout, Ty};\n use backtrace::Backtrace;\n use errors::DiagnosticBuilder;\n use hir::GeneratorKind;\n+use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Pos, Span};"}, {"sha": "99113d6ef1836ae31b2cf40eec301df95c00ae8d", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -115,7 +115,6 @@ pub use self::allocation::{Allocation, AllocationExtra, Relocations, UndefMask};\n \n pub use self::pointer::{CheckInAllocMsg, Pointer, PointerArithmetic};\n \n-use crate::hir::def_id::DefId;\n use crate::mir;\n use crate::ty::codec::TyDecoder;\n use crate::ty::layout::{self, Size};\n@@ -125,6 +124,7 @@ use byteorder::{BigEndian, LittleEndian, ReadBytesExt, WriteBytesExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock};\n use rustc_data_structures::tiny_list::TinyList;\n+use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{Decodable, Encodable, Encoder};\n use std::fmt;"}, {"sha": "161c9a3fcc1f7ea558a973bfe424911684d5d2cf", "filename": "src/librustc/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n use super::{ConstEvalResult, ErrorHandled, GlobalId};\n \n-use crate::hir::def_id::DefId;\n use crate::mir;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::{self, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n \n impl<'tcx> TyCtxt<'tcx> {"}, {"sha": "ff64302b1e506a13bc8d69c47f0600239941223a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,9 +4,6 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n \n-use crate::hir::def::{CtorKind, Namespace};\n-use crate::hir::def_id::DefId;\n-use crate::hir::{self, GeneratorKind};\n use crate::mir::interpret::{GlobalAlloc, PanicInfo, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n@@ -17,6 +14,10 @@ use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, List, Region, Ty, TyCtxt, UserTypeAnnotationIndex,\n };\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, Namespace};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{self, GeneratorKind};\n \n use polonius_engine::Atom;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "51ce575e51f3b61aaec5fdd72cfc51d831a1abab", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n-use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use crate::hir::HirId;\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use crate::session::config::OptLevel;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::HirId;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use std::fmt;"}, {"sha": "77f3ff47ff2475946a7a4a1a324fc06a0ea5b70f", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,12 +3,12 @@\n  * building is complete.\n  */\n \n-use crate::hir;\n use crate::mir::*;\n use crate::ty::layout::VariantIdx;\n use crate::ty::subst::Subst;\n use crate::ty::util::IntTypeExt;\n use crate::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n \n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct PlaceTy<'tcx> {"}, {"sha": "4a2ec9b9687f39590be5ca7f104a3dc85b7efe0b", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,5 +1,4 @@\n use crate::dep_graph::{DepKind, DepNode, RecoverKey, SerializedDepNodeIndex};\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n use crate::traits;\n@@ -12,6 +11,7 @@ use crate::ty::query::queries;\n use crate::ty::query::QueryDescription;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex};\n \n use rustc_span::symbol::Symbol;\n use std::borrow::Cow;"}, {"sha": "db7cda3b95bb2fb2c52b81b789be9a21131f1c32", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,14 +4,14 @@\n //! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n //! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::infer::{CombinedSnapshot, InferOk};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::IntercrateMode;\n use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionContext};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::Subst;\n use crate::ty::{self, Ty, TyCtxt};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n "}, {"sha": "5b804480119fe189c6c5b84550fd460351f0e036", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use crate::hir::def_id::DefId;\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n use crate::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc_hir::def_id::DefId;\n \n use super::{ChalkFulfillmentContext, FulfillmentContext, FulfillmentError};\n use super::{ObligationCause, PredicateObligation};"}, {"sha": "238371ee7747d838f60890b88abd1429305af9c4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,9 +6,6 @@ use super::{\n     TraitNotObjectSafe,\n };\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n-use crate::hir::Node;\n use crate::infer::error_reporting::TypeAnnotationNeeded as ErrorCode;\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt};\n@@ -21,10 +18,11 @@ use crate::ty::GenericParamDefKind;\n use crate::ty::SubtypePredicate;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n-\n use errors::{pluralize, Applicability, DiagnosticBuilder, Style};\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::Node;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};"}, {"sha": "3ba673d1a7d499c59d21cbdc25e7c7aed3dbdfc4", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -19,8 +19,6 @@ mod specialize;\n mod structural_impls;\n mod util;\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{InferCtxt, SuppressRegionErrors};\n use crate::middle::region;\n@@ -31,6 +29,8 @@ use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::{self, AdtKind, GenericParamDefKind, List, ToPredicate, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n use chalk_engine;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast;"}, {"sha": "836e67cff8b2caba51f10d4c65c4f6496408c2ad", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -10,12 +10,12 @@\n \n use super::elaborate_predicates;\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::lint;\n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;"}, {"sha": "92984b48ae938479f823424d5371465624f5de67", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,9 @@\n use fmt_macros::{Parser, Piece, Position};\n \n-use crate::hir::def_id::DefId;\n use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n-\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{MetaItem, NestedMetaItem};"}, {"sha": "22bfba37443fd2f111ab3f6890dfb65a84dcaa8b", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,14 +12,14 @@ use super::SelectionContext;\n use super::SelectionError;\n use super::{VtableClosureData, VtableFnPointerData, VtableGeneratorData, VtableImplData};\n \n-use crate::hir::def_id::DefId;\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n use crate::util::common::FN_OUTPUT_NAME;\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n+use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;"}, {"sha": "07e57e847b13d262b726e569b8e5ef71eba9d766", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir;\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::query::NoSolution;\n use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n use crate::ty::{self, Ty};\n+use rustc_hir as hir;\n use rustc_span::source_map::Span;\n \n use crate::ich::StableHashingContext;"}, {"sha": "46b656eb945481f7fa256c6fffac7b6b99886a0a", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n-use crate::hir::def_id::DefId;\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::subst::UserSubsts;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n+use rustc_hir::def_id::DefId;\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n pub struct AscribeUserType<'tcx> {"}, {"sha": "94d5723778a9a0791727f2345998b45ebeb553ff", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -30,17 +30,17 @@ use super::{\n };\n \n use crate::dep_graph::{DepKind, DepNodeIndex};\n-use crate::hir::def_id::DefId;\n use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, PlaceholderMap, TypeFreshener};\n use crate::middle::lang_items;\n use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir::def_id::DefId;\n \n-use crate::hir;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lock;\n+use rustc_hir as hir;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;"}, {"sha": "520cd3e38520a1a9f541080d36c8995fcc26fd25", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -11,14 +11,14 @@\n \n pub mod specialization_graph;\n \n-use crate::hir::def_id::DefId;\n use crate::infer::{InferCtxt, InferOk};\n use crate::lint;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n \n use super::util::impl_trait_ref_and_oblig;"}, {"sha": "c176f139bf86826cc41d7a28258d19414e236cf1", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,12 @@\n use super::OverlapError;\n \n-use crate::hir::def_id::{DefId, DefIdMap};\n use crate::ich::{self, StableHashingContext};\n use crate::traits;\n use crate::ty::fast_reject::{self, SimplifiedType};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::{DefId, DefIdMap};\n use syntax::ast::Ident;\n \n /// A per-trait graph of impls in specialization order. At the moment, this"}, {"sha": "14cfe7cda4e282d86ecd517afa44986adf24d784", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,12 +2,12 @@ use errors::DiagnosticBuilder;\n use rustc_span::Span;\n use smallvec::SmallVec;\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::ty::outlives::Component;\n use crate::ty::subst::{GenericArg, Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n "}, {"sha": "ebefb03b813f207e0593f2b69bf92c9d831b44b8", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "5ee8811509098e40a885025d38319784620ed7c5", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n-use crate::hir::BindingAnnotation;\n-use crate::hir::BindingAnnotation::*;\n-use crate::hir::Mutability;\n+use rustc_hir::BindingAnnotation;\n+use rustc_hir::BindingAnnotation::*;\n+use rustc_hir::Mutability;\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable)]\n pub enum BindingMode {"}, {"sha": "9b2714082f1e1735e0d7b58c2759103f99f5cfa0", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,12 +7,12 @@\n // persisting to incr. comp. caches.\n \n use crate::arena::ArenaAllocatable;\n-use crate::hir::def_id::{CrateNum, DefId};\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use crate::mir::{self, interpret::Allocation};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, List, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n use rustc_span::Span;\n use std::hash::Hash;\n@@ -353,7 +353,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty;\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::SubstsRef;\n-            use $crate::hir::def_id::{CrateNum};\n+            use rustc_hir::def_id::{CrateNum};\n \n             use rustc_span::Span;\n "}, {"sha": "cc5131cb217954b3558c91eb5e01bf71c413fc0c", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::hir::map::blocks::FnLikeNode;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;"}, {"sha": "a2e5edb67fc675a657b9dcbe8e8af4b54655a332", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,13 +3,9 @@\n use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor, DepNode};\n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n use crate::hir::map::DefPathHash;\n-use crate::hir::{self, HirId, Node, TraitCandidate};\n-use crate::hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::infer::outlives::free_region_map::FreeRegionMap;\n@@ -48,6 +44,11 @@ use crate::ty::{ExistentialPredicate, InferTy, ParamTy, PolyFnSig, Predicate, Pr\n use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use crate::util::common::ErrorReported;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n+use rustc_hir::{HirId, Node, TraitCandidate};\n+use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n \n use arena::SyncDroplessArena;\n use errors::DiagnosticBuilder;"}, {"sha": "25fc484cd530150b9b94ef1139a3680affdc6275", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use errors::{Applicability, DiagnosticBuilder};\n use rustc_span::Span;"}, {"sha": "5aa8bd9df2aef044bcd457d309cb77d2cba11b39", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use crate::hir::def_id::DefId;\n use crate::ich::StableHashingContext;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;"}, {"sha": "b16db6ae5b18d0e321f37f9a378d6fc0c569c3e3", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -31,8 +31,8 @@\n //! These methods return true to indicate that the visitor has found what it is\n //! looking for, and does not need to visit anything else.\n \n-use crate::hir::def_id::DefId;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n+use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n use std::collections::BTreeMap;"}, {"sha": "14ead77653c32d696a60e3e06311d29896936c97", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n use crate::ty::context::TyCtxt;\n use crate::ty::{DefId, DefIdTree};\n-use rustc::hir::CRATE_HIR_ID;\n+use rustc_hir::CRATE_HIR_ID;\n use smallvec::SmallVec;\n use std::mem;\n "}, {"sha": "423fc274ade1dac8c98ca589938fb0201e638d18", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n-use crate::hir::def::Namespace;\n-use crate::hir::def_id::DefId;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::middle::lang_items::DropInPlaceFnLangItem;\n use crate::traits;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir::def::Namespace;\n+use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_target::spec::abi::Abi;\n "}, {"sha": "663de36e8397d7c4a98936d325b488bd65d92e00", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,11 +12,11 @@ use std::iter;\n use std::mem;\n use std::ops::Bound;\n \n-use crate::hir;\n use crate::ich::StableHashingContext;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n "}, {"sha": "1698a0685b7aadc7f82937c2408e774ba3191a19", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,11 +6,9 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n-use crate::hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use crate::hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir::exports::ExportMap;\n-use crate::hir::Node;\n-use crate::hir::{map as hir_map, GlobMap, TraitMap};\n+use crate::hir::map as hir_map;\n+\n use crate::ich::Fingerprint;\n use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n@@ -31,16 +29,23 @@ use crate::ty::walk::TypeWalker;\n use crate::util::captures::Captures;\n use arena::SyncDroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n-use rustc_macros::HashStable;\n-use rustc_session::node_id::{NodeMap, NodeSet};\n-\n use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::{GlobMap, Node, TraitMap};\n+use rustc_index::vec::{Idx, IndexVec};\n+use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n+use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n+use smallvec;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -52,13 +57,6 @@ use std::{mem, ptr};\n use syntax::ast::{self, Ident, Name, NodeId};\n use syntax::attr;\n \n-use rustc_data_structures::fx::FxIndexMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_index::vec::{Idx, IndexVec};\n-use smallvec;\n-\n-use crate::hir;\n-\n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n pub use self::sty::RegionKind;\n@@ -3313,7 +3311,7 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n \n     let node = tcx.hir().get(hir_id);\n \n-    let fn_like = hir::map::blocks::FnLikeNode::from_node(node).unwrap_or_else(|| {\n+    let fn_like = hir_map::blocks::FnLikeNode::from_node(node).unwrap_or_else(|| {\n         bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n     });\n "}, {"sha": "3ade9661917a25efbe0764401c068e0660426e0c", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use crate::hir::def_id::{CrateNum, DefId};\n use crate::hir::map::{DefPathData, DisambiguatedDefPathData};\n use crate::ty::subst::{GenericArg, Subst};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::{CrateNum, DefId};\n \n // `pretty` is a separate module only for organization.\n mod pretty;"}, {"sha": "618c23ecc6e8a1307bd73fd2feac8ab04fe99192", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,10 +5,11 @@\n //! Note: A lot of this could looks very similar to what's already in `ty::print`.\n //! FIXME(eddyb) implement a custom `PrettyPrinter` for this.\n \n-use rustc::hir::def_id::DefId;\n+use rustc::bug;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Const, Instance, Ty, TyCtxt};\n-use rustc::{bug, hir};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use std::fmt::Write;\n use std::iter;\n "}, {"sha": "b3fb455feb5dadf805675ee68c56d765299cf65f", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n-use crate::hir;\n-use crate::hir::def::{DefKind, Namespace};\n-use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir::map::{DefPathData, DisambiguatedDefPathData};\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n use crate::mir::interpret::{sign_extend, truncate, ConstValue, Scalar};\n use crate::ty::layout::{Integer, IntegerExt, Size};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Namespace};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;"}, {"sha": "c77cf8c41be9a84652f57923cb7506319179b1df", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,12 @@\n use crate::dep_graph::SerializedDepNodeIndex;\n use crate::dep_graph::{DepKind, DepNode};\n-use crate::hir::def_id::{CrateNum, DefId};\n use crate::ty::query::plumbing::CycleError;\n use crate::ty::query::queries;\n use crate::ty::query::QueryCache;\n use crate::ty::query::{Query, QueryName};\n use crate::ty::TyCtxt;\n use rustc_data_structures::profiling::ProfileCategory;\n+use rustc_hir::def_id::{CrateNum, DefId};\n \n use crate::ich::StableHashingContext;\n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "8a713e3b6a096eab6d25a88f3a4baafab793886b", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,12 @@\n //! Defines the set of legal keys that can be used in queries.\n \n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use crate::infer::canonical::Canonical;\n use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n-\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "b163d23e2394bc53588b5e19e8f989406ffe1af6", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,5 @@\n use crate::dep_graph::{self, DepNode};\n-use crate::hir::def::DefKind;\n-use crate::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n use crate::hir::exports::Export;\n-use crate::hir::{self, HirIdSet, ItemLocalId, TraitCandidate};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -38,13 +35,16 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::util::NeedsDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n-use rustc_data_structures::profiling::ProfileCategory::*;\n-\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::profiling::ProfileCategory::*;\n use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n+use rustc_hir::{HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::PanicStrategy;\n "}, {"sha": "d01927b91b9544be80b30ae88204b8b3fb4d9069", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,4 @@\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n-use crate::hir;\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::definitions::DefPathHash;\n use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n@@ -9,11 +7,12 @@ use crate::session::{CrateDisambiguator, Session};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n-\n use errors::Diagnostic;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::{\n     opaque, Decodable, Decoder, Encodable, Encoder, SpecializedDecoder, SpecializedEncoder,"}, {"sha": "9472281b56fecf144ca8b4672db86eb4d398cf2b", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,13 +4,13 @@\n //! types or regions but can be other things. Examples of type relations are\n //! subtyping, type equality, etc.\n \n-use crate::hir as ast;\n-use crate::hir::def_id::DefId;\n use crate::mir::interpret::{get_slice_bytes, ConstValue};\n use crate::traits;\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir as ast;\n+use rustc_hir::def_id::DefId;\n use rustc_target::spec::abi;\n use std::iter;\n use std::rc::Rc;"}, {"sha": "d87296c03dd2fb96c8d749395e95ab734b12581e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,17 +2,16 @@\n //! traits for various types in the Rust compiler. Most are written by\n //! hand, though we've recently added some macros and proc-macros to help with the tedium.\n \n-use crate::hir::def::Namespace;\n-use crate::hir::def_id::CRATE_DEF_INDEX;\n use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n-\n+use rustc_hir::def::Namespace;\n+use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n-use smallvec::SmallVec;\n \n+use smallvec::SmallVec;\n use std::fmt;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -275,12 +274,12 @@ CloneTypeFoldableAndLiftImpls! {\n     ::syntax::ast::FloatTy,\n     ::syntax::ast::NodeId,\n     ::rustc_span::symbol::Symbol,\n-    crate::hir::def::Res,\n-    crate::hir::def_id::DefId,\n-    crate::hir::InlineAsmInner,\n-    crate::hir::MatchSource,\n-    crate::hir::Mutability,\n-    crate::hir::Unsafety,\n+    ::rustc_hir::def::Res,\n+    ::rustc_hir::def_id::DefId,\n+    ::rustc_hir::InlineAsmInner,\n+    ::rustc_hir::MatchSource,\n+    ::rustc_hir::Mutability,\n+    ::rustc_hir::Unsafety,\n     ::rustc_target::spec::abi::Abi,\n     crate::mir::Local,\n     crate::mir::Promoted,"}, {"sha": "b2c3c23b4e3bdd4e74282aee8854562e7eabeb15", "filename": "src/librustc/ty/structural_match.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_match.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,15 +1,13 @@\n-use crate::hir;\n+use crate::ty::fold::{TypeFoldable, TypeVisitor};\n+use crate::ty::{self, AdtDef, Ty, TyCtxt};\n+\n use rustc::infer::InferCtxt;\n use rustc::traits::ObligationCause;\n use rustc::traits::{self, ConstPatternStructural, TraitEngine};\n-\n use rustc_data_structures::fx::FxHashSet;\n-\n+use rustc_hir as hir;\n use rustc_span::Span;\n \n-use crate::ty::fold::{TypeFoldable, TypeVisitor};\n-use crate::ty::{self, AdtDef, Ty, TyCtxt};\n-\n #[derive(Debug)]\n pub enum NonStructuralMatchTy<'tcx> {\n     Adt(&'tcx AdtDef),"}, {"sha": "aeda2eb1a15c0ba01133cb398f3359b78c6ea6db", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,8 +5,6 @@\n use self::InferTy::*;\n use self::TyKind::*;\n \n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::infer::canonical::Canonical;\n use crate::middle::region;\n use crate::mir::interpret::ConstValue;\n@@ -16,6 +14,8 @@ use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, Substs\n use crate::ty::{self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable};\n use crate::ty::{List, ParamEnv, ParamEnvAnd, TyS};\n use crate::util::captures::Captures;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use polonius_engine::Atom;\n use rustc_index::vec::Idx;"}, {"sha": "a0055812835507bac6aaf48b305e2501a174a3fc", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n // Type substitutions.\n \n-use crate::hir::def_id::DefId;\n use crate::infer::canonical::Canonical;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n+use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "0cf1c397648edcfe29787d6ac570f1b53cbceffc", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathHash;\n use crate::ich::{self, StableHashingContext};\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "e0f4f2616017d5df10a5d3e199be37c8a7d5623a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,5 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n-use crate::hir;\n-use crate::hir::def::DefKind;\n-use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n use crate::ich::NodeIdHashingMode;\n use crate::middle::lang_items;\n@@ -14,6 +11,9 @@ use crate::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n use crate::ty::{self, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable};\n use crate::util::common::ErrorReported;\n+use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "60f597333912921c8d30108f6f033fbea4de5f63", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n-use crate::hir;\n-use crate::hir::def_id::DefId;\n use crate::infer::InferCtxt;\n use crate::middle::lang_items;\n use crate::traits::{self, AssocTypeBoundData};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n use std::iter::once;"}, {"sha": "408e9a75d93dd6a92aeec7d9183efa0dbe8f867f", "filename": "src/librustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,6 +12,7 @@ doctest = false\n [dependencies]\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc = { path = \"../librustc\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "6c8b8b05057169c886fa9618a787214acea97155", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n \n use rustc::bug;\n-use rustc::hir;\n-use rustc::hir::def::Res;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_error_codes::*;\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::*;"}, {"sha": "2515ca9d9466ad4c5dbc5edcdf28c9db8ccea7d4", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,10 +3,10 @@ use super::{ImplTraitContext, ImplTraitPosition, ImplTraitTypeIdVisitor};\n \n use rustc::arena::Arena;\n use rustc::bug;\n-use rustc::hir;\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::DefId;\n use rustc_error_codes::*;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym};"}, {"sha": "bc3dfecd4a6752499b15c4a1cca43760047b8448", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -36,24 +36,26 @@\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n-use rustc::hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::intravisit;\n use rustc::hir::map::{DefKey, DefPathData, Definitions};\n-use rustc::hir::{self, ConstArg, GenericArg, ParamName};\n use rustc::lint;\n use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use rustc::middle::cstore::CrateStore;\n-use rustc::session::config::nightly_options;\n-use rustc::session::Session;\n use rustc::util::captures::Captures;\n use rustc::util::common::FN_OUTPUT_NAME;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_error_codes::*;\n use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::nightly_options;\n use rustc_session::node_id::NodeMap;\n+use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -1482,22 +1484,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             output_lifetime_params: Vec<hir::GenericParam<'hir>>,\n         }\n \n-        impl<'r, 'a, 'v, 'hir> hir::intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            fn nested_visit_map<'this>(\n-                &'this mut self,\n-            ) -> hir::intravisit::NestedVisitorMap<'this, 'v> {\n-                hir::intravisit::NestedVisitorMap::None\n+        impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n+            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+                intravisit::NestedVisitorMap::None\n             }\n \n             fn visit_generic_args(&mut self, span: Span, parameters: &'v hir::GenericArgs<'v>) {\n                 // Don't collect elided lifetimes used inside of `Fn()` syntax.\n                 if parameters.parenthesized {\n                     let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n                     self.collect_elided_lifetimes = false;\n-                    hir::intravisit::walk_generic_args(self, span, parameters);\n+                    intravisit::walk_generic_args(self, span, parameters);\n                     self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                 } else {\n-                    hir::intravisit::walk_generic_args(self, span, parameters);\n+                    intravisit::walk_generic_args(self, span, parameters);\n                 }\n             }\n \n@@ -1510,12 +1510,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Record the \"stack height\" of `for<'a>` lifetime bindings\n                     // to be able to later fully undo their introduction.\n                     let old_len = self.currently_bound_lifetimes.len();\n-                    hir::intravisit::walk_ty(self, t);\n+                    intravisit::walk_ty(self, t);\n                     self.currently_bound_lifetimes.truncate(old_len);\n \n                     self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                 } else {\n-                    hir::intravisit::walk_ty(self, t)\n+                    intravisit::walk_ty(self, t)\n                 }\n             }\n \n@@ -1527,7 +1527,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // Record the \"stack height\" of `for<'a>` lifetime bindings\n                 // to be able to later fully undo their introduction.\n                 let old_len = self.currently_bound_lifetimes.len();\n-                hir::intravisit::walk_poly_trait_ref(self, trait_ref, modifier);\n+                intravisit::walk_poly_trait_ref(self, trait_ref, modifier);\n                 self.currently_bound_lifetimes.truncate(old_len);\n             }\n \n@@ -1540,7 +1540,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.currently_bound_lifetimes.push(lt_name);\n                 }\n \n-                hir::intravisit::walk_generic_param(self, param);\n+                intravisit::walk_generic_param(self, param);\n             }\n \n             fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n@@ -1621,7 +1621,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         for bound in bounds {\n-            hir::intravisit::walk_param_bound(&mut lifetime_collector, &bound);\n+            intravisit::walk_param_bound(&mut lifetime_collector, &bound);\n         }\n \n         let ImplTraitLifetimeCollector { output_lifetimes, output_lifetime_params, .. } ="}, {"sha": "2d9232bc19255503fda75bfb18eedde8b25d8c1e", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -23,6 +23,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_llvm = { path = \"../librustc_llvm\" }"}, {"sha": "e816bdeb1c92cded3a49a8eaea49a353af67d96e", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,10 +4,10 @@ use crate::llvm;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n \n-use rustc::hir;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n+use rustc_hir as hir;\n use rustc_span::Span;\n \n use libc::{c_char, c_uint};"}, {"sha": "4ed4e8ac6efab44c3765ae77aea8e84493e3ce72", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,7 +2,6 @@\n \n use std::ffi::CString;\n \n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::session::config::{OptLevel, Sanitizer};\n use rustc::session::Session;\n@@ -13,6 +12,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_target::abi::call::Conv;\n use rustc_target::spec::PanicStrategy;\n "}, {"sha": "3134ae5922c9abd9c79fb6f90795e5aafa859a2c", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -8,7 +8,6 @@ use crate::{LlvmCodegenBackend, ModuleLlvm};\n use log::{debug, info};\n use rustc::bug;\n use rustc::dep_graph::WorkProduct;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n@@ -18,6 +17,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind, RLIB_BYTECODE_EXTENSION};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{FatalError, Handler};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n \n use std::ffi::{CStr, CString};"}, {"sha": "afdfb36c2a9f6536cb43c8737a7e268c56f32474", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,7 +12,6 @@ use crate::LlvmCodegenBackend;\n use crate::ModuleLlvm;\n use log::debug;\n use rustc::bug;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n@@ -22,6 +21,7 @@ use rustc_codegen_ssa::{CompiledModule, ModuleCodegen, RLIB_BYTECODE_EXTENSION};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n+use rustc_hir::def_id::LOCAL_CRATE;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;"}, {"sha": "357b0b6c451518faf07c9db471001f4744e8ce98", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,7 +7,6 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use libc::{c_char, c_uint};\n use log::debug;\n-use rustc::hir::def_id::DefId;\n use rustc::session::config;\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -19,6 +18,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_hir::def_id::DefId;\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;"}, {"sha": "88850e19d8f9fced3662f8ef9c072b47102652ab", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,15 +7,16 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use libc::c_uint;\n use log::debug;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{self, Node};\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::interpret::{read_target_uint, Allocation, ConstValue, ErrorHandled, Pointer};\n use rustc::mir::mono::MonoItem;\n use rustc::ty::layout::{self, Align, LayoutOf, Size};\n use rustc::ty::{self, Instance, Ty};\n use rustc::{bug, span_bug};\n use rustc_codegen_ssa::traits::*;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::Node;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::HasDataLayout;"}, {"sha": "f07601ed383fed42881f83be5ed001d424a3728e", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,7 +5,6 @@ use crate::llvm;\n use crate::llvm_util;\n use crate::value::Value;\n use rustc::dep_graph::DepGraphSafe;\n-use rustc::hir;\n \n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n@@ -24,6 +23,7 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_hir::Unsafety;\n use rustc_target::spec::{HasTargetSpec, Target};\n \n use crate::abi::Abi;\n@@ -415,7 +415,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n             tcx.types.never,\n             false,\n-            hir::Unsafety::Unsafe,\n+            Unsafety::Unsafe,\n             Abi::C,\n         ));\n "}, {"sha": "c2ce35f91977803912ee56974ca5531705640c21", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -20,8 +20,6 @@ use crate::llvm_util;\n use crate::value::Value;\n \n use log::debug;\n-use rustc::hir::def::CtorKind;\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ich::NodeIdHashingMode;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::interpret::truncate;\n@@ -41,6 +39,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_fs_util::path_to_c_string;\n+use rustc_hir::def::CtorKind;\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::symbol::{Interner, Symbol};\n use rustc_span::{self, FileName, Span};"}, {"sha": "0462dcff42919b08274d77c14df7d7594f935d2a", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,9 +13,9 @@ use crate::llvm;\n use crate::llvm::debuginfo::{\n     DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType,\n };\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n \n use crate::abi::FnAbi;\n use crate::builder::Builder;"}, {"sha": "582f495207455d490dc957d4dad7a21ccbe5c4a9", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,8 +7,8 @@ use rustc::ty::{self, Instance};\n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::DIScope;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n+use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::small_c_str::SmallCStr;\n "}, {"sha": "4e17387e057f9ba85098b9cbc2204b178b16defd", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,8 +3,8 @@\n use super::namespace::item_namespace;\n use super::CrateDebugContext;\n \n-use rustc::hir::def_id::DefId;\n use rustc::ty::DefIdTree;\n+use rustc_hir::def_id::DefId;\n \n use crate::common::CodegenCx;\n use crate::llvm;"}, {"sha": "fea769dbba61d434d17f68a16be0e96e1c8d1a3f", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,7 +7,6 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::va_arg::emit_va_arg;\n use crate::value::Value;\n-use rustc::hir;\n use rustc::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf, Primitive};\n use rustc::ty::{self, Ty};\n use rustc::{bug, span_bug};\n@@ -17,6 +16,7 @@ use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::MemFlags;\n+use rustc_hir as hir;\n use rustc_target::abi::HasDataLayout;\n use syntax::ast;\n "}, {"sha": "c7b5c5e3db6a9b54d2417b664364ef892b94f578", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,11 +5,11 @@ use crate::context::CodegenCx;\n use crate::llvm;\n use crate::type_of::LayoutLlvmExt;\n use log::debug;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::layout::{FnAbiExt, LayoutOf};\n use rustc::ty::{Instance, TypeFoldable};\n use rustc_codegen_ssa::traits::*;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n \n pub use rustc::mir::mono::MonoItem;\n "}, {"sha": "eb192b27405e9ad91945174d75b8e37d3c478f8d", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -28,6 +28,7 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_data_structures = { path = \"../librustc_data_structures\"}\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "a53402ebb5c7daf54fab8f0277dcaa76f2cd613d", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::def_id::CrateNum;\n use rustc::middle::cstore::{EncodedMetadata, LibSource, NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::config::{\n@@ -10,6 +9,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::session::{filesearch, Session};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use rustc_hir::def_id::CrateNum;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n "}, {"sha": "11f5d3007e6b4a8bf247d23422701f6aa967a749", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,11 +9,11 @@ use std::io::prelude::*;\n use std::io::{self, BufWriter};\n use std::path::{Path, PathBuf};\n \n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_serialize::{json, Encoder};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};"}, {"sha": "9d19cc25a32bc53792971ad29f671282f6403fad", "filename": "src/librustc_codegen_ssa/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,8 +3,8 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use rustc::hir::def_id::CrateNum;\n use rustc::middle::cstore::LibSource;\n+use rustc_hir::def_id::CrateNum;\n \n pub struct RPathConfig<'a> {\n     pub used_crates: &'a [(CrateNum, LibSource)],"}, {"sha": "edd0fa504270703235960026b05e81e7207c5489", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,6 @@\n use std::collections::hash_map::Entry::*;\n use std::sync::Arc;\n \n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::Node;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n use rustc::session::config;\n@@ -13,6 +10,9 @@ use rustc::ty::Instance;\n use rustc::ty::{SymbolName, TyCtxt};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use syntax::expand::allocator::ALLOCATOR_METHODS;\n "}, {"sha": "075374fd8a951ed6030e9099bc18efbaf3e0d448", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -11,7 +11,6 @@ use crate::{\n use crate::traits::*;\n use jobserver::{Acquired, Client};\n use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::config::{\n     self, Lto, OutputFilenames, OutputType, Passes, Sanitizer, SwitchWithOptPath,\n@@ -26,6 +25,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n use rustc_errors::{DiagnosticId, FatalError, Handler, Level};\n use rustc_fs_util::link_or_copy;\n+use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n     copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };"}, {"sha": "ededb36c7127f355fcfea16a62950d03d4902bf7", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -25,8 +25,6 @@ use crate::mir::place::PlaceRef;\n use crate::traits::*;\n use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind};\n \n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::{self, LinkagePreference};\n@@ -42,6 +40,8 @@ use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::Idx;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_span::Span;"}, {"sha": "299a6d95272f7942dd22cab87466bfb7ba4f7cea", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,11 +6,11 @@ use rustc_span::Span;\n \n use crate::base;\n use crate::traits::*;\n-use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n+use rustc_hir::def_id::DefId;\n \n use crate::traits::BuilderMethods;\n-use rustc::hir;\n+use rustc_hir as hir;\n \n use rustc_error_codes::*;\n "}, {"sha": "8dd35208bf69af2c3269f60d2a304b8cd8a96c2c", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,9 @@\n // Type Names for Debug Info.\n \n-use rustc::hir::{self, def_id::DefId};\n use rustc::ty::{self, subst::SubstsRef, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n // Compute the name of the type as it should be stored in debuginfo. Does not do\n // any caching, i.e., calling the function twice with the same type will also do"}, {"sha": "b476fd952004b0a3452bd5de5e1e3059998ad309", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -25,7 +25,6 @@ extern crate rustc;\n extern crate syntax;\n \n use rustc::dep_graph::WorkProduct;\n-use rustc::hir::def_id::CrateNum;\n use rustc::middle::cstore::{CrateSource, LibSource, NativeLibrary};\n use rustc::middle::dependency_format::Dependencies;\n use rustc::middle::lang_items::LangItem;\n@@ -34,6 +33,7 @@ use rustc::ty::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir::def_id::CrateNum;\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n "}, {"sha": "6c17a01eb913367e7f93a3afb623482bc4bac479", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n use crate::traits::*;\n-use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n use rustc::session::config::DebugInfo;\n use rustc::ty::layout::{LayoutOf, Size};\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n \n use rustc_span::symbol::kw;"}, {"sha": "ae211cad62de4c9f200442ca22a6583c9f349c39", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n use crate::base;\n use crate::traits::*;\n-use rustc::hir;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::layout::HasTyCtxt;\n+use rustc_hir as hir;\n \n use rustc::mir::mono::MonoItem;\n "}, {"sha": "d31b063232c8579323f3551071b40dc9a463cf77", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n-use rustc::hir::{GlobalAsm, InlineAsmInner};\n+use rustc_hir::{GlobalAsm, InlineAsmInner};\n use rustc_span::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {"}, {"sha": "d2784f5b860f7032e50fa9bea179d8039865a723", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n use super::BackendTypes;\n use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n-use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n use rustc::ty::layout::Size;\n use rustc::ty::{Instance, Ty};\n+use rustc_hir::def_id::CrateNum;\n use rustc_span::{SourceFile, Span};\n use rustc_target::abi::call::FnAbi;\n use syntax::ast::Name;"}, {"sha": "c2ab5f50c6f7ef2c7a4cd78b14930bac77577e1b", "filename": "src/librustc_codegen_ssa/traits/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n use super::BackendTypes;\n-use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::{Instance, Ty};\n+use rustc_hir::def_id::DefId;\n use rustc_target::abi::call::FnAbi;\n \n pub trait DeclareMethods<'tcx>: BackendTypes {"}, {"sha": "40c9dde98c628a5bacec253c2f09b229e19f1341", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n use super::BackendTypes;\n-use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n+use rustc_hir::def_id::DefId;\n \n pub trait StaticMethods: BackendTypes {\n     fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;"}, {"sha": "8361a19ade9bc512a6b0b759914487189aeb5c7f", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -17,6 +17,7 @@ rustc-demangle = \"0.1.16\"\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "6b802bf530e86afd8e207a9432813cee7a1a3eda", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -15,9 +15,9 @@\n #[macro_use]\n extern crate rustc;\n \n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::sym;\n \n pub mod codegen_backend;"}, {"sha": "450dcd3b6041c67f175c41777c75240771c36231", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -87,13 +87,13 @@\n //! virtually impossible. Thus, symbol hash generation exclusively relies on\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n-use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::hir::Node;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Instance, TyCtxt};\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::Node;\n \n use rustc_span::symbol::Symbol;\n "}, {"sha": "4f5b9ce03fc3f5e90702bb2f902a9845fe009571", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::def_id::CrateNum;\n use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::ich::NodeIdHashingMode;\n use rustc::mir::interpret::{ConstValue, Scalar};\n@@ -7,6 +6,7 @@ use rustc::ty::subst::{GenericArg, GenericArgKind};\n use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::record_time;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def_id::CrateNum;\n \n use log::debug;\n "}, {"sha": "ff4e128e19090be18c19bc0ccd44e8f4a70ef78a", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::ty::print::{Print, Printer};\n use rustc::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n "}, {"sha": "8f2f2628e7b7f2bce7658f7f3e72379fd43992be", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,8 +4,8 @@\n //! def-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n-use rustc::hir;\n use rustc::ty::{Instance, TyCtxt};\n+use rustc_hir as hir;\n use rustc_span::symbol::{sym, Symbol};\n \n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;"}, {"sha": "ed742ed1ca0a3c66ab4f341f4ede51404746ba37", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -20,6 +20,7 @@ rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "dece0a55edd18850dfcca1d4ae4ce05adca2838e", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -25,7 +25,6 @@ pub extern crate rustc_plugin_impl as plugin;\n \n //use rustc_resolve as resolve;\n use errors::{registry::Registry, PResult};\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::lint;\n use rustc::lint::Lint;\n use rustc::middle::cstore::MetadataLoader;\n@@ -39,6 +38,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n use rustc_feature::{find_gated_cfg, UnstableFeatures};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::get_builtin_codegen_backend;\n use rustc_interface::{interface, Queries};\n use rustc_metadata::locator;"}, {"sha": "8804a05b596ee1fa421ac6f6aaa97ff5614f05c7", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n //! The various pretty-printing routines.\n \n-use rustc::hir;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map as hir_map;\n-use rustc::hir::print as pprust_hir;\n use rustc::session::config::{Input, PpMode, PpSourceMode};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::print as pprust_hir;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n \n use rustc_span::FileName;"}, {"sha": "09b33a6c83d8d6fa9d40350a47ef0eef02d3becd", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -15,6 +15,7 @@ log = \"0.4\"\n rand = \"0.7\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "64547845e74f1478a9235c6231fc1efddad5f30d", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -36,12 +36,12 @@\n use graphviz as dot;\n use rustc::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc::dep_graph::{DepGraphQuery, DepKind, DepNode};\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "70abb38278add67993682d6cc83e02aafe863a7a", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -21,9 +21,9 @@\n //! allows for doing a more fine-grained check to see if pre- or post-lto data\n //! was re-used.\n \n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_session::cgu_reuse_tracker::*;\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeSet;"}, {"sha": "40dd4c88a02b2bf44df79c43774fd9fc5114a77d", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -14,15 +14,15 @@\n //! the required condition is not met.\n \n use rustc::dep_graph::{label_strs, DepNode};\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::Node as HirNode;\n-use rustc::hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::Node as HirNode;\n+use rustc_hir::{ImplItemKind, ItemKind as HirItem, TraitItemKind};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::iter::FromIterator;"}, {"sha": "432f79bba030a81af719c093df836e07acca117a", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,8 +5,7 @@ use crate::util;\n use log::{info, log_enabled, warn};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc::hir::map;\n use rustc::lint;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n@@ -26,6 +25,7 @@ use rustc_data_structures::sync::{par_iter, Lrc, Once, ParallelIterator, WorkerL\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::PResult;\n use rustc_expand::base::ExtCtxt;\n+use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental;\n use rustc_mir as mir;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n@@ -433,7 +433,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n     dep_graph: &'res DepGraph,\n     krate: &'res ast::Crate,\n     arena: &'tcx Arena<'tcx>,\n-) -> Result<hir::map::Forest<'tcx>> {\n+) -> Result<map::Forest<'tcx>> {\n     // Lower AST to HIR.\n     let hir_forest = sess.time(\"lowering AST -> HIR\", || {\n         let hir_crate = rustc_ast_lowering::lower_crate(\n@@ -449,7 +449,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n             hir_stats::print_hir_stats(&hir_crate);\n         }\n \n-        hir::map::Forest::new(hir_crate, &dep_graph)\n+        map::Forest::new(hir_crate, &dep_graph)\n     });\n \n     sess.time(\"early lint checks\", || {\n@@ -676,7 +676,7 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n     plugin::build::provide(providers);\n-    hir::provide(providers);\n+    rustc::hir::provide(providers);\n     mir::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n@@ -714,7 +714,7 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<lint::LintStore>,\n-    hir_forest: &'tcx hir::map::Forest<'tcx>,\n+    hir_forest: &'tcx map::Forest<'tcx>,\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n@@ -727,7 +727,7 @@ pub fn create_global_ctxt<'tcx>(\n \n     // Construct the HIR map.\n     let hir_map = sess.time(\"indexing HIR\", || {\n-        hir::map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs)\n+        map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs)\n     });\n \n     let query_result_on_disk_cache ="}, {"sha": "9238f88b2b52799e90dceb1f1a00a7520cec1276", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;\n use syntax::attr;\n "}, {"sha": "2de0e1ecccc83e39897134939642784359d1775b", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,8 +3,7 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir;\n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::map;\n use rustc::lint;\n use rustc::lint::LintStore;\n use rustc::session::config::{OutputFilenames, OutputType};\n@@ -14,6 +13,7 @@ use rustc::ty::{AllArenas, GlobalCtxt, ResolverOutputs};\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_incremental::DepGraphFuture;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n@@ -76,7 +76,7 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(&'tcx hir::map::Forest<'tcx>, Steal<ResolverOutputs>)>,\n+    lower_to_hir: Query<(&'tcx map::Forest<'tcx>, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n@@ -211,7 +211,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn lower_to_hir(\n         &'tcx self,\n-    ) -> Result<&Query<(&'tcx hir::map::Forest<'tcx>, Steal<ResolverOutputs>)>> {\n+    ) -> Result<&Query<(&'tcx map::Forest<'tcx>, Steal<ResolverOutputs>)>> {\n         self.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();"}, {"sha": "820064cb5b6f8b1d5aacb693248626b641509c2d", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n unicode-security = \"0.0.2\"\n rustc = { path = \"../librustc\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "46202cda16d50aefc7786c487db42092cd669d5f", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,8 @@\n use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::{\n-    hir,\n-    lint::FutureIncompatibleInfo,\n-    ty::{\n-        self,\n-        adjustment::{Adjust, Adjustment},\n-    },\n-};\n+use rustc::lint::FutureIncompatibleInfo;\n+use rustc::ty;\n+use rustc::ty::adjustment::{Adjust, Adjustment};\n+use rustc_hir as hir;\n use rustc_span::symbol::sym;\n use syntax::errors::Applicability;\n "}, {"sha": "59b87afe2160b1fd003d4bfffe5ae871cca532d5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -25,17 +25,17 @@ use std::fmt::Write;\n \n use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n use lint::{LateContext, LintArray, LintContext};\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{HirIdSet, Node};\n use rustc::lint;\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n-\n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::Stability;\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n-\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{GenericParamKind, PatKind};\n+use rustc_hir::{HirIdSet, Node};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -48,8 +48,6 @@ use syntax::ptr::P;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::FnKind;\n \n-use rustc::hir::{self, GenericParamKind, PatKind};\n-\n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n use log::debug;"}, {"sha": "2e0a201fa98e9f3f8df793f5859b0bc1935ddd1b", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -14,16 +14,15 @@\n //! upon. As the ast is traversed, this keeps track of the current lint level\n //! for all lint attributes.\n \n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::intravisit as hir_visit;\n use rustc::hir::intravisit::Visitor;\n use rustc::lint::LateContext;\n use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n use rustc::ty::{self, TyCtxt};\n-\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::Span;\n use std::slice;\n use syntax::ast;"}, {"sha": "e060d6b551ca7a2a65fe45e650463dfc3f2ddd57", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::hir::intravisit;\n use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use syntax::ast;\n \n pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};"}, {"sha": "e272c3af468244dafedd5378bc974792f1a9d54e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -33,8 +33,6 @@ mod redundant_semicolon;\n mod types;\n mod unused;\n \n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::lint;\n use rustc::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n@@ -43,6 +41,8 @@ use rustc::lint::builtin::{\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "6df2740bee84893096c0542a33a7965f34d315a0", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,11 @@\n use lint::{EarlyContext, LateContext, LintArray, LintContext};\n use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::hir::def::{DefKind, Res};\n use rustc::hir::intravisit::FnKind;\n-use rustc::hir::{self, GenericParamKind, PatKind};\n use rustc::lint;\n use rustc::ty;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{GenericParamKind, PatKind};\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, BytePos, Span};\n use rustc_target::spec::abi::Abi;"}, {"sha": "f740bdb2716194ed3d983513e2738da9e994a118", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,14 +3,14 @@\n use crate::hir::def_id::DefId;\n use lint::{LateContext, LintArray, LintContext};\n use lint::{LateLintPass, LintPass};\n-use rustc::hir;\n-use rustc::hir::{is_range_literal, ExprKind, Node};\n use rustc::lint;\n use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;"}, {"sha": "184651e3ad5649286c128466e959fb27120af509", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,14 +1,14 @@\n use lint::{EarlyContext, LateContext, LintArray, LintContext};\n use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::hir;\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::DefId;\n use rustc::lint;\n use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n \n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};"}, {"sha": "d998e82d4890b03dc5acc6a1a9f2abfb46b3c651", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -16,6 +16,7 @@ memmap = \"0.7\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "cfd7b76a22279d16f08772ba2a67eed48d166d16", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,8 +3,6 @@\n use crate::locator::{CrateLocator, CratePaths};\n use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob};\n \n-use rustc::hir::def_id::CrateNum;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map::Definitions;\n use rustc::middle::cstore::DepKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n@@ -14,6 +12,8 @@ use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir::def_id::CrateNum;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_index::vec::IndexVec;\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n "}, {"sha": "3427de19daa80076e6f854723608b7d52b818bba", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -53,13 +53,13 @@\n \n use crate::creader::CStore;\n \n-use rustc::hir::def_id::CrateNum;\n use rustc::middle::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n use rustc::middle::cstore::{self, DepKind};\n use rustc::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n use rustc::session::config;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::CrateNum;\n use rustc_target::spec::PanicStrategy;\n \n crate fn calculate(tcx: TyCtxt<'_>) -> Dependencies {"}, {"sha": "fc988ec15cee99f58392b17052a14f6eb2ccd3c4", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use rustc::hir;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::middle::cstore::ForeignModule;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector { tcx, modules: Vec::new() };"}, {"sha": "8d018b9bb94ddb653ff61a69c4f4bb33de0c5cc1", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;\n "}, {"sha": "c524d2074f523a49b2e14f3e6d875663bb08849e", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;"}, {"sha": "77d143643b59e4277dd50b56967a28d66a714cfe", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,9 +4,6 @@ use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n use rustc::dep_graph::{self, DepNodeIndex};\n-use rustc::hir;\n-use rustc::hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n@@ -25,6 +22,9 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AtomicCell, Lock, LockGuard, Lrc, Once};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n \n use std::io;"}, {"sha": "ba3c4e4aff443860a24a8d26c62cf9b44e6cdae1", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,8 +4,6 @@ use crate::link_args;\n use crate::native_libs;\n use crate::rmeta::{self, encoder};\n \n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n@@ -17,6 +15,8 @@ use rustc::ty::query::Providers;\n use rustc::ty::query::QueryConfig;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::svh::Svh;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_parse::parser::emit_unclosed_delims;\n use rustc_parse::source_file_to_stream;\n "}, {"sha": "92bfc51d9d5f0d7c88aef47a0d99ec89a5ab5005", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,7 @@\n use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n-use rustc::hir::def::CtorKind;\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::map::definitions::DefPathTable;\n-use rustc::hir::{AnonConst, GenericParamKind};\n use rustc::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n@@ -15,6 +12,9 @@ use rustc::ty::codec::{self as ty_codec, TyEncoder};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_hir::def::CtorKind;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::vec::Idx;\n \n use rustc::session::config::{self, CrateType};\n@@ -37,8 +37,8 @@ use syntax::expand::is_proc_macro_attr;\n \n use rustc::hir::intravisit;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::{self, PatKind};\n+use rustc_hir as hir;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n \n struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n@@ -951,7 +951,7 @@ impl EncodeContext<'tcx> {\n         self.tcx.dep_graph.with_ignore(|| {\n             let body = self.tcx.hir().body(body_id);\n             self.lazy(body.params.iter().map(|arg| match arg.pat.kind {\n-                PatKind::Binding(_, _, ident, _) => ident.name,\n+                hir::PatKind::Binding(_, _, ident, _) => ident.name,\n                 _ => kw::Invalid,\n             }))\n         })"}, {"sha": "6309f1c260e1c5bc5a9deeb3e7f586658915efb2", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,8 @@\n use decoder::Metadata;\n use table::{Table, TableBuilder};\n \n-use rustc::hir;\n-use rustc::hir::def::CtorKind;\n-use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::exports::Export;\n+use rustc::hir::map;\n use rustc::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n@@ -14,6 +12,9 @@ use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n+use rustc_hir as hir;\n+use rustc_hir::def::CtorKind;\n+use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::Encoder;\n use rustc_span::edition::Edition;\n@@ -192,7 +193,7 @@ crate struct CrateRoot<'tcx> {\n     native_libraries: Lazy<[NativeLibrary]>,\n     foreign_modules: Lazy<[ForeignModule]>,\n     source_map: Lazy<[rustc_span::SourceFile]>,\n-    def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n+    def_path_table: Lazy<map::definitions::DefPathTable>,\n     impls: Lazy<[TraitImpls]>,\n     exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n     interpret_alloc_index: Lazy<[u32]>,"}, {"sha": "9b6908dbbe78906ab2f043fd63ce1c953942a873", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -18,13 +18,14 @@ log = \"0.4\"\n log_settings = \"0.1.1\"\n polonius-engine = \"0.11.0\"\n rustc = { path = \"../librustc\" }\n-rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_index = { path = \"../librustc_index\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n+rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }"}, {"sha": "7e251560a6c512923de340eca2887114c676a391", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,3 @@\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{AsyncGeneratorKind, GeneratorKind};\n use rustc::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory,\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceBase,\n@@ -10,6 +7,9 @@ use rustc::traits::error_reporting::suggest_constraining_type_param;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n use rustc_index::vec::Idx;\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::Span;\n@@ -1839,7 +1839,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if let ty::Ref(argument_region, _, _) = argument.kind {\n                         if argument_region == return_region {\n                             // Need to use the `rustc::ty` types to compare against the\n-                            // `return_region`. Then use the `rustc::hir` type to get only\n+                            // `return_region`. Then use the `rustc_hir` type to get only\n                             // the lifetime span.\n                             if let hir::TyKind::Rptr(lifetime, _) = &fn_decl.inputs[index].kind {\n                                 // With access to the lifetime, we can get"}, {"sha": "c8a59331f31af46e24323ba86466f9a3a009f08c", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,5 @@\n //! Borrow checker diagnostics.\n \n-use rustc::hir;\n-use rustc::hir::def::Namespace;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::GeneratorKind;\n use rustc::mir::{\n     AggregateKind, Constant, Field, Local, LocalInfo, LocalKind, Location, Operand, Place,\n     PlaceBase, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Static, StaticKind,\n@@ -13,6 +9,10 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::print::Print;\n use rustc::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_errors::DiagnosticBuilder;\n+use rustc_hir as hir;\n+use rustc_hir::def::Namespace;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::GeneratorKind;\n use rustc_span::Span;\n \n use super::borrow_set::BorrowData;"}, {"sha": "595acec2f74d7e8f8036400fcc5a8305e4177257", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir;\n-use rustc::hir::Node;\n use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location, ReadOnlyBodyAndCache};\n use rustc::mir::{Mutability, Place, PlaceBase, PlaceRef, ProjectionElem};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::Node;\n use rustc_index::vec::Idx;\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "0d343e76618b48b47682ba6ddceef85b5335c00e", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n //! Error reporting machinery for lifetime errors.\n \n-use rustc::hir::def_id::DefId;\n use rustc::infer::{\n     error_reporting::nice_region_error::NiceRegionError, region_constraints::GenericKind,\n     InferCtxt, NLLRegionVariableOrigin,\n };\n use rustc::mir::{Body, ConstraintCategory, Location};\n use rustc::ty::{self, RegionVid, Ty};\n use rustc_errors::DiagnosticBuilder;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "734e3861c62de1b03721e96ccb767e2434f6b5bf", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,12 @@\n use std::fmt::{self, Display};\n \n-use rustc::hir;\n-use rustc::hir::def::{DefKind, Res};\n use rustc::ty::print::RegionHighlightMode;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::DiagnosticBuilder;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_span::symbol::kw;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n "}, {"sha": "53fa5b1269849868def0fe476c5280cb57f0810a", "filename": "src/librustc_mir/borrow_check/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n use crate::rustc::ty::{self, Ty};\n-use rustc::hir::def_id::DefId;\n use rustc::infer::region_constraints::MemberConstraint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;\n use std::hash::Hash;"}, {"sha": "fff6f036da08239b3b322e1a5cea72a2ff2ecc75", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,5 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use rustc::hir::{self, def_id::DefId, HirId, Node};\n use rustc::infer::{opaque_types, InferCtxt};\n use rustc::lint::builtin::MUTABLE_BORROW_RESERVATION_CONFLICT;\n use rustc::lint::builtin::UNUSED_MUT;\n@@ -13,14 +12,15 @@ use rustc::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKi\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_hir as hir;\n+use rustc_hir::{def_id::DefId, HirId, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n-use smallvec::SmallVec;\n \n+use smallvec::SmallVec;\n use std::collections::BTreeMap;\n use std::mem;\n use std::rc::Rc;"}, {"sha": "a4c2299b3eaacccef1d092c5192809efea3696bd", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n //! The entry point of the NLL borrow checker.\n \n-use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{\n     BasicBlock, Body, BodyAndCache, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind,\n     Location, Promoted, ReadOnlyBodyAndCache,\n };\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc_errors::Diagnostic;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::sym;\n use std::env;"}, {"sha": "91ab314e2b910ad92df9bb25e47f56ac230d6f89", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n use crate::borrow_check::borrow_set::LocalsStateAtExit;\n-use rustc::hir;\n use rustc::mir::ProjectionElem;\n use rustc::mir::{Body, Mutability, Place, PlaceBase};\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir as hir;\n \n /// Extension methods for the `Place` type.\n crate trait PlaceExt<'tcx> {"}, {"sha": "64103719fe925722b3497bb3d0d4d1356a5c1acd", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n use crate::borrow_check::ArtificialField;\n use crate::borrow_check::Overlap;\n use crate::borrow_check::{AccessDepth, Deep, Shallow};\n-use rustc::hir;\n use rustc::mir::{\n     Body, BorrowKind, Place, PlaceBase, PlaceElem, PlaceRef, ProjectionElem, StaticKind,\n };\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir as hir;\n use std::cmp::max;\n \n /// When checking if a place conflicts with another place, this enum is used to influence decisions"}, {"sha": "1e88f696f2315ad34a2ab25dd20ffc3632c81cc2", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,9 +9,9 @@\n \n use super::MirBorrowckCtxt;\n \n-use rustc::hir;\n use rustc::mir::{Place, PlaceBase, PlaceRef, ProjectionElem, ReadOnlyBodyAndCache};\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir as hir;\n \n pub trait IsPrefixOf<'cx, 'tcx> {\n     fn is_prefix_of(&self, other: PlaceRef<'cx, 'tcx>) -> bool;"}, {"sha": "7d2384f8a7de70958ad6c799144c48f6a315a18b", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,5 @@\n use std::rc::Rc;\n \n-use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n@@ -14,6 +13,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::graph::vec_graph::VecGraph;\n use rustc_data_structures::graph::WithSuccessors;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;"}, {"sha": "a963735905e69c763c067fd795cb4d60de4cec21", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,8 +5,6 @@ use std::{fmt, iter, mem};\n \n use either::Either;\n \n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -30,6 +28,8 @@ use rustc::ty::{\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_error_codes::*;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "6e36508ed60afdb17fe3f02b213e470f35243026", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,15 +13,16 @@\n //! just returns them for other code to use.\n \n use either::Either;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{self, BodyOwnerKind, HirId};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::DiagnosticBuilder;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{BodyOwnerKind, HirId};\n use rustc_index::vec::{Idx, IndexVec};\n use std::iter;\n "}, {"sha": "2e133a035ee768db087665e9489479edbdea9241", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,8 +2,8 @@ use crate::build::matches::ArmHasGuard;\n use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n-use rustc::hir;\n use rustc::mir::*;\n+use rustc_hir as hir;\n use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "3f711044b154f7d6d77b5543ba3c1da6686c3afa", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,9 +3,9 @@\n use crate::build::scope::DropKind;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::hir;\n use rustc::middle::region;\n use rustc::mir::*;\n+use rustc_hir as hir;\n use rustc_span::symbol::sym;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "2cf2b21b65ace0add7f3d6a581da3a3ab22d9f48", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,10 +3,10 @@\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n-use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n use rustc_span::symbol::sym;\n \n use rustc_target::spec::abi::Abi;"}, {"sha": "ff7049278ed72c93c517774f230efe0e5420d282", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     if let ExprKind::Block { body } = expr.kind {\n                         if let Some(tail_expr) = &body.expr {\n                             let mut expr = tail_expr;\n-                            while let rustc::hir::ExprKind::Block(subblock, _label) = &expr.kind {\n+                            while let rustc_hir::ExprKind::Block(subblock, _label) = &expr.kind {\n                                 if let Some(subtail_expr) = &subblock.expr {\n                                     expr = subtail_expr\n                                 } else {"}, {"sha": "7eea90befb00896b60fcce4f85e863428c7f147c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -10,12 +10,12 @@ use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use crate::hair::{self, *};\n-use rustc::hir::HirId;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "9dbf8989cc5aaa97db9084bdf73678b9a4452595", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -15,10 +15,10 @@\n use crate::build::matches::{Ascription, Binding, Candidate, MatchPair};\n use crate::build::Builder;\n use crate::hair::{self, *};\n-use rustc::hir::RangeEnd;\n use rustc::mir::interpret::truncate;\n use rustc::ty;\n use rustc::ty::layout::{Integer, IntegerExt, Size};\n+use rustc_hir::RangeEnd;\n use syntax::attr::{SignedInt, UnsignedInt};\n \n use std::mem;"}, {"sha": "afdb744a43a83e84b4f59122fed18af4f337acc9", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,12 +9,12 @@ use crate::build::matches::{Candidate, MatchPair, Test, TestKind};\n use crate::build::Builder;\n use crate::hair::pattern::compare_const_vals;\n use crate::hair::*;\n-use rustc::hir::RangeEnd;\n use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, adjustment::PointerCast, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::RangeEnd;\n use rustc_index::bit_set::BitSet;\n use rustc_span::symbol::sym;\n \n@@ -657,7 +657,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n \n                 let no_overlap = (|| {\n-                    use rustc::hir::RangeEnd::*;\n+                    use rustc_hir::RangeEnd::*;\n                     use std::cmp::Ordering::*;\n \n                     let tcx = self.hir.tcx();"}, {"sha": "d6d22db9ff24b44ae9cbfa105135ee1b88422c47", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,13 +4,14 @@ use crate::hair::cx::Cx;\n use crate::hair::{BindingMode, LintLevel, PatKind};\n use crate::transform::MirSource;\n use crate::util as mir_util;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{self, GeneratorKind, HirIdMap, Node};\n use rustc::middle::lang_items;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{GeneratorKind, HirIdMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "0aa9773b39a3ab0de4fb5c641101d209dfe84ad0", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -84,11 +84,11 @@ should go to.\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use crate::hair::{Expr, ExprRef, LintLevel};\n-use rustc::hir;\n-use rustc::hir::GeneratorKind;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::GeneratorKind;\n use rustc_span::{Span, DUMMY_SP};\n use std::collections::hash_map::Entry;\n use std::mem;"}, {"sha": "671dea6ae7156fad405b8c17702dcdacb5378fb5", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,11 +5,11 @@ use crate::interpret::{\n     InterpResult, MPlaceTy, MemoryKind, OpTy, RawConst, RefTracking, Scalar, ScalarMaybeUndef,\n     StackPopCleanup,\n };\n-use rustc::hir::def::DefKind;\n use rustc::mir;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled};\n use rustc::traits::Reveal;\n use rustc::ty::{self, layout, layout::LayoutOf, subst::Subst, TyCtxt};\n+use rustc_hir::def::DefKind;\n use rustc_span::source_map::Span;\n use std::convert::TryInto;\n "}, {"sha": "1aed91baba6a82ff1b5f54d4303839eb611e88ce", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use std::borrow::{Borrow, Cow};\n use std::collections::hash_map::Entry;\n use std::hash::Hash;"}, {"sha": "d2ca4f1572c1f6a3d53fc34a3f664bf2252e5537", "filename": "src/librustc_mir/dataflow/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -22,10 +22,10 @@ use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n use std::{fs, io, ops};\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::{self, traversal, BasicBlock, Location};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::work_queue::WorkQueue;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::symbol::sym;"}, {"sha": "e843956a7a78bf5264e21471f5975eaef172762a", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,8 +2,8 @@ use std::cell::RefCell;\n use std::io::{self, Write};\n use std::{ops, str};\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::{self, BasicBlock, Body, Location};\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::Idx;\n "}, {"sha": "45d2b1a71f0f2298530ef54e9f506da6869a0324", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n //! Hook into libgraphviz for rendering dataflow graphs for MIR.\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::{BasicBlock, Body};\n+use rustc_hir::def_id::DefId;\n \n use std::fs;\n use std::io;"}, {"sha": "01f6177a93ab43488dbdacda2de57652d25e2b0a", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,11 +6,11 @@ use rustc_data_structures::work_queue::WorkQueue;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::Idx;\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::traversal;\n use rustc::mir::{self, BasicBlock, BasicBlockData, Body, Location, Statement, Terminator};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir::def_id::DefId;\n \n use std::borrow::Borrow;\n use std::fmt;"}, {"sha": "674c1489b9b687b8f0e5dc2f493e5f50dc463f1e", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,9 +2,9 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::cx::Cx;\n use crate::hair::{self, *};\n \n-use rustc::hir;\n use rustc::middle::region;\n use rustc::ty;\n+use rustc_hir as hir;\n \n use rustc_index::vec::Idx;\n "}, {"sha": "8fd8143ee374f070cded0f6c3055de0d21e3e84b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,14 +3,14 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::cx::Cx;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use crate::hair::*;\n-use rustc::hir;\n-use rustc::hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc::hir::def_id::LocalDefId;\n use rustc::mir::interpret::{ErrorHandled, Scalar};\n use rustc::mir::BorrowKind;\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, AdtKind, Ty};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::Idx;\n use rustc_span::Span;\n "}, {"sha": "2e5ab3343508c78cb8442e2293229373df130301", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,15 +6,15 @@ use crate::hair::util::UserAnnotatedTyHelpers;\n use crate::hair::*;\n \n use crate::hair::constant::{lit_to_const, LitToConstError};\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::Node;\n use rustc::infer::InferCtxt;\n use rustc::middle::region;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{GenericArg, InternalSubsts};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::Node;\n use rustc_index::vec::Idx;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;"}, {"sha": "d6859e356eef39dd279d59f7dfc0dfa65e942476", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n use crate::hair::*;\n \n-use rustc::hir;\n+use rustc_hir as hir;\n \n pub trait ToRef {\n     type Output;"}, {"sha": "cde91cc36cab22daef6f052bc59f0c14a5bbd536", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,15 +5,15 @@\n //! structures.\n \n use self::cx::Cx;\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n use rustc::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc::ty::adjustment::PointerCast;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{AdtDef, Const, Ty, UpvarSubsts, UserType};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n \n mod constant;"}, {"sha": "03120e8009f0a96fb1614e1a5e088de4bc3c78a8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -235,10 +235,10 @@ use rustc_index::vec::Idx;\n use super::{compare_const_vals, PatternFoldable, PatternFolder};\n use super::{FieldPat, Pat, PatKind, PatRange};\n \n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{HirId, RangeEnd};\n use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{HirId, RangeEnd};\n \n use rustc::lint;\n use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};"}, {"sha": "ca7912b447e2899f58e73548bbfd4e08eff27e9a", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,17 +4,17 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::hir::def::*;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::HirId;\n-use rustc::hir::{self, Pat};\n use rustc::lint;\n use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n+use rustc_hir::def::*;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{HirId, Pat};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::Mutability;"}, {"sha": "d4975df2e68cb1040f1b55a75b469a9dd05cf277", "filename": "src/librustc_mir/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n use crate::const_eval::const_variant_index;\n \n-use rustc::hir;\n use rustc::infer::InferCtxt;\n use rustc::lint;\n use rustc::mir::Field;\n use rustc::traits::{ObligationCause, PredicateObligation};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n \n use rustc_index::vec::Idx;\n "}, {"sha": "bac40a06c78d5c4532404d6887f6e96104b45a36", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,23 +9,23 @@ pub(crate) use self::check_match::check_match;\n use crate::hair::constant::*;\n use crate::hair::util::UserAnnotatedTyHelpers;\n \n-use rustc::hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n-use rustc::hir::{self, RangeEnd};\n use rustc::mir::interpret::{get_slice_bytes, sign_extend, ConstValue, ErrorHandled};\n use rustc::mir::UserTypeProjection;\n use rustc::mir::{BorrowKind, Field, Mutability};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::{GenericArg, SubstsRef};\n use rustc::ty::{self, AdtDef, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n-\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n+use rustc_hir::RangeEnd;\n use rustc_index::vec::Idx;\n-\n use rustc_span::{Span, DUMMY_SP};\n+use syntax::ast;\n+\n use std::cmp::Ordering;\n use std::fmt;\n-use syntax::ast;\n \n use rustc_error_codes::*;\n "}, {"sha": "c27844ed0d0328996389ece84596a7386a865241", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,5 +1,5 @@\n-use rustc::hir;\n use rustc::ty::{self, CanonicalUserType, TyCtxt, UserType};\n+use rustc_hir as hir;\n \n crate trait UserAnnotatedTyHelpers<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx>;"}, {"sha": "551e3e837c988bf3c4c1cc0eb10a28a2d714535c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,8 +2,6 @@ use std::cell::Cell;\n use std::fmt::Write;\n use std::mem;\n \n-use rustc::hir::def::DefKind;\n-use rustc::hir::def_id::DefId;\n use rustc::ich::StableHashingContext;\n use rustc::mir;\n use rustc::mir::interpret::{\n@@ -15,6 +13,8 @@ use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_span::source_map::{self, Span, DUMMY_SP};"}, {"sha": "7c6129ef30ffd92503af84b97cb04de06be5c072", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,10 +4,10 @@\n //! memory, we need to extract all memory allocations to the global memory pool so they stay around.\n \n use super::validity::RefTracking;\n-use rustc::hir;\n use rustc::mir::interpret::{ErrorHandled, InterpResult};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n \n use syntax::ast::Mutability;\n "}, {"sha": "cd6d94357e414cf56ab576fee851987ecb054c96", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,7 +2,6 @@\n //! looking at their MIR. Intrinsics/functions supported here are shared by CTFE\n //! and miri.\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     self,\n     interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n@@ -12,6 +11,7 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n "}, {"sha": "eed47c147c60d48d9e9aa9a03e5470ee4d0bf474", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::def_id::CrateNum;\n use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::mir::interpret::Allocation;\n use rustc::ty::{\n@@ -7,6 +6,7 @@ use rustc::ty::{\n     subst::{GenericArg, GenericArgKind},\n     Ty, TyCtxt,\n };\n+use rustc_hir::def_id::CrateNum;\n use std::fmt::Write;\n \n struct AbsolutePathPrinter<'tcx> {"}, {"sha": "6d15827536c556cb2911977a30dbcd075ba817b1", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,9 +5,9 @@\n use std::borrow::{Borrow, Cow};\n use std::hash::Hash;\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n \n use super::{"}, {"sha": "7b82bed2e7a61adf8ef1f744f7ee8905d27f3da9", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,10 +7,10 @@\n use std::fmt::Write;\n use std::ops::RangeInclusive;\n \n-use rustc::hir;\n use rustc::ty;\n use rustc::ty::layout::{self, LayoutOf, TyLayout, VariantIdx};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n use rustc_span::symbol::{sym, Symbol};\n \n use std::hash::Hash;"}, {"sha": "fc7f2eb18b23af5c6971a2b61b78e8b89c39b098", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n \n pub fn check(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {"}, {"sha": "519511f20f967c368a19f5f32b48dc683dad6685", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -176,9 +176,6 @@\n \n use crate::monomorphize;\n \n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::mir::interpret::{AllocId, ConstValue};\n@@ -193,6 +190,9 @@ use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_index::bit_set::GrowableBitSet;\n \n use std::iter;"}, {"sha": "c004417b3373f5dfbb1f2b2840bb34d29f307a5d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -96,8 +96,6 @@ use std::cmp;\n use std::collections::hash_map::Entry;\n use std::sync::Arc;\n \n-use rustc::hir::def::DefKind;\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n@@ -106,6 +104,8 @@ use rustc::ty::print::characteristic_def_id_of_type;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, InstanceDef, TyCtxt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_span::symbol::Symbol;\n \n use crate::monomorphize::collector::InliningMap;"}, {"sha": "01cecdd067945387729b98cfe99cf977fe3b21e6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use rustc_index::vec::{Idx, IndexVec};\n "}, {"sha": "33eafeca5b17e14b8fc7f10871c763dbf16393a2", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::DefId;\n \n use crate::transform::{MirPass, MirSource};\n use crate::util;"}, {"sha": "b7383663932a48d3d8f5baafe39ccc5188817458", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,9 +4,10 @@\n //! has interior mutability or needs to be dropped, as well as the visitor that emits errors when\n //! it finds operations that are invalid in a certain context.\n \n-use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n use std::fmt;\n "}, {"sha": "1583647a4d4141883384f9f66ffdc4c7940151e9", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,8 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc::hir::def_id::DefId;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n use syntax::feature_gate::feature_err;"}, {"sha": "3c52a2e0dd270fb888a65dbc474518175c216e2d", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc::hir::{def_id::DefId, HirId};\n use rustc::middle::lang_items;\n use rustc::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::cast::CastTy;\n use rustc::ty::{self, TyCtxt};\n use rustc_error_codes::*;\n+use rustc_hir::{def_id::DefId, HirId};\n use rustc_index::bit_set::BitSet;\n use rustc_span::symbol::sym;\n use rustc_span::Span;"}, {"sha": "b333bc681f6bbadf8163e310d06faf149e2ac536", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,15 +1,14 @@\n-use rustc_data_structures::fx::FxHashSet;\n-\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::Node;\n+use rustc::hir::intravisit;\n use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::Node;\n use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n@@ -474,13 +473,13 @@ struct UnusedUnsafeVisitor<'a> {\n     unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n }\n \n-impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    fn nested_visit_map<'this>(&'this mut self) -> hir::intravisit::NestedVisitorMap<'this, 'tcx> {\n-        hir::intravisit::NestedVisitorMap::None\n+impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        intravisit::NestedVisitorMap::None\n     }\n \n     fn visit_block(&mut self, block: &'tcx hir::Block<'tcx>) {\n-        hir::intravisit::walk_block(self, block);\n+        intravisit::walk_block(self, block);\n \n         if let hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) = block.rules {\n             self.unsafe_blocks.push((block.hir_id, self.used_unsafe.contains(&block.hir_id)));\n@@ -508,7 +507,7 @@ fn check_unused_unsafe(\n     debug!(\"check_unused_unsafe({:?}, body={:?}, used_unsafe={:?})\", def_id, body, used_unsafe);\n \n     let mut visitor = UnusedUnsafeVisitor { used_unsafe, unsafe_blocks };\n-    hir::intravisit::Visitor::visit_body(&mut visitor, body);\n+    intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult {"}, {"sha": "6b0f7be86841ebc5869f73a6ede6dba8e7f4d920", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,9 +4,6 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n \n-use rustc::hir::def::DefKind;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::HirId;\n use rustc::mir::interpret::{InterpResult, PanicInfo, Scalar};\n use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n@@ -23,6 +20,9 @@ use rustc::ty::layout::{\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::Mutability;"}, {"sha": "86baf4deb5197e463b9692539389d232416a4aea", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,11 +9,11 @@ use crate::transform::{MirPass, MirSource};\n use crate::util::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n use crate::util::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};\n use crate::util::patch::MirPatch;\n-use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_span::Span;\n use std::fmt;"}, {"sha": "96fb992e53b23631ea4f4479e305cf063ebaf334", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -57,15 +57,15 @@ use crate::transform::simplify;\n use crate::transform::{MirPass, MirSource};\n use crate::util::dump_mir;\n use crate::util::liveness;\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::GeneratorSubsts;\n use rustc::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n use std::borrow::Cow;"}, {"sha": "3c5d2c9f310bb5675e541d0bd86f803789d96b37", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n //! Inlining pass for MIR functions\n \n-use rustc::hir::def_id::DefId;\n+use rustc_hir::def_id::DefId;\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "82c31a09ce377ceaf64557cd39447b7de71510d1", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n use crate::{build, shim};\n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::ty::{InstanceDef, TyCtxt, TypeFoldable};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::borrow::Cow;"}, {"sha": "b6656e720c5c35d671652ecfdb7bcdf7667bb6a1", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,13 +12,13 @@\n //! initialization and can otherwise silence errors, if\n //! move analysis runs after promotion on broken MIR.\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, List, TyCtxt, TypeFoldable};\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::LitKind;"}, {"sha": "9dea44e02001095daca56d5b9b2c9b79260f4654", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::{self, adjustment::PointerCast, Predicate, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;"}, {"sha": "7a90cb0390e522b44b66a8873aacfa55e1e72686", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,9 +4,9 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast;\n \n use crate::transform::{MirPass, MirSource};\n-use rustc::hir::def_id::DefId;\n use rustc::mir::{self, Body, BodyAndCache, Local, Location};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n \n use crate::dataflow::move_paths::{HasMoveData, MoveData};"}, {"sha": "aacefeb75136e9aaa574aeae2ede3c9808aef884", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,12 +1,12 @@\n use crate::util::patch::MirPatch;\n-use rustc::hir;\n use rustc::middle::lang_items;\n use rustc::mir::*;\n use rustc::traits::Reveal;\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use std::fmt;\n "}, {"sha": "8291bc958808dc26a69216f2024ff562e6067158", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use std::fmt::Debug;\n use std::io::{self, Write};"}, {"sha": "e0919e7e8f879fe54bfdc684dd394607609fee1f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n use super::graphviz::write_mir_fn_graphviz;\n use crate::transform::MirSource;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::visit::Visitor;\n use rustc::mir::*;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::Idx;\n use std::fmt::Display;\n use std::fmt::Write as _;\n@@ -540,7 +540,7 @@ fn write_mir_sig(\n     body: &Body<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n-    use rustc::hir::def::DefKind;\n+    use rustc_hir::def::DefKind;\n \n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let kind = tcx.def_kind(src.def_id());"}, {"sha": "ced933ba3ee4228e7e7f2234b4a7da6d0795fca6", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,6 +13,7 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "30ec0fe7185cd1eeca22e2649e6a45ade035e1f4", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,14 +7,14 @@\n //! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::{sym, Span, Symbol};\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n@@ -206,12 +206,12 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(ConstKind::AnonConst);\n-        self.recurse_into(kind, |this| hir::intravisit::walk_anon_const(this, anon));\n+        self.recurse_into(kind, |this| intravisit::walk_anon_const(this, anon));\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let kind = ConstKind::for_body(body, self.tcx.hir());\n-        self.recurse_into(kind, |this| hir::intravisit::walk_body(this, body));\n+        self.recurse_into(kind, |this| intravisit::walk_body(this, body));\n     }\n \n     fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n@@ -220,7 +220,7 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n                 self.const_check_violated(NonConstExpr::OrPattern, p.span);\n             }\n         }\n-        hir::intravisit::walk_pat(self, p)\n+        intravisit::walk_pat(self, p)\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n@@ -250,6 +250,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n             _ => {}\n         }\n \n-        hir::intravisit::walk_expr(self, e);\n+        intravisit::walk_expr(self, e);\n     }\n }"}, {"sha": "0c435a166636347d3e30edd62d71940c351400d9", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,17 +3,16 @@\n // from live codes are live, and everything else is dead.\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::Node;\n-use rustc::hir::{self, PatKind, TyKind};\n-\n-use rustc::hir::def::{CtorOf, DefKind, Res};\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::privacy;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::{Node, PatKind, TyKind};\n \n use rustc_span;\n use rustc_span::symbol::sym;"}, {"sha": "f84f998420236fa622dcbbfa822c82ba63cb561b", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,12 +9,12 @@\n //!\n //! * Compiler internal types like `Ty` and `TyCtxt`\n \n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n "}, {"sha": "0817cb00605152078db0327b7bf03e20cf68b962", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n-use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map as hir_map;\n-use rustc::hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::attr;"}, {"sha": "3eca602cf86038addadc125a69395db28634c1ba", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,9 +3,10 @@\n // completely accurate (some things might be counted twice, others missed).\n \n use rustc::hir::intravisit as hir_visit;\n-use rustc::hir::{self, HirId};\n use rustc::util::common::to_readable_str;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::HirId;\n use rustc_span::Span;\n use syntax::ast::{self, AttrId, NodeId};\n use syntax::visit as ast_visit;"}, {"sha": "cc311916cab91f159daeb4d69d1a6cf286c4ebcf", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::DefId;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n \n-use rustc::hir;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi::RustIntrinsic;"}, {"sha": "be3e1f4738234867574bcb61962c34fdbfc96946", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,3 @@\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::ItemKind;\n use rustc::ty::layout::HasDataLayout;\n use rustc::ty::layout::HasParamEnv;\n use rustc::ty::layout::HasTyCtxt;\n@@ -11,6 +7,10 @@ use rustc::ty::layout::TyLayout;\n use rustc::ty::ParamEnv;\n use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;\n use syntax::ast::Attribute;\n "}, {"sha": "df3e4ee3af540383befa1e44756b4011cb1f91c4", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,11 +4,11 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};"}, {"sha": "3ae5e4f72b7444ec45200563b8fa708616238ae7", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -96,24 +96,25 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use rustc::hir::def::*;\n-use rustc::hir::def_id::DefId;\n+use errors::Applicability;\n use rustc::hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n-use rustc::hir::{self, Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n-\n-use errors::Applicability;\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_hir as hir;\n+use rustc_hir::def::*;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use syntax::ast;\n+\n use std::collections::VecDeque;\n use std::io;\n use std::io::prelude::*;\n use std::rc::Rc;\n use std::{fmt, u32};\n-use syntax::ast;\n \n #[derive(Copy, Clone, PartialEq)]\n struct Variable(u32);\n@@ -375,7 +376,7 @@ fn visit_fn<'tcx>(\n \n     for param in body.params {\n         let is_shorthand = match param.pat.kind {\n-            rustc::hir::PatKind::Struct(..) => true,\n+            rustc_hir::PatKind::Struct(..) => true,\n             _ => false,\n         };\n         param.pat.each_binding(|_bm, hir_id, _x, ident| {\n@@ -409,7 +410,7 @@ fn add_from_pat(ir: &mut IrMaps<'_>, pat: &hir::Pat<'_>) {\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n-        use rustc::hir::PatKind::*;\n+        use rustc_hir::PatKind::*;\n         match &pat.kind {\n             Binding(.., inner_pat) => {\n                 pats.extend(inner_pat.iter());"}, {"sha": "ec8c8ee8be9b08904ac4e79450e7cb06edc4f8f9", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,12 +3,13 @@ use Context::*;\n use rustc::session::Session;\n \n use errors::Applicability;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n-use rustc::hir::{self, Destination, Movability, Node};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Destination, Movability, Node};\n use rustc_span::Span;\n use syntax::struct_span_err;\n "}, {"sha": "9b529401049b0f924e2e262a2b6cb2296bd2b918", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,21 +5,21 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::intravisit;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::Node;\n-use rustc::hir::{self, HirIdSet};\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::{HirIdSet, Node};\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be"}, {"sha": "f2aa5aff171666d5da695dd99753f191d9e988f7", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,15 +6,14 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::Node;\n-use rustc::hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::Span;"}, {"sha": "4c5b57791c552dd70cd28d09f5a7856bc4e899b0", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,17 +1,18 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::{self, Generics, HirId, Item, StructField, Variant};\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::Attribute;"}, {"sha": "54cceca7d3afb3615a08b8e2737171b9b3bce75a", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,6 +12,7 @@ doctest = false\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "c4b644031d3a67cc0a687a29906fe60b735c4408", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n //! Used by `rustc` when compiling a plugin crate.\n \n-use rustc::hir;\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::attr;"}, {"sha": "6c9a2d65ef7df764462fda4c210b0aeb6bf83854", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "c932e8bb1f46d061a729e25cacc13872bb109d88", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -7,17 +7,18 @@\n extern crate syntax;\n \n use rustc::bug;\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n-use rustc::hir::{self, AssocItemKind, HirIdSet, Node, PatKind};\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "01e5d75d2b57d5697d97b7f51dbe47baeb158e20", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -22,6 +22,7 @@ rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "46dde451c7ffc492cc399553f31af4ed1401965d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -17,11 +17,11 @@ use crate::{\n use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segment, ToNameBinding};\n \n use rustc::bug;\n-use rustc::hir::def::{self, *};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n+use rustc_hir::def::{self, *};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_metadata::creader::LoadedMacro;\n \n use rustc_data_structures::sync::Lrc;"}, {"sha": "f564ea644bdc1c3a3bc32be0999d3f5f4cfcfb9d", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,7 @@\n use log::debug;\n-use rustc::hir::def_id::DefIndex;\n use rustc::hir::map::definitions::*;\n use rustc_expand::expand::AstFragment;\n+use rustc_hir::def_id::DefIndex;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "ba3d23145692ebf3985484ab5e35b9f9419f9c82", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,13 +3,13 @@ use std::cmp::Reverse;\n use errors::{Applicability, DiagnosticBuilder};\n use log::debug;\n use rustc::bug;\n-use rustc::hir::def::Namespace::{self, *};\n-use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::BUILTIN_ATTRIBUTES;\n+use rustc_hir::def::Namespace::{self, *};\n+use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Symbol};"}, {"sha": "5ede0564b1ae50759dd12b1c0c8ed49e26582615", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,8 +13,6 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n \n use errors::{pluralize, Applicability};\n \n-use rustc::hir::def::{self, PartialRes};\n-use rustc::hir::def_id::DefId;\n use rustc::hir::exports::Export;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n@@ -23,6 +21,8 @@ use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n+use rustc_hir::def::{self, PartialRes};\n+use rustc_hir::def_id::DefId;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span};"}, {"sha": "fb7aacba2dc48135dc6c57ef7cf7c28b2b634b71", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,12 +12,12 @@ use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResul\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n use log::debug;\n-use rustc::hir::def::Namespace::{self, *};\n-use rustc::hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc::hir::TraitCandidate;\n use rustc::{bug, lint, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def::Namespace::{self, *};\n+use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::TraitCandidate;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "5a12a75a8556ee8861518daf7703ffbf58a1974a", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,12 +6,12 @@ use crate::{PathResult, PathSource, Segment};\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n-use rustc::hir::def::Namespace::{self, *};\n-use rustc::hir::def::{self, CtorKind, DefKind};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc::hir::PrimTy;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def::Namespace::{self, *};\n+use rustc_hir::def::{self, CtorKind, DefKind};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::PrimTy;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;"}, {"sha": "199752b93c1377e573a247830cd4d423854e64ea", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -16,18 +16,13 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n \n-pub use rustc::hir::def::{Namespace, PerNS};\n+pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n use errors::{Applicability, DiagnosticBuilder};\n-use rustc::hir::def::Namespace::*;\n-use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::Definitions;\n-use rustc::hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n-use rustc::hir::{GlobMap, TraitMap};\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::session::Session;\n@@ -38,6 +33,11 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::SyntaxExtension;\n+use rustc_hir::def::Namespace::*;\n+use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n+use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};"}, {"sha": "4cd3a9e1a8082fdfe668619f195fb5da5cd56c69", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,18 +6,19 @@\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n use errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::Map;\n-use rustc::hir::{self, GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n-use rustc::hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n+use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::borrow::Cow;"}, {"sha": "1103d5b5b7c97dc1590dd52adace70718fb33938", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -6,8 +6,6 @@ use crate::Namespace::*;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n-use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n-use rustc::hir::def_id;\n use rustc::middle::stability;\n use rustc::session::Session;\n use rustc::{lint, span_bug, ty};\n@@ -17,6 +15,8 @@ use rustc_expand::base::{self, Indeterminate, InvocationRes};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n+use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n+use rustc_hir::def_id;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "e7a7eefc509e1e35218bd16de33354689d218f1c", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,6 +13,7 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n syntax = { path = \"../libsyntax\" }"}, {"sha": "2f2ba560fa20a8d9d814f1e9b851de10ef0d1eca", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,12 +13,12 @@\n //! DumpVisitor walks the AST and processes it, and Dumper is used for\n //! recording the output.\n \n-use rustc::hir::def::{DefKind as HirDefKind, Res};\n-use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n use rustc::span_bug;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def::{DefKind as HirDefKind, Res};\n+use rustc_hir::def_id::DefId;\n \n use std::env;\n use std::path::Path;"}, {"sha": "c3221d925bc3b54b9a7271e5e982bb5254d1f621", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -8,16 +8,16 @@ mod dumper;\n mod span_utils;\n mod sig;\n \n-use rustc::hir;\n-use rustc::hir::def::{CtorOf, DefKind as HirDefKind, Res};\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::Node;\n use rustc::middle::cstore::ExternCrate;\n use rustc::middle::privacy::AccessLevels;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::Node;\n \n use std::cell::Cell;\n use std::default::Default;"}, {"sha": "e7b86cfba4f7d58c716f8cc915a58b4957ef4a53", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -29,7 +29,7 @@ use crate::{id_from_def_id, id_from_node_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n-use rustc::hir::def::{DefKind, Res};\n+use rustc_hir::def::{DefKind, Res};\n use syntax::ast::{self, Extern, NodeId};\n use syntax::print::pprust;\n "}, {"sha": "8cca59df33846b8fda741e268e3565e279279806", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1052,7 +1052,7 @@ impl Decodable for SourceFile {\n                 name_was_remapped,\n                 unmapped_path: None,\n                 // `crate_of_origin` has to be set by the importer.\n-                // This value matches up with `rustc::hir::def_id::INVALID_CRATE`.\n+                // This value matches up with `rustc_hir::def_id::INVALID_CRATE`.\n                 // That constant is not available here, unfortunately.\n                 crate_of_origin: std::u32::MAX - 1,\n                 start_pos,"}, {"sha": "2cb25e63f836ddf4f5dc2fd1fcbdfb3c6beeb90a", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = { version = \"0.4\" }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "7512cbbd88218e410c68c1ae6a1e011de1c41866", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,10 @@\n use crate::generic_types;\n use crate::lowering::Lower;\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::traits::{Clause, GoalKind, ProgramClause, ProgramClauseCategory};\n use rustc::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n \n /// Returns a predicate of the form\n /// `Implemented(ty: Trait) :- Implemented(nested: Trait)...`"}, {"sha": "38a4a729648431daa39743b77a900334e738fd13", "filename": "src/librustc_traits/chalk_context/program_clauses/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -2,11 +2,11 @@ mod builtin;\n mod primitive;\n \n use super::ChalkInferenceContext;\n-use rustc::hir::def_id::DefId;\n use rustc::traits::{\n     Clause, DomainGoal, Environment, FromEnv, ProgramClause, ProgramClauseCategory, WellFormed,\n };\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir::def_id::DefId;\n use std::iter;\n \n use self::builtin::*;"}, {"sha": "ae4afe58436d6218f572cdb4837fa20a48888f39", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,11 +1,11 @@\n use crate::generic_types;\n use crate::lowering::Lower;\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::traits::{\n     Clause, Clauses, DomainGoal, GoalKind, ProgramClause, ProgramClauseCategory, WellFormed,\n };\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_target::spec::abi;\n use std::iter;\n "}, {"sha": "bc4d03cca7fee5fce728cc800f5c2a3399c5a9a1", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::traits::query::dropck_outlives::trivial_dropck_outlives;\n use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstraint};\n@@ -8,6 +7,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::DefId;\n use rustc_span::source_map::{Span, DUMMY_SP};\n \n crate fn provide(p: &mut Providers<'_>) {"}, {"sha": "e1a9ec56f8ba52601e334c96b2a10fd9964f65e6", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n //! Utilities for creating generic types with bound vars in place of parameter values.\n \n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_target::spec::abi;\n \n crate fn bound(tcx: TyCtxt<'tcx>, index: u32) -> Ty<'tcx> {"}, {"sha": "0e959cecaa9bbd0fde7b2d27ddbcc464410442f4", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,7 +1,6 @@\n //! Provider for the `implied_outlives_bounds` query.\n //! Do not call this query directory. See [`rustc::traits::query::implied_outlives_bounds`].\n \n-use rustc::hir;\n use rustc::infer::canonical::{self, Canonical};\n use rustc::infer::InferCtxt;\n use rustc::traits::query::outlives_bounds::OutlivesBound;\n@@ -12,6 +11,7 @@ use rustc::ty::outlives::Component;\n use rustc::ty::query::Providers;\n use rustc::ty::wf;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_hir as hir;\n use rustc_span::source_map::DUMMY_SP;\n use smallvec::{smallvec, SmallVec};\n "}, {"sha": "315efe5cf71e75b5f52a81f00216020e6b4d6b6f", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir::def_id::DefId;\n use rustc::traits::{\n     Clause, Clauses, DomainGoal, Environment, FromEnv, ProgramClause, ProgramClauseCategory,\n };\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::DefId;\n \n struct ClauseVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -151,7 +151,7 @@ crate fn program_clauses_for_env<'tcx>(\n \n crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     use super::{IntoFromEnvGoal, Lower};\n-    use rustc::hir::{ForeignItemKind, ImplItemKind, ItemKind, Node, TraitItemKind};\n+    use rustc_hir::{ForeignItemKind, ImplItemKind, ItemKind, Node, TraitItemKind};\n \n     debug!(\"environment(def_id = {:?})\", def_id);\n "}, {"sha": "47009ac41232fcc7c7f8108c08c2c84fc7c126a3", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,8 +1,5 @@\n mod environment;\n \n-use rustc::hir;\n-use rustc::hir::def::DefKind;\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::traits::{\n@@ -12,6 +9,9 @@ use rustc::traits::{\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, List, TyCtxt};\n+use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n use syntax::ast;\n "}, {"sha": "e50ca485e0a6a742afea9d5bba951d2129edcef7", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution};\n use rustc::traits::{self, ObligationCause, SelectionContext, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n+use rustc_hir as hir;\n use rustc_span::DUMMY_SP;\n use std::sync::atomic::Ordering;\n "}, {"sha": "149c42e9c5eb123f02113a565a99b24fe0598118", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,5 +1,3 @@\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::infer::at::ToTrace;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::InferCtxt;\n@@ -15,6 +13,8 @@ use rustc::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n use rustc::ty::{\n     FnSig, Lift, ParamEnv, ParamEnvAnd, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable, Variance,\n };\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n use std::fmt;\n "}, {"sha": "a489d0cd02b40045b1bff629ae98ccabe876c57a", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -15,6 +15,7 @@ arena = { path = \"../libarena\" }\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "36d119bf7698f47cf8fde2f78a4d40fc8a307cd1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,25 +3,26 @@\n //! instance of `AstConv`.\n \n use crate::collect::PlaceholderHirTyCollector;\n-use crate::hir::def::{CtorOf, DefKind, Res};\n-use crate::hir::def_id::DefId;\n-use crate::hir::intravisit::Visitor;\n-use crate::hir::print;\n-use crate::hir::{self, ExprKind, GenericArg, GenericArgs};\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use errors::{Applicability, DiagnosticId};\n+use rustc::hir::intravisit::Visitor;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::print;\n+use rustc_hir::{ExprKind, GenericArg, GenericArgs};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;"}, {"sha": "58e0bec1842f2ac5d44e9d7f047a3360699107f8", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,10 +1,11 @@\n use crate::check::coercion::CoerceMany;\n use crate::check::{Diverges, Expectation, FnCtxt, Needs};\n-use rustc::hir::{self, ExprKind};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::ObligationCauseCode;\n use rustc::traits::{IfExpressionCause, MatchExpressionArmCause, ObligationCause};\n use rustc::ty::Ty;\n+use rustc_hir as hir;\n+use rustc_hir::ExprKind;\n use rustc_span::Span;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -219,7 +220,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         then_expr: &'tcx hir::Expr<'tcx>,\n-        coercion: &mut CoerceMany<'tcx, '_, rustc::hir::Arm<'tcx>>,\n+        coercion: &mut CoerceMany<'tcx, '_, rustc_hir::Arm<'tcx>>,\n     ) -> bool {\n         // If this `if` expr is the parent's function return expr,\n         // the cause of the type coercion is the return type, point at it. (#25228)"}, {"sha": "3b4f408b8aae8dd419db3b00d8450799ff54d904", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,13 +1,13 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n-use rustc::hir;\n use rustc::infer::{InferCtxt, InferOk};\n use rustc::session::DiagnosticMessageId;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc::ty::{self, TraitRef, Ty, TyCtxt};\n use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc_hir as hir;\n \n use rustc_span::Span;\n use syntax::ast::Ident;"}, {"sha": "23db0fc463dae07ba48fe2f4ef1bda758382deb1", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -14,7 +14,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast::Ident;\n \n-use rustc::hir;\n+use rustc_hir as hir;\n \n use rustc_error_codes::*;\n "}, {"sha": "332921f45f4d5b9ea0e65ce6218d0a622a3b054a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -34,7 +34,6 @@ use crate::hir::def_id::DefId;\n use crate::lint;\n use crate::util::common::ErrorReported;\n use errors::{Applicability, DiagnosticBuilder};\n-use rustc::hir;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::traits;\n@@ -43,6 +42,7 @@ use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_hir as hir;\n use rustc_span::Span;\n use syntax::ast;\n "}, {"sha": "6bb7f4995b6ec54a121311125144779fb130535f", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,8 +4,6 @@ use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use crate::astconv::AstConv;\n use crate::middle::{lang_items, region};\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::LateBoundRegionConversionTime;\n use rustc::infer::{InferOk, InferResult};\n@@ -14,6 +12,8 @@ use rustc::traits::Obligation;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, Ty};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;\n use std::cmp;"}, {"sha": "68cbd73a8aa9b2d64b3c63f25ad60da2d9aecef0", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -52,8 +52,6 @@\n \n use crate::check::{FnCtxt, Needs};\n use errors::DiagnosticBuilder;\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -65,6 +63,8 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_span;\n use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;"}, {"sha": "13e37c124e0144ecdb28fbf636d9eee64a117be7", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,14 +1,15 @@\n use errors::{Applicability, DiagnosticId};\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::{self, GenericParamKind, ImplItemKind, TraitItemKind};\n+use rustc::hir::intravisit;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::ExplicitSelf;\n use rustc::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc::util::common::ErrorReported;\n-\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_span::Span;\n use syntax::errors::pluralize;\n \n@@ -877,9 +878,9 @@ fn compare_synthetic_generics<'tcx>(\n                             _ => unreachable!(),\n                         };\n                         struct Visitor(Option<Span>, hir::def_id::DefId);\n-                        impl<'v> hir::intravisit::Visitor<'v> for Visitor {\n+                        impl<'v> intravisit::Visitor<'v> for Visitor {\n                             fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n-                                hir::intravisit::walk_ty(self, ty);\n+                                intravisit::walk_ty(self, ty);\n                                 if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) =\n                                     ty.kind\n                                 {\n@@ -892,14 +893,14 @@ fn compare_synthetic_generics<'tcx>(\n                             }\n                             fn nested_visit_map<'this>(\n                                 &'this mut self,\n-                            ) -> hir::intravisit::NestedVisitorMap<'this, 'v>\n+                            ) -> intravisit::NestedVisitorMap<'this, 'v>\n                             {\n-                                hir::intravisit::NestedVisitorMap::None\n+                                intravisit::NestedVisitorMap::None\n                             }\n                         }\n                         let mut visitor = Visitor(None, impl_def_id);\n                         for ty in input_tys {\n-                            hir::intravisit::Visitor::visit_ty(&mut visitor, ty);\n+                            intravisit::Visitor::visit_ty(&mut visitor, ty);\n                         }\n                         let span = visitor.0?;\n "}, {"sha": "1be65b5f1894bc3afa18174fcc90129482963a83", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,9 +3,10 @@ use rustc::infer::InferOk;\n use rustc::traits::{self, ObligationCause};\n \n use errors::{Applicability, DiagnosticBuilder};\n-use rustc::hir::{self, is_range_literal, print, Node};\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::{self, AssocItem, Ty};\n+use rustc_hir as hir;\n+use rustc_hir::{is_range_literal, print, Node};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::util::parser::PREC_POSTFIX;"}, {"sha": "c12d8400f086345ef7f4888a88fdffe2eea46479", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -17,10 +17,6 @@ use crate::check::TupleArgumentsFlag::DontTupleArguments;\n use crate::util::common::ErrorReported;\n \n use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n-use rustc::hir;\n-use rustc::hir::def::{CtorKind, DefKind, Res};\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{ExprKind, QPath};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::lang_items;\n@@ -31,6 +27,10 @@ use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{AdtKind, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{ExprKind, QPath};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "f004d04fdfeba1528ce02c75e90d6c0ac9003d32", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,13 +4,14 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc::hir::def::{CtorKind, DefKind, Res};\n-use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::{self, Expr, ExprKind, Pat, PatKind};\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n use rustc_span::Span;\n \n struct InteriorVisitor<'a, 'tcx> {"}, {"sha": "a267b9786f1d8b6f3afaefad6dce8937241fd17e", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n \n-use rustc::hir;\n+use rustc_hir as hir;\n \n use rustc_error_codes::*;\n "}, {"sha": "83890cfce670c933e4013098debf8d1ff1f66eb4", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,14 +4,14 @@ use crate::astconv::AstConv;\n use crate::check::{callee, FnCtxt, Needs, PlaceOp};\n use crate::hir::def_id::DefId;\n use crate::hir::GenericArg;\n-use rustc::hir;\n use rustc::infer::{self, InferOk};\n use rustc::traits;\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref, PointerCast};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::ty::{self, GenericParamDefKind, Ty};\n+use rustc_hir as hir;\n use rustc_span::Span;\n \n use std::ops::Deref;"}, {"sha": "e9356a04c01d46d67170cec39d42ce559f06423b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,16 +13,16 @@ pub use self::MethodError::*;\n use crate::check::FnCtxt;\n use crate::namespace::Namespace;\n use errors::{Applicability, DiagnosticBuilder};\n-use rustc::hir;\n-use rustc::hir::def::{CtorOf, DefKind};\n-use rustc::hir::def_id::DefId;\n use rustc::infer::{self, InferOk};\n use rustc::traits;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind};\n+use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n use syntax::ast;\n "}, {"sha": "50f22eabf62c2733b1499783c71dbb01b6d18c6f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -9,7 +9,6 @@ use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n use crate::namespace::Namespace;\n \n-use rustc::hir;\n use rustc::infer::canonical::OriginalQueryValues;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -29,6 +28,7 @@ use rustc::ty::{\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use std::cmp::max;\n use std::iter;"}, {"sha": "1cc1eb2c7b2df287e31a4c50ef1f3055fbe6d6d6", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,15 +5,17 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc::hir::def::{DefKind, Res};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::intravisit;\n use rustc::hir::map as hir_map;\n-use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::{ExprKind, Node, QPath};\n use rustc_span::{source_map, FileName, Span};\n use syntax::ast;\n use syntax::util::lev_distance;\n@@ -1073,18 +1075,18 @@ impl UsePlacementFinder<'tcx> {\n         target_module: hir::HirId,\n     ) -> (Option<Span>, bool) {\n         let mut finder = UsePlacementFinder { target_module, span: None, found_use: false, tcx };\n-        hir::intravisit::walk_crate(&mut finder, krate);\n+        intravisit::walk_crate(&mut finder, krate);\n         (finder.span, finder.found_use)\n     }\n }\n \n-impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n+impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n     fn visit_mod(&mut self, module: &'tcx hir::Mod<'tcx>, _: Span, hir_id: hir::HirId) {\n         if self.span.is_some() {\n             return;\n         }\n         if hir_id != self.target_module {\n-            hir::intravisit::walk_mod(self, module, hir_id);\n+            intravisit::walk_mod(self, module, hir_id);\n             return;\n         }\n         // Find a `use` statement.\n@@ -1124,8 +1126,8 @@ impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> hir::intravisit::NestedVisitorMap<'this, 'tcx> {\n-        hir::intravisit::NestedVisitorMap::None\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        intravisit::NestedVisitorMap::None\n     }\n }\n "}, {"sha": "eacd94f7da7f7e9194766dfb08067abafd159e74", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -91,11 +91,7 @@ use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n use errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n-use rustc::hir::def::{CtorOf, DefKind, Res};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::{self, ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n@@ -118,6 +114,11 @@ use rustc::ty::{\n     ToPredicate, Ty, TyCtxt, UserType,\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n use rustc_index::vec::Idx;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};"}, {"sha": "691469e48835a8def8e188ad0816a94194d74e1c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -3,11 +3,11 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs};\n use errors::{self, Applicability};\n-use rustc::hir;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc_hir as hir;\n use rustc_span::Span;\n use syntax::ast::Ident;\n "}, {"sha": "051bf61c90a8c09ea77bed2d00b71216b3db0d13", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,14 +1,15 @@\n use crate::check::FnCtxt;\n use errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc::hir::def::{CtorKind, DefKind, Res};\n-use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n-use rustc::hir::{self, HirId, Pat, PatKind};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Pattern;\n use rustc::ty::subst::GenericArg;\n use rustc::ty::{self, BindingMode, Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n+use rustc_hir::{HirId, Pat, PatKind};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "3b2f3d17e8da6a7e4bd89c31146dc6a0d7904151", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -76,15 +76,15 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, Ty};\n-\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::{self, PatKind};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::PatKind;\n use rustc_span::Span;\n use std::mem;\n use std::ops::Deref;"}, {"sha": "be912b6bcafc03d2c8d3df190f6e24d3da7af2cf", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -35,13 +35,13 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc::hir;\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::def_id::LocalDefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::UpvarRegion;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_span::Span;\n use syntax::ast;\n "}, {"sha": "2da27d59829cfbd0548978d869cf2dd93fca8433", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -1,23 +1,23 @@\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use rustc::hir::def_id::DefId;\n-use rustc::hir::ItemKind;\n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::ItemKind;\n \n use errors::DiagnosticBuilder;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast;\n use syntax::feature_gate;\n \n-use rustc::hir;\n-use rustc::hir::itemlikevisit::ParItemLikeVisitor;\n+use rustc_hir as hir;\n+use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n \n use rustc_error_codes::*;\n "}, {"sha": "ad9a2f2e2b45e44d5c23e00561f4f1a18160ddd4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -4,15 +4,15 @@\n \n use crate::check::FnCtxt;\n \n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, DefIdSet, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::InferCtxt;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, DefIdSet, DefIndex};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n "}, {"sha": "ab8e4ce6975a976b966b2ea55e68486be9524e5a", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -5,11 +5,11 @@ use errors::Applicability;\n use rustc_span::Span;\n use syntax::ast;\n \n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::print::visibility_qualified;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::print::visibility_qualified;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();"}, {"sha": "6d97661e5272a7e3c25e5dc8dbe3e367b2a61ac2", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfd8673a791661d9cb526d9994f2f6bbfa49348/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=ebfd8673a791661d9cb526d9994f2f6bbfa49348", "patch": "@@ -13,8 +13,9 @@ use rustc::ty::util::CopyImplementationError;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n \n-use rustc::hir::def_id::DefId;\n-use rustc::hir::{self, ItemKind};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::ItemKind;\n \n use rustc_error_codes::*;\n "}]}