{"sha": "cb23298efff779773a98dc0927f42197346f337f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjMyOThlZmZmNzc5NzczYTk4ZGMwOTI3ZjQyMTk3MzQ2ZjMzN2Y=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-24T07:11:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-24T07:11:13Z"}, "message": "Merge pull request #1984 from MaloJaffre/fix_int_to_bits\n\nFix int_ty_to_nbits", "tree": {"sha": "6254e03123c9c437a3136b4d51531894774c286e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6254e03123c9c437a3136b4d51531894774c286e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb23298efff779773a98dc0927f42197346f337f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb23298efff779773a98dc0927f42197346f337f", "html_url": "https://github.com/rust-lang/rust/commit/cb23298efff779773a98dc0927f42197346f337f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb23298efff779773a98dc0927f42197346f337f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e417cce5b322801af015804275352add9f5c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e417cce5b322801af015804275352add9f5c96", "html_url": "https://github.com/rust-lang/rust/commit/36e417cce5b322801af015804275352add9f5c96"}, {"sha": "d6e4e0639e6ef5213a40cc35231f8be3cdb365ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e4e0639e6ef5213a40cc35231f8be3cdb365ec", "html_url": "https://github.com/rust-lang/rust/commit/d6e4e0639e6ef5213a40cc35231f8be3cdb365ec"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "14065aeaf88db54765186fa00db5285c4228ab81", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cb23298efff779773a98dc0927f42197346f337f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb23298efff779773a98dc0927f42197346f337f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=cb23298efff779773a98dc0927f42197346f337f", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::intravisit::{FnKind, Visitor, walk_ty, NestedVisitorMap};\n use rustc::lint::*;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n@@ -479,17 +479,25 @@ declare_lint! {\n \n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n-fn int_ty_to_nbits(typ: Ty) -> usize {\n-    let n = match typ.sty {\n-        ty::TyInt(i) => 4 << (i as usize),\n-        ty::TyUint(u) => 4 << (u as usize),\n+fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n+    match typ.sty {\n+        ty::TyInt(i) => match i {\n+            IntTy::Is => tcx.data_layout.pointer_size.bits(),\n+            IntTy::I8 => 8,\n+            IntTy::I16 => 16,\n+            IntTy::I32 => 32,\n+            IntTy::I64 => 64,\n+            IntTy::I128 => 128,\n+        },\n+        ty::TyUint(i) => match i {\n+            UintTy::Us => tcx.data_layout.pointer_size.bits(),\n+            UintTy::U8 => 8,\n+            UintTy::U16 => 16,\n+            UintTy::U32 => 32,\n+            UintTy::U64 => 64,\n+            UintTy::U128 => 128,\n+        },\n         _ => 0,\n-    };\n-    // n == 4 is the usize/isize case\n-    if n == 4 {\n-        ::std::mem::size_of::<usize>() * 8\n-    } else {\n-        n\n     }\n }\n \n@@ -510,7 +518,7 @@ fn span_precision_loss_lint(cx: &LateContext, expr: &Expr, cast_from: Ty, cast_t\n     } else if is_isize_or_usize(cast_from) {\n         \"32 or 64\".to_owned()\n     } else {\n-        int_ty_to_nbits(cast_from).to_string()\n+        int_ty_to_nbits(cast_from, cx.tcx).to_string()\n     };\n     span_lint(\n         cx,\n@@ -542,7 +550,8 @@ fn check_truncation_and_wrapping(cx: &LateContext, expr: &Expr, cast_from: Ty, c\n     let arch_64_suffix = \" on targets with 64-bit wide pointers\";\n     let arch_32_suffix = \" on targets with 32-bit wide pointers\";\n     let cast_unsigned_to_signed = !cast_from.is_signed() && cast_to.is_signed();\n-    let (from_nbits, to_nbits) = (int_ty_to_nbits(cast_from), int_ty_to_nbits(cast_to));\n+    let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n+    let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n     let (span_truncation, suffix_truncation, span_wrap, suffix_wrap) =\n         match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n             (true, true) | (false, false) => {\n@@ -650,7 +659,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false) => {\n-                        let from_nbits = int_ty_to_nbits(cast_from);\n+                        let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n                         let to_nbits = if let ty::TyFloat(FloatTy::F32) = cast_to.sty {\n                             32\n                         } else {"}]}