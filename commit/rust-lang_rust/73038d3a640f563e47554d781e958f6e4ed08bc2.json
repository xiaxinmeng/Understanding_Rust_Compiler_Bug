{"sha": "73038d3a640f563e47554d781e958f6e4ed08bc2", "node_id": "C_kwDOAAsO6NoAKDczMDM4ZDNhNjQwZjU2M2U0NzU1NGQ3ODFlOTU4ZjZlNGVkMDhiYzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T17:22:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T17:57:37Z"}, "message": "Make missing impl item suggestions more obvious that they're missing", "tree": {"sha": "e6e017b4f4e7e0bb8ef1bc959c32ebb9178b6ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e017b4f4e7e0bb8ef1bc959c32ebb9178b6ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73038d3a640f563e47554d781e958f6e4ed08bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73038d3a640f563e47554d781e958f6e4ed08bc2", "html_url": "https://github.com/rust-lang/rust/commit/73038d3a640f563e47554d781e958f6e4ed08bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73038d3a640f563e47554d781e958f6e4ed08bc2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "204c5162939760c7b16af7d42ec5ae8590dd8ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/204c5162939760c7b16af7d42ec5ae8590dd8ae7", "html_url": "https://github.com/rust-lang/rust/commit/204c5162939760c7b16af7d42ec5ae8590dd8ae7"}], "stats": {"total": 92, "additions": 41, "deletions": 51}, "files": [{"sha": "9fba538f12e2e9bcc44c0c21bd89afc2ac0459dc", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -466,10 +466,10 @@ fn suggestion_signature<'tcx>(\n                 assoc,\n             )\n         }\n-        ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.name),\n+        ty::AssocKind::Type => format!(\"type {} = /* Type */;\", assoc.name),\n         ty::AssocKind::Const => {\n             let ty = tcx.type_of(assoc.def_id).subst_identity();\n-            let val = ty_kind_suggestion(ty).unwrap_or(\"value\");\n+            let val = ty_kind_suggestion(ty).unwrap_or(\"todo!()\");\n             format!(\"const {}: {} = {};\", assoc.name, ty, val)\n         }\n     }"}, {"sha": "6bdb9ded4827649aeaac5c81a29d4b9c8bf01c79", "filename": "tests/ui/async-await/issue-74047.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-74047.stderr?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Error`, `try_from`\n LL | impl TryFrom<OtherStream> for MyStream {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_from` in implementation\n    |\n-   = help: implement the missing item: `type Error = Type;`\n+   = help: implement the missing item: `type Error = /* Type */;`\n    = help: implement the missing item: `fn try_from(_: OtherStream) -> Result<Self, <Self as TryFrom<OtherStream>>::Error> { todo!() }`\n \n error: aborting due to previous error"}, {"sha": "835c9b2aa4840b90de27d3afd97f7bc5be5b23d3", "filename": "tests/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -5,7 +5,7 @@ LL | impl m1::X for X {\n    | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5` in implementation\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n-   = help: implement the missing item: `type Type = Type;`\n+   = help: implement the missing item: `type Type = /* Type */;`\n    = help: implement the missing item: `fn method(&self, _: String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method2(self: Box<Self>, _: String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method3(_: &Self, _: String) -> <Self as m1::X>::Type { todo!() }`"}, {"sha": "cd854e61f2f4711689dfe1bd6f6f931dc6a4255f", "filename": "tests/ui/span/issue-23729.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23729.stderr?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Item`\n LL |         impl Iterator for Recurrence {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Item` in implementation\n    |\n-   = help: implement the missing item: `type Item = Type;`\n+   = help: implement the missing item: `type Item = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "83a9e8c9b9876039f8df73b64f0d0b46119b9217", "filename": "tests/ui/span/issue-23827.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23827.stderr?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Output`\n LL | impl<C: Component> FnOnce<(C,)> for Prototype {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output` in implementation\n    |\n-   = help: implement the missing item: `type Output = Type;`\n+   = help: implement the missing item: `type Output = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "cf666e8b4a7a648e9ada29fd3dc4c32d562b2f7d", "filename": "tests/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-24356.stderr?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Target`\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation\n    |\n-   = help: implement the missing item: `type Target = Type;`\n+   = help: implement the missing item: `type Target = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "b026035a6a1689ad4dabffaa10e2cdbc9a243261", "filename": "tests/ui/suggestions/auxiliary/missing-assoc-fn-applicable-suggestions.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -0,0 +1,16 @@\n+pub trait TraitB {\n+    type Item;\n+}\n+\n+pub trait TraitA<A> {\n+    type Type;\n+\n+    fn bar<T>(_: T) -> Self;\n+\n+    fn baz<T>(_: T) -> Self\n+    where\n+        T: TraitB,\n+        <T as TraitB>::Item: Copy;\n+\n+    const A: usize;\n+}"}, {"sha": "a0cb39a3f8a25104b49a96e33b9f22a5d9fe89e6", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.fixed", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed?ref=204c5162939760c7b16af7d42ec5ae8590dd8ae7", "patch": "@@ -1,21 +0,0 @@\n-// run-rustfix\n-trait TraitB {\n-    type Item;\n-}\n-\n-trait TraitA<A> {\n-    type Type;\n-    fn bar<T>(_: T) -> Self;\n-    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-}\n-\n-struct S;\n-struct Type;\n-\n-impl TraitA<()> for S { //~ ERROR not all trait items implemented\n-fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }\n-fn bar<T>(_: T) -> Self { todo!() }\n-type Type = Type;\n-}\n-\n-fn main() {}"}, {"sha": "11e0c9a3a72afd493fc2a1f5a562fad24468dcfd", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -1,18 +1,15 @@\n-// run-rustfix\n-trait TraitB {\n-    type Item;\n-}\n+// aux-build:missing-assoc-fn-applicable-suggestions.rs\n \n-trait TraitA<A> {\n-    type Type;\n-    fn bar<T>(_: T) -> Self;\n-    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-}\n+extern crate missing_assoc_fn_applicable_suggestions;\n+use missing_assoc_fn_applicable_suggestions::TraitA;\n \n struct S;\n-struct Type;\n-\n-impl TraitA<()> for S { //~ ERROR not all trait items implemented\n+impl TraitA<()> for S {\n+    //~^ ERROR not all trait items implemented\n }\n+//~^ HELP implement the missing item: `type Type = /* Type */;`\n+//~| HELP implement the missing item: `fn bar<T>(_: T) -> Self { todo!() }`\n+//~| HELP implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }`\n+//~| HELP implement the missing item: `const A: usize = 42;`\n \n fn main() {}"}, {"sha": "657a5c546d3de7d9a8b0ff746061a3a0146a9238", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73038d3a640f563e47554d781e958f6e4ed08bc2/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr?ref=73038d3a640f563e47554d781e958f6e4ed08bc2", "patch": "@@ -1,15 +1,13 @@\n-error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`\n-  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:15:1\n+error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`, `A`\n+  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:7:1\n    |\n-LL |     type Type;\n-   |     --------- `Type` from trait\n-LL |     fn bar<T>(_: T) -> Self;\n-   |     ------------------------ `bar` from trait\n-LL |     fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-   |     ------------------------------------------------------------------- `baz` from trait\n-...\n-LL | impl TraitA<()> for S {\n-   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz` in implementation\n+LL | impl TraitA<()> for S { \n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz`, `A` in implementation\n+   |\n+   = help: implement the missing item: `type Type = /* Type */;`\n+   = help: implement the missing item: `fn bar<T>(_: T) -> Self { todo!() }`\n+   = help: implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }`\n+   = help: implement the missing item: `const A: usize = 42;`\n \n error: aborting due to previous error\n "}]}