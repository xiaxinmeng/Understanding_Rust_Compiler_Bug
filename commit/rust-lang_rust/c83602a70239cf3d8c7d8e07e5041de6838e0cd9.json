{"sha": "c83602a70239cf3d8c7d8e07e5041de6838e0cd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzYwMmE3MDIzOWNmM2Q4YzdkOGUwN2U1MDQxZGU2ODM4ZTBjZDk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-19T13:10:14Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-20T11:12:30Z"}, "message": "When type-checking binops, LHS of assign-op like `+=` is invariant.\n\nTherefore we cannot coerce it to a supertype the same way that we can\nthe LHS of `+`.\n\nAddresses issue 52126.", "tree": {"sha": "859c9feb2eb9c428c12554ff4cde0413caa3ddb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859c9feb2eb9c428c12554ff4cde0413caa3ddb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83602a70239cf3d8c7d8e07e5041de6838e0cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83602a70239cf3d8c7d8e07e5041de6838e0cd9", "html_url": "https://github.com/rust-lang/rust/commit/c83602a70239cf3d8c7d8e07e5041de6838e0cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83602a70239cf3d8c7d8e07e5041de6838e0cd9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4260c8b1e4b273facf1072b9457dfaedd7f03f3e", "html_url": "https://github.com/rust-lang/rust/commit/4260c8b1e4b273facf1072b9457dfaedd7f03f3e"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "fb153464dff112ade1d4b61dda09057abeeaa949", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c83602a70239cf3d8c7d8e07e5041de6838e0cd9/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83602a70239cf3d8c7d8e07e5041de6838e0cd9/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c83602a70239cf3d8c7d8e07e5041de6838e0cd9", "patch": "@@ -165,18 +165,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                op,\n                is_assign);\n \n-        let lhs_needs = match is_assign {\n-            IsAssign::Yes => Needs::MutPlace,\n-            IsAssign::No => Needs::None\n+        let lhs_ty = match is_assign {\n+            IsAssign::No => {\n+                // Find a suitable supertype of the LHS expression's type, by coercing to\n+                // a type variable, to pass as the `Self` to the trait, avoiding invariant\n+                // trait matching creating lifetime constraints that are too strict.\n+                // E.g. adding `&'a T` and `&'b T`, given `&'x T: Add<&'x T>`, will result\n+                // in `&'a T <: &'x T` and `&'b T <: &'x T`, instead of `'a = 'b = 'x`.\n+                let lhs_ty = self.check_expr_with_needs(lhs_expr, Needs::None);\n+                let fresh_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span));\n+                self.demand_coerce(lhs_expr, lhs_ty, fresh_var,  AllowTwoPhase::No)\n+            }\n+            IsAssign::Yes => {\n+                // rust-lang/rust#52126: We have to use strict\n+                // equivalence on the LHS of an assign-op like `+=`;\n+                // overwritten or mutably-borrowed places cannot be\n+                // coerced to a supertype.\n+                self.check_expr_with_needs(lhs_expr, Needs::MutPlace)\n+            }\n         };\n-        // Find a suitable supertype of the LHS expression's type, by coercing to\n-        // a type variable, to pass as the `Self` to the trait, avoiding invariant\n-        // trait matching creating lifetime constraints that are too strict.\n-        // E.g. adding `&'a T` and `&'b T`, given `&'x T: Add<&'x T>`, will result\n-        // in `&'a T <: &'x T` and `&'b T <: &'x T`, instead of `'a = 'b = 'x`.\n-        let lhs_ty = self.check_expr_with_needs(lhs_expr, lhs_needs);\n-        let fresh_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span));\n-        let lhs_ty = self.demand_coerce(lhs_expr, lhs_ty, fresh_var,  AllowTwoPhase::No);\n         let lhs_ty = self.resolve_type_vars_with_obligations(lhs_ty);\n \n         // NB: As we have not yet type-checked the RHS, we don't have the"}]}