{"sha": "e7fafa190478bfbf6dfe661d8d02dc126fd86840", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZmFmYTE5MDQ3OGJmYmY2ZGZlNjYxZDhkMDJkYzEyNmZkODY4NDA=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-05T13:21:15Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-05T13:21:15Z"}, "message": "Replace last_entry with last_key_value", "tree": {"sha": "d2900a1eb486445177879b1e7550bf1e37bef898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2900a1eb486445177879b1e7550bf1e37bef898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7fafa190478bfbf6dfe661d8d02dc126fd86840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fafa190478bfbf6dfe661d8d02dc126fd86840", "html_url": "https://github.com/rust-lang/rust/commit/e7fafa190478bfbf6dfe661d8d02dc126fd86840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7fafa190478bfbf6dfe661d8d02dc126fd86840/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f053764f3bd200c4c723cfa396592b657b06c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f053764f3bd200c4c723cfa396592b657b06c1", "html_url": "https://github.com/rust-lang/rust/commit/b1f053764f3bd200c4c723cfa396592b657b06c1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c70cc874164f1da4a9faf165405fe8586703c63f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7fafa190478bfbf6dfe661d8d02dc126fd86840/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fafa190478bfbf6dfe661d8d02dc126fd86840/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=e7fafa190478bfbf6dfe661d8d02dc126fd86840", "patch": "@@ -56,7 +56,7 @@ impl FileHandler {\n         let new_fd = candidate_new_fd.unwrap_or_else(|| {\n             // find_map ran out of BTreeMap entries before finding a free fd, use one plus the\n             // maximum fd in the map\n-            self.handles.last_entry().map(|entry| entry.key().checked_add(1).unwrap()).unwrap_or(min_fd)\n+            self.handles.last_key_value().map(|(fd, _)| fd.checked_add(1).unwrap()).unwrap_or(min_fd)\n         });\n \n         self.handles.insert(new_fd, file_handle).unwrap_none();"}]}