{"sha": "da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20", "node_id": "C_kwDOAAsO6NoAKGRhMWRkZjM3MWMxM2FlZDUxYWU2ZjgxYjRkYzEzZWQwZDZkNThlMjA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T20:57:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T20:57:44Z"}, "message": "Rollup merge of #96205 - m-ou-se:emscripten-futex-locks, r=thomcc\n\nUse futex locks on emscripten.\n\nThis switches Emscripten to the futex-based lock implementations, away from pthread.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93740", "tree": {"sha": "7af4ae85c6eb05003d29f6771f36854747334307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af4ae85c6eb05003d29f6771f36854747334307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXyJICRBK7hj4Ov3rIwAAayUIAHvzFakzrfUG3bwDlOaxcVg0\nBbuuTM5ItVEDa08CtwKdwdpkenYsNBJ7Zwnn3CiR8KL8PdagIC4OHSVAjn4p44zo\n8W3LU0vV1EgqAxhYHpPVInfY4L5SU7ed/NvdY6puhy0XU5C7r5zOmR8mJrGnv997\nvTO0m/8KeT2zXEt1inydjY2gN6gowtfdUfw2oidCVX2AqFDLLisOPjKxSCLYYIxt\nGIEuw0TjGtBPOpQ1gNjN+t1JKLrNEiqgFrrazwMJt1L9jUT4lznr+h2UB0GsgYs9\n2jPbKTr2B3rye2/XrBpz269jmtrND+Ajz3jJDKcS4BpJXcoWIJjT78SHEvx/8mY=\n=PVwL\n-----END PGP SIGNATURE-----\n", "payload": "tree 7af4ae85c6eb05003d29f6771f36854747334307\nparent 9d9d5910afb7e94a995def430ce7b9e55c36897d\nparent 06a8f05b0cd4e3e9ef60804550ee614a53ced33a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650401864 +0200\ncommitter GitHub <noreply@github.com> 1650401864 +0200\n\nRollup merge of #96205 - m-ou-se:emscripten-futex-locks, r=thomcc\n\nUse futex locks on emscripten.\n\nThis switches Emscripten to the futex-based lock implementations, away from pthread.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93740\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20", "html_url": "https://github.com/rust-lang/rust/commit/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d9d5910afb7e94a995def430ce7b9e55c36897d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9d5910afb7e94a995def430ce7b9e55c36897d", "html_url": "https://github.com/rust-lang/rust/commit/9d9d5910afb7e94a995def430ce7b9e55c36897d"}, {"sha": "06a8f05b0cd4e3e9ef60804550ee614a53ced33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a8f05b0cd4e3e9ef60804550ee614a53ced33a", "html_url": "https://github.com/rust-lang/rust/commit/06a8f05b0cd4e3e9ef60804550ee614a53ced33a"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "c12ee169e797aa78c904d3e5d125e16ceed4145d", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20", "patch": "@@ -52,25 +52,6 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n     }\n }\n \n-#[cfg(target_os = \"emscripten\")]\n-pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) {\n-    extern \"C\" {\n-        fn emscripten_futex_wait(\n-            addr: *const AtomicU32,\n-            val: libc::c_uint,\n-            max_wait_ms: libc::c_double,\n-        ) -> libc::c_int;\n-    }\n-\n-    unsafe {\n-        emscripten_futex_wait(\n-            futex,\n-            expected,\n-            timeout.map_or(crate::f64::INFINITY, |d| d.as_secs_f64() * 1000.0),\n-        );\n-    }\n-}\n-\n /// Wake up one thread that's blocked on futex_wait on this futex.\n ///\n /// Returns true if this actually woke up such a thread,\n@@ -101,10 +82,32 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n }\n \n #[cfg(target_os = \"emscripten\")]\n-pub fn futex_wake(futex: &AtomicU32) -> bool {\n-    extern \"C\" {\n-        fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;\n+extern \"C\" {\n+    fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;\n+    fn emscripten_futex_wait(\n+        addr: *const AtomicU32,\n+        val: libc::c_uint,\n+        max_wait_ms: libc::c_double,\n+    ) -> libc::c_int;\n+}\n+\n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    unsafe {\n+        emscripten_futex_wait(\n+            futex,\n+            expected,\n+            timeout.map_or(f64::INFINITY, |d| d.as_secs_f64() * 1000.0),\n+        ) != -libc::ETIMEDOUT\n     }\n+}\n \n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n     unsafe { emscripten_futex_wake(futex, 1) > 0 }\n }\n+\n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wake_all(futex: &AtomicU32) {\n+    unsafe { emscripten_futex_wake(futex, i32::MAX) };\n+}"}, {"sha": "3e39c8b9b23e7a00ab22c9c317d49d97e73d45a2", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=da1ddf371c13aed51ae6f81b4dc13ed0d6d58e20", "patch": "@@ -2,6 +2,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"linux\",\n         target_os = \"android\",\n+        all(target_os = \"emscripten\", target_feature = \"atomics\"),\n     ))] {\n         mod futex;\n         mod futex_rwlock;"}]}