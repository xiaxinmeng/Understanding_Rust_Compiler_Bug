{"sha": "46aec2c96002a57f50dfef933b55a5d44bf2573c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YWVjMmM5NjAwMmE1N2Y1MGRmZWY5MzNiNTVhNWQ0NGJmMjU3M2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-12T00:01:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-12T00:02:16Z"}, "message": "rustc: Record the parent function of each function", "tree": {"sha": "ba3e5803da78379eb071f8aeacbb38d90f12f646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3e5803da78379eb071f8aeacbb38d90f12f646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46aec2c96002a57f50dfef933b55a5d44bf2573c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46aec2c96002a57f50dfef933b55a5d44bf2573c", "html_url": "https://github.com/rust-lang/rust/commit/46aec2c96002a57f50dfef933b55a5d44bf2573c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46aec2c96002a57f50dfef933b55a5d44bf2573c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f071bb8412ae8e208a0d05b8821c024bece1130", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f071bb8412ae8e208a0d05b8821c024bece1130", "html_url": "https://github.com/rust-lang/rust/commit/8f071bb8412ae8e208a0d05b8821c024bece1130"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "0a9bb92527d7ef01c7ed2e12822c3c7863dac617", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46aec2c96002a57f50dfef933b55a5d44bf2573c/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46aec2c96002a57f50dfef933b55a5d44bf2573c/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=46aec2c96002a57f50dfef933b55a5d44bf2573c", "patch": "@@ -12,6 +12,8 @@ import std::map::hashmap;\n type region_map = {\n     /* Mapping from a block to its parent block, if there is one. */\n     parent_blocks: hashmap<ast::node_id,ast::node_id>,\n+    /* Mapping from a lambda to its parent function, if there is one. */\n+    parent_fns: hashmap<ast::node_id,ast::node_id>,\n     /* Mapping from a region type in the AST to its resolved region. */\n     ast_type_to_region: hashmap<ast::node_id,ty::region>,\n     /* Mapping from a local variable to its containing block. */\n@@ -40,7 +42,8 @@ type ctxt = {\n      */\n     mut queued_locals: [ast::node_id],\n \n-    parent: parent\n+    parent: parent,\n+    mut parent_fn: option<ast::node_id>\n };\n \n // Returns true if `subblock` is equal to or is lexically nested inside\n@@ -206,10 +209,23 @@ fn resolve_pat(pat: @ast::pat, cx: ctxt, visitor: visit::vt<ctxt>) {\n     visit::visit_pat(pat, cx, visitor);\n }\n \n+fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n+    alt expr.node {\n+        ast::expr_fn(_, _, _, _) | ast::expr_fn_block(_, _) {\n+            let parent_fns = cx.region_map.parent_fns;\n+            parent_fns.insert(expr.id, option::get(cx.parent_fn));\n+            let new_cx = {parent_fn: some(expr.id) with cx};\n+            visit::visit_expr(expr, new_cx, visitor);\n+        }\n+        _ { visit::visit_expr(expr, cx, visitor); }\n+    }\n+}\n+\n fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n     // Items create a new outer block scope as far as we're concerned.\n     let new_cx: ctxt = {names_in_scope: map::new_str_hash(),\n-                        parent: pa_item(item.id)\n+                        parent: pa_item(item.id),\n+                        parent_fn: some(item.id)\n                         with cx};\n     visit::visit_item(item, new_cx, visitor);\n }\n@@ -219,17 +235,20 @@ fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n     let cx: ctxt = {sess: sess,\n                     def_map: def_map,\n                     region_map: @{parent_blocks: map::new_int_hash(),\n+                                  parent_fns: map::new_int_hash(),\n                                   ast_type_to_region: map::new_int_hash(),\n                                   local_blocks: map::new_int_hash()},\n                     names_in_scope: map::new_str_hash(),\n                     mut queued_locals: [],\n-                    parent: pa_crate};\n+                    parent: pa_crate,\n+                    mut parent_fn: none};\n     let visitor = visit::mk_vt(@{\n         visit_block: resolve_block,\n         visit_item: resolve_item,\n         visit_ty: resolve_ty,\n         visit_arm: resolve_arm,\n-        visit_pat: resolve_pat\n+        visit_pat: resolve_pat,\n+        visit_expr: resolve_expr\n         with *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, cx, visitor);"}]}