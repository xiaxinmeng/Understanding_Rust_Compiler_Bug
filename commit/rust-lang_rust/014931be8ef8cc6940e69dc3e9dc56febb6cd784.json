{"sha": "014931be8ef8cc6940e69dc3e9dc56febb6cd784", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDkzMWJlOGVmOGNjNjk0MGU2OWRjM2U5ZGM1NmZlYmI2Y2Q3ODQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:48:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T21:49:48Z"}, "message": "Rollup merge of #47656 - ishitatsuyuki:patch-1, r=nikomatsakis\n\n[perf] Use std based dedup in projection\n\nUnstable sort was added recently, and the code that is being modified is 3 years old. As quicksort doesn't allocate it will likely perform as well as, or better than linear search.\n\nI didn't benchmark. Have a perf run.", "tree": {"sha": "9eb8eb0a31c190164e4b8384b649cc5b76a6a6a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eb8eb0a31c190164e4b8384b649cc5b76a6a6a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014931be8ef8cc6940e69dc3e9dc56febb6cd784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014931be8ef8cc6940e69dc3e9dc56febb6cd784", "html_url": "https://github.com/rust-lang/rust/commit/014931be8ef8cc6940e69dc3e9dc56febb6cd784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014931be8ef8cc6940e69dc3e9dc56febb6cd784/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd36af9cb183200cd96eb87885dfcfa132f4c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd36af9cb183200cd96eb87885dfcfa132f4c51", "html_url": "https://github.com/rust-lang/rust/commit/8dd36af9cb183200cd96eb87885dfcfa132f4c51"}, {"sha": "c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "html_url": "https://github.com/rust-lang/rust/commit/c6772b4dcb95137e88d5cd1814ce0051f74a3c29"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "ae539f07336d53f9920d4c0cb66aa512c07d8c5d", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=014931be8ef8cc6940e69dc3e9dc56febb6cd784", "patch": "@@ -101,7 +101,7 @@ pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::error::TypeError<'tcx>\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Debug)]\n enum ProjectionTyCandidate<'tcx> {\n     // from a where-clause in the env or object type\n     ParamEnv(ty::PolyProjectionPredicate<'tcx>),\n@@ -838,21 +838,12 @@ fn project_type<'cx, 'gcx, 'tcx>(\n     // Drop duplicates.\n     //\n     // Note: `candidates.vec` seems to be on the critical path of the\n-    // compiler. Replacing it with an hash set was also tried, which would\n-    // render the following dedup unnecessary. It led to cleaner code but\n-    // prolonged compiling time of `librustc` from 5m30s to 6m in one test, or\n-    // ~9% performance lost.\n-    if candidates.vec.len() > 1 {\n-        let mut i = 0;\n-        while i < candidates.vec.len() {\n-            let has_dup = (0..i).any(|j| candidates.vec[i] == candidates.vec[j]);\n-            if has_dup {\n-                candidates.vec.swap_remove(i);\n-            } else {\n-                i += 1;\n-            }\n-        }\n-    }\n+    // compiler. Replacing it with an HashSet was also tried, which would\n+    // render the following dedup unnecessary. The original comment indicated\n+    // that it was 9% slower, but that data is now obsolete and a new\n+    // benchmark should be performed.\n+    candidates.vec.sort_unstable();\n+    candidates.vec.dedup();\n \n     // Prefer where-clauses. As in select, if there are multiple\n     // candidates, we prefer where-clause candidates over impls.  This"}, {"sha": "e0fb8c0c0a50df002df4c6a41d6b45aa56b7186b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=014931be8ef8cc6940e69dc3e9dc56febb6cd784", "patch": "@@ -41,6 +41,7 @@ use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::cmp;\n+use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n@@ -499,6 +500,20 @@ impl<'tcx> Hash for TyS<'tcx> {\n     }\n }\n \n+impl<'tcx> Ord for TyS<'tcx> {\n+    #[inline]\n+    fn cmp(&self, other: &TyS<'tcx>) -> Ordering {\n+        // (self as *const _).cmp(other as *const _)\n+        (self as *const TyS<'tcx>).cmp(&(other as *const TyS<'tcx>))\n+    }\n+}\n+impl<'tcx> PartialOrd for TyS<'tcx> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.sty {\n@@ -568,6 +583,19 @@ impl<T> PartialEq for Slice<T> {\n }\n impl<T> Eq for Slice<T> {}\n \n+impl<T> Ord for Slice<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Slice<T>) -> Ordering {\n+        (&self.0 as *const [T]).cmp(&(&other.0 as *const [T]))\n+    }\n+}\n+impl<T> PartialOrd for Slice<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Slice<T>) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n impl<T> Hash for Slice<T> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         (self.as_ptr(), self.len()).hash(s)\n@@ -1103,7 +1131,7 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n /// equality between arbitrary types. Processing an instance of\n /// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub ty: Ty<'tcx>,"}, {"sha": "db7e4fe45ef769d2e523ed3a4e1d2d26c35d1939", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=014931be8ef8cc6940e69dc3e9dc56febb6cd784", "patch": "@@ -638,7 +638,7 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound regions, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Binder<T>(pub T);\n \n impl<T> Binder<T> {\n@@ -738,7 +738,7 @@ impl<T> Binder<T> {\n \n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: &'tcx Substs<'tcx>,"}, {"sha": "7c167f69ebd8c063c504cd9c671437f212a0175c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014931be8ef8cc6940e69dc3e9dc56febb6cd784/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=014931be8ef8cc6940e69dc3e9dc56febb6cd784", "patch": "@@ -29,7 +29,7 @@ use std::mem;\n /// To reduce memory usage, a `Kind` is a interned pointer,\n /// with the lowest 2 bits being reserved for a tag to\n /// indicate the type (`Ty` or `Region`) it points to.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Kind<'tcx> {\n     ptr: NonZero<usize>,\n     marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>)>"}]}