{"sha": "6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTU2YzlhNWZlYmFkNDU4NjViN2Q0MTQyMmI3YWU0ZDk5NmZjYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-07T20:41:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-07T20:41:29Z"}, "message": "auto merge of #18688 : bkoropoff/rust/unboxed-closure-subst-fixes, r=nikomatsakis\n\nThis resolves some issues that remained after adding support for monomorphizing unboxed closures in trans.\r\n\r\nThere were a few places where a set of substitutions for an unboxed closure type were dropped on the floor and later recalculated from scratch based on the def ID, but this failed spectacularly when the closure originated from a different param environment.  The substitutions are now plumbed through end-to-end.  Closes #18661\r\n\r\nThere was also a conflict in the meaning of the self param space within the body of the unboxed closure.  Trans attempted to insert the unboxed closure type as the self type, but this could conflict with the self type from the param environment when an unboxed closure was used within a default method on a trait.  Since the body of an unboxed closure cannot refer to its own self type or value, there's no need for it to actually use the self space.  The downstream consumers of the substitutions in trans do not seem to need it either since they look up the type of the closure some other way, so I just stopped setting it.  Closes #18685.\r\n\r\nr? @pcwalton @nikomatsakis", "tree": {"sha": "25c8da39c01cab97ba9c5a610e3f18562d01c31e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c8da39c01cab97ba9c5a610e3f18562d01c31e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "html_url": "https://github.com/rust-lang/rust/commit/6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3cbf8cf44e41072c11277363a5100cf3a8a161", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cbf8cf44e41072c11277363a5100cf3a8a161", "html_url": "https://github.com/rust-lang/rust/commit/0a3cbf8cf44e41072c11277363a5100cf3a8a161"}, {"sha": "ddb17b239b5b2b05932516bfb6b7679915fd4c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb17b239b5b2b05932516bfb6b7679915fd4c27", "html_url": "https://github.com/rust-lang/rust/commit/ddb17b239b5b2b05932516bfb6b7679915fd4c27"}], "stats": {"total": 149, "additions": 99, "deletions": 50}, "files": [{"sha": "c4a5b14303e3ffd6020f1528e80ebe32c9cf894d", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -176,7 +176,7 @@ pub enum Vtable<N> {\n     /// ID is the ID of the closure expression. This is a `VtableImpl`\n     /// in spirit, but the impl is generated by the compiler and does\n     /// not appear in the source.\n-    VtableUnboxedClosure(ast::DefId),\n+    VtableUnboxedClosure(ast::DefId, subst::Substs),\n \n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter.\n@@ -338,7 +338,7 @@ impl<N> Vtable<N> {\n     pub fn iter_nested(&self) -> Items<N> {\n         match *self {\n             VtableImpl(ref i) => i.iter_nested(),\n-            VtableUnboxedClosure(_) => (&[]).iter(),\n+            VtableUnboxedClosure(..) => (&[]).iter(),\n             VtableParam(_) => (&[]).iter(),\n             VtableBuiltin(ref i) => i.iter_nested(),\n         }\n@@ -347,7 +347,7 @@ impl<N> Vtable<N> {\n     pub fn map_nested<M>(&self, op: |&N| -> M) -> Vtable<M> {\n         match *self {\n             VtableImpl(ref i) => VtableImpl(i.map_nested(op)),\n-            VtableUnboxedClosure(d) => VtableUnboxedClosure(d),\n+            VtableUnboxedClosure(d, ref s) => VtableUnboxedClosure(d, s.clone()),\n             VtableParam(ref p) => VtableParam((*p).clone()),\n             VtableBuiltin(ref i) => VtableBuiltin(i.map_nested(op)),\n         }\n@@ -356,7 +356,7 @@ impl<N> Vtable<N> {\n     pub fn map_move_nested<M>(self, op: |N| -> M) -> Vtable<M> {\n         match self {\n             VtableImpl(i) => VtableImpl(i.map_move_nested(op)),\n-            VtableUnboxedClosure(d) => VtableUnboxedClosure(d),\n+            VtableUnboxedClosure(d, s) => VtableUnboxedClosure(d, s),\n             VtableParam(p) => VtableParam(p),\n             VtableBuiltin(i) => VtableBuiltin(i.map_move_nested(op)),\n         }"}, {"sha": "ce8ba7c14d3262f089cf06b9b32f4a6219bb995e", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -1582,9 +1582,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableImpl(vtable_impl))\n             }\n \n-            UnboxedClosureCandidate(closure_def_id, ref substs) => {\n-                try!(self.confirm_unboxed_closure_candidate(obligation, closure_def_id, substs));\n-                Ok(VtableUnboxedClosure(closure_def_id))\n+            UnboxedClosureCandidate(closure_def_id, substs) => {\n+                try!(self.confirm_unboxed_closure_candidate(obligation, closure_def_id, &substs));\n+                Ok(VtableUnboxedClosure(closure_def_id, substs))\n             }\n         }\n     }"}, {"sha": "0ecfa99ee6da50f10230b940e549f496548f459f", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -311,9 +311,10 @@ impl<N:Repr> Repr for super::Vtable<N> {\n             super::VtableImpl(ref v) =>\n                 v.repr(tcx),\n \n-            super::VtableUnboxedClosure(ref d) =>\n-                format!(\"VtableUnboxedClosure({})\",\n-                        d.repr(tcx)),\n+            super::VtableUnboxedClosure(ref d, ref s) =>\n+                format!(\"VtableUnboxedClosure({},{})\",\n+                        d.repr(tcx),\n+                        s.repr(tcx)),\n \n             super::VtableParam(ref v) =>\n                 format!(\"VtableParam({})\", v.repr(tcx)),"}, {"sha": "987866ed243e53ca7942b0aecd89642bd2c5fee5", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -490,7 +490,9 @@ pub fn trans_fn_ref_with_substs(\n     };\n \n     // If this is an unboxed closure, redirect to it.\n-    match closure::get_or_create_declaration_if_unboxed_closure(bcx, def_id) {\n+    match closure::get_or_create_declaration_if_unboxed_closure(bcx,\n+                                                                def_id,\n+                                                                &substs) {\n         None => {}\n         Some(llfn) => return llfn,\n     }"}, {"sha": "4535b14fbccfb278cdc1342e1285ae37227e3fcf", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -27,6 +27,7 @@ use middle::trans::monomorphize::MonoId;\n use middle::trans::type_of::*;\n use middle::trans::type_::Type;\n use middle::ty;\n+use middle::subst::{Subst, Substs};\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n \n@@ -420,15 +421,21 @@ pub fn trans_expr_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// Returns the LLVM function declaration for an unboxed closure, creating it\n /// if necessary. If the ID does not correspond to a closure ID, returns None.\n pub fn get_or_create_declaration_if_unboxed_closure<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                                                closure_id: ast::DefId)\n+                                                                closure_id: ast::DefId,\n+                                                                substs: &Substs)\n                                                                 -> Option<ValueRef> {\n     let ccx = bcx.ccx();\n     if !ccx.tcx().unboxed_closures.borrow().contains_key(&closure_id) {\n         // Not an unboxed closure.\n         return None\n     }\n \n-    let function_type = node_id_type(bcx, closure_id.node);\n+    let function_type = ty::node_id_to_type(bcx.tcx(), closure_id.node);\n+    let function_type = function_type.subst(bcx.tcx(), substs);\n+\n+    // Normalize type so differences in regions and typedefs don't cause\n+    // duplicate declarations\n+    let function_type = ty::normalize_ty(bcx.tcx(), function_type);\n     let params = match ty::get(function_type).sty {\n         ty::ty_unboxed_closure(_, _, ref substs) => substs.types.clone(),\n         _ => unreachable!()\n@@ -447,7 +454,6 @@ pub fn get_or_create_declaration_if_unboxed_closure<'blk, 'tcx>(bcx: Block<'blk,\n         None => {}\n     }\n \n-    let function_type = node_id_type(bcx, closure_id.node);\n     let symbol = ccx.tcx().map.with_path(closure_id.node, |path| {\n         mangle_internal_name_by_path_and_seq(path, \"unboxed_closure\")\n     });\n@@ -480,7 +486,8 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n     let closure_id = ast_util::local_def(id);\n     let llfn = get_or_create_declaration_if_unboxed_closure(\n         bcx,\n-        closure_id).unwrap();\n+        closure_id,\n+        &bcx.fcx.param_substs.substs).unwrap();\n \n     let unboxed_closures = bcx.tcx().unboxed_closures.borrow();\n     let function_type = (*unboxed_closures)[closure_id]"}, {"sha": "4ddba0ee83944298f43c82c1a3f270efaff85ba7", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -355,16 +355,13 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n-        traits::VtableUnboxedClosure(closure_def_id) => {\n-            let self_ty = node_id_type(bcx, closure_def_id.node);\n-            let callee_substs = get_callee_substitutions_for_unboxed_closure(\n-                bcx,\n-                self_ty);\n-\n+        traits::VtableUnboxedClosure(closure_def_id, substs) => {\n+            // The substitutions should have no type parameters remaining\n+            // after passing through fulfill_obligation\n             let llfn = trans_fn_ref_with_substs(bcx,\n                                                 closure_def_id,\n                                                 MethodCall(method_call),\n-                                                callee_substs);\n+                                                substs);\n \n             Callee {\n                 bcx: bcx,\n@@ -518,24 +515,6 @@ pub fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     };\n }\n \n-/// Looks up the substitutions for an unboxed closure and adds the\n-/// self type\n-fn get_callee_substitutions_for_unboxed_closure(bcx: Block,\n-                                                self_ty: ty::t)\n-                                                -> subst::Substs {\n-    match ty::get(self_ty).sty {\n-        ty::ty_unboxed_closure(_, _, ref substs) => {\n-            substs.with_self_ty(ty::mk_rptr(bcx.tcx(),\n-                                            ty::ReStatic,\n-                                            ty::mt {\n-                                                ty: self_ty,\n-                                                mutbl: ast::MutMutable,\n-                                            }))\n-        },\n-        _ => unreachable!()\n-    }\n-}\n-\n /// Creates a returns a dynamic vtable for the given type and vtable origin.\n /// This is used only for objects.\n ///\n@@ -580,19 +559,19 @@ pub fn get_vtable(bcx: Block,\n                     nested: _ }) => {\n                 emit_vtable_methods(bcx, id, substs).into_iter()\n             }\n-            traits::VtableUnboxedClosure(closure_def_id) => {\n-                let self_ty = node_id_type(bcx, closure_def_id.node);\n-\n-                let callee_substs =\n-                    get_callee_substitutions_for_unboxed_closure(\n-                        bcx,\n-                        self_ty.clone());\n+            traits::VtableUnboxedClosure(closure_def_id, substs) => {\n+                // Look up closure type\n+                let self_ty = ty::node_id_to_type(bcx.tcx(), closure_def_id.node);\n+                // Apply substitutions from closure param environment.\n+                // The substitutions should have no type parameters\n+                // remaining after passing through fulfill_obligation\n+                let self_ty = self_ty.subst(bcx.tcx(), &substs);\n \n                 let mut llfn = trans_fn_ref_with_substs(\n                     bcx,\n                     closure_def_id,\n                     ExprId(0),\n-                    callee_substs.clone());\n+                    substs.clone());\n \n                 {\n                     let unboxed_closures = bcx.tcx()\n@@ -645,7 +624,7 @@ pub fn get_vtable(bcx: Block,\n                                                    llfn,\n                                                    &closure_type,\n                                                    closure_def_id,\n-                                                   callee_substs);\n+                                                   substs);\n                     }\n                 }\n "}, {"sha": "6a72574aaaa1d8eb68b9cf7bec1d4cabd8744190", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -414,7 +414,9 @@ impl<N:TypeFoldable> TypeFoldable for traits::Vtable<N> {\n     fn fold_with<'tcx, F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<N> {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n-            traits::VtableUnboxedClosure(d) => traits::VtableUnboxedClosure(d),\n+            traits::VtableUnboxedClosure(d, ref s) => {\n+                traits::VtableUnboxedClosure(d, s.fold_with(folder))\n+            }\n             traits::VtableParam(ref p) => traits::VtableParam(p.fold_with(folder)),\n             traits::VtableBuiltin(ref d) => traits::VtableBuiltin(d.fold_with(folder)),\n         }"}, {"sha": "6a2f73a787a4835c1d54df7682cf467965d6a69e", "filename": "src/test/run-pass/issue-18661.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18661.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that param substitutions from the correct environment are\n+// used when translating unboxed closure calls.\n+\n+#![feature(unboxed_closures)]\n+\n+pub fn inside<F: Fn()>(c: F) {\n+    c.call(());\n+}\n+\n+// Use different number of type parameters and closure type to trigger\n+// an obvious ICE when param environments are mixed up\n+pub fn outside<A,B>() {\n+    inside(|&:| {});\n+}\n+\n+fn main() {\n+    outside::<(),()>();\n+}"}, {"sha": "1f74e2f84749748b6638334a2d62ac27db3dd2de", "filename": "src/test/run-pass/issue-18685.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee56c9a5febad45865b7d41422b7ae4d996fcaa/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18685.rs?ref=6ee56c9a5febad45865b7d41422b7ae4d996fcaa", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the self param space is not used in a conflicting\n+// manner by unboxed closures within a default method on a trait\n+\n+#![feature(unboxed_closures, overloaded_calls)]\n+\n+trait Tr {\n+    fn foo(&self);\n+\n+    fn bar(&self) {\n+        (|:| { self.foo() })()\n+    }\n+}\n+\n+impl Tr for () {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    ().bar();\n+}"}]}