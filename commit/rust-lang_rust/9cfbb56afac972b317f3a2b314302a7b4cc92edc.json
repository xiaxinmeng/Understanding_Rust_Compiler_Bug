{"sha": "9cfbb56afac972b317f3a2b314302a7b4cc92edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZmJiNTZhZmFjOTcyYjMxN2YzYTJiMzE0MzAyYTdiNGNjOTJlZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-19T17:54:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-19T17:54:34Z"}, "message": "Merge #8587\n\n8587: Fix some find_path bugs around inner items r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8519\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "450dfa87c6e3a8c9f64b93d583f82b8dcc5df576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450dfa87c6e3a8c9f64b93d583f82b8dcc5df576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cfbb56afac972b317f3a2b314302a7b4cc92edc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfcPaCRBK7hj4Ov3rIwAAgW8IADW10Tr3tNGEliLrVpJhNfRu\njmr9GgFTnnQp4sH+NGvfSrFhYl6yCxn40Pv2VpVF1rqgelQWClKpH8e3iMY1uvh4\nBa1sH5uxqSkO0QIbwoAKlFa7VFNDXGP0ugFLSoawIYrRZPzzYMlTbzobOtichAEO\n7PkGVWiVzCXOH/vv7OalQ15FXNql5EkJSIH6ZaZL+2B0xGdh6lFsHVox/0SHVuJc\nJPyKujNlIYC/eZ7FvHQZanoL0O0hrxCw7XCfU6Gq6nU+gb/0EdvKIiRWZJT4hYfg\n/TLbFQjb+p+ZWpZwnxvEgq1BnjffLzo4yZbS1giy84F+KVkZ9cRFL5ehReeubio=\n=TC1H\n-----END PGP SIGNATURE-----\n", "payload": "tree 450dfa87c6e3a8c9f64b93d583f82b8dcc5df576\nparent 0741de87e7697a221b56e9cb458e7c3f81afc9c9\nparent ec051863780bdd4389f72cb279cf4e84f21a2c2d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618854874 +0000\ncommitter GitHub <noreply@github.com> 1618854874 +0000\n\nMerge #8587\n\n8587: Fix some find_path bugs around inner items r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8519\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfbb56afac972b317f3a2b314302a7b4cc92edc", "html_url": "https://github.com/rust-lang/rust/commit/9cfbb56afac972b317f3a2b314302a7b4cc92edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cfbb56afac972b317f3a2b314302a7b4cc92edc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0741de87e7697a221b56e9cb458e7c3f81afc9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0741de87e7697a221b56e9cb458e7c3f81afc9c9", "html_url": "https://github.com/rust-lang/rust/commit/0741de87e7697a221b56e9cb458e7c3f81afc9c9"}, {"sha": "ec051863780bdd4389f72cb279cf4e84f21a2c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec051863780bdd4389f72cb279cf4e84f21a2c2d", "html_url": "https://github.com/rust-lang/rust/commit/ec051863780bdd4389f72cb279cf4e84f21a2c2d"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "dc3f2908f8a73e9ed623f5bafbe1879666970229", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9cfbb56afac972b317f3a2b314302a7b4cc92edc/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cfbb56afac972b317f3a2b314302a7b4cc92edc/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=9cfbb56afac972b317f3a2b314302a7b4cc92edc", "patch": "@@ -119,8 +119,7 @@ fn find_path_inner(\n \n     // - if the item is the crate root, return `crate`\n     let root = def_map.crate_root(db);\n-    if item == ItemInNs::Types(ModuleDefId::ModuleId(root)) && def_map.block_id().is_none() {\n-        // FIXME: the `block_id()` check should be unnecessary, but affects the result\n+    if item == ItemInNs::Types(ModuleDefId::ModuleId(root)) {\n         return Some(ModPath::from_segments(PathKind::Crate, Vec::new()));\n     }\n \n@@ -131,7 +130,7 @@ fn find_path_inner(\n     }\n \n     // - if the item is the crate root of a dependency crate, return the name from the extern prelude\n-    for (name, def_id) in def_map.extern_prelude() {\n+    for (name, def_id) in root.def_map(db).extern_prelude() {\n         if item == ItemInNs::Types(*def_id) {\n             let name = scope_name.unwrap_or_else(|| name.clone());\n             return Some(ModPath::from_segments(PathKind::Plain, vec![name]));\n@@ -298,6 +297,7 @@ fn find_local_import_locations(\n     let data = &def_map[from.local_id];\n     let mut worklist =\n         data.children.values().map(|child| def_map.module_id(*child)).collect::<Vec<_>>();\n+    // FIXME: do we need to traverse out of block expressions here?\n     for ancestor in iter::successors(from.containing_module(db), |m| m.containing_module(db)) {\n         worklist.push(ancestor);\n     }\n@@ -947,10 +947,11 @@ fn main() {\n     $0\n }\n             \"#,\n+            // FIXME: these could use fewer/better prefixes\n             \"module::CompleteMe\",\n-            \"module::CompleteMe\",\n             \"crate::module::CompleteMe\",\n-            \"self::module::CompleteMe\",\n+            \"crate::module::CompleteMe\",\n+            \"crate::module::CompleteMe\",\n         )\n     }\n \n@@ -977,6 +978,28 @@ mod bar {\n         )\n     }\n \n+    #[test]\n+    fn from_inside_module_with_inner_items() {\n+        check_found_path(\n+            r#\"\n+mod baz {\n+    pub struct Foo {}\n+}\n+\n+mod bar {\n+    fn bar() {\n+        fn inner() {}\n+        $0\n+    }\n+}\n+            \"#,\n+            \"crate::baz::Foo\",\n+            \"crate::baz::Foo\",\n+            \"crate::baz::Foo\",\n+            \"crate::baz::Foo\",\n+        )\n+    }\n+\n     #[test]\n     fn recursive_pub_mod_reexport() {\n         cov_mark::check!(recursive_imports);\n@@ -1004,4 +1027,34 @@ pub mod name {\n             \"self::name::AsName\",\n         );\n     }\n+\n+    #[test]\n+    fn extern_crate() {\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:dep\n+$0\n+//- /dep.rs crate:dep\n+\"#,\n+            \"dep\",\n+            \"dep\",\n+            \"dep\",\n+            \"dep\",\n+        );\n+\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:dep\n+fn f() {\n+    fn inner() {}\n+    $0\n+}\n+//- /dep.rs crate:dep\n+\"#,\n+            \"dep\",\n+            \"dep\",\n+            \"dep\",\n+            \"dep\",\n+        );\n+    }\n }"}, {"sha": "49aa70f74e77cec079a89f1e439aeb7ba25941b0", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9cfbb56afac972b317f3a2b314302a7b4cc92edc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cfbb56afac972b317f3a2b314302a7b4cc92edc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=9cfbb56afac972b317f3a2b314302a7b4cc92edc", "patch": "@@ -934,4 +934,37 @@ fn main() {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn inner_items() {\n+        check_assist(\n+            auto_import,\n+            r#\"\n+mod baz {\n+    pub struct Foo {}\n+}\n+\n+mod bar {\n+    fn bar() {\n+        Foo$0;\n+        println!(\"Hallo\");\n+    }\n+}\n+\"#,\n+            r#\"\n+mod baz {\n+    pub struct Foo {}\n+}\n+\n+mod bar {\n+    use crate::baz::Foo;\n+\n+    fn bar() {\n+        Foo;\n+        println!(\"Hallo\");\n+    }\n+}\n+\"#,\n+        );\n+    }\n }"}]}