{"sha": "f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNjhmNDNhN2I3YjdjMzcyMWNiMDljNzlkZmQyOWFhY2MwODE4ZjE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-19T01:51:22Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-19T01:51:22Z"}, "message": "rustfmt libterm", "tree": {"sha": "1d41110ec0613a7cb47608d28446868ba2bdf5ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d41110ec0613a7cb47608d28446868ba2bdf5ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "html_url": "https://github.com/rust-lang/rust/commit/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08886499cf0f7fea5de2cc555ea7bfe9ceb0b40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/08886499cf0f7fea5de2cc555ea7bfe9ceb0b40f", "html_url": "https://github.com/rust-lang/rust/commit/08886499cf0f7fea5de2cc555ea7bfe9ceb0b40f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "df1fedf3d4e6610c23ee2a5fe341f28e9c44aca1", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "patch": "@@ -74,9 +74,9 @@ pub mod terminfo;\n mod win;\n \n /// Alias for stdout terminals.\n-pub type StdoutTerminal = Terminal<Output=Stdout> + Send;\n+pub type StdoutTerminal = Terminal<Output = Stdout> + Send;\n /// Alias for stderr terminals.\n-pub type StderrTerminal = Terminal<Output=Stderr> + Send;\n+pub type StderrTerminal = Terminal<Output = Stderr> + Send;\n \n #[cfg(not(windows))]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be"}, {"sha": "04486132c84de27c720e8d720ab6cdc217b46b3e", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "patch": "@@ -151,7 +151,7 @@ pub struct TerminfoTerminal<T> {\n     ti: TermInfo,\n }\n \n-impl<T: Write+Send> Terminal for TerminfoTerminal<T> {\n+impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n     type Output = T;\n     fn fg(&mut self, color: color::Color) -> io::Result<bool> {\n         let color = self.dim_if_necessary(color);\n@@ -220,7 +220,7 @@ impl<T: Write+Send> Terminal for TerminfoTerminal<T> {\n     }\n }\n \n-impl<T: Write+Send> TerminfoTerminal<T> {\n+impl<T: Write + Send> TerminfoTerminal<T> {\n     /// Create a new TerminfoTerminal with the given TermInfo and Write.\n     pub fn new_with_terminfo(out: T, terminfo: TermInfo) -> TerminfoTerminal<T> {\n         let nc = if terminfo.strings.contains_key(\"setaf\") &&"}, {"sha": "d36b182710b9790655d60910c3241b4249f9f22a", "filename": "src/libterm/win.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f368f43a7b7b7c3721cb09c79dfd29aacc0818f1/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=f368f43a7b7b7c3721cb09c79dfd29aacc0818f1", "patch": "@@ -91,7 +91,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n     color | (bits & 0x8) // copy the hi-intensity bit\n }\n \n-impl<T: Write+Send+'static> WinConsole<T> {\n+impl<T: Write + Send + 'static> WinConsole<T> {\n     fn apply(&mut self) {\n         let _unused = self.buf.flush();\n         let mut accum: WORD = 0;\n@@ -148,7 +148,7 @@ impl<T: Write> Write for WinConsole<T> {\n     }\n }\n \n-impl<T: Write+Send+'static> Terminal for WinConsole<T> {\n+impl<T: Write + Send + 'static> Terminal for WinConsole<T> {\n     type Output = T;\n \n     fn fg(&mut self, color: color::Color) -> io::Result<bool> {"}]}