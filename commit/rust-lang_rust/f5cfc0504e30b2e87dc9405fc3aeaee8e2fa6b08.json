{"sha": "f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08", "node_id": "C_kwDOAAsO6NoAKGY1Y2ZjMDUwNGUzMGIyZTg3ZGM5NDA1ZmMzYWVhZWU4ZTJmYTZiMDg", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T16:18:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T16:18:34Z"}, "message": "rename", "tree": {"sha": "3fb301c710f81ca20392a7a2197b5ca783f73c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb301c710f81ca20392a7a2197b5ca783f73c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08", "html_url": "https://github.com/rust-lang/rust/commit/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8234a85d158ec83581d970a4a669f97b07c56c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8234a85d158ec83581d970a4a669f97b07c56c2f", "html_url": "https://github.com/rust-lang/rust/commit/8234a85d158ec83581d970a4a669f97b07c56c2f"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "b704242065c634d52736e067ad3937a745281491", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08", "patch": "@@ -59,7 +59,7 @@ pub(crate) mod entry {\n         }\n \n         pub(crate) fn stmt(p: &mut Parser) {\n-            expressions::stmt(p, expressions::StmtWithSemi::No);\n+            expressions::stmt(p, expressions::Semicolon::Forbidden);\n         }\n \n         pub(crate) fn pat(p: &mut Parser) {\n@@ -103,7 +103,7 @@ pub(crate) mod entry {\n                     continue;\n                 }\n \n-                expressions::stmt(p, expressions::StmtWithSemi::Optional);\n+                expressions::stmt(p, expressions::Semicolon::Optional);\n             }\n \n             m.complete(p, MACRO_STMTS);"}, {"sha": "c585fdb09677367658c503c5704f830dc7213372", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=f5cfc0504e30b2e87dc9405fc3aeaee8e2fa6b08", "patch": "@@ -6,10 +6,10 @@ pub(crate) use self::atom::{block_expr, match_arm_list};\n pub(super) use self::atom::{literal, LITERAL_FIRST};\n \n #[derive(PartialEq, Eq)]\n-pub(super) enum StmtWithSemi {\n-    Yes,\n-    No,\n+pub(super) enum Semicolon {\n+    Required,\n     Optional,\n+    Forbidden,\n }\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n@@ -29,7 +29,7 @@ fn expr_no_struct(p: &mut Parser) {\n     expr_bp(p, None, r, 1);\n }\n \n-pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n+pub(super) fn stmt(p: &mut Parser, semicolon: Semicolon) {\n     let m = p.start();\n     // test attr_on_expr_stmt\n     // fn foo() {\n@@ -41,7 +41,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     attributes::outer_attrs(p);\n \n     if p.at(T![let]) {\n-        let_stmt(p, m, with_semi);\n+        let_stmt(p, m, semicolon);\n         return;\n     }\n \n@@ -53,7 +53,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     };\n \n     if let Some((cm, blocklike)) = expr_stmt(p, Some(m)) {\n-        if !(p.at(T!['}']) || (with_semi != StmtWithSemi::Yes && p.at(EOF))) {\n+        if !(p.at(T!['}']) || (semicolon != Semicolon::Required && p.at(EOF))) {\n             // test no_semi_after_block\n             // fn foo() {\n             //     if true {}\n@@ -69,27 +69,26 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n             //     test!{}\n             // }\n             let m = cm.precede(p);\n-            match with_semi {\n-                StmtWithSemi::No => (),\n-                StmtWithSemi::Optional => {\n-                    p.eat(T![;]);\n-                }\n-                StmtWithSemi::Yes => {\n+            match semicolon {\n+                Semicolon::Required => {\n                     if blocklike.is_block() {\n                         p.eat(T![;]);\n                     } else {\n                         p.expect(T![;]);\n                     }\n                 }\n+                Semicolon::Optional => {\n+                    p.eat(T![;]);\n+                }\n+                Semicolon::Forbidden => (),\n             }\n-\n             m.complete(p, EXPR_STMT);\n         }\n     }\n \n     // test let_stmt\n     // fn f() { let x: i32 = 92; }\n-    fn let_stmt(p: &mut Parser, m: Marker, with_semi: StmtWithSemi) {\n+    fn let_stmt(p: &mut Parser, m: Marker, with_semi: Semicolon) {\n         p.bump(T![let]);\n         patterns::pattern(p);\n         if p.at(T![:]) {\n@@ -114,11 +113,11 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n         }\n \n         match with_semi {\n-            StmtWithSemi::No => (),\n-            StmtWithSemi::Optional => {\n+            Semicolon::Forbidden => (),\n+            Semicolon::Optional => {\n                 p.eat(T![;]);\n             }\n-            StmtWithSemi::Yes => {\n+            Semicolon::Required => {\n                 p.expect(T![;]);\n             }\n         }\n@@ -150,7 +149,7 @@ pub(super) fn expr_block_contents(p: &mut Parser) {\n             continue;\n         }\n \n-        stmt(p, StmtWithSemi::Yes);\n+        stmt(p, Semicolon::Required);\n     }\n }\n "}]}