{"sha": "8e28f23c60daae7042e2c279741fa90f623acac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjhmMjNjNjBkYWFlNzA0MmUyYzI3OTc0MWZhOTBmNjIzYWNhYzA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-14T19:52:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-19T01:22:27Z"}, "message": "core: add macro_rules! for \"condition! { c: in -> out; }\".", "tree": {"sha": "e332141f56606dda327961d21ec06af302e4f242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e332141f56606dda327961d21ec06af302e4f242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e28f23c60daae7042e2c279741fa90f623acac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e28f23c60daae7042e2c279741fa90f623acac0", "html_url": "https://github.com/rust-lang/rust/commit/8e28f23c60daae7042e2c279741fa90f623acac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e28f23c60daae7042e2c279741fa90f623acac0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263136d389ec72d8ab52d3ad8303a100fd1d4254", "url": "https://api.github.com/repos/rust-lang/rust/commits/263136d389ec72d8ab52d3ad8303a100fd1d4254", "html_url": "https://github.com/rust-lang/rust/commit/263136d389ec72d8ab52d3ad8303a100fd1d4254"}], "stats": {"total": 93, "additions": 58, "deletions": 35}, "files": [{"sha": "df8063772a6d225d5fee04ee74ee11014aab40be", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -10,16 +10,17 @@\n \n // helper for transmutation, shown below.\n type RustClosure = (int,int);\n-struct Handler<T, U:Copy> {\n+pub struct Handler<T, U> {\n     handle: RustClosure,\n     prev: Option<@Handler<T, U>>,\n }\n \n-struct Condition<T, U:Copy> {\n+pub struct Condition<T, U> {\n+    name: &static/str,\n     key: task::local_data::LocalDataKey<Handler<T,U>>\n }\n \n-impl<T, U: Copy>  Condition<T,U> {\n+impl<T, U>  Condition<T,U> {\n \n     fn trap(&self, h: &self/fn(&T) ->U) -> Trap/&self<T,U> {\n         unsafe {\n@@ -32,7 +33,9 @@ impl<T, U: Copy>  Condition<T,U> {\n \n     fn raise(t:&T) -> U  {\n         do self.raise_default(t) {\n-            fail ~\"Unhandled condition\";\n+            fail fmt!(\"Unhandled condition: %s: %?\",\n+                      self.name,\n+                      t);\n         }\n     }\n \n@@ -65,13 +68,13 @@ impl<T, U: Copy>  Condition<T,U> {\n \n \n \n-struct Trap<T, U:Copy> {\n+struct Trap<T, U> {\n     cond: &Condition<T,U>,\n     handler: @Handler<T, U>\n }\n \n-impl<T, U: Copy> Trap<T,U> {\n-    fn in<V: Copy>(&self, inner: &self/fn() -> V) -> V {\n+impl<T, U> Trap<T,U> {\n+    fn in<V>(&self, inner: &self/fn() -> V) -> V {\n         unsafe {\n             let _g = Guard { cond: self.cond };\n             debug!(\"Trap: pushing handler to TLS\");\n@@ -81,7 +84,7 @@ impl<T, U: Copy> Trap<T,U> {\n     }\n }\n \n-struct Guard<T, U:Copy> {\n+struct Guard<T, U> {\n     cond: &Condition<T,U>,\n     drop {\n         unsafe {\n@@ -105,21 +108,21 @@ struct Guard<T, U:Copy> {\n #[cfg(test)]\n mod test {\n \n-    fn sadness_key(_x: @Handler<int,int>) { }\n-    const sadness_condition : Condition<int,int> =\n-        Condition { key: sadness_key };\n+    condition! {\n+        sadness: int -> int;\n+    }\n \n     fn trouble(i: int) {\n         debug!(\"trouble: raising conition\");\n-        let j = sadness_condition.raise(&i);\n+        let j = sadness::cond.raise(&i);\n         debug!(\"trouble: handler recovered with %d\", j);\n     }\n \n     fn nested_trap_test_inner() {\n \n         let mut inner_trapped = false;\n \n-        do sadness_condition.trap(|_j| {\n+        do sadness::cond.trap(|_j| {\n             debug!(\"nested_trap_test_inner: in handler\");\n             inner_trapped = true;\n             0\n@@ -136,7 +139,7 @@ mod test {\n \n         let mut outer_trapped = false;\n \n-        do sadness_condition.trap(|_j| {\n+        do sadness::cond.trap(|_j| {\n             debug!(\"nested_trap_test_outer: in handler\");\n             outer_trapped = true; 0\n         }).in {\n@@ -152,12 +155,12 @@ mod test {\n \n         let mut inner_trapped = false;\n \n-        do sadness_condition.trap(|_j| {\n+        do sadness::cond.trap(|_j| {\n             debug!(\"nested_reraise_trap_test_inner: in handler\");\n             inner_trapped = true;\n             let i = 10;\n             debug!(\"nested_reraise_trap_test_inner: handler re-raising\");\n-            sadness_condition.raise(&i)\n+            sadness::cond.raise(&i)\n         }).in {\n             debug!(\"nested_reraise_trap_test_inner: in protected block\");\n             trouble(1);\n@@ -171,7 +174,7 @@ mod test {\n \n         let mut outer_trapped = false;\n \n-        do sadness_condition.trap(|_j| {\n+        do sadness::cond.trap(|_j| {\n             debug!(\"nested_reraise_trap_test_outer: in handler\");\n             outer_trapped = true; 0\n         }).in {\n@@ -187,9 +190,9 @@ mod test {\n \n         let mut trapped = false;\n \n-        do sadness_condition.trap(|j| {\n+        do sadness::cond.trap(|j| {\n             debug!(\"test_default: in handler\");\n-            sadness_condition.raise_default(j, || {trapped=true; 5})\n+            sadness::cond.raise_default(j, || {trapped=true; 5})\n         }).in {\n             debug!(\"test_default: in protected block\");\n             trouble(1);"}, {"sha": "72a0ddb21f9be5282cbbb03f7f0d963f663a3c91", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -242,6 +242,7 @@ mod core {\n     pub const debug : u32 = 4_u32;\n \n     pub use cmp;\n+    pub use condition;\n }\n \n "}, {"sha": "f8a94fff67820483c134352574a3e1bef469f902", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -17,7 +17,7 @@ export inject_intrinsic;\n fn inject_intrinsic(sess: Session,\n                     crate: @ast::crate) -> @ast::crate {\n \n-    let intrinsic_module = @include_str!(\"intrinsic.rs\");\n+    let intrinsic_module = @(include_str!(\"intrinsic.rs\").to_owned());\n \n     let item = parse::parse_item_from_source_str(~\"<intrinsic>\",\n                                                  intrinsic_module,"}, {"sha": "0f84a720069545d8bb3505c41a5fce8f32df2a2c", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -138,7 +138,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n     };\n \n     debug!(\"building driver input\");\n-    let head = include_str!(\"wrapper.rs\");\n+    let head = include_str!(\"wrapper.rs\").to_owned();\n     let foot = fmt!(\"%s\\nfn main() {\\n%s\\n\\nprint({\\n%s\\n})\\n}\",\n                     repl.view_items, repl.stmts, input);\n     let wrapped = driver::str_input(head + foot);"}, {"sha": "41d5c8ee0bbd31baec4b941dab279ee4bd12a996", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -286,12 +286,30 @@ fn core_macros() -> ~str {\n \n     macro_rules! die(\n         ($msg: expr) => (\n-            core::sys::begin_unwind($msg, file!(), line!())\n+            core::sys::begin_unwind($msg,\n+                                    file!().to_owned(), line!())\n         );\n         () => (\n             die!(~\\\"explicit failure\\\")\n         )\n     )\n+\n+    macro_rules! condition (\n+\n+        { $c:ident: $in:ty -> $out:ty; } => {\n+\n+            mod $c {\n+                fn key(_x: @core::condition::Handler<$in,$out>) { }\n+\n+                pub const cond : core::condition::Condition<$in,$out> =\n+                    core::condition::Condition {\n+                    name: stringify!(c),\n+                    key: key\n+                };\n+            }\n+        }\n+    )\n+\n }\";\n }\n "}, {"sha": "e407431568966f605a3c764448fbb4652de89c9a", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -11,7 +11,7 @@\n use ext::base::*;\n use codemap::{span, Loc, FileMap};\n use print::pprust;\n-use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_uniq_str};\n+use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_base_str};\n \n export expand_line;\n export expand_col;\n@@ -46,19 +46,19 @@ fn expand_file(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n     let Loc { file: @FileMap { name: filename, _ }, _ } =\n         cx.codemap().lookup_char_pos(sp.lo);\n-    base::mr_expr(mk_uniq_str(cx, sp, filename))\n+    base::mr_expr(mk_base_str(cx, sp, filename))\n }\n \n fn expand_stringify(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     -> base::mac_result {\n     let s = pprust::tts_to_str(tts, cx.parse_sess().interner);\n-    base::mr_expr(mk_uniq_str(cx, sp, s))\n+    base::mr_expr(mk_base_str(cx, sp, s))\n }\n \n fn expand_mod(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     -> base::mac_result {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n-    base::mr_expr(mk_uniq_str(cx, sp,\n+    base::mr_expr(mk_base_str(cx, sp,\n                               str::connect(cx.mod_path().map(\n                                   |x| cx.str_of(*x)), ~\"::\")))\n }\n@@ -83,7 +83,7 @@ fn expand_include_str(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n       }\n     }\n \n-    base::mr_expr(mk_uniq_str(cx, sp, result::unwrap(res)))\n+    base::mr_expr(mk_base_str(cx, sp, result::unwrap(res)))\n }\n \n fn expand_include_bin(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])"}, {"sha": "bc20eddfda1f68dac5a6553f6b5c9a1bbaccb5ee", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -19,7 +19,7 @@ use std::map::{Map, HashMap};\n use io::{Reader, ReaderUtil};\n \n macro_rules! bench (\n-    ($id:ident) => (maybe_run_test(argv, stringify!($id), $id))\n+    ($id:ident) => (maybe_run_test(argv, stringify!($id).to_owned(), $id))\n )\n \n fn main() {"}, {"sha": "84f23e57796f37343e1bcd2d3e07289be0ac9abd", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -39,7 +39,8 @@ macro_rules! parse_node (\n     ) => (\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n-            [$(:$head_nodes,)* :tag(stringify!($head), ~[$($nodes),*])];\n+            [$(:$head_nodes,)* :tag(stringify!($head).to_owned(),\n+                                    ~[$($nodes),*])];\n             $($rest)*\n         )\n     );\n@@ -75,7 +76,7 @@ macro_rules! parse_node (\n     ) => (\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n-            [$(:$nodes,)* :text(stringify!($word))];\n+            [$(:$nodes,)* :text(stringify!($word).to_owned())];\n             $($rest)*\n         )\n     );"}, {"sha": "413edcdb13a9daa8b1707343b8a8dbba0900cb81", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28f23c60daae7042e2c279741fa90f623acac0/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=8e28f23c60daae7042e2c279741fa90f623acac0", "patch": "@@ -16,20 +16,20 @@ mod m1 {\n     #[legacy_exports];\n     mod m2 {\n         #[legacy_exports];\n-        fn where_am_i() -> ~str { module_path!() }\n+        fn where_am_i() -> ~str { (module_path!()).to_owned() }\n     }\n }\n \n fn main() {\n     assert(line!() == 24);\n     assert(col!() == 11);\n-    assert(file!().ends_with(~\"syntax-extension-source-utils.rs\"));\n-    assert(stringify!((2*3) + 5) == ~\"( 2 * 3 ) + 5\");\n-    assert(include!(\"syntax-extension-source-utils-files/includeme.fragment\")\n+    assert(file!().to_owned().ends_with(~\"syntax-extension-source-utils.rs\"));\n+    assert(stringify!((2*3) + 5).to_owned() == ~\"( 2 * 3 ) + 5\");\n+    assert(include!(\"syntax-extension-source-utils-files/includeme.fragment\").to_owned()\n            == ~\"victory robot 6\");\n \n     assert(\n-        include_str!(\"syntax-extension-source-utils-files/includeme.fragment\")\n+        include_str!(\"syntax-extension-source-utils-files/includeme.fragment\").to_owned()\n         .starts_with(~\"/* this is for \"));\n     assert(\n         include_bin!(\"syntax-extension-source-utils-files/includeme.fragment\")"}]}