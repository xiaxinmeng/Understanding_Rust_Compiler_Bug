{"sha": "146f5745606b48afca8e7d7702e363e88caa80e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NmY1NzQ1NjA2YjQ4YWZjYThlN2Q3NzAyZTM2M2U4OGNhYTgwZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T23:39:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-17T23:39:51Z"}, "message": "Auto merge of #83247 - Dylan-DPC:rollup-bdwmvjg, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #82191 (Vec::dedup_by optimization)\n - #82270 (Emit error when trying to use assembler syntax directives in `asm!`)\n - #82434 (Add more links between hash and btree collections)\n - #83080 (Make source-based code coverage compatible with MIR inlining)\n - #83168 (Extend `proc_macro_back_compat` lint to `procedural-masquerade`)\n - #83192 (ci/docker: Add SDK/NDK level 21 to android docker for 32bit platforms)\n - #83204 (Simplify C compilation for Fortanix-SGX target)\n - #83216 (Allow registering tool lints with `register_tool`)\n - #83223 (Display error details when a `mmap` call fails)\n - #83228 (Don't show HTML diff if tidy isn't installed for rustdoc tests)\n - #83231 (Switch riscvgc-unknown-none-elf use lp64d ABI)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "28f5a4d7b7c985a5f6ec77b1d2ee24cf0a901f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f5a4d7b7c985a5f6ec77b1d2ee24cf0a901f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/146f5745606b48afca8e7d7702e363e88caa80e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/146f5745606b48afca8e7d7702e363e88caa80e1", "html_url": "https://github.com/rust-lang/rust/commit/146f5745606b48afca8e7d7702e363e88caa80e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/146f5745606b48afca8e7d7702e363e88caa80e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "html_url": "https://github.com/rust-lang/rust/commit/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d"}, {"sha": "1839d1d57d5f4292eeadb419bc0c1e92fa9b478a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1839d1d57d5f4292eeadb419bc0c1e92fa9b478a", "html_url": "https://github.com/rust-lang/rust/commit/1839d1d57d5f4292eeadb419bc0c1e92fa9b478a"}], "stats": {"total": 2029, "additions": 1837, "deletions": 192}, "files": [{"sha": "2c5e180f80d4947cc723de82c320b60a142a91a4", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -33,10 +33,6 @@ impl MarkedAttrs {\n     }\n }\n \n-pub fn is_known_lint_tool(m_item: Ident) -> bool {\n-    [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item.name)\n-}\n-\n impl NestedMetaItem {\n     /// Returns the `MetaItem` if `self` is a `NestedMetaItem::MetaItem`.\n     pub fn meta_item(&self) -> Option<&MetaItem> {"}, {"sha": "7e58426d27de4b63aa6a541ca963a7326e73d405", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -784,33 +784,6 @@ impl Nonterminal {\n             NtTT(tt) => tt.span(),\n         }\n     }\n-\n-    /// This nonterminal looks like some specific enums from\n-    /// `proc-macro-hack` and `procedural-masquerade` crates.\n-    /// We need to maintain some special pretty-printing behavior for them due to incorrect\n-    /// asserts in old versions of those crates and their wide use in the ecosystem.\n-    /// See issue #73345 for more details.\n-    /// FIXME(#73933): Remove this eventually.\n-    pub fn pretty_printing_compatibility_hack(&self) -> bool {\n-        let item = match self {\n-            NtItem(item) => item,\n-            NtStmt(stmt) => match &stmt.kind {\n-                ast::StmtKind::Item(item) => item,\n-                _ => return false,\n-            },\n-            _ => return false,\n-        };\n-\n-        let name = item.ident.name;\n-        if name == sym::ProceduralMasqueradeDummyType || name == sym::ProcMacroHack {\n-            if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n-                if let [variant] = &*enum_def.variants {\n-                    return variant.ident.name == sym::Input;\n-                }\n-            }\n-        }\n-        false\n-    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "8d8b3f4f6aaaceb955cbe3b670289ff118e244f8", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -7,7 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{\n+    symbol::{kw, sym, Symbol},\n+    BytePos,\n+};\n use rustc_span::{InnerSpan, Span};\n \n struct AsmArgs {\n@@ -399,6 +402,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n     let mut line_spans = Vec::with_capacity(args.templates.len());\n     let mut curarg = 0;\n \n+    let default_dialect = ecx.sess.inline_asm_dialect();\n+\n     for template_expr in args.templates.into_iter() {\n         if !template.is_empty() {\n             template.push(ast::InlineAsmTemplatePiece::String(\"\\n\".to_string()));\n@@ -424,6 +429,60 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n \n         let template_str = &template_str.as_str();\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n+\n+        if let Some(snippet) = &template_snippet {\n+            let snippet = snippet.trim_matches('\"');\n+            match default_dialect {\n+                ast::LlvmAsmDialect::Intel => {\n+                    if let Some(span) = check_syntax_directive(snippet, \".intel_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"intel syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"remove this assembler directive\",\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n+                        let asm_end = sp.hi() - BytePos(2);\n+                        let suggestions = vec![\n+                            (span, \"\".to_string()),\n+                            (\n+                                Span::new(asm_end, asm_end, sp.ctxt()),\n+                                \", options(att_syntax)\".to_string(),\n+                            ),\n+                        ];\n+                        err.multipart_suggestion(\n+                        \"remove the assembler directive and replace it with options(att_syntax)\",\n+                        suggestions,\n+                        Applicability::MachineApplicable,\n+                    );\n+                        err.emit();\n+                    }\n+                }\n+                ast::LlvmAsmDialect::Att => {\n+                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"att syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"remove this assembler directive\",\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    // Use of .intel_syntax is ignored\n+                }\n+            }\n+        }\n+\n         let mut parser = parse::Parser::new(\n             template_str,\n             str_style,\n@@ -631,3 +690,15 @@ pub fn expand_asm<'cx>(\n         }\n     }\n }\n+\n+fn check_syntax_directive<S: AsRef<str>>(piece: S, syntax: &str) -> Option<InnerSpan> {\n+    let piece = piece.as_ref();\n+    if let Some(idx) = piece.find(syntax) {\n+        let end =\n+            idx + &piece[idx..].find(|c| matches!(c, '\\n' | ';')).unwrap_or(piece[idx..].len());\n+        // Offset by one because these represent the span with the \" removed\n+        Some(InnerSpan::new(idx + 1, end + 1))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "352638aa88ee8a4f4772354bbbb722b9fff1080f", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -254,7 +254,7 @@ fn save_function_record(\n ///\n /// 1. The file name of an \"Unreachable\" function must match the file name of the existing\n ///    codegenned (covered) function to which the unreachable code regions will be added.\n-/// 2. The function to which the unreachable code regions will be added must not be a genaric\n+/// 2. The function to which the unreachable code regions will be added must not be a generic\n ///    function (must not have type parameters) because the coverage tools will get confused\n ///    if the codegenned function has more than one instantiation and additional `CodeRegion`s\n ///    attached to only one of those instantiations.\n@@ -284,7 +284,7 @@ fn add_unreachable_coverage<'tcx>(\n     let all_def_ids: DefIdSet =\n         tcx.mir_keys(LOCAL_CRATE).iter().map(|local_def_id| local_def_id.to_def_id()).collect();\n \n-    let (codegenned_def_ids, _) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let codegenned_def_ids = tcx.codegened_and_inlined_items(LOCAL_CRATE);\n \n     let mut unreachable_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {"}, {"sha": "af6482fdbc24fb00a0e7b7361600691b4b3a72ef", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::coverage::{\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::TyCtxt;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct Expression {\n     lhs: ExpressionOperandId,\n     op: Op,\n@@ -64,7 +64,9 @@ impl<'tcx> FunctionCoverage<'tcx> {\n \n     /// Adds a code region to be counted by an injected counter intrinsic.\n     pub fn add_counter(&mut self, id: CounterValueReference, region: CodeRegion) {\n-        self.counters[id].replace(region).expect_none(\"add_counter called with duplicate `id`\");\n+        if let Some(previous_region) = self.counters[id].replace(region.clone()) {\n+            assert_eq!(previous_region, region, \"add_counter: code region for id changed\");\n+        }\n     }\n \n     /// Both counters and \"counter expressions\" (or simply, \"expressions\") can be operands in other\n@@ -94,9 +96,18 @@ impl<'tcx> FunctionCoverage<'tcx> {\n             expression_id, lhs, op, rhs, region\n         );\n         let expression_index = self.expression_index(u32::from(expression_id));\n-        self.expressions[expression_index]\n-            .replace(Expression { lhs, op, rhs, region })\n-            .expect_none(\"add_counter_expression called with duplicate `id_descending_from_max`\");\n+        if let Some(previous_expression) = self.expressions[expression_index].replace(Expression {\n+            lhs,\n+            op,\n+            rhs,\n+            region: region.clone(),\n+        }) {\n+            assert_eq!(\n+                previous_expression,\n+                Expression { lhs, op, rhs, region },\n+                \"add_counter_expression: expression for id changed\"\n+            );\n+        }\n     }\n \n     /// Add a region that will be marked as \"unreachable\", with a constant \"zero counter\"."}, {"sha": "5ab1baafb57de3b587be796d19ea9c4959ee875f", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -2,27 +2,38 @@ use crate::traits::*;\n \n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::Coverage;\n+use rustc_middle::mir::SourceScope;\n \n use super::FunctionCx;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn codegen_coverage(&self, bx: &mut Bx, coverage: Coverage) {\n+    pub fn codegen_coverage(&self, bx: &mut Bx, coverage: Coverage, scope: SourceScope) {\n+        // Determine the instance that coverage data was originally generated for.\n+        let scope_data = &self.mir.source_scopes[scope];\n+        let instance = if let Some((inlined_instance, _)) = scope_data.inlined {\n+            self.monomorphize(inlined_instance)\n+        } else if let Some(inlined_scope) = scope_data.inlined_parent_scope {\n+            self.monomorphize(self.mir.source_scopes[inlined_scope].inlined.unwrap().0)\n+        } else {\n+            self.instance\n+        };\n+\n         let Coverage { kind, code_region } = coverage;\n         match kind {\n             CoverageKind::Counter { function_source_hash, id } => {\n-                if bx.set_function_source_hash(self.instance, function_source_hash) {\n+                if bx.set_function_source_hash(instance, function_source_hash) {\n                     // If `set_function_source_hash()` returned true, the coverage map is enabled,\n                     // so continue adding the counter.\n                     if let Some(code_region) = code_region {\n                         // Note: Some counters do not have code regions, but may still be referenced\n                         // from expressions. In that case, don't add the counter to the coverage map,\n                         // but do inject the counter intrinsic.\n-                        bx.add_coverage_counter(self.instance, id, code_region);\n+                        bx.add_coverage_counter(instance, id, code_region);\n                     }\n \n-                    let coverageinfo = bx.tcx().coverageinfo(self.instance.def_id());\n+                    let coverageinfo = bx.tcx().coverageinfo(instance.def_id());\n \n-                    let fn_name = bx.create_pgo_func_name_var(self.instance);\n+                    let fn_name = bx.create_pgo_func_name_var(instance);\n                     let hash = bx.const_u64(function_source_hash);\n                     let num_counters = bx.const_u32(coverageinfo.num_counters);\n                     let index = bx.const_u32(u32::from(id));\n@@ -34,11 +45,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n             CoverageKind::Expression { id, lhs, op, rhs } => {\n-                bx.add_coverage_counter_expression(self.instance, id, lhs, op, rhs, code_region);\n+                bx.add_coverage_counter_expression(instance, id, lhs, op, rhs, code_region);\n             }\n             CoverageKind::Unreachable => {\n                 bx.add_coverage_unreachable(\n-                    self.instance,\n+                    instance,\n                     code_region.expect(\"unreachable regions always have code regions\"),\n                 );\n             }"}, {"sha": "fe7f6288adb273913a8545f0ee4160d54395a244", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx\n             }\n             mir::StatementKind::Coverage(box ref coverage) => {\n-                self.codegen_coverage(&mut bx, coverage.clone());\n+                self.codegen_coverage(&mut bx, coverage.clone(), statement.source_info.scope);\n                 bx\n             }\n             mir::StatementKind::CopyNonOverlapping(box mir::CopyNonOverlapping {"}, {"sha": "594b9a82ad061168812720cf31e7ea87bc5d1de2", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -10,6 +10,8 @@ use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n+use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n use rustc_session::{parse::ParseSess, Limit, Session};\n use rustc_span::def_id::DefId;\n@@ -1241,3 +1243,41 @@ pub fn get_exprs_from_tts(\n     }\n     Some(es)\n }\n+\n+/// This nonterminal looks like some specific enums from\n+/// `proc-macro-hack` and `procedural-masquerade` crates.\n+/// We need to maintain some special pretty-printing behavior for them due to incorrect\n+/// asserts in old versions of those crates and their wide use in the ecosystem.\n+/// See issue #73345 for more details.\n+/// FIXME(#73933): Remove this eventually.\n+pub(crate) fn pretty_printing_compatibility_hack(nt: &Nonterminal, sess: &ParseSess) -> bool {\n+    let item = match nt {\n+        Nonterminal::NtItem(item) => item,\n+        Nonterminal::NtStmt(stmt) => match &stmt.kind {\n+            ast::StmtKind::Item(item) => item,\n+            _ => return false,\n+        },\n+        _ => return false,\n+    };\n+\n+    let name = item.ident.name;\n+    if name == sym::ProceduralMasqueradeDummyType {\n+        if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n+            if let [variant] = &*enum_def.variants {\n+                if variant.ident.name == sym::Input {\n+                    sess.buffer_lint_with_diagnostic(\n+                        &PROC_MACRO_BACK_COMPAT,\n+                        item.ident.span,\n+                        ast::CRATE_NODE_ID,\n+                        \"using `procedural-masquerade` crate\",\n+                        BuiltinLintDiagnostics::ProcMacroBackCompat(\n+                        \"The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. \\\n+                        Versions of this crate below 0.1.7 will eventually stop compiling.\".to_string())\n+                    );\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    false\n+}"}, {"sha": "61b776ff2d280af6d98082085c261715e67521e9", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -90,7 +90,8 @@ impl MultiItemModifier for ProcMacroDerive {\n             }\n             _ => unreachable!(),\n         };\n-        let input = if item.pretty_printing_compatibility_hack() {\n+        let input = if crate::base::pretty_printing_compatibility_hack(&item, &ecx.sess.parse_sess)\n+        {\n             TokenTree::token(token::Interpolated(Lrc::new(item)), DUMMY_SP).into()\n         } else {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::Yes)"}, {"sha": "67edfe19da383d7ac659ce0e486fe74d2c59d85c", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -187,7 +187,7 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n                         delimiter: Delimiter::None,\n                         stream,\n                         span: DelimSpan::from_single(span),\n-                        flatten: nt.pretty_printing_compatibility_hack(),\n+                        flatten: crate::base::pretty_printing_compatibility_hack(&nt, sess),\n                     })\n                 }\n             }"}, {"sha": "c9de85a2f1877c1b1e16e519e5d727d8d146831a", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -748,7 +748,7 @@ impl<'a> EarlyContext<'a> {\n             sess,\n             krate,\n             lint_store,\n-            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store),\n+            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store, &krate.attrs),\n             buffered,\n         }\n     }"}, {"sha": "a332c30078706931f2291b85086a9c4a93943e66", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,13 +1,12 @@\n use crate::context::{CheckLintNameResult, LintStore};\n use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n-use rustc_ast::attr;\n use rustc_ast::unwrap_or;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::LevelAndSource;\n@@ -32,7 +31,8 @@ use std::cmp;\n fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let store = unerased_lint_store(tcx);\n-    let levels = LintLevelsBuilder::new(tcx.sess, false, &store);\n+    let crate_attrs = tcx.get_attrs(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n+    let levels = LintLevelsBuilder::new(tcx.sess, false, &store, crate_attrs);\n     let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();\n \n@@ -56,6 +56,7 @@ pub struct LintLevelsBuilder<'s> {\n     cur: u32,\n     warn_about_weird_lints: bool,\n     store: &'s LintStore,\n+    crate_attrs: &'s [ast::Attribute],\n }\n \n pub struct BuilderPush {\n@@ -64,14 +65,20 @@ pub struct BuilderPush {\n }\n \n impl<'s> LintLevelsBuilder<'s> {\n-    pub fn new(sess: &'s Session, warn_about_weird_lints: bool, store: &'s LintStore) -> Self {\n+    pub fn new(\n+        sess: &'s Session,\n+        warn_about_weird_lints: bool,\n+        store: &'s LintStore,\n+        crate_attrs: &'s [ast::Attribute],\n+    ) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n             sets: LintLevelSets::new(),\n             cur: 0,\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n             store,\n+            crate_attrs,\n         };\n         builder.process_command_line(sess, store);\n         assert_eq!(builder.sets.list.len(), 1);\n@@ -304,15 +311,22 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 let tool_name = if meta_item.path.segments.len() > 1 {\n                     let tool_ident = meta_item.path.segments[0].ident;\n-                    if !attr::is_known_lint_tool(tool_ident) {\n-                        struct_span_err!(\n+                    if !is_known_lint_tool(tool_ident.name, sess, &self.crate_attrs) {\n+                        let mut err = struct_span_err!(\n                             sess,\n                             tool_ident.span,\n                             E0710,\n-                            \"an unknown tool name found in scoped lint: `{}`\",\n+                            \"unknown tool name `{}` found in scoped lint: `{}`\",\n+                            tool_ident.name,\n                             pprust::path_to_string(&meta_item.path),\n-                        )\n-                        .emit();\n+                        );\n+                        if sess.is_nightly_build() {\n+                            err.help(&format!(\n+                                \"add `#![register_tool({})]` to the crate root\",\n+                                tool_ident.name\n+                            ));\n+                        }\n+                        err.emit();\n                         continue;\n                     }\n \n@@ -559,6 +573,20 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n }\n \n+fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n+    if [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item) {\n+        return true;\n+    }\n+    // Look for registered tools\n+    // NOTE: does no error handling; error handling is done by rustc_resolve.\n+    sess.filter_by_name(attrs, sym::register_tool)\n+        .filter_map(|attr| attr.meta_item_list())\n+        .flat_map(std::convert::identity)\n+        .filter_map(|nested_meta| nested_meta.ident())\n+        .map(|ident| ident.name)\n+        .any(|name| name == m_item)\n+}\n+\n struct LintLevelMapBuilder<'a, 'tcx> {\n     levels: LintLevelsBuilder<'tcx>,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "ae367db019b59e9aefdeb3d03efbd06375d5c28f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1407,6 +1407,14 @@ rustc_queries! {\n     query is_codegened_item(def_id: DefId) -> bool {\n         desc { |tcx| \"determining whether `{}` needs codegen\", tcx.def_path_str(def_id) }\n     }\n+\n+    /// All items participating in code generation together with items inlined into them.\n+    query codegened_and_inlined_items(_: CrateNum)\n+        -> &'tcx DefIdSet {\n+        eval_always\n+       desc { \"codegened_and_inlined_items\" }\n+    }\n+\n     query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n         desc { \"codegen_unit\" }\n     }"}, {"sha": "dc2379fd92b834cba2dc31d3919230fbbede99f1", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -424,8 +424,33 @@ fn collect_and_partition_mono_items<'tcx>(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n+fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx DefIdSet {\n+    let (items, cgus) = tcx.collect_and_partition_mono_items(cnum);\n+    let mut visited = DefIdSet::default();\n+    let mut result = items.clone();\n+\n+    for cgu in cgus {\n+        for (item, _) in cgu.items() {\n+            if let MonoItem::Fn(ref instance) = item {\n+                let did = instance.def_id();\n+                if !visited.insert(did) {\n+                    continue;\n+                }\n+                for scope in &tcx.instance_mir(instance.def).source_scopes {\n+                    if let Some((ref inlined, _)) = scope.inlined {\n+                        result.insert(inlined.def_id());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    tcx.arena.alloc(result)\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     providers.collect_and_partition_mono_items = collect_and_partition_mono_items;\n+    providers.codegened_and_inlined_items = codegened_and_inlined_items;\n \n     providers.is_codegened_item = |tcx, def_id| {\n         let (all_mono_items, _) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);"}, {"sha": "de8447f1974e7f038f09a56f6e7382541dc23862", "filename": "compiler/rustc_mir/src/transform/coverage/query.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,8 +1,7 @@\n use super::*;\n \n use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{self, Coverage, CoverageInfo, Location};\n+use rustc_middle::mir::{self, Body, Coverage, CoverageInfo};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n@@ -85,10 +84,21 @@ impl CoverageVisitor {\n             }\n         }\n     }\n-}\n \n-impl Visitor<'_> for CoverageVisitor {\n-    fn visit_coverage(&mut self, coverage: &Coverage, _location: Location) {\n+    fn visit_body(&mut self, body: &Body<'_>) {\n+        for bb_data in body.basic_blocks().iter() {\n+            for statement in bb_data.statements.iter() {\n+                if let StatementKind::Coverage(box ref coverage) = statement.kind {\n+                    if is_inlined(body, statement) {\n+                        continue;\n+                    }\n+                    self.visit_coverage(coverage);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn visit_coverage(&mut self, coverage: &Coverage) {\n         if self.add_missing_operands {\n             match coverage.kind {\n                 CoverageKind::Expression { lhs, rhs, .. } => {\n@@ -129,10 +139,14 @@ fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo\n }\n \n fn covered_file_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<Symbol> {\n-    for bb_data in mir_body(tcx, def_id).basic_blocks().iter() {\n+    let body = mir_body(tcx, def_id);\n+    for bb_data in body.basic_blocks().iter() {\n         for statement in bb_data.statements.iter() {\n             if let StatementKind::Coverage(box ref coverage) = statement.kind {\n                 if let Some(code_region) = coverage.code_region.as_ref() {\n+                    if is_inlined(body, statement) {\n+                        continue;\n+                    }\n                     return Some(code_region.file_name);\n                 }\n             }\n@@ -151,17 +165,26 @@ fn mir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx mir::Body<'tcx> {\n }\n \n fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx CodeRegion> {\n-    mir_body(tcx, def_id)\n-        .basic_blocks()\n+    let body = mir_body(tcx, def_id);\n+    body.basic_blocks()\n         .iter()\n         .map(|data| {\n             data.statements.iter().filter_map(|statement| match statement.kind {\n                 StatementKind::Coverage(box ref coverage) => {\n-                    coverage.code_region.as_ref() // may be None\n+                    if is_inlined(body, statement) {\n+                        None\n+                    } else {\n+                        coverage.code_region.as_ref() // may be None\n+                    }\n                 }\n                 _ => None,\n             })\n         })\n         .flatten()\n         .collect()\n }\n+\n+fn is_inlined(body: &Body<'_>, statement: &Statement<'_>) -> bool {\n+    let scope_data = &body.source_scopes[statement.source_info.scope];\n+    scope_data.inlined.is_some() || scope_data.inlined_parent_scope.is_some()\n+}"}, {"sha": "12fdbd6582e287e62de6f426b850cda61b1bb89e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -39,15 +39,6 @@ struct CallSite<'tcx> {\n \n /// Returns true if MIR inlining is enabled in the current compilation session.\n crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n-    if tcx.sess.opts.debugging_opts.instrument_coverage {\n-        // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n-        // counters can be invalidated, such as by merging coverage counter statements from\n-        // a pre-inlined function into a different function. This kind of change is invalid,\n-        // so inlining must be skipped. Note: This check is performed here so inlining can\n-        // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n-        return false;\n-    }\n-\n     if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n         return enabled;\n     }"}, {"sha": "75078a12311630b4c8fde27b58752b5f3a6cc6a3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1937,25 +1937,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n             Some(SymbolManglingVersion::V0) => {}\n         }\n-\n-        if let Some(mir_opt_level) = debugging_opts.mir_opt_level {\n-            if mir_opt_level > 1 {\n-                // Functions inlined during MIR transform can, at best, make it impossible to\n-                // effectively cover inlined functions, and, at worst, break coverage map generation\n-                // during LLVM codegen. For example, function counter IDs are only unique within a\n-                // function. Inlining after these counters are injected can produce duplicate counters,\n-                // resulting in an invalid coverage map (and ICE); so this option combination is not\n-                // allowed.\n-                early_warn(\n-                    error_format,\n-                    &format!(\n-                        \"`-Z mir-opt-level={}` (or any level > 1) enables function inlining, which \\\n-                    is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\",\n-                        mir_opt_level,\n-                    ),\n-                );\n-            }\n-        }\n     }\n \n     if let Ok(graphviz_font) = std::env::var(\"RUSTC_GRAPHVIZ_FONT\") {"}, {"sha": "fc57b6b8acedfa88ad04291827c9c41e2be745d8", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -793,6 +793,13 @@ impl Session {\n         }\n     }\n \n+    pub fn inline_asm_dialect(&self) -> rustc_ast::LlvmAsmDialect {\n+        match self.asm_arch {\n+            Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => rustc_ast::LlvmAsmDialect::Intel,\n+            _ => rustc_ast::LlvmAsmDialect::Att,\n+        }\n+    }\n+\n     pub fn relocation_model(&self) -> RelocModel {\n         self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }"}, {"sha": "aa823b13fddf285f369b5fa2e9459bb3efeb0ab4", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             linker: Some(\"rust-lld\".to_string()),\n+            llvm_abiname: \"lp64d\".to_string(),\n             cpu: \"generic-rv64\".to_string(),\n             max_atomic_width: Some(64),\n             atomic_cas: true,"}, {"sha": "38a8f65f1695a0d4a4e12c85f6ee2ec7cb7e763d", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -4,6 +4,7 @@\n #![feature(btree_drain_filter)]\n #![feature(map_first_last)]\n #![feature(repr_simd)]\n+#![feature(slice_partition_dedup)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "73eb353f6e7d468be55a2bb86f695ddb53483dae", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -671,3 +671,92 @@ fn bench_map_fast(b: &mut Bencher) {\n     let data = black_box([(0, 0); LEN]);\n     b.iter(|| map_fast(&data));\n }\n+\n+fn random_sorted_fill(mut seed: u32, buf: &mut [u32]) {\n+    let mask = if buf.len() < 8192 {\n+        0xFF\n+    } else if buf.len() < 200_000 {\n+        0xFFFF\n+    } else {\n+        0xFFFF_FFFF\n+    };\n+\n+    for item in buf.iter_mut() {\n+        seed ^= seed << 13;\n+        seed ^= seed >> 17;\n+        seed ^= seed << 5;\n+\n+        *item = seed & mask;\n+    }\n+\n+    buf.sort();\n+}\n+\n+fn bench_vec_dedup_old(b: &mut Bencher, sz: usize) {\n+    let mut template = vec![0u32; sz];\n+    b.bytes = std::mem::size_of_val(template.as_slice()) as u64;\n+    random_sorted_fill(0x43, &mut template);\n+\n+    let mut vec = template.clone();\n+    b.iter(|| {\n+        let len = {\n+            let (dedup, _) = vec.partition_dedup();\n+            dedup.len()\n+        };\n+        vec.truncate(len);\n+\n+        black_box(vec.first());\n+        vec.clear();\n+        vec.extend_from_slice(&template);\n+    });\n+}\n+\n+fn bench_vec_dedup_new(b: &mut Bencher, sz: usize) {\n+    let mut template = vec![0u32; sz];\n+    b.bytes = std::mem::size_of_val(template.as_slice()) as u64;\n+    random_sorted_fill(0x43, &mut template);\n+\n+    let mut vec = template.clone();\n+    b.iter(|| {\n+        vec.dedup();\n+        black_box(vec.first());\n+        vec.clear();\n+        vec.extend_from_slice(&template);\n+    });\n+}\n+\n+#[bench]\n+fn bench_dedup_old_100(b: &mut Bencher) {\n+    bench_vec_dedup_old(b, 100);\n+}\n+#[bench]\n+fn bench_dedup_new_100(b: &mut Bencher) {\n+    bench_vec_dedup_new(b, 100);\n+}\n+\n+#[bench]\n+fn bench_dedup_old_1000(b: &mut Bencher) {\n+    bench_vec_dedup_old(b, 1000);\n+}\n+#[bench]\n+fn bench_dedup_new_1000(b: &mut Bencher) {\n+    bench_vec_dedup_new(b, 1000);\n+}\n+\n+#[bench]\n+fn bench_dedup_old_10000(b: &mut Bencher) {\n+    bench_vec_dedup_old(b, 10000);\n+}\n+#[bench]\n+fn bench_dedup_new_10000(b: &mut Bencher) {\n+    bench_vec_dedup_new(b, 10000);\n+}\n+\n+#[bench]\n+fn bench_dedup_old_100000(b: &mut Bencher) {\n+    bench_vec_dedup_old(b, 100000);\n+}\n+#[bench]\n+fn bench_dedup_new_100000(b: &mut Bencher) {\n+    bench_vec_dedup_new(b, 100000);\n+}"}, {"sha": "a0dbb289252f6364eb0c276a1e3ca7fac323974c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -21,15 +21,15 @@ use Entry::*;\n /// We might temporarily have fewer elements during methods.\n pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n \n-// A tree in a `BTreeMap` is a tree in the `node` module with addtional invariants:\n+// A tree in a `BTreeMap` is a tree in the `node` module with additional invariants:\n // - Keys must appear in ascending order (according to the key's type).\n // - If the root node is internal, it must contain at least 1 element.\n // - Every non-root node contains at least MIN_LEN elements.\n //\n-// An empty map may be represented both by the absense of a root node or by a\n+// An empty map may be represented both by the absence of a root node or by a\n // root node that is an empty leaf.\n \n-/// A map based on a B-Tree.\n+/// A map based on a [B-Tree].\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n /// the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\n@@ -63,6 +63,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and\n /// non-termination.\n ///\n+/// [B-Tree]: https://en.wikipedia.org/wiki/B-tree\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell\n ///"}, {"sha": "135279874bb3b7b3d7a1e0be730f3c40f82bab6c", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 89, "deletions": 6, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1512,15 +1512,98 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n     /// ```\n     #[stable(feature = \"dedup_by\", since = \"1.16.0\")]\n-    pub fn dedup_by<F>(&mut self, same_bucket: F)\n+    pub fn dedup_by<F>(&mut self, mut same_bucket: F)\n     where\n         F: FnMut(&mut T, &mut T) -> bool,\n     {\n-        let len = {\n-            let (dedup, _) = self.as_mut_slice().partition_dedup_by(same_bucket);\n-            dedup.len()\n-        };\n-        self.truncate(len);\n+        let len = self.len();\n+        if len <= 1 {\n+            return;\n+        }\n+\n+        /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */\n+        struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {\n+            /* Offset of the element we want to check if it is duplicate */\n+            read: usize,\n+\n+            /* Offset of the place where we want to place the non-duplicate\n+             * when we find it. */\n+            write: usize,\n+\n+            /* The Vec that would need correction if `same_bucket` panicked */\n+            vec: &'a mut Vec<T, A>,\n+        }\n+\n+        impl<'a, T, A: core::alloc::Allocator> Drop for FillGapOnDrop<'a, T, A> {\n+            fn drop(&mut self) {\n+                /* This code gets executed when `same_bucket` panics */\n+\n+                /* SAFETY: invariant guarantees that `read - write`\n+                 * and `len - read` never overflow and that the copy is always\n+                 * in-bounds. */\n+                unsafe {\n+                    let ptr = self.vec.as_mut_ptr();\n+                    let len = self.vec.len();\n+\n+                    /* How many items were left when `same_bucket` paniced.\n+                     * Basically vec[read..].len() */\n+                    let items_left = len.wrapping_sub(self.read);\n+\n+                    /* Pointer to first item in vec[write..write+items_left] slice */\n+                    let dropped_ptr = ptr.add(self.write);\n+                    /* Pointer to first item in vec[read..] slice */\n+                    let valid_ptr = ptr.add(self.read);\n+\n+                    /* Copy `vec[read..]` to `vec[write..write+items_left]`.\n+                     * The slices can overlap, so `copy_nonoverlapping` cannot be used */\n+                    ptr::copy(valid_ptr, dropped_ptr, items_left);\n+\n+                    /* How many items have been already dropped\n+                     * Basically vec[read..write].len() */\n+                    let dropped = self.read.wrapping_sub(self.write);\n+\n+                    self.vec.set_len(len - dropped);\n+                }\n+            }\n+        }\n+\n+        let mut gap = FillGapOnDrop { read: 1, write: 1, vec: self };\n+        let ptr = gap.vec.as_mut_ptr();\n+\n+        /* Drop items while going through Vec, it should be more efficient than\n+         * doing slice partition_dedup + truncate */\n+\n+        /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr\n+         * are always in-bounds and read_ptr never aliases prev_ptr */\n+        unsafe {\n+            while gap.read < len {\n+                let read_ptr = ptr.add(gap.read);\n+                let prev_ptr = ptr.add(gap.write.wrapping_sub(1));\n+\n+                if same_bucket(&mut *read_ptr, &mut *prev_ptr) {\n+                    /* We have found duplicate, drop it in-place */\n+                    ptr::drop_in_place(read_ptr);\n+                } else {\n+                    let write_ptr = ptr.add(gap.write);\n+\n+                    /* Because `read_ptr` can be equal to `write_ptr`, we either\n+                     * have to use `copy` or conditional `copy_nonoverlapping`.\n+                     * Looks like the first option is faster. */\n+                    ptr::copy(read_ptr, write_ptr, 1);\n+\n+                    /* We have filled that place, so go further */\n+                    gap.write += 1;\n+                }\n+\n+                gap.read += 1;\n+            }\n+\n+            /* Technically we could let `gap` clean up with its Drop, but\n+             * when `same_bucket` is guaranteed to not panic, this bloats a little\n+             * the codegen, so we just do it manually */\n+            gap.vec.set_len(gap.write);\n+            mem::forget(gap);\n+        }\n     }\n \n     /// Appends an element to the back of a collection."}, {"sha": "11673ed8262bd6c36c20d2100f80a99f639545bd", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -19,6 +19,7 @@\n #![feature(int_bits_const)]\n #![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n+#![feature(slice_partition_dedup)]\n #![feature(vec_extend_from_within)]\n #![feature(vec_spare_capacity)]\n "}, {"sha": "c142536cd2dfbfc9664ecb3d795565dd2a227d6f", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -2102,6 +2102,132 @@ fn test_extend_from_within() {\n     assert_eq!(v, [\"a\", \"b\", \"c\", \"b\", \"c\", \"a\", \"b\"]);\n }\n \n+#[test]\n+fn test_vec_dedup_by() {\n+    let mut vec: Vec<i32> = vec![1, -1, 2, 3, 1, -5, 5, -2, 2];\n+\n+    vec.dedup_by(|a, b| a.abs() == b.abs());\n+\n+    assert_eq!(vec, [1, 2, 3, 1, -5, -2]);\n+}\n+\n+#[test]\n+fn test_vec_dedup_empty() {\n+    let mut vec: Vec<i32> = Vec::new();\n+\n+    vec.dedup();\n+\n+    assert_eq!(vec, []);\n+}\n+\n+#[test]\n+fn test_vec_dedup_one() {\n+    let mut vec = vec![12i32];\n+\n+    vec.dedup();\n+\n+    assert_eq!(vec, [12]);\n+}\n+\n+#[test]\n+fn test_vec_dedup_multiple_ident() {\n+    let mut vec = vec![12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11];\n+\n+    vec.dedup();\n+\n+    assert_eq!(vec, [12, 11]);\n+}\n+\n+#[test]\n+fn test_vec_dedup_partialeq() {\n+    #[derive(Debug)]\n+    struct Foo(i32, i32);\n+\n+    impl PartialEq for Foo {\n+        fn eq(&self, other: &Foo) -> bool {\n+            self.0 == other.0\n+        }\n+    }\n+\n+    let mut vec = vec![Foo(0, 1), Foo(0, 5), Foo(1, 7), Foo(1, 9)];\n+\n+    vec.dedup();\n+    assert_eq!(vec, [Foo(0, 1), Foo(1, 7)]);\n+}\n+\n+#[test]\n+fn test_vec_dedup() {\n+    let mut vec: Vec<bool> = Vec::with_capacity(8);\n+    let mut template = vec.clone();\n+\n+    for x in 0u8..255u8 {\n+        vec.clear();\n+        template.clear();\n+\n+        let iter = (0..8).map(move |bit| (x >> bit) & 1 == 1);\n+        vec.extend(iter);\n+        template.extend_from_slice(&vec);\n+\n+        let (dedup, _) = template.partition_dedup();\n+        vec.dedup();\n+\n+        assert_eq!(vec, dedup);\n+    }\n+}\n+\n+#[test]\n+fn test_vec_dedup_panicking() {\n+    #[derive(Debug)]\n+    struct Panic {\n+        drop_counter: &'static AtomicU32,\n+        value: bool,\n+        index: usize,\n+    }\n+\n+    impl PartialEq for Panic {\n+        fn eq(&self, other: &Self) -> bool {\n+            self.value == other.value\n+        }\n+    }\n+\n+    impl Drop for Panic {\n+        fn drop(&mut self) {\n+            let x = self.drop_counter.fetch_add(1, Ordering::SeqCst);\n+            assert!(x != 4);\n+        }\n+    }\n+\n+    static DROP_COUNTER: AtomicU32 = AtomicU32::new(0);\n+    let expected = [\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 0 },\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 5 },\n+        Panic { drop_counter: &DROP_COUNTER, value: true, index: 6 },\n+        Panic { drop_counter: &DROP_COUNTER, value: true, index: 7 },\n+    ];\n+    let mut vec = vec![\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 0 },\n+        // these elements get deduplicated\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 1 },\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 2 },\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 3 },\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 4 },\n+        // here it panics\n+        Panic { drop_counter: &DROP_COUNTER, value: false, index: 5 },\n+        Panic { drop_counter: &DROP_COUNTER, value: true, index: 6 },\n+        Panic { drop_counter: &DROP_COUNTER, value: true, index: 7 },\n+    ];\n+\n+    let _ = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {\n+        vec.dedup();\n+    }));\n+\n+    let ok = vec.iter().zip(expected.iter()).all(|(x, y)| x.index == y.index);\n+\n+    if !ok {\n+        panic!(\"expected: {:?}\\ngot: {:?}\\n\", expected, vec);\n+    }\n+}\n+\n // Regression test for issue #82533\n #[test]\n fn test_extend_from_within_panicing_clone() {"}, {"sha": "7bfa58d34edff324c800ba8f59e3ee3821ce7623", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,7 +1,13 @@\n //! Generic hashing support.\n //!\n-//! This module provides a generic way to compute the hash of a value. The\n-//! simplest way to make a type hashable is to use `#[derive(Hash)]`:\n+//! This module provides a generic way to compute the [hash] of a value.\n+//! Hashes are most commonly used with [`HashMap`] and [`HashSet`].\n+//!\n+//! [hash]: https://en.wikipedia.org/wiki/Hash_function\n+//! [`HashMap`]: ../../std/collections/struct.HashMap.html\n+//! [`HashSet`]: ../../std/collections/struct.HashSet.html\n+//!\n+//! The simplest way to make a type hashable is to use `#[derive(Hash)]`:\n //!\n //! # Examples\n //!"}, {"sha": "ed32668456df6b632337d62c79129630a88e8040", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -17,7 +17,7 @@ use crate::iter::{FromIterator, FusedIterator};\n use crate::ops::Index;\n use crate::sys;\n \n-/// A hash map implemented with quadratic probing and SIMD lookup.\n+/// A [hash map] implemented with quadratic probing and SIMD lookup.\n ///\n /// By default, `HashMap` uses a hashing algorithm selected to provide\n /// resistance against HashDoS attacks. The algorithm is randomly seeded, and a\n@@ -62,6 +62,7 @@ use crate::sys;\n /// The original C++ version of SwissTable can be found [here], and this\n /// [CppCon talk] gives an overview of how the algorithm works.\n ///\n+/// [hash map]: crate::collections#use-a-hashmap-when\n /// [hashing algorithms available on crates.io]: https://crates.io/keywords/hasher\n /// [SwissTable]: https://abseil.io/blog/20180927-swisstables\n /// [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h"}, {"sha": "8c801b9f1285db193e8af703a92e155ca5ae3b33", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -19,7 +19,7 @@ use super::map::{map_try_reserve_error, RandomState};\n // for `bucket.val` in the case of HashSet. I suppose we would need HKT\n // to get rid of it properly.\n \n-/// A hash set implemented as a `HashMap` where the value is `()`.\n+/// A [hash set] implemented as a `HashMap` where the value is `()`.\n ///\n /// As with the [`HashMap`] type, a `HashSet` requires that the elements\n /// implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by\n@@ -105,6 +105,7 @@ use super::map::{map_try_reserve_error, RandomState};\n /// // use the values stored in the set\n /// ```\n ///\n+/// [hash set]: crate::collections#use-the-set-variant-of-any-of-these-maps-when\n /// [`HashMap`]: crate::collections::HashMap\n /// [`RefCell`]: crate::cell::RefCell\n /// [`Cell`]: crate::cell::Cell"}, {"sha": "2a487fff54ae7a65918d820a8fcff61d591e4203", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -39,6 +39,7 @@ impl Drop for Handler {\n ))]\n mod imp {\n     use super::Handler;\n+    use crate::io;\n     use crate::mem;\n     use crate::ptr;\n \n@@ -149,11 +150,11 @@ mod imp {\n             0,\n         );\n         if stackp == MAP_FAILED {\n-            panic!(\"failed to allocate an alternative stack\");\n+            panic!(\"failed to allocate an alternative stack: {}\", io::Error::last_os_error());\n         }\n         let guard_result = libc::mprotect(stackp, page_size(), PROT_NONE);\n         if guard_result != 0 {\n-            panic!(\"failed to set up alternative stack guard page\");\n+            panic!(\"failed to set up alternative stack guard page: {}\", io::Error::last_os_error());\n         }\n         stackp.add(page_size())\n     }"}, {"sha": "01a12dcf5a2af1ea1f1dc0357cd0c219e7ce238d", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -231,6 +231,7 @@ pub mod guard {\n     use libc::{mmap, mprotect};\n     use libc::{MAP_ANON, MAP_FAILED, MAP_FIXED, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE};\n \n+    use crate::io;\n     use crate::ops::Range;\n     use crate::sync::atomic::{AtomicUsize, Ordering};\n     use crate::sys::os;\n@@ -361,12 +362,12 @@ pub mod guard {\n                 0,\n             );\n             if result != stackaddr || result == MAP_FAILED {\n-                panic!(\"failed to allocate a guard page\");\n+                panic!(\"failed to allocate a guard page: {}\", io::Error::last_os_error());\n             }\n \n             let result = mprotect(stackaddr, page_size, PROT_NONE);\n             if result != 0 {\n-                panic!(\"failed to protect the guard page\");\n+                panic!(\"failed to protect the guard page: {}\", io::Error::last_os_error());\n             }\n \n             let guardaddr = stackaddr as usize;"}, {"sha": "2f0496d7dd4ba06ab3a7f8e79bb9a26950c829a0", "filename": "src/ci/docker/host-x86_64/dist-android/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-android%2FDockerfile?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -9,6 +9,8 @@ RUN . /scripts/android-ndk.sh && \\\n     download_ndk android-ndk-r15c-linux-x86_64.zip && \\\n     make_standalone_toolchain arm 14 && \\\n     make_standalone_toolchain x86 14 && \\\n+    make_standalone_toolchain arm 21 && \\\n+    make_standalone_toolchain x86 21 && \\\n     make_standalone_toolchain arm64 21 && \\\n     make_standalone_toolchain x86_64 21 && \\\n     remove_ndk"}, {"sha": "de3a99f34fcfaf0a47f6d5f8ca6c8656a9e831c5", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -45,10 +45,10 @@ ENV \\\n     CC_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-gcc-8 \\\n     CXX_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-g++-8 \\\n     AR_x86_64_fortanix_unknown_sgx=ar \\\n-    CC_x86_64_fortanix_unknown_sgx=x86_64-fortanix-unknown-sgx-clang-11 \\\n-    CFLAGS_x86_64_fortanix_unknown_sgx=\"-mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening\" \\\n-    CXX_x86_64_fortanix_unknown_sgx=x86_64-fortanix-unknown-sgx-clang++-11 \\\n-    CXXFLAGS_x86_64_fortanix_unknown_sgx=\"-mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening\" \\\n+    CC_x86_64_fortanix_unknown_sgx=clang-11 \\\n+    CFLAGS_x86_64_fortanix_unknown_sgx=\"-D__ELF__ -isystem/usr/include/x86_64-linux-gnu -mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening\" \\\n+    CXX_x86_64_fortanix_unknown_sgx=clang++-11 \\\n+    CXXFLAGS_x86_64_fortanix_unknown_sgx=\"-D__ELF__ -isystem/usr/include/x86_64-linux-gnu -mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening\" \\\n     AR_i686_unknown_freebsd=i686-unknown-freebsd11-ar \\\n     CC_i686_unknown_freebsd=i686-unknown-freebsd11-clang \\\n     CXX_i686_unknown_freebsd=i686-unknown-freebsd11-clang++ \\\n@@ -71,8 +71,6 @@ COPY host-x86_64/dist-various-2/build-solaris-toolchain.sh /tmp/\n RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY host-x86_64/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n-COPY host-x86_64/dist-various-2/x86_64-fortanix-unknown-sgx-clang-wrap.sh /usr/bin/x86_64-fortanix-unknown-sgx-clang-11\n-RUN ln -s /usr/bin/x86_64-fortanix-unknown-sgx-clang-11 /usr/bin/x86_64-fortanix-unknown-sgx-clang++-11\n RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh\n \n COPY host-x86_64/dist-various-2/build-wasi-toolchain.sh /tmp/"}, {"sha": "c4ff44c37b1e35aa6e1a2d441d8fcfbaaaa305eb", "filename": "src/ci/docker/host-x86_64/dist-various-2/x86_64-fortanix-unknown-sgx-clang-wrap.sh", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fx86_64-fortanix-unknown-sgx-clang-wrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fx86_64-fortanix-unknown-sgx-clang-wrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fx86_64-fortanix-unknown-sgx-clang-wrap.sh?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,14 +0,0 @@\n-#!/bin/bash\n-\n-args=(\"$@\")\n-\n-for i in \"${!args[@]}\"; do\n-    # x86_64-fortanix-unknown-sgx doesn't have a C sysroot for things like\n-    # stdint.h and the C++ STL. Unlike GCC, clang will not use the host's\n-    # sysroot instead. Force it.\n-    if [ \"${args[$i]}\" = \"--target=x86_64-fortanix-unknown-sgx\" ]; then\n-        args[$i]=\"--target=x86_64-unknown-linux-gnu\"\n-    fi\n-done\n-\n-exec \"${0/x86_64-fortanix-unknown-sgx-clang/clang}\" \"${args[@]}\""}, {"sha": "af75ec5e24d13ad07235ffc59ee031e2c5377b56", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -82,13 +82,13 @@ endif\n %: $(SOURCEDIR)/lib/%.rs\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/lib/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/lib/$@.rs) \\\n \t\t\t--crate-type rlib -Zinstrument-coverage\n \n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage\n \n \t# Run it in order to generate some profiling data,\n@@ -107,7 +107,7 @@ endif\n \t# Run it through rustdoc as well to cover doctests\n \tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p.profraw \\\n \t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && echo \"--edition=2018\" ) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n \t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n \t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n "}, {"sha": "3f9403e6f70b8166709ab3361669ebda2206316f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,6 +1,6 @@\n     1|       |#![allow(unused_assignments, dead_code)]\n     2|       |\n-    3|       |// require-rust-edition-2018\n+    3|       |// compile-flags: --edition=2018\n     4|       |\n     5|      1|async fn c(x: u8) -> u8 {\n     6|      1|    if x == 8 {"}, {"sha": "6148d89ed75e1d119a783b275decc47806ed1f75", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.inline.txt", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inline.txt", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inline.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inline.txt?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,53 @@\n+    1|       |// compile-flags: -Zinline-mir\n+    2|       |\n+    3|       |use std::fmt::Display;\n+    4|       |\n+    5|      1|fn main() {\n+    6|      1|    permutations(&['a', 'b', 'c']);\n+    7|      1|}\n+    8|       |\n+    9|       |#[inline(always)]\n+   10|      1|fn permutations<T: Copy + Display>(xs: &[T]) {\n+   11|      1|    let mut ys = xs.to_owned();\n+   12|      1|    permutate(&mut ys, 0);\n+   13|      1|}\n+   14|       |\n+   15|     16|fn permutate<T: Copy + Display>(xs: &mut [T], k: usize) {\n+   16|     16|    let n = length(xs);\n+   17|     16|    if k == n {\n+   18|      6|        display(xs);\n+   19|     10|    } else if k < n {\n+   20|     15|        for i in k..n {\n+                               ^10\n+   21|     15|            swap(xs, i, k);\n+   22|     15|            permutate(xs, k + 1);\n+   23|     15|            swap(xs, i, k);\n+   24|     15|        }\n+   25|      0|    } else {\n+   26|      0|        error();\n+   27|      0|    }\n+   28|     16|}\n+   29|       |\n+   30|     16|fn length<T>(xs: &[T]) -> usize {\n+   31|     16|    xs.len()\n+   32|     16|}\n+   33|       |\n+   34|       |#[inline]\n+   35|     30|fn swap<T: Copy>(xs: &mut [T], i: usize, j: usize) {\n+   36|     30|    let t = xs[i];\n+   37|     30|    xs[i] = xs[j];\n+   38|     30|    xs[j] = t;\n+   39|     30|}\n+   40|       |\n+   41|      6|fn display<T: Display>(xs: &[T]) {\n+   42|     18|    for x in xs {\n+   43|     18|        print!(\"{}\", x);\n+   44|     18|    }\n+   45|      6|    println!();\n+   46|      6|}\n+   47|       |\n+   48|       |#[inline(always)]\n+   49|       |fn error() {\n+   50|       |    panic!(\"error\");\n+   51|       |}\n+"}, {"sha": "bc2f673349a678569ca0d7cea802c13edbfa2550", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}"}, {"sha": "b0bfa7074db940c1f078a944dc06ce9b1ae2d6dc", "filename": "src/test/run-make-fulldeps/coverage-spanview/Makefile", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -38,9 +38,7 @@ endif\n %: $(SOURCEDIR)/lib/%.rs\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/lib/$@.rs && \\\n-\t\t\t\techo \"--edition=2018\" \\\n-\t\t\t) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/lib/$@.rs) \\\n \t\t\t--crate-type rlib \\\n \t\t\t-Ztrim-diagnostic-paths=no \\\n \t\t\t-Zinstrument-coverage \\\n@@ -70,9 +68,7 @@ endif\n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n-\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && \\\n-\t\t\t\techo \"--edition=2018\" \\\n-\t\t\t) \\\n+\t\t\t$$( sed -nE 's#^// compile-flags:(.*)#\\1# p' $(SOURCEDIR)/$@.rs) \\\n \t\t\t-L \"$(TMPDIR)\" \\\n \t\t\t-Ztrim-diagnostic-paths=no \\\n \t\t\t-Zinstrument-coverage \\"}, {"sha": "6287516636ea92c35ead06b96f74e68316195e3a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.display.-------.InstrumentCoverage.0.html", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.display.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.display.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.display.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,161 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.display.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.display - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 40\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0,1\u298a</span>fn display&lt;T: Display&gt;(xs: &amp;[T]) <span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:9-42:10: @8[1]: _13 = ((_9 as Some).0: &amp;T)\n+42:9-42:10: @8[3]: _14 = _13\n+42:9-42:10: @8[4]: _7 = move _14\n+42:9-42:10: @8[5]: _8 = const ()\n+42:9-42:10: @8[13]: FakeRead(ForLet, _16)\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>x<span class=\"annotation\">\u2989@6,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:14-42:16: @8[12]: _16 = _7\n+43:16-43:20: @8[20]: _47 = const display::&lt;T&gt;::promoted[2]\n+43:16-43:20: @8[21]: _22 = &amp;(*_47)\n+43:16-43:20: @8[22]: _21 = &amp;(*_22)\n+43:16-43:20: @8[23]: _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize))\n+43:22-43:23: @8[31]: _29 = &amp;_16\n+43:9-43:25: @8[32]: _28 = (move _29,)\n+43:9-43:25: @8[34]: FakeRead(ForMatchedPlace, _28)\n+43:9-43:25: @8[36]: _30 = (_28.0: &amp;&amp;T)\n+43:9-43:25: @8[39]: _32 = &amp;(*_30)\n+43:9-43:25: @8[41]: _33 = &lt;&amp;T as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+43:9-43:25: @8.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;T&gt;(move _32, move _33) -&gt; [return: bb9, unwind: bb14]\n+43:9-43:25: @9[2]: _27 = [move _31]\n+43:9-43:25: @9[5]: _26 = &amp;_27\n+43:9-43:25: @9[6]: _25 = &amp;(*_26)\n+43:9-43:25: @9[7]: _24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+43:9-43:25: @9.Call: _19 = std::fmt::Arguments::new_v1(move _20, move _24) -&gt; [return: bb10, unwind: bb14]\n+43:9-43:25: @10.Call: _18 = std::io::_print(move _19) -&gt; [return: bb11, unwind: bb14]\n+42:17-44:6: @11[6]: _17 = const ()\"><span class=\"annotation\">@6,8,9,10,11\u298a</span>xs {</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:14-42:16: @8[12]: _16 = _7\n+43:16-43:20: @8[20]: _47 = const display::&lt;T&gt;::promoted[2]\n+43:16-43:20: @8[21]: _22 = &amp;(*_47)\n+43:16-43:20: @8[22]: _21 = &amp;(*_22)\n+43:16-43:20: @8[23]: _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize))\n+43:22-43:23: @8[31]: _29 = &amp;_16\n+43:9-43:25: @8[32]: _28 = (move _29,)\n+43:9-43:25: @8[34]: FakeRead(ForMatchedPlace, _28)\n+43:9-43:25: @8[36]: _30 = (_28.0: &amp;&amp;T)\n+43:9-43:25: @8[39]: _32 = &amp;(*_30)\n+43:9-43:25: @8[41]: _33 = &lt;&amp;T as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+43:9-43:25: @8.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;T&gt;(move _32, move _33) -&gt; [return: bb9, unwind: bb14]\n+43:9-43:25: @9[2]: _27 = [move _31]\n+43:9-43:25: @9[5]: _26 = &amp;_27\n+43:9-43:25: @9[6]: _25 = &amp;(*_26)\n+43:9-43:25: @9[7]: _24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+43:9-43:25: @9.Call: _19 = std::fmt::Arguments::new_v1(move _20, move _24) -&gt; [return: bb10, unwind: bb14]\n+43:9-43:25: @10.Call: _18 = std::io::_print(move _19) -&gt; [return: bb11, unwind: bb14]\n+42:17-44:6: @11[6]: _17 = const ()\">        print!(\"{}\", x);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"42:14-42:16: @8[12]: _16 = _7\n+43:16-43:20: @8[20]: _47 = const display::&lt;T&gt;::promoted[2]\n+43:16-43:20: @8[21]: _22 = &amp;(*_47)\n+43:16-43:20: @8[22]: _21 = &amp;(*_22)\n+43:16-43:20: @8[23]: _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize))\n+43:22-43:23: @8[31]: _29 = &amp;_16\n+43:9-43:25: @8[32]: _28 = (move _29,)\n+43:9-43:25: @8[34]: FakeRead(ForMatchedPlace, _28)\n+43:9-43:25: @8[36]: _30 = (_28.0: &amp;&amp;T)\n+43:9-43:25: @8[39]: _32 = &amp;(*_30)\n+43:9-43:25: @8[41]: _33 = &lt;&amp;T as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+43:9-43:25: @8.Call: _31 = std::fmt::ArgumentV1::new::&lt;&amp;T&gt;(move _32, move _33) -&gt; [return: bb9, unwind: bb14]\n+43:9-43:25: @9[2]: _27 = [move _31]\n+43:9-43:25: @9[5]: _26 = &amp;_27\n+43:9-43:25: @9[6]: _25 = &amp;(*_26)\n+43:9-43:25: @9[7]: _24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+43:9-43:25: @9.Call: _19 = std::fmt::Arguments::new_v1(move _20, move _24) -&gt; [return: bb10, unwind: bb14]\n+43:9-43:25: @10.Call: _18 = std::io::_print(move _19) -&gt; [return: bb11, unwind: bb14]\n+42:17-44:6: @11[6]: _17 = const ()\">    }<span class=\"annotation\">\u2989@6,8,9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:5-45:16: @5[13]: _46 = const display::&lt;T&gt;::promoted[1]\n+45:5-45:16: @5[14]: _38 = &amp;(*_46)\n+45:5-45:16: @5[15]: _37 = &amp;(*_38)\n+45:5-45:16: @5[16]: _36 = move _37 as &amp;[&amp;str] (Pointer(Unsize))\n+45:5-45:16: @5[22]: _44 = ()\n+45:5-45:16: @5[23]: FakeRead(ForMatchedPlace, _44)\n+45:5-45:16: @5[24]: _45 = const display::&lt;T&gt;::promoted[0]\n+45:5-45:16: @5[25]: _42 = &amp;(*_45)\n+45:5-45:16: @5[26]: _41 = &amp;(*_42)\n+45:5-45:16: @5[27]: _40 = move _41 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+45:5-45:16: @5.Call: _35 = std::fmt::Arguments::new_v1(move _36, move _40) -&gt; [return: bb12, unwind: bb14]\n+45:5-45:16: @12.Call: _34 = std::io::_print(move _35) -&gt; [return: bb13, unwind: bb14]\n+46:2-46:2: @13.Return: return\"><span class=\"annotation\">@5,12,13\u298a</span>println!();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"45:5-45:16: @5[13]: _46 = const display::&lt;T&gt;::promoted[1]\n+45:5-45:16: @5[14]: _38 = &amp;(*_46)\n+45:5-45:16: @5[15]: _37 = &amp;(*_38)\n+45:5-45:16: @5[16]: _36 = move _37 as &amp;[&amp;str] (Pointer(Unsize))\n+45:5-45:16: @5[22]: _44 = ()\n+45:5-45:16: @5[23]: FakeRead(ForMatchedPlace, _44)\n+45:5-45:16: @5[24]: _45 = const display::&lt;T&gt;::promoted[0]\n+45:5-45:16: @5[25]: _42 = &amp;(*_45)\n+45:5-45:16: @5[26]: _41 = &amp;(*_42)\n+45:5-45:16: @5[27]: _40 = move _41 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+45:5-45:16: @5.Call: _35 = std::fmt::Arguments::new_v1(move _36, move _40) -&gt; [return: bb12, unwind: bb14]\n+45:5-45:16: @12.Call: _34 = std::io::_print(move _35) -&gt; [return: bb13, unwind: bb14]\n+46:2-46:2: @13.Return: return\">}<span class=\"annotation\">\u2989@5,12,13</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "bbf19c3e446f9896f191eab7de19ffc610799fc3", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.error.-------.InstrumentCoverage.0.html", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.error.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.error.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.error.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,79 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.error.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.error - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 48\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"50:5-50:21: @0.Call: std::rt::begin_panic::&lt;&amp;str&gt;(const &quot;error&quot;) -&gt; bb1\n+49:12-51:2: @1.Resume: resume\"><span class=\"annotation\">@0,1\u298a</span>fn error() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"50:5-50:21: @0.Call: std::rt::begin_panic::&lt;&amp;str&gt;(const &quot;error&quot;) -&gt; bb1\n+49:12-51:2: @1.Resume: resume\">    panic!(\"error\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"50:5-50:21: @0.Call: std::rt::begin_panic::&lt;&amp;str&gt;(const &quot;error&quot;) -&gt; bb1\n+49:12-51:2: @1.Resume: resume\">}<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "8e8efb6d9f6b1a21fc1a6e6481def8ae4f9273dd", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.length.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.length.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.length.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.length.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.length.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.length - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 29\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:5-31:7: @0[1]: _2 = &amp;(*_1)\n+31:5-31:13: @0.Call: _0 = core::slice::&lt;impl [T]&gt;::len(move _2) -&gt; [return: bb1, unwind: bb2]\n+32:2-32:2: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>fn length&lt;T&gt;(xs: &amp;[T]) -&gt; usize {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:5-31:7: @0[1]: _2 = &amp;(*_1)\n+31:5-31:13: @0.Call: _0 = core::slice::&lt;impl [T]&gt;::len(move _2) -&gt; [return: bb1, unwind: bb2]\n+32:2-32:2: @1.Return: return\">    xs.len()</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"31:5-31:7: @0[1]: _2 = &amp;(*_1)\n+31:5-31:13: @0.Call: _0 = core::slice::&lt;impl [T]&gt;::len(move _2) -&gt; [return: bb1, unwind: bb2]\n+32:2-32:2: @1.Return: return\">}<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4ec2e9beede309c19f08d52f2c6274a9399365ff", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.main.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,94 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:18-6:34: @0[4]: _6 = const main::promoted[0]\n+6:18-6:34: @0[5]: _4 = &amp;(*_6)\n+6:18-6:34: @0[6]: _3 = &amp;(*_4)\n+6:18-6:34: @0[7]: _2 = move _3 as &amp;[char] (Pointer(Unsize))\n+6:5-6:35: @0.Call: _1 = permutations::&lt;char&gt;(move _2) -&gt; [return: bb1, unwind: bb2]\n+5:11-7:2: @1[3]: _0 = const ()\n+7:2-7:2: @1.Return: return\"><span class=\"annotation\">@0,1\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:18-6:34: @0[4]: _6 = const main::promoted[0]\n+6:18-6:34: @0[5]: _4 = &amp;(*_6)\n+6:18-6:34: @0[6]: _3 = &amp;(*_4)\n+6:18-6:34: @0[7]: _2 = move _3 as &amp;[char] (Pointer(Unsize))\n+6:5-6:35: @0.Call: _1 = permutations::&lt;char&gt;(move _2) -&gt; [return: bb1, unwind: bb2]\n+5:11-7:2: @1[3]: _0 = const ()\n+7:2-7:2: @1.Return: return\">    permutations(&amp;['a', 'b', 'c']);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:18-6:34: @0[4]: _6 = const main::promoted[0]\n+6:18-6:34: @0[5]: _4 = &amp;(*_6)\n+6:18-6:34: @0[6]: _3 = &amp;(*_4)\n+6:18-6:34: @0[7]: _2 = move _3 as &amp;[char] (Pointer(Unsize))\n+6:5-6:35: @0.Call: _1 = permutations::&lt;char&gt;(move _2) -&gt; [return: bb1, unwind: bb2]\n+5:11-7:2: @1[3]: _0 = const ()\n+7:2-7:2: @1.Return: return\">}<span class=\"annotation\">\u2989@0,1</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "fd72973ccd076f4e821da4a0f162e8c8ca668bea", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutate.-------.InstrumentCoverage.0.html", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutate.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutate.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutate.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,183 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutate.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.permutate - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 14\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:20-16:22: @0[2]: _4 = &amp;(*_1)\n+16:13-16:23: @0.Call: _3 = length::&lt;T&gt;(move _4) -&gt; [return: bb1, unwind: bb22]\n+16:9-16:10: @1[1]: FakeRead(ForLet, _3)\n+17:8-17:9: @1[4]: _6 = _2\n+17:13-17:14: @1[6]: _7 = _3\n+17:8-17:14: @1[7]: _5 = Eq(move _6, move _7)\"><span class=\"annotation\">@0,1\u298a</span>fn permutate&lt;T: Copy + Display&gt;(xs: &amp;mut [T], k: usize) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:20-16:22: @0[2]: _4 = &amp;(*_1)\n+16:13-16:23: @0.Call: _3 = length::&lt;T&gt;(move _4) -&gt; [return: bb1, unwind: bb22]\n+16:9-16:10: @1[1]: FakeRead(ForLet, _3)\n+17:8-17:9: @1[4]: _6 = _2\n+17:13-17:14: @1[6]: _7 = _3\n+17:8-17:14: @1[7]: _5 = Eq(move _6, move _7)\">    let n = length(xs);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:20-16:22: @0[2]: _4 = &amp;(*_1)\n+16:13-16:23: @0.Call: _3 = length::&lt;T&gt;(move _4) -&gt; [return: bb1, unwind: bb22]\n+16:9-16:10: @1[1]: FakeRead(ForLet, _3)\n+17:8-17:9: @1[4]: _6 = _2\n+17:13-17:14: @1[6]: _7 = _3\n+17:8-17:14: @1[7]: _5 = Eq(move _6, move _7)\">    if k == n<span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:17-18:19: @2[2]: _9 = &amp;(*_1)\n+18:9-18:20: @2.Call: _8 = display::&lt;T&gt;(move _9) -&gt; [return: bb4, unwind: bb22]\n+17:15-19:6: @4[2]: _0 = const ()\"><span class=\"annotation\">@2,4\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:17-18:19: @2[2]: _9 = &amp;(*_1)\n+18:9-18:20: @2.Call: _8 = display::&lt;T&gt;(move _9) -&gt; [return: bb4, unwind: bb22]\n+17:15-19:6: @4[2]: _0 = const ()\">        display(xs);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"18:17-18:19: @2[2]: _9 = &amp;(*_1)\n+18:9-18:20: @2.Call: _8 = display::&lt;T&gt;(move _9) -&gt; [return: bb4, unwind: bb22]\n+17:15-19:6: @4[2]: _0 = const ()\">    }<span class=\"annotation\">\u2989@2,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:15-19:16: @3[2]: _11 = _2\n+19:19-19:20: @3[4]: _12 = _3\n+19:15-19:20: @3[5]: _10 = Lt(move _11, move _12)\"><span class=\"annotation\">@3\u298a</span>k &lt; n<span class=\"annotation\">\u2989@3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        for </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @14[1]: _25 = ((_21 as Some).0: usize)\n+20:13-20:14: @14[3]: _26 = _25\n+20:13-20:14: @14[4]: _19 = move _26\n+20:13-20:14: @14[5]: _20 = const ()\n+20:13-20:14: @14[13]: FakeRead(ForLet, _28)\"><span class=\"annotation\">@12,14,15,16,17,18\u298a</span>i<span class=\"annotation\">\u2989@12,14,15,16,17,18</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:18-20:19: @5[3]: _15 = _2\n+20:21-20:22: @5[5]: _16 = _3\"><span class=\"annotation\">@5,7\u298a</span>k..n<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\"><span class=\"annotation\">@12,14,15,16,17,18\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">            swap(xs, i, k);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">            permutate(xs, k + 1);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">            swap(xs, i, k);</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:20: @14[17]: _31 = &amp;mut (*_1)\n+21:22-21:23: @14[19]: _32 = _28\n+21:25-21:26: @14[21]: _33 = _2\n+21:13-21:27: @14.Call: _30 = swap::&lt;T&gt;(move _31, move _32, move _33) -&gt; [return: bb15, unwind: bb22]\n+22:23-22:25: @15[6]: _35 = &amp;mut (*_1)\n+22:27-22:28: @15[9]: _37 = _2\n+22:27-22:32: @15[10]: _38 = CheckedAdd(_37, const 1_usize)\n+22:27-22:32: @16[0]: _36 = move (_38.0: usize)\n+22:13-22:33: @16.Call: _34 = permutate::&lt;T&gt;(move _35, move _36) -&gt; [return: bb17, unwind: bb22]\n+23:18-23:20: @17[5]: _40 = &amp;mut (*_1)\n+23:22-23:23: @17[7]: _41 = _28\n+23:25-23:26: @17[9]: _42 = _2\n+23:13-23:27: @17.Call: _39 = swap::&lt;T&gt;(move _40, move _41, move _42) -&gt; [return: bb18, unwind: bb22]\n+20:23-24:10: @18[4]: _29 = const ()\">        }<span class=\"annotation\">\u2989@12,14,15,16,17,18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @6.Call: _43 = error() -&gt; [return: bb19, unwind: bb22]\n+25:12-27:6: @19[1]: _0 = const ()\"><span class=\"annotation\">@6,19\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @6.Call: _43 = error() -&gt; [return: bb19, unwind: bb22]\n+25:12-27:6: @19[1]: _0 = const ()\">        error();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:9-26:16: @6.Call: _43 = error() -&gt; [return: bb19, unwind: bb22]\n+25:12-27:6: @19[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@6,19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:2-28:2: @21.Return: return\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4bfd22f3cd9031171fcfb65c02ffd08134074700", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutations.-------.InstrumentCoverage.0.html", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutations.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutations.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.permutations.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,113 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.permutations.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.permutations - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 9\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>fn permutations&lt;T: Copy + Display&gt;(xs: &amp;[T]) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\">    let mut ys = xs.to_owned();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\">    permutate(&amp;mut ys, 0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"11:18-11:20: @0[2]: _3 = &amp;(*_1)\n+11:18-11:31: @0.Call: _2 = &lt;[T] as std::borrow::ToOwned&gt;::to_owned(move _3) -&gt; [return: bb1, unwind: bb6]\n+11:9-11:15: @1[1]: FakeRead(ForLet, _2)\n+12:15-12:22: @1[7]: _8 = &amp;mut _2\n+12:15-12:22: @1[8]: _7 = &amp;mut (*_8)\n+12:15-12:22: @1.Call: _6 = &lt;std::vec::Vec&lt;T&gt; as std::ops::DerefMut&gt;::deref_mut(move _7) -&gt; [return: bb2, unwind: bb5]\n+12:15-12:22: @2[0]: _5 = &amp;mut (*_6)\n+12:5-12:26: @2.Call: _4 = permutate::&lt;T&gt;(move _5, const 0_usize) -&gt; [return: bb3, unwind: bb5]\n+10:46-13:2: @3[4]: _0 = const ()\n+13:2-13:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4c3f63093d30e5e2aa381b9f1c186f2fce61a85a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.swap.-------.InstrumentCoverage.0.html", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.swap.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.swap.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.inline%2Finline.swap.-------.InstrumentCoverage.0.html?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,173 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.inline/inline.swap.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>inline.swap - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 34\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>fn swap&lt;T: Copy&gt;(xs: &amp;mut [T], i: usize, j: usize) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">    let t = xs[i];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">    xs[i] = xs[j];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">    xs[j] = t;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:16-36:17: @0[2]: _5 = _2\n+36:13-36:18: @0[3]: _6 = Len((*_1))\n+36:13-36:18: @0[4]: _7 = Lt(_5, _6)\n+36:13-36:18: @1[0]: _4 = (*_1)[_5]\n+36:9-36:10: @1[1]: FakeRead(ForLet, _4)\n+37:16-37:17: @1[5]: _9 = _3\n+37:13-37:18: @1[6]: _10 = Len((*_1))\n+37:13-37:18: @1[7]: _11 = Lt(_9, _10)\n+37:13-37:18: @2[0]: _8 = (*_1)[_9]\n+37:8-37:9: @2[2]: _12 = _2\n+37:5-37:10: @2[3]: _13 = Len((*_1))\n+37:5-37:10: @2[4]: _14 = Lt(_12, _13)\n+37:5-37:18: @3[0]: (*_1)[_12] = move _8\n+38:13-38:14: @3[5]: _15 = _4\n+38:8-38:9: @3[7]: _16 = _3\n+38:5-38:10: @3[8]: _17 = Len((*_1))\n+38:5-38:10: @3[9]: _18 = Lt(_16, _17)\n+38:5-38:14: @4[0]: (*_1)[_16] = move _15\n+35:52-39:2: @4[3]: _0 = const ()\n+39:2-39:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "d5ec32deac1252ff08f5d67fa699fdec759940ef", "filename": "src/test/run-make-fulldeps/coverage/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_assignments, dead_code)]\n \n-// require-rust-edition-2018\n+// compile-flags: --edition=2018\n \n async fn c(x: u8) -> u8 {\n     if x == 8 {"}, {"sha": "9cfab9ddbadf2e70cf4ef7f695bbe17186c6f9ed", "filename": "src/test/run-make-fulldeps/coverage/inline.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finline.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,51 @@\n+// compile-flags: -Zinline-mir\n+\n+use std::fmt::Display;\n+\n+fn main() {\n+    permutations(&['a', 'b', 'c']);\n+}\n+\n+#[inline(always)]\n+fn permutations<T: Copy + Display>(xs: &[T]) {\n+    let mut ys = xs.to_owned();\n+    permutate(&mut ys, 0);\n+}\n+\n+fn permutate<T: Copy + Display>(xs: &mut [T], k: usize) {\n+    let n = length(xs);\n+    if k == n {\n+        display(xs);\n+    } else if k < n {\n+        for i in k..n {\n+            swap(xs, i, k);\n+            permutate(xs, k + 1);\n+            swap(xs, i, k);\n+        }\n+    } else {\n+        error();\n+    }\n+}\n+\n+fn length<T>(xs: &[T]) -> usize {\n+    xs.len()\n+}\n+\n+#[inline]\n+fn swap<T: Copy>(xs: &mut [T], i: usize, j: usize) {\n+    let t = xs[i];\n+    xs[i] = xs[j];\n+    xs[j] = t;\n+}\n+\n+fn display<T: Display>(xs: &[T]) {\n+    for x in xs {\n+        print!(\"{}\", x);\n+    }\n+    println!();\n+}\n+\n+#[inline(always)]\n+fn error() {\n+    panic!(\"error\");\n+}"}, {"sha": "b1b61f0211a37328aa5d25a4e8b9177c705df508", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,14 @@\n+error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:22:15\n+   |\n+LL |         asm!(\".att_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:25:15\n+   |\n+LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9e9c7badfcacec8435d39fd873ba06874dfa38ab", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,38 @@\n+// revisions: x86_64 arm\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[arm] compile-flags: --target armv7-unknown-linux-gnueabihf\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+fn main() {\n+    unsafe {\n+        asm!(\".intel_syntax noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        asm!(\".att_syntax noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n+        //[arm]~^^ att syntax is the default syntax on this target\n+        asm!(\".att_syntax bbb noprefix\", \"nop\");\n+        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n+        //[arm]~^^ att syntax is the default syntax on this target\n+        asm!(\".intel_syntax noprefix; nop\");\n+        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+\n+        asm!(\n+            r\"\n+            .intel_syntax noprefix\n+            nop\"\n+        );\n+        //[x86_64]~^^^ ERROR intel syntax is the default syntax on this target\n+    }\n+}"}, {"sha": "c54c2742a57916e17581d36fb42811c301d13b45", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,50 @@\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:18:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:20:15\n+   |\n+LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n+  --> $DIR/inline-syntax.rs:22:15\n+   |\n+LL |         asm!(\".att_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove the assembler directive and replace it with options(att_syntax)\n+   |\n+LL |         asm!(\"\", \"nop\", options(att_syntax));\n+   |              --       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n+  --> $DIR/inline-syntax.rs:25:15\n+   |\n+LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove the assembler directive and replace it with options(att_syntax)\n+   |\n+LL |         asm!(\"\", \"nop\", options(att_syntax));\n+   |              --       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:28:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix; nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:33:14\n+   |\n+LL |               .intel_syntax noprefix\n+   |  ______________^\n+LL | |             nop\"\n+   | |_ help: remove this assembler directive\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "0ba5a37b167cdaff937337bffce3da8e75d431ab", "filename": "src/test/ui/lint/register-tool-lint.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Flint%2Fregister-tool-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Flint%2Fregister-tool-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fregister-tool-lint.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,11 @@\n+#![crate_type = \"lib\"]\n+#![feature(register_tool)]\n+#![register_tool(xyz)]\n+#![warn(xyz::my_lint)] // this should not error\n+#![warn(abc::my_lint)]\n+//~^ ERROR unknown tool name `abc` found in scoped lint\n+//~| HELP add `#![register_tool(abc)]`\n+//~| ERROR unknown tool name `abc`\n+//~| HELP add `#![register_tool(abc)]`\n+//~| ERROR unknown tool name `abc`\n+//~| HELP add `#![register_tool(abc)]`"}, {"sha": "750c74cec1eb998ebffcbe7014f153044732d657", "filename": "src/test/ui/lint/register-tool-lint.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Flint%2Fregister-tool-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Flint%2Fregister-tool-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fregister-tool-lint.stderr?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,27 @@\n+error[E0710]: unknown tool name `abc` found in scoped lint: `abc::my_lint`\n+  --> $DIR/register-tool-lint.rs:5:9\n+   |\n+LL | #![warn(abc::my_lint)]\n+   |         ^^^\n+   |\n+   = help: add `#![register_tool(abc)]` to the crate root\n+\n+error[E0710]: unknown tool name `abc` found in scoped lint: `abc::my_lint`\n+  --> $DIR/register-tool-lint.rs:5:9\n+   |\n+LL | #![warn(abc::my_lint)]\n+   |         ^^^\n+   |\n+   = help: add `#![register_tool(abc)]` to the crate root\n+\n+error[E0710]: unknown tool name `abc` found in scoped lint: `abc::my_lint`\n+  --> $DIR/register-tool-lint.rs:5:9\n+   |\n+LL | #![warn(abc::my_lint)]\n+   |         ^^^\n+   |\n+   = help: add `#![register_tool(abc)]` to the crate root\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0710`."}, {"sha": "8ed7f25d2bbdbd79dbe9a8cee50b24f8ab3e2649", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,21 +0,0 @@\n-// Ensures -Zmir-opt-level=3 (specifically, inlining) is not allowed with -Zinstrument-coverage.\n-// Regression test for issue #80060.\n-//\n-// needs-profiler-support\n-// build-pass\n-// compile-flags: -Zmir-opt-level=3 -Zinstrument-coverage\n-#[inline(never)]\n-fn foo() {}\n-\n-pub fn baz() {\n-    bar();\n-}\n-\n-#[inline(always)]\n-fn bar() {\n-    foo();\n-}\n-\n-fn main() {\n-    bar();\n-}"}, {"sha": "d482afc395d19623582b3ceabf07d5c5a19e2d2f", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr?ref=36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "patch": "@@ -1,2 +0,0 @@\n-warning: `-Z mir-opt-level=3` (or any level > 1) enables function inlining, which is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\n-"}, {"sha": "abc3d2691a307bed549216a34b9dc70897022f48", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Print)]\n+enum ProceduralMasqueradeDummyType { //~ WARN using\n+//~| WARN this was previously\n+    Input\n+}\n+\n+fn main() {}"}, {"sha": "0b930705e35105dd1df67abc970ef59fe1c755b3", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,25 @@\n+warning: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+   |\n+LL | enum ProceduralMasqueradeDummyType {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\n+\n+warning: 1 warning emitted\n+\n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+   |\n+LL | enum ProceduralMasqueradeDummyType {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\n+"}, {"sha": "8edd68f8a3b849dc0605203bf52b68a9f4e038d0", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stdout", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -0,0 +1,22 @@\n+PRINT-DERIVE INPUT (DISPLAY): enum ProceduralMasqueradeDummyType { Input, }\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input }\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"enum\",\n+        span: #0 bytes(100..104),\n+    },\n+    Ident {\n+        ident: \"ProceduralMasqueradeDummyType\",\n+        span: #0 bytes(105..134),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"Input\",\n+                span: #0 bytes(186..191),\n+            },\n+        ],\n+        span: #0 bytes(135..193),\n+    },\n+]"}, {"sha": "9e4aa7a939acbca1a2ba4fdc7d0c942d286c5ada", "filename": "src/test/ui/tool_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Ftool_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Ftool_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool_lints.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,5 +1,5 @@\n #[warn(foo::bar)]\n-//~^ ERROR an unknown tool name found in scoped lint: `foo::bar`\n-//~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n-//~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n+//~^ ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n+//~| ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n+//~| ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n fn main() {}"}, {"sha": "e06f6ddc1ca3af6651073368df79cf65888a9164", "filename": "src/test/ui/tool_lints.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Ftool_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Ftool_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool_lints.stderr?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,20 +1,26 @@\n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/tool_lints.rs:1:8\n    |\n LL | #[warn(foo::bar)]\n    |        ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/tool_lints.rs:1:8\n    |\n LL | #[warn(foo::bar)]\n    |        ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/tool_lints.rs:1:8\n    |\n LL | #[warn(foo::bar)]\n    |        ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n error: aborting due to 3 previous errors\n "}, {"sha": "84ab7c1944ab2ac10fe0cb288f04fb3d94a55928", "filename": "src/test/ui/unknown-lint-tool-name.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-lint-tool-name.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,8 +1,8 @@\n-#![deny(foo::bar)] //~ ERROR an unknown tool name found in scoped lint: `foo::bar`\n-                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n-                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n+#![deny(foo::bar)] //~ ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n+                   //~| ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n+                   //~| ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n \n-#[allow(foo::bar)] //~ ERROR an unknown tool name found in scoped lint: `foo::bar`\n-                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n-                   //~| ERROR an unknown tool name found in scoped lint: `foo::bar`\n+#[allow(foo::bar)] //~ ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n+                   //~| ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n+                   //~| ERROR unknown tool name `foo` found in scoped lint: `foo::bar`\n fn main() {}"}, {"sha": "1d145515abf66e60e790adcc8f45311f758e059e", "filename": "src/test/ui/unknown-lint-tool-name.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Funknown-lint-tool-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftest%2Fui%2Funknown-lint-tool-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-lint-tool-name.stderr?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -1,38 +1,50 @@\n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/unknown-lint-tool-name.rs:1:9\n    |\n LL | #![deny(foo::bar)]\n    |         ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/unknown-lint-tool-name.rs:5:9\n    |\n LL | #[allow(foo::bar)]\n    |         ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/unknown-lint-tool-name.rs:1:9\n    |\n LL | #![deny(foo::bar)]\n    |         ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/unknown-lint-tool-name.rs:5:9\n    |\n LL | #[allow(foo::bar)]\n    |         ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/unknown-lint-tool-name.rs:1:9\n    |\n LL | #![deny(foo::bar)]\n    |         ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n-error[E0710]: an unknown tool name found in scoped lint: `foo::bar`\n+error[E0710]: unknown tool name `foo` found in scoped lint: `foo::bar`\n   --> $DIR/unknown-lint-tool-name.rs:5:9\n    |\n LL | #[allow(foo::bar)]\n    |         ^^^\n+   |\n+   = help: add `#![register_tool(foo)]` to the crate root\n \n error: aborting due to 6 previous errors\n "}, {"sha": "1d4b5e1247de742cfc06ef58ac4cb6d61fe0eee3", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -44,7 +44,7 @@ fn main() {\n     }\n \n     if !config.has_tidy && config.mode == Mode::Rustdoc {\n-        eprintln!(\"warning: `tidy` is not installed; generated diffs will be harder to read\");\n+        eprintln!(\"warning: `tidy` is not installed; diffs will not be generated\");\n     }\n \n     log_config(&config);"}, {"sha": "7aa3d4ab09e41025c990ca125a54b084be53a8d8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5745606b48afca8e7d7702e363e88caa80e1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=146f5745606b48afca8e7d7702e363e88caa80e1", "patch": "@@ -2367,6 +2367,9 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn compare_to_default_rustdoc(&mut self, out_dir: &Path) {\n+        if !self.config.has_tidy {\n+            return;\n+        }\n         println!(\"info: generating a diff against nightly rustdoc\");\n \n         let suffix =\n@@ -2428,10 +2431,8 @@ impl<'test> TestCx<'test> {\n                 }\n             }\n         };\n-        if self.config.has_tidy {\n-            tidy_dir(out_dir);\n-            tidy_dir(&compare_dir);\n-        }\n+        tidy_dir(out_dir);\n+        tidy_dir(&compare_dir);\n \n         let pager = {\n             let output = Command::new(\"git\").args(&[\"config\", \"--get\", \"core.pager\"]).output().ok();"}]}