{"sha": "f8ae31f60123584b3c40521177bb703022faa8c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWUzMWY2MDEyMzU4NGIzYzQwNTIxMTc3YmI3MDMwMjJmYWE4Yzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-21T15:36:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:12:31Z"}, "message": "Update error messages and error descriptions", "tree": {"sha": "b021fd0d09373cdb49e254235e1b2245b33430f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b021fd0d09373cdb49e254235e1b2245b33430f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ae31f60123584b3c40521177bb703022faa8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ae31f60123584b3c40521177bb703022faa8c8", "html_url": "https://github.com/rust-lang/rust/commit/f8ae31f60123584b3c40521177bb703022faa8c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ae31f60123584b3c40521177bb703022faa8c8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a2f852beae15235e7d3c4c5751ffe8e9459817", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a2f852beae15235e7d3c4c5751ffe8e9459817", "html_url": "https://github.com/rust-lang/rust/commit/26a2f852beae15235e7d3c4c5751ffe8e9459817"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "35a3bdc68bc4fa45efb2f58f1e6e41f07851106b", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -21,13 +21,14 @@ trait Foo {\n     fn dummy(&self) { }\n }\n \n-pub trait Bar : Foo {} // error: private trait in exported type parameter bound\n+pub trait Bar : Foo {} // error: private trait in public interface\n pub struct Bar<T: Foo>(pub T); // same error\n pub fn foo<T: Foo> (t: T) {} // same error\n ```\n \n-To solve this error, please ensure that the trait is also public and accessible\n-at the same level of the public functions or types which are bound on it.\n+To solve this error, please ensure that the trait is also public. The trait\n+can be made inaccessible if necessary by placing it into a private inner module,\n+but it still has to be marked with `pub`.\n Example:\n \n ```\n@@ -42,20 +43,22 @@ pub fn foo<T: Foo> (t: T) {} // ok!\n \"##,\n \n E0446: r##\"\n-A private type was used in an exported type signature. Erroneous code example:\n+A private type was used in an public type signature. Erroneous code example:\n \n ```\n mod Foo {\n     struct Bar(u32);\n \n-    pub fn bar() -> Bar { // error: private type in exported type signature\n+    pub fn bar() -> Bar { // error: private type in public interface\n         Bar(0)\n     }\n }\n ```\n \n-To solve this error, please ensure that the type is also public and accessible\n-at the same level of the public functions or types which use it. Example:\n+To solve this error, please ensure that the type is also public. The type\n+can be made inaccessible if necessary by placing it into a private inner module,\n+but it still has to be marked with `pub`.\n+Example:\n \n ```\n mod Foo {"}, {"sha": "4607442391759ca52f787c5da0648badf0999994", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -1136,7 +1136,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                             if item.vis != hir::Public {\n                                 if !self.is_quiet {\n                                     span_err!(self.tcx.sess, ty.span, E0446,\n-                                              \"private type in exported type signature\");\n+                                              \"private type in public interface\");\n                                 }\n                                 self.is_public = false;\n                             }\n@@ -1162,7 +1162,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                 if item.vis != hir::Public {\n                     if !self.is_quiet {\n                         span_err!(self.tcx.sess, trait_ref.path.span, E0445,\n-                                  \"private trait in exported type parameter bound\");\n+                                  \"private trait in public interface\");\n                     }\n                     self.is_public = false;\n                 }"}, {"sha": "300fc5a6ef736427ba86f9b33c6b92b342b4717d", "filename": "src/test/compile-fail/issue-18389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -14,7 +14,7 @@ use std::any::TypeId;\n trait Private<P, R> {\n     fn call(&self, p: P, r: R);\n }\n-pub trait Public: Private< //~ ERROR private trait in exported type parameter bound\n+pub trait Public: Private< //~ ERROR private trait in public interface\n     <Self as Public>::P,\n     <Self as Public>::R\n > {"}, {"sha": "c619f771fda68f864538ec2a4e7b7bfebe6e9d3a", "filename": "src/test/compile-fail/issue-22912.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -20,7 +20,7 @@ trait PrivateTrait {\n }\n \n impl PublicTrait for PublicType {\n-    type Item = PrivateType;  //~ ERROR private type in exported type signature\n+    type Item = PrivateType;  //~ ERROR private type in public interface\n }\n \n // OK"}, {"sha": "6cc0a549e5439fef7223496e0cb39964fd63be8c", "filename": "src/test/compile-fail/issue-28325.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-28325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-28325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28325.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -16,7 +16,7 @@ mod y {\n     struct Bar { x: u32 }\n \n     impl Foo {\n-        pub fn foo(&self, x: Self, y: Bar) { } //~ ERROR private type in exported type signature\n+        pub fn foo(&self, x: Self, y: Bar) { } //~ ERROR private type in public interface\n     }\n }\n \n@@ -26,9 +26,9 @@ mod x {\n     struct Bar { _x: u32 }\n \n     impl Foo {\n-        pub fn foo(&self, _x: Self, _y: Bar) { } //~ ERROR private type in exported type signature\n+        pub fn foo(&self, _x: Self, _y: Bar) { } //~ ERROR private type in public interface\n         pub fn bar(&self) -> Bar { Bar { _x: self.x } }\n-        //~^ ERROR private type in exported type signature\n+        //~^ ERROR private type in public interface\n     }\n }\n "}, {"sha": "b50647ae64c5cc1483ea0300a0f5a8634dfeb4d5", "filename": "src/test/compile-fail/issue-28450.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -15,21 +15,21 @@ struct Priv;\n pub use self::private::public;\n \n mod private {\n-    pub type Priv = super::Priv; //~ ERROR private type in exported type signature\n+    pub type Priv = super::Priv; //~ ERROR private type in public interface\n \n     pub fn public(_x: Priv) {\n     }\n }\n \n struct __CFArray;\n-pub type CFArrayRef = *const __CFArray; //~ ERROR private type in exported type signature\n+pub type CFArrayRef = *const __CFArray; //~ ERROR private type in public interface\n trait Pointer { type Pointee; }\n impl<T> Pointer for *const T { type Pointee = T; }\n pub type __CFArrayRevealed = <CFArrayRef as Pointer>::Pointee;\n-//~^ ERROR private type in exported type signature\n+//~^ ERROR private type in public interface\n \n type Foo = u8;\n-pub fn foo(f: Foo) {} //~ ERROR private type in exported type signature\n+pub fn foo(f: Foo) {} //~ ERROR private type in public interface\n \n pub trait Exporter {\n     type Output;\n@@ -43,7 +43,7 @@ pub fn block() -> <Helper as Exporter>::Output {\n     }\n \n     impl Exporter for Helper {\n-        type Output = Inner; //~ ERROR private type in exported type signature\n+        type Output = Inner; //~ ERROR private type in public interface\n     }\n \n     Inner"}, {"sha": "f43c17c3854b79a5719bafec509a4a8957e25571", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -36,17 +36,17 @@ impl Public<Private<isize>> {\n     fn d() -> Private<isize> { panic!() }\n }\n impl Public<isize> {\n-    pub fn e(&self) -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n+    pub fn e(&self) -> Private<isize> { panic!() } //~ ERROR private type in public interface\n     fn f(&self) -> Private<isize> { panic!() }\n }\n \n-pub fn x(_: Private<isize>) {} //~ ERROR private type in exported type signature\n+pub fn x(_: Private<isize>) {} //~ ERROR private type in public interface\n \n fn y(_: Private<isize>) {}\n \n \n pub struct Foo {\n-    pub x: Private<isize>, //~ ERROR private type in exported type signature\n+    pub x: Private<isize>, //~ ERROR private type in public interface\n     y: Private<isize>\n }\n \n@@ -55,9 +55,9 @@ struct Bar {\n }\n \n pub enum Baz {\n-    Baz1(Private<isize>), //~ ERROR private type in exported type signature\n+    Baz1(Private<isize>), //~ ERROR private type in public interface\n     Baz2 {\n-        y: Private<isize> //~ ERROR private type in exported type signature\n+        y: Private<isize> //~ ERROR private type in public interface\n     },\n }\n \n@@ -69,14 +69,14 @@ enum Qux {\n }\n \n pub trait PubTrait {\n-    fn foo(&self) -> Private<isize> { panic!( )} //~ ERROR private type in exported type signature\n-    fn bar(&self) -> Private<isize>; //~ ERROR private type in exported type signature\n-    fn baz() -> Private<isize>; //~ ERROR private type in exported type signature\n+    fn foo(&self) -> Private<isize> { panic!( )} //~ ERROR private type in public interface\n+    fn bar(&self) -> Private<isize>; //~ ERROR private type in public interface\n+    fn baz() -> Private<isize>; //~ ERROR private type in public interface\n }\n \n impl PubTrait for Public<isize> {\n-    fn bar(&self) -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n-    fn baz() -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n+    fn bar(&self) -> Private<isize> { panic!() } //~ ERROR private type in public interface\n+    fn baz() -> Private<isize> { panic!() } //~ ERROR private type in public interface\n }\n impl PubTrait for Public<Private<isize>> {\n     fn bar(&self) -> Private<isize> { panic!() }\n@@ -117,7 +117,7 @@ impl ParamTrait<Private<isize>> for Private<isize> {\n     fn foo() -> Private<isize> { panic!( )}\n }\n \n-impl<T: ParamTrait<Private<isize>>>  //~ ERROR private type in exported type signature\n+impl<T: ParamTrait<Private<isize>>>  //~ ERROR private type in public interface\n      ParamTrait<T> for Public<i8> {\n     fn foo() -> T { panic!() }\n }"}, {"sha": "cca6143ed409ec21cee0228682730cd8cee63ffa", "filename": "src/test/compile-fail/priv_in_pub_sig_priv_mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpriv_in_pub_sig_priv_mod.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -14,12 +14,12 @@\n mod a {\n     struct Priv;\n \n-    pub fn expose_a() -> Priv { //~Error: private type in exported type signature\n+    pub fn expose_a() -> Priv { //~Error: private type in public interface\n         panic!();\n     }\n \n     mod b {\n-        pub fn expose_b() -> super::Priv { //~Error: private type in exported type signature\n+        pub fn expose_b() -> super::Priv { //~Error: private type in public interface\n             panic!();\n         }\n     }"}, {"sha": "23e0547922881f08c5ee82b487d5d29afa91c7cf", "filename": "src/test/compile-fail/visible-private-types-generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -14,52 +14,52 @@ trait Foo {\n \n pub fn f<\n     T\n-    : Foo //~ ERROR private trait in exported type parameter bound\n+    : Foo //~ ERROR private trait in public interface\n >() {}\n \n pub fn g<T>() where\n     T\n-    : Foo //~ ERROR private trait in exported type parameter bound\n+    : Foo //~ ERROR private trait in public interface\n {}\n \n pub struct S;\n \n impl S {\n     pub fn f<\n         T\n-        : Foo //~ ERROR private trait in exported type parameter bound\n+        : Foo //~ ERROR private trait in public interface\n     >() {}\n \n     pub fn g<T>() where\n         T\n-        : Foo //~ ERROR private trait in exported type parameter bound\n+        : Foo //~ ERROR private trait in public interface\n     {}\n }\n \n pub struct S1<\n     T\n-    : Foo //~ ERROR private trait in exported type parameter bound\n+    : Foo //~ ERROR private trait in public interface\n > {\n     x: T\n }\n \n pub struct S2<T> where\n     T\n-    : Foo //~ ERROR private trait in exported type parameter bound\n+    : Foo //~ ERROR private trait in public interface\n {\n     x: T\n }\n \n pub enum E1<\n     T\n-    : Foo //~ ERROR private trait in exported type parameter bound\n+    : Foo //~ ERROR private trait in public interface\n > {\n     V1(T)\n }\n \n pub enum E2<T> where\n     T\n-    : Foo //~ ERROR private trait in exported type parameter bound\n+    : Foo //~ ERROR private trait in public interface\n {\n     V2(T)\n }"}, {"sha": "6de627a698a170bd27763b77bf8731431126d77a", "filename": "src/test/compile-fail/visible-private-types-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae31f60123584b3c40521177bb703022faa8c8/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs?ref=f8ae31f60123584b3c40521177bb703022faa8c8", "patch": "@@ -12,6 +12,6 @@ trait Foo {\n     fn dummy(&self) { }\n }\n \n-pub trait Bar : Foo {} //~ ERROR private trait in exported type\n+pub trait Bar : Foo {} //~ ERROR private trait in public interface\n \n fn main() {}"}]}