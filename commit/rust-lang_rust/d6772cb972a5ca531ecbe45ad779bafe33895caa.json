{"sha": "d6772cb972a5ca531ecbe45ad779bafe33895caa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NzcyY2I5NzJhNWNhNTMxZWNiZTQ1YWQ3NzliYWZlMzM4OTVjYWE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-28T03:39:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:25Z"}, "message": "Check Repeat Rvalue", "tree": {"sha": "5f93ddf8a01a779230788b46c7172278d54055f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f93ddf8a01a779230788b46c7172278d54055f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6772cb972a5ca531ecbe45ad779bafe33895caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6772cb972a5ca531ecbe45ad779bafe33895caa", "html_url": "https://github.com/rust-lang/rust/commit/d6772cb972a5ca531ecbe45ad779bafe33895caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6772cb972a5ca531ecbe45ad779bafe33895caa/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf3db47c7382d0540a81f01bd0915f5c7a6e411", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf3db47c7382d0540a81f01bd0915f5c7a6e411", "html_url": "https://github.com/rust-lang/rust/commit/dcf3db47c7382d0540a81f01bd0915f5c7a6e411"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "9788ec2a5e4531cd4b0ac0d729d4662158347cf9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6772cb972a5ca531ecbe45ad779bafe33895caa/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6772cb972a5ca531ecbe45ad779bafe33895caa/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d6772cb972a5ca531ecbe45ad779bafe33895caa", "patch": "@@ -1201,6 +1201,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// translate them into the form that the NLL solver\n     /// understands. See the NLL module for mode details.\n     pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {\n+        assert!(self.region_obligations.borrow().is_empty(),\n+                \"region_obligations not empty: {:#?}\",\n+                self.region_obligations.borrow());\n+\n         self.borrow_region_constraints().take_and_reset_data()\n     }\n "}, {"sha": "3599a3174f725a991d6bdfdae845b6ca9c136540", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d6772cb972a5ca531ecbe45ad779bafe33895caa/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6772cb972a5ca531ecbe45ad779bafe33895caa/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=d6772cb972a5ca531ecbe45ad779bafe33895caa", "patch": "@@ -17,7 +17,7 @@ use rustc::infer::region_constraints::RegionConstraintData;\n use rustc::traits::{self, FulfillmentContext};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n+use rustc::ty::{self, Ty, TyCtxt, TypeVariants, ToPolyTraitRef};\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::PlaceTy;\n@@ -545,6 +545,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n         }\n \n+        self.infcx.process_registered_region_obligations(\n+            &[],\n+            None,\n+            self.param_env,\n+            self.body_id,\n+        );\n+\n         let data = self.infcx.take_and_reset_region_constraints();\n         if !data.is_empty() {\n             self.constraints\n@@ -1110,13 +1117,28 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     }\n \n     fn check_rvalue(&mut self, mir: &Mir<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n+        let tcx = self.tcx();\n+\n         match rvalue {\n             Rvalue::Aggregate(ak, ops) => {\n                 self.check_aggregate_rvalue(mir, rvalue, ak, ops, location)\n             }\n+\n+            Rvalue::Repeat(operand, const_usize) => {\n+                if const_usize.as_u64() > 1 {\n+                    let operand_ty = operand.ty(mir, tcx);\n+\n+                    let trait_ref = ty::TraitRef {\n+                        def_id: tcx.lang_items().copy_trait().unwrap(),\n+                        substs: tcx.mk_substs_trait(operand_ty, &[]),\n+                    };\n+\n+                    self.prove_trait_ref(trait_ref, location);\n+                }\n+            }\n+\n             // FIXME: These other cases have to be implemented in future PRs\n             Rvalue::Use(..) |\n-            Rvalue::Repeat(..) |\n             Rvalue::Ref(..) |\n             Rvalue::Len(..) |\n             Rvalue::Cast(..) |\n@@ -1205,6 +1227,31 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn prove_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>, location: Location) {\n+        self.prove_predicates(\n+            &[\n+                ty::Predicate::Trait(trait_ref.to_poly_trait_ref().to_poly_trait_predicate()),\n+            ],\n+            location,\n+        );\n+    }\n+\n+    fn prove_predicates(&mut self, predicates: &[ty::Predicate<'tcx>], location: Location) {\n+        self.fully_perform_op(location.at_self(), |this| {\n+            let cause = this.misc(this.last_span);\n+            let obligations = predicates\n+                .iter()\n+                .map(|&p| {\n+                    traits::Obligation::new(cause.clone(), this.param_env, p)\n+                })\n+                .collect();\n+            Ok(InferOk {\n+                value: (),\n+                obligations,\n+            })\n+        }).unwrap()\n+    }\n+\n     fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);\n@@ -1237,7 +1284,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     {\n         self.fully_perform_op(location.at_self(), |this| {\n             let mut selcx = traits::SelectionContext::new(this.infcx);\n-            let cause = traits::ObligationCause::misc(this.last_span, ast::CRATE_NODE_ID);\n+            let cause = this.misc(this.last_span);\n             let traits::Normalized { value, obligations } =\n                 traits::normalize(&mut selcx, this.param_env, cause, value);\n             Ok(InferOk { value, obligations })"}, {"sha": "aae0cd3fdb00ac2df416093a9e1edcb216646697", "filename": "src/test/compile-fail/nll/where_clauses_in_repeat_rvalue.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d6772cb972a5ca531ecbe45ad779bafe33895caa/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_repeat_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6772cb972a5ca531ecbe45ad779bafe33895caa/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_repeat_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_repeat_rvalue.rs?ref=d6772cb972a5ca531ecbe45ad779bafe33895caa", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=mir -Z nll\n+\n+#![allow(warnings)]\n+\n+struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: 'static + Copy> Copy for Foo<T> {}\n+impl<T: 'static + Copy> Clone for Foo<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    let mut x = 22;\n+\n+    {\n+        let p = &x; //~ ERROR borrowed value does not live long enough\n+        let w = Foo { t: p };\n+\n+        let v = [w; 22];\n+    }\n+\n+    x += 1;\n+    //~^ ERROR cannot assign to `x` because it is borrowed [E0506]\n+}\n+//~^ ERROR borrowed value does not live long enough [E0597]"}]}