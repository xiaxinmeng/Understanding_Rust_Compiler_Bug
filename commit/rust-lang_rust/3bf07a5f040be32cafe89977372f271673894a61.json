{"sha": "3bf07a5f040be32cafe89977372f271673894a61", "node_id": "C_kwDOAAsO6NoAKDNiZjA3YTVmMDQwYmUzMmNhZmU4OTk3NzM3MmYyNzE2NzM4OTRhNjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-15T12:49:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-15T12:54:06Z"}, "message": "Simplify", "tree": {"sha": "fbd0820c1fbbdade96cf8c32c245066ae64355ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd0820c1fbbdade96cf8c32c245066ae64355ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf07a5f040be32cafe89977372f271673894a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf07a5f040be32cafe89977372f271673894a61", "html_url": "https://github.com/rust-lang/rust/commit/3bf07a5f040be32cafe89977372f271673894a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf07a5f040be32cafe89977372f271673894a61/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af175ddcdcfeddf6814b67bce8abb68a954981eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/af175ddcdcfeddf6814b67bce8abb68a954981eb", "html_url": "https://github.com/rust-lang/rust/commit/af175ddcdcfeddf6814b67bce8abb68a954981eb"}], "stats": {"total": 123, "additions": 52, "deletions": 71}, "files": [{"sha": "5a9b825a2530bd5c7bf7bd8d15f5fd444b4f84b5", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3bf07a5f040be32cafe89977372f271673894a61/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf07a5f040be32cafe89977372f271673894a61/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=3bf07a5f040be32cafe89977372f271673894a61", "patch": "@@ -360,8 +360,14 @@ impl<'a> Printer<'a> {\n                 w!(self, \"]\");\n             }\n             Expr::Closure { args, arg_types, ret_type, body, closure_kind } => {\n-                if let ClosureKind::Generator(Movability::Static) = closure_kind {\n-                    w!(self, \"static \");\n+                match closure_kind {\n+                    ClosureKind::Generator(Movability::Static) => {\n+                        w!(self, \"static \");\n+                    }\n+                    ClosureKind::Async => {\n+                        w!(self, \"async \");\n+                    }\n+                    _ => (),\n                 }\n                 w!(self, \"|\");\n                 for (i, (pat, ty)) in args.iter().zip(arg_types.iter()).enumerate() {\n@@ -375,20 +381,9 @@ impl<'a> Printer<'a> {\n                     }\n                 }\n                 w!(self, \"|\");\n-                match (ret_type, closure_kind) {\n-                    (Some(ret_ty), ClosureKind::Async) => {\n-                        w!(self, \" -> impl Future<Output = \");\n-                        self.print_type_ref(ret_ty);\n-                        w!(self, \">\");\n-                    }\n-                    (Some(ret_ty), _) => {\n-                        w!(self, \" -> \");\n-                        self.print_type_ref(ret_ty);\n-                    }\n-                    (None, ClosureKind::Async) => {\n-                        w!(self, \" -> impl Future<Output = {{unknown}}>\");\n-                    }\n-                    (None, _) => {}\n+                if let Some(ret_ty) = ret_type {\n+                    w!(self, \" -> \");\n+                    self.print_type_ref(ret_ty);\n                 }\n                 self.whitespace();\n                 self.print_expr(*body);"}, {"sha": "ee186673ee130ab8d13daca76e82319c47aac6c0", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3bf07a5f040be32cafe89977372f271673894a61/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf07a5f040be32cafe89977372f271673894a61/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=3bf07a5f040be32cafe89977372f271673894a61", "patch": "@@ -275,7 +275,23 @@ impl<'a> InferenceContext<'a> {\n                     Some(type_ref) => self.make_ty(type_ref),\n                     None => self.table.new_type_var(),\n                 };\n-                sig_tys.push(ret_ty.clone());\n+                if let ClosureKind::Async = closure_kind {\n+                    // Use the first type parameter as the output type of future.\n+                    // existential type AsyncBlockImplTrait<InnerType>: Future<Output = InnerType>\n+                    let impl_trait_id =\n+                        crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n+                    let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n+                    sig_tys.push(\n+                        TyKind::OpaqueType(\n+                            opaque_ty_id,\n+                            Substitution::from1(Interner, ret_ty.clone()),\n+                        )\n+                        .intern(Interner),\n+                    );\n+                } else {\n+                    sig_tys.push(ret_ty.clone());\n+                }\n+\n                 let sig_ty = TyKind::Function(FnPointer {\n                     num_binders: 0,\n                     sig: FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic: false },\n@@ -286,7 +302,7 @@ impl<'a> InferenceContext<'a> {\n                 })\n                 .intern(Interner);\n \n-                let (closure_id, ty, resume_yield_tys) = match closure_kind {\n+                let (ty, resume_yield_tys) = match closure_kind {\n                     ClosureKind::Generator(_) => {\n                         // FIXME: report error when there are more than 1 parameter.\n                         let resume_ty = match sig_tys.first() {\n@@ -306,17 +322,17 @@ impl<'a> InferenceContext<'a> {\n                         let generator_id = self.db.intern_generator((self.owner, tgt_expr)).into();\n                         let generator_ty = TyKind::Generator(generator_id, subst).intern(Interner);\n \n-                        (None, generator_ty, Some((resume_ty, yield_ty)))\n+                        (generator_ty, Some((resume_ty, yield_ty)))\n                     }\n-                    ClosureKind::Async | ClosureKind::Closure => {\n+                    ClosureKind::Closure | ClosureKind::Async => {\n                         let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();\n                         let closure_ty = TyKind::Closure(\n                             closure_id,\n                             Substitution::from1(Interner, sig_ty.clone()),\n                         )\n                         .intern(Interner);\n \n-                        (Some(closure_id), closure_ty, None)\n+                        (closure_ty, None)\n                     }\n                 };\n \n@@ -338,47 +354,16 @@ impl<'a> InferenceContext<'a> {\n                 let prev_resume_yield_tys =\n                     mem::replace(&mut self.resume_yield_tys, resume_yield_tys);\n \n-                let (breaks, ()) =\n-                    self.with_breakable_ctx(BreakableKind::Border, None, None, |this| {\n-                        this.infer_return(*body);\n-                    });\n-\n-                let inner_ty = if matches!(closure_kind, ClosureKind::Async) {\n-                    // Use the first type parameter as the output type of future.\n-                    // existential type AsyncBlockImplTrait<InnerType>: Future<Output = InnerType>\n-                    let impl_trait_id =\n-                        crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n-                    let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n-                    TyKind::OpaqueType(opaque_ty_id, Substitution::from1(Interner, ret_ty.clone()))\n-                        .intern(Interner)\n-                } else {\n-                    ret_ty.clone()\n-                };\n+                self.with_breakable_ctx(BreakableKind::Border, None, None, |this| {\n+                    this.infer_return(*body);\n+                });\n \n                 self.diverges = prev_diverges;\n                 self.return_ty = prev_ret_ty;\n                 self.return_coercion = prev_ret_coercion;\n                 self.resume_yield_tys = prev_resume_yield_tys;\n \n-                sig_tys.pop();\n-                sig_tys.push(inner_ty);\n-\n-                let sig_ty = TyKind::Function(FnPointer {\n-                    num_binders: 0,\n-                    sig: FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic: false },\n-                    substitution: FnSubst(\n-                        Substitution::from_iter(Interner, sig_tys.clone()).shifted_in(Interner),\n-                    ),\n-                })\n-                .intern(Interner);\n-\n-                match closure_id {\n-                    Some(closure_id) => {\n-                        TyKind::Closure(closure_id, Substitution::from1(Interner, sig_ty.clone()))\n-                            .intern(Interner)\n-                    }\n-                    None => ty,\n-                }\n+                ty\n             }\n             Expr::Call { callee, args, .. } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());"}, {"sha": "da76d7fd83f76a0987f0d27284dbe49e8a409acc", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3bf07a5f040be32cafe89977372f271673894a61/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf07a5f040be32cafe89977372f271673894a61/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=3bf07a5f040be32cafe89977372f271673894a61", "patch": "@@ -533,29 +533,30 @@ fn tuple_struct_with_fn() {\n         r#\"\n struct S(fn(u32) -> u64);\n fn test() -> u64 {\n-    let a = S(|i| 2*i);\n+    let a = S(|i| 2*i as u64);\n     let b = a.0(4);\n     a.0(2)\n }\"#,\n         expect![[r#\"\n-            43..101 '{     ...0(2) }': u64\n+            43..108 '{     ...0(2) }': u64\n             53..54 'a': S\n             57..58 'S': S(fn(u32) -> u64) -> S\n-            57..67 'S(|i| 2*i)': S\n-            59..66 '|i| 2*i': |u32| -> u64\n+            57..74 'S(|i| ...s u64)': S\n+            59..73 '|i| 2*i as u64': |u32| -> u64\n             60..61 'i': u32\n-            63..64 '2': u32\n-            63..66 '2*i': u32\n+            63..64 '2': u64\n+            63..73 '2*i as u64': u64\n             65..66 'i': u32\n-            77..78 'b': u64\n-            81..82 'a': S\n-            81..84 'a.0': fn(u32) -> u64\n-            81..87 'a.0(4)': u64\n-            85..86 '4': u32\n-            93..94 'a': S\n-            93..96 'a.0': fn(u32) -> u64\n-            93..99 'a.0(2)': u64\n-            97..98 '2': u32\n+            65..73 'i as u64': u64\n+            84..85 'b': u64\n+            88..89 'a': S\n+            88..91 'a.0': fn(u32) -> u64\n+            88..94 'a.0(4)': u64\n+            92..93 '4': u32\n+            100..101 'a': S\n+            100..103 'a.0': fn(u32) -> u64\n+            100..106 'a.0(2)': u64\n+            104..105 '2': u32\n         \"#]],\n     );\n }"}]}