{"sha": "e90701c546fbdfdccd12aea72f8c084642caef5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MDcwMWM1NDZmYmRmZGNjZDEyYWVhNzJmOGMwODQ2NDJjYWVmNWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T01:14:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:07:55Z"}, "message": "rustc: Replace parser's error handling with diagnostic impl", "tree": {"sha": "6f1fa153513c84046bf8af5434d7c601e74aa558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f1fa153513c84046bf8af5434d7c601e74aa558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e90701c546fbdfdccd12aea72f8c084642caef5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e90701c546fbdfdccd12aea72f8c084642caef5f", "html_url": "https://github.com/rust-lang/rust/commit/e90701c546fbdfdccd12aea72f8c084642caef5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e90701c546fbdfdccd12aea72f8c084642caef5f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "html_url": "https://github.com/rust-lang/rust/commit/2e69c2966088f9828a321eb5aa71fdf64b19eb5f"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "f620e9dec22164072a8aae4ea9856b6af30ab091", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e90701c546fbdfdccd12aea72f8c084642caef5f/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90701c546fbdfdccd12aea72f8c084642caef5f/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=e90701c546fbdfdccd12aea72f8c084642caef5f", "patch": "@@ -452,14 +452,19 @@ fn build_session(sopts: @session::options, input: str) -> session::session {\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n     let codemap = codemap::new_codemap();\n+    let diagnostic_handler = diagnostic::mk_codemap_handler(codemap);\n     @{targ_cfg: target_cfg,\n       opts: sopts,\n       cstore: cstore,\n-      parse_sess: @{cm: codemap, mutable next_id: 1},\n+      parse_sess: @{\n+          cm: codemap,\n+          mutable next_id: 1,\n+          diagnostic: diagnostic_handler\n+      },\n       codemap: codemap,\n       // For a library crate, this is always none\n       mutable main_fn: none,\n-      diagnostic: diagnostic::mk_codemap_handler(codemap),\n+      diagnostic: diagnostic_handler,\n       filesearch: filesearch,\n       mutable building_library: false,\n       working_dir: fs::dirname(input)}"}, {"sha": "deb96a131f082edd7d2dcb7b68b75365ccead22b", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e90701c546fbdfdccd12aea72f8c084642caef5f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90701c546fbdfdccd12aea72f8c084642caef5f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e90701c546fbdfdccd12aea72f8c084642caef5f", "patch": "@@ -21,7 +21,11 @@ tag restriction {\n \n tag file_type { CRATE_FILE; SOURCE_FILE; }\n \n-type parse_sess = @{cm: codemap::codemap, mutable next_id: node_id};\n+type parse_sess = @{\n+    cm: codemap::codemap,\n+    mutable next_id: node_id,\n+    diagnostic: diagnostic::handler\n+};\n \n fn next_node_id(sess: parse_sess) -> node_id {\n     let rv = sess.next_id;\n@@ -69,14 +73,13 @@ impl parser for parser {\n         ret self.buffer[distance - 1u].tok;\n     }\n     fn fatal(m: str) -> ! {\n-        self.span_fatal(self.span, m);\n+        self.sess.diagnostic.span_fatal(self.span, m)\n     }\n     fn span_fatal(sp: span, m: str) -> ! {\n-        diagnostic::emit_error(some((self.sess.cm, sp)), m);\n-        fail;\n+        self.sess.diagnostic.span_fatal(sp, m)\n     }\n     fn warn(m: str) {\n-        diagnostic::emit_warning(some((self.sess.cm, self.span)), m);\n+        self.sess.diagnostic.span_warn(self.span, m)\n     }\n     fn get_str(i: token::str_num) -> str {\n         interner::get(*self.reader.interner, i)\n@@ -93,8 +96,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n         src\n       }\n       result::err(e) {\n-        diagnostic::emit_error(none, e);\n-        fail;\n+        sess.diagnostic.fatal(e)\n       }\n     };\n     let filemap = codemap::new_filemap(path, chpos, byte_pos);\n@@ -2526,8 +2528,7 @@ fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n     } else if str::ends_with(input, \".rs\") {\n         parse_crate_from_source_file(input, cfg, sess)\n     } else {\n-        diagnostic::emit_error(none, \"unknown input file type: \" + input);\n-        fail\n+        sess.diagnostic.fatal(\"unknown input file type: \" + input)\n     }\n }\n "}]}