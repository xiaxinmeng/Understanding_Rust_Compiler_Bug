{"sha": "579e52692f1c88f5970386508b5e40e2f5f9645a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OWU1MjY5MmYxYzg4ZjU5NzAzODY1MDhiNWU0MGUyZjVmOTY0NWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-22T15:47:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-20T10:37:15Z"}, "message": "make `probe_for` generic over final operation", "tree": {"sha": "f8ed08feee8d3bfafe8aba64c6b12a35ce4107e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8ed08feee8d3bfafe8aba64c6b12a35ce4107e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579e52692f1c88f5970386508b5e40e2f5f9645a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579e52692f1c88f5970386508b5e40e2f5f9645a", "html_url": "https://github.com/rust-lang/rust/commit/579e52692f1c88f5970386508b5e40e2f5f9645a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579e52692f1c88f5970386508b5e40e2f5f9645a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b33579e18a64293063cd5b1efc5061bbc54d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b33579e18a64293063cd5b1efc5061bbc54d07", "html_url": "https://github.com/rust-lang/rust/commit/18b33579e18a64293063cd5b1efc5061bbc54d07"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "a233098a751603ec704e4248cdcc284a5cfc69da", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/579e52692f1c88f5970386508b5e40e2f5f9645a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579e52692f1c88f5970386508b5e40e2f5f9645a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=579e52692f1c88f5970386508b5e40e2f5f9645a", "patch": "@@ -161,7 +161,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                self_ty,\n                return_type,\n                scope_expr_id);\n-        self.probe_for(span, mode, LookingFor::ReturnType(return_type), self_ty, scope_expr_id)\n+        self.probe_op(span, mode, LookingFor::ReturnType(return_type), self_ty, scope_expr_id,\n+                      |probe_cx| probe_cx.pick())\n     }\n \n     pub fn probe_for_name(&self,\n@@ -175,17 +176,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                self_ty,\n                item_name,\n                scope_expr_id);\n-        self.probe_for(span, mode, LookingFor::MethodName(item_name), self_ty, scope_expr_id)\n+        self.probe_op(span,\n+                      mode,\n+                      LookingFor::MethodName(item_name),\n+                      self_ty,\n+                      scope_expr_id,\n+                      |probe_cx| probe_cx.pick())\n     }\n \n-    fn probe_for(&self,\n-                 span: Span,\n-                 mode: Mode,\n-                 looking_for: LookingFor<'tcx>,\n-                 self_ty: Ty<'tcx>,\n-                 scope_expr_id: ast::NodeId)\n-                 -> PickResult<'tcx> {\n-\n+    fn probe_op<'a,OP,R>(&'a self,\n+                         span: Span,\n+                         mode: Mode,\n+                         looking_for: LookingFor<'tcx>,\n+                         self_ty: Ty<'tcx>,\n+                         scope_expr_id: ast::NodeId,\n+                         op: OP)\n+                         -> R\n+        where OP: FnOnce(&mut ProbeContext<'a, 'gcx, 'tcx>) -> R\n+    {\n         // FIXME(#18741) -- right now, creating the steps involves evaluating the\n         // `*` operator, which registers obligations that then escape into\n         // the global fulfillment context and thus has global\n@@ -241,7 +249,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   steps, opt_simplified_steps);\n             probe_cx.assemble_inherent_candidates();\n             probe_cx.assemble_extension_candidates_for_traits_in_scope(scope_expr_id)?;\n-            probe_cx.pick()\n+            op(&mut probe_cx)\n         })\n     }\n "}]}