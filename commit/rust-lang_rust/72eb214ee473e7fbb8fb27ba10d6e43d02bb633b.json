{"sha": "72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWIyMTRlZTQ3M2U3ZmJiOGZiMjdiYTEwZDZlNDNkMDJiYjYzM2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T10:42:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T14:10:10Z"}, "message": "Update suffixes en masse in tests using `perl -p -i -e`", "tree": {"sha": "3790edad3c83732606f22e6408414ea810108fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3790edad3c83732606f22e6408414ea810108fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "html_url": "https://github.com/rust-lang/rust/commit/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c34b26606d3cbff5216b1e180236573e304a872", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c34b26606d3cbff5216b1e180236573e304a872", "html_url": "https://github.com/rust-lang/rust/commit/8c34b26606d3cbff5216b1e180236573e304a872"}], "stats": {"total": 1278, "additions": 639, "deletions": 639}, "files": [{"sha": "98881eb09bf9bc89848da0b64cee29cfc309cb6e", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ pub mod kitties {\n     }\n \n     impl cat {\n-        pub fn speak(&mut self) { self.meows += 1u; }\n+        pub fn speak(&mut self) { self.meows += 1_usize; }\n         pub fn meow_count(&mut self) -> uint { self.meows }\n     }\n "}, {"sha": "9d7905cdebd04eb10cb8f1ccca51fe02c1bea8ab", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -34,8 +34,8 @@ pub mod kitties {\n     impl cat {\n         pub fn meow(&mut self) {\n             println!(\"Meow\");\n-            self.meows += 1u;\n-            if self.meows % 5u == 0u {\n+            self.meows += 1_usize;\n+            if self.meows % 5_usize == 0_usize {\n                 self.how_hungry += 1;\n             }\n         }"}, {"sha": "dd272bf639b9723cb53da920f1c2502b250266ac", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -26,8 +26,8 @@ pub mod kitty {\n     impl cat {\n         fn meow(&mut self) {\n             println!(\"Meow\");\n-            self.meows += 1u;\n-            if self.meows % 5u == 0u {\n+            self.meows += 1_usize;\n+            if self.meows % 5_usize == 0_usize {\n                 self.how_hungry += 1;\n             }\n         }"}, {"sha": "6ee497370e8e33da19591b74937a8327ba3493fd", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,7 +20,7 @@ impl uint_helpers for uint {\n         let mut i = *self;\n         while i < v {\n             f(i);\n-            i += 1u;\n+            i += 1_usize;\n         }\n     }\n }"}, {"sha": "8e00b0dc7be74f444d5234084a323a4b2234160b", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,10 +12,10 @@\n \n #[inline]\n pub fn iter<T, F>(v: &[T], mut f: F) where F: FnMut(&T) {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let n = v.len();\n     while i < n {\n         f(&v[i]);\n-        i += 1u;\n+        i += 1_usize;\n     }\n }"}, {"sha": "ce041118906ed9a2f9c174e454000d9248493648", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,10 +13,10 @@\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n pub fn iter<F>(v: Vec<uint> , mut f: F) where F: FnMut(uint) {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let n = v.len();\n     while i < n {\n         f(v[i]);\n-        i += 1u;\n+        i += 1_usize;\n     }\n }"}, {"sha": "9c72cb1a6800ad7b25e62f098c2dafad4e4907cf", "filename": "src/test/auxiliary/macro_reexport_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,5 +11,5 @@\n #![crate_type = \"dylib\"]\n #[macro_export]\n macro_rules! reexported {\n-    () => ( 3u )\n+    () => ( 3_usize )\n }"}, {"sha": "e05aa16ba5fbb730f5c30f340f85579aed376e81", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -47,7 +47,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n     };\n \n     let mut text = &*text;\n-    let mut total = 0u;\n+    let mut total = 0_usize;\n     while !text.is_empty() {\n         match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n             Some(&(rn, val)) => {"}, {"sha": "a5178c03443f796bff07ebc61cdb2785bf974657", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,9 +14,9 @@ use std::ops::Add;\n \n #[inline]\n pub fn has_closures() -> uint {\n-    let x = 1u;\n+    let x = 1_usize;\n     let mut f = move || x;\n-    let y = 1u;\n+    let y = 1_usize;\n     let g = || y;\n     f() + g()\n }"}, {"sha": "3b22e9ef69da3687668ba6a48cd0f8e3fda21ce8", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -104,9 +104,9 @@ fn main() {\n     let mut pixels = [0f32; 256*256];\n     let n2d = Noise2DContext::new();\n \n-    for _ in 0u..100 {\n-        for y in 0u..256 {\n-            for x in 0u..256 {\n+    for _ in 0..100 {\n+        for y in 0..256 {\n+            for x in 0..256 {\n                 let v = n2d.get(x as f32 * 0.1, y as f32 * 0.1);\n                 pixels[y*256+x] = v * 0.5 + 0.5;\n             }"}, {"sha": "9b696e05c50df27f5f7c62b341aa113d83ba565b", "filename": "src/test/compile-fail-fulldeps/issue-18986.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,6 +15,6 @@ pub use use_from_trait_xc::Trait;\n \n fn main() {\n     match () {\n-        Trait { x: 42us } => () //~ ERROR use of trait `Trait` in a struct pattern\n+        Trait { x: 42_usize } => () //~ ERROR use of trait `Trait` in a struct pattern\n     }\n }"}, {"sha": "02d06c4e1bf806adc18ac37dee7f3a2a10192405", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n \n     unsafe {\n         // comma in place of a colon\n-        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8us) : \"cc\", \"volatile\");\n+        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n         //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);"}, {"sha": "d32ea327d0a8cfceeaec66c6cecffeee40de157a", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&self) { self.meows += 1us; }\n+    pub fn speak(&self) { self.meows += 1_usize; }\n }\n \n fn cat(in_x : usize, in_y : isize) -> cat {\n@@ -26,6 +26,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n+  let nyan : cat = cat(52_usize, 99);\n   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "b4a90e35c40f105ff9adfbcdf3c560cf147010ef", "filename": "src/test/compile-fail/attr-before-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     #[attr] //~ ERROR expected item\n-    let _i = 0;\n+    let __isize = 0;\n }"}, {"sha": "58a8314af211cd581dd2666a0d07f53d2d641614", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! {\n-    return 7us; //~ ERROR `return` in a function declared as diverging [E0166]\n+    return 7_usize; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n \n fn main() { bad_bang(5); }"}, {"sha": "03c24c2fa3d3e2f15d8eea4caf1f18afaf7fd895", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    if i < 0us { } else { panic!(); }\n+    if i < 0_usize { } else { panic!(); }\n }\n \n fn main() { bad_bang(5); }"}, {"sha": "a97cf5d41e809493b774a9fef6f1da5abae75c6c", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1us.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n+    1_usize.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "a82aa12dc80c27543b775b21636fbc55e1472717", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,25 +21,25 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn main() {\n     // By-ref captures\n     {\n-        let mut x = 0us;\n+        let mut x = 0_usize;\n         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n \n-        let mut y = 0us;\n+        let mut y = 0_usize;\n         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n \n-        let mut z = 0us;\n+        let mut z = 0_usize;\n         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n     }\n \n     // By-value captures\n     {\n-        let mut x = 0us;\n+        let mut x = 0_usize;\n         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n \n-        let mut y = 0us;\n+        let mut y = 0_usize;\n         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n \n-        let mut z = 0us;\n+        let mut z = 0_usize;\n         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n     }\n }"}, {"sha": "dd278faa0dc6a7829dd52b5985dec47b2b0c601e", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -56,15 +56,15 @@ impl Point {\n }\n \n fn deref_imm_field(x: Own<Point>) {\n-    let _i = &x.y;\n+    let __isize = &x.y;\n }\n \n fn deref_mut_field1(x: Own<Point>) {\n-    let _i = &mut x.y; //~ ERROR cannot borrow\n+    let __isize = &mut x.y; //~ ERROR cannot borrow\n }\n \n fn deref_mut_field2(mut x: Own<Point>) {\n-    let _i = &mut x.y;\n+    let __isize = &mut x.y;\n }\n \n fn deref_extend_field(x: &Own<Point>) -> &isize {\n@@ -114,7 +114,7 @@ fn assign_field4<'a>(x: &'a mut Own<Point>) {\n // FIXME(eddyb) #12825 This shouldn't attempt to call deref_mut.\n /*\n fn deref_imm_method(x: Own<Point>) {\n-    let _i = x.get();\n+    let __isize = x.get();\n }\n */\n "}, {"sha": "693ed29bd0506c9071cb0b4d0326abb324d3fd69", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -50,15 +50,15 @@ impl Point {\n }\n \n fn deref_imm_field(x: Rc<Point>) {\n-    let _i = &x.y;\n+    let __isize = &x.y;\n }\n \n fn deref_mut_field1(x: Rc<Point>) {\n-    let _i = &mut x.y; //~ ERROR cannot borrow\n+    let __isize = &mut x.y; //~ ERROR cannot borrow\n }\n \n fn deref_mut_field2(mut x: Rc<Point>) {\n-    let _i = &mut x.y; //~ ERROR cannot borrow\n+    let __isize = &mut x.y; //~ ERROR cannot borrow\n }\n \n fn deref_extend_field(x: &Rc<Point>) -> &isize {\n@@ -86,7 +86,7 @@ fn assign_field3<'a>(x: &'a mut Rc<Point>) {\n }\n \n fn deref_imm_method(x: Rc<Point>) {\n-    let _i = x.get();\n+    let __isize = x.get();\n }\n \n fn deref_mut_method1(x: Rc<Point>) {"}, {"sha": "34b926aab1fa0d88a778a543c5a85db42360551d", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -32,15 +32,15 @@ impl<T> DerefMut for Own<T> {\n }\n \n fn deref_imm(x: Own<isize>) {\n-    let _i = &*x;\n+    let __isize = &*x;\n }\n \n fn deref_mut1(x: Own<isize>) {\n-    let _i = &mut *x; //~ ERROR cannot borrow\n+    let __isize = &mut *x; //~ ERROR cannot borrow\n }\n \n fn deref_mut2(mut x: Own<isize>) {\n-    let _i = &mut *x;\n+    let __isize = &mut *x;\n }\n \n fn deref_extend<'a>(x: &'a Own<isize>) -> &'a isize {"}, {"sha": "5b916243b9ee52d24c663649262f8ef24dbdfc91", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -26,15 +26,15 @@ impl<T> Deref for Rc<T> {\n }\n \n fn deref_imm(x: Rc<isize>) {\n-    let _i = &*x;\n+    let __isize = &*x;\n }\n \n fn deref_mut1(x: Rc<isize>) {\n-    let _i = &mut *x; //~ ERROR cannot borrow\n+    let __isize = &mut *x; //~ ERROR cannot borrow\n }\n \n fn deref_mut2(mut x: Rc<isize>) {\n-    let _i = &mut *x; //~ ERROR cannot borrow\n+    let __isize = &mut *x; //~ ERROR cannot borrow\n }\n \n fn deref_extend<'a>(x: &'a Rc<isize>) -> &'a isize {"}, {"sha": "f24e82d11c5edc831869d100159775c914d704f9", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ fn separate_arms() {\n             // fact no outstanding loan of x!\n             x = Some(0);\n         }\n-        Some(ref _i) => {\n+        Some(ref __isize) => {\n             x = Some(1); //~ ERROR cannot assign\n         }\n     }"}, {"sha": "216373707241efe7318e41825a6079c0c22eff6a", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n fn main() {\n     // Original borrow ends at end of function\n-    let mut x = 1us;\n+    let mut x = 1_usize;\n     let y = &mut x;\n     let z = &x; //~ ERROR cannot borrow\n }\n@@ -21,7 +21,7 @@ fn foo() {\n     match true {\n         true => {\n             // Original borrow ends at end of match arm\n-            let mut x = 1us;\n+            let mut x = 1_usize;\n             let y = &x;\n             let z = &mut x; //~ ERROR cannot borrow\n         }\n@@ -33,7 +33,7 @@ fn foo() {\n fn bar() {\n     // Original borrow ends at end of closure\n     || {\n-        let mut x = 1us;\n+        let mut x = 1_usize;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow\n     };"}, {"sha": "ada45e8c1fc8b1528803fd00c5ab35f58266a4d8", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : usize) -> cat {\n }\n \n fn main() {\n-  let nyan = cat(0us);\n+  let nyan = cat(0_usize);\n }"}, {"sha": "f25b2e65388ee190801e27ce09f55646d6f9be46", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");\n-      meows += 1us; //~ ERROR unresolved name\n+      meows += 1_usize; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }\n "}, {"sha": "fa63b16afa6d0835e459e555b3d325efc12d36f8", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: usize = { 1us; 2 };\n+const A: usize = { 1_usize; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n const B: usize = { { } 2 };\n@@ -19,7 +19,7 @@ macro_rules! foo {\n }\n const C: usize = { foo!(); 2 };\n \n-const D: usize = { let x = 4us; 2 };\n+const D: usize = { let x = 4_usize; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "966e28a789cc88e7a99fba06719c2a34c33b9017", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,10 +22,10 @@ impl S { }\n impl T for S { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-static s: usize = 0us;\n+static s: usize = 0_usize;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-const c: usize = 0us;\n+const c: usize = 0_usize;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }"}, {"sha": "344afa3479932fb2bfc34d88fbcb1c35b6bf0857", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ mod u {\n         x: uint //~ WARN the `uint` type is deprecated\n     }\n     fn bar(x: uint) { //~ WARN the `uint` type is deprecated\n-        1u; //~ WARN the `u` suffix on integers is deprecated\n+        1_usize;\n     }\n }\n mod i {\n@@ -25,7 +25,7 @@ mod i {\n         x: int //~ WARN the `int` type is deprecated\n     }\n     fn bar(x: int) { //~ WARN the `int` type is deprecated\n-        1i; //~ WARN the `i` suffix on integers is deprecated\n+        1_isize;\n     }\n }\n "}, {"sha": "f38172db4447b58ae06dcd7a694877079348486f", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,13 +13,13 @@\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n-    pub fn common() -> usize { return 0us; }\n+    pub fn common() -> usize { return 0_usize; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n     pub fn f2() { println!(\"f2\"); }\n-    pub fn common() -> usize { return 1us; }\n+    pub fn common() -> usize { return 1_usize; }\n }\n \n mod test {"}, {"sha": "b28f2a746fdc40c5d64345bef176d52d33ef0e53", "filename": "src/test/compile-fail/index-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    (return)[0us]; //~ ERROR the type of this value must be known in this context\n+    (return)[0_usize]; //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "2642ac6204ce4d8490f021c563994e7dd52c3b58", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,11 +28,11 @@ impl<T:Clone> to_opt for Option<T> {\n }\n \n fn function<T:to_opt + Clone>(counter: usize, t: T) {\n-    if counter > 0us {\n-        function(counter - 1us, t.to_option());\n+    if counter > 0_usize {\n+        function(counter - 1_usize, t.to_option());\n     }\n }\n \n fn main() {\n-    function(22us, 22us);\n+    function(22_usize, 22_usize);\n }"}, {"sha": "e8998dd7a9d48c54f50c97723638ba8ebd0016e2", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     let v: Vec<isize> = vec!(0, 1, 2, 3, 4, 5);\n     let s: String = \"abcdef\".to_string();\n-    v[3us];\n+    v[3_usize];\n     v[3];\n     v[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n@@ -21,7 +21,7 @@ pub fn main() {\n     //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     v[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n-    s.as_bytes()[3us];\n+    s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ERROR the trait `core::ops::Index<u8>` is not implemented"}, {"sha": "16128e52d64d1d9804e481c89269cf444541e8bc", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     // The expected arm type `Option<T>` has one type parameter, while\n     // the actual arm `Result<T, E>` has two. typeck should not be\n     // tricked into looking up a non-existing second type parameter.\n-    let _x: usize = match Some(1us) {\n+    let _x: usize = match Some(1_usize) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n         //~| expected `core::option::Option<usize>`"}, {"sha": "65731379094a9d1002508944b0d734c07dc9556a", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n fn main() {\n-    let x = 1us;\n+    let x = 1_usize;\n     let y: Foo;\n \n     // `x { ... }` should not be interpreted as a struct literal here"}, {"sha": "321b8b260daa9c6c04d2285889b108cce1c08dba", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,16 +11,16 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let _foo = &[1us, 2] as [usize];\n+    let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n-    let _bar = box 1us as std::fmt::Show;\n+    let _bar = box 1_usize as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Show`\n     //~^^ HELP did you mean `Box<core::fmt::Show>`?\n-    let _baz = 1us as std::fmt::Show;\n+    let _baz = 1_usize as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `usize` as `core::fmt::Show`\n     //~^^ HELP consider using a box or reference as appropriate\n-    let _quux = [1us, 2] as [usize];\n+    let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`\n     //~^^ HELP consider using a box or reference as appropriate\n }"}, {"sha": "172f37af834400ba766388c9a2c8a54b4d8b779d", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    (|| box *[0us].as_slice())();\n+    (|| box *[0_usize].as_slice())();\n     //~^ ERROR cannot move out of borrowed content\n     //~^^ ERROR cannot move a value of type [usize]\n }"}, {"sha": "b7f58791bfcc8d32a6968938c8b5222beaccc1db", "filename": "src/test/compile-fail/issue-17718-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,7 +13,7 @@ static mut A2: usize = 1;\n const A3: usize = 1;\n \n fn main() {\n-    match 1us {\n+    match 1_usize {\n         A1 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A2 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A3 => {}"}, {"sha": "8035cffabda9717aa51317533ca9ac4b19944c0c", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,14 +15,14 @@\n \n #[cfg(target_pointer_width = \"64\")]\n fn main() {\n-    let n = 0us;\n-    let a = box [&n; 0xF000000000000000us];\n-    println!(\"{}\", a[0xFFFFFFu]);\n+    let n = 0_usize;\n+    let a = box [&n; 0xF000000000000000_usize];\n+    println!(\"{}\", a[0xFFFFFF_usize]);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n fn main() {\n-    let n = 0us;\n-    let a = box [&n; 0xFFFFFFFFu];\n-    println!(\"{}\", a[0xFFFFFFu]);\n+    let n = 0_usize;\n+    let a = box [&n; 0xFFFFFFFF_usize];\n+    println!(\"{}\", a[0xFFFFFF_usize]);\n }"}, {"sha": "bd0474084981f1164d795c996d9865c9c05f9499", "filename": "src/test/compile-fail/issue-17933.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub static X: usize = 1us;\n+pub static X: usize = 1_usize;\n \n fn main() {\n-    match 1us {\n+    match 1_usize {\n         self::X => { },\n         //~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n         _       => { },"}, {"sha": "f6da2fc82c34dc52a23733f25b849fb04a14275a", "filename": "src/test/compile-fail/issue-1802-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:no valid digits found for number\n fn main() {\n-    log(error, 0bu);\n+    log(error, 0b_usize);\n }"}, {"sha": "91689988f583ddc3337dfcb77f20133e60a12479", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ fn _create_render(_: &()) ->\n     AbstractRenderer\n //~^ ERROR: the trait `core::marker::Sized` is not implemented\n {\n-    match 0us {\n+    match 0_usize {\n         _ => unimplemented!()\n     }\n }"}, {"sha": "54c51405bd73f8ad7f13068a7441b541fe189463", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,5 +13,5 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Foo::Variant(42us); //~ ERROR uses it like a function\n+    let f = Foo::Variant(42_usize); //~ ERROR uses it like a function\n }"}, {"sha": "dd3844b1a0ef07bae34d0d8d7e60fc1f3aba007c", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,7 +28,7 @@ impl Tr for usize {\n }\n \n fn main() {\n-    let s = &mut 1us;\n+    let s = &mut 1_usize;\n \n     MyPtr(s).poke(s);\n     //~^ ERROR cannot borrow `*s` as mutable more than once at a time"}, {"sha": "5ddf06add9d3e280656d55bf6bebc21b4069c9b2", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,15 +13,15 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let mut y = 1us;\n+    let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n     c.push(box || y = 0);\n     c.push(box || y = 0);\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n-    let mut y = 1us;\n+    let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n \n     Push::push(&c, box || y = 0);"}, {"sha": "368f3c16f5188c47debf096ae1caedd17426be68", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,7 +17,7 @@ impl Foo for Thing {\n     fn foo<T>(&self, _: &T) {}\n }\n \n-#[inline(never)] fn foo(b: &Bar) { b.foo(&0us) }\n+#[inline(never)] fn foo(b: &Bar) { b.foo(&0_usize) }\n \n fn main() {\n     let mut thing = Thing;"}, {"sha": "505885e6c41f9bdf7f3d309b79684c1ee44cf57d", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@\n fn fail_len(v: Vec<isize> ) -> usize {\n     let mut i = 3;\n     panic!();\n-    for x in &v { i += 1us; }\n+    for x in &v { i += 1_usize; }\n     //~^ ERROR: unreachable statement\n     return i;\n }"}, {"sha": "6d4777be40b640829dd9bff83ec5c5d1a285b9a0", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n fn bar(int_param: usize) {}\n \n fn main() {\n-    let foo: [u8; 4] = [1u8; 4us];\n+    let foo: [u8; 4] = [1u8; 4_usize];\n     bar(foo);\n     //~^ ERROR mismatched types\n     //~| expected `usize`"}, {"sha": "95a4f36d1711cd5d331dadd0fb77b6c802cf5e0e", "filename": "src/test/compile-fail/issue-5544-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let _i = 18446744073709551616; // 2^64\n+    let __isize = 18446744073709551616; // 2^64\n     //~^ ERROR int literal is too large\n }"}, {"sha": "afff5984b46141d61f0c9b3de054473b83bd0657", "filename": "src/test/compile-fail/issue-5544-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let _i = 0xff_ffff_ffff_ffff_ffff_is;\n+    let __isize = 0xff_ffff_ffff_ffff_ffff__isize;\n     //~^ ERROR int literal is too large\n }"}, {"sha": "9e6000c050a5145d89094f38ddf1bfd6a74374bc", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -30,17 +30,17 @@ trait UnusedTrait {\n \n impl CtxtFn for usize {\n     fn f8(self, i: usize) -> usize {\n-        i * 4us\n+        i * 4_usize\n     }\n \n     fn f9(i: usize) -> usize {\n-        i * 4us\n+        i * 4_usize\n     }\n }\n \n impl OtherTrait for usize {\n     fn f9(i: usize) -> usize {\n-        i * 8us\n+        i * 8_usize\n     }\n }\n "}, {"sha": "954ae8ebc48dd87df4dff656dee302492a309e1c", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     //~^ ERROR attempted to divide with overflow in a constant expression\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| { 1is / 0; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n@@ -42,7 +42,7 @@ fn main() {\n     //~^ ERROR attempted remainder with overflow in a constant expression\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| { 1is % 0; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression"}, {"sha": "52cf420a9ffdac248b7ef80266aa0a52f00b0ced", "filename": "src/test/compile-fail/issue-8537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-8537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fissue-8537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8537.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub extern\n-  \"invalid-abi\" //~ ERROR illegal ABI\n+  \"invalid-ab_isize\" //~ ERROR illegal ABI\n fn foo() {}\n \n fn main() {}"}, {"sha": "e6041cddeadb58adb75ac51e95abb70d7faf5352", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ fn foo(_x: Rc<usize>) {}\n fn bar<F:FnOnce() + Send>(_: F) { }\n \n fn main() {\n-    let x = Rc::new(3us);\n+    let x = Rc::new(3_usize);\n     bar(move|| foo(x));\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "f304c26efb5417fccc7b3c60124e18059390bb8e", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -63,6 +63,6 @@ fn field_match_in_let(f: Bar) -> bool {\n fn main() {\n     field_read(Foo { x: 1, b: false, marker: std::marker::NoCopy });\n     field_match_in_patterns(XYZ::Z);\n-    field_match_in_let(Bar { x: 42us, b: true, _guard: () });\n+    field_match_in_let(Bar { x: 42_usize, b: true, _guard: () });\n     let _ = Baz { x: 0 };\n }"}, {"sha": "345e56e2e5800a6cb776ee1481e84cfcd1a090bb", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -57,7 +57,7 @@ fn main() {\n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1is << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1us << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1_isize << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1_usize << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n }\n "}, {"sha": "b234f08d04a42a1de0b6a5ba3ab167f5b75ee8d5", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@\n #![allow(dead_code)]\n #![feature(custom_attribute)]\n \n-#[abi=\"stdcall\"] extern {} //~ ERROR unused attribute\n+#[ab_isize=\"stdcall\"] extern {} //~ ERROR unused attribute\n \n #[fixed_stack_segment] fn f() {} //~ ERROR unused attribute\n "}, {"sha": "c00bd2adaa2876c2c03837b880692f196a4d9a3f", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,7 +14,7 @@\n fn main() { }\n \n fn foo() {\n-    let mut i = 100us;\n+    let mut i = 100_usize;\n     while i >= 0 { //~ ERROR comparison is useless due to type limits\n         i -= 1;\n     }\n@@ -50,12 +50,12 @@ fn qux() {\n }\n \n fn quy() {\n-    let i = -23us; //~ WARNING negation of unsigned int literal may be unintentional\n+    let i = -23_usize; //~ WARNING negation of unsigned int literal may be unintentional\n                   //~^ WARNING unused variable\n }\n \n fn quz() {\n-    let i = 23us;\n+    let i = 23_usize;\n     let j = -i;   //~ WARNING negation of unsigned int variable may be unintentional\n                   //~^ WARNING unused variable\n }"}, {"sha": "13dbab12b774270a7242aba28419b6c85a961044", "filename": "src/test/compile-fail/macro-no-implicit-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_non_reexport_2;\n \n fn main() {\n-    assert_eq!(reexported!(), 3us);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3_usize);  //~ ERROR macro undefined\n }"}, {"sha": "dc8f4fadc76c0a3185d14d80f3e2aaade7d38c34", "filename": "src/test/compile-fail/macro-reexport-not-locally-visible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,5 +18,5 @@\n extern crate macro_reexport_1;\n \n fn main() {\n-    assert_eq!(reexported!(), 3us);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3_usize);  //~ ERROR macro undefined\n }"}, {"sha": "c60ef2ed28736a72dcb97116bd2ca67c49b45972", "filename": "src/test/compile-fail/match-ill-type1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     match 1 {\n-        1...2us => 1, //~ ERROR mismatched types in range\n+        1...2_usize => 1, //~ ERROR mismatched types in range\n         _ => 2,\n     };\n }"}, {"sha": "981c4c6f40d574d780c2b9e5740535a004ce7857", "filename": "src/test/compile-fail/method-ambig-two-traits-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,5 +18,5 @@ trait me2 {\n     fn me(&self) -> usize;\n }\n impl me2 for usize { fn me(&self) -> usize { *self } }\n-fn main() { 1us.me(); } //~ ERROR E0034\n+fn main() { 1_usize.me(); } //~ ERROR E0034\n "}, {"sha": "17312fb186941765e076cf68b765f0d0c28030cd", "filename": "src/test/compile-fail/method-ambig-two-traits-with-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -19,5 +19,5 @@ impl Foo for usize {}\n impl Bar for usize {}\n \n fn main() {\n-    1us.method(); //~ ERROR E0034\n+    1_usize.method(); //~ ERROR E0034\n }"}, {"sha": "b6744d4b33a1021d7b133dbdd4a9e618cc6cc7ae", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -29,6 +29,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n+  let nyan : cat = cat(52_usize, 99);\n   nyan.eat();\n }"}, {"sha": "94b1047f85ed3720f95b32bace33af613f42ed3d", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,6 +21,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n+  let nyan : cat = cat(52_usize, 99);\n   nyan.how_hungry = 0; //~ ERROR cannot assign\n }"}, {"sha": "21f8a982806a93f227e8490a1420770eed674e37", "filename": "src/test/compile-fail/no-method-suggested-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -123,8 +123,8 @@ fn main() {\n     //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n \n     // should have no help:\n-    1us.method3(); //~ ERROR does not implement\n-    std::rc::Rc::new(&mut Box::new(&1us)).method3(); //~ ERROR does not implement\n+    1_usize.method3(); //~ ERROR does not implement\n+    std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR does not implement\n     no_method_suggested_traits::Foo.method3();  //~ ERROR does not implement\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n     //~^ ERROR does not implement"}, {"sha": "0eb91e0419a1da232d991ef9da75f0f093a431ed", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -27,7 +27,7 @@ fn struct_with_a_nested_enum_and_vector() {\n         Foo { first: true, second: None } => (),\n         Foo { first: true, second: Some(_) } => (),\n         Foo { first: false, second: None } => (),\n-        Foo { first: false, second: Some([1us, 2us, 3us, 4us]) } => ()\n+        Foo { first: false, second: Some([1_usize, 2_usize, 3_usize, 4_usize]) } => ()\n     }\n }\n "}, {"sha": "4b261d89888dcd3b02060865863568edab2cad6a", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,4 +12,4 @@\n \n enum blah { a(isize, isize, usize), b(isize, isize), }\n \n-fn main() { match blah::a(1, 1, 2us) { blah::a(_, x, y) | blah::b(x, y) => { } } }\n+fn main() { match blah::a(1, 1, 2_usize) { blah::a(_, x, y) | blah::b(x, y) => { } } }"}, {"sha": "ccbdd52a98328dc769f1b9268852d2e50a313c4a", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -30,6 +30,6 @@ mod kitties {\n }\n \n fn main() {\n-  let nyan : kitties::cat = kitties::cat(52us, 99);\n+  let nyan : kitties::cat = kitties::cat(52_usize, 99);\n   nyan.nap();\n }"}, {"sha": "243d835d46e6213d7f8bf9143872d899b5404223", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,7 +13,7 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n-  assert!((nyan.meows == 52us));\n+  let nyan : cat = cat(52_usize, 99);\n+  assert!((nyan.meows == 52_usize));\n   //~^ ERROR field `meows` of struct `cci_class::kitties::cat` is private\n }"}, {"sha": "45e468b3ab06676c446ac7d1de41d822573c7270", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,18 +15,18 @@ struct dog {\n impl dog {\n     pub fn chase_cat(&mut self) {\n         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-        *p += 1us;\n+        *p += 1_usize;\n     }\n \n     pub fn chase_cat_2(&mut self) {\n         let p: &mut usize = &mut self.cats_chased;\n-        *p += 1us;\n+        *p += 1_usize;\n     }\n }\n \n fn dog() -> dog {\n     dog {\n-        cats_chased: 0us\n+        cats_chased: 0_usize\n     }\n }\n "}, {"sha": "8cc2dd6afc645bc4203de7a03dd814c20bc0ee77", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,7 +18,7 @@ impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-            *p = 3us;\n+            *p = 3_usize;\n         };\n     }\n }"}, {"sha": "4c361427bf37c6e0507bccfc84527363118ed9d1", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,8 +14,8 @@ enum ast<'a> {\n }\n \n fn build() {\n-    let x = ast::num(3us);\n-    let y = ast::num(4us);\n+    let x = ast::num(3_usize);\n+    let y = ast::num(4_usize);\n     let z = ast::add(&x, &y);\n     compute(&z);\n }"}, {"sha": "e88c96de9e4ea3f369492872317b830afe7fef84", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-decl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,12 +14,12 @@ struct invariant<'a> {\n     marker: marker::InvariantLifetime<'a>\n }\n \n-fn to_same_lifetime<'r>(bi: invariant<'r>) {\n-    let bj: invariant<'r> = bi;\n+fn to_same_lifetime<'r>(b_isize: invariant<'r>) {\n+    let bj: invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n-    bi //~ ERROR mismatched types\n+fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+    b_isize //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "f280e4d978eed0408fa4f1262cdd7d9d72418e5c", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,12 +13,12 @@ struct invariant<'a> {\n     f: Box<FnOnce(&mut &'a isize) + 'static>,\n }\n \n-fn to_same_lifetime<'r>(bi: invariant<'r>) {\n-    let bj: invariant<'r> = bi;\n+fn to_same_lifetime<'r>(b_isize: invariant<'r>) {\n+    let bj: invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n-    bi //~ ERROR mismatched types\n+fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+    b_isize //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "ced0afcebd97908554e2aecb1210e59c31cdcfd5", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,12 +13,12 @@ struct Invariant<'a> {\n     f: Box<for<'b> FnOnce() -> &'b mut &'a isize + 'static>,\n }\n \n-fn to_same_lifetime<'r>(bi: Invariant<'r>) {\n-    let bj: Invariant<'r> = bi;\n+fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n+    let bj: Invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(bi: Invariant<'r>) -> Invariant<'static> {\n-    bi //~ ERROR mismatched types\n+fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n+    b_isize //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "aa20efa5a12b157822f468aa47f73f795654d87c", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@\n fn main() {\n     // Unboxed closure case\n     {\n-        let mut x = 0us;\n+        let mut x = 0_usize;\n         let mut f = || &mut x; //~ ERROR cannot infer\n         let x = f();\n         let y = f();"}, {"sha": "b45a37d26e58a2d0c41f7df1fd60dcd9924110f3", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -34,7 +34,7 @@ fn get_v(gc: Box<get_ctxt>) -> usize {\n }\n \n fn main() {\n-    let ctxt = ctxt { v: 22us };\n+    let ctxt = ctxt { v: 22_usize };\n     let hc = has_ctxt { c: &ctxt };\n-    assert_eq!(get_v(box hc as Box<get_ctxt>), 22us);\n+    assert_eq!(get_v(box hc as Box<get_ctxt>), 22_usize);\n }"}, {"sha": "9b3e2668042eaa0545513a8a5b5d4525e7c2a2e3", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -41,14 +41,14 @@ fn main() {\n     //~| expected usize\n     //~| found &-ptr\n     //~| ERROR expected positive integer for repeat count, found string\n-    let f = [0; -4is];\n+    let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `isize`\n     //~| expected usize\n     //~| found isize\n     //~| ERROR expected positive integer for repeat count, found negative integer\n-    let f = [0us; -1is];\n+    let f = [0_usize; -1_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `isize`"}, {"sha": "725f83d49575176eaba038150ce2a04ad34a6ee3", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -39,5 +39,5 @@ fn main() {\n     // just to ensure that this test fails to compile; when shadowed\n     // lifetimes become either an error or a proper lint, this will\n     // not be needed.\n-    let x: isize = 3us; //~ ERROR mismatched types\n+    let x: isize = 3_usize; //~ ERROR mismatched types\n }"}, {"sha": "a2ad2336d4bc3ee7cc724df65f10be4945a13a47", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -30,7 +30,7 @@ fn main() {\n                                //~| found `Bar`\n                                //~| expected struct `Foo`\n                                //~| found struct `Bar`\n-    let f_i = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n+    let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                  //~| expected `Foo`\n                                  //~| found `_`\n                                  //~| expected struct `Foo`"}, {"sha": "9c1d318d5889990efb92f1d33bf6abcd0be641be", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,6 +12,6 @@\n \n fn f() -> isize { return g(); }\n \n-fn g() -> usize { return 0us; }\n+fn g() -> usize { return 0_usize; }\n \n fn main() { let y = f(); }"}, {"sha": "800126450c9726887796a01a8c5343225e3982ab", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,28 +22,28 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn main() {\n     // By-ref cases\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_once(|| drop(x)); // OK -- FnOnce\n     }\n     // By-value cases\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_once(move || drop(x)); // this one is ok\n     }\n }"}, {"sha": "b40a91181adde2b63c9ededa0260da8c553ec8a9", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,7 +17,7 @@\n fn set(x: &mut usize) { *x = 0; }\n \n fn main() {\n-    let x = 0us;\n+    let x = 0_usize;\n     move || x = 1; //~ ERROR cannot assign\n     move || set(&mut x); //~ ERROR cannot borrow\n     move || x = 1; //~ ERROR cannot assign"}, {"sha": "59c8495371852c809d39db541b7d4a5f5ede996e", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,7 +14,7 @@\n // reference cannot escape the region of that variable.\n fn main() {\n     let _f = {\n-        let x = 0us;\n+        let x = 0_usize;\n         || x //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n     };\n }"}, {"sha": "1191cfa2600b8a231f1d5d3c5dc4e148e492fcf5", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,7 +14,7 @@\n // cause borrow conflicts.\n \n fn main() {\n-    let mut x = 0us;\n+    let mut x = 0_usize;\n     let f = || x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n }"}, {"sha": "91182393ac8e057904fba535410ad10131417291", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,6 +14,6 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut f = |x: isize, y: isize| -> isize { x + y };\n-    let z = f(1us, 2);    //~ ERROR mismatched types\n+    let z = f(1_usize, 2);    //~ ERROR mismatched types\n     println!(\"{}\", z);\n }"}, {"sha": "046337c33f0131dc4c2b4f5f5c58e26ec269a63a", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,7 +12,7 @@\n \n use std::rc::Rc;\n \n-fn f<T:Send>(_i: T) {\n+fn f<T:Send>(__isize: T) {\n }\n \n fn main() {"}, {"sha": "91a41ad6a4986d81e8d91f0dad2bd50642c5642a", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,7 +28,7 @@ impl<'a> Drop for r<'a> {\n     }\n }\n \n-fn f<T>(_i: Vec<T> , _j: Vec<T> ) {\n+fn f<T>(__isize: Vec<T> , _j: Vec<T> ) {\n }\n \n fn clone<T: Clone>(t: &T) -> T { t.clone() }"}, {"sha": "eb5ffeaf888866712075f36d91c00ecafd816718", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,4 +15,4 @@\n \n enum foo { a(Box<foo>, isize), b(usize), }\n \n-fn main() { match foo::b(1us) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }\n+fn main() { match foo::b(1_usize) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}, {"sha": "cc6ff2d8ebcc204b2e9965fc00cb22911a82f6e7", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -23,7 +23,7 @@ impl TraitB for isize {\n }\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n-    let y = 4us;\n+    let y = 4_usize;\n     b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n }\n "}, {"sha": "159c33198a6e40f52ee4d643e5036b405cae0b0f", "filename": "src/test/run-fail/binop-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbinop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbinop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-panic.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:quux\n fn my_err(s: String) -> ! { println!(\"{}\", s); panic!(\"quux\"); }\n-fn main() { 3u == my_err(\"bye\".to_string()); }\n+fn main() { 3_usize == my_err(\"bye\".to_string()); }"}, {"sha": "6dd329b729500802a0efa0a67f73ae02bbe8c1fe", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,14 +14,14 @@\n use std::uint;\n \n fn main() {\n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n \n     // This should cause a bounds-check panic, but may not if we do our\n     // bounds checking by comparing a scaled index value to the vector's\n     // length (in bytes), because the scaling of the index will cause it to\n     // wrap around to a small number.\n \n-    let idx = uint::MAX & !(uint::MAX >> 1u);\n+    let idx = uint::MAX & !(uint::MAX >> 1_usize);\n     println!(\"ov2 idx = 0x%x\", idx);\n \n     // This should panic."}, {"sha": "ec7fde171013324c3fb2c09fe13fb3de2359862f", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,15 +15,15 @@ use std::u64;\n \n #[cfg(target_arch=\"x86\")]\n fn main() {\n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n \n     // This should cause a bounds-check panic, but may not if we do our\n     // bounds checking by truncating the index value to the size of the\n     // machine word, losing relevant bits of the index value.\n \n     // This test is only meaningful on 32-bit hosts.\n \n-    let idx = u64::MAX & !(u64::MAX >> 1u);\n+    let idx = u64::MAX & !(u64::MAX >> 1_usize);\n     println!(\"ov3 idx = 0x%8.8x%8.8x\",\n            (idx >> 32) as uint,\n            idx as uint);\n@@ -35,6 +35,6 @@ fn main() {\n #[cfg(any(target_arch=\"x86_64\", target_arch = \"aarch64\"))]\n fn main() {\n     // This version just panics anyways, for symmetry on 64-bit hosts.\n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n     error!(\"ov3 0x%x\",  x[200]);\n }"}, {"sha": "e48d749d9451ec1996845548a862f9be11fe1dab", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     // address of the 0th cell in the array (even though the index is\n     // huge).\n \n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n \n     let base = x.as_ptr() as uint;\n     let idx = base / mem::size_of::<uint>();"}, {"sha": "f2253b7342eb8d4d8b42c1041f999f28e805c001", "filename": "src/test/run-fail/die-macro-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:test\n \n fn main() {\n-    let _i: int = panic!(\"test\");\n+    let __isize: int = panic!(\"test\");\n }"}, {"sha": "225ce5a741b7cb4f4e6e484ee5f512cd537f9b61", "filename": "src/test/run-fail/extern-panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-panic.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -26,10 +26,10 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1_usize {\n         data\n     } else {\n-        count(data - 1u) + count(data - 1u)\n+        count(data - 1_usize) + count(data - 1_usize)\n     }\n }\n \n@@ -41,9 +41,9 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for _ in 0..10u {\n+    for _ in 0..10_usize {\n         task::spawn(move|| {\n-            let result = count(5u);\n+            let result = count(5_usize);\n             println!(\"result = %?\", result);\n             panic!();\n         });"}, {"sha": "a1a760c040c75f75eab27e19e3e05e008794ce5c", "filename": "src/test/run-fail/for-each-loop-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n \n-fn main() { for _ in 0u..10u { panic!(\"moop\"); } }\n+fn main() { for _ in 0_usize..10_usize { panic!(\"moop\"); } }"}, {"sha": "19a57db5ec79d0d01463bdf1e34b11928382de38", "filename": "src/test/run-fail/if-check-panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-panic.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,9 +10,9 @@\n \n // error-pattern:Number is odd\n fn even(x: uint) -> bool {\n-    if x < 2u {\n+    if x < 2_usize {\n         return false;\n-    } else if x == 2u { return true; } else { return even(x - 2u); }\n+    } else if x == 2_usize { return true; } else { return even(x - 2_usize); }\n }\n \n fn foo(x: uint) {\n@@ -23,4 +23,4 @@ fn foo(x: uint) {\n     }\n }\n \n-fn main() { foo(3u); }\n+fn main() { foo(3_usize); }"}, {"sha": "b4ec986ef25fd8f50141116a5d4aad171cc7a0be", "filename": "src/test/run-make/graphviz-flowgraph/f20.dot-expected.dot", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -1,17 +1,17 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 2us\"];\n-    N3[label=\"expr 0us\"];\n-    N4[label=\"expr 20us\"];\n-    N5[label=\"expr [2us, 0us, 20us]\"];\n+    N2[label=\"expr 2usize\"];\n+    N3[label=\"expr 0usize\"];\n+    N4[label=\"expr 20usize\"];\n+    N5[label=\"expr [2usize, 0usize, 20usize]\"];\n     N6[label=\"local v\"];\n-    N7[label=\"stmt let v = [2us, 0us, 20us];\"];\n+    N7[label=\"stmt let v = [2usize, 0usize, 20usize];\"];\n     N8[label=\"expr v\"];\n-    N9[label=\"expr 20us\"];\n-    N10[label=\"expr v[20us]\"];\n-    N11[label=\"stmt v[20us];\"];\n-    N12[label=\"block { let v = [2us, 0us, 20us]; v[20us]; }\"];\n+    N9[label=\"expr 20usize\"];\n+    N10[label=\"expr v[20usize]\"];\n+    N11[label=\"stmt v[20usize];\"];\n+    N12[label=\"block { let v = [2usize, 0usize, 20usize]; v[20usize]; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "d65de18b5470ad11e15c4ec283d0a65d5e7426f1", "filename": "src/test/run-make/graphviz-flowgraph/f20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn expr_index_20() {\n-    let v = [2us, 0us, 20us];\n-    v[20us];\n+    let v = [2_usize, 0_usize, 20_usize];\n+    v[20_usize];\n }"}, {"sha": "db70a2452326673144a0d9c1e9b8504870096e75", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -45,11 +45,11 @@ fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n     fn foo(x: &Float) {}\n     let _: Option<u8> = from_i32(45);\n \n-    let x = 42us;\n+    let x = 42_usize;\n \n     myflate::deflate_bytes(&[]);\n \n-    let x = (3, 4us);\n+    let x = (3, 4_usize);\n     let y = x.1;\n }\n "}, {"sha": "1e0570c95ac12f75977e06f514d003b990f2d41a", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,5 +16,5 @@ impl Foo for uint {}\n \n pub fn dummy() {\n     // force the vtable to be created\n-    let _x = &1u as &Foo;\n+    let _x = &1_usize as &Foo;\n }"}, {"sha": "ce3e69918ffee927e8c77037456fcc472e6b420c", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -43,11 +43,11 @@ fn main() {\n             .write_str(\"mod unicode_input_multiple_files_chars;\");\n     }\n \n-    for _ in 0u..100 {\n+    for _ in 0..100 {\n         {\n             let randoms = tmpdir.join(\"unicode_input_multiple_files_chars.rs\");\n             let mut w = File::create(&randoms).unwrap();\n-            for _ in 0u..30 {\n+            for _ in 0..30 {\n                 let _ = w.write_char(random_char());\n             }\n         }"}, {"sha": "ef6c799336bd4e5171878fe7ccf1b9339c32fded", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -38,8 +38,8 @@ fn main() {\n     let tmpdir = Path::new(&args[2]);\n     let main_file = tmpdir.join(\"span_main.rs\");\n \n-    for _ in 0u..100 {\n-        let n = thread_rng().gen_range(3u, 20);\n+    for _ in 0..100 {\n+        let n = thread_rng().gen_range(3, 20);\n \n         {\n             let _ = write!(&mut File::create(&main_file).unwrap(),"}, {"sha": "b1bebf0b3e60648b3a051be51a4c535589a53dcb", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,7 +17,7 @@ enum sty { ty_nil, }\n struct RawT {struct_: sty, cname: Option<String>, hash: uint}\n \n fn mk_raw_ty(st: sty, cname: Option<String>) -> RawT {\n-    return RawT {struct_: st, cname: cname, hash: 0u};\n+    return RawT {struct_: st, cname: cname, hash: 0_usize};\n }\n \n pub fn main() { mk_raw_ty(sty::ty_nil, None::<String>); }"}, {"sha": "3ac8e4d0ee9ca846ad4b4388aa734fec1148de39", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,7 +14,7 @@\n unsafe fn next_power_of_2(n: u32) -> u32 {\n     let mut tmp = n;\n     asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n-    let mut shift = 1u;\n+    let mut shift = 1_usize;\n     while shift <= 16 {\n         asm!(\n             \"shr %cl, $2\n@@ -42,7 +42,7 @@ pub fn main() {\n             \"shl $2, $1\n             add $3, $1\n             mov $1, $0\"\n-            : \"=r\"(x), \"+r\"(y) : \"i\"(3u), \"ir\"(7u) : \"cc\"\n+            : \"=r\"(x), \"+r\"(y) : \"i\"(3_usize), \"ir\"(7_usize) : \"cc\"\n         );\n     }\n     assert_eq!(x, 47);"}, {"sha": "0f6fec133d1ce1985aaaac5159eb9eecd7c7979f", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     let x: int;\n     unsafe {\n         // Treat the output as initialization.\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u));\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n     }\n     assert_eq!(x, 5);\n "}, {"sha": "57e9230336c1e082a0b203cca2ec36801f9f1bff", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -35,5 +35,5 @@ fn get(x: int) -> <int as SignedUnsigned>::Opposite {\n \n fn main() {\n     let x = get(22);\n-    assert_eq!(22u, x);\n+    assert_eq!(22_usize, x);\n }"}, {"sha": "fe24ab6bbeb1b453a21c8ac791820c2f10aeac7f", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -43,7 +43,7 @@ fn foo2<I: Foo>(x: I) -> <I as Foo>::A {\n \n pub fn main() {\n     let a = 42;\n-    assert!(foo2(a) == 42u);\n+    assert!(foo2(a) == 42_usize);\n \n     let a = Bar;\n     assert!(foo2(a) == 43);"}, {"sha": "3b70e941ac50a8c17ad63d9ff52a3b6e54d1f492", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -40,5 +40,5 @@ impl<T: Foo> C for B<T> {\n }\n \n pub fn main() {\n-    let z: uint = bar(2, 4u);\n+    let z: uint = bar(2, 4_usize);\n }"}, {"sha": "7c126fc420aac7f6b5e5522a5dd33b00977c9f1c", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -131,19 +131,19 @@ enum Quark<T> {\n enum CLike { A, B, C }\n \n pub fn main() {\n-    let a = &Plus(@Minus(@Val(3u), @Val(10u)), @Plus(@Val(22u), @Val(5u)));\n+    let a = &Plus(@Minus(@Val(3_usize), @Val(10_usize)), @Plus(@Val(22_usize), @Val(5_usize)));\n     test_rbml(a);\n \n-    let a = &Spanned {lo: 0u, hi: 5u, node: 22u};\n+    let a = &Spanned {lo: 0_usize, hi: 5_usize, node: 22_usize};\n     test_rbml(a);\n \n-    let a = &Point {x: 3u, y: 5u};\n+    let a = &Point {x: 3_usize, y: 5_usize};\n     test_rbml(a);\n \n-    let a = &Top(22u);\n+    let a = &Top(22_usize);\n     test_rbml(a);\n \n-    let a = &Bottom(222u);\n+    let a = &Bottom(222_usize);\n     test_rbml(a);\n \n     let a = &A;"}, {"sha": "9e88eb6da6aea813b1f6472ce2206ead59bec651", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box() (box 3u as Box<double>);\n-    assert_eq!(x.double(), 6u);\n+    let x = box() (box 3_usize as Box<double>);\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "67dd25ddc5389154872251209486312aee9291ef", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,10 +20,10 @@ impl double for uint {\n }\n \n impl double for Box<uint> {\n-    fn double(self) -> uint { *self * 2u }\n+    fn double(self) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "6437c78161c00f72d4fa104533ebc79216330130", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for Box<uint> {\n-    fn double(self: Box<Box<uint>>) -> uint { **self * 2u }\n+    fn double(self: Box<Box<uint>>) -> uint { **self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box box box box box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box box box box box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "8cbc151f0cd24af4930e5eaeb24296789b1983b1", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "c8fa3c9fd5fb505518d1e71e396f891d0321beb1", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "87157b9334f167f0bf3a540a5dbcd132e9e37613", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -29,6 +29,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = box 3u;\n+    let x = box 3_usize;\n     assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "b36eb4bf2f62e493caea483f280b0344d69cab3a", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -44,9 +44,9 @@ fn test_bool() {\n \n fn test_ptr() {\n     unsafe {\n-        let p1: *const u8 = ::std::mem::transmute(0u);\n-        let p2: *const u8 = ::std::mem::transmute(0u);\n-        let p3: *const u8 = ::std::mem::transmute(1u);\n+        let p1: *const u8 = ::std::mem::transmute(0_usize);\n+        let p2: *const u8 = ::std::mem::transmute(0_usize);\n+        let p3: *const u8 = ::std::mem::transmute(1_usize);\n \n         assert_eq!(p1, p2);\n         assert!(p1 != p3);"}, {"sha": "8418681b6b1903a112a77e71ccd4632723d65f2c", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,12 +11,12 @@\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n fn target() {\n-    assert_eq!(-1000 as uint >> 3u, 536870787u);\n+    assert_eq!(-1000 as uint >> 3_usize, 536870787_usize);\n }\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n fn target() {\n-    assert_eq!(-1000 as uint >> 3u, 2305843009213693827u);\n+    assert_eq!(-1000 as uint >> 3_usize, 2305843009213693827_usize);\n }\n \n fn general() {\n@@ -29,12 +29,12 @@ fn general() {\n     println!(\"{}\", b);\n     assert_eq!(b, 1);\n     assert_eq!(a, 2);\n-    assert_eq!(!0xf0i & 0xff, 0xf);\n-    assert_eq!(0xf0i | 0xf, 0xff);\n-    assert_eq!(0xfi << 4, 0xf0);\n-    assert_eq!(0xf0i >> 4, 0xf);\n+    assert_eq!(!0xf0_isize & 0xff, 0xf);\n+    assert_eq!(0xf0_isize | 0xf, 0xff);\n+    assert_eq!(0xf_isize << 4, 0xf0);\n+    assert_eq!(0xf0_isize >> 4, 0xf);\n     assert_eq!(-16 >> 2, -4);\n-    assert_eq!(0b1010_1010i | 0b0101_0101, 0xff);\n+    assert_eq!(0b1010_1010_isize | 0b0101_0101, 0xff);\n }\n \n pub fn main() {"}, {"sha": "d319aaa2f8e18b58e80317f319c50413f484d2b6", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,6 +13,6 @@ fn asBlock<F>(f: F) -> uint where F: FnOnce() -> uint {\n }\n \n pub fn main() {\n-   let x = asBlock(|| 22u);\n-   assert_eq!(x, 22u);\n+   let x = asBlock(|| 22_usize);\n+   assert_eq!(x, 22_usize);\n }"}, {"sha": "2dbaec8fbb16796e8d072f80aa8e73e005876c6e", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -26,7 +26,7 @@ fn add_int(x: &mut Ints, v: int) {\n \n fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n     let l = x.values.len();\n-    (0u..l).all(|i| f(&x.values[i]))\n+    (0_usize..l).all(|i| f(&x.values[i]))\n }\n \n pub fn main() {"}, {"sha": "874dbdc662b2946023f0411681727345acd41132", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -53,9 +53,9 @@ pub fn main() {\n \n     let buf = vec!(97u8, 98, 99, 100);\n     assert_eq!(match &buf[0..3] {\n-         b\"def\" => 1u,\n-         b\"abc\" => 2u,\n-         _ => 3u\n+         b\"def\" => 1_usize,\n+         b\"abc\" => 2_usize,\n+         _ => 3_usize\n     }, 2);\n \n     let expected: &[_] = &[97u8, 92u8, 110u8];"}, {"sha": "1a85797fa6db53917f9e8c81f64eb7fb81f20020", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,8 +15,8 @@ fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n }\n \n fn main() {\n-    let mut sum = 0u;\n-    let elems = [ 1u, 2, 3, 4, 5 ];\n+    let mut sum = 0_usize;\n+    let elems = [ 1_usize, 2, 3, 4, 5 ];\n     each(&elems, |val| sum += *val);\n     assert_eq!(sum, 15);\n }"}, {"sha": "dd417f1a9eb73ad53fe6d1d0135a6cded719368a", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,8 +17,8 @@ fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n }\n \n fn main() {\n-    let mut sum = 0u;\n-    let elems = [ 1u, 2, 3, 4, 5 ];\n+    let mut sum = 0_usize;\n+    let elems = [ 1_usize, 2, 3, 4, 5 ];\n     each(&elems, |val: &uint| sum += *val);\n     assert_eq!(sum, 15);\n }"}, {"sha": "00c600ed006f87d8125fa0ba0da420e3cb526cf2", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,8 +17,8 @@ extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {\n-    let p = box 22u;\n+    let p = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n-    assert_eq!(r, 22u);\n+    assert_eq!(r, 22_usize);\n }"}, {"sha": "c4b55b9962fb65027cb8482197db1853c66329d7", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n \n-    3u.to(10u, |i| {\n+    3_usize.to(10_usize, |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "2040bd7ad713236ded387435a86988648ff9d6e3", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     // actually working.\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n-    iter(vec!(1u, 2u, 3u), |i| {\n+    iter(vec!(1_usize, 2_usize, 3_usize), |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "9a388c9bc241d99d0dfc0c2db473bb8af978feb3", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -25,6 +25,6 @@ fn print_out(thing: Box<ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0u, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<ToString> = box cat(0_usize, 2, \"nyan\".to_string()) as Box<ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "4f1654e60317a01a271091b952b10c49ab528074", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,11 +22,11 @@ struct dog {\n impl dog {\n     fn bark(&mut self) -> int {\n       println!(\"Woof {} {}\", self.barks, self.volume);\n-      self.barks += 1u;\n-      if self.barks % 3u == 0u {\n+      self.barks += 1_usize;\n+      if self.barks % 3_usize == 0_usize {\n           self.volume += 1;\n       }\n-      if self.barks % 10u == 0u {\n+      if self.barks % 10_usize == 0_usize {\n           self.volume -= 2;\n       }\n       println!(\"Grrr {} {}\", self.barks, self.volume);\n@@ -43,7 +43,7 @@ impl noisy for dog {\n fn dog() -> dog {\n     dog {\n         volume: 0,\n-        barks: 0u\n+        barks: 0_usize\n     }\n }\n \n@@ -70,8 +70,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) -> uint {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n         self.meows\n@@ -88,14 +88,14 @@ fn cat(in_x: uint, in_y: int, in_name: String) -> cat {\n \n \n fn annoy_neighbors(critter: &mut noisy) {\n-    for _i in 0u..10 { critter.speak(); }\n+    for _i in 0_usize..10 { critter.speak(); }\n }\n \n pub fn main() {\n-  let mut nyan: cat = cat(0u, 2, \"nyan\".to_string());\n+  let mut nyan: cat = cat(0_usize, 2, \"nyan\".to_string());\n   let mut whitefang: dog = dog();\n   annoy_neighbors(&mut nyan);\n   annoy_neighbors(&mut whitefang);\n-  assert_eq!(nyan.meow_count(), 10u);\n+  assert_eq!(nyan.meow_count(), 10_usize);\n   assert_eq!(whitefang.volume, 1);\n }"}, {"sha": "476594c270ec3a2ed781ac81d71abc06fd62754c", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -42,8 +42,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n       println!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n+      self.meows += 1_usize;\n+      if self.meows % 5_usize == 0_usize {\n           self.how_hungry += 1;\n       }\n     }\n@@ -59,7 +59,7 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n \n \n pub fn main() {\n-    let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n     let mut nyan: &mut noisy = &mut nyan;\n     nyan.speak();\n }"}, {"sha": "14247ad775487cc7f7dc9d0c6f41d8376608bd63", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ impl Drop for cat {\n \n fn cat(done: extern fn(uint)) -> cat {\n     cat {\n-        meows: 0u,\n+        meows: 0_usize,\n         done: done\n     }\n }"}, {"sha": "4c7d0e6951ab64c33749a94710b612bba065f7ea", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -27,7 +27,7 @@ mod kitty {\n     pub fn cat(in_name: String) -> cat {\n         cat {\n             name: in_name,\n-            meows: 0u\n+            meows: 0_usize\n         }\n     }\n }"}, {"sha": "c3ced512afae4c01beee22a193b1fae1d1ef43a2", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -103,11 +103,11 @@ impl<T> cat<T> {\n \n pub fn main() {\n     let mut nyan: cat<String> = cat::new(0, 2, \"nyan\".to_string());\n-    for _ in 1u..5 { nyan.speak(); }\n+    for _ in 1_usize..5 { nyan.speak(); }\n     assert!(*nyan.find(&1).unwrap() == \"nyan\".to_string());\n     assert_eq!(nyan.find(&10), None);\n     let mut spotty: cat<cat_type> = cat::new(2, 57, cat_type::tuxedo);\n-    for _ in 0u..6 { spotty.speak(); }\n+    for _ in 0_usize..6 { spotty.speak(); }\n     assert_eq!(spotty.len(), 8);\n     assert!((spotty.contains_key(&2)));\n     assert_eq!(spotty.get(&3), &cat_type::tuxedo);"}, {"sha": "bd05221b8c7534142b7abadb4765d5fa8d019b3c", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -40,8 +40,8 @@ impl noisy for cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -57,9 +57,9 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n \n \n pub fn main() {\n-  let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+  let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for _ in 1u..10u { nyan.speak(); };\n+  for _ in 1_usize..10_usize { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "87e6e5f675e995332da759cfc4a24231eb32f9a3", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -24,8 +24,8 @@ struct cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -62,10 +62,10 @@ fn make_speak<C:noisy>(mut c: C) {\n }\n \n pub fn main() {\n-    let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for _ in 1u..10u {\n+    for _ in 1_usize..10_usize {\n         make_speak(nyan.clone());\n     }\n }"}, {"sha": "47cc500e44ecb1ff05c63652ec8c87727c85625d", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,8 +13,8 @@ extern crate cci_class_2;\n use cci_class_2::kitties::cat;\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "d62a726dcdd55bb6d077508c7560bf7f05f30807", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,10 +13,10 @@ extern crate cci_class_3;\n use cci_class_3::kitties::cat;\n \n pub fn main() {\n-    let mut nyan : cat = cat(52u, 99);\n-    let kitty = cat(1000u, 2);\n+    let mut nyan : cat = cat(52_usize, 99);\n+    let kitty = cat(1000_usize, 2);\n     assert_eq!(nyan.how_hungry, 99);\n     assert_eq!(kitty.how_hungry, 2);\n     nyan.speak();\n-    assert_eq!(nyan.meow_count(), 53u);\n+    assert_eq!(nyan.meow_count(), 53_usize);\n }"}, {"sha": "18fb03ec935ed59fc2ee67246da1ffed3bb0802a", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&mut self) { self.meows += 1u; }\n+    pub fn speak(&mut self) { self.meows += 1_usize; }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n@@ -27,10 +27,10 @@ fn cat(in_x: uint, in_y: int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan: cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan: cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();\n-  assert_eq!(nyan.meow_count(), 53u);\n+  assert_eq!(nyan.meow_count(), 53_usize);\n }"}, {"sha": "edbbc4f5b342181dc85d39591065ab035de776a6", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,12 +13,12 @@ extern crate cci_class_6;\n use cci_class_6::kitties::cat;\n \n pub fn main() {\n-  let mut nyan : cat<char> = cat::<char>(52u, 99, vec!('p'));\n-  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<char> = cat::<char>(52_usize, 99, vec!('p'));\n+  let mut kitty = cat(1000_usize, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(vec!(1u,2u,3u));\n-  assert_eq!(nyan.meow_count(), 55u);\n+  nyan.speak(vec!(1_usize,2_usize,3_usize));\n+  assert_eq!(nyan.meow_count(), 55_usize);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n-  assert_eq!(kitty.meow_count(), 1004u);\n+  assert_eq!(kitty.meow_count(), 1004_usize);\n }"}, {"sha": "b529b0a077210b62012c2e9c5697b06d6941b518", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -32,12 +32,12 @@ fn cat<U>(in_x : uint, in_y : int, in_info: Vec<U> ) -> cat<U> {\n }\n \n pub fn main() {\n-  let mut nyan : cat<int> = cat::<int>(52u, 99, vec!(9));\n-  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<int> = cat::<int>(52_usize, 99, vec!(9));\n+  let mut kitty = cat(1000_usize, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak(vec!(1,2,3));\n-  assert_eq!(nyan.meow_count(), 55u);\n+  assert_eq!(nyan.meow_count(), 55_usize);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n-  assert_eq!(kitty.meow_count(), 1004u);\n+  assert_eq!(kitty.meow_count(), 1004_usize);\n }"}, {"sha": "575c32baeac24782509cec1adde66b5fe4b377af", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -39,8 +39,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -67,6 +67,6 @@ fn print_out(thing: Box<ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0u, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<ToString> = box cat(0_usize, 2, \"nyan\".to_string()) as Box<ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "68457095944e30535e2de4df62c6c0785ef97539", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ struct cat<U> {\n }\n \n impl<U> cat<U> {\n-    pub fn speak(&mut self) { self.meows += 1u; }\n+    pub fn speak(&mut self) { self.meows += 1_usize; }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n@@ -28,6 +28,6 @@ fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n \n \n pub fn main() {\n-  let _nyan : cat<int> = cat::<int>(52u, 99);\n-  //  let mut kitty = cat(1000u, 2);\n+  let _nyan : cat<int> = cat::<int>(52_usize, 99);\n+  //  let mut kitty = cat(1000_usize, 2);\n }"}, {"sha": "aae17abcc5fc65d901e4bdc921e141ff57c7d59c", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,9 +13,9 @@ extern crate cci_class_4;\n use cci_class_4::kitties::cat;\n \n pub fn main() {\n-    let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for _ in 1u..10u { nyan.speak(); };\n+    for _ in 1_usize..10_usize { nyan.speak(); };\n     assert!((nyan.eat()));\n }"}, {"sha": "8037d77807d1d76e0397328d0911452cdd55e4f2", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,8 +13,8 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "b15d6544fed29ddea62df03404cf82d2ae6056bb", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -26,8 +26,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "9bf8df3ce4bc99182b2778961fcff012ddffa7a0", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,8 +22,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "4fabca491be93f88eda6ef8005dad5934bd31280", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -33,8 +33,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -49,9 +49,9 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+  let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for _ in 1u..10u { nyan.speak(); };\n+  for _ in 1_usize..10_usize { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "ade18a71259678de4440b813b2837659cfc358af", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,7 +18,7 @@ fn bip(v: &[uint]) -> Vec<uint> {\n }\n \n pub fn main() {\n-    let mut the_vec = vec!(1u, 2, 3, 100);\n+    let mut the_vec = vec!(1_usize, 2, 3, 100);\n     assert_eq!(the_vec.clone(), bar(&mut the_vec));\n     assert_eq!(the_vec.clone(), bip(&the_vec));\n }"}, {"sha": "9f980e161b0cfe0e631e527266db3853bfab566b", "filename": "src/test/run-pass/coherence-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -39,7 +39,7 @@ where M : MyTrait + Debug + PartialEq\n }\n \n pub fn main() {\n-    test_eq(0u, 0u);\n+    test_eq(0_usize, 0_usize);\n \n     let value = MyType { dummy: 256 + 22 };\n     test_eq(value, value);"}, {"sha": "b0c3a5922b6344f86e7f7dbaf88ce44617569c73", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,12 +15,12 @@ pub fn main() {\n     assert_eq!(concat!(\"qux\", \"quux\",).to_string(), \"quxquux\".to_string());\n \n     assert_eq!(\n-        concat!(1, 2, 3u, 4f32, 4.0, 'a', true),\n+        concat!(1, 2, 3_usize, 4f32, 4.0, 'a', true),\n         \"12344.0atrue\"\n     );\n \n     assert!(match \"12344.0atrue\" {\n-        concat!(1, 2, 3u, 4f32, 4.0, 'a', true) => true,\n+        concat!(1, 2, 3_usize, 4f32, 4.0, 'a', true) => true,\n         _ => false\n     })\n }"}, {"sha": "93a7d3e1c36aa1bf095a89ac9f313e0f1468e861", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n     foo(\"hi\".to_string());\n     foo(~[1, 2, 3]);\n     foo(F{field: 42});\n-    foo((1, 2u));\n+    foo((1, 2_usize));\n     foo(@1);*/\n     foo(box 1);\n }"}, {"sha": "d8b3371325b2f4944774db5390848e583807dca8", "filename": "src/test/run-pass/crate-leading-sep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     use ::std::mem;\n-    mem::drop(2u);\n+    mem::drop(2_usize);\n }"}, {"sha": "8018f681f3833fcd89e270184f86ca0600c2f054", "filename": "src/test/run-pass/double-ref.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-ref.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,33 +9,33 @@\n // except according to those terms.\n \n fn check_expr() {\n-    let _:         & uint =     &1u;\n-    let _:       & & uint =    &&1u;\n-    let _:     & & & uint =   &&&1u;\n-    let _:     & & & uint =  & &&1u;\n-    let _:   & & & & uint =  &&&&1u;\n-    let _:   & & & & uint = & &&&1u;\n-    let _: & & & & & uint = &&&&&1u;\n+    let _:         & uint =     &1_usize;\n+    let _:       & & uint =    &&1_usize;\n+    let _:     & & & uint =   &&&1_usize;\n+    let _:     & & & uint =  & &&1_usize;\n+    let _:   & & & & uint =  &&&&1_usize;\n+    let _:   & & & & uint = & &&&1_usize;\n+    let _: & & & & & uint = &&&&&1_usize;\n }\n \n fn check_ty() {\n-    let _:     &uint =         & 1u;\n-    let _:    &&uint =       & & 1u;\n-    let _:   &&&uint =     & & & 1u;\n-    let _:  & &&uint =     & & & 1u;\n-    let _:  &&&&uint =   & & & & 1u;\n-    let _: & &&&uint =   & & & & 1u;\n-    let _: &&&&&uint = & & & & & 1u;\n+    let _:     &uint =         & 1_usize;\n+    let _:    &&uint =       & & 1_usize;\n+    let _:   &&&uint =     & & & 1_usize;\n+    let _:  & &&uint =     & & & 1_usize;\n+    let _:  &&&&uint =   & & & & 1_usize;\n+    let _: & &&&uint =   & & & & 1_usize;\n+    let _: &&&&&uint = & & & & & 1_usize;\n }\n \n fn check_pat() {\n-    let     &_ =         & 1u;\n-    let    &&_ =       & & 1u;\n-    let   &&&_ =     & & & 1u;\n-    let  & &&_ =     & & & 1u;\n-    let  &&&&_ =   & & & & 1u;\n-    let & &&&_ =   & & & & 1u;\n-    let &&&&&_ = & & & & & 1u;\n+    let     &_ =         & 1_usize;\n+    let    &&_ =       & & 1_usize;\n+    let   &&&_ =     & & & 1_usize;\n+    let  & &&_ =     & & & 1_usize;\n+    let  &&&&_ =   & & & & 1_usize;\n+    let & &&&_ =   & & & & 1_usize;\n+    let &&&&&_ = & & & & & 1_usize;\n }\n \n pub fn main() {}"}, {"sha": "b46c99ac0d9a46d32d6bcd12afab6e3fa2d9edf7", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -62,7 +62,7 @@ pub fn main() {\n \n     let (sender, receiver) = channel();\n     {\n-        let v = Foo::NestedVariant(box 42u, SendOnDrop { sender: sender.clone() }, sender);\n+        let v = Foo::NestedVariant(box 42_usize, SendOnDrop { sender: sender.clone() }, sender);\n     }\n     assert_eq!(receiver.recv().unwrap(), Message::DestructorRan);\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n@@ -79,10 +79,10 @@ pub fn main() {\n     let (sender, receiver) = channel();\n     let t = {\n         thread::spawn(move|| {\n-            let mut v = Foo::NestedVariant(box 42u, SendOnDrop {\n+            let mut v = Foo::NestedVariant(box 42usize, SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());\n-            v = Foo::NestedVariant(box 42u, SendOnDrop { sender: sender.clone() }, sender.clone());\n+            v = Foo::NestedVariant(box 42_usize, SendOnDrop { sender: sender.clone() }, sender.clone());\n             v = Foo::SimpleVariant(sender.clone());\n             v = Foo::FailingVariant { on_drop: SendOnDrop { sender: sender } };\n         })"}, {"sha": "b9e08e47b378db61a0913fbd9a5b974deecf0ab1", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -41,7 +41,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n }\n \n pub fn main() {\n-    (0u..100).map(|_| {\n+    (0_usize..100).map(|_| {\n         Thread::scoped(move|| {\n             assert_eq!(count(5), 16);\n         })"}, {"sha": "80428d787f21c5b88b6fb14617e8ba697b794f65", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -38,7 +38,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n }\n \n pub fn main() {\n-    (0..10u).map(|i| {\n+    (0..10_usize).map(|i| {\n         Thread::scoped(move|| {\n             let result = count(5);\n             println!(\"result = {}\", result);"}, {"sha": "592ab7d0e6e36a1e292ccade23cfa30e35f9b8dc", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -32,5 +32,5 @@ fn strlen(str: String) -> uint {\n \n pub fn main() {\n     let len = strlen(\"Rust\".to_string());\n-    assert_eq!(len, 4u);\n+    assert_eq!(len, 4_usize);\n }"}, {"sha": "a15a176c2238d576f1ec0ff7d4b4d9365496c8cd", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,13 +20,13 @@ use collections::string::ToString;\n \n #[start]\n fn start(_argc: int, _argv: *const *const u8) -> int {\n-    let s = format!(\"{}\", 1i);\n+    let s = format!(\"{}\", 1_isize);\n     assert_eq!(s, \"1\".to_string());\n \n     let s = format!(\"test\");\n     assert_eq!(s, \"test\".to_string());\n \n-    let s = format!(\"{test}\", test=3i);\n+    let s = format!(\"{test}\", test=3_isize);\n     assert_eq!(s, \"3\".to_string());\n \n     let s = format!(\"hello {}\", \"world\");"}, {"sha": "d2a1a3c71a5fc1d365c9094e3d426b1262acab0f", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn even(x: uint) -> bool {\n-    if x < 2u {\n+    if x < 2_usize {\n         return false;\n-    } else if x == 2u { return true; } else { return even(x - 2u); }\n+    } else if x == 2_usize { return true; } else { return even(x - 2_usize); }\n }\n \n fn foo(x: uint) {\n@@ -22,4 +22,4 @@ fn foo(x: uint) {\n     }\n }\n \n-pub fn main() { foo(2u); }\n+pub fn main() { foo(2_usize); }"}, {"sha": "2d2f77b099151037d97b4784f29df0d96cfcfe9a", "filename": "src/test/run-pass/if-let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-let.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -23,14 +23,14 @@ pub fn main() {\n     let clause: uint;\n     if let None = Some(\"test\") {\n         clause = 1;\n-    } else if 4u > 5 {\n+    } else if 4_usize > 5 {\n         clause = 2;\n     } else if let Ok(()) = Err::<(),&'static str>(\"test\") {\n         clause = 3;\n     } else {\n         clause = 4;\n     }\n-    assert_eq!(clause, 4u);\n+    assert_eq!(clause, 4_usize);\n \n     if 3 > 4 {\n         panic!(\"bad math\");\n@@ -57,9 +57,9 @@ pub fn main() {\n \n     if false {\n         panic!(\"wat\");\n-    } else if let a@Foo::Two(_) = Foo::Two(42u) {\n+    } else if let a@Foo::Two(_) = Foo::Two(42_usize) {\n         if let Foo::Two(b) = a {\n-            assert_eq!(b, 42u);\n+            assert_eq!(b, 42_usize);\n         } else {\n             panic!(\"panic in nested if-let\");\n         }"}, {"sha": "ab83fb90d3f25ab3f47cdea68d77d7f4021a7b4b", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -60,15 +60,15 @@ pub fn main() {\n     t!(format!(\"{}\", true), \"true\");\n     t!(format!(\"{}\", '\u2603'), \"\u2603\");\n     t!(format!(\"{}\", 10), \"10\");\n-    t!(format!(\"{}\", 10u), \"10\");\n+    t!(format!(\"{}\", 10_usize), \"10\");\n     t!(format!(\"{:?}\", '\u2603'), \"'\\\\u{2603}'\");\n     t!(format!(\"{:?}\", 10), \"10\");\n-    t!(format!(\"{:?}\", 10u), \"10\");\n+    t!(format!(\"{:?}\", 10_usize), \"10\");\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n-    t!(format!(\"{:o}\", 10u), \"12\");\n-    t!(format!(\"{:x}\", 10u), \"a\");\n-    t!(format!(\"{:X}\", 10u), \"A\");\n+    t!(format!(\"{:o}\", 10_usize), \"12\");\n+    t!(format!(\"{:x}\", 10_usize), \"a\");\n+    t!(format!(\"{:X}\", 10_usize), \"A\");\n     t!(format!(\"{}\", \"foo\"), \"foo\");\n     t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n     t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n@@ -153,7 +153,7 @@ pub fn main() {\n     // make sure that format! doesn't cause spurious unused-unsafe warnings when\n     // it's inside of an outer unsafe block\n     unsafe {\n-        let a: isize = ::std::mem::transmute(3u);\n+        let a: isize = ::std::mem::transmute(3_usize);\n         format!(\"{}\", a);\n     }\n "}, {"sha": "ea8825d22dffde280dc3530abb4f92007aaa114c", "filename": "src/test/run-pass/integer-literal-radix.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n pub fn main() {\n-    let a = 0xBEEFi;\n-    let b = 0o755i;\n-    let c = 0b10101i;\n-    let d = -0xBEEFi;\n-    let e = -0o755i;\n-    let f = -0b10101i;\n+    let a = 0xBEEF_isize;\n+    let b = 0o755_isize;\n+    let c = 0b10101_isize;\n+    let d = -0xBEEF_isize;\n+    let e = -0o755_isize;\n+    let f = -0b10101_isize;\n \n     assert_eq!(a, 48879);\n     assert_eq!(b, 493);"}, {"sha": "f852bac404861a8d9683e3fa47c2c7412a773837", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -27,17 +27,17 @@ mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 4u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 4_usize);\n         }\n     }\n \n     #[main]\n     #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n }\n@@ -48,17 +48,17 @@ mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n \n     #[main]\n     #[cfg(target_arch = \"x86_64\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n }\n@@ -69,8 +69,8 @@ mod m {\n     #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n }"}, {"sha": "d9bae6886fa2e6907b59721da70bc20c2495830c", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ use std::num::Float;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6\n-    let n = 1000000u;\n+    let n = 1000000_usize;\n     let mut sieve = Bitv::from_elem(n+1, true);\n     let limit: uint = (n as f32).sqrt() as uint;\n     for i in 2..limit+1 {"}, {"sha": "b7dc98b92e0db21feed21496f54a6ef675e43711", "filename": "src/test/run-pass/issue-12909.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12909.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ fn copy<T: Copy>(&x: &T) -> T {\n }\n \n fn main() {\n-    let arr = [(1, 1u), (2, 2), (3, 3)];\n+    let arr = [(1, 1_usize), (2, 2), (3, 3)];\n \n     let v1: Vec<&_> = arr.iter().collect();\n     let v2: Vec<_> = arr.iter().map(copy).collect();"}, {"sha": "a8343712034807fcc5f3480dba8550099a3cb964", "filename": "src/test/run-pass/issue-13352.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13352.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     foo(loop {\n         unsafe { libc::exit(0 as libc::c_int); }\n     });\n-    2u + (loop {});\n+    2_usize + (loop {});\n }"}, {"sha": "6c9c7e2fd3f141978aa78d1c68b4bf36c3cbb86b", "filename": "src/test/run-pass/issue-14393.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-14393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-14393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14393.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    match (\"\", 1u) {\n-        (_, 42u) => (),\n+    match (\"\", 1_usize) {\n+        (_, 42_usize) => (),\n         (\"\", _) => (),\n         _ => ()\n     }"}, {"sha": "24340ac3f13d7013e66e9018e1d81122b38ca9fe", "filename": "src/test/run-pass/issue-15189.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15189.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ macro_rules! third {\n }\n \n fn main() {\n-    let x = vec!(10u,11u,12u,13u);\n+    let x = vec!(10_usize,11_usize,12_usize,13_usize);\n     let t = third!(x);\n-    assert_eq!(t,12u);\n+    assert_eq!(t,12_usize);\n }"}, {"sha": "a6b8a04eeb60ed63a88133466eb4933fa09885d8", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,5 +11,5 @@\n use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64; 3] = [1, 2, 3];\n-    assert_eq!(6, (0us..3).map(|i| x[i]).sum());\n+    assert_eq!(6, (0_usize..3).map(|i| x[i]).sum());\n }"}, {"sha": "e66ac8ff53c1f76e6511cd13b9e8987cd31baa44", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -53,12 +53,12 @@ impl<T, M: Index<(uint, uint), Output=T>> Index<uint> for Row<M> {\n }\n \n fn main() {\n-    let m = Mat::new(vec!(1u, 2, 3, 4, 5, 6), 3);\n+    let m = Mat::new(vec!(1_usize, 2, 3, 4, 5, 6), 3);\n     let r = m.row(1);\n \n     assert!(r.index(&2) == &6);\n     assert!(r[2] == 6);\n-    assert!(r[2u] == 6u);\n+    assert!(r[2_usize] == 6_usize);\n     assert!(6 == r[2]);\n \n     let e = r[2];"}, {"sha": "18e1918aea44747e945eb0056b618300c084b109", "filename": "src/test/run-pass/issue-15881-model-lexer-dotdotdot.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,24 +11,24 @@\n // regression test for the model lexer handling the DOTDOTDOT syntax (#15877)\n \n pub fn main() {\n-    match 5u {\n-      1u...5u => {}\n+    match 5_usize {\n+      1_usize...5_usize => {}\n       _ => panic!(\"should match range\"),\n     }\n-    match 5u {\n-      6u...7u => panic!(\"shouldn't match range\"),\n+    match 5_usize {\n+      6_usize...7_usize => panic!(\"shouldn't match range\"),\n       _ => {}\n     }\n-    match 5u {\n-      1u => panic!(\"should match non-first range\"),\n-      2u...6u => {}\n+    match 5_usize {\n+      1_usize => panic!(\"should match non-first range\"),\n+      2_usize...6_usize => {}\n       _ => panic!(\"math is broken\")\n     }\n     match 'c' {\n       'a'...'z' => {}\n       _ => panic!(\"should suppport char ranges\")\n     }\n-    match -3i {\n+    match -3_isize {\n       -7...5 => {}\n       _ => panic!(\"should match signed range\")\n     }"}, {"sha": "45e70f59f3397715a704ee054d3bf01c55150c3a", "filename": "src/test/run-pass/issue-17662.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17662.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ extern crate \"issue-17662\" as i;\n struct Bar<'a>;\n \n impl<'a> i::Foo<'a, uint> for Bar<'a> {\n-    fn foo(&self) -> uint { 5u }\n+    fn foo(&self) -> uint { 5_usize }\n }\n \n pub fn main() {"}, {"sha": "a7d9e6a4be6d840596171e06e354e18bb9afd000", "filename": "src/test/run-pass/issue-17877.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17877.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,12 +10,12 @@\n \n fn main() {\n     assert_eq!(match [0u8; 1024] {\n-        _ => 42u,\n-    }, 42u);\n+        _ => 42_usize,\n+    }, 42_usize);\n \n     assert_eq!(match [0u8; 1024] {\n-        [1, _..] => 0u,\n-        [0, _..] => 1u,\n-        _ => 2u\n-    }, 1u);\n+        [1, _..] => 0_usize,\n+        [0, _..] => 1_usize,\n+        _ => 2_usize\n+    }, 1_usize);\n }"}, {"sha": "ec7481ead0482dd29af975617cf66ad6bd2ae045", "filename": "src/test/run-pass/issue-18425.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18425.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,5 +15,5 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let _ = [box 1u; 1];\n+    let _ = [box 1_usize; 1];\n }"}, {"sha": "ce56f3e8d72875b996ec4c0ad66dc258997af30b", "filename": "src/test/run-pass/issue-18539.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-18539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-18539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18539.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -19,5 +19,5 @@ fn uint_to_foo(_: uint) -> Foo {\n \n #[allow(unused_must_use)]\n fn main() {\n-    (0u..10).map(uint_to_foo);\n+    (0_usize..10).map(uint_to_foo);\n }"}, {"sha": "2f23b8028ecb905fb0feec7f7c80188c2e00004e", "filename": "src/test/run-pass/issue-18767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-18767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-18767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18767.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,7 +12,7 @@\n // and doesn't ICE.\n \n fn main() {\n-    for &&x in Some(&0u).iter() {\n+    for &&x in Some(&0_usize).iter() {\n         assert_eq!(x, 0)\n     }\n }"}, {"sha": "0578db8f854fcbadd9e9d9bde0160a1f4582b4b7", "filename": "src/test/run-pass/issue-19499.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-19499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-19499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19499.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,5 +16,5 @@\n \n fn main() {\n     let n = 0;\n-    let it = Some(1_us).into_iter().inspect(|_| {n;});\n+    let it = Some(1_usize).into_iter().inspect(|_| {n;});\n }"}, {"sha": "20ff8d29b7076bc4dc7d7028ad33ac8bc75dabd2", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -72,17 +72,17 @@ fn range(lo: uint, hi: uint, it: |uint|) {\n     let mut i = lo;\n     while i < hi {\n         it(i);\n-        i += 1u;\n+        i += 1_usize;\n     }\n }\n \n pub fn main() {\n-    let range: 'static ||uint|| = |a| range(0u, 1000u, a);\n+    let range: 'static ||uint|| = |a| range(0_usize, 1000_usize, a);\n     let filt: 'static ||v: uint|| = |a| filter(\n         range,\n-        |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n+        |&&n: uint| n % 3_usize != 0_usize && n % 5_usize != 0_usize,\n         a);\n-    let sum = foldl(filt, 0u, |accum, &&n: uint| accum + n );\n+    let sum = foldl(filt, 0_usize, |accum, &&n: uint| accum + n );\n \n     println!(\"{}\", sum);\n }"}, {"sha": "395b2c4b459eba638256e89466b0290f8e2661b2", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,5 +22,5 @@ fn f<T>(_x: T) {\n }\n \n pub fn main() {\n-    f(C(1u));\n+    f(C(1_usize));\n }"}, {"sha": "8767d397b647a19149e766c8d54fca765bf5bac2", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ impl methods for () {\n // the position of this function is significant! - if it comes before methods\n // then it works, if it comes after it then it doesn't!\n fn to_bools(bitv: Storage) -> Vec<bool> {\n-    (0us..8).map(|i| {\n+    (0_usize..8).map(|i| {\n         let w = i / 64;\n         let b = i % 64;\n         let x = 1u64 & (bitv.storage[w] >> b);\n@@ -35,7 +35,7 @@ pub fn main() {\n     let bools = vec!(false, false, true, false, false, true, true, false);\n     let bools2 = to_bools(Storage{storage: vec!(0b01100100)});\n \n-    for i in 0u..8 {\n+    for i in 0_usize..8 {\n         println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);\n     }\n "}, {"sha": "e331a1a2d0c1dfd75c0b1ac7fedda7b79612b36f", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let x = 1u;\n+  let x = 1_usize;\n   let y = || x;\n   let _z = y();\n }"}, {"sha": "4a28c34e5d9f4299683811b7159e100fe59a5823", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -29,7 +29,7 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n \n         // `box() (...)` syntax is needed to make pretty printer converge in one try:\n         let callback: SamplesFn = box() (move |buffer| {\n-            for i in 0u..buffer.len() {\n+            for i in 0_usize..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])\n             }\n         });"}, {"sha": "93429ff10dcd1f9fe356e7f4ece7856e42e35f3f", "filename": "src/test/run-pass/issue-6130.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6130.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,9 +12,9 @@\n \n pub fn main() {\n     let i: uint = 0;\n-    assert!(i <= 0xFFFF_FFFF_u);\n+    assert!(i <= 0xFFFF_FFFF_usize);\n \n     let i: int = 0;\n-    assert!(i >= -0x8000_0000_i);\n-    assert!(i <= 0x7FFF_FFFF_i);\n+    assert!(i >= -0x8000_0000__isize);\n+    assert!(i <= 0x7FFF_FFFF__isize);\n }"}, {"sha": "557ec82233ddebca8a17538b5132abe162ffd6ef", "filename": "src/test/run-pass/issue-6892.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-6892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-6892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6892.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     assert_eq!(unsafe { NUM_DROPS }, 3);\n     { let _x = FooBar::_Foo(Foo); }\n     assert_eq!(unsafe { NUM_DROPS }, 5);\n-    { let _x = FooBar::_Bar(42u); }\n+    { let _x = FooBar::_Bar(42_usize); }\n     assert_eq!(unsafe { NUM_DROPS }, 6);\n \n     { let _ = Foo; }\n@@ -60,6 +60,6 @@ fn main() {\n     assert_eq!(unsafe { NUM_DROPS }, 9);\n     { let _ = FooBar::_Foo(Foo); }\n     assert_eq!(unsafe { NUM_DROPS }, 11);\n-    { let _ = FooBar::_Bar(42u); }\n+    { let _ = FooBar::_Bar(42_usize); }\n     assert_eq!(unsafe { NUM_DROPS }, 12);\n }"}, {"sha": "00339a4e84b2b470e4b54c5842f8131c30fea2d2", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     assert!(thread::spawn(move|| { min_val::<i16>() / -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i32>() / -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i64>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1is / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize / zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i8 / zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i16 / zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i32 / zero(); }).join().is_err());\n@@ -31,7 +31,7 @@ fn main() {\n     assert!(thread::spawn(move|| { min_val::<i16>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i32>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i64>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1is % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize % zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i8 % zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i16 % zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i32 % zero(); }).join().is_err());"}, {"sha": "815e00e129143f0ee2d8c60e2cb14e4013ac450c", "filename": "src/test/run-pass/issue-8783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-8783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fissue-8783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8783.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,7 +13,7 @@ use std::default::Default;\n struct X { pub x: uint }\n impl Default for X {\n     fn default() -> X {\n-        X { x: 42u }\n+        X { x: 42_usize }\n     }\n }\n "}, {"sha": "6036af5c6275f9c3a68ebdb1057c07ad2158756b", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -175,7 +175,7 @@ mod test_foreign_items {\n     #![str = \"s\"]\n     #![char = 'c']\n     #![int = 100]\n-    #![uint = 100u]\n+    #![uint = 100_usize]\n     #![mach_int = 100u32]\n     #![float = 1.0]\n     #![mach_float = 1.0f32]"}, {"sha": "566d34e6d86df763a4c9f13ee51bed0ea8555dae", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -19,8 +19,8 @@ struct A { a: Box<isize> }\n fn foo() -> Box<FnMut() -> isize + 'static> {\n     let k = box 22;\n     let _u = A {a: k.clone()};\n-    // FIXME(#16640) suffix in `22i` suffix shouldn't be necessary\n-    let result  = || 22i;\n+    // FIXME(#16640) suffix in `22_isize` suffix shouldn't be necessary\n+    let result  = || 22_isize;\n     box result\n }\n "}, {"sha": "c0f674d03714f12d616df55b15d442bdabf13c78", "filename": "src/test/run-pass/let-destruct-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 3u;\n+    let x = 3_usize;\n     let ref y = x;\n     assert_eq!(x, *y);\n }"}, {"sha": "d58d2a7139665bd08fb304999c2fd13e42305e8d", "filename": "src/test/run-pass/loop-break-cont-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let _i = 0u;\n+  let _i = 0_usize;\n   loop {\n     break;\n   }"}, {"sha": "a15efa2d8ee8e9d4a58330ccb4348a6b0d628b2b", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,37 +9,37 @@\n // except according to those terms.\n \n pub fn main() {\n-  let mut i = 0u;\n+  let mut i = 0_usize;\n   loop {\n     println!(\"a\");\n-    i += 1u;\n-    if i == 10u {\n+    i += 1_usize;\n+    if i == 10_usize {\n       break;\n     }\n   }\n-  assert_eq!(i, 10u);\n+  assert_eq!(i, 10_usize);\n   let mut is_even = false;\n   loop {\n-    if i == 21u {\n+    if i == 21_usize {\n         break;\n     }\n     println!(\"b\");\n     is_even = false;\n-    i += 1u;\n-    if i % 2u != 0u {\n+    i += 1_usize;\n+    if i % 2_usize != 0_usize {\n         continue;\n     }\n     is_even = true;\n   }\n   assert!(!is_even);\n   loop {\n     println!(\"c\");\n-    if i == 22u {\n+    if i == 22_usize {\n         break;\n     }\n     is_even = false;\n-    i += 1u;\n-    if i % 2u != 0u {\n+    i += 1_usize;\n+    if i % 2_usize != 0_usize {\n         continue;\n     }\n     is_even = true;"}, {"sha": "01362f0f83f90ce4e287ffe488842966144a9520", "filename": "src/test/run-pass/macro-delimiter-significance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-delimiter-significance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-delimiter-significance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-delimiter-significance.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    vec![1u, 2, 3].len();\n+    vec![1_usize, 2, 3].len();\n }\n "}, {"sha": "9e2f431c3ecb8561e8c869565688caa3d54fed1b", "filename": "src/test/run-pass/macro-include-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,5 +16,5 @@ include!(concat!(\"\", \"\", \"../auxiliary/\", \"macro-include-items-item.rs\"));\n \n fn main() {\n     foo();\n-    assert_eq!(include!(concat!(\"\", \"../auxiliary/\", \"macro-include-items-expr.rs\")), 1u);\n+    assert_eq!(include!(concat!(\"\", \"../auxiliary/\", \"macro-include-items-expr.rs\")), 1_usize);\n }"}, {"sha": "069aeb9220e604a70ecd87ebdf9988ca8072bbfe", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -24,6 +24,6 @@ macro_rules! overly_complicated {\n \n pub fn main() {\n     assert!(overly_complicated!(f, x, Option<uint>, { return Some(x); },\n-                               Some(8u), Some(y), y) == 8u)\n+                               Some(8_usize), Some(y), y) == 8_usize)\n \n }"}, {"sha": "1a77eee824b6d31107c86294bb3d7afc39064eeb", "filename": "src/test/run-pass/macro-of-higher-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-of-higher-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-of-higher-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-of-higher-order.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n macro_rules! higher_order {\n     (subst $lhs:tt => $rhs:tt) => ({\n             macro_rules! anon { $lhs => $rhs }\n-            anon!(1u, 2u, \"foo\")\n+            anon!(1_usize, 2_usize, \"foo\")\n     });\n }\n "}, {"sha": "6f2626a5af51ef7b45d8571893ff5d99bf42e014", "filename": "src/test/run-pass/macro-pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -47,9 +47,9 @@ fn f(c: Option<char>) -> uint {\n }\n \n pub fn main() {\n-    assert_eq!(1u, f(Some('x')));\n-    assert_eq!(2u, f(Some('y')));\n-    assert_eq!(3u, f(None));\n+    assert_eq!(1_usize, f(Some('x')));\n+    assert_eq!(2_usize, f(Some('y')));\n+    assert_eq!(3_usize, f(None));\n \n     assert_eq!(1, match Some('x') {\n         Some(char_x!()) => 1,"}, {"sha": "dba623876b0a963b5213459856b3393e5cc8583a", "filename": "src/test/run-pass/macro-reexport-no-intermediate-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-reexport-no-intermediate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-reexport-no-intermediate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-reexport-no-intermediate-use.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_reexport_2_no_use;\n \n fn main() {\n-    assert_eq!(reexported!(), 3u);\n+    assert_eq!(reexported!(), 3_usize);\n }"}, {"sha": "a6af8c45c2439e1be38e9e26c1850d570965e44c", "filename": "src/test/run-pass/macro-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmacro-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-reexport.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_reexport_2;\n \n fn main() {\n-    assert_eq!(reexported!(), 3u);\n+    assert_eq!(reexported!(), 3_usize);\n }"}, {"sha": "68719090cff521ae9ffb107efe9ad7fbd858314c", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,17 +11,17 @@\n // ignore-lexer-test FIXME #15877\n \n pub fn main() {\n-    match 5u {\n-      1u...5u => {}\n+    match 5_usize {\n+      1_usize...5_usize => {}\n       _ => panic!(\"should match range\"),\n     }\n-    match 5u {\n-      6u...7u => panic!(\"shouldn't match range\"),\n+    match 5_usize {\n+      6_usize...7_usize => panic!(\"shouldn't match range\"),\n       _ => {}\n     }\n-    match 5u {\n-      1u => panic!(\"should match non-first range\"),\n-      2u...6u => {}\n+    match 5_usize {\n+      1_usize => panic!(\"should match non-first range\"),\n+      2_usize...6_usize => {}\n       _ => panic!(\"math is broken\")\n     }\n     match 'c' {"}, {"sha": "eb6b2176e5140d5a0edf1a6a237446172b35ee5d", "filename": "src/test/run-pass/match-vec-alternatives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -70,7 +70,7 @@ fn main() {\n     assert_eq!(match_vecs_snoc::<uint>(&[], &[]), \"both empty\");\n     assert_eq!(match_vecs_snoc(&[1, 2, 3], &[]), \"one empty\");\n \n-    assert_eq!(match_nested_vecs_cons(None, Ok::<&[_], ()>(&[4u, 2u])),\n+    assert_eq!(match_nested_vecs_cons(None, Ok::<&[_], ()>(&[4_usize, 2_usize])),\n                \"None, Ok(at least two elements)\");\n     assert_eq!(match_nested_vecs_cons::<uint>(None, Err(())), \"None, Ok(less than one element)\");\n     assert_eq!(match_nested_vecs_cons::<bool>(Some::<&[_]>(&[]), Ok::<&[_], ()>(&[])),\n@@ -79,7 +79,7 @@ fn main() {\n     assert_eq!(match_nested_vecs_cons(Some::<&[_]>(&[(42, ())]), Ok::<&[_], ()>(&[(1, ())])),\n                \"Some(non-empty), any\");\n \n-    assert_eq!(match_nested_vecs_snoc(None, Ok::<&[_], ()>(&[4u, 2u])),\n+    assert_eq!(match_nested_vecs_snoc(None, Ok::<&[_], ()>(&[4_usize, 2_usize])),\n                \"None, Ok(at least two elements)\");\n     assert_eq!(match_nested_vecs_snoc::<uint>(None, Err(())), \"None, Ok(less than one element)\");\n     assert_eq!(match_nested_vecs_snoc::<bool>(Some::<&[_]>(&[]), Ok::<&[_], ()>(&[])),"}, {"sha": "de24297c7b51af6f3fcd5d4147d04cd868d73697", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -54,5 +54,5 @@ fn main() {\n \n     x.foo(&x);\n \n-    unsafe { assert!(COUNT == 2u*3*3*3*5*5*5*7*7*7); }\n+    unsafe { assert!(COUNT == 2_usize*3*3*3*5*5*5*7*7*7); }\n }"}, {"sha": "7463783be59892fe95a343a2eb4a220c5f773e45", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -34,7 +34,7 @@ impl<T> Foo for Vec<Box<T>> {\n fn call_foo_copy() -> int {\n     let mut x = Vec::new();\n     let y = x.foo();\n-    x.push(0u);\n+    x.push(0_usize);\n     y\n }\n "}, {"sha": "07d0594b494d966d1f5df70c0e05ffcf9423ac2d", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -27,7 +27,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n \n pub fn main() {\n     let x = box Triple{x: 1, y: 2, z: 3};\n-    for _ in 0u..10000u {\n+    for _ in 0_usize..10000_usize {\n         assert_eq!(test(true, x.clone()), 2);\n     }\n     assert_eq!(test(false, x), 5);"}, {"sha": "6b52ea9dfa7a33c19fd424b80993bb21b8548793", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -40,7 +40,7 @@ where T : Eq + Debug,\n }\n \n pub fn main() {\n-    test_eq(22u, 0u);\n+    test_eq(22_usize, 0_usize);\n \n     let value = MyType { dummy: 256 + 22 };\n     test_eq(value, value.dummy);"}, {"sha": "eccc2a41a8d2d3f6bd15eb9ab8485a403c46e400", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n \n // uints\n     // num\n-    assert_eq!(15_usize.add(6us), 21_usize);\n+    assert_eq!(15_usize.add(6_usize), 21_usize);\n     assert_eq!(15_u8.add(6u8), 21_u8);\n     assert_eq!(15_u16.add(6u16), 21_u16);\n     assert_eq!(15_u32.add(6u32), 21_u32);"}, {"sha": "998af27c338dc88210fb1f56e02b20a73a178419", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -40,9 +40,9 @@ fn do_it_imm(obj: &Foo, v: uint) {\n }\n \n pub fn main() {\n-    let mut x = 22_u;\n+    let mut x = 22_usize;\n     let obj = &mut x as &mut Foo;\n     do_it_mut(obj);\n-    do_it_imm(obj, 23u);\n+    do_it_imm(obj, 23_usize);\n     do_it_mut(obj);\n }"}, {"sha": "30a8c270bd7944c36fa43f0833b3621663906de4", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n         box BarStruct{ x: 2 } as Box<FooTrait>\n     );\n \n-    for i in 0u..foos.len() {\n+    for i in 0_usize..foos.len() {\n         assert_eq!(i, foos[i].foo());\n     }\n }"}, {"sha": "654d2429a0ba06fb83428c44aa97eb8fa8751c41", "filename": "src/test/run-pass/or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2For-pattern.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,6 +16,6 @@ fn or_alt(q: blah) -> int {\n \n pub fn main() {\n     assert_eq!(or_alt(blah::c), 0);\n-    assert_eq!(or_alt(blah::a(10, 100, 0u)), 110);\n+    assert_eq!(or_alt(blah::a(10, 100, 0_usize)), 110);\n     assert_eq!(or_alt(blah::b(20, 200)), 220);\n }"}, {"sha": "1118638fe071345d3987346dcd925200c1e261f0", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,10 +10,10 @@\n \n // Regression test for issue #152.\n pub fn main() {\n-    let mut b: uint = 1u;\n-    while b <= 32u {\n-        0u << b;\n-        b <<= 1u;\n+    let mut b: uint = 1_usize;\n+    while b <= 32_usize {\n+        0_usize << b;\n+        b <<= 1_usize;\n         println!(\"{}\", b);\n     }\n }"}, {"sha": "f40c9dc45cab1c592adc549c22d50c1e557934e3", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,8 +22,8 @@ struct Point {\n }\n \n pub fn main() {\n-    let box_5 = box 5u;\n-    assert_eq!(Rc::new(5u).to_uint(), Some(5));\n+    let box_5 = box 5_usize;\n+    assert_eq!(Rc::new(5_usize).to_uint(), Some(5));\n     assert_eq!((box &box &Rc::new(box box &box_5)).to_uint(), Some(5));\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);"}, {"sha": "cfe49c38c5267835a1e1b4c57c06895634d5b857", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n     assert_eq!(mem::size_of::<[Foo; 10]>(), 90);\n \n-    for i in 0u..10 {\n+    for i in 0_usize..10 {\n         assert_eq!(foos[i], Foo { bar: 1, baz: 2});\n     }\n "}, {"sha": "02d8602d59e311618fd820922d239d3aa851e4eb", "filename": "src/test/run-pass/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,4 +14,4 @@ mod foo {\n     pub fn bar(_offset: uint) { }\n }\n \n-pub fn main() { foo::bar(0u); }\n+pub fn main() { foo::bar(0_usize); }"}, {"sha": "7d9c3d324f070c227f8cac3a2db2303981409a65", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,13 +16,13 @@ fn foo(src: uint) {\n \n     match Some(src) {\n       Some(src_id) => {\n-        for _i in 0u..10u {\n+        for _i in 0_usize..10_usize {\n             let yyy = src_id;\n-            assert_eq!(yyy, 0u);\n+            assert_eq!(yyy, 0_usize);\n         }\n       }\n       _ => { }\n     }\n }\n \n-pub fn main() { foo(0u); }\n+pub fn main() { foo(0_usize); }"}, {"sha": "7ad93d271a989556b892772fda0a3e2638e78d53", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,7 +15,7 @@ use arena::Arena;\n pub fn main() {\n     let mut arena = Arena::new();\n     let p = &mut arena;\n-    let x = p.alloc(|| 4u);\n+    let x = p.alloc(|| 4_usize);\n     println!(\"{}\", *x);\n-    assert_eq!(*x, 4u);\n+    assert_eq!(*x, 4_usize);\n }"}, {"sha": "c7380b362fbbad794447b2b2e7de26072d37f8b8", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -26,6 +26,6 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-    let mut nyan : cat = cat(52u, 99);\n-    assert_eq!(nyan.meow_count(), 52u);\n+    let mut nyan : cat = cat(52_usize, 99);\n+    assert_eq!(nyan.meow_count(), 52_usize);\n }"}, {"sha": "498bd04e37cc2a2bbdd92270163183198ed08b0a", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,13 +16,13 @@ struct cat {\n \n impl cat {\n     pub fn play(&mut self) {\n-        self.meows += 1u;\n+        self.meows += 1_usize;\n         self.nap();\n     }\n }\n \n impl cat {\n-    fn nap(&mut self) { for _ in 1u..10u { } }\n+    fn nap(&mut self) { for _ in 1_usize..10_usize { } }\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {\n@@ -33,6 +33,6 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan : cat = cat(52u, 99);\n+  let mut nyan : cat = cat(52_usize, 99);\n   nyan.play();\n }"}, {"sha": "7428377b59fc40e53922bee2d6cb8dedab1b0006", "filename": "src/test/run-pass/pub-extern-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,6 +18,6 @@ mod a {\n \n pub fn main() {\n     unsafe {\n-        a::free(transmute(0u));\n+        a::free(transmute(0_usize));\n     }\n }"}, {"sha": "f7adb0f6e444b91a18adedd6e70817a352dfe351", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,43 +14,43 @@\n #![feature(box_syntax)]\n \n fn sums_to(v: Vec<int> , sum: int) -> bool {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let mut sum0 = 0;\n     while i < v.len() {\n         sum0 += v[i];\n-        i += 1u;\n+        i += 1_usize;\n     }\n     return sum0 == sum;\n }\n \n fn sums_to_using_uniq(v: Vec<int> , sum: int) -> bool {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let mut sum0 = box 0;\n     while i < v.len() {\n         *sum0 += v[i];\n-        i += 1u;\n+        i += 1_usize;\n     }\n     return *sum0 == sum;\n }\n \n fn sums_to_using_rec(v: Vec<int> , sum: int) -> bool {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let mut sum0 = F {f: 0};\n     while i < v.len() {\n         sum0.f += v[i];\n-        i += 1u;\n+        i += 1_usize;\n     }\n     return sum0.f == sum;\n }\n \n struct F<T> { f: T }\n \n fn sums_to_using_uniq_rec(v: Vec<int> , sum: int) -> bool {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let mut sum0 = F {f: box 0};\n     while i < v.len() {\n         *sum0.f += v[i];\n-        i += 1u;\n+        i += 1_usize;\n     }\n     return *sum0.f == sum;\n }"}, {"sha": "50b90b1a5ee0b409bc14e5d88b5334333dca47f7", "filename": "src/test/run-pass/range.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,32 +18,32 @@ fn return_full_range() -> ::std::ops::RangeFull { return ..; }\n \n pub fn main() {\n     let mut count = 0;\n-    for i in 0u..10 {\n+    for i in 0_usize..10 {\n         assert!(i >= 0 && i < 10);\n         count += i;\n     }\n     assert!(count == 45);\n \n     let mut count = 0;\n-    let mut range = 0u..10;\n+    let mut range = 0_usize..10;\n     for i in range {\n         assert!(i >= 0 && i < 10);\n         count += i;\n     }\n     assert!(count == 45);\n \n     let mut count = 0;\n-    let mut rf = 3u..;\n+    let mut rf = 3_usize..;\n     for i in rf.take(10) {\n         assert!(i >= 3 && i < 13);\n         count += i;\n     }\n     assert!(count == 75);\n \n-    let _ = 0u..4+4-3;\n+    let _ = 0_usize..4+4-3;\n     let _ = 0..foo();\n \n-    let _ = ..42u;\n+    let _ = ..42_usize;\n \n     // Test we can use two different types with a common supertype.\n     let x = &42;"}, {"sha": "de5b14104c5300da7dd50c8b9f66def1104699d2", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -35,9 +35,9 @@ unsafe fn test_triangle() -> bool {\n     // from pairs of rows (where each pair of rows is equally sized),\n     // and the elements of the triangle match their row-pair index.\n     unsafe fn sanity_check(ascend: &[*mut u8]) {\n-        for i in 0u..COUNT / 2 {\n+        for i in 0_usize..COUNT / 2 {\n             let (p0, p1, size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n-            for j in 0u..size {\n+            for j in 0_usize..size {\n                 assert_eq!(*p0.offset(j as int), i as u8);\n                 assert_eq!(*p1.offset(j as int), i as u8);\n             }\n@@ -88,14 +88,14 @@ unsafe fn test_triangle() -> bool {\n     // that at least two rows will be allocated near each other, so\n     // that we trigger the bug (a buffer overrun) in an observable\n     // way.)\n-    for i in 0u..COUNT / 2 {\n+    for i in 0_usize..COUNT / 2 {\n         let size = idx_to_size(i);\n         ascend[2*i]   = allocate(size, ALIGN);\n         ascend[2*i+1] = allocate(size, ALIGN);\n     }\n \n     // Initialize each pair of rows to distinct value.\n-    for i in 0u..COUNT / 2 {\n+    for i in 0_usize..COUNT / 2 {\n         let (p0, p1, size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n         for j in 0..size {\n             *p0.offset(j as int) = i as u8;\n@@ -109,7 +109,7 @@ unsafe fn test_triangle() -> bool {\n     test_3(ascend); // triangle -> square\n     test_4(ascend); // square -> triangle\n \n-    for i in 0u..COUNT / 2 {\n+    for i in 0_usize..COUNT / 2 {\n         let size = idx_to_size(i);\n         deallocate(ascend[2*i], size, ALIGN);\n         deallocate(ascend[2*i+1], size, ALIGN);\n@@ -123,7 +123,7 @@ unsafe fn test_triangle() -> bool {\n     // rows as we go.\n     unsafe fn test_1(ascend: &mut [*mut u8]) {\n         let new_size = idx_to_size(COUNT-1);\n-        for i in 0u..COUNT / 2 {\n+        for i in 0_usize..COUNT / 2 {\n             let (p0, p1, old_size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n             assert!(old_size < new_size);\n \n@@ -138,7 +138,7 @@ unsafe fn test_triangle() -> bool {\n     // Test 2: turn the square back into a triangle, top to bottom.\n     unsafe fn test_2(ascend: &mut [*mut u8]) {\n         let old_size = idx_to_size(COUNT-1);\n-        for i in 0u..COUNT / 2 {\n+        for i in 0_usize..COUNT / 2 {\n             let (p0, p1, new_size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n             assert!(new_size < old_size);\n \n@@ -153,7 +153,7 @@ unsafe fn test_triangle() -> bool {\n     // Test 3: turn triangle into a square, bottom to top.\n     unsafe fn test_3(ascend: &mut [*mut u8]) {\n         let new_size = idx_to_size(COUNT-1);\n-        for i in (0u..COUNT / 2).rev() {\n+        for i in (0_usize..COUNT / 2).rev() {\n             let (p0, p1, old_size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n             assert!(old_size < new_size);\n \n@@ -168,7 +168,7 @@ unsafe fn test_triangle() -> bool {\n     // Test 4: turn the square back into a triangle, bottom to top.\n     unsafe fn test_4(ascend: &mut [*mut u8]) {\n         let old_size = idx_to_size(COUNT-1);\n-        for i in (0u..COUNT / 2).rev() {\n+        for i in (0_usize..COUNT / 2).rev() {\n             let (p0, p1, new_size) = (ascend[2*i], ascend[2*i+1], idx_to_size(i));\n             assert!(new_size < old_size);\n "}, {"sha": "51b800bc9f01f2e101e541ad090d2a9478409d83", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -38,14 +38,14 @@ struct Outer {\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n mod m {\n-    pub fn align() -> uint { 4u }\n-    pub fn size() -> uint { 8u }\n+    pub fn align() -> uint { 4_usize }\n+    pub fn size() -> uint { 8_usize }\n }\n \n #[cfg(target_arch = \"x86_64\")]\n mod m {\n-    pub fn align() -> uint { 4u }\n-    pub fn size() -> uint { 8u }\n+    pub fn align() -> uint { 4_usize }\n+    pub fn size() -> uint { 8_usize }\n }\n \n pub fn main() {"}, {"sha": "cf23a1a0f25b29bba539818075ae1b2596d9279c", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -44,38 +44,38 @@ struct Outer {\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {\n-        pub fn align() -> uint { 4u }\n-        pub fn size() -> uint { 12u }\n+        pub fn align() -> uint { 4_usize }\n+        pub fn size() -> uint { 12_usize }\n     }\n \n     #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub mod m {\n-        pub fn align() -> uint { 8u }\n-        pub fn size() -> uint { 16u }\n+        pub fn align() -> uint { 8_usize }\n+        pub fn size() -> uint { 16_usize }\n     }\n }\n \n #[cfg(target_os = \"windows\")]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {\n-        pub fn align() -> uint { 8u }\n-        pub fn size() -> uint { 16u }\n+        pub fn align() -> uint { 8_usize }\n+        pub fn size() -> uint { 16_usize }\n     }\n \n     #[cfg(target_arch = \"x86_64\")]\n     pub mod m {\n-        pub fn align() -> uint { 8u }\n-        pub fn size() -> uint { 16u }\n+        pub fn align() -> uint { 8_usize }\n+        pub fn size() -> uint { 16_usize }\n     }\n }\n \n #[cfg(target_os = \"android\")]\n mod m {\n     #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub mod m {\n-        pub fn align() -> uint { 8u }\n-        pub fn size() -> uint { 16u }\n+        pub fn align() -> uint { 8_usize }\n+        pub fn size() -> uint { 16_usize }\n     }\n }\n "}, {"sha": "282a24a407c95d2252f5fdfae96115d9eb47d7de", "filename": "src/test/run-pass/record-pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,6 +20,6 @@ fn m(input: t3) -> int {\n }\n \n pub fn main() {\n-    assert_eq!(m(t3::c(T2 {x: t1::a(10), y: 5}, 4u)), 10);\n-    assert_eq!(m(t3::c(T2 {x: t1::b(10u), y: 5}, 4u)), 19);\n+    assert_eq!(m(t3::c(T2 {x: t1::a(10), y: 5}, 4_usize)), 10);\n+    assert_eq!(m(t3::c(T2 {x: t1::b(10_usize), y: 5}, 4_usize)), 19);\n }"}, {"sha": "89779fa4d2d46283df19b5420768fa98ebaa617b", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,8 +16,8 @@ fn foo(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let p = box 22u;\n+    let p = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n-    assert_eq!(r, 22u);\n+    assert_eq!(r, 22_usize);\n }"}, {"sha": "a1af7159a93d99235a5927b467d75e16e222b4ed", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ fn foo(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let p = box 3u;\n+    let p = box 3_usize;\n     let r = foo(&*p);\n-    assert_eq!(r, 3u);\n+    assert_eq!(r, 3_usize);\n }"}, {"sha": "b15f9d34859932fb4af53a03fbe10081c3cdb274", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,6 +15,6 @@ fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n-    let p = box 3u;\n+    let p = box 3_usize;\n     assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "9f1a383fd64b869880d6cf2ccad55c73f618e506", "filename": "src/test/run-pass/regions-infer-borrow-scope-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -13,7 +13,7 @@ use std::mem::swap;\n pub fn main() {\n     let mut x = 4;\n \n-    for i in 0u..3 {\n+    for i in 0_usize..3 {\n         // ensure that the borrow in this alt\n         // does not interfere with the swap\n         // below.  note that it would it you"}, {"sha": "c71953e20f8af12bd0f3ba4337367c44958431b7", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,6 +21,6 @@ fn parameterized(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let x = 3u;\n-    assert_eq!(parameterized(&x), 3u);\n+    let x = 3_usize;\n+    assert_eq!(parameterized(&x), 3_usize);\n }"}, {"sha": "10c9aef7c3b1e2101bd51776f650c0fdf29827e4", "filename": "src/test/run-pass/regions-refcell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fregions-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-refcell.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,15 +18,15 @@ use std::cell::RefCell;\n // This version does not yet work (associated type issues)...\n #[cfg(cannot_use_this_yet)]\n fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n-    let one = [1u];\n+    let one = [1_usize];\n     assert_eq!(map.borrow().get(\"one\"), Some(&one[]));\n }\n \n #[cfg(cannot_use_this_yet_either)]\n // ... and this version does not work (the lifetime of `one` is\n // supposed to match the lifetime `'a`) ...\n fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n-    let one = [1u];\n+    let one = [1_usize];\n     assert_eq!(map.borrow().get(\"one\"), Some(&one.as_slice()));\n }\n "}, {"sha": "a21b5aa1dab6c5795b4e82c2e75d2076ccba7a27", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -34,15 +34,15 @@ fn rename_directory() {\n         let fromp = CString::from_slice(test_file.as_vec());\n         let modebuf = CString::from_slice(b\"w+b\");\n         let ostream = libc::fopen(fromp.as_ptr(), modebuf.as_ptr());\n-        assert!((ostream as uint != 0u));\n+        assert!((ostream as uint != 0_usize));\n         let s = \"hello\".to_string();\n         let buf = CString::from_slice(b\"hello\");\n         let write_len = libc::fwrite(buf.as_ptr() as *mut _,\n-                                     1u as libc::size_t,\n-                                     (s.len() + 1u) as libc::size_t,\n+                                     1_usize as libc::size_t,\n+                                     (s.len() + 1_usize) as libc::size_t,\n                                      ostream);\n         assert_eq!(write_len, (s.len() + 1) as libc::size_t);\n-        assert_eq!(libc::fclose(ostream), (0u as libc::c_int));\n+        assert_eq!(libc::fclose(ostream), (0_usize as libc::c_int));\n \n         let new_path = tmpdir.join_many(&[\"quux\", \"blat\"]);\n         fs::mkdir_recursive(&new_path, old_io::USER_RWX);"}, {"sha": "74227192cabbefae06eb916fbcc1e002f37934ca", "filename": "src/test/run-pass/ret-bang.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fret-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fret-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-bang.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -14,11 +14,11 @@\n fn my_err(s: String) -> ! { println!(\"{}\", s); panic!(); }\n \n fn okay(i: uint) -> int {\n-    if i == 3u {\n+    if i == 3_usize {\n         my_err(\"I don't like three\".to_string());\n     } else {\n         return 42;\n     }\n }\n \n-pub fn main() { okay(4u); }\n+pub fn main() { okay(4_usize); }"}, {"sha": "18519573c26a6ea6ddb08c801559ec82f968293d", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,10 +10,10 @@\n \n \n fn test<F>(f: F) -> uint where F: FnOnce(uint) -> uint {\n-    return f(22u);\n+    return f(22_usize);\n }\n \n pub fn main() {\n-    let y = test(|x| 4u * x);\n-    assert_eq!(y, 88u);\n+    let y = test(|x| 4_usize * x);\n+    assert_eq!(y, 88_usize);\n }"}, {"sha": "918da535099272fdb43e703393301ddb1d32f7c9", "filename": "src/test/run-pass/shift.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fshift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fshift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -54,28 +54,28 @@ fn test_expr() {\n }\n \n fn test_const() {\n-    static r1_1: uint = 10u >> 2u;\n-    static r2_1: uint = 10u << 4u;\n+    static r1_1: uint = 10_usize >> 2_usize;\n+    static r2_1: uint = 10_usize << 4_usize;\n     assert_eq!(r1_1, 2 as uint);\n     assert_eq!(r2_1, 160 as uint);\n \n-    static r1_2: u8 = 10u8 >> 2u;\n-    static r2_2: u8 = 10u8 << 4u;\n+    static r1_2: u8 = 10u8 >> 2_usize;\n+    static r2_2: u8 = 10u8 << 4_usize;\n     assert_eq!(r1_2, 2 as u8);\n     assert_eq!(r2_2, 160 as u8);\n \n-    static r1_3: int = 10 >> 2u;\n-    static r2_3: int = 10 << 4u;\n+    static r1_3: int = 10 >> 2_usize;\n+    static r2_3: int = 10 << 4_usize;\n     assert_eq!(r1_3, 2 as int);\n     assert_eq!(r2_3, 160 as int);\n \n-    static r1_4: i8 = 10i8 >> 2u;\n-    static r2_4: i8 = 10i8 << 4u;\n+    static r1_4: i8 = 10i8 >> 2_usize;\n+    static r2_4: i8 = 10i8 << 4_usize;\n     assert_eq!(r1_4, 2 as i8);\n     assert_eq!(r2_4, 160 as i8);\n \n-    static r1_5: uint = 10u >> 2u;\n-    static r2_5: uint = 10u << 4u;\n+    static r1_5: uint = 10_usize >> 2_usize;\n+    static r2_5: uint = 10_usize << 4_usize;\n     assert_eq!(r1_5, 2 as uint);\n     assert_eq!(r2_5, 160 as uint);\n }"}, {"sha": "2acb93f48f92619fc1c78e519e54207c5a48cbf4", "filename": "src/test/run-pass/signed-shift-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsigned-shift-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsigned-shift-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigned-shift-const-eval.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum test { thing = -5 >> 1u }\n+enum test { thing = -5 >> 1_usize }\n pub fn main() {\n     assert_eq!(test::thing as int, -3);\n }"}, {"sha": "87d7376c243bcd6fa0fcdd0ea099d55b54f32ffb", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n             Err(..) => unreachable!(),\n             Ok(f) => {\n                 let mut f = f;\n-                for _ in 0u..1000 {\n+                for _ in 0_usize..1000 {\n                     f.write(&[0]);\n                 }\n             }"}, {"sha": "b66999c8e67229083cb4a52328a701f7b317ea9b", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -34,8 +34,8 @@ impl uint_utils for uint {\n         self.to_string()\n     }\n     fn multi<F>(&self, mut f: F) where F: FnMut(uint) {\n-        let mut c = 0u;\n-        while c < *self { f(c); c += 1u; }\n+        let mut c = 0_usize;\n+        while c < *self { f(c); c += 1_usize; }\n     }\n }\n \n@@ -58,15 +58,15 @@ impl<T> vec_utils<T> for Vec<T> {\n }\n \n pub fn main() {\n-    assert_eq!(10u.plus(), 30);\n+    assert_eq!(10_usize.plus(), 30);\n     assert_eq!((\"hi\".to_string()).plus(), 200);\n \n     assert_eq!((vec!(1)).length_().str(), \"1\".to_string());\n     let vect = vec!(3, 4).map_(|a| *a + 4);\n     assert_eq!(vect[0], 7);\n-    let vect = (vec!(3, 4)).map_::<uint, _>(|a| *a as uint + 4u);\n-    assert_eq!(vect[0], 7u);\n-    let mut x = 0u;\n-    10u.multi(|_n| x += 2u );\n-    assert_eq!(x, 20u);\n+    let vect = (vec!(3, 4)).map_::<uint, _>(|a| *a as uint + 4_usize);\n+    assert_eq!(vect[0], 7_usize);\n+    let mut x = 0_usize;\n+    10_usize.multi(|_n| x += 2_usize );\n+    assert_eq!(x, 20_usize);\n }"}, {"sha": "5f6dc4f2a536285ba445671b3e5576d6214dbc87", "filename": "src/test/run-pass/static-methods-in-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ mod a {\n \n     impl Foo for uint {\n         fn foo() -> uint {\n-            5u\n+            5_usize\n         }\n     }\n }"}, {"sha": "359c14ea7b0c0d45ec129a7dff4c3e913a026998", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -12,12 +12,12 @@ pub fn main() {\n     // Make sure we properly handle repeated self-appends.\n     let mut a: String = \"A\".to_string();\n     let mut i = 20;\n-    let mut expected_len = 1u;\n+    let mut expected_len = 1_usize;\n     while i > 0 {\n         println!(\"{}\", a.len());\n         assert_eq!(a.len(), expected_len);\n         a = format!(\"{}{}\", a, a);\n         i -= 1;\n-        expected_len *= 2u;\n+        expected_len *= 2_usize;\n     }\n }"}, {"sha": "3fffef060a1b4514841ddc1261bfb4432765e6ce", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -11,7 +11,7 @@\n extern crate libc;\n \n pub fn main() {\n-  let f = 1u as *const libc::FILE;\n+  let f = 1_usize as *const libc::FILE;\n   println!(\"{:?}\", f as int);\n   println!(\"{:?}\", f as uint);\n   println!(\"{:?}\", f as i8);\n@@ -37,19 +37,19 @@ pub fn main() {\n   println!(\"{:?}\", 1 as f32);\n   println!(\"{:?}\", 1 as f64);\n \n-  println!(\"{:?}\", 1u as int);\n-  println!(\"{:?}\", 1u as uint);\n-  println!(\"{:?}\", 1u as *const libc::FILE);\n-  println!(\"{:?}\", 1u as i8);\n-  println!(\"{:?}\", 1u as i16);\n-  println!(\"{:?}\", 1u as i32);\n-  println!(\"{:?}\", 1u as i64);\n-  println!(\"{:?}\", 1u as u8);\n-  println!(\"{:?}\", 1u as u16);\n-  println!(\"{:?}\", 1u as u32);\n-  println!(\"{:?}\", 1u as u64);\n-  println!(\"{:?}\", 1u as f32);\n-  println!(\"{:?}\", 1u as f64);\n+  println!(\"{:?}\", 1_usize as int);\n+  println!(\"{:?}\", 1_usize as uint);\n+  println!(\"{:?}\", 1_usize as *const libc::FILE);\n+  println!(\"{:?}\", 1_usize as i8);\n+  println!(\"{:?}\", 1_usize as i16);\n+  println!(\"{:?}\", 1_usize as i32);\n+  println!(\"{:?}\", 1_usize as i64);\n+  println!(\"{:?}\", 1_usize as u8);\n+  println!(\"{:?}\", 1_usize as u16);\n+  println!(\"{:?}\", 1_usize as u32);\n+  println!(\"{:?}\", 1_usize as u64);\n+  println!(\"{:?}\", 1_usize as f32);\n+  println!(\"{:?}\", 1_usize as f64);\n \n   println!(\"{:?}\", 1i8 as int);\n   println!(\"{:?}\", 1i8 as uint);"}, {"sha": "dea7f99fcbace35c6da7c123fb882f683c0583db", "filename": "src/test/run-pass/syntax-extension-source-utils-files/includeme.fragment", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -2,6 +2,6 @@\n \n {\n     assert!(file!().ends_with(\"includeme.fragment\"));\n-    assert!(line!() == 5u);\n+    assert!(line!() == 5_usize);\n     format!(\"victory robot {}\", line!())\n }"}, {"sha": "b7fe4983b01b4289ac535efae9ada0e8f4499516", "filename": "src/test/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,7 +28,7 @@ fn mk_rec() -> Rec {\n \n fn is_8_byte_aligned(u: &Tag<u64>) -> bool {\n     let p: uint = unsafe { mem::transmute(u) };\n-    return (p & 7u) == 0u;\n+    return (p & 7_usize) == 0_usize;\n }\n \n pub fn main() {"}, {"sha": "cb298e720ed825211244db994021c6331b6ff72a", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -31,7 +31,7 @@ fn mk_rec<A,B>(a: A, b: B) -> Rec<A,B> {\n \n fn is_aligned<A>(amnt: uint, u: &A) -> bool {\n     let p: uint = unsafe { mem::transmute(u) };\n-    return (p & (amnt-1u)) == 0u;\n+    return (p & (amnt-1_usize)) == 0_usize;\n }\n \n fn variant_data_is_aligned<A,B>(amnt: uint, u: &Tag<A,B>) -> bool {\n@@ -43,32 +43,32 @@ fn variant_data_is_aligned<A,B>(amnt: uint, u: &Tag<A,B>) -> bool {\n \n pub fn main() {\n     let x = mk_rec(22u64, 23u64);\n-    assert!(is_aligned(8u, &x.tA));\n-    assert!(variant_data_is_aligned(8u, &x.tA));\n-    assert!(is_aligned(8u, &x.tB));\n-    assert!(variant_data_is_aligned(8u, &x.tB));\n+    assert!(is_aligned(8_usize, &x.tA));\n+    assert!(variant_data_is_aligned(8_usize, &x.tA));\n+    assert!(is_aligned(8_usize, &x.tB));\n+    assert!(variant_data_is_aligned(8_usize, &x.tB));\n \n     let x = mk_rec(22u64, 23u32);\n-    assert!(is_aligned(8u, &x.tA));\n-    assert!(variant_data_is_aligned(8u, &x.tA));\n-    assert!(is_aligned(8u, &x.tB));\n-    assert!(variant_data_is_aligned(4u, &x.tB));\n+    assert!(is_aligned(8_usize, &x.tA));\n+    assert!(variant_data_is_aligned(8_usize, &x.tA));\n+    assert!(is_aligned(8_usize, &x.tB));\n+    assert!(variant_data_is_aligned(4_usize, &x.tB));\n \n     let x = mk_rec(22u32, 23u64);\n-    assert!(is_aligned(8u, &x.tA));\n-    assert!(variant_data_is_aligned(4u, &x.tA));\n-    assert!(is_aligned(8u, &x.tB));\n-    assert!(variant_data_is_aligned(8u, &x.tB));\n+    assert!(is_aligned(8_usize, &x.tA));\n+    assert!(variant_data_is_aligned(4_usize, &x.tA));\n+    assert!(is_aligned(8_usize, &x.tB));\n+    assert!(variant_data_is_aligned(8_usize, &x.tB));\n \n     let x = mk_rec(22u32, 23u32);\n-    assert!(is_aligned(4u, &x.tA));\n-    assert!(variant_data_is_aligned(4u, &x.tA));\n-    assert!(is_aligned(4u, &x.tB));\n-    assert!(variant_data_is_aligned(4u, &x.tB));\n+    assert!(is_aligned(4_usize, &x.tA));\n+    assert!(variant_data_is_aligned(4_usize, &x.tA));\n+    assert!(is_aligned(4_usize, &x.tB));\n+    assert!(variant_data_is_aligned(4_usize, &x.tB));\n \n     let x = mk_rec(22f64, 23f64);\n-    assert!(is_aligned(8u, &x.tA));\n-    assert!(variant_data_is_aligned(8u, &x.tA));\n-    assert!(is_aligned(8u, &x.tB));\n-    assert!(variant_data_is_aligned(8u, &x.tB));\n+    assert!(is_aligned(8_usize, &x.tA));\n+    assert!(variant_data_is_aligned(8_usize, &x.tA));\n+    assert!(is_aligned(8_usize, &x.tB));\n+    assert!(variant_data_is_aligned(8_usize, &x.tB));\n }"}, {"sha": "713f55cc10c0ad08497120bab0341ee26503cf54", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,7 +28,7 @@ fn mk_rec() -> Rec {\n \n fn is_8_byte_aligned(u: &Tag) -> bool {\n     let p: uint = unsafe { mem::transmute(u) };\n-    return (p & 7u) == 0u;\n+    return (p & 7_usize) == 0_usize;\n }\n \n pub fn main() {"}, {"sha": "08dce2a76489b7df79c876e4851ff50835d8e046", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,7 +21,7 @@ fn test00() {\n     });\n \n     // Sleep long enough for the task to finish.\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     while i < 10000 {\n         Thread::yield_now();\n         i += 1;"}, {"sha": "d1a3edcfbc52931cb341ed9bf6c2dc0fae0429ec", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -41,7 +41,7 @@ fn eventual_timeout() {\n     rx1.recv().unwrap();\n \n     let mut v = Vec::new();\n-    for _ in 0u..10000 {\n+    for _ in 0_usize..10000 {\n         match TcpStream::connect_timeout(addr, Duration::milliseconds(100)) {\n             Ok(e) => v.push(e),\n             Err(ref e) if e.kind == old_io::TimedOut => return,"}, {"sha": "82584c83de059da98438d880ca4f08924b182502", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -52,7 +52,7 @@ fn main() {\n     let addr = rx.recv().unwrap();\n \n     let (tx, rx) = channel();\n-    for _ in 0u..1000 {\n+    for _ in 0_usize..1000 {\n         let tx = tx.clone();\n         Builder::new().stack_size(64 * 1024).spawn(move|| {\n             match TcpStream::connect(addr) {\n@@ -71,7 +71,7 @@ fn main() {\n     // Wait for all clients to exit, but don't wait for the server to exit. The\n     // server just runs infinitely.\n     drop(tx);\n-    for _ in 0u..1000 {\n+    for _ in 0_usize..1000 {\n         rx.recv().unwrap();\n     }\n     unsafe { libc::exit(0) }"}, {"sha": "3efe2507470d9dfc53d4c5d10a33d21bd662b950", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,6 +20,6 @@ fn f<T, V: A<T>>(i: V, j: uint) -> uint {\n }\n \n pub fn main () {\n-    assert_eq!(f::<f64, int>(0, 2u), 2u);\n-    assert_eq!(f::<uint, int>(0, 2u), 2u);\n+    assert_eq!(f::<f64, int>(0, 2_usize), 2_usize);\n+    assert_eq!(f::<uint, int>(0, 2_usize), 2_usize);\n }"}, {"sha": "cf8a09998daa01b6148fc0aafade82e0b17dab95", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,11 +16,11 @@ struct S<T> {\n \n fn range_<F>(lo: uint, hi: uint, mut it: F) where F: FnMut(uint) {\n     let mut lo_ = lo;\n-    while lo_ < hi { it(lo_); lo_ += 1u; }\n+    while lo_ < hi { it(lo_); lo_ += 1_usize; }\n }\n \n fn create_index<T>(_index: Vec<S<T>> , _hash_fn: extern fn(T) -> uint) {\n-    range_(0u, 256u, |_i| {\n+    range_(0_usize, 256_usize, |_i| {\n         let _bucket: Vec<T> = Vec::new();\n     })\n }"}, {"sha": "48dc944382171395ff9ccfcb36b37eec4a564b31", "filename": "src/test/run-pass/typeck_type_placeholder_1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -21,17 +21,17 @@ static CONSTEXPR: TestStruct = TestStruct{x: &413 as *const _};\n \n \n pub fn main() {\n-    let x: Vec<_> = (0u..5).collect();\n+    let x: Vec<_> = (0_usize..5).collect();\n     let expected: &[uint] = &[0,1,2,3,4];\n     assert_eq!(x, expected);\n \n-    let x = (0u..5).collect::<Vec<_>>();\n+    let x = (0_usize..5).collect::<Vec<_>>();\n     assert_eq!(x, expected);\n \n     let y: _ = \"hello\";\n     assert_eq!(y.len(), 5);\n \n-    let ptr = &5u;\n+    let ptr = &5_usize;\n     let ptr2 = ptr as *const _;\n \n     assert_eq!(ptr as *const uint as uint, ptr2 as uint);"}, {"sha": "178865897e5a9c9e940eea13f5c17481879a8310", "filename": "src/test/run-pass/unboxed-closures-by-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -25,8 +25,8 @@ fn call_fn_once<F: FnOnce()>(f: F) {\n }\n \n fn main() {\n-    let mut x = 0u;\n-    let y = 2u;\n+    let mut x = 0_usize;\n+    let y = 2_usize;\n \n     call_fn(|| assert_eq!(x, 0));\n     call_fn_mut(|| x += y);"}, {"sha": "96d75592627bec6e41e67f1a66dbd91a6cb36840", "filename": "src/test/run-pass/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-cross-crate.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -15,6 +15,6 @@\n extern crate \"unboxed-closures-cross-crate\" as ubcc;\n \n fn main() {\n-    assert_eq!(ubcc::has_closures(), 2u);\n-    assert_eq!(ubcc::has_generic_closures(2u, 3u), 5u);\n+    assert_eq!(ubcc::has_closures(), 2_usize);\n+    assert_eq!(ubcc::has_generic_closures(2_usize, 3_usize), 5_usize);\n }"}, {"sha": "36c8400be7879dc1291fe1fdbea45a435555e8e5", "filename": "src/test/run-pass/unboxed-closures-infer-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,8 +28,8 @@ fn call_fn_once<F: FnOnce()>(f: F) {\n }\n \n fn main() {\n-    let mut x = 0u;\n-    let y = 2u;\n+    let mut x = 0_usize;\n+    let y = 2_usize;\n \n     call_fn(|| assert_eq!(x, 0));\n     call_fn_mut(|| x += y);"}, {"sha": "069e93b86baaa7352b00d456dfae9f6438b63027", "filename": "src/test/run-pass/unboxed-closures-move-mutable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,19 +20,19 @@ fn set(x: &mut uint) { *x = 42; }\n \n fn main() {\n     {\n-        let mut x = 0u;\n+        let mut x = 0_usize;\n         move || x += 1;\n     }\n     {\n-        let mut x = 0u;\n+        let mut x = 0_usize;\n         move || x += 1;\n     }\n     {\n-        let mut x = 0u;\n+        let mut x = 0_usize;\n         move || set(&mut x);\n     }\n     {\n-        let mut x = 0u;\n+        let mut x = 0_usize;\n         move || set(&mut x);\n     }\n }"}, {"sha": "5c36832d9f67f50557abd1d0034578bd224e9d8f", "filename": "src/test/run-pass/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -28,8 +28,8 @@ pub fn replace_map<'a, T, F>(src: &mut T, prod: F) where F: FnOnce(T) -> T {\n }\n \n pub fn main() {\n-    let mut a = 7u;\n+    let mut a = 7_usize;\n     let b = &mut a;\n     replace_map(b, |x: uint| x * 2);\n-    assert_eq!(*b, 14u);\n+    assert_eq!(*b, 14_usize);\n }"}, {"sha": "1a65f685a5e82cb803c1a3a53a2195a8511ba955", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -16,7 +16,7 @@ use std::mem;\n \n fn null<T>() -> *const T {\n     unsafe {\n-        mem::transmute(0u)\n+        mem::transmute(0_usize)\n     }\n }\n "}, {"sha": "5db96bc3564f56d39f6bdfcb4c90cb7573640e74", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,7 +17,7 @@ struct Foo {a: int, b: uint}\n enum bar { u(Box<Foo>), w(int), }\n \n pub fn main() {\n-    assert!(match bar::u(box Foo{a: 10, b: 40u}) {\n+    assert!(match bar::u(box Foo{a: 10, b: 40_usize}) {\n               bar::u(box Foo{a: a, b: b}) => { a + (b as int) }\n               _ => { 66 }\n             } == 50);"}, {"sha": "43824812ec546c44a6f90c6adf8f8f5d19d475f0", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -20,18 +20,18 @@ fn child(tx: &Sender<Box<uint>>, i: uint) {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let n = 100u;\n-    let mut expected = 0u;\n-    let _t = (0u..n).map(|i| {\n+    let n = 100_usize;\n+    let mut expected = 0_usize;\n+    let _t = (0_usize..n).map(|i| {\n         expected += i;\n         let tx = tx.clone();\n         thread::spawn(move|| {\n             child(&tx, i)\n         })\n     }).collect::<Vec<_>>();\n \n-    let mut actual = 0u;\n-    for _ in 0u..n {\n+    let mut actual = 0_usize;\n+    for _ in 0_usize..n {\n         let j = rx.recv().unwrap();\n         actual += *j;\n     }"}, {"sha": "84f605eef57001f1a1a60b268e5f2781a5e420f9", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -18,12 +18,12 @@ pub fn main() {\n     let s: String = chs.iter().cloned().collect();\n     let schs: Vec<char> = s.chars().collect();\n \n-    assert!(s.len() == 10u);\n-    assert!(s.chars().count() == 4u);\n-    assert!(schs.len() == 4u);\n+    assert!(s.len() == 10_usize);\n+    assert!(s.chars().count() == 4_usize);\n+    assert!(schs.len() == 4_usize);\n     assert!(schs.iter().cloned().collect::<String>() == s);\n-    assert!(s.char_at(0u) == 'e');\n-    assert!(s.char_at(1u) == '\u00e9');\n+    assert!(s.char_at(0_usize) == 'e');\n+    assert!(s.char_at(1_usize) == '\u00e9');\n \n     assert!((str::from_utf8(s.as_bytes()).is_ok()));\n     // invalid prefix"}, {"sha": "beb2f4d996910b9fcbe55613e087888e42627e0f", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -30,7 +30,7 @@ fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8() -> int\n     let \u5348\u9910 = 10;\n \n     let \u05d0\u05e8\u05d5\u05d7\u05ea_\u05e6\u05d4\u05e8\u05d9\u05d9 = 10;\n-    let \u063a\u062f\u0627\u0621 = 10u;\n+    let \u063a\u062f\u0627\u0621 = 10_usize;\n     let \u056c\u0561\u0576\u0579 = 10;\n     let \u043e\u0431\u0435\u0434 = 10;\n     let \u0430\u0431\u0435\u0434 = 10;"}, {"sha": "015baea5fb5fe5f71a19a45a4e7b1907c844f889", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -17,11 +17,11 @@ pub fn main() {\n     assert_eq!(x[2], 3);\n     assert_eq!(x[3], 4);\n \n-    assert_eq!(size_of::<[u8; 4]>(), 4u);\n+    assert_eq!(size_of::<[u8; 4]>(), 4_usize);\n \n     // FIXME #10183\n     // FIXME #18069\n     //if cfg!(target_pointer_width = \"64\") {\n-    //    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1u << 32));\n+    //    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1_usize << 32));\n     //}\n }"}, {"sha": "08d39e58b7ce292c2b849b8c809a226a470dfc00", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -67,7 +67,7 @@ pub fn main() {\n \n             // work out the total number of comparisons required to sort\n             // this array...\n-            let mut count = 0us;\n+            let mut count = 0_usize;\n             main.clone().sort_by(|a, b| { count += 1; a.cmp(b) });\n \n             // ... and then panic on each and every single one."}, {"sha": "baea1b8826a470214fcae45cadfac80ae7e217b3", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -65,7 +65,7 @@ fn canttouchthis() -> uint {\n     fn p() -> bool { true }\n     let _a = (assert!((true)) == (assert!(p())));\n     let _c = (assert!((p())) == ());\n-    let _b: bool = (println!(\"{}\", 0) == (return 0u));\n+    let _b: bool = (println!(\"{}\", 0) == (return 0_usize));\n }\n \n fn angrydome() {"}, {"sha": "8239afb3594d6289ff9f0c292098b58e9f5e0171", "filename": "src/test/run-pass/while-flow-graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fwhile-flow-graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fwhile-flow-graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-flow-graph.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { let x: int = 10; while x == 10 && x == 11 { let _y = 0xf00u; } }\n+pub fn main() { let x: int = 10; while x == 10 && x == 11 { let _y = 0xf00_usize; } }"}, {"sha": "5dd0a5522c639b4feee382f758cd4f0ed1bcfcd3", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -22,7 +22,7 @@ mod kernel32 {\n #[cfg(windows)]\n pub fn main() {\n     unsafe {\n-        let expected = 1234u;\n+        let expected = 1234_usize;\n         kernel32::SetLastError(expected);\n         let actual = kernel32::GetLastError();\n         println!(\"actual = {}\", actual);"}, {"sha": "86c1ae0f51fd9c51ee0350d24cf010024b03b214", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72eb214ee473e7fbb8fb27ba10d6e43d02bb633b/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=72eb214ee473e7fbb8fb27ba10d6e43d02bb633b", "patch": "@@ -31,7 +31,7 @@ mod kernel32 {\n pub fn main() {\n     let heap = unsafe { kernel32::GetProcessHeap() };\n     let mem = unsafe { kernel32::HeapAlloc(heap, 0u32, 100u32) };\n-    assert!(mem != 0u);\n+    assert!(mem != 0_usize);\n     let res = unsafe { kernel32::HeapFree(heap, 0u32, mem) };\n     assert!(res != 0u8);\n }"}]}