{"sha": "a15df94b69e6b93334819d382479a43e07471071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNWRmOTRiNjllNmI5MzMzNDgxOWQzODI0NzlhNDNlMDc0NzEwNzE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-25T19:16:27Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-25T19:16:27Z"}, "message": "Turn ICE on type arguments on variables into an error", "tree": {"sha": "04a9a9780a639ca035411fc15b46c6280f3b2e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a9a9780a639ca035411fc15b46c6280f3b2e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15df94b69e6b93334819d382479a43e07471071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15df94b69e6b93334819d382479a43e07471071", "html_url": "https://github.com/rust-lang/rust/commit/a15df94b69e6b93334819d382479a43e07471071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15df94b69e6b93334819d382479a43e07471071/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f5786a324c40b2d8b2d0df98456e48fb45d30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f5786a324c40b2d8b2d0df98456e48fb45d30c", "html_url": "https://github.com/rust-lang/rust/commit/02f5786a324c40b2d8b2d0df98456e48fb45d30c"}], "stats": {"total": 100, "additions": 66, "deletions": 34}, "files": [{"sha": "345d04a848996892165d2213c513e0e2b84ed540", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a15df94b69e6b93334819d382479a43e07471071/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15df94b69e6b93334819d382479a43e07471071/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a15df94b69e6b93334819d382479a43e07471071", "patch": "@@ -5194,7 +5194,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         res: Res,\n         span: Span,\n-    ) -> Result<(DefKind, DefId, Ty<'tcx>), ErrorReported> {\n+    ) -> Result<Res, ErrorReported> {\n         let tcx = self.tcx;\n         if let Res::SelfCtor(impl_def_id) = res {\n             let ty = self.impl_self_ty(span, impl_def_id).ty;\n@@ -5204,11 +5204,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Some(adt_def) if adt_def.has_ctor() => {\n                     let variant = adt_def.non_enum_variant();\n                     let ctor_def_id = variant.ctor_def_id.unwrap();\n-                    Ok((\n-                        DefKind::Ctor(CtorOf::Struct, variant.ctor_kind),\n-                        ctor_def_id,\n-                        tcx.type_of(ctor_def_id),\n-                    ))\n+                    Ok(Res::Def(DefKind::Ctor(CtorOf::Struct, variant.ctor_kind), ctor_def_id))\n                 }\n                 _ => {\n                     let mut err = tcx.sess.struct_span_err(span,\n@@ -5235,15 +5231,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n         } else {\n-            match res {\n-                Res::Def(kind, def_id) => {\n-                    // The things we are substituting into the type should not contain\n-                    // escaping late-bound regions, and nor should the base type scheme.\n-                    let ty = tcx.type_of(def_id);\n-                    Ok((kind, def_id, ty))\n-                }\n-                _ => span_bug!(span, \"unexpected res in rewrite_self_ctor: {:?}\", res),\n-            }\n+            Ok(res)\n         }\n     }\n \n@@ -5266,27 +5254,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let tcx = self.tcx;\n \n-        match res {\n-            Res::Local(hid) | Res::Upvar(hid, ..) => {\n-                let ty = self.local_ty(span, hid).decl_ty;\n-                let ty = self.normalize_associated_types_in(span, &ty);\n-                self.write_ty(hir_id, ty);\n-                return (ty, res);\n-            }\n-            _ => {}\n-        }\n-\n-        let (kind, def_id, ty) = match self.rewrite_self_ctor(res, span) {\n-            Ok(result) => result,\n+        let res = match self.rewrite_self_ctor(res, span) {\n+            Ok(res) => res,\n             Err(ErrorReported) => return (tcx.types.err, res),\n         };\n-        let path_segs =\n-            AstConv::def_ids_for_value_path_segments(self, segments, self_ty, kind, def_id);\n+        let path_segs = match res {\n+            Res::Local(_) | Res::Upvar(..) => Vec::new(),\n+            Res::Def(kind, def_id) =>\n+                AstConv::def_ids_for_value_path_segments(self, segments, self_ty, kind, def_id),\n+            _ => bug!(\"instantiate_value_path on {:?}\", res),\n+        };\n \n         let mut user_self_ty = None;\n         let mut is_alias_variant_ctor = false;\n-        match kind {\n-            DefKind::Ctor(CtorOf::Variant, _) => {\n+        match res {\n+            Res::Def(DefKind::Ctor(CtorOf::Variant, _), _) => {\n                 if let Some(self_ty) = self_ty {\n                     let adt_def = self_ty.ty_adt_def().unwrap();\n                     user_self_ty = Some(UserSelfTy {\n@@ -5296,8 +5278,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     is_alias_variant_ctor = true;\n                 }\n             }\n-            DefKind::Method\n-            | DefKind::AssociatedConst => {\n+            Res::Def(DefKind::Method, def_id)\n+            | Res::Def(DefKind::AssociatedConst, def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {\n@@ -5337,6 +5319,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 None\n             }\n         }));\n+\n+        match res {\n+            Res::Local(hid) | Res::Upvar(hid, ..) => {\n+                let ty = self.local_ty(span, hid).decl_ty;\n+                let ty = self.normalize_associated_types_in(span, &ty);\n+                self.write_ty(hir_id, ty);\n+                return (ty, res);\n+            }\n+            _ => {}\n+        }\n+\n         if generics_has_err {\n             // Don't try to infer type parameters when prohibited generic arguments were given.\n             user_self_ty = None;\n@@ -5374,6 +5367,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             tcx.generics_of(*def_id).has_self\n         }).unwrap_or(false);\n \n+        let def_id = res.def_id();\n+\n+        // The things we are substituting into the type should not contain\n+        // escaping late-bound regions, and nor should the base type scheme.\n+        let ty = tcx.type_of(def_id);\n+\n         let substs = AstConv::create_substs_for_generic_args(\n             tcx,\n             def_id,\n@@ -5490,7 +5489,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                ty_substituted);\n         self.write_substs(hir_id, substs);\n \n-        (ty_substituted, Res::Def(kind, def_id))\n+        (ty_substituted, res)\n     }\n \n     fn check_rustc_args_require_const(&self,"}, {"sha": "930e98bedce8a08b53399f3c4c72c5d0ab3ce2a2", "filename": "src/test/ui/issues/issue-60989.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a15df94b69e6b93334819d382479a43e07471071/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15df94b69e6b93334819d382479a43e07471071/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs?ref=a15df94b69e6b93334819d382479a43e07471071", "patch": "@@ -0,0 +1,18 @@\n+struct A {}\n+struct B {}\n+\n+impl From<A> for B {\n+    fn from(a: A) -> B {\n+        B{}\n+    }\n+}\n+\n+fn main() {\n+    let c1 = ();\n+    c1::<()>;\n+    //~^ ERROR type arguments are not allowed for this type\n+\n+    let c1 = A {};\n+    c1::<Into<B>>;\n+    //~^ ERROR type arguments are not allowed for this type\n+}"}, {"sha": "55a0b9626df752c0ba561e42d2f6d6179c564d04", "filename": "src/test/ui/issues/issue-60989.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a15df94b69e6b93334819d382479a43e07471071/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a15df94b69e6b93334819d382479a43e07471071/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr?ref=a15df94b69e6b93334819d382479a43e07471071", "patch": "@@ -0,0 +1,15 @@\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/issue-60989.rs:12:10\n+   |\n+LL |     c1::<()>;\n+   |          ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/issue-60989.rs:16:10\n+   |\n+LL |     c1::<Into<B>>;\n+   |          ^^^^^^^ type argument not allowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0109`."}]}