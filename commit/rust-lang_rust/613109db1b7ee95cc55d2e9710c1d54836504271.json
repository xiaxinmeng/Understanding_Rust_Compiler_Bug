{"sha": "613109db1b7ee95cc55d2e9710c1d54836504271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzEwOWRiMWI3ZWU5NWNjNTVkMmU5NzEwYzFkNTQ4MzY1MDQyNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-01T16:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-01T16:42:19Z"}, "message": "Auto merge of #24720 - critiqjo:stepby-sizehint, r=alexcrichton\n\n`Iterator::size_hint` can be easily implemented for `StepBy`.\r\n#23708", "tree": {"sha": "0bd255897121f13daf65d601641e4dec1167ceca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bd255897121f13daf65d601641e4dec1167ceca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/613109db1b7ee95cc55d2e9710c1d54836504271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/613109db1b7ee95cc55d2e9710c1d54836504271", "html_url": "https://github.com/rust-lang/rust/commit/613109db1b7ee95cc55d2e9710c1d54836504271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/613109db1b7ee95cc55d2e9710c1d54836504271/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1320c293c16dd61093a9b7e8e3c441df6b59ea9e", "html_url": "https://github.com/rust-lang/rust/commit/1320c293c16dd61093a9b7e8e3c441df6b59ea9e"}, {"sha": "2a8fc9b02cb77664551712ecc5ac491c91238e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8fc9b02cb77664551712ecc5ac491c91238e99", "html_url": "https://github.com/rust-lang/rust/commit/2a8fc9b02cb77664551712ecc5ac491c91238e99"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "20720b9364178fc9b5d42875b213ff6be3890bcf", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/613109db1b7ee95cc55d2e9710c1d54836504271/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613109db1b7ee95cc55d2e9710c1d54836504271/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=613109db1b7ee95cc55d2e9710c1d54836504271", "patch": "@@ -2402,14 +2402,10 @@ pub trait Step: PartialOrd {\n     /// Steps `self` if possible.\n     fn step(&self, by: &Self) -> Option<Self>;\n \n-    /// Returns the number of steps between two step objects.\n+    /// Returns the number of steps between two step objects. The count is\n+    /// inclusive of `start` and exclusive of `end`.\n     ///\n-    /// `start` should always be less than `end`, so the result should never\n-    /// be negative.\n-    ///\n-    /// `by` must be > 0.\n-    ///\n-    /// Returns `None` if it is not possible to calculate steps_between\n+    /// Returns `None` if it is not possible to calculate `steps_between`\n     /// without overflow.\n     fn steps_between(start: &Self, end: &Self, by: &Self) -> Option<usize>;\n }\n@@ -2424,9 +2420,16 @@ macro_rules! step_impl_unsigned {\n             #[inline]\n             #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n-                if *start <= *end {\n+                if *by == 0 { return None; }\n+                if *start < *end {\n                     // Note: We assume $t <= usize here\n-                    Some((*end - *start) as usize / (*by as usize))\n+                    let diff = (*end - *start) as usize;\n+                    let by = *by as usize;\n+                    if diff % by > 0 {\n+                        Some(diff / by + 1)\n+                    } else {\n+                        Some(diff / by)\n+                    }\n                 } else {\n                     Some(0)\n                 }\n@@ -2444,16 +2447,29 @@ macro_rules! step_impl_signed {\n             #[inline]\n             #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n-                if *start <= *end {\n+                if *by == 0 { return None; }\n+                let mut diff: usize;\n+                let mut by_u: usize;\n+                if *by > 0 {\n+                    if *start >= *end {\n+                        return Some(0);\n+                    }\n                     // Note: We assume $t <= isize here\n                     // Use .wrapping_sub and cast to usize to compute the\n                     // difference that may not fit inside the range of isize.\n-                    Some(\n-                        ((*end as isize).wrapping_sub(*start as isize) as usize\n-                        / (*by as usize))\n-                    )\n+                    diff = (*end as isize).wrapping_sub(*start as isize) as usize;\n+                    by_u = *by as usize;\n                 } else {\n-                    Some(0)\n+                    if *start <= *end {\n+                        return Some(0);\n+                    }\n+                    diff = (*start as isize).wrapping_sub(*end as isize) as usize;\n+                    by_u = (*by as isize).wrapping_mul(-1) as usize;\n+                }\n+                if diff % by_u > 0 {\n+                    Some(diff / by_u + 1)\n+                } else {\n+                    Some(diff / by_u)\n                 }\n             }\n         }\n@@ -2675,6 +2691,16 @@ impl<A: Step + Zero + Clone> Iterator for StepBy<A, ops::Range<A>> {\n             None\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        match Step::steps_between(&self.range.start,\n+                                  &self.range.end,\n+                                  &self.step_by) {\n+            Some(hint) => (hint, Some(hint)),\n+            None       => (0, None)\n+        }\n+    }\n }\n \n macro_rules! range_exact_iter_impl {"}, {"sha": "95a6236e9c39463df4a36da86633323850e7355e", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/613109db1b7ee95cc55d2e9710c1d54836504271/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613109db1b7ee95cc55d2e9710c1d54836504271/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=613109db1b7ee95cc55d2e9710c1d54836504271", "patch": "@@ -11,7 +11,7 @@\n use core::iter::*;\n use core::iter::order::*;\n use core::iter::MinMaxResult::*;\n-use core::isize;\n+use core::{i8, i16, isize};\n use core::usize;\n use core::cmp;\n \n@@ -786,6 +786,18 @@ fn test_range_step() {\n     assert_eq!((200..255).step_by(50).collect::<Vec<u8>>(), [200, 250]);\n     assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n     assert_eq!((200..200).step_by(1).collect::<Vec<isize>>(), []);\n+\n+    assert_eq!((0..20).step_by(1).size_hint(), (20, Some(20)));\n+    assert_eq!((0..20).step_by(21).size_hint(), (1, Some(1)));\n+    assert_eq!((0..20).step_by(5).size_hint(), (4, Some(4)));\n+    assert_eq!((20..0).step_by(-5).size_hint(), (4, Some(4)));\n+    assert_eq!((20..0).step_by(-6).size_hint(), (4, Some(4)));\n+    assert_eq!((20..-5).step_by(1).size_hint(), (0, Some(0)));\n+    assert_eq!((20..20).step_by(1).size_hint(), (0, Some(0)));\n+    assert_eq!((0..1).step_by(0).size_hint(), (0, None));\n+    assert_eq!((i8::MAX..i8::MIN).step_by(i8::MIN).size_hint(), (2, Some(2)));\n+    assert_eq!((i16::MIN..i16::MAX).step_by(i16::MAX).size_hint(), (3, Some(3)));\n+    assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n \n #[test]"}]}