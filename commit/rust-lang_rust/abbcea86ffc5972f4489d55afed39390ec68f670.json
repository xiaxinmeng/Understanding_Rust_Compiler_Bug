{"sha": "abbcea86ffc5972f4489d55afed39390ec68f670", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYmNlYTg2ZmZjNTk3MmY0NDg5ZDU1YWZlZDM5MzkwZWM2OGY2NzA=", "commit": {"author": {"name": "xordi", "email": "jordi.obuades@gmail.com", "date": "2021-08-26T14:15:04Z"}, "committer": {"name": "xordi", "email": "jordi.obuades@gmail.com", "date": "2021-08-31T06:56:53Z"}, "message": "Add new ui tests", "tree": {"sha": "4fa4ff9b98fdf7b7703ac1675148c51f5ea107d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fa4ff9b98fdf7b7703ac1675148c51f5ea107d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abbcea86ffc5972f4489d55afed39390ec68f670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abbcea86ffc5972f4489d55afed39390ec68f670", "html_url": "https://github.com/rust-lang/rust/commit/abbcea86ffc5972f4489d55afed39390ec68f670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abbcea86ffc5972f4489d55afed39390ec68f670/comments", "author": {"login": "xordi", "id": 915557, "node_id": "MDQ6VXNlcjkxNTU1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/915557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xordi", "html_url": "https://github.com/xordi", "followers_url": "https://api.github.com/users/xordi/followers", "following_url": "https://api.github.com/users/xordi/following{/other_user}", "gists_url": "https://api.github.com/users/xordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/xordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xordi/subscriptions", "organizations_url": "https://api.github.com/users/xordi/orgs", "repos_url": "https://api.github.com/users/xordi/repos", "events_url": "https://api.github.com/users/xordi/events{/privacy}", "received_events_url": "https://api.github.com/users/xordi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xordi", "id": 915557, "node_id": "MDQ6VXNlcjkxNTU1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/915557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xordi", "html_url": "https://github.com/xordi", "followers_url": "https://api.github.com/users/xordi/followers", "following_url": "https://api.github.com/users/xordi/following{/other_user}", "gists_url": "https://api.github.com/users/xordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/xordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xordi/subscriptions", "organizations_url": "https://api.github.com/users/xordi/orgs", "repos_url": "https://api.github.com/users/xordi/repos", "events_url": "https://api.github.com/users/xordi/events{/privacy}", "received_events_url": "https://api.github.com/users/xordi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75d1b2bc5b5794ccc43925f36900d404211eeda", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75d1b2bc5b5794ccc43925f36900d404211eeda", "html_url": "https://github.com/rust-lang/rust/commit/f75d1b2bc5b5794ccc43925f36900d404211eeda"}], "stats": {"total": 125, "additions": 106, "deletions": 19}, "files": [{"sha": "3961b9432a30252e80f56f8a099cc63632ca1fb1", "filename": "tests/ui/bool_assert_comparison.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/abbcea86ffc5972f4489d55afed39390ec68f670/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbcea86ffc5972f4489d55afed39390ec68f670/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=abbcea86ffc5972f4489d55afed39390ec68f670", "patch": "@@ -1,5 +1,7 @@\n #![warn(clippy::bool_assert_comparison)]\n \n+use std::ops::Not;\n+\n macro_rules! a {\n     () => {\n         true\n@@ -11,14 +13,67 @@ macro_rules! b {\n     };\n }\n \n+// Implements the Not trait but with an output type\n+// that's not bool. Should not suggest a rewrite\n+#[derive(Debug)]\n+enum A {\n+    VariantX(bool),\n+    VariantY(u32),\n+}\n+\n+impl PartialEq<bool> for A {\n+    fn eq(&self, other: &bool) -> bool {\n+        match *self {\n+            A::VariantX(b) => b == *other,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+impl Not for A {\n+    type Output = Self;\n+\n+    fn not(self) -> Self::Output {\n+        match self {\n+            A::VariantX(b) => A::VariantX(!b),\n+            A::VariantY(0) => A::VariantY(1),\n+            A::VariantY(_) => A::VariantY(0),\n+        }\n+    }\n+}\n+\n+// This type implements the Not trait with an Output of\n+// type bool. Using assert!(..) must be suggested\n+#[derive(Debug)]\n+struct B;\n+\n+impl PartialEq<bool> for B {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for B {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n fn main() {\n+    let a = A::VariantX(true);\n+    let b = B {};\n+\n     assert_eq!(\"a\".len(), 1);\n     assert_eq!(\"a\".is_empty(), false);\n     assert_eq!(\"\".is_empty(), true);\n     assert_eq!(true, \"\".is_empty());\n     assert_eq!(a!(), b!());\n     assert_eq!(a!(), \"\".is_empty());\n     assert_eq!(\"\".is_empty(), b!());\n+    assert_eq!(a, true);\n+    assert_eq!(b, true);\n \n     assert_ne!(\"a\".len(), 1);\n     assert_ne!(\"a\".is_empty(), false);\n@@ -27,6 +82,8 @@ fn main() {\n     assert_ne!(a!(), b!());\n     assert_ne!(a!(), \"\".is_empty());\n     assert_ne!(\"\".is_empty(), b!());\n+    assert_ne!(a, true);\n+    assert_ne!(b, true);\n \n     debug_assert_eq!(\"a\".len(), 1);\n     debug_assert_eq!(\"a\".is_empty(), false);\n@@ -35,6 +92,8 @@ fn main() {\n     debug_assert_eq!(a!(), b!());\n     debug_assert_eq!(a!(), \"\".is_empty());\n     debug_assert_eq!(\"\".is_empty(), b!());\n+    debug_assert_eq!(a, true);\n+    debug_assert_eq!(b, true);\n \n     debug_assert_ne!(\"a\".len(), 1);\n     debug_assert_ne!(\"a\".is_empty(), false);\n@@ -43,17 +102,21 @@ fn main() {\n     debug_assert_ne!(a!(), b!());\n     debug_assert_ne!(a!(), \"\".is_empty());\n     debug_assert_ne!(\"\".is_empty(), b!());\n+    debug_assert_ne!(a, true);\n+    debug_assert_ne!(b, true);\n \n     // assert with error messages\n     assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n     assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+    assert_eq!(a, true, \"tadam {}\", false);\n \n     debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n     debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert_eq!(a, true, \"tadam {}\", false);\n }"}, {"sha": "da9b56aa7795d4e9c2396dabf655764996fab801", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/abbcea86ffc5972f4489d55afed39390ec68f670/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abbcea86ffc5972f4489d55afed39390ec68f670/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=abbcea86ffc5972f4489d55afed39390ec68f670", "patch": "@@ -1,112 +1,136 @@\n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:16:5\n+  --> $DIR/bool_assert_comparison.rs:69:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n    |\n    = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:17:5\n+  --> $DIR/bool_assert_comparison.rs:70:5\n    |\n LL |     assert_eq!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:18:5\n+  --> $DIR/bool_assert_comparison.rs:71:5\n    |\n LL |     assert_eq!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:76:5\n+   |\n+LL |     assert_eq!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:24:5\n+  --> $DIR/bool_assert_comparison.rs:79:5\n    |\n LL |     assert_ne!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:25:5\n+  --> $DIR/bool_assert_comparison.rs:80:5\n    |\n LL |     assert_ne!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:26:5\n+  --> $DIR/bool_assert_comparison.rs:81:5\n    |\n LL |     assert_ne!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:86:5\n+   |\n+LL |     assert_ne!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:32:5\n+  --> $DIR/bool_assert_comparison.rs:89:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:33:5\n+  --> $DIR/bool_assert_comparison.rs:90:5\n    |\n LL |     debug_assert_eq!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:34:5\n+  --> $DIR/bool_assert_comparison.rs:91:5\n    |\n LL |     debug_assert_eq!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:96:5\n+   |\n+LL |     debug_assert_eq!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:40:5\n+  --> $DIR/bool_assert_comparison.rs:99:5\n    |\n LL |     debug_assert_ne!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:41:5\n+  --> $DIR/bool_assert_comparison.rs:100:5\n    |\n LL |     debug_assert_ne!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:42:5\n+  --> $DIR/bool_assert_comparison.rs:101:5\n    |\n LL |     debug_assert_ne!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:106:5\n+   |\n+LL |     debug_assert_ne!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:50:5\n+  --> $DIR/bool_assert_comparison.rs:111:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:51:5\n+  --> $DIR/bool_assert_comparison.rs:112:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:52:5\n+  --> $DIR/bool_assert_comparison.rs:113:5\n    |\n LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:56:5\n+  --> $DIR/bool_assert_comparison.rs:118:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:57:5\n+  --> $DIR/bool_assert_comparison.rs:119:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:58:5\n+  --> $DIR/bool_assert_comparison.rs:120:5\n    |\n LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 22 previous errors\n "}]}