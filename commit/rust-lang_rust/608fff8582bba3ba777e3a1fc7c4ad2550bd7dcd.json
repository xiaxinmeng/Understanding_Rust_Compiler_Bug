{"sha": "608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOGZmZjg1ODJiYmEzYmE3NzdlM2ExZmM3YzRhZDI1NTBiZDdkY2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T20:40:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T20:41:19Z"}, "message": "rustc: Remove old_orphan_check entirely", "tree": {"sha": "ee813cd15556580ca6f83d3549099115ec30bfff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee813cd15556580ca6f83d3549099115ec30bfff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "html_url": "https://github.com/rust-lang/rust/commit/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cf126ae2f6af1cdac901f6995e3c2bab35e587f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf126ae2f6af1cdac901f6995e3c2bab35e587f", "html_url": "https://github.com/rust-lang/rust/commit/5cf126ae2f6af1cdac901f6995e3c2bab35e587f"}], "stats": {"total": 60, "additions": 19, "deletions": 41}, "files": [{"sha": "b450e6b398a6a00d8ef1dd716c198559f829f8a2", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -215,25 +215,21 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                        if !ty::has_attr(self.tcx, trait_def_id, \"old_orphan_check\") {\n-                            span_err!(\n-                                self.tcx.sess, item.span, E0117,\n-                                \"the impl does not reference any \\\n-                                 types defined in this crate; \\\n-                                 only traits defined in the current crate can be \\\n-                                 implemented for arbitrary types\");\n-                            return;\n-                        }\n+                        span_err!(\n+                            self.tcx.sess, item.span, E0117,\n+                            \"the impl does not reference any \\\n+                             types defined in this crate; \\\n+                             only traits defined in the current crate can be \\\n+                             implemented for arbitrary types\");\n+                        return;\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n-                        if !ty::has_attr(self.tcx, trait_def_id, \"old_orphan_check\") {\n-                            span_err!(self.tcx.sess, item.span, E0210,\n-                                    \"type parameter `{}` must be used as the type parameter for \\\n-                                     some local type (e.g. `MyStruct<T>`); only traits defined in \\\n-                                     the current crate can be implemented for a type parameter\",\n-                                    param_ty.user_string(self.tcx));\n-                            return;\n-                        }\n+                        span_err!(self.tcx.sess, item.span, E0210,\n+                                \"type parameter `{}` must be used as the type parameter for \\\n+                                 some local type (e.g. `MyStruct<T>`); only traits defined in \\\n+                                 the current crate can be implemented for a type parameter\",\n+                                param_ty.user_string(self.tcx));\n+                        return;\n                     }\n                 }\n "}, {"sha": "7bad26f58f76ca2129019aca0af469201c27c790", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -102,9 +102,6 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n     (\"opt_out_copy\", \"1.0.0\", Removed),\n \n-    // A way to temporarily opt out of the new orphan rules. This will *never* be accepted.\n-    (\"old_orphan_check\", \"1.0.0\", Deprecated),\n-\n     // OIBIT specific features\n     (\"optin_builtin_traits\", \"1.0.0\", Active),\n \n@@ -277,9 +274,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"stable\", Whitelisted),\n     (\"unstable\", Whitelisted),\n \n-    // FIXME: #19470 this shouldn't be needed forever\n-    (\"old_orphan_check\", Whitelisted),\n-\n     (\"rustc_paren_sugar\", Gated(\"unboxed_closures\",\n                                 \"unboxed_closures are still evolving\")),\n     (\"rustc_reflect_like\", Gated(\"reflect\",\n@@ -327,7 +321,6 @@ pub struct Features {\n     pub allow_trace_macros: bool,\n     pub allow_internal_unstable: bool,\n     pub allow_custom_derive: bool,\n-    pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n     /// spans of #![feature] attrs for stable language features. for error reporting\n@@ -349,7 +342,6 @@ impl Features {\n             allow_trace_macros: false,\n             allow_internal_unstable: false,\n             allow_custom_derive: false,\n-            old_orphan_check: false,\n             simd_ffi: false,\n             unmarked_api: false,\n             declared_stable_lang_features: Vec::new(),\n@@ -573,14 +565,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                     },\n                     _ => {}\n                 }\n-\n-                if attr::contains_name(&i.attrs[..],\n-                                       \"old_orphan_check\") {\n-                    self.gate_feature(\n-                        \"old_orphan_check\",\n-                        i.span,\n-                        \"the new orphan check rules will eventually be strictly enforced\");\n-                }\n             }\n \n             _ => {}\n@@ -737,7 +721,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         allow_trace_macros: cx.has_feature(\"trace_macros\"),\n         allow_internal_unstable: cx.has_feature(\"allow_internal_unstable\"),\n         allow_custom_derive: cx.has_feature(\"custom_derive\"),\n-        old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n         declared_stable_lang_features: accepted_features,"}, {"sha": "6ccedb0ad982f129982a87ef47925557c59eadd3", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(old_orphan_check, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "d216062bb2da362c3c7369f79fc237a365e8cecc", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -13,7 +13,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_orphan_check, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "105d421b4041567c49497d14b41adde4f2ce4fde", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(old_orphan_check, rand, rustc_private)]\n+#![feature(rand, rustc_private)]\n \n extern crate serialize;\n extern crate rand;"}, {"sha": "35c25b33a9764c2976889ffdf7877dfc4f24a030", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_orphan_check, rustc_private, old_io)]\n+#![feature(rustc_private, old_io)]\n \n extern crate rbml;\n extern crate serialize;"}, {"sha": "907967d115d583ec7ecc67ce5e7e6ddc6fede761", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(old_orphan_check, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "67ce6a1c44f0db4b2866889bdbaaec565dd92f43", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -13,7 +13,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_orphan_check, core)]\n+#![feature(core)]\n \n use std::ops::Index;\n "}, {"sha": "7f66b6b25b8d2860c112edfb97bdc98bec046ede", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=608fff8582bba3ba777e3a1fc7c4ad2550bd7dcd", "patch": "@@ -10,7 +10,6 @@\n \n // If `Mul` used an associated type for its output, this test would\n // work more smoothly.\n-#![feature(old_orphan_check)]\n \n use std::ops::Mul;\n "}]}