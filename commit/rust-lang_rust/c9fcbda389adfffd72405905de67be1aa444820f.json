{"sha": "c9fcbda389adfffd72405905de67be1aa444820f", "node_id": "C_kwDOAAsO6NoAKGM5ZmNiZGEzODlhZGZmZmQ3MjQwNTkwNWRlNjdiZTFhYTQ0NDgyMGY", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-18T19:13:12Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-11-16T04:31:55Z"}, "message": "check where clause before suggesting unsized", "tree": {"sha": "b3967d4f2483fac5be51a5ca302e9ebeee2a2c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3967d4f2483fac5be51a5ca302e9ebeee2a2c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9fcbda389adfffd72405905de67be1aa444820f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fcbda389adfffd72405905de67be1aa444820f", "html_url": "https://github.com/rust-lang/rust/commit/c9fcbda389adfffd72405905de67be1aa444820f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9fcbda389adfffd72405905de67be1aa444820f/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0535508474fb4353a3b83ef79df87817f028a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0535508474fb4353a3b83ef79df87817f028a71", "html_url": "https://github.com/rust-lang/rust/commit/b0535508474fb4353a3b83ef79df87817f028a71"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "305af6db298332778fee5fb609d9fef0299afe38", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9fcbda389adfffd72405905de67be1aa444820f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9fcbda389adfffd72405905de67be1aa444820f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c9fcbda389adfffd72405905de67be1aa444820f", "patch": "@@ -14,6 +14,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n@@ -2009,6 +2010,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Some(param) => param,\n             _ => return,\n         };\n+        let param_def_id = self.tcx.hir().local_def_id(param.hir_id).to_def_id();\n+        let preds = generics.where_clause.predicates.iter();\n+        let explicitly_sized = preds\n+            .filter_map(|pred| match pred {\n+                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n+                _ => None,\n+            })\n+            .flat_map(|bp| match bp.bounded_ty.kind {\n+                hir::TyKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    &hir::Path { res: Res::Def(DefKind::TyParam, def_id), .. },\n+                )) if def_id == param_def_id => bp.bounds,\n+                _ => &[][..],\n+            })\n+            .any(|bound| bound.trait_ref().and_then(|tr| tr.trait_def_id()) == sized_trait);\n+        if explicitly_sized {\n+            return;\n+        }\n         debug!(\"maybe_suggest_unsized_generics: param={:?}\", param);\n         match node {\n             hir::Node::Item("}, {"sha": "5cfaf4be96aeb02e1da641fc9c9dae0eddee80de", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9fcbda389adfffd72405905de67be1aa444820f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9fcbda389adfffd72405905de67be1aa444820f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs?ref=c9fcbda389adfffd72405905de67be1aa444820f", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for #85945: Don't suggest `?Sized` bound if an explicit\n+// `Sized` bound is already in a `where` clause.\n+fn foo<T>(_: &T) where T: Sized {}\n+fn bar() { foo(\"\"); }\n+//~^ERROR the size for values of type\n+\n+pub fn main() {\n+}"}, {"sha": "92be9f764cc4b56ba5f617104b779e7f474122d6", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9fcbda389adfffd72405905de67be1aa444820f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9fcbda389adfffd72405905de67be1aa444820f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr?ref=c9fcbda389adfffd72405905de67be1aa444820f", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-85945-check-where-clause-before-suggesting-unsized.rs:4:16\n+   |\n+LL | fn bar() { foo(\"\"); }\n+   |            --- ^^ doesn't have a size known at compile-time\n+   |            |\n+   |            required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `foo`\n+  --> $DIR/issue-85945-check-where-clause-before-suggesting-unsized.rs:3:8\n+   |\n+LL | fn foo<T>(_: &T) where T: Sized {}\n+   |        ^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}