{"sha": "38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "node_id": "C_kwDOAAsO6NoAKDM4YjdjZGYzOTM3MzdlZTY3MDJhMmI0Y2MwMTI3NWM2YmZmYmQzZTI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T14:31:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-15T08:56:18Z"}, "message": "Use target instead of machine for mir interpreter integer handling.\n\nThe naming of `machine` only makes sense from a mir interpreter internals perspective, but outside users talk about the `target` platform", "tree": {"sha": "e68ddfc8ea8637cc4ebeaa60ffa8fd5517d64d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68ddfc8ea8637cc4ebeaa60ffa8fd5517d64d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "html_url": "https://github.com/rust-lang/rust/commit/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068161ea483b1a80a959476cb3e31e6619a72737", "url": "https://api.github.com/repos/rust-lang/rust/commits/068161ea483b1a80a959476cb3e31e6619a72737", "html_url": "https://github.com/rust-lang/rust/commit/068161ea483b1a80a959476cb3e31e6619a72737"}], "stats": {"total": 362, "additions": 181, "deletions": 181}, "files": [{"sha": "45f7c7560558461385ab86aba5df96a397bed13d", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -186,7 +186,7 @@ pub(super) fn op_to_const<'tcx>(\n                         0,\n                     ),\n                 };\n-                let len = b.to_machine_usize(ecx).unwrap();\n+                let len = b.to_target_usize(ecx).unwrap();\n                 let start = start.try_into().unwrap();\n                 let len: usize = len.try_into().unwrap();\n                 ConstValue::Slice { data, start, end: start + len }"}, {"sha": "a44f70ed0590634159dd145cc5c26d91e9b52fd9", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -244,7 +244,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n         assert_eq!(args.len(), 2);\n \n         let ptr = self.read_pointer(&args[0])?;\n-        let target_align = self.read_scalar(&args[1])?.to_machine_usize(self)?;\n+        let target_align = self.read_scalar(&args[1])?.to_target_usize(self)?;\n \n         if !target_align.is_power_of_two() {\n             throw_ub_format!(\"`align_offset` called with non-power-of-two align: {}\", target_align);\n@@ -276,7 +276,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n                     Ok(ControlFlow::Break(()))\n                 } else {\n                     // Not alignable in const, return `usize::MAX`.\n-                    let usize_max = Scalar::from_machine_usize(self.machine_usize_max(), self);\n+                    let usize_max = Scalar::from_target_usize(self.target_usize_max(), self);\n                     self.write_scalar(usize_max, dest)?;\n                     self.return_to_block(ret)?;\n                     Ok(ControlFlow::Break(()))\n@@ -470,8 +470,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 ecx.write_scalar(Scalar::from_u8(cmp), dest)?;\n             }\n             sym::const_allocate => {\n-                let size = ecx.read_scalar(&args[0])?.to_machine_usize(ecx)?;\n-                let align = ecx.read_scalar(&args[1])?.to_machine_usize(ecx)?;\n+                let size = ecx.read_scalar(&args[0])?.to_target_usize(ecx)?;\n+                let align = ecx.read_scalar(&args[1])?.to_target_usize(ecx)?;\n \n                 let align = match Align::from_bytes(align) {\n                     Ok(a) => a,\n@@ -487,8 +487,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             }\n             sym::const_deallocate => {\n                 let ptr = ecx.read_pointer(&args[0])?;\n-                let size = ecx.read_scalar(&args[1])?.to_machine_usize(ecx)?;\n-                let align = ecx.read_scalar(&args[2])?.to_machine_usize(ecx)?;\n+                let size = ecx.read_scalar(&args[1])?.to_target_usize(ecx)?;\n+                let align = ecx.read_scalar(&args[2])?.to_target_usize(ecx)?;\n \n                 let size = Size::from_bytes(size);\n                 let align = match Align::from_bytes(align) {"}, {"sha": "3cdf1e6e30c99f85f4303dce637d745f0ad3e4ff", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -155,7 +155,7 @@ pub(crate) fn deref_mir_constant<'tcx>(\n         // In case of unsized types, figure out the real type behind.\n         MemPlaceMeta::Meta(scalar) => match mplace.layout.ty.kind() {\n             ty::Str => bug!(\"there's no sized equivalent of a `str`\"),\n-            ty::Slice(elem_ty) => tcx.mk_array(*elem_ty, scalar.to_machine_usize(&tcx).unwrap()),\n+            ty::Slice(elem_ty) => tcx.mk_array(*elem_ty, scalar.to_target_usize(&tcx).unwrap()),\n             _ => bug!(\n                 \"type {} should not have metadata, but had {:?}\",\n                 mplace.layout.ty,"}, {"sha": "a73f778d4db2091471fe63bd08e84ba7a000a132", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -239,7 +239,7 @@ fn create_pointee_place<'tcx>(\n         MPlaceTy::from_aligned_ptr_with_meta(\n             ptr.into(),\n             layout,\n-            MemPlaceMeta::Meta(Scalar::from_machine_usize(num_elems as u64, &tcx)),\n+            MemPlaceMeta::Meta(Scalar::from_target_usize(num_elems as u64, &tcx)),\n         )\n     } else {\n         create_mplace_from_layout(ecx, ty)\n@@ -355,7 +355,7 @@ fn valtree_into_mplace<'tcx>(\n             let imm = match inner_ty.kind() {\n                 ty::Slice(_) | ty::Str => {\n                     let len = valtree.unwrap_branch().len();\n-                    let len_scalar = Scalar::from_machine_usize(len as u64, &tcx);\n+                    let len_scalar = Scalar::from_target_usize(len as u64, &tcx);\n \n                     Immediate::ScalarPair(\n                         Scalar::from_maybe_pointer((*pointee_place).ptr, &tcx),\n@@ -426,7 +426,7 @@ fn valtree_into_mplace<'tcx>(\n                         place\n                             .offset_with_meta(\n                                 offset,\n-                                MemPlaceMeta::Meta(Scalar::from_machine_usize(\n+                                MemPlaceMeta::Meta(Scalar::from_target_usize(\n                                     num_elems as u64,\n                                     &tcx,\n                                 )),"}, {"sha": "68a91eabda7b9ed6a0eeab25085f618810d59338", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -231,7 +231,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // First cast to usize.\n         let scalar = src.to_scalar();\n         let addr = self.cast_from_int_like(scalar, src.layout, self.tcx.types.usize)?;\n-        let addr = addr.to_machine_usize(self)?;\n+        let addr = addr.to_target_usize(self)?;\n \n         // Then turn address into pointer.\n         let ptr = M::ptr_from_addr_cast(&self, addr)?;"}, {"sha": "c8bf769cfd8b714928a5ced247366b20a852962c", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -639,7 +639,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             ty::Slice(_) | ty::Str => {\n-                let len = metadata.unwrap_meta().to_machine_usize(self)?;\n+                let len = metadata.unwrap_meta().to_target_usize(self)?;\n                 let elem = layout.field(self, 0);\n \n                 // Make sure the slice is not too big."}, {"sha": "f0b9490458dd5c5cb8aa41b007f50e354ce9f77a", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -71,15 +71,15 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n         sym::pref_align_of => {\n             // Correctly handles non-monomorphic calls, so there is no need for ensure_monomorphic_enough.\n             let layout = tcx.layout_of(param_env.and(tp_ty)).map_err(|e| err_inval!(Layout(e)))?;\n-            ConstValue::from_machine_usize(layout.align.pref.bytes(), &tcx)\n+            ConstValue::from_target_usize(layout.align.pref.bytes(), &tcx)\n         }\n         sym::type_id => {\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n             ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n         }\n         sym::variant_count => match tp_ty.kind() {\n             // Correctly handles non-monomorphic calls, so there is no need for ensure_monomorphic_enough.\n-            ty::Adt(adt, _) => ConstValue::from_machine_usize(adt.variants().len() as u64, &tcx),\n+            ty::Adt(adt, _) => ConstValue::from_target_usize(adt.variants().len() as u64, &tcx),\n             ty::Alias(..) | ty::Param(_) | ty::Placeholder(_) | ty::Infer(_) => {\n                 throw_inval!(TooGeneric)\n             }\n@@ -104,7 +104,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             | ty::GeneratorWitnessMIR(_, _)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Error(_) => ConstValue::from_machine_usize(0u64, &tcx),\n+            | ty::Error(_) => ConstValue::from_target_usize(0u64, &tcx),\n         },\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n@@ -156,7 +156,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     _ => bug!(),\n                 };\n \n-                self.write_scalar(Scalar::from_machine_usize(result, self), dest)?;\n+                self.write_scalar(Scalar::from_target_usize(result, self), dest)?;\n             }\n \n             sym::pref_align_of\n@@ -302,15 +302,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             sym::offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n-                let offset_count = self.read_machine_isize(&args[1])?;\n+                let offset_count = self.read_target_isize(&args[1])?;\n                 let pointee_ty = substs.type_at(0);\n \n                 let offset_ptr = self.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n                 self.write_pointer(offset_ptr, dest)?;\n             }\n             sym::arith_offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n-                let offset_count = self.read_machine_isize(&args[1])?;\n+                let offset_count = self.read_target_isize(&args[1])?;\n                 let pointee_ty = substs.type_at(0);\n \n                 let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n@@ -376,7 +376,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // The signed form of the intrinsic allows this. If we interpret the\n                         // difference as isize, we'll get the proper signed difference. If that\n                         // seems *positive*, they were more than isize::MAX apart.\n-                        let dist = val.to_machine_isize(self)?;\n+                        let dist = val.to_target_isize(self)?;\n                         if dist >= 0 {\n                             throw_ub_format!(\n                                 \"`{}` called when first pointer is too far before second\",\n@@ -386,7 +386,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         dist\n                     } else {\n                         // b >= a\n-                        let dist = val.to_machine_isize(self)?;\n+                        let dist = val.to_target_isize(self)?;\n                         // If converting to isize produced a *negative* result, we had an overflow\n                         // because they were more than isize::MAX apart.\n                         if dist < 0 {\n@@ -411,10 +411,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 // Perform division by size to compute return value.\n                 let ret_layout = if intrinsic_name == sym::ptr_offset_from_unsigned {\n-                    assert!(0 <= dist && dist <= self.machine_isize_max());\n+                    assert!(0 <= dist && dist <= self.target_isize_max());\n                     usize_layout\n                 } else {\n-                    assert!(self.machine_isize_min() <= dist && dist <= self.machine_isize_max());\n+                    assert!(self.target_isize_min() <= dist && dist <= self.target_isize_max());\n                     isize_layout\n                 };\n                 let pointee_layout = self.layout_of(substs.type_at(0))?;\n@@ -525,12 +525,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::vtable_size => {\n                 let ptr = self.read_pointer(&args[0])?;\n                 let (size, _align) = self.get_vtable_size_and_align(ptr)?;\n-                self.write_scalar(Scalar::from_machine_usize(size.bytes(), self), dest)?;\n+                self.write_scalar(Scalar::from_target_usize(size.bytes(), self), dest)?;\n             }\n             sym::vtable_align => {\n                 let ptr = self.read_pointer(&args[0])?;\n                 let (_size, align) = self.get_vtable_size_and_align(ptr)?;\n-                self.write_scalar(Scalar::from_machine_usize(align.bytes(), self), dest)?;\n+                self.write_scalar(Scalar::from_target_usize(align.bytes(), self), dest)?;\n             }\n \n             _ => return Ok(false),\n@@ -669,10 +669,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::Provenance>,\n         nonoverlapping: bool,\n     ) -> InterpResult<'tcx> {\n-        let count = self.read_machine_usize(&count)?;\n+        let count = self.read_target_usize(&count)?;\n         let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n         let (size, align) = (layout.size, layout.align.abi);\n-        // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n+        // `checked_mul` enforces a too small bound (the correct one would probably be target_isize_max),\n         // but no actual allocation can be big enough for the difference to be noticeable.\n         let size = size.checked_mul(count, self).ok_or_else(|| {\n             err_ub_format!(\n@@ -697,9 +697,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let dst = self.read_pointer(&dst)?;\n         let byte = self.read_scalar(&byte)?.to_u8()?;\n-        let count = self.read_machine_usize(&count)?;\n+        let count = self.read_target_usize(&count)?;\n \n-        // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n+        // `checked_mul` enforces a too small bound (the correct one would probably be target_isize_max),\n         // but no actual allocation can be big enough for the difference to be noticeable.\n         let len = layout\n             .size"}, {"sha": "635987d039e09342742bd4c2582343ff8a577539", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -425,7 +425,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     throw_ub!(PointerOutOfBounds {\n                         alloc_id,\n                         alloc_size,\n-                        ptr_offset: self.machine_usize_to_isize(offset.bytes()),\n+                        ptr_offset: self.target_usize_to_isize(offset.bytes()),\n                         ptr_size: size,\n                         msg,\n                     })"}, {"sha": "ba41019aa938c5d27e8ae79fcd555b56273711cf", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -52,7 +52,7 @@ impl<Prov: Provenance> Immediate<Prov> {\n     }\n \n     pub fn new_slice(val: Scalar<Prov>, len: u64, cx: &impl HasDataLayout) -> Self {\n-        Immediate::ScalarPair(val, Scalar::from_machine_usize(len, cx))\n+        Immediate::ScalarPair(val, Scalar::from_target_usize(len, cx))\n     }\n \n     pub fn new_dyn_trait(\n@@ -414,12 +414,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.read_scalar(op)?.to_pointer(self)\n     }\n     /// Read a pointer-sized unsigned integer from a place.\n-    pub fn read_machine_usize(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx, u64> {\n-        self.read_scalar(op)?.to_machine_usize(self)\n+    pub fn read_target_usize(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx, u64> {\n+        self.read_scalar(op)?.to_target_usize(self)\n     }\n     /// Read a pointer-sized signed integer from a place.\n-    pub fn read_machine_isize(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx, i64> {\n-        self.read_scalar(op)?.to_machine_isize(self)\n+    pub fn read_target_isize(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx, i64> {\n+        self.read_scalar(op)?.to_target_isize(self)\n     }\n \n     /// Turn the wide MPlace into a string (must already be dereferenced!)"}, {"sha": "88485c06ed86cde303c10f226586c74cd59a60ba", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -229,7 +229,7 @@ impl<'tcx, Prov: Provenance> MPlaceTy<'tcx, Prov> {\n         if self.layout.is_unsized() {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind() {\n-                ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),\n+                ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_target_usize(cx),\n                 _ => bug!(\"len not supported on unsized type {:?}\", self.layout.ty),\n             }\n         } else {\n@@ -756,7 +756,7 @@ where\n         mutbl: Mutability,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::Provenance>> {\n         let ptr = self.allocate_bytes_ptr(str.as_bytes(), Align::ONE, kind, mutbl)?;\n-        let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);\n+        let meta = Scalar::from_target_usize(u64::try_from(str.len()).unwrap(), self);\n         let mplace = MemPlace { ptr: ptr.into(), meta: MemPlaceMeta::Meta(meta) };\n \n         let ty = self.tcx.mk_ref("}, {"sha": "91da930db4fbf121be79afbba9b62a3a9a50128d", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -319,7 +319,7 @@ where\n             // implement this.\n             ty::Array(inner, _) => (MemPlaceMeta::None, self.tcx.mk_array(*inner, inner_len)),\n             ty::Slice(..) => {\n-                let len = Scalar::from_machine_usize(inner_len, self);\n+                let len = Scalar::from_target_usize(inner_len, self);\n                 (MemPlaceMeta::Meta(len), base.layout.ty)\n             }\n             _ => {\n@@ -363,7 +363,7 @@ where\n             Index(local) => {\n                 let layout = self.layout_of(self.tcx.types.usize)?;\n                 let n = self.local_to_op(self.frame(), local, Some(layout))?;\n-                let n = self.read_machine_usize(&n)?;\n+                let n = self.read_target_usize(&n)?;\n                 self.place_index(base, n)?\n             }\n             ConstantIndex { offset, min_length, from_end } => {\n@@ -392,7 +392,7 @@ where\n             Index(local) => {\n                 let layout = self.layout_of(self.tcx.types.usize)?;\n                 let n = self.local_to_op(self.frame(), local, Some(layout))?;\n-                let n = self.read_machine_usize(&n)?;\n+                let n = self.read_target_usize(&n)?;\n                 self.operand_index(base, n)?\n             }\n             ConstantIndex { offset, min_length, from_end } => {"}, {"sha": "8252e73c5d9374624ddaaebddb0ac5c617dfb108", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -242,7 +242,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let src = self.eval_place(place)?;\n                 let op = self.place_to_op(&src)?;\n                 let len = op.len(self)?;\n-                self.write_scalar(Scalar::from_machine_usize(len, self), &dest)?;\n+                self.write_scalar(Scalar::from_target_usize(len, self), &dest)?;\n             }\n \n             Ref(_, borrow_kind, place) => {\n@@ -297,7 +297,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     mir::NullOp::SizeOf => layout.size.bytes(),\n                     mir::NullOp::AlignOf => layout.align.abi.bytes(),\n                 };\n-                self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n+                self.write_scalar(Scalar::from_target_usize(val, self), &dest)?;\n             }\n \n             ShallowInitBox(ref operand, _) => {"}, {"sha": "820ee320474248d76d31f8fc886c1873b2b1d81d", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -348,7 +348,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // FIXME: check if the type/trait match what ty::Dynamic says?\n             }\n             ty::Slice(..) | ty::Str => {\n-                let _len = meta.unwrap_meta().to_machine_usize(self.ecx)?;\n+                let _len = meta.unwrap_meta().to_target_usize(self.ecx)?;\n                 // We do not check that `len * elem_size <= isize::MAX`:\n                 // that is only required for references, and there it falls out of the\n                 // \"dereferenceable\" check performed by Stacked Borrows."}, {"sha": "60927eed85d3b34748325cee677200666e77d2f2", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -19,29 +19,29 @@ pub trait PointerArithmetic: HasDataLayout {\n \n     #[inline(always)]\n     fn max_size_of_val(&self) -> Size {\n-        Size::from_bytes(self.machine_isize_max())\n+        Size::from_bytes(self.target_isize_max())\n     }\n \n     #[inline]\n-    fn machine_usize_max(&self) -> u64 {\n+    fn target_usize_max(&self) -> u64 {\n         self.pointer_size().unsigned_int_max().try_into().unwrap()\n     }\n \n     #[inline]\n-    fn machine_isize_min(&self) -> i64 {\n+    fn target_isize_min(&self) -> i64 {\n         self.pointer_size().signed_int_min().try_into().unwrap()\n     }\n \n     #[inline]\n-    fn machine_isize_max(&self) -> i64 {\n+    fn target_isize_max(&self) -> i64 {\n         self.pointer_size().signed_int_max().try_into().unwrap()\n     }\n \n     #[inline]\n-    fn machine_usize_to_isize(&self, val: u64) -> i64 {\n+    fn target_usize_to_isize(&self, val: u64) -> i64 {\n         let val = val as i64;\n         // Now wrap-around into the machine_isize range.\n-        if val > self.machine_isize_max() {\n+        if val > self.target_isize_max() {\n             // This can only happen if the ptr size is < 64, so we know max_usize_plus_1 fits into\n             // i64.\n             debug_assert!(self.pointer_size().bits() < 64);\n@@ -76,11 +76,11 @@ pub trait PointerArithmetic: HasDataLayout {\n         let n = i.unsigned_abs();\n         if i >= 0 {\n             let (val, over) = self.overflowing_offset(val, n);\n-            (val, over || i > self.machine_isize_max())\n+            (val, over || i > self.target_isize_max())\n         } else {\n             let res = val.overflowing_sub(n);\n             let (val, over) = self.truncate_to_ptr(res);\n-            (val, over || i < self.machine_isize_min())\n+            (val, over || i < self.target_isize_min())\n         }\n     }\n "}, {"sha": "36dbbe4bf77650895d05a7133213976331c47c4f", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -75,8 +75,8 @@ impl<'tcx> ConstValue<'tcx> {\n         self.try_to_scalar_int()?.try_into().ok()\n     }\n \n-    pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.try_to_scalar_int()?.try_to_machine_usize(tcx).ok()\n+    pub fn try_to_target_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n+        self.try_to_scalar_int()?.try_to_target_usize(tcx).ok()\n     }\n \n     pub fn try_to_bits_for_ty(\n@@ -97,8 +97,8 @@ impl<'tcx> ConstValue<'tcx> {\n         ConstValue::Scalar(Scalar::from_u64(i))\n     }\n \n-    pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n-        ConstValue::Scalar(Scalar::from_machine_usize(i, cx))\n+    pub fn from_target_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n+        ConstValue::Scalar(Scalar::from_target_usize(i, cx))\n     }\n }\n \n@@ -241,7 +241,7 @@ impl<Prov> Scalar<Prov> {\n     }\n \n     #[inline]\n-    pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n+    pub fn from_target_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         Self::from_uint(i, cx.data_layout().pointer_size)\n     }\n \n@@ -268,7 +268,7 @@ impl<Prov> Scalar<Prov> {\n     }\n \n     #[inline]\n-    pub fn from_machine_isize(i: i64, cx: &impl HasDataLayout) -> Self {\n+    pub fn from_target_isize(i: i64, cx: &impl HasDataLayout) -> Self {\n         Self::from_int(i, cx.data_layout().pointer_size)\n     }\n \n@@ -429,7 +429,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n \n     /// Converts the scalar to produce a machine-pointer-sized unsigned integer.\n     /// Fails if the scalar is a pointer.\n-    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n+    pub fn to_target_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         let b = self.to_uint(cx.data_layout().pointer_size)?;\n         Ok(u64::try_from(b).unwrap())\n     }\n@@ -469,7 +469,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n \n     /// Converts the scalar to produce a machine-pointer-sized signed integer.\n     /// Fails if the scalar is a pointer.\n-    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n+    pub fn to_target_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n         let b = self.to_int(cx.data_layout().pointer_size)?;\n         Ok(i64::try_from(b).unwrap())\n     }"}, {"sha": "8ec3b5b0a6f24affd037dee96e9699a860a6cab2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -2349,10 +2349,10 @@ impl<'tcx> ConstantKind<'tcx> {\n     ) -> Option<u64> {\n         match self {\n             Self::Ty(ct) => ct.try_eval_target_usize(tcx, param_env),\n-            Self::Val(val, _) => val.try_to_machine_usize(tcx),\n+            Self::Val(val, _) => val.try_to_target_usize(tcx),\n             Self::Unevaluated(uneval, _) => {\n                 match tcx.const_eval_resolve(param_env, *uneval, None) {\n-                    Ok(val) => val.try_to_machine_usize(tcx),\n+                    Ok(val) => val.try_to_target_usize(tcx),\n                     Err(_) => None,\n                 }\n             }"}, {"sha": "927f18f59b979660a7c87aa5f72b474c6dc50149", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> Const<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n     ) -> Option<u64> {\n-        self.kind().eval(tcx, param_env).try_to_machine_usize(tcx)\n+        self.kind().eval(tcx, param_env).try_to_target_usize(tcx)\n     }\n \n     #[inline]"}, {"sha": "eecd78ab6c0484aeb1c7b7ac1d770589a8a2f657", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -232,7 +232,7 @@ impl ScalarInt {\n     }\n \n     #[inline]\n-    pub fn try_to_machine_usize(&self, tcx: TyCtxt<'_>) -> Result<u64, Size> {\n+    pub fn try_to_target_usize(&self, tcx: TyCtxt<'_>) -> Result<u64, Size> {\n         Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)\n     }\n "}, {"sha": "58c5e21df66b9bd220dbba1177d8ed08ae8c8079", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -125,8 +125,8 @@ impl<'tcx> ConstKind<'tcx> {\n     }\n \n     #[inline]\n-    pub fn try_to_machine_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.try_to_value()?.try_to_machine_usize(tcx)\n+    pub fn try_to_target_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n+        self.try_to_value()?.try_to_target_usize(tcx)\n     }\n }\n "}, {"sha": "5ed4af2e9229db0b0d35e2f016a96cce792fbcbf", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -78,8 +78,8 @@ impl<'tcx> ValTree<'tcx> {\n         }\n     }\n \n-    pub fn try_to_machine_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.try_to_scalar_int().map(|s| s.try_to_machine_usize(tcx).ok()).flatten()\n+    pub fn try_to_target_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n+        self.try_to_scalar_int().map(|s| s.try_to_target_usize(tcx).ok()).flatten()\n     }\n \n     /// Get the values inside the ValTree as a slice of bytes. This only works for"}, {"sha": "e268553f8268b3605993937f5d87e833631def45", "filename": "compiler/rustc_middle/src/ty/inhabitedness/inhabited_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -159,7 +159,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n         match self {\n             Self::ConstIsZero(c) => {\n                 let c = ty::EarlyBinder(c).subst(tcx, substs);\n-                let pred = match c.kind().try_to_machine_usize(tcx) {\n+                let pred = match c.kind().try_to_target_usize(tcx) {\n                     Some(0) => Self::True,\n                     Some(1..) => Self::False,\n                     None => Self::ConstIsZero(c),"}, {"sha": "690c0d58e01c18379cc12a6c93a30a51c8a1930a", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -191,7 +191,7 @@ fn inhabited_predicate_type<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> InhabitedP\n \n         // If we can evaluate the array length before having a `ParamEnv`, then\n         // we can simplify the predicate. This is an optimization.\n-        Array(ty, len) => match len.kind().try_to_machine_usize(tcx) {\n+        Array(ty, len) => match len.kind().try_to_target_usize(tcx) {\n             Some(0) => InhabitedPredicate::True,\n             Some(1..) => ty.inhabited_predicate(tcx),\n             None => ty.inhabited_predicate(tcx).or(tcx, InhabitedPredicate::ConstIsZero(len)),"}, {"sha": "840bc6df2d56ae9b5bb20ec852727b9bae961569", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -261,7 +261,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // Arrays give us `[]`, `[{ty}; _]` and `[{ty}; N]`\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_string())));\n-                let len = len.kind().try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n+                let len = len.kind().try_to_value().and_then(|v| v.try_to_target_usize(self.tcx));\n                 flags.push((sym::_Self, Some(format!(\"[{}; _]\", aty))));\n                 if let Some(n) = len {\n                     flags.push((sym::_Self, Some(format!(\"[{}; {}]\", aty, n))));"}, {"sha": "4dc750c03b488d1a80cd5e66a33e4b09a9dcba18", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n             if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n-            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n+            if let Ok(element_count) = element_count.try_to_target_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < u128::from(element_count) * u128::from(element_size);\n "}, {"sha": "32c6312e06946a1180235d3de00db25ebff23a8c", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if let ExprKind::Repeat(_, _) = expr.kind\n           && let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind()\n           && let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind()\n-          && let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx)\n+          && let Ok(element_count) = element_count.try_to_target_usize(cx.tcx)\n           && let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes())\n           && !cx.tcx.hir().parent_iter(expr.hir_id)\n               .any(|(_, node)| matches!(node, Node::Item(Item { kind: ItemKind::Static(..), .. })))"}, {"sha": "8b00ce2cc258632bed3ee8259c169a86870e2ec4", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -640,7 +640,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n         },\n         mir::ConstantKind::Val(ConstValue::ByRef { alloc, offset: _ }, _) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match len.kind().try_to_machine_usize(tcx) {\n+                ty::Float(FloatTy::F32) => match len.kind().try_to_target_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * usize::try_from(len).unwrap()))\n@@ -651,7 +651,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match len.kind().try_to_machine_usize(tcx) {\n+                ty::Float(FloatTy::F64) => match len.kind().try_to_target_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * usize::try_from(len).unwrap()))"}, {"sha": "cf1ff603281ee3255b9d400ede5781d70aa61fff", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -718,7 +718,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n             throw_ub!(PointerOutOfBounds {\n                 alloc_id,\n                 alloc_size,\n-                ptr_offset: this.machine_usize_to_isize(base_offset.bytes()),\n+                ptr_offset: this.target_usize_to_isize(base_offset.bytes()),\n                 ptr_size: size,\n                 msg: CheckInAllocMsg::InboundsTest\n             });"}, {"sha": "d61e17cbf9a4aee3de02fabb8917b71baef32e19", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -236,7 +236,7 @@ impl MainThreadState {\n                     this.machine.main_fn_ret_place.unwrap().ptr,\n                     this.machine.layouts.isize,\n                 );\n-                let exit_code = this.read_machine_isize(&ret_place.into())?;\n+                let exit_code = this.read_target_isize(&ret_place.into())?;\n                 // Need to call this ourselves since we are not going to return to the scheduler\n                 // loop, and we want the main thread TLS to not show up as memory leaks.\n                 this.terminate_active_thread()?;\n@@ -287,7 +287,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // First argument is constructed later, because it's skipped if the entry function uses #[start].\n \n     // Second argument (argc): length of `config.args`.\n-    let argc = Scalar::from_machine_usize(u64::try_from(config.args.len()).unwrap(), &ecx);\n+    let argc = Scalar::from_target_usize(u64::try_from(config.args.len()).unwrap(), &ecx);\n     // Third argument (`argv`): created from `config.args`.\n     let argv = {\n         // Put each argument in memory, collect pointers."}, {"sha": "5286023e0f64e0174e22c1dfb4f64288e2be77ad", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -758,10 +758,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_mut();\n         let seconds_place = this.mplace_field(tp, 0)?;\n         let seconds_scalar = this.read_scalar(&seconds_place.into())?;\n-        let seconds = seconds_scalar.to_machine_isize(this)?;\n+        let seconds = seconds_scalar.to_target_isize(this)?;\n         let nanoseconds_place = this.mplace_field(tp, 1)?;\n         let nanoseconds_scalar = this.read_scalar(&nanoseconds_place.into())?;\n-        let nanoseconds = nanoseconds_scalar.to_machine_isize(this)?;\n+        let nanoseconds = nanoseconds_scalar.to_target_isize(this)?;\n \n         Ok(try {\n             // tv_sec must be non-negative."}, {"sha": "2ba18293121dcaa3bb7c11a875953b1b86f0ff6e", "filename": "src/tools/miri/src/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -207,7 +207,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n                     .checked_add(max(size.bytes(), 1))\n                     .ok_or_else(|| err_exhaust!(AddressSpaceFull))?;\n                 // Even if `Size` didn't overflow, we might still have filled up the address space.\n-                if global_state.next_base_addr > ecx.machine_usize_max() {\n+                if global_state.next_base_addr > ecx.target_usize_max() {\n                     throw_exhaust!(AddressSpaceFull);\n                 }\n                 // Given that `next_base_addr` increases in each allocation, pushing the"}, {"sha": "79d5dfb5551bd47a72425068cb495c490a28c8be", "filename": "src/tools/miri/src/operator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Foperator.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -56,7 +56,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriInterpCx<'mir, 'tcx> {\n             Offset => {\n                 assert!(left.layout.ty.is_unsafe_ptr());\n                 let ptr = left.to_scalar().to_pointer(self)?;\n-                let offset = right.to_scalar().to_machine_isize(self)?;\n+                let offset = right.to_scalar().to_target_isize(self)?;\n \n                 let pointee_ty =\n                     left.layout.ty.builtin_deref(true).expect(\"Offset called on non-ptr type\").ty;\n@@ -73,14 +73,14 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriInterpCx<'mir, 'tcx> {\n                 // We do the actual operation with usize-typed scalars.\n                 let left = ImmTy::from_uint(ptr.addr().bytes(), self.machine.layouts.usize);\n                 let right = ImmTy::from_uint(\n-                    right.to_scalar().to_machine_usize(self)?,\n+                    right.to_scalar().to_target_usize(self)?,\n                     self.machine.layouts.usize,\n                 );\n                 let (result, overflowing, _ty) =\n                     self.overflowing_binary_op(bin_op, &left, &right)?;\n                 // Construct a new pointer with the provenance of `ptr` (the LHS).\n                 let result_ptr =\n-                    Pointer::new(ptr.provenance, Size::from_bytes(result.to_machine_usize(self)?));\n+                    Pointer::new(ptr.provenance, Size::from_bytes(result.to_target_usize(self)?));\n                 (Scalar::from_maybe_pointer(result_ptr, self), overflowing, left.layout.ty)\n             }\n "}, {"sha": "1e4ab2f0f622730109c28c5ccec807c646ef62fb", "filename": "src/tools/miri/src/shims/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fbacktrace.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -24,7 +24,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let frame_count = this.active_thread_stack().len();\n \n-        this.write_scalar(Scalar::from_machine_usize(frame_count.try_into().unwrap(), this), dest)\n+        this.write_scalar(Scalar::from_target_usize(frame_count.try_into().unwrap(), this), dest)\n     }\n \n     fn handle_miri_get_backtrace(\n@@ -205,11 +205,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             1 => {\n                 this.write_scalar(\n-                    Scalar::from_machine_usize(name.len().try_into().unwrap(), this),\n+                    Scalar::from_target_usize(name.len().try_into().unwrap(), this),\n                     &this.mplace_field(&dest, 0)?.into(),\n                 )?;\n                 this.write_scalar(\n-                    Scalar::from_machine_usize(filename.len().try_into().unwrap(), this),\n+                    Scalar::from_target_usize(filename.len().try_into().unwrap(), this),\n                     &this.mplace_field(&dest, 1)?.into(),\n                 )?;\n             }"}, {"sha": "f50c135435fd778713745547338c39baf6d69530", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -323,7 +323,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.assert_target_os_is_unix(\"getcwd\");\n \n         let buf = this.read_pointer(buf_op)?;\n-        let size = this.read_machine_usize(size_op)?;\n+        let size = this.read_target_usize(size_op)?;\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`getcwd`\", reject_with)?;"}, {"sha": "e628c44a86788697d70a2911364628166fb19655", "filename": "src/tools/miri/src/shims/ffi_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fffi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fffi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fffi_support.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -36,7 +36,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             ty::Int(IntTy::Isize) => {\n                 // This will fail if host != target, but then the entire FFI thing probably won't work well\n                 // in that situation.\n-                return Ok(CArg::ISize(k.to_machine_isize(cx)?.try_into().unwrap()));\n+                return Ok(CArg::ISize(k.to_target_isize(cx)?.try_into().unwrap()));\n             }\n             // the uints\n             ty::Uint(UintTy::U8) => {\n@@ -54,7 +54,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             ty::Uint(UintTy::Usize) => {\n                 // This will fail if host != target, but then the entire FFI thing probably won't work well\n                 // in that situation.\n-                return Ok(CArg::USize(k.to_machine_usize(cx)?.try_into().unwrap()));\n+                return Ok(CArg::USize(k.to_target_usize(cx)?.try_into().unwrap()));\n             }\n             _ => {}\n         }"}, {"sha": "2d9eb37a2580672c442241150276505535bce3c5", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -449,7 +449,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr, out, out_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let out = this.read_pointer(out)?;\n-                let out_size = this.read_scalar(out_size)?.to_machine_usize(this)?;\n+                let out_size = this.read_scalar(out_size)?.to_target_usize(this)?;\n \n                 // The host affects program behavior here, so this requires isolation to be disabled.\n                 this.check_no_isolation(\"`miri_host_to_target_path`\")?;\n@@ -490,7 +490,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [bytes] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let (ptr, len) = this.read_immediate(bytes)?.to_scalar_pair();\n                 let ptr = ptr.to_pointer(this)?;\n-                let len = len.to_machine_usize(this)?;\n+                let len = len.to_target_usize(this)?;\n                 let msg = this.read_bytes_ptr_strip_provenance(ptr, Size::from_bytes(len))?;\n \n                 // Note: we're ignoring errors writing to host stdout/stderr.\n@@ -504,15 +504,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Standard C allocation\n             \"malloc\" => {\n                 let [size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let size = this.read_machine_usize(size)?;\n+                let size = this.read_target_usize(size)?;\n                 let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C)?;\n                 this.write_pointer(res, dest)?;\n             }\n             \"calloc\" => {\n                 let [items, len] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let items = this.read_machine_usize(items)?;\n-                let len = this.read_machine_usize(len)?;\n+                let items = this.read_target_usize(items)?;\n+                let len = this.read_target_usize(len)?;\n                 let size = items\n                     .checked_mul(len)\n                     .ok_or_else(|| err_ub_format!(\"overflow during calloc size computation\"))?;\n@@ -528,16 +528,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [old_ptr, new_size] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let old_ptr = this.read_pointer(old_ptr)?;\n-                let new_size = this.read_machine_usize(new_size)?;\n+                let new_size = this.read_target_usize(new_size)?;\n                 let res = this.realloc(old_ptr, new_size, MiriMemoryKind::C)?;\n                 this.write_pointer(res, dest)?;\n             }\n \n             // Rust allocation\n             \"__rust_alloc\" | \"miri_alloc\" => {\n                 let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_machine_usize(size)?;\n-                let align = this.read_machine_usize(align)?;\n+                let size = this.read_target_usize(size)?;\n+                let align = this.read_target_usize(align)?;\n \n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n                     Self::check_alloc_request(size, align)?;\n@@ -569,8 +569,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_machine_usize(size)?;\n-                let align = this.read_machine_usize(align)?;\n+                let size = this.read_target_usize(size)?;\n+                let align = this.read_target_usize(align)?;\n \n                 return this.emulate_allocator(Symbol::intern(\"__rg_alloc_zeroed\"), |this| {\n                     Self::check_alloc_request(size, align)?;\n@@ -593,8 +593,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"__rust_dealloc\" | \"miri_dealloc\" => {\n                 let [ptr, old_size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_machine_usize(old_size)?;\n-                let align = this.read_machine_usize(align)?;\n+                let old_size = this.read_target_usize(old_size)?;\n+                let align = this.read_target_usize(align)?;\n \n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n                     let memory_kind = match link_name.as_str() {\n@@ -625,9 +625,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr, old_size, align, new_size] =\n                     this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_machine_usize(old_size)?;\n-                let align = this.read_machine_usize(align)?;\n-                let new_size = this.read_machine_usize(new_size)?;\n+                let old_size = this.read_target_usize(old_size)?;\n+                let align = this.read_target_usize(align)?;\n+                let new_size = this.read_target_usize(new_size)?;\n                 // No need to check old_size; we anyway check that they match the allocation.\n \n                 return this.emulate_allocator(Symbol::intern(\"__rg_realloc\"), |this| {\n@@ -651,7 +651,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let left = this.read_pointer(left)?;\n                 let right = this.read_pointer(right)?;\n-                let n = Size::from_bytes(this.read_machine_usize(n)?);\n+                let n = Size::from_bytes(this.read_target_usize(n)?);\n \n                 let result = {\n                     let left_bytes = this.read_bytes_ptr_strip_provenance(left, n)?;\n@@ -672,7 +672,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n-                let num = this.read_machine_usize(num)?;\n+                let num = this.read_target_usize(num)?;\n                 // The docs say val is \"interpreted as unsigned char\".\n                 #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n                 let val = val as u8;\n@@ -696,7 +696,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let val = this.read_scalar(val)?.to_i32()?;\n-                let num = this.read_machine_usize(num)?;\n+                let num = this.read_target_usize(num)?;\n                 // The docs say val is \"interpreted as unsigned char\".\n                 #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n                 let val = val as u8;\n@@ -717,7 +717,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ptr = this.read_pointer(ptr)?;\n                 let n = this.read_c_str(ptr)?.len();\n                 this.write_scalar(\n-                    Scalar::from_machine_usize(u64::try_from(n).unwrap(), this),\n+                    Scalar::from_target_usize(u64::try_from(n).unwrap(), this),\n                     dest,\n                 )?;\n             }"}, {"sha": "d21a1560699c24f0ddd9806022e3f919aef0ed3e", "filename": "src/tools/miri/src/shims/intrinsics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -111,8 +111,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ty_layout = this.layout_of(ty)?;\n                 let val_byte = this.read_scalar(val_byte)?.to_u8()?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let count = this.read_machine_usize(count)?;\n-                // `checked_mul` enforces a too small bound (the correct one would probably be machine_isize_max),\n+                let count = this.read_target_usize(count)?;\n+                // `checked_mul` enforces a too small bound (the correct one would probably be target_isize_max),\n                 // but no actual allocation can be big enough for the difference to be noticeable.\n                 let byte_count = ty_layout.size.checked_mul(count, this).ok_or_else(|| {\n                     err_ub_format!(\"overflow computing total size of `{intrinsic_name}`\")\n@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [ptr, mask] = check_arg_count(args)?;\n \n                 let ptr = this.read_pointer(ptr)?;\n-                let mask = this.read_machine_usize(mask)?;\n+                let mask = this.read_target_usize(mask)?;\n \n                 let masked_addr = Size::from_bytes(ptr.addr().bytes() & mask);\n "}, {"sha": "f2e16521290fe98e8fdd397f14a15eb7e670eb73", "filename": "src/tools/miri/src/shims/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -202,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                         }\n                         Op::WrappingOffset => {\n                             let ptr = left.to_scalar().to_pointer(this)?;\n-                            let offset_count = right.to_scalar().to_machine_isize(this)?;\n+                            let offset_count = right.to_scalar().to_target_isize(this)?;\n                             let pointee_ty = left.layout.ty.builtin_deref(true).unwrap().ty;\n \n                             let pointee_size = i64::try_from(this.layout_of(pointee_ty)?.size.bytes()).unwrap();"}, {"sha": "dbc48876a4b0651c2a8e14534ec5a64b4d9a3bf9", "filename": "src/tools/miri/src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -80,7 +80,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             return Ok(false);\n         }\n \n-        let req_align = this.read_machine_usize(align_op)?;\n+        let req_align = this.read_target_usize(align_op)?;\n \n         // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {\n@@ -106,7 +106,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         // Return error result (usize::MAX), and jump to caller.\n-        this.write_scalar(Scalar::from_machine_usize(this.machine_usize_max(), this), dest)?;\n+        this.write_scalar(Scalar::from_target_usize(this.target_usize_max(), this), dest)?;\n         this.go_to_block(ret);\n         Ok(true)\n     }"}, {"sha": "e9119f9e1eced337bee74b36c0f743e258686161", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> TlsData<'tcx> {\n     ) -> InterpResult<'tcx> {\n         match self.keys.get_mut(&key) {\n             Some(TlsEntry { data, .. }) => {\n-                if new_data.to_machine_usize(cx)? != 0 {\n+                if new_data.to_target_usize(cx)? != 0 {\n                     trace!(\"TLS key {} for thread {:?} stored: {:?}\", key, thread_id, new_data);\n                     data.insert(thread_id, new_data);\n                 } else {\n@@ -356,7 +356,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             state.last_key = Some(key);\n             trace!(\"Running TLS dtor {:?} on {:?} at {:?}\", instance, ptr, active_thread);\n             assert!(\n-                !ptr.to_machine_usize(this).unwrap() != 0,\n+                !ptr.to_target_usize(this).unwrap() != 0,\n                 \"data can't be NULL when dtor is called!\"\n             );\n "}, {"sha": "c371e85c312e8ff0f6f7d1051d9f83e6c9a06276", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -78,19 +78,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [fd, buf, count] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_pointer(buf)?;\n-                let count = this.read_machine_usize(count)?;\n+                let count = this.read_target_usize(count)?;\n                 let result = this.read(fd, buf, count)?;\n-                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(result, this), dest)?;\n             }\n             \"write\" => {\n                 let [fd, buf, n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_pointer(buf)?;\n-                let count = this.read_machine_usize(n)?;\n+                let count = this.read_target_usize(n)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, count);\n                 let result = this.write(fd, buf, count)?;\n                 // Now, `result` is the value we return back to the program.\n-                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(result, this), dest)?;\n             }\n             \"unlink\" => {\n                 let [path] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n@@ -151,14 +151,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"readlink\" => {\n                 let [pathname, buf, bufsize] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.readlink(pathname, buf, bufsize)?;\n-                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(result, this), dest)?;\n             }\n             \"posix_fadvise\" => {\n                 let [fd, offset, len, advice] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(fd)?.to_i32()?;\n-                this.read_machine_isize(offset)?;\n-                this.read_machine_isize(len)?;\n+                this.read_target_isize(offset)?;\n+                this.read_target_isize(len)?;\n                 this.read_scalar(advice)?.to_i32()?;\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n@@ -191,8 +191,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"posix_memalign\" => {\n                 let [ret, align, size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ret = this.deref_operand(ret)?;\n-                let align = this.read_machine_usize(align)?;\n-                let size = this.read_machine_usize(size)?;\n+                let align = this.read_target_usize(align)?;\n+                let size = this.read_target_usize(size)?;\n                 // Align must be power of 2, and also at least ptr-sized (POSIX rules).\n                 // But failure to adhere to this is not UB, it's an error condition.\n                 if !align.is_power_of_two() || align < this.pointer_size().bytes() {\n@@ -216,7 +216,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Dynamic symbol loading\n             \"dlsym\" => {\n                 let [handle, symbol] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_machine_usize(handle)?;\n+                this.read_target_usize(handle)?;\n                 let symbol = this.read_pointer(symbol)?;\n                 let symbol_name = this.read_c_str(symbol)?;\n                 if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.os)? {\n@@ -472,7 +472,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [errnum, buf, buflen] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let errnum = this.read_scalar(errnum)?;\n                 let buf = this.read_pointer(buf)?;\n-                let buflen = this.read_machine_usize(buflen)?;\n+                let buflen = this.read_target_usize(buflen)?;\n \n                 let error = this.try_errnum_to_io_error(errnum)?;\n                 let formatted = match error {\n@@ -565,7 +565,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let uid = this.read_scalar(uid)?.to_u32()?;\n                 let pwd = this.deref_operand(pwd)?;\n                 let buf = this.read_pointer(buf)?;\n-                let buflen = this.read_machine_usize(buflen)?;\n+                let buflen = this.read_target_usize(buflen)?;\n                 let result = this.deref_operand(result)?;\n \n                 // Must be for \"us\"."}, {"sha": "d05c4d98fad6fd0b315f5d3c1556b7ee850e3f2c", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -754,7 +754,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // We cap the number of read bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n         let count = count\n-            .min(u64::try_from(this.machine_isize_max()).unwrap())\n+            .min(u64::try_from(this.target_isize_max()).unwrap())\n             .min(u64::try_from(isize::MAX).unwrap());\n         let communicate = this.machine.communicate();\n \n@@ -807,7 +807,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // We cap the number of written bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n         let count = count\n-            .min(u64::try_from(this.machine_isize_max()).unwrap())\n+            .min(u64::try_from(this.target_isize_max()).unwrap())\n             .min(u64::try_from(isize::MAX).unwrap());\n         let communicate = this.machine.communicate();\n \n@@ -1290,7 +1290,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // The libc API for opendir says that this method returns a pointer to an opaque\n                 // structure, but we are returning an ID number. Thus, pass it as a scalar of\n                 // pointer width.\n-                Ok(Scalar::from_machine_usize(id, this))\n+                Ok(Scalar::from_target_usize(id, this))\n             }\n             Err(e) => {\n                 this.set_last_error_from_io_error(e.kind())?;\n@@ -1307,7 +1307,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         this.assert_target_os(\"linux\", \"readdir64\");\n \n-        let dirp = this.read_machine_usize(dirp_op)?;\n+        let dirp = this.read_target_usize(dirp_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1399,7 +1399,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         this.assert_target_os(\"macos\", \"readdir_r\");\n \n-        let dirp = this.read_machine_usize(dirp_op)?;\n+        let dirp = this.read_target_usize(dirp_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1492,7 +1492,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn closedir(&mut self, dirp_op: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let dirp = this.read_machine_usize(dirp_op)?;\n+        let dirp = this.read_target_usize(dirp_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1656,7 +1656,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let pathname = this.read_path_from_c_str(this.read_pointer(pathname_op)?)?;\n         let buf = this.read_pointer(buf_op)?;\n-        let bufsize = this.read_machine_usize(bufsize_op)?;\n+        let bufsize = this.read_target_usize(bufsize_op)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -1727,7 +1727,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             this.reject_in_isolation(\"`realpath`\", reject_with)?;\n             let eacc = this.eval_libc(\"EACCES\");\n             this.set_last_error(eacc)?;\n-            return Ok(Scalar::from_machine_usize(0, this));\n+            return Ok(Scalar::from_target_usize(0, this));\n         }\n \n         let result = std::fs::canonicalize(pathname);\n@@ -1758,7 +1758,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                         // seems like a bit of a mess anyway: <https://eklitzke.org/path-max-is-tricky>.\n                         let enametoolong = this.eval_libc(\"ENAMETOOLONG\");\n                         this.set_last_error(enametoolong)?;\n-                        return Ok(Scalar::from_machine_usize(0, this));\n+                        return Ok(Scalar::from_target_usize(0, this));\n                     }\n                     processed_ptr\n                 };\n@@ -1767,7 +1767,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n             Err(e) => {\n                 this.set_last_error_from_io_error(e.kind())?;\n-                Ok(Scalar::from_machine_usize(0, this))\n+                Ok(Scalar::from_target_usize(0, this))\n             }\n         }\n     }"}, {"sha": "9f6938424fb2d5c40d7f6c47d39cd96f21730e1b", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -119,18 +119,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // argument, we have to also check all arguments *before* it to ensure that they\n                 // have the right type.\n \n-                let sys_getrandom = this.eval_libc(\"SYS_getrandom\").to_machine_usize(this)?;\n+                let sys_getrandom = this.eval_libc(\"SYS_getrandom\").to_target_usize(this)?;\n \n-                let sys_statx = this.eval_libc(\"SYS_statx\").to_machine_usize(this)?;\n+                let sys_statx = this.eval_libc(\"SYS_statx\").to_target_usize(this)?;\n \n-                let sys_futex = this.eval_libc(\"SYS_futex\").to_machine_usize(this)?;\n+                let sys_futex = this.eval_libc(\"SYS_futex\").to_target_usize(this)?;\n \n                 if args.is_empty() {\n                     throw_ub_format!(\n                         \"incorrect number of arguments for syscall: got 0, expected at least 1\"\n                     );\n                 }\n-                match this.read_machine_usize(&args[0])? {\n+                match this.read_target_usize(&args[0])? {\n                     // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n                     // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                     id if id == sys_getrandom => {\n@@ -155,7 +155,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                         }\n                         let result =\n                             this.linux_statx(&args[1], &args[2], &args[3], &args[4], &args[5])?;\n-                        this.write_scalar(Scalar::from_machine_isize(result.into(), this), dest)?;\n+                        this.write_scalar(Scalar::from_target_isize(result.into(), this), dest)?;\n                     }\n                     // `futex` is used by some synchonization primitives.\n                     id if id == sys_futex => {\n@@ -178,7 +178,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [pid, cpusetsize, mask] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(pid)?.to_i32()?;\n-                this.read_machine_usize(cpusetsize)?;\n+                this.read_target_usize(cpusetsize)?;\n                 this.deref_operand(mask)?;\n                 // FIXME: we just return an error; `num_cpus` then falls back to `sysconf`.\n                 let einval = this.eval_libc(\"EINVAL\");\n@@ -210,14 +210,14 @@ fn getrandom<'tcx>(\n     dest: &PlaceTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx> {\n     let ptr = this.read_pointer(ptr)?;\n-    let len = this.read_machine_usize(len)?;\n+    let len = this.read_target_usize(len)?;\n \n     // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n     // neither of which have any effect on our current PRNG.\n     // See <https://github.com/rust-lang/rust/pull/79196> for a discussion of argument sizes.\n     let _flags = this.read_scalar(flags)?.to_i32();\n \n     this.gen_random(ptr, len)?;\n-    this.write_scalar(Scalar::from_machine_usize(len, this), dest)?;\n+    this.write_scalar(Scalar::from_target_usize(len, this), dest)?;\n     Ok(())\n }"}, {"sha": "ffe3ca69c5866197a68fd91638b33d86455f71a1", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -81,7 +81,7 @@ pub fn futex<'tcx>(\n             if bitset == 0 {\n                 let einval = this.eval_libc(\"EINVAL\");\n                 this.set_last_error(einval)?;\n-                this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(-1, this), dest)?;\n                 return Ok(());\n             }\n \n@@ -101,7 +101,7 @@ pub fn futex<'tcx>(\n                     None => {\n                         let einval = this.eval_libc(\"EINVAL\");\n                         this.set_last_error(einval)?;\n-                        this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n+                        this.write_scalar(Scalar::from_target_isize(-1, this), dest)?;\n                         return Ok(());\n                     }\n                 };\n@@ -173,7 +173,7 @@ pub fn futex<'tcx>(\n                 this.block_thread(thread);\n                 this.futex_wait(addr_usize, thread, bitset);\n                 // Succesfully waking up from FUTEX_WAIT always returns zero.\n-                this.write_scalar(Scalar::from_machine_isize(0, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(0, this), dest)?;\n                 // Register a timeout callback if a timeout was specified.\n                 // This callback will override the return value when the timeout triggers.\n                 if let Some(timeout_time) = timeout_time {\n@@ -196,7 +196,7 @@ pub fn futex<'tcx>(\n                             this.futex_remove_waiter(self.addr_usize, self.thread);\n                             let etimedout = this.eval_libc(\"ETIMEDOUT\");\n                             this.set_last_error(etimedout)?;\n-                            this.write_scalar(Scalar::from_machine_isize(-1, this), &self.dest)?;\n+                            this.write_scalar(Scalar::from_target_isize(-1, this), &self.dest)?;\n \n                             Ok(())\n                         }\n@@ -213,7 +213,7 @@ pub fn futex<'tcx>(\n                 // right away without sleeping: -1 and errno set to EAGAIN.\n                 let eagain = this.eval_libc(\"EAGAIN\");\n                 this.set_last_error(eagain)?;\n-                this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(-1, this), dest)?;\n             }\n         }\n         // FUTEX_WAKE: (int *addr, int op = FUTEX_WAKE, int val)\n@@ -239,7 +239,7 @@ pub fn futex<'tcx>(\n             if bitset == 0 {\n                 let einval = this.eval_libc(\"EINVAL\");\n                 this.set_last_error(einval)?;\n-                this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(-1, this), dest)?;\n                 return Ok(());\n             }\n             // Together with the SeqCst fence in futex_wait, this makes sure that futex_wait\n@@ -257,7 +257,7 @@ pub fn futex<'tcx>(\n                     break;\n                 }\n             }\n-            this.write_scalar(Scalar::from_machine_isize(n, this), dest)?;\n+            this.write_scalar(Scalar::from_target_isize(n, this), dest)?;\n         }\n         op => throw_unsup_format!(\"Miri does not support `futex` syscall with op={}\", op),\n     }"}, {"sha": "9177ecefe1207372ff3c4b5f9938a2328038b489", "filename": "src/tools/miri/src/shims/unix/macos/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fdlsym.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -39,7 +39,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             Dlsym::getentropy => {\n                 let [ptr, len] = check_arg_count(args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let len = this.read_machine_usize(len)?;\n+                let len = this.read_target_usize(len)?;\n                 this.gen_random(ptr, len)?;\n                 this.write_null(dest)?;\n             }"}, {"sha": "1271788a97ef069998bcd46c3a3bee4936b4d69e", "filename": "src/tools/miri/src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -161,13 +161,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n                 let [thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_machine_usize(thread)?;\n+                this.read_target_usize(thread)?;\n                 let stack_addr = Scalar::from_uint(this.machine.stack_addr, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n                 let [thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_machine_usize(thread)?;\n+                this.read_target_usize(thread)?;\n                 let stack_size = Scalar::from_uint(this.machine.stack_size, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n             }\n@@ -176,7 +176,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"pthread_setname_np\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let thread = this.pthread_self()?;\n-                let max_len = this.eval_libc(\"MAXTHREADNAMESIZE\").to_machine_usize(this)?;\n+                let max_len = this.eval_libc(\"MAXTHREADNAMESIZE\").to_target_usize(this)?;\n                 let res = this.pthread_setname_np(\n                     thread,\n                     this.read_scalar(name)?,"}, {"sha": "6165cfd2823070991e8b212c67db0e17d400674b", "filename": "src/tools/miri/src/shims/unix/thread.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -42,7 +42,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             throw_unsup_format!(\"Miri supports pthread_join only with retval==NULL\");\n         }\n \n-        let thread_id = this.read_machine_usize(thread)?;\n+        let thread_id = this.read_target_usize(thread)?;\n         this.join_thread_exclusive(thread_id.try_into().expect(\"thread ID should fit in u32\"))?;\n \n         Ok(0)\n@@ -51,7 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn pthread_detach(&mut self, thread: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let thread_id = this.read_machine_usize(thread)?;\n+        let thread_id = this.read_target_usize(thread)?;\n         this.detach_thread(\n             thread_id.try_into().expect(\"thread ID should fit in u32\"),\n             /*allow_terminated_joined*/ false,\n@@ -64,7 +64,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let this = self.eval_context_mut();\n \n         let thread_id = this.get_active_thread();\n-        Ok(Scalar::from_machine_usize(thread_id.into(), this))\n+        Ok(Scalar::from_target_usize(thread_id.into(), this))\n     }\n \n     /// Set the name of the current thread. `max_name_len` is the maximal length of the name\n@@ -77,7 +77,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n \n-        let thread = ThreadId::try_from(thread.to_machine_usize(this)?).unwrap();\n+        let thread = ThreadId::try_from(thread.to_target_usize(this)?).unwrap();\n         let name = name.to_pointer(this)?;\n \n         let name = this.read_c_str(name)?.to_owned();\n@@ -100,9 +100,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n \n-        let thread = ThreadId::try_from(thread.to_machine_usize(this)?).unwrap();\n+        let thread = ThreadId::try_from(thread.to_target_usize(this)?).unwrap();\n         let name_out = name_out.to_pointer(this)?;\n-        let len = len.to_machine_usize(this)?;\n+        let len = len.to_target_usize(this)?;\n \n         let name = this.get_thread_name(thread).to_owned();\n         let (success, _written) = this.write_c_str(&name, name_out, len)?;"}, {"sha": "60dd299c438130bc8d58a5d97a1cb66801e8632d", "filename": "src/tools/miri/src/shims/windows/dlsym.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fdlsym.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -67,10 +67,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     byte_offset,\n                     _key,\n                 ] = check_arg_count(args)?;\n-                let handle = this.read_machine_isize(handle)?;\n+                let handle = this.read_target_isize(handle)?;\n                 let buf = this.read_pointer(buf)?;\n                 let n = this.read_scalar(n)?.to_u32()?;\n-                let byte_offset = this.read_machine_usize(byte_offset)?; // is actually a pointer\n+                let byte_offset = this.read_target_usize(byte_offset)?; // is actually a pointer\n                 let io_status_block = this.deref_operand(io_status_block)?;\n \n                 if byte_offset != 0 {\n@@ -104,7 +104,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     let io_status_information =\n                         this.mplace_field_named(&io_status_block, \"Information\")?;\n                     this.write_scalar(\n-                        Scalar::from_machine_usize(n.into(), this),\n+                        Scalar::from_target_usize(n.into(), this),\n                         &io_status_information.into(),\n                     )?;\n                 }"}, {"sha": "a3d7176a9768623e9ff8c2f726aab6cc40c8862a", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -73,9 +73,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"HeapAlloc\" => {\n                 let [handle, flags, size] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_machine_isize(handle)?;\n+                this.read_target_isize(handle)?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n-                let size = this.read_machine_usize(size)?;\n+                let size = this.read_target_usize(size)?;\n                 let heap_zero_memory = 0x00000008; // HEAP_ZERO_MEMORY\n                 let zero_init = (flags & heap_zero_memory) == heap_zero_memory;\n                 let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap)?;\n@@ -84,7 +84,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"HeapFree\" => {\n                 let [handle, flags, ptr] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_machine_isize(handle)?;\n+                this.read_target_isize(handle)?;\n                 this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_pointer(ptr)?;\n                 this.free(ptr, MiriMemoryKind::WinHeap)?;\n@@ -93,10 +93,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"HeapReAlloc\" => {\n                 let [handle, flags, ptr, size] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_machine_isize(handle)?;\n+                this.read_target_isize(handle)?;\n                 this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let size = this.read_machine_usize(size)?;\n+                let size = this.read_target_usize(size)?;\n                 let res = this.realloc(ptr, size, MiriMemoryKind::WinHeap)?;\n                 this.write_pointer(res, dest)?;\n             }\n@@ -299,7 +299,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 #[allow(non_snake_case)]\n                 let [hModule, lpProcName] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_machine_isize(hModule)?;\n+                this.read_target_isize(hModule)?;\n                 let name = this.read_c_str(this.read_pointer(lpProcName)?)?;\n                 if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.os)? {\n                     let ptr = this.create_fn_alloc_ptr(FnVal::Other(dlsym));\n@@ -323,7 +323,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [algorithm, ptr, len, flags] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let algorithm = this.read_scalar(algorithm)?;\n-                let algorithm = algorithm.to_machine_usize(this)?;\n+                let algorithm = algorithm.to_target_usize(this)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let len = this.read_scalar(len)?.to_u32()?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n@@ -357,7 +357,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // `term` needs this, so we fake it.\n                 let [console, buffer_info] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_machine_isize(console)?;\n+                this.read_target_isize(console)?;\n                 this.deref_operand(buffer_info)?;\n                 // Indicate an error.\n                 // FIXME: we should set last_error, but to what?\n@@ -371,7 +371,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // one it is. This is very fake, but libtest needs it so we cannot make it a\n                 // std-only shim.\n                 // FIXME: this should return real HANDLEs when io support is added\n-                this.write_scalar(Scalar::from_machine_isize(which.into(), this), dest)?;\n+                this.write_scalar(Scalar::from_target_isize(which.into(), this), dest)?;\n             }\n             \"CloseHandle\" => {\n                 let [handle] =\n@@ -386,7 +386,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.check_no_isolation(\"`GetModuleFileNameW`\")?;\n \n-                let handle = this.read_machine_usize(handle)?;\n+                let handle = this.read_target_usize(handle)?;\n                 let filename = this.read_pointer(filename)?;\n                 let size = this.read_scalar(size)?.to_u32()?;\n \n@@ -473,7 +473,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"GetConsoleMode\" if this.frame_in_std() => {\n                 let [console, mode] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                this.read_machine_isize(console)?;\n+                this.read_target_isize(console)?;\n                 this.deref_operand(mode)?;\n                 // Indicate an error.\n                 this.write_null(dest)?;"}, {"sha": "8bffa9991c75af7bbb07a8e9bbaf18efecad9d05", "filename": "src/tools/miri/src/shims/windows/handle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fhandle.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -124,14 +124,14 @@ impl Handle {\n         // see https://docs.microsoft.com/en-us/windows/win32/winprog64/interprocess-communication\n         #[allow(clippy::cast_possible_wrap)] // we want it to wrap\n         let signed_handle = self.to_packed() as i32;\n-        Scalar::from_machine_isize(signed_handle.into(), cx)\n+        Scalar::from_target_isize(signed_handle.into(), cx)\n     }\n \n     pub fn from_scalar<'tcx>(\n         handle: Scalar<Provenance>,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Option<Self>> {\n-        let sign_extended_handle = handle.to_machine_isize(cx)?;\n+        let sign_extended_handle = handle.to_target_isize(cx)?;\n \n         #[allow(clippy::cast_sign_loss)] // we want to lose the sign\n         let handle = if let Ok(signed_handle) = i32::try_from(sign_extended_handle) {"}, {"sha": "b9cc3e15be9fe3135eb57a2d4cc6511925c77bd4", "filename": "src/tools/miri/src/shims/windows/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -273,7 +273,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let ptr = this.read_pointer(ptr_op)?;\n         let compare = this.read_pointer(compare_op)?;\n-        let size = this.read_machine_usize(size_op)?;\n+        let size = this.read_target_usize(size_op)?;\n         let timeout_ms = this.read_scalar(timeout_op)?.to_u32()?;\n \n         let thread = this.get_active_thread();"}, {"sha": "9cbae1588598507ac5741edcf36dea2d0a1a59fd", "filename": "src/tools/miri/src/shims/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b7cdf393737ee6702a2b4cc01275c6bffbd3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fthread.rs?ref=38b7cdf393737ee6702a2b4cc01275c6bffbd3e2", "patch": "@@ -21,7 +21,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let security = this.read_pointer(security_op)?;\n         // stacksize is ignored, but still needs to be a valid usize\n-        this.read_machine_usize(stacksize_op)?;\n+        this.read_target_usize(stacksize_op)?;\n         let start_routine = this.read_pointer(start_op)?;\n         let func_arg = this.read_immediate(arg_op)?;\n         let flags = this.read_scalar(flags_op)?.to_u32()?;"}]}