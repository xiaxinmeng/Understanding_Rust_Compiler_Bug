{"sha": "0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTVjZjA2OTczYWE3NWJjMTcyOWU1YmMxYWEwYTYxMTUzNzAxNGM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-01T01:21:14Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:43:14Z"}, "message": "Fix a few accidental expectations", "tree": {"sha": "ed503f822750a7426ea8151b68896985f46b467d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed503f822750a7426ea8151b68896985f46b467d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "html_url": "https://github.com/rust-lang/rust/commit/0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545b92f46d98bf5c812343315025bfb92f37837f", "url": "https://api.github.com/repos/rust-lang/rust/commits/545b92f46d98bf5c812343315025bfb92f37837f", "html_url": "https://github.com/rust-lang/rust/commit/545b92f46d98bf5c812343315025bfb92f37837f"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "c9be17ff1ad2d2277049a9dbe1fcd4e6837c801e", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "patch": "@@ -1480,7 +1480,7 @@ impl Step for Extended {\n                 build.cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, name), target))\n                             .join(dir),\n                         &exe.join(name));\n-                t!(fs::remove_file(exe.join(name).join(\"manifest.in\")));\n+                build.remove(&exe.join(name).join(\"manifest.in\"));\n             };\n             prepare(\"rustc\");\n             prepare(\"cargo\");\n@@ -1498,7 +1498,7 @@ impl Step for Extended {\n             build.install(&etc.join(\"exe/modpath.iss\"), &exe, 0o644);\n             build.install(&etc.join(\"exe/upgrade.iss\"), &exe, 0o644);\n             build.install(&etc.join(\"gfx/rust-logo.ico\"), &exe, 0o644);\n-            t!(t!(File::create(exe.join(\"LICENSE.txt\"))).write_all(license.as_bytes()));\n+            build.create(&exe.join(\"LICENSE.txt\"), &license);\n \n             // Generate exe installer\n             let mut cmd = Command::new(\"iscc\");\n@@ -1633,7 +1633,7 @@ impl Step for Extended {\n                 candle(\"GccGroup.wxs\".as_ref());\n             }\n \n-            t!(t!(File::create(exe.join(\"LICENSE.rtf\"))).write_all(rtf.as_bytes()));\n+            build.create(&exe.join(\"LICENSE.rtf\"), &rtf);\n             build.install(&etc.join(\"gfx/banner.bmp\"), &exe, 0o644);\n             build.install(&etc.join(\"gfx/dialogbg.bmp\"), &exe, 0o644);\n \n@@ -1665,7 +1665,9 @@ impl Step for Extended {\n \n             build.run(&mut cmd);\n \n-            t!(fs::rename(exe.join(&filename), distdir(build).join(&filename)));\n+            if !build.config.dry_run {\n+                t!(fs::rename(exe.join(&filename), distdir(build).join(&filename)));\n+            }\n         }\n     }\n }\n@@ -1717,6 +1719,9 @@ impl Step for HashSign {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n+        if build.config.dry_run {\n+            return;\n+        }\n         let sign = build.config.dist_sign_folder.as_ref().unwrap_or_else(|| {\n             panic!(\"\\n\\nfailed to specify `dist.sign-folder` in `config.toml`\\n\\n\")\n         });"}, {"sha": "c76b6180749c916d02480db6dc930792940e2b5c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "patch": "@@ -1178,6 +1178,11 @@ impl Build {\n         };\n         iter.map(|e| t!(e)).collect::<Vec<_>>().into_iter()\n     }\n+\n+    fn remove(&self, f: &Path) {\n+        if self.config.dry_run { return; }\n+        fs::remove_file(f).unwrap_or_else(|_| panic!(\"failed to remove {:?}\", f));\n+    }\n }\n \n #[cfg(unix)]"}, {"sha": "db5891afd6b1fa59ac73c7c7a9590511d64299c4", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "patch": "@@ -235,6 +235,10 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n         return\n     }\n \n+    if build.config.dry_run {\n+        return;\n+    }\n+\n     let mut cmd = Command::new(llvm_config);\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2)"}, {"sha": "c175d2c69016f926ff6d24cdc74e97eb408b7d67", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5cf06973aa75bc1729e5bc1aa0a611537014c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0ce5cf06973aa75bc1729e5bc1aa0a611537014c", "patch": "@@ -926,15 +926,17 @@ impl Step for Compiletest {\n                 target: build.config.build,\n                 emscripten: false,\n             });\n-            let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n-            cmd.arg(\"--llvm-version\").arg(llvm_version);\n+            if !build.config.dry_run {\n+                let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+                cmd.arg(\"--llvm-version\").arg(llvm_version);\n+            }\n             if !build.is_rust_llvm(target) {\n                 cmd.arg(\"--system-llvm\");\n             }\n \n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n-            if suite == \"run-make-fulldeps\" {\n+            if !build.config.dry_run && suite == \"run-make-fulldeps\" {\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n                 cmd.arg(\"--cc\").arg(build.cc(target))\n@@ -1177,11 +1179,15 @@ impl Step for ErrorIndex {\n \n fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) -> bool {\n     let build = builder.build;\n-    let mut file = t!(File::open(markdown));\n-    let mut contents = String::new();\n-    t!(file.read_to_string(&mut contents));\n-    if !contents.contains(\"```\") {\n-        return true;\n+    match File::open(markdown) {\n+        Ok(mut file) => {\n+            let mut contents = String::new();\n+            t!(file.read_to_string(&mut contents));\n+            if !contents.contains(\"```\") {\n+                return true;\n+            }\n+        }\n+        Err(_) => {},\n     }\n \n     build.info(&format!(\"doc tests for: {}\", markdown.display()));"}]}