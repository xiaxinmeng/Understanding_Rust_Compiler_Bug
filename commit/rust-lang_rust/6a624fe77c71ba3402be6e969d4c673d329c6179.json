{"sha": "6a624fe77c71ba3402be6e969d4c673d329c6179", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNjI0ZmU3N2M3MWJhMzQwMmJlNmU5NjlkNGM2NzNkMzI5YzYxNzk=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-14T11:58:36Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-14T11:58:36Z"}, "message": "Merge pull request #662 from mcarton/#601\n\nFix #601", "tree": {"sha": "8eaabc13f8d36aa15982c0a071e675d9b090dccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eaabc13f8d36aa15982c0a071e675d9b090dccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a624fe77c71ba3402be6e969d4c673d329c6179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a624fe77c71ba3402be6e969d4c673d329c6179", "html_url": "https://github.com/rust-lang/rust/commit/6a624fe77c71ba3402be6e969d4c673d329c6179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a624fe77c71ba3402be6e969d4c673d329c6179/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5521a757077df87667b3c131119ad827ccf80ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5521a757077df87667b3c131119ad827ccf80ee8", "html_url": "https://github.com/rust-lang/rust/commit/5521a757077df87667b3c131119ad827ccf80ee8"}, {"sha": "cbe2de7fd273d25e6fc37abb4094a3ecfabbe359", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe2de7fd273d25e6fc37abb4094a3ecfabbe359", "html_url": "https://github.com/rust-lang/rust/commit/cbe2de7fd273d25e6fc37abb4094a3ecfabbe359"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "b975aefe1258a2dce059ddcde021a5c84017a030", "filename": "src/copies.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a624fe77c71ba3402be6e969d4c673d329c6179/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a624fe77c71ba3402be6e969d4c673d329c6179/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=6a624fe77c71ba3402be6e969d4c673d329c6179", "patch": "@@ -48,6 +48,7 @@ declare_lint! {\n ///     Bar => bar(),\n ///     Quz => quz(),\n ///     Baz => bar(), // <= oups\n+/// }\n /// ```\n declare_lint! {\n     pub MATCH_SAME_ARMS,"}, {"sha": "2754f743caa9585b81d1262576b0f43efc3fab64", "filename": "src/loops.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a624fe77c71ba3402be6e969d4c673d329c6179/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a624fe77c71ba3402be6e969d4c673d329c6179/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=6a624fe77c71ba3402be6e969d4c673d329c6179", "patch": "@@ -4,11 +4,12 @@ use rustc::lint::*;\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::middle::const_eval::{ConstVal, eval_const_expr_partial};\n use rustc::middle::def::Def;\n+use rustc::middle::region::CodeExtent;\n use rustc::middle::ty;\n use rustc_front::hir::*;\n use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use std::borrow::Cow;\n-use std::collections::{HashSet, HashMap};\n+use std::collections::HashMap;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro, expr_block,\n             span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, walk_ptrs_ty};\n@@ -338,19 +339,27 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n     if let ExprRange(Some(ref l), ref r) = arg.node {\n         // the var must be a single name\n         if let PatIdent(_, ref ident, _) = pat.node {\n+\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: ident.node.name,\n-                indexed: HashSet::new(),\n+                indexed: HashMap::new(),\n                 nonindex: false,\n             };\n             walk_expr(&mut visitor, body);\n+\n             // linting condition: we only indexed one variable\n             if visitor.indexed.len() == 1 {\n-                let indexed = visitor.indexed\n+                let (indexed, indexed_extent) = visitor.indexed\n                                      .into_iter()\n                                      .next()\n-                                     .expect(\"Len was nonzero, but no contents found\");\n+                                     .unwrap_or_else(|| unreachable!() /* len == 1 */);\n+\n+                // ensure that the indexed variable was declared before the loop, see #601\n+                let pat_extent = cx.tcx.region_maps.var_scope(pat.id);\n+                if cx.tcx.region_maps.is_subscope_of(indexed_extent, pat_extent) {\n+                    return;\n+                }\n \n                 let starts_at_zero = is_integer_literal(l, 0);\n \n@@ -673,7 +682,7 @@ fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n struct VarVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n     var: Name, // var name to look for as index\n-    indexed: HashSet<Name>, // indexed variables\n+    indexed: HashMap<Name, CodeExtent>, // indexed variables\n     nonindex: bool, // has the var been used otherwise?\n }\n \n@@ -689,8 +698,12 @@ impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n                         let ExprPath(None, ref seqvar) = seqexpr.node,\n                         seqvar.segments.len() == 1\n                     ], {\n-                        self.indexed.insert(seqvar.segments[0].identifier.name);\n-                        return;  // no need to walk further\n+                        let def_map = self.cx.tcx.def_map.borrow();\n+                        if let Some(def) = def_map.get(&seqexpr.id) {\n+                            let extent = self.cx.tcx.region_maps.var_scope(def.base_def.var_id());\n+                            self.indexed.insert(seqvar.segments[0].identifier.name, extent);\n+                            return;  // no need to walk further\n+                        }\n                     }\n                 }\n                 // we are not indexing anything, record that"}, {"sha": "b805963a03a05ef96cfa2c3c8816d71f9b14fe66", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a624fe77c71ba3402be6e969d4c673d329c6179/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a624fe77c71ba3402be6e969d4c673d329c6179/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=6a624fe77c71ba3402be6e969d4c673d329c6179", "patch": "@@ -192,6 +192,12 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n+    // See #601\n+    for i in 0..10 { // no error, id_col does not exist outside the loop\n+        let mut id_col = vec![0f64; 10];\n+        id_col[i] = 1f64;\n+    }\n+\n     /*\n     for i in (10..0).map(|x| x * 2) {\n         println!(\"{}\", i);"}]}