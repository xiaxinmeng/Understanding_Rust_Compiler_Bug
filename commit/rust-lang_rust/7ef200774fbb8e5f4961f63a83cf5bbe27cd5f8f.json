{"sha": "7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZjIwMDc3NGZiYjhlNWY0OTYxZjYzYTgzY2Y1YmJlMjdjZDVmOGY=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-17T21:36:27Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-18T03:26:21Z"}, "message": "libsyntax: Add `parse_view_item` method to Parser", "tree": {"sha": "be53283f1d658cca59bc8f832691e6dae6eeca07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be53283f1d658cca59bc8f832691e6dae6eeca07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "html_url": "https://github.com/rust-lang/rust/commit/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c96a79a74f10bed18b031ce0ac4126c56d6cfb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c96a79a74f10bed18b031ce0ac4126c56d6cfb3", "html_url": "https://github.com/rust-lang/rust/commit/9c96a79a74f10bed18b031ce0ac4126c56d6cfb3"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "9d6dece34da845d43217c6d45ac2272e90440343", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7ef200774fbb8e5f4961f63a83cf5bbe27cd5f8f", "patch": "@@ -5609,6 +5609,14 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse a ViewItem, e.g. `use foo::bar` or `extern crate foo`\n+    pub fn parse_view_item(&mut self, attrs: Vec<Attribute>) -> ViewItem {\n+        match self.parse_item_or_view_item(attrs, false) {\n+            IoviViewItem(vi) => vi,\n+            _ => self.fatal(\"expected `use` or `extern crate`\"),\n+        }\n+    }\n+\n     /// Parse, e.g., \"use a::b::{z,y}\"\n     fn parse_use(&mut self) -> ViewItem_ {\n         return ViewItemUse(self.parse_view_path());"}]}