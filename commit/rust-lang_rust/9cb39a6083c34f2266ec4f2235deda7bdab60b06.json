{"sha": "9cb39a6083c34f2266ec4f2235deda7bdab60b06", "node_id": "C_kwDOAAsO6NoAKDljYjM5YTYwODNjMzRmMjI2NmVjNGYyMjM1ZGVkYTdiZGFiNjBiMDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T15:40:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T15:40:49Z"}, "message": "Rollup merge of #93206 - ChrisDenton:ntopenfile, r=nagisa\n\nUse `NtCreateFile` instead of `NtOpenFile` to open a file\n\nGenerally the internal `Nt*` functions should be avoided but when we do need to use one we should stick to the most commonly used for the job. To that end, this PR replaces `NtOpenFile` with `NtCreateFile`.\n\nNOTE: The initial version of this comment hypothesised that this may help with some recent false positives from malware scanners. This hypothesis proved wrong. Sorry for the distraction.", "tree": {"sha": "7bbf7f516e7c9f3318828c4856e9cf5c7729ce88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbf7f516e7c9f3318828c4856e9cf5c7729ce88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb39a6083c34f2266ec4f2235deda7bdab60b06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAo8BCRBK7hj4Ov3rIwAArqcIAGAYoK7kJFQ5J1U5CS+sIlY1\ncygXQXYpjZMntHTQ68pIWZQmCOsdKDCJNhNilhhCxvwhmG8LAVmgT4kgFXpXBnEx\nXy+VUqKwqhfHWxBG61O/+GyLA2TMn6gZj9vpv3wsN5GfQTOQO6y+ckKrneSUAkIu\nj3s3I5lRQRw2nubjvWy0ZePOIiFSvgnpyWaV4K7UXaVorDK6GIehw+HoTWcHQLYh\nH1v7LQi0EVLQ2WSJOpJWIJHG1DKoEIdCvHAavFpYcWejgE7aTguq3e4gsJJv2oGQ\nRBQC8PnINO0qYGdYXV3WIwhELyHv+aCbCS9HytGjbGCC6vWi6wmUJtviEkUE0wQ=\n=Qfxg\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bbf7f516e7c9f3318828c4856e9cf5c7729ce88\nparent a11e2b1f755e392e7c776b98e76aa86a30b7b22e\nparent ac02fcc4d8b5cc0f1d727b30f8f2142dc9bacc8e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644334849 +0100\ncommitter GitHub <noreply@github.com> 1644334849 +0100\n\nRollup merge of #93206 - ChrisDenton:ntopenfile, r=nagisa\n\nUse `NtCreateFile` instead of `NtOpenFile` to open a file\n\nGenerally the internal `Nt*` functions should be avoided but when we do need to use one we should stick to the most commonly used for the job. To that end, this PR replaces `NtOpenFile` with `NtCreateFile`.\n\nNOTE: The initial version of this comment hypothesised that this may help with some recent false positives from malware scanners. This hypothesis proved wrong. Sorry for the distraction.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb39a6083c34f2266ec4f2235deda7bdab60b06", "html_url": "https://github.com/rust-lang/rust/commit/9cb39a6083c34f2266ec4f2235deda7bdab60b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb39a6083c34f2266ec4f2235deda7bdab60b06/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11e2b1f755e392e7c776b98e76aa86a30b7b22e", "html_url": "https://github.com/rust-lang/rust/commit/a11e2b1f755e392e7c776b98e76aa86a30b7b22e"}, {"sha": "ac02fcc4d8b5cc0f1d727b30f8f2142dc9bacc8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac02fcc4d8b5cc0f1d727b30f8f2142dc9bacc8e", "html_url": "https://github.com/rust-lang/rust/commit/ac02fcc4d8b5cc0f1d727b30f8f2142dc9bacc8e"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "0b65336a5a7dac2b6d499026dec5ebd7f334a04e", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb39a6083c34f2266ec4f2235deda7bdab60b06/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb39a6083c34f2266ec4f2235deda7bdab60b06/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=9cb39a6083c34f2266ec4f2235deda7bdab60b06", "patch": "@@ -2044,7 +2044,7 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// This function currently corresponds to `openat`, `fdopendir`, `unlinkat` and `lstat` functions\n /// on Unix (except for macOS before version 10.10 and REDOX) and the `CreateFileW`,\n-/// `GetFileInformationByHandleEx`, `SetFileInformationByHandle`, and `NtOpenFile` functions on\n+/// `GetFileInformationByHandleEx`, `SetFileInformationByHandle`, and `NtCreateFile` functions on\n /// Windows. Note that, this [may change in the future][changes].\n ///\n /// [changes]: io#platform-specific-behavior"}, {"sha": "dfcd6124454a4f3dc83e9358a0590a26c7a88787", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb39a6083c34f2266ec4f2235deda7bdab60b06/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb39a6083c34f2266ec4f2235deda7bdab60b06/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=9cb39a6083c34f2266ec4f2235deda7bdab60b06", "patch": "@@ -88,6 +88,7 @@ pub const FILE_SHARE_DELETE: DWORD = 0x4;\n pub const FILE_SHARE_READ: DWORD = 0x1;\n pub const FILE_SHARE_WRITE: DWORD = 0x2;\n \n+pub const FILE_OPEN: ULONG = 0x00000001;\n pub const FILE_OPEN_REPARSE_POINT: ULONG = 0x200000;\n pub const OBJ_DONT_REPARSE: ULONG = 0x1000;\n \n@@ -1228,15 +1229,20 @@ compat_fn! {\n \n compat_fn! {\n     \"ntdll\":\n-    pub fn NtOpenFile(\n+    pub fn NtCreateFile(\n         FileHandle: *mut HANDLE,\n         DesiredAccess: ACCESS_MASK,\n         ObjectAttributes: *const OBJECT_ATTRIBUTES,\n         IoStatusBlock: *mut IO_STATUS_BLOCK,\n+        AllocationSize: *mut i64,\n+        FileAttributes: ULONG,\n         ShareAccess: ULONG,\n-        OpenOptions: ULONG\n+        CreateDisposition: ULONG,\n+        CreateOptions: ULONG,\n+        EaBuffer: *mut c_void,\n+        EaLength: ULONG\n     ) -> NTSTATUS {\n-        panic!(\"`NtOpenFile` not available\");\n+        panic!(\"`NtCreateFile` not available\");\n     }\n     pub fn RtlNtStatusToDosError(\n         Status: NTSTATUS"}, {"sha": "cb83ee2469a1c685f204f704550ca8be42d398de", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9cb39a6083c34f2266ec4f2235deda7bdab60b06/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb39a6083c34f2266ec4f2235deda7bdab60b06/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=9cb39a6083c34f2266ec4f2235deda7bdab60b06", "patch": "@@ -712,11 +712,11 @@ impl<'a> Iterator for DirBuffIter<'a> {\n \n /// Open a link relative to the parent directory, ensure no symlinks are followed.\n fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<File> {\n-    // This is implemented using the lower level `NtOpenFile` function as\n+    // This is implemented using the lower level `NtCreateFile` function as\n     // unfortunately opening a file relative to a parent is not supported by\n     // win32 functions. It is however a fundamental feature of the NT kernel.\n     //\n-    // See https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntopenfile\n+    // See https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile\n     unsafe {\n         let mut handle = ptr::null_mut();\n         let mut io_status = c::IO_STATUS_BLOCK::default();\n@@ -732,14 +732,19 @@ fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<\n             Attributes: ATTRIBUTES.load(Ordering::Relaxed),\n             ..c::OBJECT_ATTRIBUTES::default()\n         };\n-        let status = c::NtOpenFile(\n+        let status = c::NtCreateFile(\n             &mut handle,\n             access,\n             &object,\n             &mut io_status,\n+            crate::ptr::null_mut(),\n+            0,\n             c::FILE_SHARE_DELETE | c::FILE_SHARE_READ | c::FILE_SHARE_WRITE,\n+            c::FILE_OPEN,\n             // If `name` is a symlink then open the link rather than the target.\n             c::FILE_OPEN_REPARSE_POINT,\n+            crate::ptr::null_mut(),\n+            0,\n         );\n         // Convert an NTSTATUS to the more familiar Win32 error codes (aka \"DosError\")\n         if c::nt_success(status) {"}]}