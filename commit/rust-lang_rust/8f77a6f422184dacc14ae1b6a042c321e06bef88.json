{"sha": "8f77a6f422184dacc14ae1b6a042c321e06bef88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNzdhNmY0MjIxODRkYWNjMTRhZTFiNmEwNDJjMzIxZTA2YmVmODg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-22T00:36:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-22T00:36:59Z"}, "message": "core: Add AtomicInt and cleanup", "tree": {"sha": "f13fde162baf976dad0e24e82b738e88a7a61b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13fde162baf976dad0e24e82b738e88a7a61b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f77a6f422184dacc14ae1b6a042c321e06bef88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f77a6f422184dacc14ae1b6a042c321e06bef88", "html_url": "https://github.com/rust-lang/rust/commit/8f77a6f422184dacc14ae1b6a042c321e06bef88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f77a6f422184dacc14ae1b6a042c321e06bef88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69", "html_url": "https://github.com/rust-lang/rust/commit/6d8d73cfc4cba2fdb2ee67448df39d89be08ce69"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "6085ca1a482eea82f06f26780c493b19af726703", "filename": "src/libcore/unstable/sync.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8f77a6f422184dacc14ae1b6a042c321e06bef88/src%2Flibcore%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f77a6f422184dacc14ae1b6a042c321e06bef88/src%2Flibcore%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fsync.rs?ref=8f77a6f422184dacc14ae1b6a042c321e06bef88", "patch": "@@ -208,25 +208,50 @@ extern {\n /* *********************************************************************/\n \n //FIXME: #5042 This should be replaced by proper atomic type\n-pub struct AtomicUint(uint);\n-pub impl AtomicUint {\n-    fn load(&self) -> uint {\n+pub struct AtomicUint {\n+    priv inner: uint\n+}\n+\n+impl AtomicUint {\n+    pub fn new(val: uint) -> AtomicUint { AtomicUint { inner: val } }\n+    pub fn load(&self) -> uint {\n         unsafe { intrinsics::atomic_load(cast::transmute(self)) as uint }\n     }\n-    fn store(&mut self, val:uint) {\n+    pub fn store(&mut self, val: uint) {\n         unsafe { intrinsics::atomic_store(cast::transmute(self), val as int); }\n     }\n-    fn add(&mut self, val:int) -> uint {\n+    pub fn add(&mut self, val: int) -> uint {\n         unsafe { intrinsics::atomic_xadd(cast::transmute(self), val as int) as uint }\n     }\n-    fn cas(&self, old:uint, new:uint) -> uint {\n+    pub fn cas(&mut self, old:uint, new: uint) -> uint {\n         unsafe { intrinsics::atomic_cxchg(cast::transmute(self), old as int, new as int) as uint }\n     }\n }\n \n+pub struct AtomicInt {\n+    priv inner: int\n+}\n+\n+impl AtomicInt {\n+    pub fn new(val: int) -> AtomicInt { AtomicInt { inner: val } }\n+    pub fn load(&self) -> int {\n+        unsafe { intrinsics::atomic_load(&self.inner) }\n+    }\n+    pub fn store(&mut self, val: int) {\n+        unsafe { intrinsics::atomic_store(&mut self.inner, val); }\n+    }\n+    pub fn add(&mut self, val: int) -> int {\n+        unsafe { intrinsics::atomic_xadd(&mut self.inner, val) }\n+    }\n+    pub fn cas(&mut self, old: int, new: int) -> int {\n+        unsafe { intrinsics::atomic_cxchg(&mut self.inner, old, new) }\n+    }\n+}\n+\n \n #[cfg(test)]\n mod tests {\n+    use super::*;\n     use comm;\n     use super::exclusive;\n     use task;\n@@ -278,4 +303,28 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n+\n+    #[test]\n+    fn atomic_int_smoke_test() {\n+        let mut i = AtomicInt::new(0);\n+        i.store(10);\n+        assert!(i.load() == 10);\n+        assert!(i.add(1) == 10);\n+        assert!(i.load() == 11);\n+        assert!(i.cas(11, 12) == 11);\n+        assert!(i.cas(11, 13) == 12);\n+        assert!(i.load() == 12);\n+    }\n+\n+    #[test]\n+    fn atomic_uint_smoke_test() {\n+        let mut i = AtomicUint::new(0);\n+        i.store(10);\n+        assert!(i.load() == 10);\n+        assert!(i.add(1) == 10);\n+        assert!(i.load() == 11);\n+        assert!(i.cas(11, 12) == 11);\n+        assert!(i.cas(11, 13) == 12);\n+        assert!(i.load() == 12);\n+    }\n }"}]}