{"sha": "599142c34abad1442994947bd1200ce0bc973c54", "node_id": "C_kwDOAAsO6NoAKDU5OTE0MmMzNGFiYWQxNDQyOTk0OTQ3YmQxMjAwY2UwYmM5NzNjNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T19:51:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T19:51:20Z"}, "message": "Auto merge of #13590 - Veykril:proc-macro-rustc-src, r=Veykril\n\ninternal: Add proc-macro dependency to rustc_private crates", "tree": {"sha": "ee0478431553cea0dd5ed3d91be4e1c3f77cf6ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0478431553cea0dd5ed3d91be4e1c3f77cf6ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/599142c34abad1442994947bd1200ce0bc973c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/599142c34abad1442994947bd1200ce0bc973c54", "html_url": "https://github.com/rust-lang/rust/commit/599142c34abad1442994947bd1200ce0bc973c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/599142c34abad1442994947bd1200ce0bc973c54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392784ad17db0091d0002b7535f7504caab1329e", "url": "https://api.github.com/repos/rust-lang/rust/commits/392784ad17db0091d0002b7535f7504caab1329e", "html_url": "https://github.com/rust-lang/rust/commit/392784ad17db0091d0002b7535f7504caab1329e"}, {"sha": "3c35d44f55d0af18116a8403533f83c2ebb9bf6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c35d44f55d0af18116a8403533f83c2ebb9bf6f", "html_url": "https://github.com/rust-lang/rust/commit/3c35d44f55d0af18116a8403533f83c2ebb9bf6f"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "4a2f468de7255af283cf1c977abbcfca4f2ae9b7", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/599142c34abad1442994947bd1200ce0bc973c54/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599142c34abad1442994947bd1200ce0bc973c54/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=599142c34abad1442994947bd1200ce0bc973c54", "patch": "@@ -509,14 +509,14 @@ impl ProjectWorkspace {\n                 build_scripts,\n                 toolchain: _,\n             } => cargo_to_crate_graph(\n-                rustc_cfg.clone(),\n-                cfg_overrides,\n                 load_proc_macro,\n                 load,\n+                rustc,\n                 cargo,\n-                build_scripts,\n                 sysroot.as_ref(),\n-                rustc,\n+                rustc_cfg.clone(),\n+                cfg_overrides,\n+                build_scripts,\n             ),\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n                 detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot)\n@@ -602,7 +602,7 @@ fn project_json_to_crate_graph(\n     for (from, krate) in project.crates() {\n         if let Some(&from) = crates.get(&from) {\n             if let Some((public_deps, libproc_macro)) = &sysroot_deps {\n-                public_deps.add(from, &mut crate_graph);\n+                public_deps.add_to_crate_graph(&mut crate_graph, from);\n                 if krate.is_proc_macro {\n                     if let Some(proc_macro) = libproc_macro {\n                         add_dep(\n@@ -626,14 +626,14 @@ fn project_json_to_crate_graph(\n }\n \n fn cargo_to_crate_graph(\n-    rustc_cfg: Vec<CfgFlag>,\n-    override_cfg: &CfgOverrides,\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n+    rustc: &Option<CargoWorkspace>,\n     cargo: &CargoWorkspace,\n-    build_scripts: &WorkspaceBuildScripts,\n     sysroot: Option<&Sysroot>,\n-    rustc: &Option<CargoWorkspace>,\n+    rustc_cfg: Vec<CfgFlag>,\n+    override_cfg: &CfgOverrides,\n+    build_scripts: &WorkspaceBuildScripts,\n ) -> CrateGraph {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n@@ -642,13 +642,15 @@ fn cargo_to_crate_graph(\n         None => (SysrootPublicDeps::default(), None),\n     };\n \n-    let mut cfg_options = CfgOptions::default();\n-    cfg_options.extend(rustc_cfg);\n+    let cfg_options = {\n+        let mut cfg_options = CfgOptions::default();\n+        cfg_options.extend(rustc_cfg);\n+        cfg_options.insert_atom(\"debug_assertions\".into());\n+        cfg_options\n+    };\n \n     let mut pkg_to_lib_crate = FxHashMap::default();\n \n-    cfg_options.insert_atom(\"debug_assertions\".into());\n-\n     let mut pkg_crates = FxHashMap::default();\n     // Does any crate signal to rust-analyzer that they need the rustc_private crates?\n     let mut has_private = false;\n@@ -723,7 +725,7 @@ fn cargo_to_crate_graph(\n         // Set deps to the core, std and to the lib target of the current package\n         for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n             // Add sysroot deps first so that a lib target named `core` etc. can overwrite them.\n-            public_deps.add(from, &mut crate_graph);\n+            public_deps.add_to_crate_graph(&mut crate_graph, from);\n \n             if let Some((to, name)) = lib_tgt.clone() {\n                 if to != from && kind != TargetKind::BuildScript {\n@@ -767,15 +769,16 @@ fn cargo_to_crate_graph(\n         if let Some(rustc_workspace) = rustc {\n             handle_rustc_crates(\n                 &mut crate_graph,\n-                rustc_workspace,\n+                &mut pkg_to_lib_crate,\n                 load,\n-                &cfg_options,\n-                override_cfg,\n                 load_proc_macro,\n-                &mut pkg_to_lib_crate,\n-                &public_deps,\n+                rustc_workspace,\n                 cargo,\n+                &public_deps,\n+                libproc_macro,\n                 &pkg_crates,\n+                &cfg_options,\n+                override_cfg,\n                 build_scripts,\n             );\n         }\n@@ -825,28 +828,29 @@ fn detached_files_to_crate_graph(\n             },\n         );\n \n-        public_deps.add(detached_file_crate, &mut crate_graph);\n+        public_deps.add_to_crate_graph(&mut crate_graph, detached_file_crate);\n     }\n     crate_graph\n }\n \n fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n-    rustc_workspace: &CargoWorkspace,\n+    pkg_to_lib_crate: &mut FxHashMap<Package, CrateId>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-    cfg_options: &CfgOptions,\n-    override_cfg: &CfgOverrides,\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n-    pkg_to_lib_crate: &mut FxHashMap<Package, CrateId>,\n-    public_deps: &SysrootPublicDeps,\n+    rustc_workspace: &CargoWorkspace,\n     cargo: &CargoWorkspace,\n+    public_deps: &SysrootPublicDeps,\n+    libproc_macro: Option<CrateId>,\n     pkg_crates: &FxHashMap<Package, Vec<(CrateId, TargetKind)>>,\n+    cfg_options: &CfgOptions,\n+    override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n ) {\n     let mut rustc_pkg_crates = FxHashMap::default();\n     // The root package of the rustc-dev component is rustc_driver, so we match that\n     let root_pkg =\n-        rustc_workspace.packages().find(|package| rustc_workspace[*package].name == \"rustc_driver\");\n+        rustc_workspace.packages().find(|&package| rustc_workspace[package].name == \"rustc_driver\");\n     // The rustc workspace might be incomplete (such as if rustc-dev is not\n     // installed for the current toolchain) and `rustc_source` is set to discover.\n     if let Some(root_pkg) = root_pkg {\n@@ -901,7 +905,16 @@ fn handle_rustc_crates(\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n                     // Add dependencies on core / std / alloc for this crate\n-                    public_deps.add(crate_id, crate_graph);\n+                    public_deps.add_to_crate_graph(crate_graph, crate_id);\n+                    if let Some(proc_macro) = libproc_macro {\n+                        add_dep_with_prelude(\n+                            crate_graph,\n+                            crate_id,\n+                            CrateName::new(\"proc_macro\").unwrap(),\n+                            proc_macro,\n+                            rustc_workspace[tgt].is_proc_macro,\n+                        );\n+                    }\n                     rustc_pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                 }\n             }\n@@ -1009,7 +1022,7 @@ struct SysrootPublicDeps {\n \n impl SysrootPublicDeps {\n     /// Makes `from` depend on the public sysroot crates.\n-    fn add(&self, from: CrateId, crate_graph: &mut CrateGraph) {\n+    fn add_to_crate_graph(&self, crate_graph: &mut CrateGraph, from: CrateId) {\n         for (name, krate, prelude) in &self.deps {\n             add_dep_with_prelude(crate_graph, from, name.clone(), *krate, *prelude);\n         }"}]}