{"sha": "38c22af0153cf8f920c01ef04493e8878401fd18", "node_id": "C_kwDOAAsO6NoAKDM4YzIyYWYwMTUzY2Y4ZjkyMGMwMWVmMDQ0OTNlODg3ODQwMWZkMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-15T07:27:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-15T07:27:30Z"}, "message": "Auto merge of #92604 - nnethercote:optimize-impl_read_unsigned_leb128, r=michaelwoerister\n\nOptimize `impl_read_unsigned_leb128`\n\nI see instruction count improvements of up to 3.5% locally with these changes, mostly on the smaller benchmarks.\n\nr? `@michaelwoerister`", "tree": {"sha": "0eddc6a30acb7bf64159aab68f7a8be0712000b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eddc6a30acb7bf64159aab68f7a8be0712000b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c22af0153cf8f920c01ef04493e8878401fd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c22af0153cf8f920c01ef04493e8878401fd18", "html_url": "https://github.com/rust-lang/rust/commit/38c22af0153cf8f920c01ef04493e8878401fd18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c22af0153cf8f920c01ef04493e8878401fd18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d25fc58257637cedbfe0a046d90da1494bcb05", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d25fc58257637cedbfe0a046d90da1494bcb05", "html_url": "https://github.com/rust-lang/rust/commit/69d25fc58257637cedbfe0a046d90da1494bcb05"}, {"sha": "facba24926e218f996a953b0d91494a04374b217", "url": "https://api.github.com/repos/rust-lang/rust/commits/facba24926e218f996a953b0d91494a04374b217", "html_url": "https://github.com/rust-lang/rust/commit/facba24926e218f996a953b0d91494a04374b217"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "08b3c054200b72d9490f0e9173ee86bdb88b3ae8", "filename": "compiler/rustc_serialize/src/leb128.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/38c22af0153cf8f920c01ef04493e8878401fd18/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c22af0153cf8f920c01ef04493e8878401fd18/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs?ref=38c22af0153cf8f920c01ef04493e8878401fd18", "patch": "@@ -53,16 +53,24 @@ impl_write_unsigned_leb128!(write_usize_leb128, usize);\n macro_rules! impl_read_unsigned_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n-        pub fn $fn_name(slice: &[u8]) -> ($int_ty, usize) {\n-            let mut result = 0;\n-            let mut shift = 0;\n-            let mut position = 0;\n+        pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {\n+            // The first iteration of this loop is unpeeled. This is a\n+            // performance win because this code is hot and integer values less\n+            // than 128 are very common, typically occurring 50-80% or more of\n+            // the time, even for u64 and u128.\n+            let byte = slice[*position];\n+            *position += 1;\n+            if (byte & 0x80) == 0 {\n+                return byte as $int_ty;\n+            }\n+            let mut result = (byte & 0x7F) as $int_ty;\n+            let mut shift = 7;\n             loop {\n-                let byte = slice[position];\n-                position += 1;\n+                let byte = slice[*position];\n+                *position += 1;\n                 if (byte & 0x80) == 0 {\n                     result |= (byte as $int_ty) << shift;\n-                    return (result, position);\n+                    return result;\n                 } else {\n                     result |= ((byte & 0x7F) as $int_ty) << shift;\n                 }\n@@ -122,15 +130,14 @@ impl_write_signed_leb128!(write_isize_leb128, isize);\n macro_rules! impl_read_signed_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n-        pub fn $fn_name(slice: &[u8]) -> ($int_ty, usize) {\n+        pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {\n             let mut result = 0;\n             let mut shift = 0;\n-            let mut position = 0;\n             let mut byte;\n \n             loop {\n-                byte = slice[position];\n-                position += 1;\n+                byte = slice[*position];\n+                *position += 1;\n                 result |= <$int_ty>::from(byte & 0x7F) << shift;\n                 shift += 7;\n \n@@ -144,7 +151,7 @@ macro_rules! impl_read_signed_leb128 {\n                 result |= (!0 << shift);\n             }\n \n-            (result, position)\n+            result\n         }\n     };\n }"}, {"sha": "078237801be695142e5a6c8d8bb1fadcd5273b58", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38c22af0153cf8f920c01ef04493e8878401fd18/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c22af0153cf8f920c01ef04493e8878401fd18/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=38c22af0153cf8f920c01ef04493e8878401fd18", "patch": "@@ -560,11 +560,7 @@ impl<'a> Decoder<'a> {\n }\n \n macro_rules! read_leb128 {\n-    ($dec:expr, $fun:ident) => {{\n-        let (value, bytes_read) = leb128::$fun(&$dec.data[$dec.position..]);\n-        $dec.position += bytes_read;\n-        Ok(value)\n-    }};\n+    ($dec:expr, $fun:ident) => {{ Ok(leb128::$fun($dec.data, &mut $dec.position)) }};\n }\n \n impl<'a> serialize::Decoder for Decoder<'a> {"}, {"sha": "314c07db981daccfca32eda6f492c0962e57bf03", "filename": "compiler/rustc_serialize/tests/leb128.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38c22af0153cf8f920c01ef04493e8878401fd18/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c22af0153cf8f920c01ef04493e8878401fd18/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs?ref=38c22af0153cf8f920c01ef04493e8878401fd18", "patch": "@@ -30,9 +30,8 @@ macro_rules! impl_test_unsigned_leb128 {\n \n             let mut position = 0;\n             for &expected in &values {\n-                let (actual, bytes_read) = $read_fn_name(&stream[position..]);\n+                let actual = $read_fn_name(&stream, &mut position);\n                 assert_eq!(expected, actual);\n-                position += bytes_read;\n             }\n             assert_eq!(stream.len(), position);\n         }\n@@ -77,9 +76,8 @@ macro_rules! impl_test_signed_leb128 {\n \n             let mut position = 0;\n             for &expected in &values {\n-                let (actual, bytes_read) = $read_fn_name(&stream[position..]);\n+                let actual = $read_fn_name(&stream, &mut position);\n                 assert_eq!(expected, actual);\n-                position += bytes_read;\n             }\n             assert_eq!(stream.len(), position);\n         }"}]}