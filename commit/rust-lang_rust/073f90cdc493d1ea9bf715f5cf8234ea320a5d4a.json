{"sha": "073f90cdc493d1ea9bf715f5cf8234ea320a5d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2Y5MGNkYzQ5M2QxZWE5YmY3MTVmNWNmODIzNGVhMzIwYTVkNGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-22T12:20:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-22T12:21:13Z"}, "message": "introduce some copies so we are not alting into mut state", "tree": {"sha": "21394af1a60e3478d47a6bc4f9d5e9a106bae065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21394af1a60e3478d47a6bc4f9d5e9a106bae065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a", "html_url": "https://github.com/rust-lang/rust/commit/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa18c285245099fdb03eae6ce5a5e0a79a01c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa18c285245099fdb03eae6ce5a5e0a79a01c21", "html_url": "https://github.com/rust-lang/rust/commit/9aa18c285245099fdb03eae6ce5a5e0a79a01c21"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "f6da35f902ca2727af4fb41fb95d24fa39368ce1", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=073f90cdc493d1ea9bf715f5cf8234ea320a5d4a", "patch": "@@ -539,22 +539,22 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n         let glue_fn_ty = T_ptr(T_glue_fn(ccx));\n         let ti = val;\n         let take_glue =\n-            alt ti.take_glue {\n+            alt copy ti.take_glue {\n               none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n         let drop_glue =\n-            alt ti.drop_glue {\n+            alt copy ti.drop_glue {\n               none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n         let free_glue =\n-            alt ti.free_glue {\n+            alt copy ti.free_glue {\n               none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n         let visit_glue =\n-            alt ti.visit_glue {\n+            alt copy ti.visit_glue {\n               none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n@@ -2308,7 +2308,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         ret take_local(cx.fcx.lllocals, nid);\n       }\n       ast::def_self(_) {\n-        let slf = alt cx.fcx.llself {\n+        let slf = alt copy cx.fcx.llself {\n              some(s) { s }\n              none { cx.sess().bug(\"trans_local_var: reference to self \\\n                                  out of context\"); }\n@@ -3030,7 +3030,7 @@ fn trans_call_inner(\n             Unreachable(bcx);\n         } else if ret_in_loop {\n             bcx = with_cond(bcx, Load(bcx, option::get(ret_flag))) {|bcx|\n-                option::iter(bcx.fcx.loop_ret) {|lret|\n+                option::iter(copy bcx.fcx.loop_ret) {|lret|\n                     Store(bcx, C_bool(true), lret.flagptr);\n                     Store(bcx, C_bool(false), bcx.fcx.llretptr);\n                 }\n@@ -3119,7 +3119,7 @@ fn get_landing_pad(bcx: block) -> BasicBlockRef {\n     let mut cached = none, pad_bcx = bcx; // Guaranteed to be set below\n     in_lpad_scope_cx(bcx) {|inf|\n         // If there is a valid landing pad still around, use it\n-        alt inf.landing_pad {\n+        alt copy inf.landing_pad {\n           some(target) { cached = some(target); }\n           none {\n             pad_bcx = sub_block(bcx, \"unwind\");\n@@ -3148,7 +3148,7 @@ fn get_landing_pad(bcx: block) -> BasicBlockRef {\n \n     // We store the retval in a function-central alloca, so that calls to\n     // Resume can find it.\n-    alt bcx.fcx.personality {\n+    alt copy bcx.fcx.personality {\n       some(addr) { Store(pad_bcx, llretval, addr); }\n       none {\n         let addr = alloca(pad_bcx, val_ty(llretval));\n@@ -3831,7 +3831,7 @@ fn trans_cont(cx: block) -> block {\n fn trans_ret(bcx: block, e: option<@ast::expr>) -> block {\n     let _icx = bcx.insn_ctxt(\"trans_ret\");\n     let mut bcx = bcx;\n-    let retptr = alt bcx.fcx.loop_ret {\n+    let retptr = alt copy bcx.fcx.loop_ret {\n       some({flagptr, retptr}) {\n         // This is a loop body return. Must set continue flag (our retptr)\n         // to false, return flag to true, and then store the value in the"}, {"sha": "d69e7101aba4514fbdcba2b5c71ba448705bd47d", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073f90cdc493d1ea9bf715f5cf8234ea320a5d4a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=073f90cdc493d1ea9bf715f5cf8234ea320a5d4a", "patch": "@@ -388,7 +388,7 @@ fn ty_str(tn: type_names, t: TypeRef) -> str {\n     ret lib::llvm::type_to_str(tn, t);\n }\n \n-fn val_ty(&&v: ValueRef) -> TypeRef { ret llvm::LLVMTypeOf(v); }\n+fn val_ty(v: ValueRef) -> TypeRef { ret llvm::LLVMTypeOf(v); }\n \n fn val_str(tn: type_names, v: ValueRef) -> str { ret ty_str(tn, val_ty(v)); }\n "}]}