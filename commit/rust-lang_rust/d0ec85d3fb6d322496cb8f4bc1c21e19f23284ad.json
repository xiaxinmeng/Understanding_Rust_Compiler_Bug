{"sha": "d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZWM4NWQzZmI2ZDMyMjQ5NmNiOGY0YmMxYzIxZTE5ZjIzMjg0YWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-29T10:09:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-30T10:51:34Z"}, "message": "Merge CrateDisambiguator into StableCrateId", "tree": {"sha": "2f33690d8348ae40a75c70eedf277e61d9e78093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f33690d8348ae40a75c70eedf277e61d9e78093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "html_url": "https://github.com/rust-lang/rust/commit/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "html_url": "https://github.com/rust-lang/rust/commit/d93b6a4598946a6a97e8f1b073b1cfc08d332a86"}], "stats": {"total": 332, "additions": 125, "deletions": 207}, "files": [{"sha": "77aad0baef523c7a2b501c0f6a97004f129ec907", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -14,7 +14,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_index::vec::IndexVec;\n-use rustc_span::crate_disambiguator::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -338,7 +337,7 @@ impl Definitions {\n     }\n \n     /// Adds a root definition (no parent) and a few other reserved definitions.\n-    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> Definitions {\n+    pub fn new(stable_crate_id: StableCrateId) -> Definitions {\n         let key = DefKey {\n             parent: None,\n             disambiguated_data: DisambiguatedDefPathData {\n@@ -347,7 +346,6 @@ impl Definitions {\n             },\n         };\n \n-        let stable_crate_id = StableCrateId::new(crate_name, crate_disambiguator);\n         let parent_hash = DefPathHash::new(stable_crate_id, 0);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n "}, {"sha": "2ed0539841aa30b42f896132fbf02779b70354c6", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -108,7 +108,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_errors::ErrorReported;\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::{Session, StableCrateId};\n \n use std::fs as std_fs;\n use std::io;\n@@ -189,7 +189,7 @@ pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBu\n pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n-    crate_disambiguator: CrateDisambiguator,\n+    stable_crate_id: StableCrateId,\n ) -> Result<(), ErrorReported> {\n     if sess.opts.incremental.is_none() {\n         return Ok(());\n@@ -200,7 +200,7 @@ pub fn prepare_session_directory(\n     debug!(\"prepare_session_directory\");\n \n     // {incr-comp-dir}/{crate-name-and-disambiguator}\n-    let crate_dir = crate_path(sess, crate_name, crate_disambiguator);\n+    let crate_dir = crate_path(sess, crate_name, stable_crate_id);\n     debug!(\"crate-dir: {}\", crate_dir.display());\n     create_dir(sess, &crate_dir, \"crate\")?;\n \n@@ -648,19 +648,12 @@ fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n     Ok(UNIX_EPOCH + duration)\n }\n \n-fn crate_path(\n-    sess: &Session,\n-    crate_name: &str,\n-    crate_disambiguator: CrateDisambiguator,\n-) -> PathBuf {\n+fn crate_path(sess: &Session, crate_name: &str, stable_crate_id: StableCrateId) -> PathBuf {\n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n-    // The full crate disambiguator is really long. 64 bits of it should be\n-    // sufficient.\n-    let crate_disambiguator = crate_disambiguator.to_fingerprint().to_smaller_hash();\n-    let crate_disambiguator = base_n::encode(crate_disambiguator as u128, INT_ENCODE_BASE);\n+    let stable_crate_id = base_n::encode(stable_crate_id.to_u64() as u128, INT_ENCODE_BASE);\n \n-    let crate_name = format!(\"{}-{}\", crate_name, crate_disambiguator);\n+    let crate_name = format!(\"{}-{}\", crate_name, stable_crate_id);\n     incr_dir.join(crate_name)\n }\n "}, {"sha": "dd4caab28dc523906a5877da1df8b06438180028", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n-use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n@@ -170,9 +170,13 @@ pub fn register_plugins<'a>(\n     let crate_types = util::collect_crate_types(sess, &krate.attrs);\n     sess.init_crate_types(crate_types);\n \n-    let disambiguator = util::compute_crate_disambiguator(sess);\n-    sess.crate_disambiguator.set(disambiguator).expect(\"not yet initialized\");\n-    rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator)?;\n+    let stable_crate_id = StableCrateId::new(\n+        crate_name,\n+        sess.crate_types().contains(&CrateType::Executable),\n+        sess.opts.cg.metadata.clone(),\n+    );\n+    sess.stable_crate_id.set(stable_crate_id).expect(\"not yet initialized\");\n+    rustc_incremental::prepare_session_directory(sess, &crate_name, stable_crate_id)?;\n \n     if sess.opts.incremental.is_some() {\n         sess.time(\"incr_comp_garbage_collect_session_directories\", || {"}, {"sha": "15cda2992088a87174ff73a4c457f9cd2ea29b3a", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -2,11 +2,9 @@ use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode};\n use rustc_codegen_ssa::traits::CodegenBackend;\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n use rustc_data_structures::jobserver;\n-use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n@@ -18,7 +16,6 @@ use rustc_session::config::{self, CrateType};\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n-use rustc_session::CrateDisambiguator;\n use rustc_session::{early_error, filesearch, output, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -496,39 +493,6 @@ pub fn get_codegen_sysroot(\n     }\n }\n \n-pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {\n-    use std::hash::Hasher;\n-\n-    // The crate_disambiguator is a 128 bit hash. The disambiguator is fed\n-    // into various other hashes quite a bit (symbol hashes, incr. comp. hashes,\n-    // debuginfo type IDs, etc), so we don't want it to be too wide. 128 bits\n-    // should still be safe enough to avoid collisions in practice.\n-    let mut hasher = StableHasher::new();\n-\n-    let mut metadata = session.opts.cg.metadata.clone();\n-    // We don't want the crate_disambiguator to dependent on the order\n-    // -C metadata arguments, so sort them:\n-    metadata.sort();\n-    // Every distinct -C metadata value is only incorporated once:\n-    metadata.dedup();\n-\n-    hasher.write(b\"metadata\");\n-    for s in &metadata {\n-        // Also incorporate the length of a metadata string, so that we generate\n-        // different values for `-Cmetadata=ab -Cmetadata=c` and\n-        // `-Cmetadata=a -Cmetadata=bc`\n-        hasher.write_usize(s.len());\n-        hasher.write(s.as_bytes());\n-    }\n-\n-    // Also incorporate crate type, so that we don't get symbol conflicts when\n-    // linking against a library of the same name, if this is an executable.\n-    let is_exe = session.crate_types().contains(&CrateType::Executable);\n-    hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n-\n-    CrateDisambiguator::from(hasher.finish::<Fingerprint>())\n-}\n-\n pub(crate) fn check_attr_crate_type(\n     sess: &Session,\n     attrs: &[ast::Attribute],"}, {"sha": "42c32219aba417e4c2b8826c58a0b4ad3aed2187", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -21,7 +21,7 @@ use rustc_session::config::{self, CrateType, ExternLocation};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -222,10 +222,8 @@ impl<'a> CrateLoader<'a> {\n         metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: &str,\n     ) -> Self {\n-        let local_crate_stable_id =\n-            StableCrateId::new(local_crate_name, sess.local_crate_disambiguator());\n         let mut stable_crate_ids = FxHashMap::default();\n-        stable_crate_ids.insert(local_crate_stable_id, LOCAL_CRATE);\n+        stable_crate_ids.insert(sess.local_stable_crate_id(), LOCAL_CRATE);\n \n         CrateLoader {\n             sess,\n@@ -327,17 +325,14 @@ impl<'a> CrateLoader<'a> {\n \n     fn verify_no_symbol_conflicts(&self, root: &CrateRoot<'_>) -> Result<(), CrateError> {\n         // Check for (potential) conflicts with the local crate\n-        if self.local_crate_name == root.name()\n-            && self.sess.local_crate_disambiguator() == root.disambiguator()\n-        {\n+        if self.sess.local_stable_crate_id() == root.stable_crate_id() {\n             return Err(CrateError::SymbolConflictsCurrent(root.name()));\n         }\n \n         // Check for conflicts with any crate loaded so far\n         let mut res = Ok(());\n         self.cstore.iter_crate_data(|_, other| {\n-            if other.name() == root.name() && // same crate-name\n-               other.disambiguator() == root.disambiguator() && // same crate-disambiguator\n+            if other.stable_crate_id() == root.stable_crate_id() && // same stable crate id\n                other.hash() != root.hash()\n             {\n                 // but different SVH\n@@ -411,7 +406,7 @@ impl<'a> CrateLoader<'a> {\n                 None => (&source, &crate_root),\n             };\n             let dlsym_dylib = dlsym_source.dylib.as_ref().expect(\"no dylib for a proc-macro crate\");\n-            Some(self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.disambiguator())?)\n+            Some(self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.stable_crate_id())?)\n         } else {\n             None\n         };\n@@ -664,7 +659,7 @@ impl<'a> CrateLoader<'a> {\n     fn dlsym_proc_macros(\n         &self,\n         path: &Path,\n-        disambiguator: CrateDisambiguator,\n+        stable_crate_id: StableCrateId,\n     ) -> Result<&'static [ProcMacro], CrateError> {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n@@ -673,7 +668,7 @@ impl<'a> CrateLoader<'a> {\n             Err(s) => return Err(CrateError::DlOpen(s)),\n         };\n \n-        let sym = self.sess.generate_proc_macro_decls_symbol(disambiguator);\n+        let sym = self.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n         let decls = unsafe {\n             let sym = match lib.symbol(&sym) {\n                 Ok(f) => f,"}, {"sha": "b830c6b2481ccddecf055edee79b79f6658c4dfe", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -226,7 +226,7 @@ use rustc_session::config::{self, CrateType};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::CanonicalizedPath;\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::{Session, StableCrateId};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};\n@@ -787,7 +787,7 @@ pub fn find_plugin_registrar(\n     metadata_loader: &dyn MetadataLoader,\n     span: Span,\n     name: Symbol,\n-) -> (PathBuf, CrateDisambiguator) {\n+) -> (PathBuf, StableCrateId) {\n     match find_plugin_registrar_impl(sess, metadata_loader, name) {\n         Ok(res) => res,\n         // `core` is always available if we got as far as loading plugins.\n@@ -799,7 +799,7 @@ fn find_plugin_registrar_impl<'a>(\n     sess: &'a Session,\n     metadata_loader: &dyn MetadataLoader,\n     name: Symbol,\n-) -> Result<(PathBuf, CrateDisambiguator), CrateError> {\n+) -> Result<(PathBuf, StableCrateId), CrateError> {\n     info!(\"find plugin registrar `{}`\", name);\n     let mut locator = CrateLocator::new(\n         sess,\n@@ -816,7 +816,7 @@ fn find_plugin_registrar_impl<'a>(\n \n     match locator.maybe_load_library_crate()? {\n         Some(library) => match library.source.dylib {\n-            Some(dylib) => Ok((dylib.0, library.metadata.get_root().disambiguator())),\n+            Some(dylib) => Ok((dylib.0, library.metadata.get_root().stable_crate_id())),\n             None => Err(CrateError::NonDylibPlugin(name)),\n         },\n         None => Err(locator.into_error()),"}, {"sha": "cc269fad46ffd7b3ca23f542923ae56840d857bf", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -620,10 +620,6 @@ impl CrateRoot<'_> {\n         self.name\n     }\n \n-    crate fn disambiguator(&self) -> CrateDisambiguator {\n-        self.disambiguator\n-    }\n-\n     crate fn hash(&self) -> Svh {\n         self.hash\n     }\n@@ -1927,8 +1923,8 @@ impl CrateMetadata {\n         self.root.name\n     }\n \n-    crate fn disambiguator(&self) -> CrateDisambiguator {\n-        self.root.disambiguator\n+    crate fn stable_crate_id(&self) -> StableCrateId {\n+        self.root.stable_crate_id\n     }\n \n     crate fn hash(&self) -> Svh {"}, {"sha": "02d1cf9aec79f84b997404d4a663fdd295c254c7", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::utils::NativeLibKind;\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::{Session, StableCrateId};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Symbol;\n \n@@ -185,7 +185,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n-    crate_disambiguator => { cdata.root.disambiguator }\n     crate_hash => { cdata.root.hash }\n     crate_host_hash => { cdata.host_hash }\n     original_crate_name => { cdata.root.name }\n@@ -482,8 +481,8 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).private_dep\n     }\n \n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator {\n-        self.get_crate_data(cnum).root.disambiguator\n+    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n+        self.get_crate_data(cnum).root.stable_crate_id\n     }\n \n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh {"}, {"sha": "5c45e4130d2d7828a403d810d5e34c0ae4a082ed", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -671,7 +671,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n-            disambiguator: tcx.sess.local_crate_disambiguator(),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),"}, {"sha": "9a3a6284c36105abe8fd6911c78d7e74352aa835", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n-use rustc_session::CrateDisambiguator;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{Ident, Symbol};\n@@ -202,7 +201,6 @@ crate struct CrateRoot<'tcx> {\n     triple: TargetTriple,\n     extra_filename: String,\n     hash: Svh,\n-    disambiguator: CrateDisambiguator,\n     stable_crate_id: StableCrateId,\n     panic_strategy: PanicStrategy,\n     edition: Edition,"}, {"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 18);\n+static_assert_size!(DepNode, 17);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "d13fa3e6f66c83852d2fb400072d001e1ea99439", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n+use rustc_span::def_id::StableCrateId;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -990,25 +991,24 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n     source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);\n-    tcx.sess.local_crate_disambiguator().to_fingerprint().hash_stable(&mut hcx, &mut stable_hasher);\n+    tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.untracked_crate.non_exported_macro_attrs.hash_stable(&mut hcx, &mut stable_hasher);\n \n     let crate_hash: Fingerprint = stable_hasher.finish();\n     Svh::new(crate_hash.to_smaller_hash())\n }\n \n-fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n+fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(StableCrateId, Svh)> {\n     let mut upstream_crates: Vec<_> = cstore\n         .crates_untracked()\n         .iter()\n         .map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum);\n-            let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n+            let stable_crate_id = cstore.stable_crate_id_untracked(cnum);\n             let hash = cstore.crate_hash_untracked(cnum);\n-            (name, disambiguator, hash)\n+            (stable_crate_id, hash)\n         })\n         .collect();\n-    upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n+    upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);\n     upstream_crates\n }\n "}, {"sha": "e88b96bde8877bc0a4dc412005a227c3bd2a878c", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_macros::HashStable;\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n-use rustc_session::CrateDisambiguator;\n+use rustc_session::StableCrateId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_target::spec::Target;\n@@ -200,7 +200,7 @@ pub trait CrateStore {\n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n     fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n+    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n \n     // This is basically a 1-based range of ints, which is a little"}, {"sha": "26694afb51391a9959b7e41f1fbb523b5637677c", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -48,8 +48,8 @@ impl<'tcx> ExportedSymbol<'tcx> {\n \n pub fn metadata_symbol_name(tcx: TyCtxt<'_>) -> String {\n     format!(\n-        \"rust_metadata_{}_{}\",\n+        \"rust_metadata_{}_{:08x}\",\n         tcx.original_crate_name(LOCAL_CRATE),\n-        tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex()\n+        tcx.sess.local_stable_crate_id().to_u64(),\n     )\n }"}, {"sha": "a160bcf6c1d020eb4847a1998d1143a32941959d", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -488,15 +488,18 @@ impl CodegenUnitNameBuilder<'tcx> {\n             // local crate's ID. Otherwise there can be collisions between CGUs\n             // instantiating stuff for upstream crates.\n             let local_crate_id = if cnum != LOCAL_CRATE {\n-                let local_crate_disambiguator = format!(\"{}\", tcx.crate_disambiguator(LOCAL_CRATE));\n-                format!(\"-in-{}.{}\", tcx.crate_name(LOCAL_CRATE), &local_crate_disambiguator[0..8])\n+                let local_stable_crate_id = tcx.sess.local_stable_crate_id();\n+                format!(\n+                    \"-in-{}.{:08x}\",\n+                    tcx.crate_name(LOCAL_CRATE),\n+                    local_stable_crate_id.to_u64()\n+                )\n             } else {\n                 String::new()\n             };\n \n-            let crate_disambiguator = tcx.crate_disambiguator(cnum).to_string();\n-            // Using a shortened disambiguator of about 40 bits\n-            format!(\"{}.{}{}\", tcx.crate_name(cnum), &crate_disambiguator[0..8], local_crate_id)\n+            let stable_crate_id = tcx.sess.local_stable_crate_id();\n+            format!(\"{}.{:08x}{}\", tcx.crate_name(cnum), stable_crate_id.to_u64(), local_crate_id)\n         });\n \n         write!(cgu_name, \"{}\", crate_prefix).unwrap();"}, {"sha": "794ebba30d467fdcd08d9ade80578b10a797cb8f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -1238,10 +1238,6 @@ rustc_queries! {\n     query proc_macro_decls_static(_: ()) -> Option<LocalDefId> {\n         desc { \"looking up the derive registrar for a crate\" }\n     }\n-    query crate_disambiguator(_: CrateNum) -> CrateDisambiguator {\n-        eval_always\n-        desc { \"looking up the disambiguator a crate\" }\n-    }\n     // The macro which defines `rustc_metadata::provide_extern` depends on this query's name.\n     // Changing the name should cause a compiler error, but in case that changes, be aware.\n     query crate_hash(_: CrateNum) -> Svh {"}, {"sha": "a2b17e97c29d925d3c6d7feb84f62647a3ef8cb8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -1292,24 +1292,24 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn def_path_debug_str(self, def_id: DefId) -> String {\n         // We are explicitly not going through queries here in order to get\n-        // crate name and disambiguator since this code is called from debug!()\n+        // crate name and stable crate id since this code is called from debug!()\n         // statements within the query system and we'd run into endless\n         // recursion otherwise.\n-        let (crate_name, crate_disambiguator) = if def_id.is_local() {\n-            (self.crate_name, self.sess.local_crate_disambiguator())\n+        let (crate_name, stable_crate_id) = if def_id.is_local() {\n+            (self.crate_name, self.sess.local_stable_crate_id())\n         } else {\n             (\n                 self.cstore.crate_name_untracked(def_id.krate),\n-                self.cstore.crate_disambiguator_untracked(def_id.krate),\n+                self.def_path_hash(def_id.krate.as_def_id()).stable_crate_id(),\n             )\n         };\n \n         format!(\n             \"{}[{}]{}\",\n             crate_name,\n-            // Don't print the whole crate disambiguator. That's just\n+            // Don't print the whole stable crate id. That's just\n             // annoying in debug output.\n-            &(crate_disambiguator.to_fingerprint().to_hex())[..4],\n+            &(format!(\"{:08x}\", stable_crate_id.to_u64()))[..4],\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }"}, {"sha": "bec13da017ea67e725744fd6adb3aa9f127fe87b", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -48,7 +48,6 @@ use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_serialize::opaque;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::utils::NativeLibKind;\n-use rustc_session::CrateDisambiguator;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast as ast;"}, {"sha": "ce10744bfb6bab95591301dcca6322d0cf754561", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -18,7 +18,7 @@ use rustc_serialize::{\n     opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize},\n     Decodable, Decoder, Encodable, Encoder,\n };\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{\n     ExpnDataDecodeMode, ExpnDataEncodeMode, ExpnId, HygieneDecodeContext, HygieneEncodeContext,\n     SyntaxContext, SyntaxContextData,\n@@ -52,7 +52,7 @@ pub struct OnDiskCache<'sess> {\n     // session.\n     current_diagnostics: Lock<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n \n-    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n+    prev_cnums: Vec<(u32, StableCrateId)>,\n     cnum_map: OnceCell<IndexVec<CrateNum, Option<CrateNum>>>,\n \n     source_map: &'sess SourceMap,\n@@ -120,7 +120,7 @@ pub struct OnDiskCache<'sess> {\n #[derive(Encodable, Decodable)]\n struct Footer {\n     file_index_to_stable_id: FxHashMap<SourceFileIndex, StableSourceFileId>,\n-    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n+    prev_cnums: Vec<(u32, StableCrateId)>,\n     query_result_index: EncodedQueryResultIndex,\n     diagnostics_index: EncodedQueryResultIndex,\n     // The location of all allocations.\n@@ -349,9 +349,8 @@ impl<'sess> OnDiskCache<'sess> {\n             let prev_cnums: Vec<_> = sorted_cnums\n                 .iter()\n                 .map(|&cnum| {\n-                    let crate_name = tcx.original_crate_name(cnum).to_string();\n-                    let crate_disambiguator = tcx.crate_disambiguator(cnum);\n-                    (cnum.as_u32(), crate_name, crate_disambiguator)\n+                    let stable_crate_id = tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n+                    (cnum.as_u32(), stable_crate_id)\n                 })\n                 .collect();\n \n@@ -575,25 +574,23 @@ impl<'sess> OnDiskCache<'sess> {\n     // maps to None.\n     fn compute_cnum_map(\n         tcx: TyCtxt<'_>,\n-        prev_cnums: &[(u32, String, CrateDisambiguator)],\n+        prev_cnums: &[(u32, StableCrateId)],\n     ) -> IndexVec<CrateNum, Option<CrateNum>> {\n         tcx.dep_graph.with_ignore(|| {\n             let current_cnums = tcx\n                 .all_crate_nums(())\n                 .iter()\n                 .map(|&cnum| {\n-                    let crate_name = tcx.original_crate_name(cnum).to_string();\n-                    let crate_disambiguator = tcx.crate_disambiguator(cnum);\n-                    ((crate_name, crate_disambiguator), cnum)\n+                    let stable_crate_id = tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n+                    (stable_crate_id, cnum)\n                 })\n                 .collect::<FxHashMap<_, _>>();\n \n             let map_size = prev_cnums.iter().map(|&(cnum, ..)| cnum).max().unwrap_or(0) + 1;\n             let mut map = IndexVec::from_elem_n(None, map_size as usize);\n \n-            for &(prev_cnum, ref crate_name, crate_disambiguator) in prev_cnums {\n-                let key = (crate_name.clone(), crate_disambiguator);\n-                map[CrateNum::from_u32(prev_cnum)] = current_cnums.get(&key).cloned();\n+            for &(prev_cnum, stable_crate_id) in prev_cnums {\n+                map[CrateNum::from_u32(prev_cnum)] = current_cnums.get(&stable_crate_id).cloned();\n             }\n \n             map[LOCAL_CRATE] = Some(LOCAL_CRATE);"}, {"sha": "29d4271c475ddfc6e41a827b9fb7f24f4b3dec9c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -1222,7 +1222,7 @@ impl<'a> Resolver<'a> {\n         let mut module_map = FxHashMap::default();\n         module_map.insert(root_local_def_id, graph_root);\n \n-        let definitions = Definitions::new(crate_name, session.local_crate_disambiguator());\n+        let definitions = Definitions::new(session.local_stable_crate_id());\n         let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();"}, {"sha": "842f7f9deee38ed3e887a922be597154188857e6", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -142,12 +142,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         let data = CratePreludeData {\n             crate_id: GlobalCrateId {\n                 name: name.into(),\n-                disambiguator: self\n-                    .tcx\n-                    .sess\n-                    .local_crate_disambiguator()\n-                    .to_fingerprint()\n-                    .as_value(),\n+                disambiguator: (self.tcx.sess.local_stable_crate_id().to_u64(), 0),\n             },\n             crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),"}, {"sha": "bdffdd5311e3cee2f038ed199345ed855a7a4f01", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -127,7 +127,10 @@ impl<'tcx> SaveContext<'tcx> {\n                 num: n.as_u32(),\n                 id: GlobalCrateId {\n                     name: self.tcx.crate_name(n).to_string(),\n-                    disambiguator: self.tcx.crate_disambiguator(n).to_fingerprint().as_value(),\n+                    disambiguator: (\n+                        self.tcx.def_path_hash(n.as_def_id()).stable_crate_id().to_u64(),\n+                        0,\n+                    ),\n                 },\n             });\n         }"}, {"sha": "70c45b0d7d3f9379b99ee668d6805653583b5bb9", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -22,7 +22,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_lint_defs::FutureBreakage;\n-pub use rustc_span::crate_disambiguator::CrateDisambiguator;\n+pub use rustc_span::def_id::StableCrateId;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{edition::Edition, RealFileName};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n@@ -133,12 +133,12 @@ pub struct Session {\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     crate_types: OnceCell<Vec<CrateType>>,\n-    /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n-    /// arguments passed to the compiler. Its value together with the crate-name\n-    /// forms a unique global identifier for the crate. It is used to allow\n-    /// multiple crates with the same name to coexist. See the\n+    /// The `stable_crate_id` is constructed out of the crate name and all the\n+    /// `-C metadata` arguments passed to the compiler. Its value forms a unique\n+    /// global identifier for the crate. It is used to allow multiple crates\n+    /// with the same name to coexist. See the\n     /// `rustc_codegen_llvm::back::symbol_names` module for more information.\n-    pub crate_disambiguator: OnceCell<CrateDisambiguator>,\n+    pub stable_crate_id: OnceCell<StableCrateId>,\n \n     features: OnceCell<rustc_feature::Features>,\n \n@@ -335,8 +335,8 @@ impl Session {\n         self.parse_sess.span_diagnostic.emit_future_breakage_report(diags_and_breakage);\n     }\n \n-    pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n-        self.crate_disambiguator.get().copied().unwrap()\n+    pub fn local_stable_crate_id(&self) -> StableCrateId {\n+        self.stable_crate_id.get().copied().unwrap()\n     }\n \n     pub fn crate_types(&self) -> &[CrateType] {\n@@ -831,12 +831,12 @@ impl Session {\n \n     /// Returns the symbol name for the registrar function,\n     /// given the crate `Svh` and the function `DefIndex`.\n-    pub fn generate_plugin_registrar_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n-        format!(\"__rustc_plugin_registrar_{}__\", disambiguator.to_fingerprint().to_hex())\n+    pub fn generate_plugin_registrar_symbol(&self, stable_crate_id: StableCrateId) -> String {\n+        format!(\"__rustc_plugin_registrar_{:08x}__\", stable_crate_id.to_u64())\n     }\n \n-    pub fn generate_proc_macro_decls_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n-        format!(\"__rustc_proc_macro_decls_{}__\", disambiguator.to_fingerprint().to_hex())\n+    pub fn generate_proc_macro_decls_symbol(&self, stable_crate_id: StableCrateId) -> String {\n+        format!(\"__rustc_proc_macro_decls_{:08x}__\", stable_crate_id.to_u64())\n     }\n \n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n@@ -1395,7 +1395,7 @@ pub fn build_session(\n         working_dir,\n         one_time_diagnostics: Default::default(),\n         crate_types: OnceCell::new(),\n-        crate_disambiguator: OnceCell::new(),\n+        stable_crate_id: OnceCell::new(),\n         features: OnceCell::new(),\n         lint_store: OnceCell::new(),\n         recursion_limit: OnceCell::new(),"}, {"sha": "bd7d85167140dfe4e28a712edf85a4d17dfbf8dc", "filename": "compiler/rustc_span/src/crate_disambiguator.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d93b6a4598946a6a97e8f1b073b1cfc08d332a86/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93b6a4598946a6a97e8f1b073b1cfc08d332a86/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fcrate_disambiguator.rs?ref=d93b6a4598946a6a97e8f1b073b1cfc08d332a86", "patch": "@@ -1,35 +0,0 @@\n-// This is here because `rustc_session` wants to refer to it,\n-// and so does `rustc_hir`, but `rustc_hir` shouldn't refer to `rustc_session`.\n-\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::{base_n, impl_stable_hash_via_hash};\n-\n-use std::fmt;\n-\n-/// Hash value constructed out of all the `-C metadata` arguments passed to the\n-/// compiler. Together with the crate-name forms a unique global identifier for\n-/// the crate.\n-#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, Encodable, Decodable)]\n-pub struct CrateDisambiguator(Fingerprint);\n-\n-impl CrateDisambiguator {\n-    pub fn to_fingerprint(self) -> Fingerprint {\n-        self.0\n-    }\n-}\n-\n-impl fmt::Display for CrateDisambiguator {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        let (a, b) = self.0.as_value();\n-        let as_u128 = a as u128 | ((b as u128) << 64);\n-        f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))\n-    }\n-}\n-\n-impl From<Fingerprint> for CrateDisambiguator {\n-    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n-        CrateDisambiguator(fingerprint)\n-    }\n-}\n-\n-impl_stable_hash_via_hash!(CrateDisambiguator);"}, {"sha": "aeb3234315f78c31251c32ceda93bca687d0b9fe", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -1,4 +1,3 @@\n-use crate::crate_disambiguator::CrateDisambiguator;\n use crate::HashStableContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -181,26 +180,51 @@ impl Borrow<Fingerprint> for DefPathHash {\n     }\n }\n \n-/// A [StableCrateId] is a 64 bit hash of `(crate-name, crate-disambiguator)`. It\n-/// is to [CrateNum] what [DefPathHash] is to [DefId]. It is stable across\n-/// compilation sessions.\n+/// A [StableCrateId] is a 64 bit hash of the crate name combined with all\n+/// `-Cmetadata` arguments. It is to [CrateNum] what [DefPathHash] is to\n+/// [DefId]. It is stable across compilation sessions.\n ///\n /// Since the ID is a hash value there is a (very small) chance that two crates\n /// end up with the same [StableCrateId]. The compiler will check for such\n /// collisions when loading crates and abort compilation in order to avoid\n /// further trouble.\n-#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]\n+#[derive(HashStable_Generic, Encodable, Decodable)]\n pub struct StableCrateId(u64);\n \n impl StableCrateId {\n+    pub fn to_u64(self) -> u64 {\n+        self.0\n+    }\n+\n     /// Computes the stable ID for a crate with the given name and\n-    /// disambiguator.\n-    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> StableCrateId {\n+    /// `-Cmetadata` arguments.\n+    pub fn new(crate_name: &str, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n         use std::hash::Hash;\n+        use std::hash::Hasher;\n \n         let mut hasher = StableHasher::new();\n         crate_name.hash(&mut hasher);\n-        crate_disambiguator.hash(&mut hasher);\n+\n+        // We don't want the stable crate id to dependent on the order\n+        // -C metadata arguments, so sort them:\n+        metadata.sort();\n+        // Every distinct -C metadata value is only incorporated once:\n+        metadata.dedup();\n+\n+        hasher.write(b\"metadata\");\n+        for s in &metadata {\n+            // Also incorporate the length of a metadata string, so that we generate\n+            // different values for `-Cmetadata=ab -Cmetadata=c` and\n+            // `-Cmetadata=a -Cmetadata=bc`\n+            hasher.write_usize(s.len());\n+            hasher.write(s.as_bytes());\n+        }\n+\n+        // Also incorporate crate type, so that we don't get symbol conflicts when\n+        // linking against a library of the same name, if this is an executable.\n+        hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n+\n         StableCrateId(hasher.finish())\n     }\n }"}, {"sha": "dc15c531d1e592643b91d440537e28b9dac9fe11", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -47,8 +47,6 @@ pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n-pub mod crate_disambiguator;\n-\n pub mod symbol;\n pub use symbol::{sym, Symbol};\n "}, {"sha": "1addfc8ee67e8f6292540e1de63641caf5a6f1e8", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -126,10 +126,9 @@ fn get_symbol_hash<'tcx>(\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {\n-            tcx.original_crate_name(instantiating_crate)\n-                .as_str()\n+            tcx.def_path_hash(instantiating_crate.as_def_id())\n+                .stable_crate_id()\n                 .hash_stable(&mut hcx, &mut hasher);\n-            tcx.crate_disambiguator(instantiating_crate).hash_stable(&mut hcx, &mut hasher);\n         }\n \n         // We want to avoid accidental collision between different types of instances."}, {"sha": "ba59ff96f6554d3e8e5f3ce9f55e448d7d73e9dc", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -165,12 +165,12 @@ fn compute_symbol_name(\n     // FIXME(eddyb) Precompute a custom symbol name based on attributes.\n     let is_foreign = if let Some(def_id) = def_id.as_local() {\n         if tcx.plugin_registrar_fn(()) == Some(def_id) {\n-            let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n+            let stable_crate_id = tcx.sess.local_stable_crate_id();\n+            return tcx.sess.generate_plugin_registrar_symbol(stable_crate_id);\n         }\n         if tcx.proc_macro_decls_static(()) == Some(def_id) {\n-            let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n+            let stable_crate_id = tcx.sess.local_stable_crate_id();\n+            return tcx.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n         }\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         matches!(tcx.hir().get(hir_id), Node::ForeignItem(_))"}, {"sha": "2ab7461fc6032d49235446b3e604b28d9e126a74", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -592,8 +592,8 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         self.push(\"C\");\n-        let fingerprint = self.tcx.crate_disambiguator(cnum).to_fingerprint();\n-        self.push_disambiguator(fingerprint.to_smaller_hash());\n+        let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n+        self.push_disambiguator(stable_crate_id.to_u64());\n         let name = self.tcx.original_crate_name(cnum).as_str();\n         self.push_ident(&name);\n         Ok(self)"}, {"sha": "f38c5d8f2f79eb0af9fdc74cec38b71982df7257", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d0ec85d3fb6d322496cb8f4bc1c21e19f23284ad", "patch": "@@ -6,7 +6,6 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n };\n-use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -389,11 +388,6 @@ fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamE\n     tcx.param_env(def_id).with_reveal_all_normalized(tcx)\n }\n \n-fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguator {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.sess.local_crate_disambiguator()\n-}\n-\n fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.crate_name\n@@ -544,7 +538,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         param_env,\n         param_env_reveal_all_normalized,\n         trait_of_item,\n-        crate_disambiguator,\n         original_crate_name,\n         instance_def_size_estimate,\n         issue33140_self_ty,"}]}