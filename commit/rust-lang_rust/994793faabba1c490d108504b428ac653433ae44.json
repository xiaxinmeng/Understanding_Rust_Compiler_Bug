{"sha": "994793faabba1c490d108504b428ac653433ae44", "node_id": "C_kwDOAAsO6NoAKDk5NDc5M2ZhYWJiYTFjNDkwZDEwODUwNGI0MjhhYzY1MzQzM2FlNDQ", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-22T09:17:30Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-22T09:17:30Z"}, "message": "PR fixup", "tree": {"sha": "24e6c24c89287efbc64530e41c6589cb4d84c9a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e6c24c89287efbc64530e41c6589cb4d84c9a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/994793faabba1c490d108504b428ac653433ae44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/994793faabba1c490d108504b428ac653433ae44", "html_url": "https://github.com/rust-lang/rust/commit/994793faabba1c490d108504b428ac653433ae44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/994793faabba1c490d108504b428ac653433ae44/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2cbe217566de4c95685316c7d59aa2823868a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cbe217566de4c95685316c7d59aa2823868a53", "html_url": "https://github.com/rust-lang/rust/commit/d2cbe217566de4c95685316c7d59aa2823868a53"}], "stats": {"total": 148, "additions": 86, "deletions": 62}, "files": [{"sha": "98415a84c569bc0191dadf2bf06e08f7788a5dae", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -240,13 +240,22 @@ fn adt_significant_drop_tys(\n     def_id: DefId,\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_has_dtor = |adt_def: &ty::AdtDef| {\n-        adt_def.destructor(tcx).map(|dtor| {\n-            if tcx.has_attr(dtor.did, sym::rustc_insignificant_dtor) {\n-                DtorType::Insignificant\n-            } else {\n-                DtorType::Significant\n-            }\n-        })\n+        let is_marked_insig = tcx.has_attr(adt_def.did, sym::rustc_insignificant_dtor);\n+        if is_marked_insig {\n+            // In some cases like `std::collections::HashMap` where the struct is a wrapper around\n+            // a type that is a Drop type, and the wrapped type (eg: `hashbrown::HashMap`) lies\n+            // outside stdlib, we might choose to still annotate the the wrapper (std HashMap) with\n+            // `rustc_insignificant_dtor`, even if the type itself doesn't have a `Drop` impl.\n+            Some(DtorType::Insignificant)\n+        } else if adt_def.destructor(tcx).is_some() {\n+            // There is a Drop impl and the type isn't marked insignificant, therefore Drop must be\n+            // significant.\n+            Some(DtorType::Significant)\n+        } else {\n+            // No destructor found nor the type is annotated with `rustc_insignificant_dtor`, we\n+            // treat this as the simple case of Drop impl for type.\n+            None\n+        }\n     };\n     adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n }"}, {"sha": "10298e117f5b42c7502dd229180c8bfb7c381f1d", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -155,14 +155,14 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"BTreeMap\")]\n+#[rustc_insignificant_dtor]\n pub struct BTreeMap<K, V> {\n     root: Option<Root<K, V>>,\n     length: usize,\n }\n \n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         drop(unsafe { ptr::read(self) }.into_iter())\n     }\n@@ -331,6 +331,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_insignificant_dtor]\n pub struct IntoIter<K, V> {\n     range: LazyLeafRange<marker::Dying, K, V>,\n     length: usize,\n@@ -1460,7 +1461,6 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n \n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for IntoIter<K, V> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);\n "}, {"sha": "cef9bb60b885e1153096a61ab475ba0b588b97d8", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -43,6 +43,7 @@ mod tests;\n /// more memory efficient, and make better use of CPU cache.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"LinkedList\")]\n+#[rustc_insignificant_dtor]\n pub struct LinkedList<T> {\n     head: Option<NonNull<Node<T>>>,\n     tail: Option<NonNull<Node<T>>>,\n@@ -975,7 +976,6 @@ impl<T> LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T> Drop for LinkedList<T> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         struct DropGuard<'a, T>(&'a mut LinkedList<T>);\n "}, {"sha": "cae0f29af8327e4340438426dd50b28b9373542f", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -90,6 +90,7 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (usize::BITS - 1); // Largest possible\n /// [`make_contiguous`]: VecDeque::make_contiguous\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vecdeque_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_insignificant_dtor]\n pub struct VecDeque<\n     T,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n@@ -130,7 +131,6 @@ impl<T: Clone, A: Allocator + Clone> Clone for VecDeque<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         /// Runs the destructor for all items in the slice when it gets dropped (normally or\n         /// during unwinding)."}, {"sha": "78356f7a48ac8c2e9ebc2c4ee7da1085df6486b7", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -305,6 +305,7 @@ struct RcBox<T: ?Sized> {\n /// [get_mut]: Rc::get_mut\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Rc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_insignificant_dtor]\n pub struct Rc<T: ?Sized> {\n     ptr: NonNull<RcBox<T>>,\n     phantom: PhantomData<RcBox<T>>,\n@@ -1441,7 +1442,6 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         unsafe {\n             self.inner().dec_strong();"}, {"sha": "4cb0a4b10bd0cdde6f10816f4af69a19fde12db0", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -22,6 +22,7 @@ use core::slice::{self};\n /// let iter: std::vec::IntoIter<_> = v.into_iter();\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_insignificant_dtor]\n pub struct IntoIter<\n     T,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n@@ -246,7 +247,6 @@ impl<T: Clone, A: Allocator + Clone> Clone for IntoIter<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);\n "}, {"sha": "cfbf207aee99ced20246b916eed57e43842543cc", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -394,6 +394,7 @@ mod spec_extend;\n /// [owned slice]: Box\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n+#[rustc_insignificant_dtor]\n pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n     buf: RawVec<T, A>,\n     len: usize,\n@@ -2746,7 +2747,6 @@ impl<T: Ord, A: Allocator> Ord for Vec<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         unsafe {\n             // use drop for [T]"}, {"sha": "822747dd0e824ff81736c980325824d278b146ce", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -10,6 +10,7 @@ use crate::{\n \n /// A by-value [array] iterator.\n #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n+#[rustc_insignificant_dtor]\n pub struct IntoIter<T, const N: usize> {\n     /// This is the array we are iterating over.\n     ///\n@@ -180,7 +181,6 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T, const N: usize> Drop for IntoIter<T, N> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         // SAFETY: This is safe: `as_mut_slice` returns exactly the sub-slice\n         // of elements that have not been moved out yet and that remain"}, {"sha": "3978e9b1668e58fa8380b095fb6b81a66ba0e397", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -205,6 +205,7 @@ use crate::sys;\n \n #[cfg_attr(not(test), rustc_diagnostic_item = \"hashmap_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_insignificant_dtor]\n pub struct HashMap<K, V, S = RandomState> {\n     base: base::HashMap<K, V, S>,\n }"}, {"sha": "5afdb799f0c74aadbff4b1ff167834a7c871acc9", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -492,7 +492,6 @@ impl<T> SyncOnceCell<T> {\n }\n \n unsafe impl<#[may_dangle] T> Drop for SyncOnceCell<T> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         if self.is_initialized() {\n             // SAFETY: The cell is initialized and being dropped, so it can't"}, {"sha": "2652bf5988e6543472052504c1183f753641be80", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -4,19 +4,16 @@\n #![deny(rust_2021_incompatible_closure_captures)]\n #![allow(unused)]\n \n-#![feature(once_cell)]\n-\n // Test cases for types that implement an insignificant drop (stlib defined)\n \n macro_rules! test_insig_dtor_for_type {\n     ($t: ty, $disambiguator: ident) => {\n         mod $disambiguator {\n             use std::collections::*;\n-            use std::lazy::SyncOnceCell;\n             use std::rc::Rc;\n             use std::sync::Mutex;\n \n-            fn _test_for_type(t: $t) {\n+            fn test_for_type(t: $t) {\n                 let tup = (Mutex::new(0), t);\n \n                 let _c = || tup.0;\n@@ -29,12 +26,11 @@ test_insig_dtor_for_type!(i32, prim_i32);\n test_insig_dtor_for_type!(Vec<i32>, vec_i32);\n test_insig_dtor_for_type!(String, string);\n test_insig_dtor_for_type!(Vec<String>, vec_string);\n-//test_insig_dtor_for_type!(HashMap<String, String>, hash_map);\n+test_insig_dtor_for_type!(HashMap<String, String>, hash_map);\n test_insig_dtor_for_type!(BTreeMap<String, i32>, btree_map);\n test_insig_dtor_for_type!(LinkedList<String>, linked_list);\n test_insig_dtor_for_type!(Rc<i32>, rc_i32);\n test_insig_dtor_for_type!(Rc<String>, rc_string);\n-test_insig_dtor_for_type!(SyncOnceCell<String>, onecell);\n test_insig_dtor_for_type!(std::vec::IntoIter<String>, vec_into_iter);\n test_insig_dtor_for_type!(btree_map::IntoIter<String, String>, btree_map_into_iter);\n test_insig_dtor_for_type!(std::array::IntoIter<String, 5>, array_into_iter);"}, {"sha": "2652bf5988e6543472052504c1183f753641be80", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -4,19 +4,16 @@\n #![deny(rust_2021_incompatible_closure_captures)]\n #![allow(unused)]\n \n-#![feature(once_cell)]\n-\n // Test cases for types that implement an insignificant drop (stlib defined)\n \n macro_rules! test_insig_dtor_for_type {\n     ($t: ty, $disambiguator: ident) => {\n         mod $disambiguator {\n             use std::collections::*;\n-            use std::lazy::SyncOnceCell;\n             use std::rc::Rc;\n             use std::sync::Mutex;\n \n-            fn _test_for_type(t: $t) {\n+            fn test_for_type(t: $t) {\n                 let tup = (Mutex::new(0), t);\n \n                 let _c = || tup.0;\n@@ -29,12 +26,11 @@ test_insig_dtor_for_type!(i32, prim_i32);\n test_insig_dtor_for_type!(Vec<i32>, vec_i32);\n test_insig_dtor_for_type!(String, string);\n test_insig_dtor_for_type!(Vec<String>, vec_string);\n-//test_insig_dtor_for_type!(HashMap<String, String>, hash_map);\n+test_insig_dtor_for_type!(HashMap<String, String>, hash_map);\n test_insig_dtor_for_type!(BTreeMap<String, i32>, btree_map);\n test_insig_dtor_for_type!(LinkedList<String>, linked_list);\n test_insig_dtor_for_type!(Rc<i32>, rc_i32);\n test_insig_dtor_for_type!(Rc<String>, rc_string);\n-test_insig_dtor_for_type!(SyncOnceCell<String>, onecell);\n test_insig_dtor_for_type!(std::vec::IntoIter<String>, vec_into_iter);\n test_insig_dtor_for_type!(btree_map::IntoIter<String, String>, btree_map_into_iter);\n test_insig_dtor_for_type!(std::array::IntoIter<String, 5>, array_into_iter);"}, {"sha": "d985e3bb9ec74131ff59a13d678b0bbdfdf9ea12", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -5,15 +5,15 @@\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n-    use std::sync::Mutex;\n+use std::sync::Mutex;\n \n+    #[rustc_insignificant_dtor]\n struct InsignificantDropPoint {\n     x: i32,\n     y: Mutex<i32>,\n }\n \n impl Drop for InsignificantDropPoint {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {}\n }\n \n@@ -23,25 +23,14 @@ impl Drop for SigDrop {\n     fn drop(&mut self) {}\n }\n \n+#[rustc_insignificant_dtor]\n struct GenericStruct<T>(T, T);\n \n-struct Wrapper<T>(GenericStruct<T>, i32);\n-\n impl<T> Drop for GenericStruct<T> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {}\n }\n \n-// Test no migration because InsignificantDropPoint is marked as insignificant\n-fn insign_dtor() {\n-    let t = (\n-        InsignificantDropPoint { x: 0, y: Mutex::new(0) },\n-        InsignificantDropPoint { x: 0, y: Mutex::new(0) }\n-    );\n-\n-    let c = || t.0;\n-\n-}\n+struct Wrapper<T>(GenericStruct<T>, i32);\n \n // `SigDrop` implements drop and therefore needs to be migrated.\n fn significant_drop_needs_migration() {"}, {"sha": "f95d34eeb299aaf68d60392aae52bf0cac006226", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -5,15 +5,15 @@\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n-    use std::sync::Mutex;\n+use std::sync::Mutex;\n \n+    #[rustc_insignificant_dtor]\n struct InsignificantDropPoint {\n     x: i32,\n     y: Mutex<i32>,\n }\n \n impl Drop for InsignificantDropPoint {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {}\n }\n \n@@ -23,25 +23,14 @@ impl Drop for SigDrop {\n     fn drop(&mut self) {}\n }\n \n+#[rustc_insignificant_dtor]\n struct GenericStruct<T>(T, T);\n \n-struct Wrapper<T>(GenericStruct<T>, i32);\n-\n impl<T> Drop for GenericStruct<T> {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {}\n }\n \n-// Test no migration because InsignificantDropPoint is marked as insignificant\n-fn insign_dtor() {\n-    let t = (\n-        InsignificantDropPoint { x: 0, y: Mutex::new(0) },\n-        InsignificantDropPoint { x: 0, y: Mutex::new(0) }\n-    );\n-\n-    let c = || t.0;\n-\n-}\n+struct Wrapper<T>(GenericStruct<T>, i32);\n \n // `SigDrop` implements drop and therefore needs to be migrated.\n fn significant_drop_needs_migration() {"}, {"sha": "832a81711b13775a1f6f516b708ad1ba24b6a77d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -1,5 +1,5 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop_attr_migrations.rs:50:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:39:13\n    |\n LL |     let c = || {\n    |             ^^\n@@ -23,7 +23,7 @@ LL +         let _ = &t;\n    |\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop_attr_migrations.rs:70:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:59:13\n    |\n LL |     let c = move || {\n    |             ^^^^^^^"}, {"sha": "3f184a67fbac93b728fac5ccce07a6a4500cf71f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_no_migrations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -3,14 +3,14 @@\n #![deny(rust_2021_incompatible_closure_captures)]\n #![feature(rustc_attrs)]\n #![allow(unused)]\n+#[rustc_insignificant_dtor]\n \n struct InsignificantDropPoint {\n     x: i32,\n     y: i32,\n }\n \n impl Drop for InsignificantDropPoint {\n-    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {}\n }\n "}, {"sha": "63e4000e833eb584424d8d52fec54b0f638d0906", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -202,6 +202,19 @@ fn test9_drop_order_and_nested_closures() {\n     b();\n }\n \n+// Test that we migrate if drop order of Vec<T> would be affected if T is a significant drop type\n+fn test10_vec_of_significant_drop_type() {\n+\n+        let tup = (Foo(0), vec![Foo(3)]);\n+\n+        let _c = || { let _ = &tup; tup.0 };\n+            //~^ ERROR: drop order\n+            //~| NOTE: for more information, see\n+            //~| HELP: add a dummy let to cause `tup` to be fully captured\n+            //~| NOTE: in Rust 2018, this closure captures all of `tup`, but in Rust 2021, it will only capture `tup.0`\n+}\n+//~^ NOTE: in Rust 2018, `tup` is dropped here, but in Rust 2021, only `tup.0` will be dropped here as part of the closure\n+\n fn main() {\n     test1_all_need_migration();\n     test2_only_precise_paths_need_migration();\n@@ -212,4 +225,5 @@ fn main() {\n     test7_move_closures_non_copy_types_might_need_migration();\n     test8_drop_order_and_blocks();\n     test9_drop_order_and_nested_closures();\n+    test10_vec_of_significant_drop_type();\n }"}, {"sha": "9d9c54298cf112ccb9c838a934fe33320380fa46", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -193,6 +193,19 @@ fn test9_drop_order_and_nested_closures() {\n     b();\n }\n \n+// Test that we migrate if drop order of Vec<T> would be affected if T is a significant drop type\n+fn test10_vec_of_significant_drop_type() {\n+\n+        let tup = (Foo(0), vec![Foo(3)]);\n+\n+        let _c = || tup.0;\n+            //~^ ERROR: drop order\n+            //~| NOTE: for more information, see\n+            //~| HELP: add a dummy let to cause `tup` to be fully captured\n+            //~| NOTE: in Rust 2018, this closure captures all of `tup`, but in Rust 2021, it will only capture `tup.0`\n+}\n+//~^ NOTE: in Rust 2018, `tup` is dropped here, but in Rust 2021, only `tup.0` will be dropped here as part of the closure\n+\n fn main() {\n     test1_all_need_migration();\n     test2_only_precise_paths_need_migration();\n@@ -203,4 +216,5 @@ fn main() {\n     test7_move_closures_non_copy_types_might_need_migration();\n     test8_drop_order_and_blocks();\n     test9_drop_order_and_nested_closures();\n+    test10_vec_of_significant_drop_type();\n }"}, {"sha": "fa1f83c37823f5e55f356904f81201cbef636ea6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/994793faabba1c490d108504b428ac653433ae44/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=994793faabba1c490d108504b428ac653433ae44", "patch": "@@ -195,5 +195,22 @@ LL ~         let c = || {\n LL +             let _ = &tuple;\n    |\n \n-error: aborting due to 9 previous errors\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/significant_drop.rs:201:18\n+   |\n+LL |         let _c = || tup.0;\n+   |                  ^^^-----\n+   |                     |\n+   |                     in Rust 2018, this closure captures all of `tup`, but in Rust 2021, it will only capture `tup.0`\n+...\n+LL | }\n+   | - in Rust 2018, `tup` is dropped here, but in Rust 2021, only `tup.0` will be dropped here as part of the closure\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `tup` to be fully captured\n+   |\n+LL |         let _c = || { let _ = &tup; tup.0 };\n+   |                     +++++++++++++++       +\n+\n+error: aborting due to 10 previous errors\n "}]}