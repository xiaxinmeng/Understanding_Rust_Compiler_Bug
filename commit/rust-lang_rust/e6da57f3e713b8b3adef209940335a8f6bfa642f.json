{"sha": "e6da57f3e713b8b3adef209940335a8f6bfa642f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZGE1N2YzZTcxM2I4YjNhZGVmMjA5OTQwMzM1YThmNmJmYTY0MmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-30T20:51:55Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-05T09:45:10Z"}, "message": "Fix argument alias handling for -O and -C opt-level", "tree": {"sha": "0ec70ec0c7821800309d0e4e2ccbd40b9db4d1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ec70ec0c7821800309d0e4e2ccbd40b9db4d1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6da57f3e713b8b3adef209940335a8f6bfa642f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6da57f3e713b8b3adef209940335a8f6bfa642f", "html_url": "https://github.com/rust-lang/rust/commit/e6da57f3e713b8b3adef209940335a8f6bfa642f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6da57f3e713b8b3adef209940335a8f6bfa642f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65e721ef824becd76773368718701cd0db83e59", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65e721ef824becd76773368718701cd0db83e59", "html_url": "https://github.com/rust-lang/rust/commit/d65e721ef824becd76773368718701cd0db83e59"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "b6d3ee882b36c0c11ed73869d0363014a8a967cd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6da57f3e713b8b3adef209940335a8f6bfa642f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6da57f3e713b8b3adef209940335a8f6bfa642f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e6da57f3e713b8b3adef209940335a8f6bfa642f", "patch": "@@ -2181,10 +2181,15 @@ pub fn build_session_options_and_crate_config(\n         TargetTriple::from_triple(host_triple())\n     };\n     let opt_level = {\n-        if matches.opt_present(\"O\") {\n-            if cg.opt_level.is_some() {\n-                early_error(error_format, \"-O and -C opt-level both provided\");\n+        let max_o = matches.opt_positions(\"O\").into_iter().max();\n+        let max_c = matches.opt_strs_pos(\"C\").into_iter().flat_map(|(i, s)| {\n+            if let Some(\"opt-level\") = s.splitn(2, '=').next() {\n+                Some(i)\n+            } else {\n+                None\n             }\n+        }).max();\n+        if max_o > max_c {\n             OptLevel::Default\n         } else {\n             match cg.opt_level.as_ref().map(String::as_ref) {"}]}