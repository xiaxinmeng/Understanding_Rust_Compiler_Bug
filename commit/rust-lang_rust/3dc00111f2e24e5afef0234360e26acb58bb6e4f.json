{"sha": "3dc00111f2e24e5afef0234360e26acb58bb6e4f", "node_id": "C_kwDOAAsO6NoAKDNkYzAwMTExZjJlMjRlNWFmZWYwMjM0MzYwZTI2YWNiNThiYjZlNGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-23T18:28:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-23T18:28:12Z"}, "message": "Rollup merge of #91153 - birkenfeld:kernel_copy_fallback, r=the8472\n\nkernel_copy: avoid panic on unexpected OS error\n\nAccording to documentation, the listed errnos should only occur\nif the `copy_file_range` call cannot be made at all, so the\nassert be correct.  However, since in practice file system\ndrivers (incl. FUSE etc.) can return any errno they want, we\nshould not panic here.\n\nFixes #91152", "tree": {"sha": "45a294f5bb9f9fd3f4faaded44fb619eb316574c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a294f5bb9f9fd3f4faaded44fb619eb316574c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc00111f2e24e5afef0234360e26acb58bb6e4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnTK9CRBK7hj4Ov3rIwAA7owIAH9aQM75yGQ93/FaL3BvWMFv\nrm7hneAUnqrJJNzQfAN3K2jF9KYrCdpQ1tQtavqRer8nKqH2KrC1xrO7AKG9VUqn\nkzozAbfU5j+DPfVc/br4e5a+61OhP55vWGHLhT9iEdwqfvAZRnRLyO1r0+RjM6SZ\nUOYle5TMpgQZtwFDrAuI8IR2wkM218wXnXvZJtWTiQPXLyqt9cfVRhfBEhuUfJKR\nHSzOJ+JB/rPehprd6k2pGZa8eKlqLaH+pyO0arCYWWqMtxso9/i4r5pHsWXnOWgX\n7PPHkttnXiehCdxm5NiowQzP26CmXNw5NOh8jOWnfUWworynpD0j+lY3vL6LMiM=\n=7H+m\n-----END PGP SIGNATURE-----\n", "payload": "tree 45a294f5bb9f9fd3f4faaded44fb619eb316574c\nparent e52e3a4bb3efa4c75350ba11e99ebbc93a982768\nparent b490ccc22746375e154352466fb0d0deafb50194\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637692092 +0100\ncommitter GitHub <noreply@github.com> 1637692092 +0100\n\nRollup merge of #91153 - birkenfeld:kernel_copy_fallback, r=the8472\n\nkernel_copy: avoid panic on unexpected OS error\n\nAccording to documentation, the listed errnos should only occur\nif the `copy_file_range` call cannot be made at all, so the\nassert be correct.  However, since in practice file system\ndrivers (incl. FUSE etc.) can return any errno they want, we\nshould not panic here.\n\nFixes #91152\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc00111f2e24e5afef0234360e26acb58bb6e4f", "html_url": "https://github.com/rust-lang/rust/commit/3dc00111f2e24e5afef0234360e26acb58bb6e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc00111f2e24e5afef0234360e26acb58bb6e4f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52e3a4bb3efa4c75350ba11e99ebbc93a982768", "html_url": "https://github.com/rust-lang/rust/commit/e52e3a4bb3efa4c75350ba11e99ebbc93a982768"}, {"sha": "b490ccc22746375e154352466fb0d0deafb50194", "url": "https://api.github.com/repos/rust-lang/rust/commits/b490ccc22746375e154352466fb0d0deafb50194", "html_url": "https://github.com/rust-lang/rust/commit/b490ccc22746375e154352466fb0d0deafb50194"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "f3155fbc0620f1ad8dbd634fb24d3be328d4cbb1", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dc00111f2e24e5afef0234360e26acb58bb6e4f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc00111f2e24e5afef0234360e26acb58bb6e4f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=3dc00111f2e24e5afef0234360e26acb58bb6e4f", "patch": "@@ -576,20 +576,22 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                 return match err.raw_os_error() {\n                     // when file offset + max_length > u64::MAX\n                     Some(EOVERFLOW) => CopyResult::Fallback(written),\n-                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) => {\n+                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) if written == 0 => {\n                         // Try fallback io::copy if either:\n                         // - Kernel version is < 4.5 (ENOSYS\u00b9)\n                         // - Files are mounted on different fs (EXDEV)\n                         // - copy_file_range is broken in various ways on RHEL/CentOS 7 (EOPNOTSUPP)\n                         // - copy_file_range file is immutable or syscall is blocked by seccomp\u00b9 (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n                         // - the writer fd was opened with O_APPEND (EBADF\u00b2)\n+                        // and no bytes were written successfully yet.  (All these errnos should\n+                        // not be returned if something was already written, but they happen in\n+                        // the wild, see #91152.)\n                         //\n                         // \u00b9 these cases should be detected by the initial probe but we handle them here\n                         //   anyway in case syscall interception changes during runtime\n                         // \u00b2 actually invalid file descriptors would cause this too, but in that case\n                         //   the fallback code path is expected to encounter the same error again\n-                        assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n                     _ => CopyResult::Error(err, written),"}]}