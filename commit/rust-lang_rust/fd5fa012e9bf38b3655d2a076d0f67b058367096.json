{"sha": "fd5fa012e9bf38b3655d2a076d0f67b058367096", "node_id": "C_kwDOAAsO6NoAKGZkNWZhMDEyZTliZjM4YjM2NTVkMmEwNzZkMGY2N2IwNTgzNjcwOTY", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-05-24T19:33:04Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-05-24T19:33:04Z"}, "message": "Use helper functions for min/max_idx", "tree": {"sha": "b3233ae3d6ec2bc2fe0b98be610429269eafa759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3233ae3d6ec2bc2fe0b98be610429269eafa759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5fa012e9bf38b3655d2a076d0f67b058367096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5fa012e9bf38b3655d2a076d0f67b058367096", "html_url": "https://github.com/rust-lang/rust/commit/fd5fa012e9bf38b3655d2a076d0f67b058367096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5fa012e9bf38b3655d2a076d0f67b058367096/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d11b655bd7264b2b66c299ac975c5050d40b220", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d11b655bd7264b2b66c299ac975c5050d40b220", "html_url": "https://github.com/rust-lang/rust/commit/3d11b655bd7264b2b66c299ac975c5050d40b220"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "ffc193578e075cebcbe9fd0e24c0b89237cbed49", "filename": "library/core/src/slice/select.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd5fa012e9bf38b3655d2a076d0f67b058367096/library%2Fcore%2Fsrc%2Fslice%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5fa012e9bf38b3655d2a076d0f67b058367096/library%2Fcore%2Fsrc%2Fslice%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fselect.rs?ref=fd5fa012e9bf38b3655d2a076d0f67b058367096", "patch": "@@ -102,6 +102,26 @@ fn partition_at_index_loop<'a, T, F>(\n     }\n }\n \n+/// Helper function that returns the index of the minimum element in the slice using the given\n+/// comparator function\n+fn min_index<T, F: FnMut(&T, &T) -> bool>(slice: &[T], is_less: &mut F) -> Option<usize> {\n+    slice\n+        .iter()\n+        .enumerate()\n+        .reduce(|acc, t| if is_less(t.1, acc.1) { t } else { acc })\n+        .map(|(i, _)| i)\n+}\n+\n+/// Helper function that returns the index of the maximum element in the slice using the given\n+/// comparator function\n+fn max_index<T, F: FnMut(&T, &T) -> bool>(slice: &[T], is_less: &mut F) -> Option<usize> {\n+    slice\n+        .iter()\n+        .enumerate()\n+        .reduce(|acc, t| if is_less(acc.1, t.1) { t } else { acc })\n+        .map(|(i, _)| i)\n+}\n+\n /// Reorder the slice such that the element at `index` is at its final sorted position.\n pub fn partition_at_index<T, F>(\n     v: &mut [T],\n@@ -120,13 +140,13 @@ where\n     } else if index == v.len() - 1 {\n         // Find max element and place it in the last position of the array. We're free to use\n         // `unwrap()` here because we know v must not be empty.\n-        let (max_index, _) = v.iter().enumerate().max_by(from_is_less(&mut is_less)).unwrap();\n-        v.swap(max_index, index);\n+        let max_idx = max_index(v, &mut is_less).unwrap();\n+        v.swap(max_idx, index);\n     } else if index == 0 {\n         // Find min element and place it in the first position of the array. We're free to use\n         // `unwrap()` here because we know v must not be empty.\n-        let (min_index, _) = v.iter().enumerate().min_by(from_is_less(&mut is_less)).unwrap();\n-        v.swap(min_index, index);\n+        let min_idx = min_index(v, &mut is_less).unwrap();\n+        v.swap(min_idx, index);\n     } else {\n         partition_at_index_loop(v, index, &mut is_less, None);\n     }\n@@ -137,16 +157,6 @@ where\n     (left, pivot, right)\n }\n \n-/// helper function used to find the index of the min/max element\n-/// using e.g. `slice.iter().enumerate().min_by(from_is_less(&mut is_less)).unwrap()`\n-fn from_is_less<T>(\n-    is_less: &mut impl FnMut(&T, &T) -> bool,\n-) -> impl FnMut(&(usize, &T), &(usize, &T)) -> cmp::Ordering + '_ {\n-    |&(_, x), &(_, y)| {\n-        if is_less(x, y) { cmp::Ordering::Less } else { cmp::Ordering::Greater }\n-    }\n-}\n-\n /// Selection algorithm to select the k-th element from the slice in guaranteed O(n) time.\n /// This is essentially a quickselect that uses Tukey's Ninther for pivot selection\n fn median_of_medians<T, F: FnMut(&T, &T) -> bool>(mut v: &mut [T], is_less: &mut F, mut k: usize) {\n@@ -170,14 +180,14 @@ fn median_of_medians<T, F: FnMut(&T, &T) -> bool>(mut v: &mut [T], is_less: &mut\n         if k == v.len() - 1 {\n             // Find max element and place it in the last position of the array. We're free to use\n             // `unwrap()` here because we know v must not be empty.\n-            let (max_index, _) = v.iter().enumerate().max_by(from_is_less(is_less)).unwrap();\n-            v.swap(max_index, k);\n+            let max_idx = max_index(v, is_less).unwrap();\n+            v.swap(max_idx, k);\n             return;\n         } else if k == 0 {\n             // Find min element and place it in the first position of the array. We're free to use\n             // `unwrap()` here because we know v must not be empty.\n-            let (min_index, _) = v.iter().enumerate().min_by(from_is_less(is_less)).unwrap();\n-            v.swap(min_index, k);\n+            let min_idx = min_index(v, is_less).unwrap();\n+            v.swap(min_idx, k);\n             return;\n         }\n "}]}