{"sha": "2a0b3d6224768119f1d2e9850488c3d184362c1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMGIzZDYyMjQ3NjgxMTlmMWQyZTk4NTA0ODhjM2QxODQzNjJjMWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T15:56:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "introduce `Normalizable` trait for things directly normalizable", "tree": {"sha": "d4d7a21fe7af5c37d28bdc6e30b894ad6433b038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4d7a21fe7af5c37d28bdc6e30b894ad6433b038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a0b3d6224768119f1d2e9850488c3d184362c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0b3d6224768119f1d2e9850488c3d184362c1c", "html_url": "https://github.com/rust-lang/rust/commit/2a0b3d6224768119f1d2e9850488c3d184362c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a0b3d6224768119f1d2e9850488c3d184362c1c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "html_url": "https://github.com/rust-lang/rust/commit/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b"}], "stats": {"total": 419, "additions": 362, "deletions": 57}, "files": [{"sha": "33322993b1db6289be3317638f9743e252387aec", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -72,9 +72,10 @@ use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n use traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n-    CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal,\n+    CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n-use ty::{TyCtxt, Instance, InstanceDef, ParamEnv, ParamEnvAnd, PolyTraitRef, Ty};\n+use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n+         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n use ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n@@ -652,6 +653,10 @@ define_dep_nodes!( <'tcx>\n     [] TypeOpEq(CanonicalTypeOpEqGoal<'tcx>),\n     [] TypeOpSubtype(CanonicalTypeOpSubtypeGoal<'tcx>),\n     [] TypeOpProvePredicate(CanonicalTypeOpProvePredicateGoal<'tcx>),\n+    [] TypeOpNormalizeTy(CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>),\n+    [] TypeOpNormalizePredicate(CanonicalTypeOpNormalizeGoal<'tcx, Predicate<'tcx>>),\n+    [] TypeOpNormalizePolyFnSig(CanonicalTypeOpNormalizeGoal<'tcx, PolyFnSig<'tcx>>),\n+    [] TypeOpNormalizeFnSig(CanonicalTypeOpNormalizeGoal<'tcx, FnSig<'tcx>>),\n \n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, &'tcx Substs<'tcx>) },\n "}, {"sha": "dddd05db668e163ba0d9537591820b51645aeaca", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -41,6 +41,9 @@ pub type CanonicalTypeOpSubtypeGoal<'tcx> =\n pub type CanonicalTypeOpProvePredicateGoal<'tcx> =\n     Canonical<'tcx, type_op::prove_predicate::ProvePredicate<'tcx>>;\n \n+pub type CanonicalTypeOpNormalizeGoal<'tcx, T> =\n+    Canonical<'tcx, type_op::normalize::Normalize<'tcx, T>>;\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct NoSolution;\n "}, {"sha": "348283d1af34456ee252caaa15cd73e21f6de1b3", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, CanonicalizedQueryResult};\n+use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n use ty::{self, ParamEnv, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -45,6 +45,12 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     ) -> CanonicalizedQueryResult<'gcx, ()> {\n         tcx.type_op_eq(canonicalized).unwrap()\n     }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n+        v\n+    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "cddb648f04fdeca062f4bd2fc8b3b6fc75ad4d4b", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -9,15 +9,17 @@\n // except according to those terms.\n \n use infer::canonical::query_result;\n-use infer::canonical::{Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint};\n+use infer::canonical::{\n+    Canonical, Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint, QueryResult,\n+};\n use infer::{InferCtxt, InferOk, InferResult};\n+use std::fmt;\n+use std::rc::Rc;\n+use syntax::codemap::DUMMY_SP;\n use traits::{ObligationCause, TraitEngine};\n use ty::error::TypeError;\n use ty::fold::TypeFoldable;\n use ty::{Lift, ParamEnv, TyCtxt};\n-use std::fmt;\n-use std::rc::Rc;\n-use syntax::codemap::DUMMY_SP;\n \n pub mod custom;\n pub mod eq;\n@@ -98,32 +100,37 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     }\n }\n \n-type Lifted<'gcx, T> = <T as Lift<'gcx>>::Lifted;\n-\n pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: TypeFoldable<'tcx> + Lift<'gcx> {\n     type QueryResult: TypeFoldable<'tcx> + Lift<'gcx>;\n \n     /// Micro-optimization: returns `Ok(x)` if we can trivially\n     /// produce the output, else returns `Err(self)` back.\n-    fn trivial_noop(\n-        self,\n-        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-    ) -> Result<Lifted<'gcx, Self::QueryResult>, Self>;\n+    fn trivial_noop(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self>;\n \n     fn param_env(&self) -> ParamEnv<'tcx>;\n \n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, Self>,\n     ) -> CanonicalizedQueryResult<'gcx, Self::QueryResult>;\n+\n+    /// \"Upcasts\" a lifted query result (which is in the gcx lifetime)\n+    /// into the tcx lifetime. This is always just an identity cast,\n+    /// but the generic code does't realize it, so we have to push the\n+    /// operation into the impls that know more specifically what\n+    /// `QueryResult` is. This operation would (maybe) be nicer with\n+    /// something like HKTs or GATs, since then we could make\n+    /// `QueryResult` parametric and `'gcx` and `'tcx` etc.\n+    fn upcast_result(\n+        lifted_query_result: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>>;\n }\n \n impl<'gcx: 'tcx, 'tcx, Q> TypeOp<'gcx, 'tcx> for Q\n where\n     Q: QueryTypeOp<'gcx, 'tcx>,\n-    Lifted<'gcx, Q::QueryResult>: TypeFoldable<'tcx>,\n {\n-    type Output = Lifted<'gcx, Q::QueryResult>;\n+    type Output = Q::QueryResult;\n \n     fn trivial_noop(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::Output, Self> {\n         QueryTypeOp::trivial_noop(self, tcx)\n@@ -152,7 +159,7 @@ where\n             &ObligationCause::dummy(),\n             param_env,\n             &canonical_var_values,\n-            &canonical_result,\n+            Q::upcast_result(&canonical_result),\n         )\n     }\n }"}, {"sha": "d63997fe40c7a9622658be2214fd34811edeeb3c", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 131, "deletions": 20, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -8,17 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{InferCtxt, InferOk, InferResult};\n-use traits::query::NoSolution;\n-use traits::{Normalized, ObligationCause};\n-use ty::fold::TypeFoldable;\n-use ty::{ParamEnv, TyCtxt};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n use std::fmt;\n+use ty::fold::TypeFoldable;\n+use ty::{self, Lift, ParamEnv, Ty, TyCtxt};\n \n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Normalize<'tcx, T> {\n-    param_env: ParamEnv<'tcx>,\n-    value: T,\n+    pub param_env: ParamEnv<'tcx>,\n+    pub value: T,\n }\n \n impl<'tcx, T> Normalize<'tcx, T>\n@@ -30,27 +28,140 @@ where\n     }\n }\n \n-impl<'gcx, 'tcx, T> super::TypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n+impl<'gcx: 'tcx, 'tcx, T> super::QueryTypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n where\n-    T: fmt::Debug + TypeFoldable<'tcx>,\n+    T: Normalizable<'gcx, 'tcx>,\n {\n-    type Output = T;\n+    type QueryResult = T;\n \n-    fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::Output, Self> {\n+    fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<T, Self> {\n         if !self.value.has_projections() {\n             Ok(self.value)\n         } else {\n             Err(self)\n         }\n     }\n \n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n-        let Normalized { value, obligations } = infcx\n-            .at(&ObligationCause::dummy(), self.param_env)\n-            .normalize(&self.value)\n-            .unwrap_or_else(|NoSolution| {\n-                bug!(\"normalization of `{:?}` failed\", self.value,);\n-            });\n-        Ok(InferOk { value, obligations })\n+    fn param_env(&self) -> ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Self>,\n+    ) -> CanonicalizedQueryResult<'gcx, Self::QueryResult> {\n+        T::type_op_method(tcx, canonicalized)\n+    }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, T>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, T>> {\n+        T::upcast_result(v)\n+    }\n+}\n+\n+pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx> {\n+    fn type_op_method(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+    ) -> CanonicalizedQueryResult<'gcx, Self>;\n+\n+    /// Convert from the `'gcx` (lifted) form of `Self` into the `tcx`\n+    /// form of `Self`.\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>>;\n+}\n+\n+impl Normalizable<'gcx, 'tcx> for Ty<'tcx>\n+where\n+    'gcx: 'tcx,\n+{\n+    fn type_op_method(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+    ) -> CanonicalizedQueryResult<'gcx, Self> {\n+        tcx.type_op_normalize_ty(canonicalized).unwrap()\n+    }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v\n+    }\n+}\n+\n+impl Normalizable<'gcx, 'tcx> for ty::Predicate<'tcx>\n+where\n+    'gcx: 'tcx,\n+{\n+    fn type_op_method(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+    ) -> CanonicalizedQueryResult<'gcx, Self> {\n+        tcx.type_op_normalize_predicate(canonicalized).unwrap()\n+    }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v\n+    }\n+}\n+\n+impl Normalizable<'gcx, 'tcx> for ty::PolyFnSig<'tcx>\n+where\n+    'gcx: 'tcx,\n+{\n+    fn type_op_method(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+    ) -> CanonicalizedQueryResult<'gcx, Self> {\n+        tcx.type_op_normalize_poly_fn_sig(canonicalized).unwrap()\n+    }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v\n+    }\n+}\n+\n+impl Normalizable<'gcx, 'tcx> for ty::FnSig<'tcx>\n+where\n+    'gcx: 'tcx,\n+{\n+    fn type_op_method(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+    ) -> CanonicalizedQueryResult<'gcx, Self> {\n+        tcx.type_op_normalize_fn_sig(canonicalized).unwrap()\n+    }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v\n+    }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx, T> TypeFoldable<'tcx> for Normalize<'tcx, T> {\n+        param_env,\n+        value,\n+    } where T: TypeFoldable<'tcx>,\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx, T> Lift<'tcx> for Normalize<'a, T> {\n+        type Lifted = Normalize<'tcx, T::Lifted>;\n+        param_env,\n+        value,\n+    } where T: Lift<'tcx>,\n+}\n+\n+impl_stable_hash_for! {\n+    impl<'tcx, T> for struct Normalize<'tcx, T> {\n+        param_env, value\n     }\n }"}, {"sha": "866ebd0cc12e11ea13e4242f30686d29754c468a", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, CanonicalizedQueryResult};\n+use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n use ty::{ParamEnv, Predicate, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -18,11 +18,11 @@ pub struct ProvePredicate<'tcx> {\n }\n \n impl<'tcx> ProvePredicate<'tcx> {\n-    pub fn new(\n-        param_env: ParamEnv<'tcx>,\n-        predicate: Predicate<'tcx>,\n-    ) -> Self {\n-        ProvePredicate { param_env, predicate }\n+    pub fn new(param_env: ParamEnv<'tcx>, predicate: Predicate<'tcx>) -> Self {\n+        ProvePredicate {\n+            param_env,\n+            predicate,\n+        }\n     }\n }\n \n@@ -43,6 +43,12 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     ) -> CanonicalizedQueryResult<'gcx, ()> {\n         tcx.type_op_prove_predicate(canonicalized).unwrap()\n     }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n+        v\n+    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "a0fb2c2763da13b84a63724b8c8f37eab7db64bf", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, CanonicalizedQueryResult};\n+use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n use ty::{ParamEnv, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -49,6 +49,12 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     ) -> CanonicalizedQueryResult<'gcx, ()> {\n         tcx.type_op_subtype(canonicalized).unwrap()\n     }\n+\n+    fn upcast_result(\n+        v: &'a CanonicalizedQueryResult<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n+        v\n+    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "8a48abd093d7fdeaf8d257aee64b2c9a033cce43", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -14,7 +14,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::{GlobalId, ConstValue};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n-    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n+    CanonicalTypeOpNormalizeGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n@@ -123,6 +123,36 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_op_prove_predicate<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_ty<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>) -> String {\n+        format!(\"normalizing `{:?}`\", goal)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_predicate<'tcx> {\n+    fn describe(\n+        _tcx: TyCtxt,\n+        goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>,\n+    ) -> String {\n+        format!(\"normalizing `{:?}`\", goal)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_poly_fn_sig<'tcx> {\n+    fn describe(\n+        _tcx: TyCtxt,\n+        goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>,\n+    ) -> String {\n+        format!(\"normalizing `{:?}`\", goal)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_fn_sig<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>) -> String {\n+        format!(\"normalizing `{:?}`\", goal)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)"}, {"sha": "178ee7cf8e9ac1938b165b202c41c674b44c4a2b", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -35,7 +35,7 @@ use session::config::OutputFilenames;\n use traits::{self, Vtable};\n use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal,\n                     CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n-                    CanonicalTypeOpProvePredicateGoal, NoSolution};\n+                    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n@@ -447,30 +447,62 @@ define_queries! { <'tcx>\n         CanonicalPredicateGoal<'tcx>\n     ) -> Result<traits::EvaluationResult, traits::OverflowError>,\n \n-    /// Do not call this query directly: invoke `infcx.eq()` instead.\n+    /// Do not call this query directly: part of the `Eq` type-op\n     [] fn type_op_eq: TypeOpEq(\n         CanonicalTypeOpEqGoal<'tcx>\n     ) -> Result<\n         Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n         NoSolution,\n     >,\n \n-    /// Do not call this query directly: invoke `infcx.at().subtype()` instead.\n+    /// Do not call this query directly: part of the `Subtype` type-op\n     [] fn type_op_subtype: TypeOpSubtype(\n         CanonicalTypeOpSubtypeGoal<'tcx>\n     ) -> Result<\n         Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n         NoSolution,\n     >,\n \n-    /// Do not call this query directly: invoke `infcx.at().prove_predicates()` instead.\n+    /// Do not call this query directly: part of the `ProvePredicate` type-op\n     [] fn type_op_prove_predicate: TypeOpProvePredicate(\n         CanonicalTypeOpProvePredicateGoal<'tcx>\n     ) -> Result<\n         Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n         NoSolution,\n     >,\n \n+    /// Do not call this query directly: part of the `Normalize` type-op\n+    [] fn type_op_normalize_ty: TypeOpNormalizeTy(\n+        CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, Ty<'tcx>>>>,\n+        NoSolution,\n+    >,\n+\n+    /// Do not call this query directly: part of the `Normalize` type-op\n+    [] fn type_op_normalize_predicate: TypeOpNormalizePredicate(\n+        CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ty::Predicate<'tcx>>>>,\n+        NoSolution,\n+    >,\n+\n+    /// Do not call this query directly: part of the `Normalize` type-op\n+    [] fn type_op_normalize_poly_fn_sig: TypeOpNormalizePolyFnSig(\n+        CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ty::PolyFnSig<'tcx>>>>,\n+        NoSolution,\n+    >,\n+\n+    /// Do not call this query directly: part of the `Normalize` type-op\n+    [] fn type_op_normalize_fn_sig: TypeOpNormalizeFnSig(\n+        CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ty::FnSig<'tcx>>>>,\n+        NoSolution,\n+    >,\n+\n     [] fn substitute_normalize_and_test_predicates:\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n "}, {"sha": "e17c6fba74c6ed2fc0c406e19287bef25ad5d891", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -1031,6 +1031,10 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::TypeOpEq |\n         DepKind::TypeOpSubtype |\n         DepKind::TypeOpProvePredicate |\n+        DepKind::TypeOpNormalizeTy |\n+        DepKind::TypeOpNormalizePredicate |\n+        DepKind::TypeOpNormalizePolyFnSig |\n+        DepKind::TypeOpNormalizeFnSig |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n         DepKind::ProgramClausesForEnv |"}, {"sha": "d8818b704bbe8bf321fc1679e83d10ee181fc9e2", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -286,9 +286,10 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n                     let instantiated_predicates =\n                         tcx.predicates_of(def_id).instantiate(tcx, substs);\n-                    let predicates =\n-                        type_checker.normalize(instantiated_predicates.predicates, location);\n-                    type_checker.prove_predicates(predicates, location);\n+                    type_checker.normalize_and_prove_instantiated_predicates(\n+                        instantiated_predicates,\n+                        location,\n+                    );\n                 }\n \n                 value.ty\n@@ -1526,9 +1527,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             AggregateKind::Array(_) | AggregateKind::Tuple => ty::InstantiatedPredicates::empty(),\n         };\n \n-        let predicates = self.normalize(instantiated_predicates.predicates, location);\n-        debug!(\"prove_aggregate_predicates: predicates={:?}\", predicates);\n-        self.prove_predicates(predicates, location);\n+        self.normalize_and_prove_instantiated_predicates(instantiated_predicates, location);\n     }\n \n     fn prove_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>, location: Location) {\n@@ -1540,12 +1539,22 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         );\n     }\n \n-    fn prove_predicates(\n+    fn normalize_and_prove_instantiated_predicates(\n         &mut self,\n-        predicates: impl IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n+        instantiated_predicates: ty::InstantiatedPredicates<'tcx>,\n         location: Location,\n     ) {\n+        for predicate in instantiated_predicates.predicates {\n+            let predicate = self.normalize(predicate, location);\n+            self.prove_predicate(predicate, location);\n+        }\n+    }\n \n+    fn prove_predicates(\n+        &mut self,\n+        predicates: impl IntoIterator<Item = ty::Predicate<'tcx>>,\n+        location: Location,\n+    ) {\n         for predicate in predicates {\n             debug!(\n                 \"prove_predicates(predicate={:?}, location={:?})\",\n@@ -1560,6 +1569,19 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn prove_predicate(&mut self, predicate: ty::Predicate<'tcx>, location: Location) {\n+        debug!(\n+            \"prove_predicate(predicate={:?}, location={:?})\",\n+            predicate, location,\n+        );\n+\n+        let param_env = self.param_env;\n+        self.fully_perform_op(\n+            location.at_self(),\n+            type_op::prove_predicate::ProvePredicate::new(param_env, predicate),\n+        ).unwrap()\n+    }\n+\n     fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);\n@@ -1588,7 +1610,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn normalize<T>(&mut self, value: T, location: impl ToLocations) -> T\n     where\n-        T: fmt::Debug + TypeFoldable<'tcx>,\n+        T: type_op::normalize::Normalizable<'gcx, 'tcx>,\n     {\n         debug!(\"normalize(value={:?}, location={:?})\", value, location);\n         let param_env = self.param_env;"}, {"sha": "f81b6a2d906f964a6123c021a0c3ba3b29a28479", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -35,6 +35,7 @@ mod normalize_projection_ty;\n mod normalize_erasing_regions;\n pub mod lowering;\n mod type_op_eq;\n+mod type_op_normalize;\n mod type_op_prove_predicate;\n mod type_op_subtype;\n \n@@ -53,6 +54,10 @@ pub fn provide(p: &mut Providers) {\n         type_op_eq: type_op_eq::type_op_eq,\n         type_op_prove_predicate: type_op_prove_predicate::type_op_prove_predicate,\n         type_op_subtype: type_op_subtype::type_op_subtype,\n+        type_op_normalize_ty: type_op_normalize::type_op_normalize_ty,\n+        type_op_normalize_predicate: type_op_normalize::type_op_normalize_predicate,\n+        type_op_normalize_fn_sig: type_op_normalize::type_op_normalize_fn_sig,\n+        type_op_normalize_poly_fn_sig: type_op_normalize::type_op_normalize_poly_fn_sig,\n         ..*p\n     };\n }"}, {"sha": "edfe627b15a3a4e03e69f6315a6837f55406c31e", "filename": "src/librustc_traits/type_op_normalize.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc_traits%2Ftype_op_normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0b3d6224768119f1d2e9850488c3d184362c1c/src%2Flibrustc_traits%2Ftype_op_normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op_normalize.rs?ref=2a0b3d6224768119f1d2e9850488c3d184362c1c", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::infer::InferCtxt;\n+use rustc::traits::query::type_op::normalize::Normalize;\n+use rustc::traits::query::NoSolution;\n+use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n+use rustc::ty::{FnSig, Lift, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_data_structures::sync::Lrc;\n+use std::fmt;\n+use syntax::codemap::DUMMY_SP;\n+\n+fn type_op_normalize<'gcx, 'tcx, T>(\n+    infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Normalize<'tcx, T>>,\n+) -> Result<Lrc<Canonical<'gcx, QueryResult<'gcx, <T as Lift<'gcx>>::Lifted>>>, NoSolution>\n+where\n+    T: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>,\n+{\n+    let (Normalize { param_env, value }, canonical_inference_vars) =\n+        infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n+    let fulfill_cx = &mut FulfillmentContext::new();\n+    let Normalized { value, obligations } = infcx\n+        .at(&ObligationCause::dummy(), param_env)\n+        .normalize(&value)?;\n+    fulfill_cx.register_predicate_obligations(infcx, obligations);\n+    infcx.make_canonicalized_query_result(canonical_inference_vars, value, fulfill_cx)\n+}\n+\n+crate fn type_op_normalize_ty<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Normalize<'tcx, Ty<'tcx>>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Ty<'tcx>>>>, NoSolution> {\n+    tcx.infer_ctxt()\n+        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+}\n+\n+crate fn type_op_normalize_predicate<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Normalize<'tcx, Predicate<'tcx>>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Predicate<'tcx>>>>, NoSolution> {\n+    tcx.infer_ctxt()\n+        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+}\n+\n+crate fn type_op_normalize_fn_sig<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Normalize<'tcx, FnSig<'tcx>>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, FnSig<'tcx>>>>, NoSolution> {\n+    tcx.infer_ctxt()\n+        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+}\n+\n+crate fn type_op_normalize_poly_fn_sig<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Normalize<'tcx, PolyFnSig<'tcx>>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n+    tcx.infer_ctxt()\n+        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+}"}]}