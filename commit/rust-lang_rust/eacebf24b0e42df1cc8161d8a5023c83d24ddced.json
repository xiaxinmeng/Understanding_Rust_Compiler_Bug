{"sha": "eacebf24b0e42df1cc8161d8a5023c83d24ddced", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhY2ViZjI0YjBlNDJkZjFjYzgxNjFkOGE1MDIzYzgzZDI0ZGRjZWQ=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-31T17:55:40Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-13T11:28:43Z"}, "message": "Pretty print quantified goals and clauses", "tree": {"sha": "824530b0c6e98b7d059b6c1f59cda726a7815cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824530b0c6e98b7d059b6c1f59cda726a7815cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eacebf24b0e42df1cc8161d8a5023c83d24ddced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eacebf24b0e42df1cc8161d8a5023c83d24ddced", "html_url": "https://github.com/rust-lang/rust/commit/eacebf24b0e42df1cc8161d8a5023c83d24ddced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eacebf24b0e42df1cc8161d8a5023c83d24ddced/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64aac8d4c1ff1dddd31a0aed9fbf9f619b8b808e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64aac8d4c1ff1dddd31a0aed9fbf9f619b8b808e", "html_url": "https://github.com/rust-lang/rust/commit/64aac8d4c1ff1dddd31a0aed9fbf9f619b8b808e"}], "stats": {"total": 277, "additions": 198, "deletions": 79}, "files": [{"sha": "66d9c6711bb5804304aa8d9750eb749b44e57a5e", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 144, "deletions": 5, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -14,9 +14,11 @@ use traits;\n use traits::project::Normalized;\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::{self, Lift, TyCtxt};\n+use syntax::symbol::InternedString;\n \n use std::fmt;\n use std::rc::Rc;\n+use std::collections::{BTreeSet, BTreeMap};\n \n // structural impls for the structs in traits\n \n@@ -479,7 +481,12 @@ impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n             Holds(wc) => write!(fmt, \"{}\", wc),\n             WellFormed(wf) => write!(fmt, \"{}\", wf),\n             FromEnv(from_env) => write!(fmt, \"{}\", from_env),\n-            Normalize(projection) => write!(fmt, \"Normalize({})\", projection),\n+            Normalize(projection) => write!(\n+                fmt,\n+                \"Normalize({} -> {})\",\n+                projection.projection_ty,\n+                projection.ty\n+            ),\n         }\n     }\n }\n@@ -495,6 +502,110 @@ impl fmt::Display for traits::QuantifierKind {\n     }\n }\n \n+/// Collect names for regions / types bound by a quantified goal / clause.\n+/// This collector does not try to do anything clever like in ppaux, it's just used\n+/// for debug output in tests anyway.\n+struct BoundNamesCollector {\n+    // Just sort by name because `BoundRegion::BrNamed` does not have a `BoundVar` index anyway.\n+    regions: BTreeSet<InternedString>,\n+\n+    // Sort by `BoundVar` index, so usually this should be equivalent to the order given\n+    // by the list of type parameters.\n+    types: BTreeMap<u32, InternedString>,\n+\n+    binder_index: ty::DebruijnIndex,\n+}\n+\n+impl BoundNamesCollector {\n+    fn new() -> Self {\n+        BoundNamesCollector {\n+            regions: BTreeSet::new(),\n+            types: BTreeMap::new(),\n+            binder_index: ty::INNERMOST,\n+        }\n+    }\n+\n+    fn is_empty(&self) -> bool {\n+        self.regions.is_empty() && self.types.is_empty()\n+    }\n+\n+    fn write_names(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut start = true;\n+        for r in &self.regions {\n+            if !start {\n+                write!(fmt, \", \")?;\n+            }\n+            start = false;\n+            write!(fmt, \"{}\", r)?;\n+        }\n+        for (_, t) in &self.types {\n+            if !start {\n+                write!(fmt, \", \")?;\n+            }\n+            start = false;\n+            write!(fmt, \"{}\", t)?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> bool {\n+        self.binder_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.binder_index.shift_out(1);\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: ty::Ty<'tcx>) -> bool {\n+        use syntax::symbol::Symbol;\n+\n+        match t.sty {\n+            ty::Bound(bound_ty) if bound_ty.index == self.binder_index => {\n+                self.types.insert(\n+                    bound_ty.var.as_u32(),\n+                    match bound_ty.kind {\n+                        ty::BoundTyKind::Param(name) => name,\n+                        ty::BoundTyKind::Anon => Symbol::intern(\n+                            &format!(\"?{}\", bound_ty.var.as_u32())\n+                        ).as_interned_str(),\n+                    }\n+                );\n+            }\n+\n+            _ => (),\n+        };\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+        use syntax::symbol::Symbol;\n+\n+        match r {\n+            ty::ReLateBound(index, br) if *index == self.binder_index => {\n+                match br {\n+                    ty::BoundRegion::BrNamed(_, name) => {\n+                        self.regions.insert(*name);\n+                    }\n+\n+                    ty::BoundRegion::BrAnon(var) => {\n+                        self.regions.insert(Symbol::intern(\n+                            &format!(\"?'{}\", var)\n+                        ).as_interned_str());\n+                    }\n+\n+                    _ => (),\n+                }\n+            }\n+\n+            _ => (),\n+        };\n+\n+        r.super_visit_with(self)\n+    }\n+}\n+\n impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::GoalKind::*;\n@@ -514,8 +625,22 @@ impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n             Not(goal) => write!(fmt, \"not {{ {} }}\", goal),\n             DomainGoal(goal) => write!(fmt, \"{}\", goal),\n             Quantified(qkind, goal) => {\n-                // FIXME: appropriate binder names\n-                write!(fmt, \"{}<> {{ {} }}\", qkind, goal.skip_binder())\n+                let mut collector = BoundNamesCollector::new();\n+                goal.skip_binder().visit_with(&mut collector);\n+\n+                if !collector.is_empty() {\n+                    write!(fmt, \"{}<\", qkind)?;\n+                    collector.write_names(fmt)?;\n+                    write!(fmt, \"> {{ \")?;\n+                }\n+\n+                write!(fmt, \"{}\", goal.skip_binder())?;\n+\n+                if !collector.is_empty() {\n+                    write!(fmt, \" }}\")?;\n+                }\n+\n+                Ok(())\n             }\n             CannotProve => write!(fmt, \"CannotProve\"),\n         }\n@@ -546,8 +671,22 @@ impl<'tcx> fmt::Display for traits::Clause<'tcx> {\n         match self {\n             Implies(clause) => write!(fmt, \"{}\", clause),\n             ForAll(clause) => {\n-                // FIXME: appropriate binder names\n-                write!(fmt, \"forall<> {{ {} }}\", clause.skip_binder())\n+                let mut collector = BoundNamesCollector::new();\n+                clause.skip_binder().visit_with(&mut collector);\n+\n+                if !collector.is_empty() {\n+                    write!(fmt, \"forall<\")?;\n+                    collector.write_names(fmt)?;\n+                    write!(fmt, \"> {{ \")?;\n+                }\n+\n+                write!(fmt, \"{}\", clause.skip_binder())?;\n+\n+                if !collector.is_empty() {\n+                    write!(fmt, \" }}\")?;\n+                }\n+\n+                Ok(())\n             }\n         }\n     }"}, {"sha": "7042c9f515dae74ce2689780881303f92114159a", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -250,8 +250,8 @@ crate fn environment<'a, 'tcx>(\n     // In an fn, we assume that the arguments and all their constituents are\n     // well-formed.\n     if is_fn {\n-        // `skip_binder` because we move late bound regions to the root binder,\n-        // restored in the return type\n+        // `skip_binder` because we move region parameters to the root binder,\n+        // restored in the return type of this query\n         let fn_sig = tcx.fn_sig(def_id).skip_binder().subst(tcx, bound_vars);\n \n         input_tys.extend("}, {"sha": "021ec18009a2540de1847d2188afe525dbdf25f9", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -600,14 +600,7 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n \n                 let mut strings: Vec<_> = clauses\n                     .iter()\n-                    .map(|clause| {\n-                        // Skip the top-level binder for a less verbose output\n-                        let program_clause = match clause {\n-                            Clause::Implies(program_clause) => program_clause,\n-                            Clause::ForAll(program_clause) => program_clause.skip_binder(),\n-                        };\n-                        program_clause.to_string()\n-                    })\n+                    .map(|clause| clause.to_string())\n                     .collect();\n \n                 strings.sort();"}, {"sha": "b772db5ca5523f21f3b2400158cc1161886843d5", "filename": "src/test/ui/chalkify/lower_env1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -17,7 +17,7 @@ trait Foo { }\n trait Bar where Self: Foo { }\n \n #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n-fn bar<T: Bar>() {\n+fn bar<T: Bar + ?Sized>() {\n }\n \n fn main() {"}, {"sha": "4aa40bae3193231210f05d596eb19eb7942b2915", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,20 +4,19 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n+   = note: forall<Self> { FromEnv(Self: Foo) :- FromEnv(Self: Bar). }\n+   = note: forall<Self> { Implemented(Self: Bar) :- FromEnv(Self: Bar). }\n+   = note: forall<Self> { WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo). }\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n    |\n LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n-   = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n+   = note: forall<Self> { FromEnv(Self: Foo) :- FromEnv(Self: Bar). }\n+   = note: forall<Self> { Implemented(Self: Bar) :- FromEnv(Self: Bar). }\n+   = note: forall<Self> { Implemented(Self: Foo) :- FromEnv(Self: Foo). }\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2328db5b4f687cf833f256c2b41fecd7ab90967d", "filename": "src/test/ui/chalkify/lower_env2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -14,12 +14,12 @@\n trait Foo { }\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-struct S<'a, T> where T: Foo {\n+struct S<'a, T: ?Sized> where T: Foo {\n     data: &'a T,\n }\n \n #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n-fn bar<'a, T: Foo>(x: S<T>) {\n+fn bar<T: Foo>(_x: S<'_, T>) { // note that we have an implicit `T: Sized` bound\n }\n \n fn main() {"}, {"sha": "aaf6eda641dbb7d52187c3a8b05ad9c56d7bf437", "filename": "src/test/ui/chalkify/lower_env2.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,22 +4,20 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(T: Foo) :- FromEnv(S<'a, T>).\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(S<'a, T>).\n-   = note: TypeOutlives(T : 'a) :- FromEnv(S<'a, T>).\n-   = note: WellFormed(S<'a, T>) :- Implemented(T: std::marker::Sized), Implemented(T: Foo), TypeOutlives(T : 'a).\n+   = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }\n+   = note: forall<'a, T> { TypeOutlives(T : 'a) :- FromEnv(S<'a, T>). }\n+   = note: forall<'a, T> { WellFormed(S<'a, T>) :- Implemented(T: Foo), TypeOutlives(T : 'a). }\n \n error: program clause dump\n   --> $DIR/lower_env2.rs:21:1\n    |\n LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(T: Foo) :- FromEnv(S<'a, T>).\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(S<'a, T>).\n-   = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n-   = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n-   = note: TypeOutlives(T : 'a) :- FromEnv(S<'a, T>).\n+   = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }\n+   = note: forall<'a, T> { TypeOutlives(T : 'a) :- FromEnv(S<'a, T>). }\n+   = note: forall<Self> { Implemented(Self: Foo) :- FromEnv(Self: Foo). }\n+   = note: forall<Self> { Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized). }\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f507deb6fa04c8c12094536f763c05958a1f0211", "filename": "src/test/ui/chalkify/lower_env3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,17 +4,17 @@ error: program clause dump\n LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n+   = note: forall<Self> { Implemented(Self: Foo) :- FromEnv(Self: Foo). }\n \n error: program clause dump\n   --> $DIR/lower_env3.rs:20:5\n    |\n LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(Self: std::marker::Sized) :- FromEnv(Self: std::clone::Clone).\n-   = note: Implemented(Self: std::clone::Clone) :- FromEnv(Self: std::clone::Clone).\n-   = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n+   = note: forall<Self> { FromEnv(Self: std::marker::Sized) :- FromEnv(Self: std::clone::Clone). }\n+   = note: forall<Self> { Implemented(Self: std::clone::Clone) :- FromEnv(Self: std::clone::Clone). }\n+   = note: forall<Self> { Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized). }\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed84fe4eb26c52c7f4b7710fd740f2a0e38b7a93", "filename": "src/test/ui/chalkify/lower_impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,15 +4,15 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T : 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized).\n+   = note: forall<T> { Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T : 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized). }\n \n error: program clause dump\n   --> $DIR/lower_impl.rs:23:5\n    |\n LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :- Implemented(T: Bar).\n+   = note: forall<T> { Normalize(<T as Bar>::Assoc -> std::vec::Vec<T>) :- Implemented(T: Bar). }\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9b4bba67112ea82df67855cdf71adebbea28f23c", "filename": "src/test/ui/chalkify/lower_struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -11,8 +11,8 @@\n #![feature(rustc_attrs)]\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-struct Foo<T> where Box<T>: Clone {\n-    _x: std::marker::PhantomData<T>,\n+struct Foo<'a, T> where Box<T>: Clone {\n+    _x: std::marker::PhantomData<&'a T>,\n }\n \n fn main() { }"}, {"sha": "a12ee52a086f64f8a679c29d6581c58b362eb0d7", "filename": "src/test/ui/chalkify/lower_struct.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,9 +4,10 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Foo<T>).\n-   = note: FromEnv(std::boxed::Box<T>: std::clone::Clone) :- FromEnv(Foo<T>).\n-   = note: WellFormed(Foo<T>) :- Implemented(T: std::marker::Sized), Implemented(std::boxed::Box<T>: std::clone::Clone).\n+   = note: forall<'a, T> { FromEnv(T: std::marker::Sized) :- FromEnv(Foo<'a, T>). }\n+   = note: forall<'a, T> { FromEnv(std::boxed::Box<T>: std::clone::Clone) :- FromEnv(Foo<'a, T>). }\n+   = note: forall<'a, T> { TypeOutlives(T : 'a) :- FromEnv(Foo<'a, T>). }\n+   = note: forall<'a, T> { WellFormed(Foo<'a, T>) :- Implemented(T: std::marker::Sized), Implemented(std::boxed::Box<T>: std::clone::Clone), TypeOutlives(T : 'a). }\n \n error: aborting due to previous error\n "}, {"sha": "6a3f7aa63765f20f16a0d23f822d36484c34f7c8", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,20 +4,20 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(<Self as Foo<S, T>>::Assoc: Bar) :- FromEnv(Self: Foo<S, T>).\n-   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T>).\n-   = note: Implemented(Self: Foo<S, T>) :- FromEnv(Self: Foo<S, T>).\n-   = note: WellFormed(Self: Foo<S, T>) :- Implemented(Self: Foo<S, T>), WellFormed(S: std::marker::Sized), WellFormed(<Self as Foo<S, T>>::Assoc: Bar).\n+   = note: forall<Self, S, T> { FromEnv(<Self as Foo<S, T>>::Assoc: Bar) :- FromEnv(Self: Foo<S, T>). }\n+   = note: forall<Self, S, T> { FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T>). }\n+   = note: forall<Self, S, T> { Implemented(Self: Foo<S, T>) :- FromEnv(Self: Foo<S, T>). }\n+   = note: forall<Self, S, T> { WellFormed(Self: Foo<S, T>) :- Implemented(Self: Foo<S, T>), WellFormed(S: std::marker::Sized), WellFormed(<Self as Foo<S, T>>::Assoc: Bar). }\n \n error: program clause dump\n   --> $DIR/lower_trait.rs:17:5\n    |\n LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)).\n-   = note: ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)).\n-   = note: WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>).\n+   = note: forall<Self, S, T> { FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)). }\n+   = note: forall<Self, S, T> { ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)). }\n+   = note: forall<Self, S, T> { WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>). }\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c0e1d8fc4c828ef54c61957998be39894c682c70", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -11,9 +11,8 @@\n #![feature(rustc_attrs)]\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-trait Foo<F> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n+trait Foo<F: ?Sized> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n {\n-    fn s(_: F) -> F;\n }\n \n fn main() {"}, {"sha": "6d3e0ec55b276f966be12bbfe4f57427207ff253", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -4,11 +4,10 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(F: std::marker::Sized) :- FromEnv(Self: Foo<F>).\n-   = note: FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>).\n-   = note: Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>).\n-   = note: ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>).\n-   = note: WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), WellFormed(F: std::marker::Sized), forall<> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }, forall<> { ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }.\n+   = note: forall<'a, Self, F> { FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>). }\n+   = note: forall<'a, Self, F> { ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>). }\n+   = note: forall<Self, F> { Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>). }\n+   = note: forall<Self, F> { WellFormed(Self: Foo<F>) :- Implemented(Self: Foo<F>), forall<'a> { WellFormed(F: std::ops::Fn<(&'a (u8, u16),)>) }, forall<'a> { ProjectionEq(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) }. }\n \n error: aborting due to previous error\n "}, {"sha": "ac58c0bf2fe37778e477db7d5b954bd8c22d0377", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -10,22 +10,16 @@\n \n #![feature(rustc_attrs)]\n \n-use std::fmt::{Debug, Display};\n use std::borrow::Borrow;\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-trait Foo<'a, 'b, S, T, U>\n+trait Foo<'a, 'b, T, U>\n where\n-    S: Debug,\n-    T: Borrow<U>,\n-    U: ?Sized,\n+    T: Borrow<U> + ?Sized,\n+    U: ?Sized + 'b,\n     'a: 'b,\n-    U: 'b,\n-    Vec<T>:, // NOTE(#53696) this checks an empty list of bounds.\n+    Box<T>:, // NOTE(#53696) this checks an empty list of bounds.\n {\n-    fn s(_: S) -> S;\n-    fn t(_: T) -> T;\n-    fn u(_: U) -> U;\n }\n \n fn main() {"}, {"sha": "f4f3effaaaef78f9a7c9e5f60d0e93012578ce84", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eacebf24b0e42df1cc8161d8a5023c83d24ddced/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=eacebf24b0e42df1cc8161d8a5023c83d24ddced", "patch": "@@ -1,18 +1,15 @@\n error: program clause dump\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n+  --> $DIR/lower_trait_where_clause.rs:15:1\n    |\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(S: std::fmt::Debug) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(S: std::fmt::Debug), WellFormed(T: std::borrow::Borrow<U>), RegionOutlives('a : 'b), TypeOutlives(U : 'b), WellFormed(std::vec::Vec<T>).\n-   = note: WellFormed(std::vec::Vec<T>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: forall<'a, 'b, Self, T, U> { FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { Implemented(Self: Foo<'a, 'b, T, U>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { WellFormed(Self: Foo<'a, 'b, T, U>) :- Implemented(Self: Foo<'a, 'b, T, U>), WellFormed(T: std::borrow::Borrow<U>), TypeOutlives(U : 'b), RegionOutlives('a : 'b), WellFormed(std::boxed::Box<T>). }\n+   = note: forall<'a, 'b, Self, T, U> { WellFormed(std::boxed::Box<T>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n \n error: aborting due to previous error\n "}]}