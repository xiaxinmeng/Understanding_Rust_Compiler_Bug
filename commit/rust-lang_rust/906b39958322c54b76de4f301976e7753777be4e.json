{"sha": "906b39958322c54b76de4f301976e7753777be4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNmIzOTk1ODMyMmM1NGI3NmRlNGYzMDE5NzZlNzc1Mzc3N2JlNGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T09:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T09:29:09Z"}, "message": "Rollup merge of #69942 - estebank:sized-verbose-sugg, r=matthewjasper\n\nIncrease verbosity when suggesting subtle code changes\n\nDo not suggest changes that are actually quite small inline, to minimize the likelihood of confusion.\n\nFix #69243.", "tree": {"sha": "a3338a1a2ca2885e99504c2cfb19a2baef16162f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3338a1a2ca2885e99504c2cfb19a2baef16162f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/906b39958322c54b76de4f301976e7753777be4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeIFlCRBK7hj4Ov3rIwAAdHIIAC71ZQpnFK0ZzNS2QgTTIBSh\ndQGbdNDFMMKJUCpJX2EqBLj9oy5cmW3151+pwZUupOmpmEp1U0K8IpZw760cwlcB\nLDO052Ih9ugPzx2t+K3LjufETgxcMvvNO4AVHb3LijXgtRPFHZJLPm4j5vN2a5V2\n5mCkq54kdHC2K3btF/kgKeCkEs3NO6/5PkCllE8uo19Oig8lxdF5OA5SXpE9mitG\nvqf2iac1LWc6mtqdUnS8Cz+A8ugphEQyThN522ynCntc+/lUzVLFIwLr1w0dSSTt\nouuZe3OC4/NzUwqvoKbVP+HQCg1RnAojcAT80R4kQ+GmCsG48fqZLKcQy4TiQVE=\n=aG0O\n-----END PGP SIGNATURE-----\n", "payload": "tree a3338a1a2ca2885e99504c2cfb19a2baef16162f\nparent 61a56fbe0053cbf5aee5967a3211dcd17b605710\nparent 9175940c9277d9331c964e27fd32ef1ae315b7ba\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584955749 +0100\ncommitter GitHub <noreply@github.com> 1584955749 +0100\n\nRollup merge of #69942 - estebank:sized-verbose-sugg, r=matthewjasper\n\nIncrease verbosity when suggesting subtle code changes\n\nDo not suggest changes that are actually quite small inline, to minimize the likelihood of confusion.\n\nFix #69243.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/906b39958322c54b76de4f301976e7753777be4e", "html_url": "https://github.com/rust-lang/rust/commit/906b39958322c54b76de4f301976e7753777be4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/906b39958322c54b76de4f301976e7753777be4e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a56fbe0053cbf5aee5967a3211dcd17b605710", "url": "https://api.github.com/repos/rust-lang/rust/commits/61a56fbe0053cbf5aee5967a3211dcd17b605710", "html_url": "https://github.com/rust-lang/rust/commit/61a56fbe0053cbf5aee5967a3211dcd17b605710"}, {"sha": "9175940c9277d9331c964e27fd32ef1ae315b7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9175940c9277d9331c964e27fd32ef1ae315b7ba", "html_url": "https://github.com/rust-lang/rust/commit/9175940c9277d9331c964e27fd32ef1ae315b7ba"}], "stats": {"total": 1481, "additions": 818, "deletions": 663}, "files": [{"sha": "ea8b4f41888dc2ec267084a777ee47172223bf19", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -3,7 +3,7 @@ use crate::infer::InferCtxt;\n use rustc::hir::map::Map;\n use rustc::ty::print::Print;\n use rustc::ty::{self, DefIdTree, Infer, Ty, TyVar};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -462,24 +462,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         e: &Expr<'_>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n-        if let (Ok(snippet), Some(tables), None) = (\n-            self.tcx.sess.source_map().span_to_snippet(segment.ident.span),\n-            self.in_progress_tables,\n-            &segment.args,\n-        ) {\n+        if let (Some(tables), None) = (self.in_progress_tables, &segment.args) {\n             let borrow = tables.borrow();\n             if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n-                    err.span_suggestion(\n-                        segment.ident.span,\n+                    err.span_suggestion_verbose(\n+                        segment.ident.span.shrink_to_hi(),\n                         &format!(\n                             \"consider specifying the type argument{} in the method call\",\n-                            if generics.params.len() > 1 { \"s\" } else { \"\" },\n+                            pluralize!(generics.params.len()),\n                         ),\n                         format!(\n-                            \"{}::<{}>\",\n-                            snippet,\n+                            \"::<{}>\",\n                             generics\n                                 .params\n                                 .iter()"}, {"sha": "d680b9e002678167dcace9bf00a54233ffb02c63", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1038,7 +1038,7 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n                 def.variant_descr(),\n                 self.tcx.def_path_str(def.did)\n             )\n-            .span_label(span, format!(\"field `{}` is private\", field.ident))\n+            .span_label(span, \"private field\")\n             .emit();\n         }\n     }\n@@ -1180,7 +1180,11 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         let is_error = !self.item_is_accessible(def_id);\n         if is_error {\n-            self.tcx.sess.span_err(self.span, &format!(\"{} `{}` is private\", kind, descr));\n+            self.tcx\n+                .sess\n+                .struct_span_err(self.span, &format!(\"{} `{}` is private\", kind, descr))\n+                .span_label(self.span, &format!(\"private {}\", kind))\n+                .emit();\n         }\n         is_error\n     }\n@@ -1313,8 +1317,12 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     hir::QPath::Resolved(_, ref path) => path.to_string(),\n                     hir::QPath::TypeRelative(_, ref segment) => segment.ident.to_string(),\n                 };\n-                let msg = format!(\"{} `{}` is private\", kind.descr(def_id), name);\n-                self.tcx.sess.span_err(span, &msg);\n+                let kind = kind.descr(def_id);\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(span, &format!(\"{} `{}` is private\", kind, name))\n+                    .span_label(span, &format!(\"private {}\", kind))\n+                    .emit();\n                 return;\n             }\n         }"}, {"sha": "9cd066b629c074f0f75cb9a068ed5a570bd37160", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -951,7 +951,7 @@ impl<'a> Resolver<'a> {\n         let descr = get_descr(binding);\n         let mut err =\n             struct_span_err!(self.session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n-        err.span_label(ident.span, &format!(\"this {} is private\", descr));\n+        err.span_label(ident.span, &format!(\"private {}\", descr));\n         if let Some(span) = ctor_fields_span {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n         }"}, {"sha": "a8d4e7ce5f6ba6cc84b803e43468b5ac9c004adb", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -506,10 +506,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n         match (res, source) {\n             (Res::Def(DefKind::Macro(MacroKind::Bang), _), _) => {\n-                err.span_suggestion(\n-                    span,\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n                     \"use `!` to invoke the macro\",\n-                    format!(\"{}!\", path_str),\n+                    \"!\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n                 if path_str == \"try\" && span.rust_2015() {"}, {"sha": "d001ced3e7ea136043dab921d2867bd83f26ed52", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -815,11 +815,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n-                err.span_suggestion(\n+                err.span_suggestion_verbose(\n                     pipe_span,\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n-                        if expected_args.len() < 2 { \"\" } else { \"s\" }\n+                        pluralize!(expected_args.len())\n                     ),\n                     format!(\"|{}|\", underscores),\n                     Applicability::MachineApplicable,\n@@ -833,7 +833,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         .map(|(name, _)| name.to_owned())\n                         .collect::<Vec<String>>()\n                         .join(\", \");\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         found_span,\n                         \"change the closure to take multiple arguments instead of a single tuple\",\n                         format!(\"|{}|\", sugg),\n@@ -870,7 +870,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             String::new()\n                         },\n                     );\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         found_span,\n                         \"change the closure to accept a tuple instead of individual arguments\",\n                         sugg,\n@@ -1420,15 +1420,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |\n                         //    = note: cannot resolve `_: Tt`\n \n-                        err.span_suggestion(\n-                            span,\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_hi(),\n                             &format!(\n                                 \"consider specifying the type argument{} in the function call\",\n-                                if generics.params.len() > 1 { \"s\" } else { \"\" },\n+                                pluralize!(generics.params.len()),\n                             ),\n                             format!(\n-                                \"{}::<{}>\",\n-                                snippet,\n+                                \"::<{}>\",\n                                 generics\n                                     .params\n                                     .iter()\n@@ -1590,7 +1589,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             [] => (span.shrink_to_hi(), \":\"),\n                             [.., bound] => (bound.span().shrink_to_hi(), \" + \"),\n                         };\n-                        err.span_suggestion(\n+                        err.span_suggestion_verbose(\n                             span,\n                             \"consider relaxing the implicit `Sized` restriction\",\n                             format!(\"{} ?Sized\", separator),"}, {"sha": "fdb5def193031a9f18115a153af637b561c4f557", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n         let hir = self.tcx.hir();\n         // Get the name of the callable and the arguments to be used in the suggestion.\n-        let snippet = match hir.get_if_local(def_id) {\n+        let (snippet, sugg) = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::Closure(_, decl, _, span, ..),\n                 ..\n@@ -401,7 +401,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     None => return,\n                 };\n                 let args = decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                format!(\"{}({})\", name, args)\n+                let sugg = format!(\"({})\", args);\n+                (format!(\"{}{}\", name, sugg), sugg)\n             }\n             Some(hir::Node::Item(hir::Item {\n                 ident,\n@@ -422,7 +423,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>()\n                     .join(\", \");\n-                format!(\"{}({})\", ident, args)\n+                let sugg = format!(\"({})\", args);\n+                (format!(\"{}{}\", ident, sugg), sugg)\n             }\n             _ => return,\n         };\n@@ -431,10 +433,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // an argument, the `obligation.cause.span` points at the expression\n             // of the argument, so we can provide a suggestion. This is signaled\n             // by `points_at_arg`. Otherwise, we give a more general note.\n-            err.span_suggestion(\n-                obligation.cause.span,\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_hi(),\n                 &msg,\n-                snippet,\n+                sugg,\n                 Applicability::HasPlaceholders,\n             );\n         } else {\n@@ -619,7 +621,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         .source_map()\n                         .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n                     if points_at_arg && mutability == hir::Mutability::Not && refs_number > 0 {\n-                        err.span_suggestion(\n+                        err.span_suggestion_verbose(\n                             sp,\n                             \"consider changing this borrow's mutability\",\n                             \"&mut \".to_string(),"}, {"sha": "e812fa81e6252e22a170bf1b4aa44941295b14f2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1452,8 +1452,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .expect(\"missing associated type\");\n \n         if !assoc_ty.vis.is_accessible_from(def_scope, tcx) {\n-            let msg = format!(\"associated type `{}` is private\", binding.item_name);\n-            tcx.sess.span_err(binding.span, &msg);\n+            tcx.sess\n+                .struct_span_err(\n+                    binding.span,\n+                    &format!(\"associated type `{}` is private\", binding.item_name),\n+                )\n+                .span_label(binding.span, \"private associated type\")\n+                .emit();\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(hir_ref_id), binding.span);\n \n@@ -2315,8 +2320,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let kind = DefKind::AssocTy;\n         if !item.vis.is_accessible_from(def_scope, tcx) {\n-            let msg = format!(\"{} `{}` is private\", kind.descr(item.def_id), assoc_ident);\n-            tcx.sess.span_err(span, &msg);\n+            let kind = kind.descr(item.def_id);\n+            let msg = format!(\"{} `{}` is private\", kind, assoc_ident);\n+            tcx.sess\n+                .struct_span_err(span, &msg)\n+                .span_label(span, &format!(\"private {}\", kind))\n+                .emit();\n         }\n         tcx.check_stability(item.def_id, Some(hir_ref_id), span);\n "}, {"sha": "b42f74cced98e84ba50b0fd99ec628a8121fb2b2", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1580,13 +1580,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let mut err = struct_span_err!(\n             self.tcx().sess,\n-            expr.span,\n+            field.span,\n             E0616,\n             \"field `{}` of {} `{}` is private\",\n             field,\n             kind_name,\n             struct_path\n         );\n+        err.span_label(field.span, \"private field\");\n         // Also check if an accessible method exists, which is often what is meant.\n         if self.method_exists(field, expr_t, expr.hir_id, false) && !self.expr_in_place(expr.hir_id)\n         {\n@@ -1611,7 +1612,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             field,\n             expr_t\n         );\n-\n+        err.span_label(field.span, \"method, not a field\");\n         if !self.expr_in_place(expr.hir_id) {\n             self.suggest_method_call(\n                 &mut err,"}, {"sha": "962f9807546ac5ae614651f1e7a933876d6194c1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n     ) {\n-        let has_params = self\n+        let params = self\n             .probe_for_name(\n                 method_name.span,\n                 probe::Mode::MethodCall,\n@@ -147,26 +147,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 call_expr.hir_id,\n                 ProbeScope::TraitsInScope,\n             )\n-            .and_then(|pick| {\n+            .map(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n-                Ok(sig.inputs().skip_binder().len() > 1)\n-            });\n+                sig.inputs().skip_binder().len().saturating_sub(1)\n+            })\n+            .unwrap_or(0);\n \n         // Account for `foo.bar<T>`;\n-        let sugg_span = method_name.span.with_hi(call_expr.span.hi());\n-        let snippet = self\n-            .tcx\n-            .sess\n-            .source_map()\n-            .span_to_snippet(sugg_span)\n-            .unwrap_or_else(|_| method_name.to_string());\n-        let (suggestion, applicability) = if has_params.unwrap_or_default() {\n-            (format!(\"{}(...)\", snippet), Applicability::HasPlaceholders)\n-        } else {\n-            (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n-        };\n+        let sugg_span = call_expr.span.shrink_to_hi();\n+        let (suggestion, applicability) = (\n+            format!(\"({})\", (0..params).map(|_| \"_\").collect::<Vec<_>>().join(\", \")),\n+            if params > 0 { Applicability::HasPlaceholders } else { Applicability::MaybeIncorrect },\n+        );\n \n-        err.span_suggestion(sugg_span, msg, suggestion, applicability);\n+        err.span_suggestion_verbose(sugg_span, msg, suggestion, applicability);\n     }\n \n     /// Performs method lookup. If lookup is successful, it will return the callee"}, {"sha": "68996f5aaf973c68aaa4e6c3c3a3aea357347f3e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -758,25 +758,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             MethodError::Ambiguity(sources) => {\n                 let mut err = struct_span_err!(\n                     self.sess(),\n-                    span,\n+                    item_name.span,\n                     E0034,\n                     \"multiple applicable items in scope\"\n                 );\n-                err.span_label(span, format!(\"multiple `{}` found\", item_name));\n+                err.span_label(item_name.span, format!(\"multiple `{}` found\", item_name));\n \n                 report_candidates(span, &mut err, sources, sugg_span);\n                 err.emit();\n             }\n \n             MethodError::PrivateMatch(kind, def_id, out_of_scope_traits) => {\n+                let kind = kind.descr(def_id);\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n-                    span,\n+                    item_name.span,\n                     E0624,\n                     \"{} `{}` is private\",\n-                    kind.descr(def_id),\n+                    kind,\n                     item_name\n                 );\n+                err.span_label(item_name.span, &format!(\"private {}\", kind));\n                 self.suggest_valid_traits(&mut err, out_of_scope_traits);\n                 err.emit();\n             }"}, {"sha": "3006ecc5d588c612a3ff96c5139c15637eba5e75", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -4939,15 +4939,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 _ => {}\n             }\n-            if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n-                err.span_suggestion(\n-                    expr.span,\n-                    &format!(\"use parentheses to {}\", msg),\n-                    format!(\"{}({})\", code, sugg_call),\n-                    applicability,\n-                );\n-                return true;\n-            }\n+            err.span_suggestion_verbose(\n+                expr.span.shrink_to_hi(),\n+                &format!(\"use parentheses to {}\", msg),\n+                format!(\"({})\", sugg_call),\n+                applicability,\n+            );\n+            return true;\n         }\n         false\n     }"}, {"sha": "0d38fa98bd7f8e32c6ddb0de5692b54fbbb566ae", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -753,17 +753,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                let (msg, sugg) = match parent_pat {\n-                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => (\n-                        \"bind the struct field to a different name instead\",\n-                        format!(\"{}: other_{}\", ident, ident.as_str().to_lowercase()),\n-                    ),\n-                    _ => (\n-                        \"introduce a new binding instead\",\n-                        format!(\"other_{}\", ident.as_str().to_lowercase()),\n-                    ),\n+                match parent_pat {\n+                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => {\n+                        e.span_suggestion_verbose(\n+                            ident.span.shrink_to_hi(),\n+                            \"bind the struct field to a different name instead\",\n+                            format!(\": other_{}\", ident.as_str().to_lowercase()),\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+                    _ => {\n+                        let msg = \"introduce a new binding instead\";\n+                        let sugg = format!(\"other_{}\", ident.as_str().to_lowercase());\n+                        e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n+                    }\n                 };\n-                e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n             }\n         }\n         e.emit();"}, {"sha": "c5e32afbbce400f9bc44a8dc878f1adb902dd83f", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/associated-const-ambiguity-report.rs:17:16\n+  --> $DIR/associated-const-ambiguity-report.rs:17:23\n    |\n LL | const X: i32 = <i32>::ID;\n-   |                ^^^^^^^^^ multiple `ID` found\n+   |                       ^^ multiple `ID` found\n    |\n note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`\n   --> $DIR/associated-const-ambiguity-report.rs:10:5"}, {"sha": "1b9d7ac7e6c3f2e0d6e5247ca84e8b7bf09ee7b8", "filename": "src/test/ui/associated-const/associated-const-private-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated constant `ID` is private\n-  --> $DIR/associated-const-private-impl.rs:13:19\n+  --> $DIR/associated-const-private-impl.rs:13:30\n    |\n LL |     assert_eq!(1, bar1::Foo::ID);\n-   |                   ^^^^^^^^^^^^^\n+   |                              ^^ private associated constant\n \n error: aborting due to previous error\n "}, {"sha": "7977e529a11a6c140a94b503899af83ff4003dd3", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/E0034.rs:20:5\n+  --> $DIR/E0034.rs:20:11\n    |\n LL |     Test::foo()\n-   |     ^^^^^^^^^ multiple `foo` found\n+   |           ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `Trait1` for the type `Test`\n   --> $DIR/E0034.rs:12:5"}, {"sha": "bb92c23e0f600b613f77d39fb6453eaa8d29f182", "filename": "src/test/ui/error-codes/E0451.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,13 +2,13 @@ error[E0451]: field `b` of struct `bar::Foo` is private\n   --> $DIR/E0451.rs:14:21\n    |\n LL |     let bar::Foo{a, b} = foo;\n-   |                     ^ field `b` is private\n+   |                     ^ private field\n \n error[E0451]: field `b` of struct `bar::Foo` is private\n   --> $DIR/E0451.rs:18:29\n    |\n LL |     let f = bar::Foo{ a: 0, b: 0 };\n-   |                             ^^^^ field `b` is private\n+   |                             ^^^^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ee902584f56dac23028d5be6ef1a01c840a5223e", "filename": "src/test/ui/error-codes/E0603.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0603.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0603.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0603.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: constant `PRIVATE` is private\n   --> $DIR/E0603.rs:6:17\n    |\n LL |     SomeModule::PRIVATE;\n-   |                 ^^^^^^^ this constant is private\n+   |                 ^^^^^^^ private constant\n    |\n note: the constant `PRIVATE` is defined here\n   --> $DIR/E0603.rs:2:5"}, {"sha": "1bc047dd356e03547dac219ec2692fda245cdddd", "filename": "src/test/ui/error-codes/E0615.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `method` on type `Foo`\n   --> $DIR/E0615.rs:11:7\n    |\n LL |     f.method;\n-   |       ^^^^^^ help: use parentheses to call the method: `method()`\n+   |       ^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     f.method();\n+   |             ^^\n \n error: aborting due to previous error\n "}, {"sha": "422bf687e7bd43c080daf65f2d56db62f9e99494", "filename": "src/test/ui/error-codes/E0616.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0616.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `x` of struct `a::Foo` is private\n-  --> $DIR/E0616.rs:13:5\n+  --> $DIR/E0616.rs:13:7\n    |\n LL |     f.x;\n-   |     ^^^\n+   |       ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "1d3336fb181a06778af862ecf457850ae2f1c893", "filename": "src/test/ui/error-codes/E0624.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `method` is private\n   --> $DIR/E0624.rs:11:9\n    |\n LL |     foo.method();\n-   |         ^^^^^^\n+   |         ^^^^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "2d22bb395140b369966d033ce7c4ed1964b39384", "filename": "src/test/ui/error-codes/ex-E0611.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2Fex-E0611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-codes%2Fex-E0611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fex-E0611.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `0` of struct `a::Foo` is private\n-  --> $DIR/ex-E0611.rs:11:4\n+  --> $DIR/ex-E0611.rs:11:6\n    |\n LL |    y.0;\n-   |    ^^^\n+   |      ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "7f524230ef00633a7ecc45a9a0273a596744be5c", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,7 +8,7 @@ error[E0603]: constant `FOO` is private\n   --> $DIR/error-festival.rs:22:10\n    |\n LL |     foo::FOO;\n-   |          ^^^ this constant is private\n+   |          ^^^ private constant\n    |\n note: the constant `FOO` is defined here\n   --> $DIR/error-festival.rs:7:5"}, {"sha": "1855c0b14379d0a96d435695743d080d46eca27a", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -17,22 +17,22 @@ LL |     r.a_unstable_undeclared_pub;\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `b_crate` of struct `pub_and_stability::Record` is private\n-  --> $DIR/explore-issue-38412.rs:31:5\n+  --> $DIR/explore-issue-38412.rs:31:7\n    |\n LL |     r.b_crate;\n-   |     ^^^^^^^^^\n+   |       ^^^^^^^ private field\n \n error[E0616]: field `c_mod` of struct `pub_and_stability::Record` is private\n-  --> $DIR/explore-issue-38412.rs:32:5\n+  --> $DIR/explore-issue-38412.rs:32:7\n    |\n LL |     r.c_mod;\n-   |     ^^^^^^^\n+   |       ^^^^^ private field\n \n error[E0616]: field `d_priv` of struct `pub_and_stability::Record` is private\n-  --> $DIR/explore-issue-38412.rs:33:5\n+  --> $DIR/explore-issue-38412.rs:33:7\n    |\n LL |     r.d_priv;\n-   |     ^^^^^^^^\n+   |       ^^^^^^ private field\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:37:5\n@@ -44,22 +44,22 @@ LL |     t.2;\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `3` of struct `pub_and_stability::Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:38:5\n+  --> $DIR/explore-issue-38412.rs:38:7\n    |\n LL |     t.3;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `4` of struct `pub_and_stability::Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:39:5\n+  --> $DIR/explore-issue-38412.rs:39:7\n    |\n LL |     t.4;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `5` of struct `pub_and_stability::Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:40:5\n+  --> $DIR/explore-issue-38412.rs:40:7\n    |\n LL |     t.5;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:44:7\n@@ -83,19 +83,19 @@ error[E0624]: associated function `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:50:7\n    |\n LL |     r.pub_crate();\n-   |       ^^^^^^^^^\n+   |       ^^^^^^^^^ private associated function\n \n error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:51:7\n    |\n LL |     r.pub_mod();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:52:7\n    |\n LL |     r.private();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:57:7\n@@ -119,19 +119,19 @@ error[E0624]: associated function `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:63:7\n    |\n LL |     t.pub_crate();\n-   |       ^^^^^^^^^\n+   |       ^^^^^^^^^ private associated function\n \n error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:64:7\n    |\n LL |     t.pub_mod();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:65:7\n    |\n LL |     t.private();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error: aborting due to 19 previous errors\n "}, {"sha": "753424c7f88b893000a3a3c9827582a04abded1f", "filename": "src/test/ui/export-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexport-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexport-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport-import.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `unexported` is private\n   --> $DIR/export-import.rs:1:8\n    |\n LL | use m::unexported;\n-   |        ^^^^^^^^^^ this function is private\n+   |        ^^^^^^^^^^ private function\n    |\n note: the function `unexported` is defined here\n   --> $DIR/export-import.rs:7:5"}, {"sha": "f73bd454d35922495ee755c3d999e1ce1acc3a81", "filename": "src/test/ui/export-tag-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexport-tag-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexport-tag-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport-tag-variant.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Y` is private\n   --> $DIR/export-tag-variant.rs:7:26\n    |\n LL | fn main() { let z = foo::Y::Y1; }\n-   |                          ^ this enum is private\n+   |                          ^ private enum\n    |\n note: the enum `Y` is defined here\n   --> $DIR/export-tag-variant.rs:4:5"}, {"sha": "23c29b31c6a8eeb8fb34b6cc073f3b7994e1852f", "filename": "src/test/ui/export.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -26,7 +26,7 @@ error[E0603]: function `z` is private\n   --> $DIR/export.rs:10:18\n    |\n LL | fn main() { foo::z(10); }\n-   |                  ^ this function is private\n+   |                  ^ private function\n    |\n note: the function `z` is defined here\n   --> $DIR/export.rs:5:5"}, {"sha": "9eeb83ae1a73f48252f8d8538b10a29f9db58a7c", "filename": "src/test/ui/extern/extern-crate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: crate import `core` is private\n   --> $DIR/extern-crate-visibility.rs:6:10\n    |\n LL | use foo::core::cell;\n-   |          ^^^^ this crate import is private\n+   |          ^^^^ private crate import\n    |\n note: the crate import `core` is defined here\n   --> $DIR/extern-crate-visibility.rs:2:5\n@@ -14,7 +14,7 @@ error[E0603]: crate import `core` is private\n   --> $DIR/extern-crate-visibility.rs:9:10\n    |\n LL |     foo::core::cell::Cell::new(0);\n-   |          ^^^^ this crate import is private\n+   |          ^^^^ private crate import\n    |\n note: the crate import `core` is defined here\n   --> $DIR/extern-crate-visibility.rs:2:5"}, {"sha": "871757ec7b0c698e22aea5bc002179dc3c2cdaa2", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,15 +2,17 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |                 |\n-   |                 required by this bound in `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn assert_sized<T: ?Sized>() { }\n+   |                  ^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5"}, {"sha": "19703fc99fd27070c58802df4301adfe2e3483ed", "filename": "src/test/ui/functional-struct-update/functional-struct-update-respects-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `secret_uid` of struct `foo::S` is private\n   --> $DIR/functional-struct-update-respects-privacy.rs:28:49\n    |\n LL |     let s_2 = foo::S { b: format!(\"ess two\"), ..s_1 }; // FRU ...\n-   |                                                 ^^^ field `secret_uid` is private\n+   |                                                 ^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "6d784408016f5c88c6ee4b4eaf201979d97db25b", "filename": "src/test/ui/hygiene/fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: type `foo::S` is private\n   --> $DIR/fields.rs:15:17\n    |\n LL |         let s = S { x: 0 };\n-   |                 ^^^^^^^^^^\n+   |                 ^^^^^^^^^^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: type `foo::S` is private\n   --> $DIR/fields.rs:16:17\n    |\n LL |         let _ = s.x;\n-   |                 ^\n+   |                 ^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: type `foo::T` is private\n   --> $DIR/fields.rs:18:17\n    |\n LL |         let t = T(0);\n-   |                 ^^^^\n+   |                 ^^^^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: type `foo::T` is private\n   --> $DIR/fields.rs:19:17\n    |\n LL |         let _ = t.0;\n-   |                 ^\n+   |                 ^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation"}, {"sha": "8ac59263cf21a247d029aee8a80a0000ce45aed3", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n   --> $DIR/impl_items.rs:12:23\n    |\n LL |         let _: () = S.f();\n-   |                       ^\n+   |                       ^ private type\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation"}, {"sha": "c27ba74a263e01b858f60d1971a76d4db98412b8", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: type `fn() -> u32 {intercrate::foo::bar::f}` is private\n   --> $DIR/intercrate.rs:10:16\n    |\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "482957a326437eaca84528d07ab8abc979b6f099", "filename": "src/test/ui/hygiene/nested_macro_privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fnested_macro_privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fnested_macro_privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fnested_macro_privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `i` of struct `foo::S` is private\n-  --> $DIR/nested_macro_privacy.rs:15:5\n+  --> $DIR/nested_macro_privacy.rs:15:18\n    |\n LL |     S::default().i;\n-   |     ^^^^^^^^^^^^^^\n+   |                  ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "70a24304dda3338dcb73714bc0247566e0560249", "filename": "src/test/ui/hygiene/privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `f` is private\n   --> $DIR/privacy.rs:16:14\n    |\n LL |         foo::f()\n-   |              ^ this function is private\n+   |              ^ private function\n    |\n note: the function `f` is defined here\n   --> $DIR/privacy.rs:4:5"}, {"sha": "024ce8207601e9db8c01e33b9d85d12976659e3e", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,13 +8,23 @@ error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5\n    |\n LL |     semitransparent;\n-   |     ^^^^^^^^^^^^^^^ help: use `!` to invoke the macro: `semitransparent!`\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     semitransparent!;\n+   |                    ^\n \n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n LL |     opaque;\n-   |     ^^^^^^ help: use `!` to invoke the macro: `opaque!`\n+   |     ^^^^^^\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     opaque!;\n+   |           ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c6af47805ea5bdfd4f5983f5d2d0cc094528835a", "filename": "src/test/ui/implicit-method-bind.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `abs` on type `i32`\n   --> $DIR/implicit-method-bind.rs:2:20\n    |\n LL |     let _f = 10i32.abs;\n-   |                    ^^^ help: use parentheses to call the method: `abs()`\n+   |                    ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _f = 10i32.abs();\n+   |                       ^^\n \n error: aborting due to previous error\n "}, {"sha": "797712e2db99e92f0af176e0a94f534fe1579eae", "filename": "src/test/ui/import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimport.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -17,7 +17,7 @@ error[E0603]: unresolved item import `foo` is private\n   --> $DIR/import.rs:15:10\n    |\n LL |     zed::foo();\n-   |          ^^^ this unresolved item import is private\n+   |          ^^^ private unresolved item import\n    |\n note: the unresolved item import `foo` is defined here\n   --> $DIR/import.rs:10:9"}, {"sha": "5adbc4b66d1336ba5270b7dbf0fd89faadccd9ff", "filename": "src/test/ui/imports/issue-55884-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: struct import `ParseOptions` is private\n   --> $DIR/issue-55884-2.rs:12:17\n    |\n LL | pub use parser::ParseOptions;\n-   |                 ^^^^^^^^^^^^ this struct import is private\n+   |                 ^^^^^^^^^^^^ private struct import\n    |\n note: the struct import `ParseOptions` is defined here...\n   --> $DIR/issue-55884-2.rs:9:9"}, {"sha": "79c8e1130c87afe576e2fa9d5408713350892ad8", "filename": "src/test/ui/imports/reexports.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexports.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -14,7 +14,7 @@ error[E0603]: module import `foo` is private\n   --> $DIR/reexports.rs:33:15\n    |\n LL |     use b::a::foo::S;\n-   |               ^^^ this module import is private\n+   |               ^^^ private module import\n    |\n note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:21:17\n@@ -31,7 +31,7 @@ error[E0603]: module import `foo` is private\n   --> $DIR/reexports.rs:34:15\n    |\n LL |     use b::b::foo::S as T;\n-   |               ^^^ this module import is private\n+   |               ^^^ private module import\n    |\n note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:26:17"}, {"sha": "ddf3608933909d7f6bfb6d28f360aa3b0e05624c", "filename": "src/test/ui/imports/unresolved-imports-used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -38,7 +38,7 @@ error[E0603]: function `quz` is private\n   --> $DIR/unresolved-imports-used.rs:9:10\n    |\n LL | use qux::quz;\n-   |          ^^^ this function is private\n+   |          ^^^ private function\n    |\n note: the function `quz` is defined here\n   --> $DIR/unresolved-imports-used.rs:5:4"}, {"sha": "f1da33eaba1c35062393659f1a8139033deda121", "filename": "src/test/ui/issues/issue-10545.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-10545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-10545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10545.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: struct `S` is private\n   --> $DIR/issue-10545.rs:6:14\n    |\n LL | fn foo(_: a::S) {\n-   |              ^ this struct is private\n+   |              ^ private struct\n    |\n note: the struct `S` is defined here\n   --> $DIR/issue-10545.rs:2:5"}, {"sha": "aa9768b1885a23c13915d5ef0683769aa3c96552", "filename": "src/test/ui/issues/issue-11593.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-11593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-11593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11593.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: trait `Foo` is private\n   --> $DIR/issue-11593.rs:7:24\n    |\n LL | impl private_trait_xc::Foo for Bar {}\n-   |                        ^^^ this trait is private\n+   |                        ^^^ private trait\n    |\n note: the trait `Foo` is defined here\n   --> $DIR/auxiliary/private-trait-xc.rs:1:1"}, {"sha": "ea224af8ed7e246a9c2dde58e04448ba3bec9066", "filename": "src/test/ui/issues/issue-11680.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-11680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-11680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11680.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Foo` is private\n   --> $DIR/issue-11680.rs:6:21\n    |\n LL |     let _b = other::Foo::Bar(1);\n-   |                     ^^^ this enum is private\n+   |                     ^^^ private enum\n    |\n note: the enum `Foo` is defined here\n   --> $DIR/auxiliary/issue-11680.rs:1:1\n@@ -14,7 +14,7 @@ error[E0603]: enum `Foo` is private\n   --> $DIR/issue-11680.rs:9:27\n    |\n LL |     let _b = other::test::Foo::Bar(1);\n-   |                           ^^^ this enum is private\n+   |                           ^^^ private enum\n    |\n note: the enum `Foo` is defined here\n   --> $DIR/auxiliary/issue-11680.rs:6:5"}, {"sha": "f30b6cdeaf073d4686258b481b26906481513544", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: unit struct `C` is private\n   --> $DIR/issue-13407.rs:6:8\n    |\n LL |     A::C = 1;\n-   |        ^ this unit struct is private\n+   |        ^ private unit struct\n    |\n note: the unit struct `C` is defined here\n   --> $DIR/issue-13407.rs:2:5"}, {"sha": "cdd0772d39fb04625891a318375c095c803db37f", "filename": "src/test/ui/issues/issue-13641.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-13641.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-13641.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13641.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: struct `Foo` is private\n   --> $DIR/issue-13641.rs:9:8\n    |\n LL |     a::Foo::new();\n-   |        ^^^ this struct is private\n+   |        ^^^ private struct\n    |\n note: the struct `Foo` is defined here\n   --> $DIR/issue-13641.rs:2:5\n@@ -14,7 +14,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/issue-13641.rs:11:8\n    |\n LL |     a::Bar::new();\n-   |        ^^^ this enum is private\n+   |        ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/issue-13641.rs:4:5"}, {"sha": "49b946b354e53a8b51ed38c7d073ddac14a38648", "filename": "src/test/ui/issues/issue-13853-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `get` on type `std::boxed::Box<(\n   --> $DIR/issue-13853-2.rs:5:43\n    |\n LL | fn foo(res : Box<dyn ResponseHook>) { res.get }\n-   |                                           ^^^ help: use parentheses to call the method: `get()`\n+   |                                           ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL | fn foo(res : Box<dyn ResponseHook>) { res.get() }\n+   |                                              ^^\n \n error: aborting due to previous error\n "}, {"sha": "84359803bbae7c7ceb0d4a0e78f20b218a4b2e53", "filename": "src/test/ui/issues/issue-16725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `bar` is private\n   --> $DIR/issue-16725.rs:6:19\n    |\n LL |     unsafe { foo::bar(); }\n-   |                   ^^^ this function is private\n+   |                   ^^^ private function\n    |\n note: the function `bar` is defined here\n   --> $DIR/auxiliary/issue-16725.rs:2:5"}, {"sha": "d4595be749034b5a7d774299998500ad71422459", "filename": "src/test/ui/issues/issue-17718-const-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: constant `B` is private\n   --> $DIR/issue-17718-const-privacy.rs:5:8\n    |\n LL | use a::B;\n-   |        ^ this constant is private\n+   |        ^ private constant\n    |\n note: the constant `B` is defined here\n   --> $DIR/issue-17718-const-privacy.rs:13:5\n@@ -14,7 +14,7 @@ error[E0603]: constant `BAR` is private\n   --> $DIR/issue-17718-const-privacy.rs:8:5\n    |\n LL |     BAR,\n-   |     ^^^ this constant is private\n+   |     ^^^ private constant\n    |\n note: the constant `BAR` is defined here\n   --> $DIR/auxiliary/issue-17718-const-privacy.rs:4:1"}, {"sha": "9b3b7a72e049eb617948574afc1b56569c564a70", "filename": "src/test/ui/issues/issue-21202.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated function `foo` is private\n-  --> $DIR/issue-21202.rs:10:9\n+  --> $DIR/issue-21202.rs:10:14\n    |\n LL |         Foo::foo(&f);\n-   |         ^^^^^^^^\n+   |              ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "45775e0e4ae36d786f8126b17f8666a577112f48", "filename": "src/test/ui/issues/issue-25386.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -17,12 +17,12 @@ mod stuff {\n macro_rules! check_ptr_exist {\n     ($var:expr, $member:ident) => (\n         (*$var.c_object).$member.is_some()\n-        //~^ ERROR field `name` of struct `stuff::CObj` is private\n-        //~^^ ERROR field `c_object` of struct `stuff::Item` is private\n+        //~^ ERROR field `c_object` of struct `stuff::Item` is private\n     );\n }\n \n fn main() {\n     let item = stuff::Item::new();\n     println!(\"{}\", check_ptr_exist!(item, name));\n+    //~^ ERROR field `name` of struct `stuff::CObj` is private\n }"}, {"sha": "6419e7a557194a50b226f0e6421115fad128cb92", "filename": "src/test/ui/issues/issue-25386.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,24 +1,19 @@\n error[E0616]: field `c_object` of struct `stuff::Item` is private\n-  --> $DIR/issue-25386.rs:19:11\n+  --> $DIR/issue-25386.rs:19:16\n    |\n LL |         (*$var.c_object).$member.is_some()\n-   |           ^^^^^^^^^^^^^\n+   |                ^^^^^^^^ private field\n ...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `name` of struct `stuff::CObj` is private\n-  --> $DIR/issue-25386.rs:19:9\n+  --> $DIR/issue-25386.rs:26:43\n    |\n-LL |         (*$var.c_object).$member.is_some()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n-   |                    ---------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                                           ^^^^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7df5b6232bdac9780aebf84c7965c1e83da75fa", "filename": "src/test/ui/issues/issue-26472.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,16 +1,19 @@\n error[E0616]: field `len` of struct `sub::S` is private\n-  --> $DIR/issue-26472.rs:11:13\n+  --> $DIR/issue-26472.rs:11:15\n    |\n LL |     let v = s.len;\n-   |             ^^---\n-   |               |\n-   |               help: a method `len` also exists, call it with parentheses: `len()`\n+   |               ^^^ private field\n+   |\n+help: a method `len` also exists, call it with parentheses\n+   |\n+LL |     let v = s.len();\n+   |                  ^^\n \n error[E0616]: field `len` of struct `sub::S` is private\n-  --> $DIR/issue-26472.rs:12:5\n+  --> $DIR/issue-26472.rs:12:7\n    |\n LL |     s.len = v;\n-   |     ^^^^^\n+   |       ^^^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1afaf622be7da3557ddc76aed7ea989b6a9f1cd6", "filename": "src/test/ui/issues/issue-28388-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-28388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-28388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28388-2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `n` is private\n   --> $DIR/issue-28388-2.rs:7:8\n    |\n LL | use m::n::{};\n-   |        ^ this module is private\n+   |        ^ private module\n    |\n note: the module `n` is defined here\n   --> $DIR/issue-28388-2.rs:4:5"}, {"sha": "7ce95e4b0df8b616cbff95907ec6223631a9c230", "filename": "src/test/ui/issues/issue-29161.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-29161.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-29161.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29161.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,7 +8,7 @@ error[E0603]: struct `A` is private\n   --> $DIR/issue-29161.rs:13:8\n    |\n LL |     a::A::default();\n-   |        ^ this struct is private\n+   |        ^ private struct\n    |\n note: the struct `A` is defined here\n   --> $DIR/issue-29161.rs:2:5"}, {"sha": "b6045c993a9585f14d5ecb30cbf47e6ca88df249", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -5,14 +5,16 @@ LL | struct Foo(u32);\n    | ---------------- fn(u32) -> Foo {Foo} defined here\n LL | \n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^\n-   |              |     |\n-   |              |     expected struct `Foo`, found fn item\n-   |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n+   |              ---   ^^^ expected struct `Foo`, found fn item\n+   |              |\n    |              expected `Foo` because of return type\n    |\n    = note: expected struct `Foo`\n              found fn item `fn(u32) -> Foo {Foo}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL | fn test() -> Foo { Foo(_) }\n+   |                       ^^^\n \n error: aborting due to previous error\n "}, {"sha": "b63967bb9dce3e9819ba5638b7f02a7572f746b0", "filename": "src/test/ui/issues/issue-3763.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,32 +1,32 @@\n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:18:19\n+  --> $DIR/issue-3763.rs:18:32\n    |\n LL |     let _woohoo = (&my_struct).priv_field;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^ private field\n \n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:21:19\n+  --> $DIR/issue-3763.rs:21:41\n    |\n LL |     let _woohoo = (Box::new(my_struct)).priv_field;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                         ^^^^^^^^^^ private field\n \n error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:24:18\n    |\n LL |     (&my_struct).happyfun();\n-   |                  ^^^^^^^^\n+   |                  ^^^^^^^^ private associated function\n \n error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:26:27\n    |\n LL |     (Box::new(my_struct)).happyfun();\n-   |                           ^^^^^^^^\n+   |                           ^^^^^^^^ private associated function\n \n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:27:16\n+  --> $DIR/issue-3763.rs:27:26\n    |\n LL |     let nope = my_struct.priv_field;\n-   |                ^^^^^^^^^^^^^^^^^^^^\n+   |                          ^^^^^^^^^^ private field\n \n error: aborting due to 5 previous errors\n "}, {"sha": "1a287e94bafd3d51cb7caaaa50bc29ba2c1a0910", "filename": "src/test/ui/issues/issue-38857.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,7 +8,7 @@ error[E0603]: module `sys` is private\n   --> $DIR/issue-38857.rs:7:18\n    |\n LL |     let a = std::sys::imp::process::process_common::StdioPipes { ..panic!() };\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `sys` is defined here\n   --> $SRC_DIR/libstd/lib.rs:LL:COL"}, {"sha": "deecf7a9d752ca3e938f715abb759a06b120d2b4", "filename": "src/test/ui/issues/issue-3993.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-3993.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-3993.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3993.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `fly` is private\n   --> $DIR/issue-3993.rs:1:10\n    |\n LL | use zoo::fly;\n-   |          ^^^ this function is private\n+   |          ^^^ private function\n    |\n note: the function `fly` is defined here\n   --> $DIR/issue-3993.rs:4:5"}, {"sha": "3c0f7f2b55026e6eda83f5b5be03b040d8e69884", "filename": "src/test/ui/issues/issue-53498.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated function `foo` is private\n-  --> $DIR/issue-53498.rs:16:5\n+  --> $DIR/issue-53498.rs:16:27\n    |\n LL |     test::Foo::<test::B>::foo();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "f9aef08c353bb07c9500d7f9fef457d33c1bd028", "filename": "src/test/ui/issues/issue-54062.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `inner` of struct `std::sync::Mutex` is private\n-  --> $DIR/issue-54062.rs:10:13\n+  --> $DIR/issue-54062.rs:10:24\n    |\n LL |     let _ = test.comps.inner.lock().unwrap();\n-   |             ^^^^^^^^^^^^^^^^\n+   |                        ^^^^^ private field\n \n error[E0599]: no method named `unwrap` found for struct `std::sys_common::mutex::MutexGuard<'_>` in the current scope\n   --> $DIR/issue-54062.rs:10:37"}, {"sha": "3092d76c268adaa36f009d7a2d46e913525b9061", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: constant `baz` is private\n   --> $DIR/macro-local-data-key-priv.rs:8:10\n    |\n LL |     bar::baz.with(|_| ());\n-   |          ^^^ this constant is private\n+   |          ^^^ private constant\n    |\n note: the constant `baz` is defined here\n   --> $DIR/macro-local-data-key-priv.rs:4:5"}, {"sha": "cafe9abae045dd0cf4b09ead6bd3f409290f9b29", "filename": "src/test/ui/methods/assign-to-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,15 +2,15 @@ error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:22:10\n    |\n LL |     nyan.speak = || println!(\"meow\");\n-   |          ^^^^^\n+   |          ^^^^^ method, not a field\n    |\n    = help: methods are immutable and cannot be assigned to\n \n error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:23:10\n    |\n LL |     nyan.speak += || println!(\"meow\");\n-   |          ^^^^^\n+   |          ^^^^^ method, not a field\n    |\n    = help: methods are immutable and cannot be assigned to\n "}, {"sha": "249464108875c5b96218435586524d45903fd08d", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/method-ambig-two-traits-from-impls2.rs:15:5\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:15:9\n    |\n LL |     AB::foo();\n-   |     ^^^^^^^ multiple `foo` found\n+   |         ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n   --> $DIR/method-ambig-two-traits-from-impls2.rs:7:5"}, {"sha": "bc8a1c85e561a354b75cbe16e09331e631ad4dc2", "filename": "src/test/ui/methods/method-missing-call.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,13 +2,23 @@ error[E0615]: attempted to take value of method `get_x` on type `Point`\n   --> $DIR/method-missing-call.rs:22:26\n    |\n LL |                         .get_x;\n-   |                          ^^^^^ help: use parentheses to call the method: `get_x()`\n+   |                          ^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |                         .get_x();\n+   |                               ^^\n \n error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:25]>, [closure@$DIR/method-missing-call.rs:28:23: 28:35]>`\n   --> $DIR/method-missing-call.rs:29:16\n    |\n LL |               .filter_map;\n-   |                ^^^^^^^^^^ help: use parentheses to call the method: `filter_map(...)`\n+   |                ^^^^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |               .filter_map(_);\n+   |                          ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca22401f45bb47b6b27f2d542a6db3413b91cf9a", "filename": "src/test/ui/paren-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fparen-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fparen-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparen-span.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `x` of struct `m::S` is private\n-  --> $DIR/paren-span.rs:19:12\n+  --> $DIR/paren-span.rs:19:14\n    |\n LL |     paren!(s.x);\n-   |            ^^^\n+   |              ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "1c5613ac986c438f1f71f4affa08790700fb63b6", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -14,7 +14,7 @@ error[E0603]: static `x` is private\n   --> $DIR/pub-item-macro.rs:20:23\n    |\n LL |     let y: u32 = foo::x;\n-   |                       ^ this static is private\n+   |                       ^ private static\n    |\n note: the static `x` is defined here\n   --> $DIR/pub-item-macro.rs:5:9"}, {"sha": "1e94e7c620d033d93ae001d967ce1c65b069e3ad", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is p\n   --> $DIR/associated-item-privacy-inherent.rs:13:21\n    |\n LL |         let value = Pub::method;\n-   |                     ^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^ private type\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is p\n   --> $DIR/associated-item-privacy-inherent.rs:15:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is p\n   --> $DIR/associated-item-privacy-inherent.rs:17:13\n    |\n LL |         Pub.method();\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: associated constant `CONST` is private\n   --> $DIR/associated-item-privacy-inherent.rs:19:9\n    |\n LL |         Pub::CONST;\n-   |         ^^^^^^^^^^\n+   |         ^^^^^^^^^^ private associated constant\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -46,7 +46,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:37:21\n    |\n LL |         let value = Pub::method;\n-   |                     ^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -57,7 +57,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:39:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -68,7 +68,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:41:13\n    |\n LL |         Pub.method(loop {});\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -79,7 +79,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:57:21\n    |\n LL |         let value = Pub::method::<Priv>;\n-   |                     ^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -90,7 +90,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:59:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -101,7 +101,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:61:9\n    |\n LL |         Pub.method::<Priv>();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -112,7 +112,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:80:21\n    |\n LL |         let value = <Pub>::method;\n-   |                     ^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -123,7 +123,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:82:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -134,7 +134,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:84:21\n    |\n LL |         let value = Pub::method;\n-   |                     ^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -145,7 +145,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:86:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -156,7 +156,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:88:21\n    |\n LL |         let value = <Pub>::static_method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -167,7 +167,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:90:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -178,7 +178,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:92:21\n    |\n LL |         let value = Pub::static_method;\n-   |                     ^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -189,7 +189,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:94:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -200,7 +200,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:96:19\n    |\n LL |         Pub(Priv).method();\n-   |                   ^^^^^^\n+   |                   ^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -211,7 +211,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:99:10\n    |\n LL |         <Pub>::CONST;\n-   |          ^^^\n+   |          ^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -222,7 +222,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:101:9\n    |\n LL |         Pub::CONST;\n-   |         ^^^^^^^^^^\n+   |         ^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "c30cc947d450869bbe4d19437d5cfbafd2e3eca6", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::Pr\n   --> $DIR/associated-item-privacy-trait.rs:17:21\n    |\n LL |         let value = <Pub as PrivTr>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::Pr\n   --> $DIR/associated-item-privacy-trait.rs:19:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: type `for<'r> fn(&'r Self) {<Self as priv_trait::PrivTr>::method}` is pri\n   --> $DIR/associated-item-privacy-trait.rs:21:13\n    |\n LL |         Pub.method();\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: associated constant `PrivTr::CONST` is private\n   --> $DIR/associated-item-privacy-trait.rs:23:9\n    |\n LL |         <Pub as PrivTr>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ private associated constant\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -46,7 +46,7 @@ error: associated type `PrivTr::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:16\n    |\n LL |         let _: <Pub as PrivTr>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ private associated type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -57,7 +57,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:27:34\n    |\n LL |         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -68,7 +68,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:29:34\n    |\n LL |         pub trait InSignatureTr: PrivTr {}\n-   |                                  ^^^^^^\n+   |                                  ^^^^^^ private trait\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -79,7 +79,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:31:14\n    |\n LL |         impl PrivTr for u8 {}\n-   |              ^^^^^^\n+   |              ^^^^^^ private trait\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -90,7 +90,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:48:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -101,7 +101,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:50:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -112,7 +112,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:52:13\n    |\n LL |         Pub.method(loop {});\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -123,7 +123,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:69:21\n    |\n LL |         let value = <Pub as PubTr>::method::<Priv>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -134,7 +134,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:71:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -145,7 +145,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:73:9\n    |\n LL |         Pub.method::<Priv>();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -156,7 +156,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:93:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -167,7 +167,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:95:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -178,7 +178,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:97:21\n    |\n LL |         let value = <Pub as PubTr<_>>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -189,7 +189,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:99:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -200,7 +200,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:101:9\n    |\n LL |         Pub.method();\n-   |         ^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -211,7 +211,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:104:21\n    |\n LL |         let value = <Priv as PubTr<_>>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -222,7 +222,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:106:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -233,7 +233,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:108:9\n    |\n LL |         Priv.method();\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -244,7 +244,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:111:9\n    |\n LL |         <Pub as PubTr>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -255,7 +255,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:113:9\n    |\n LL |         <Pub as PubTr<_>>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -266,7 +266,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:115:9\n    |\n LL |         <Priv as PubTr<_>>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -277,7 +277,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:30\n    |\n LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |                              ^\n+   |                              ^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -288,7 +288,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:121:17\n    |\n LL |         let _: <Priv as PubTr<_>>::AssocTy;\n-   |                 ^^^^\n+   |                 ^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -299,7 +299,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:124:35\n    |\n LL |         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -310,7 +310,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:126:35\n    |\n LL |         pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -321,7 +321,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:128:14\n    |\n LL |         impl PubTr for u8 {}\n-   |              ^^^^^\n+   |              ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "d8515ccb66920e1d4180c2d7af4f5c855bc1c5c7", "filename": "src/test/ui/privacy/associated-item-privacy-type-binding.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:13\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:16\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:14:31\n    |\n LL |         type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:16:31\n    |\n LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -46,7 +46,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:13\n    |\n LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -57,7 +57,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:16\n    |\n LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -68,7 +68,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:23:31\n    |\n LL |         type InSignatureTy1 = Box<dyn PrivTr<AssocTy = u8>>;\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -79,7 +79,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:25:31\n    |\n LL |         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -90,7 +90,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:13\n    |\n LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -101,7 +101,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:16\n    |\n LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -112,7 +112,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:13\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -123,7 +123,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:16\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -134,7 +134,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:50:35\n    |\n LL |         pub type InSignatureTy1 = Box<dyn PubTrWithParam<AssocTy = u8>>;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -145,7 +145,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:52:35\n    |\n LL |         pub type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -156,7 +156,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:54:31\n    |\n LL |         trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -167,7 +167,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:56:31\n    |\n LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "5bc6f07fffac3e95d4687617ad14af7d2b43b94d", "filename": "src/test/ui/privacy/decl-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fdecl-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fdecl-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fdecl-macro.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: macro `mac` is private\n   --> $DIR/decl-macro.rs:8:8\n    |\n LL |     m::mac!();\n-   |        ^^^ this macro is private\n+   |        ^^^ private macro\n    |\n note: the macro `mac` is defined here\n   --> $DIR/decl-macro.rs:4:5"}, {"sha": "2eb3ebb51c20a2ea69ee288dd3ec2b42fcded4ea", "filename": "src/test/ui/privacy/privacy-in-paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-in-paths.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/privacy-in-paths.rs:24:16\n    |\n LL |         ::foo::bar::baz::f();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/privacy-in-paths.rs:3:5\n@@ -14,7 +14,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/privacy-in-paths.rs:25:16\n    |\n LL |         ::foo::bar::S::f();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/privacy-in-paths.rs:3:5\n@@ -26,7 +26,7 @@ error[E0603]: trait `T` is private\n   --> $DIR/privacy-in-paths.rs:26:23\n    |\n LL |         <() as ::foo::T>::Assoc::f();\n-   |                       ^ this trait is private\n+   |                       ^ private trait\n    |\n note: the trait `T` is defined here\n   --> $DIR/privacy-in-paths.rs:8:5"}, {"sha": "0c826147a1ca7df46628890d4db9ef3a844dd813", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -58,7 +58,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:63:15\n    |\n LL |     use foo3::Bar;\n-   |               ^^^ this trait is private\n+   |               ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ns2.rs:55:5\n@@ -70,7 +70,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:67:15\n    |\n LL |     use foo3::Bar;\n-   |               ^^^ this trait is private\n+   |               ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ns2.rs:55:5\n@@ -82,7 +82,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:74:16\n    |\n LL |     use foo3::{Bar,Baz};\n-   |                ^^^ this trait is private\n+   |                ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ns2.rs:55:5"}, {"sha": "e93a458ce6cb6889caafc55cc8529461927a1945", "filename": "src/test/ui/privacy/privacy-ufcs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ufcs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ufcs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ufcs.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ufcs.rs:12:20\n    |\n LL |     <i32 as ::foo::Bar>::baz();\n-   |                    ^^^ this trait is private\n+   |                    ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ufcs.rs:4:5"}, {"sha": "65c10a7bca75deba5dc98673354130e2d2d1f361", "filename": "src/test/ui/privacy/privacy1.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:132:18\n    |\n LL |         use bar::baz::{foo, bar};\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -14,7 +14,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:132:18\n    |\n LL |         use bar::baz::{foo, bar};\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -26,7 +26,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:141:18\n    |\n LL |         use bar::baz;\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -38,7 +38,7 @@ error[E0603]: module `i` is private\n   --> $DIR/privacy1.rs:165:20\n    |\n LL |     use self::foo::i::A;\n-   |                    ^ this module is private\n+   |                    ^ private module\n    |\n note: the module `i` is defined here\n   --> $DIR/privacy1.rs:170:9\n@@ -50,7 +50,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:104:16\n    |\n LL |         ::bar::baz::A::foo();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -62,7 +62,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:105:16\n    |\n LL |         ::bar::baz::A::bar();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -74,7 +74,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:107:16\n    |\n LL |         ::bar::baz::A.foo2();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -86,7 +86,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:108:16\n    |\n LL |         ::bar::baz::A.bar2();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -98,7 +98,7 @@ error[E0603]: trait `B` is private\n   --> $DIR/privacy1.rs:112:16\n    |\n LL |         ::bar::B::foo();\n-   |                ^ this trait is private\n+   |                ^ private trait\n    |\n note: the trait `B` is defined here\n   --> $DIR/privacy1.rs:40:5\n@@ -110,7 +110,7 @@ error[E0603]: function `epriv` is private\n   --> $DIR/privacy1.rs:118:20\n    |\n LL |             ::bar::epriv();\n-   |                    ^^^^^ this function is private\n+   |                    ^^^^^ private function\n    |\n note: the function `epriv` is defined here\n   --> $DIR/privacy1.rs:65:9\n@@ -122,7 +122,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:127:16\n    |\n LL |         ::bar::baz::foo();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -134,7 +134,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:128:16\n    |\n LL |         ::bar::baz::bar();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -146,7 +146,7 @@ error[E0603]: trait `B` is private\n   --> $DIR/privacy1.rs:157:17\n    |\n LL |     impl ::bar::B for f32 { fn foo() -> f32 { 1.0 } }\n-   |                 ^ this trait is private\n+   |                 ^ private trait\n    |\n note: the trait `B` is defined here\n   --> $DIR/privacy1.rs:40:5\n@@ -155,34 +155,34 @@ LL |     trait B {\n    |     ^^^^^^^\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:77:9\n+  --> $DIR/privacy1.rs:77:23\n    |\n LL |         self::baz::A::bar();\n-   |         ^^^^^^^^^^^^^^^^^\n+   |                       ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:95:5\n+  --> $DIR/privacy1.rs:95:13\n    |\n LL |     bar::A::bar();\n-   |     ^^^^^^^^^^^\n+   |             ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:102:9\n+  --> $DIR/privacy1.rs:102:19\n    |\n LL |         ::bar::A::bar();\n-   |         ^^^^^^^^^^^^^\n+   |                   ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:105:9\n+  --> $DIR/privacy1.rs:105:24\n    |\n LL |         ::bar::baz::A::bar();\n-   |         ^^^^^^^^^^^^^^^^^^\n+   |                        ^^^ private associated function\n \n error[E0624]: associated function `bar2` is private\n   --> $DIR/privacy1.rs:108:23\n    |\n LL |         ::bar::baz::A.bar2();\n-   |                       ^^^^\n+   |                       ^^^^ private associated function\n \n error: aborting due to 18 previous errors\n "}, {"sha": "c2a33ce1f59b38549e5fd6196863f26ff25481ea", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,7 +8,7 @@ error[E0603]: function import `foo` is private\n   --> $DIR/privacy2.rs:23:20\n    |\n LL |     use bar::glob::foo;\n-   |                    ^^^ this function import is private\n+   |                    ^^^ private function import\n    |\n note: the function import `foo` is defined here...\n   --> $DIR/privacy2.rs:10:13"}, {"sha": "7552fa71a3a3a664e5feceddabd0a0f0050ee0a7", "filename": "src/test/ui/privacy/privacy4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy4.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `glob` is private\n   --> $DIR/privacy4.rs:21:14\n    |\n LL |     use bar::glob::gpriv;\n-   |              ^^^^ this module is private\n+   |              ^^^^ private module\n    |\n note: the module `glob` is defined here\n   --> $DIR/privacy4.rs:13:5"}, {"sha": "216abfc68b812c41b5e40eaadd2803d418c9795a", "filename": "src/test/ui/privacy/privacy5.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -5,7 +5,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a = a::A(());\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -20,7 +20,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let b = a::B(2);\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -35,7 +35,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let c = a::C(2, 3);\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -50,7 +50,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a::A(()) = a;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -65,7 +65,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a::A(_) = a;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -80,7 +80,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     match a { a::A(()) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -95,7 +95,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     match a { a::A(_) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -110,7 +110,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let a::B(_) = b;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -125,7 +125,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let a::B(_b) = b;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -140,7 +140,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(_) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -155,7 +155,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(_b) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -170,7 +170,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -185,7 +185,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n-   |                                ^ this tuple struct constructor is private\n+   |                                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -200,7 +200,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_, _) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -215,7 +215,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_a, _) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -230,7 +230,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_, _b) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -245,7 +245,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_a, _b) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -260,7 +260,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_, _) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -275,7 +275,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_a, _) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -290,7 +290,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_, _b) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -305,7 +305,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_a, _b) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -320,7 +320,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a2 = a::A;\n-   |                 ^ this tuple struct constructor is private\n+   |                 ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -335,7 +335,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let b2 = a::B;\n-   |                 ^ this tuple struct constructor is private\n+   |                 ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -350,7 +350,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let c2 = a::C;\n-   |                 ^ this tuple struct constructor is private\n+   |                 ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -362,7 +362,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:90:20\n    |\n LL |     let a = other::A(());\n-   |                    ^ this tuple struct constructor is private\n+   |                    ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -379,7 +379,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:91:20\n    |\n LL |     let b = other::B(2);\n-   |                    ^ this tuple struct constructor is private\n+   |                    ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -396,7 +396,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:92:20\n    |\n LL |     let c = other::C(2, 3);\n-   |                    ^ this tuple struct constructor is private\n+   |                    ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -413,7 +413,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:95:16\n    |\n LL |     let other::A(()) = a;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -430,7 +430,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:96:16\n    |\n LL |     let other::A(_) = a;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -447,7 +447,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:97:22\n    |\n LL |     match a { other::A(()) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -464,7 +464,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:98:22\n    |\n LL |     match a { other::A(_) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -481,7 +481,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:100:16\n    |\n LL |     let other::B(_) = b;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -498,7 +498,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:101:16\n    |\n LL |     let other::B(_b) = b;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -515,7 +515,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:102:22\n    |\n LL |     match b { other::B(_) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -532,7 +532,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:103:22\n    |\n LL |     match b { other::B(_b) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -549,7 +549,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:104:22\n    |\n LL |     match b { other::B(1) => {}\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -566,7 +566,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:105:16\n    |\n LL |         other::B(_) => {} }\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -583,7 +583,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:107:16\n    |\n LL |     let other::C(_, _) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -600,7 +600,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:108:16\n    |\n LL |     let other::C(_a, _) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -617,7 +617,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:109:16\n    |\n LL |     let other::C(_, _b) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -634,7 +634,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:110:16\n    |\n LL |     let other::C(_a, _b) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -651,7 +651,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:111:22\n    |\n LL |     match c { other::C(_, _) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -668,7 +668,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:112:22\n    |\n LL |     match c { other::C(_a, _) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -685,7 +685,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:113:22\n    |\n LL |     match c { other::C(_, _b) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -702,7 +702,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:114:22\n    |\n LL |     match c { other::C(_a, _b) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -719,7 +719,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:122:21\n    |\n LL |     let a2 = other::A;\n-   |                     ^ this tuple struct constructor is private\n+   |                     ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -736,7 +736,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:123:21\n    |\n LL |     let b2 = other::B;\n-   |                     ^ this tuple struct constructor is private\n+   |                     ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -753,7 +753,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:124:21\n    |\n LL |     let c2 = other::C;\n-   |                     ^ this tuple struct constructor is private\n+   |                     ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |"}, {"sha": "444b9180b3f5977334777f201560760d100b870b", "filename": "src/test/ui/privacy/private-impl-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `foo` is private\n   --> $DIR/private-impl-method.rs:20:7\n    |\n LL |     s.foo();\n-   |       ^^^\n+   |       ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "1b6d143b93217d415182094a3bb47a7dca740048", "filename": "src/test/ui/privacy/private-in-public-non-principal-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error: trait `m::PrivNonPrincipal` is private\n   --> $DIR/private-in-public-non-principal-2.rs:11:5\n    |\n LL |     m::leak_dyn_nonprincipal();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n \n error: aborting due to previous error\n "}, {"sha": "576498b2cf8ef5ee7dfc4b952c2f3d87c3898375", "filename": "src/test/ui/privacy/private-inferred-type-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,13 +2,13 @@ error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-1.rs:16:5\n    |\n LL |     [].arr0_secret();\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-1.rs:17:5\n    |\n LL |     None.ty_param_secret();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f19e367ef110e11bdcea480ccb82190bbc8db898", "filename": "src/test/ui/privacy/private-inferred-type-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,19 +2,19 @@ error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-2.rs:16:5\n    |\n LL |     m::Pub::get_priv;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-2.rs:17:5\n    |\n LL |     m::Pub::static_method;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-inferred-type-2.rs:18:5\n    |\n LL |     ext::Pub::static_method;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: aborting due to 3 previous errors\n "}, {"sha": "39ef6472526c3b6916cc743c4d3b19f46bf5300d", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,55 +2,55 @@ error: type `fn() {ext::priv_fn}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: static `PRIV_STATIC` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private static\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `ext::PrivEnum` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as ext::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r ext::Pub<u8>) {ext::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "7d1f794bfe4596fe2191020d6acdc7f8ed719744", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -20,97 +20,97 @@ error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:97:9\n    |\n LL |     let _: m::Alias;\n-   |         ^\n+   |         ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:97:12\n    |\n LL |     let _: m::Alias;\n-   |            ^^^^^^^^\n+   |            ^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:99:13\n    |\n LL |     let _: <m::Alias as m::TraitWithAssocTy>::AssocTy;\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:100:5\n    |\n LL |     m::Alias {};\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:101:5\n    |\n LL |     m::Pub { 0: m::Alias {} };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:103:5\n    |\n LL |     m::Pub::static_method;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:104:5\n    |\n LL |     m::Pub::INHERENT_ASSOC_CONST;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:105:5\n    |\n LL |     m::Pub(0u8).method_with_substs::<m::Alias>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:106:17\n    |\n LL |     m::Pub(0u8).method_with_priv_params(loop{});\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:107:5\n    |\n LL |     <m::Alias as m::TraitWithAssocConst>::TRAIT_ASSOC_CONST;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:108:6\n    |\n LL |     <m::Pub<m::Alias>>::INHERENT_ASSOC_CONST;\n-   |      ^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:109:5\n    |\n LL |     <m::Pub<m::Alias>>::INHERENT_ASSOC_CONST_GENERIC_SELF;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:110:5\n    |\n LL |     <m::Pub<m::Alias>>::static_method_generic_self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:112:5\n    |\n LL |     u8::pub_method;\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private type\n \n error: type `adjust::S2` is private\n   --> $DIR/private-inferred-type.rs:114:5\n    |\n LL |     adjust::S1.method_s3();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n \n error: type `fn() {m::priv_fn}` is private\n   --> $DIR/private-inferred-type.rs:39:9\n    |\n LL |         priv_fn;\n-   |         ^^^^^^^\n+   |         ^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -121,7 +121,7 @@ error: type `m::PrivEnum` is private\n   --> $DIR/private-inferred-type.rs:41:9\n    |\n LL |         PrivEnum::Variant;\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -132,7 +132,7 @@ error: type `fn() {<u8 as m::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type.rs:43:9\n    |\n LL |         <u8 as PrivTrait>::method;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -143,7 +143,7 @@ error: type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:45:9\n    |\n LL |         PrivTupleStruct;\n-   |         ^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -154,7 +154,7 @@ error: type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:47:9\n    |\n LL |         PubTupleStruct;\n-   |         ^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -165,7 +165,7 @@ error: type `for<'r> fn(&'r m::Pub<u8>) {m::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type.rs:49:18\n    |\n LL |         Pub(0u8).priv_method();\n-   |                  ^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -176,61 +176,61 @@ error: trait `m::Trait` is private\n   --> $DIR/private-inferred-type.rs:118:5\n    |\n LL |     m::leak_anon1();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ private trait\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:119:5\n    |\n LL |     m::leak_anon2();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:120:5\n    |\n LL |     m::leak_anon3();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ private type\n \n error: trait `m::Trait` is private\n   --> $DIR/private-inferred-type.rs:122:5\n    |\n LL |     m::leak_dyn1();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private trait\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:123:5\n    |\n LL |     m::leak_dyn2();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:124:5\n    |\n LL |     m::leak_dyn3();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:127:13\n    |\n LL |     let a = m::Alias {};\n-   |             ^^^^^^^^^^^\n+   |             ^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:128:17\n    |\n LL |     let mut b = a;\n-   |                 ^\n+   |                 ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:129:9\n    |\n LL |     b = a;\n-   |         ^\n+   |         ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:130:11\n    |\n LL |     match a {\n-   |           ^\n+   |           ^ private type\n \n error: aborting due to 33 previous errors\n "}, {"sha": "e3d90150e2e3eb36f489219ba30ad8761d87c017", "filename": "src/test/ui/privacy/private-item-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-item-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-item-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-item-simple.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `f` is private\n   --> $DIR/private-item-simple.rs:6:8\n    |\n LL |     a::f();\n-   |        ^ this function is private\n+   |        ^ private function\n    |\n note: the function `f` is defined here\n   --> $DIR/private-item-simple.rs:2:5"}, {"sha": "8a47846d667e34c8a687e190979e33c3b9f644b4", "filename": "src/test/ui/privacy/private-method-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `nap` is private\n   --> $DIR/private-method-cross-crate.rs:7:8\n    |\n LL |   nyan.nap();\n-   |        ^^^\n+   |        ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "8083b197a5d78e0facf8b1a24de0f87a0e80adb1", "filename": "src/test/ui/privacy/private-method-inherited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `f` is private\n   --> $DIR/private-method-inherited.rs:13:7\n    |\n LL |     x.f();\n-   |       ^\n+   |       ^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "a15fce46877ceb8c3e35cefc43f96a16a97dabdb", "filename": "src/test/ui/privacy/private-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `nap` is private\n   --> $DIR/private-method.rs:22:8\n    |\n LL |   nyan.nap();\n-   |        ^^^\n+   |        ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "ac00d82adab42e54f034de5f50b873c5b86f07aa", "filename": "src/test/ui/privacy/private-struct-field-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-cross-crate.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `meows` of struct `cci_class::kitties::cat` is private\n-  --> $DIR/private-struct-field-cross-crate.rs:7:14\n+  --> $DIR/private-struct-field-cross-crate.rs:7:19\n    |\n LL |   assert_eq!(nyan.meows, 52);\n-   |              ^^^^^^^^^^\n+   |                   ^^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "7c32ebc2cf7b98b07a2b2a28c55bb8fc16d54a70", "filename": "src/test/ui/privacy/private-struct-field-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-ctor.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `x` of struct `a::Foo` is private\n   --> $DIR/private-struct-field-ctor.rs:8:22\n    |\n LL |     let s = a::Foo { x: 1 };\n-   |                      ^^^^ field `x` is private\n+   |                      ^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "9190317403ec1da017417c0e1dcbfc6d57c63533", "filename": "src/test/ui/privacy/private-struct-field-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-pattern.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `x` of struct `a::Foo` is private\n   --> $DIR/private-struct-field-pattern.rs:15:15\n    |\n LL |         Foo { x: _ } => {}\n-   |               ^^^^ field `x` is private\n+   |               ^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "c89ae507ab5fd8a93b0946b3f951a1a8d97e138a", "filename": "src/test/ui/privacy/private-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `meows` of struct `cat::Cat` is private\n-  --> $DIR/private-struct-field.rs:13:16\n+  --> $DIR/private-struct-field.rs:13:21\n    |\n LL |     assert_eq!(nyan.meows, 52);\n-   |                ^^^^^^^^^^\n+   |                     ^^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "ea89035c3d00671ec961690b29e811060ae08c1f", "filename": "src/test/ui/privacy/private-type-in-interface.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,55 +2,55 @@ error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:15:9\n    |\n LL | fn f(_: m::Alias) {}\n-   |         ^^^^^^^^\n+   |         ^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:15:6\n    |\n LL | fn f(_: m::Alias) {}\n-   |      ^\n+   |      ^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:17:13\n    |\n LL | fn f_ext(_: ext::Alias) {}\n-   |             ^^^^^^^^^^\n+   |             ^^^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:17:10\n    |\n LL | fn f_ext(_: ext::Alias) {}\n-   |          ^\n+   |          ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:21:6\n    |\n LL | impl m::Alias {}\n-   |      ^^^^^^^^\n+   |      ^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:22:14\n    |\n LL | impl Tr1 for ext::Alias {}\n-   |              ^^^^^^^^^^\n+   |              ^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:23:10\n    |\n LL | type A = <m::Alias as m::Trait>::X;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:27:11\n    |\n LL | fn g() -> impl Tr2<m::Alias> { 0 }\n-   |           ^^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:28:15\n    |\n LL | fn g_ext() -> impl Tr2<ext::Alias> { 0 }\n-   |               ^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^^^^^^^^^^^ private type\n \n error: aborting due to 9 previous errors\n "}, {"sha": "591980dc3450ddc503621ddfb30580a241df3f0c", "filename": "src/test/ui/privacy/restricted/struct-literal-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fstruct-literal-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fstruct-literal-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fstruct-literal-field.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `x` of struct `foo::bar::S` is private\n   --> $DIR/struct-literal-field.rs:18:9\n    |\n LL |     S { x: 0 };\n-   |         ^^^^ field `x` is private\n+   |         ^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "40512a34bd95991cc0b5d9e3cdd6e74d63082ca2", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -26,7 +26,7 @@ error[E0603]: struct `Crate` is private\n   --> $DIR/test.rs:38:25\n    |\n LL |     use pub_restricted::Crate;\n-   |                         ^^^^^ this struct is private\n+   |                         ^^^^^ private struct\n    |\n note: the struct `Crate` is defined here\n   --> $DIR/auxiliary/pub_restricted.rs:3:1\n@@ -38,7 +38,7 @@ error[E0603]: function `f` is private\n   --> $DIR/test.rs:30:19\n    |\n LL |     use foo::bar::f;\n-   |                   ^ this function is private\n+   |                   ^ private function\n    |\n note: the function `f` is defined here\n   --> $DIR/test.rs:8:9\n@@ -47,46 +47,46 @@ LL |         pub(super) fn f() {}\n    |         ^^^^^^^^^^^^^^^^^\n \n error[E0616]: field `x` of struct `foo::bar::S` is private\n-  --> $DIR/test.rs:31:5\n+  --> $DIR/test.rs:31:18\n    |\n LL |     S::default().x;\n-   |     ^^^^^^^^^^^^^^\n+   |                  ^ private field\n \n error[E0624]: associated function `f` is private\n   --> $DIR/test.rs:32:18\n    |\n LL |     S::default().f();\n-   |                  ^\n+   |                  ^ private associated function\n \n error[E0624]: associated function `g` is private\n-  --> $DIR/test.rs:33:5\n+  --> $DIR/test.rs:33:8\n    |\n LL |     S::g();\n-   |     ^^^^\n+   |        ^ private associated function\n \n error[E0616]: field `y` of struct `pub_restricted::Universe` is private\n-  --> $DIR/test.rs:42:13\n+  --> $DIR/test.rs:42:15\n    |\n LL |     let _ = u.y;\n-   |             ^^^\n+   |               ^ private field\n \n error[E0616]: field `z` of struct `pub_restricted::Universe` is private\n-  --> $DIR/test.rs:43:13\n+  --> $DIR/test.rs:43:15\n    |\n LL |     let _ = u.z;\n-   |             ^^^\n+   |               ^ private field\n \n error[E0624]: associated function `g` is private\n   --> $DIR/test.rs:45:7\n    |\n LL |     u.g();\n-   |       ^\n+   |       ^ private associated function\n \n error[E0624]: associated function `h` is private\n   --> $DIR/test.rs:46:7\n    |\n LL |     u.h();\n-   |       ^\n+   |       ^ private associated function\n \n error: aborting due to 12 previous errors\n "}, {"sha": "15096eb1139667224eaf2742c445f24eecc545dc", "filename": "src/test/ui/privacy/union-field-privacy-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-1.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,13 +2,13 @@ error[E0451]: field `c` of union `m::U` is private\n   --> $DIR/union-field-privacy-1.rs:12:20\n    |\n LL |     let u = m::U { c: 0 };\n-   |                    ^^^^ field `c` is private\n+   |                    ^^^^ private field\n \n error[E0451]: field `c` of union `m::U` is private\n   --> $DIR/union-field-privacy-1.rs:16:16\n    |\n LL |     let m::U { c } = u;\n-   |                ^ field `c` is private\n+   |                ^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a23cf90332b02e4b7b4f8844a9b1679568bd7a11", "filename": "src/test/ui/privacy/union-field-privacy-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `c` of union `m::U` is private\n-  --> $DIR/union-field-privacy-2.rs:14:13\n+  --> $DIR/union-field-privacy-2.rs:14:15\n    |\n LL |     let c = u.c;\n-   |             ^^^\n+   |               ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "ff7ddcde6e0c4194fc13ddd26dce87c978a206af", "filename": "src/test/ui/proc-macro/disappearing-resolution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fproc-macro%2Fdisappearing-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fproc-macro%2Fdisappearing-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdisappearing-resolution.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,7 +8,7 @@ error[E0603]: derive macro import `Empty` is private\n   --> $DIR/disappearing-resolution.rs:11:8\n    |\n LL | use m::Empty;\n-   |        ^^^^^ this derive macro import is private\n+   |        ^^^^^ private derive macro import\n    |\n note: the derive macro import `Empty` is defined here\n   --> $DIR/disappearing-resolution.rs:9:9"}, {"sha": "e378a56713400b7d1323c10a1d7d1745fab521ef", "filename": "src/test/ui/proc-macro/issue-50493.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,15 +8,15 @@ error[E0616]: field `field` of struct `Restricted` is private\n   --> $DIR/issue-50493.rs:6:10\n    |\n LL | #[derive(Derive)]\n-   |          ^^^^^^\n+   |          ^^^^^^ private field\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `field` of struct `Restricted` is private\n   --> $DIR/issue-50493.rs:6:10\n    |\n LL | #[derive(Derive)]\n-   |          ^^^^^^\n+   |          ^^^^^^ private field\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "262344fba59999be0d93aada8a8dbb72b127d16b", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,12 +2,13 @@ error[E0284]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:12:21\n    |\n LL |     l.iter().map(f).collect()?\n-   |                     ^^^^^^^\n-   |                     |\n-   |                     cannot infer type\n-   |                     help: consider specifying the type argument in the method call: `collect::<B>`\n+   |                     ^^^^^^^ cannot infer type\n    |\n    = note: cannot resolve `<_ as std::ops::Try>::Ok == _`\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     l.iter().map(f).collect::<B>()?\n+   |                            ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6c27a2756f7fb79ac10bcf8bd1209a79e8aac08b", "filename": "src/test/ui/reachable/unreachable-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Freachable%2Funreachable-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Freachable%2Funreachable-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-variant.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `super_sekrit` is private\n   --> $DIR/unreachable-variant.rs:6:21\n    |\n LL |     let _x = other::super_sekrit::sooper_sekrit::baz;\n-   |                     ^^^^^^^^^^^^ this module is private\n+   |                     ^^^^^^^^^^^^ private module\n    |\n note: the module `super_sekrit` is defined here\n   --> $DIR/auxiliary/unreachable_variant.rs:1:1"}, {"sha": "c4eee0f46611935c5a1793d44e4aa517a2e814fb", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,14 +2,16 @@ error[E0308]: cannot coerce intrinsics to function pointers\n   --> $DIR/reify-intrinsic.rs:6:64\n    |\n LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n-   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^\n-   |            |                                                   |\n-   |            |                                                   cannot coerce intrinsics to function pointers\n-   |            |                                                   help: use parentheses to call this function: `std::mem::transmute(...)`\n+   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^ cannot coerce intrinsics to function pointers\n+   |            |\n    |            expected due to this\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute(...);\n+   |                                                                                   ^^^^^\n \n error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n   --> $DIR/reify-intrinsic.rs:11:13"}, {"sha": "30ac783ea2f7e4424184672027dca56986c0644e", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -219,7 +219,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:57:22\n    |\n LL |     let _: Z = m::n::Z;\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -231,7 +231,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:61:22\n    |\n LL |     let _: Z = m::n::Z::Fn;\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -243,7 +243,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:64:22\n    |\n LL |     let _: Z = m::n::Z::Struct;\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -255,7 +255,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:68:22\n    |\n LL |     let _: Z = m::n::Z::Unit {};\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -270,14 +270,16 @@ LL |             Fn(u8),\n    |             ------ fn(u8) -> m::n::Z {m::n::Z::Fn} defined here\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^\n-   |                |   |\n-   |                |   expected enum `m::n::Z`, found fn item\n-   |                |   help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n+   |                -   ^^^^^ expected enum `m::n::Z`, found fn item\n+   |                |\n    |                expected due to this\n    |\n    = note: expected enum `m::n::Z`\n            found fn item `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |         let _: Z = Z::Fn(_);\n+   |                         ^^^\n \n error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n@@ -302,14 +304,16 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^\n-   |            |   |\n-   |            |   expected enum `m::E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n+   |            -   ^^^^^^^^ expected enum `m::E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = m::E::Fn(_);\n+   |                        ^^^\n \n error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n@@ -334,14 +338,16 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^\n-   |            |   |\n-   |            |   expected enum `m::E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n+   |            -   ^^^^^ expected enum `m::E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = E::Fn(_);\n+   |                     ^^^\n \n error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16"}, {"sha": "baf7dd84eb09dfc318782d584c35818034f7585c", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -45,7 +45,7 @@ LL |         pub(in m) struct Z(pub(in m::n) u8);\n    |                            --------------- a constructor is private if any of the fields is private\n ...\n LL |         n::Z;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `Z` is defined here\n   --> $DIR/privacy-struct-ctor.rs:12:9\n@@ -60,7 +60,7 @@ LL |     pub struct S(u8);\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     m::S;\n-   |        ^ this tuple struct constructor is private\n+   |        ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `S` is defined here\n   --> $DIR/privacy-struct-ctor.rs:6:5\n@@ -75,7 +75,7 @@ LL |     pub struct S(u8);\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let _: S = m::S(2);\n-   |                   ^ this tuple struct constructor is private\n+   |                   ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `S` is defined here\n   --> $DIR/privacy-struct-ctor.rs:6:5\n@@ -90,7 +90,7 @@ LL |         pub(in m) struct Z(pub(in m::n) u8);\n    |                            --------------- a constructor is private if any of the fields is private\n ...\n LL |     m::n::Z;\n-   |           ^ this tuple struct constructor is private\n+   |           ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `Z` is defined here\n   --> $DIR/privacy-struct-ctor.rs:12:9\n@@ -102,7 +102,7 @@ error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:41:16\n    |\n LL |     xcrate::m::S;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy-struct-ctor.rs:2:18\n    |\n@@ -119,7 +119,7 @@ error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:45:19\n    |\n LL |     xcrate::m::n::Z;\n-   |                   ^ this tuple struct constructor is private\n+   |                   ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy-struct-ctor.rs:5:28\n    |"}, {"sha": "361da4cc78e0074fedbc050d5ac73a3b2593e4b3", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,12 @@ error[E0423]: expected function, found macro `assert`\n   --> $DIR/resolve-hint-macro.rs:2:5\n    |\n LL |     assert(true);\n-   |     ^^^^^^ help: use `!` to invoke the macro: `assert!`\n+   |     ^^^^^^\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     assert!(true);\n+   |           ^\n \n error: aborting due to previous error\n "}, {"sha": "4e91e7bff34b2477a8520537ed47e8383ba9b53b", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -14,7 +14,7 @@ error[E0603]: tuple struct constructor `TupleStruct` is private\n   --> $DIR/struct.rs:23:32\n    |\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n-   |                                ^^^^^^^^^^^ this tuple struct constructor is private\n+   |                                ^^^^^^^^^^^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/structs.rs:11:24\n    |\n@@ -31,7 +31,7 @@ error[E0603]: unit struct `UnitStruct` is private\n   --> $DIR/struct.rs:32:32\n    |\n LL |     let us_explicit = structs::UnitStruct;\n-   |                                ^^^^^^^^^^ this unit struct is private\n+   |                                ^^^^^^^^^^ private unit struct\n    |\n note: the unit struct `UnitStruct` is defined here\n   --> $DIR/auxiliary/structs.rs:8:1"}, {"sha": "ae4f6aff11a02d021f8ad365fc06ea9c8ccc0bcd", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:11:48\n    |\n LL |     let variant_tuple = NonExhaustiveVariants::Tuple(640);\n-   |                                                ^^^^^ this tuple variant is private\n+   |                                                ^^^^^ private tuple variant\n    |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n@@ -14,7 +14,7 @@ error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:14:47\n    |\n LL |     let variant_unit = NonExhaustiveVariants::Unit;\n-   |                                               ^^^^ this unit variant is private\n+   |                                               ^^^^ private unit variant\n    |\n note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n@@ -26,7 +26,7 @@ error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:18:32\n    |\n LL |         NonExhaustiveVariants::Unit => \"\",\n-   |                                ^^^^ this unit variant is private\n+   |                                ^^^^ private unit variant\n    |\n note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n@@ -38,7 +38,7 @@ error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:20:32\n    |\n LL |         NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n-   |                                ^^^^^ this tuple variant is private\n+   |                                ^^^^^ private tuple variant\n    |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n@@ -50,7 +50,7 @@ error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:26:35\n    |\n LL |     if let NonExhaustiveVariants::Tuple(fe_tpl) = variant_struct {\n-   |                                   ^^^^^ this tuple variant is private\n+   |                                   ^^^^^ private tuple variant\n    |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23"}, {"sha": "1a642ae6e8ed8d7205dd2e32908f9524846da955", "filename": "src/test/ui/shadowed/shadowed-use-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module import `bar` is private\n   --> $DIR/shadowed-use-visibility.rs:9:14\n    |\n LL |     use foo::bar::f as g;\n-   |              ^^^ this module import is private\n+   |              ^^^ private module import\n    |\n note: the module import `bar` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:4:9\n@@ -19,7 +19,7 @@ error[E0603]: module import `f` is private\n   --> $DIR/shadowed-use-visibility.rs:15:10\n    |\n LL | use bar::f::f;\n-   |          ^ this module import is private\n+   |          ^ private module import\n    |\n note: the module import `f` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:11:9"}, {"sha": "3e6d350b36c330f0ef4e3741b012c7d9e8adf70e", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,12 +2,13 @@ error[E0282]: type annotations needed\n   --> $DIR/type-annotations-needed-expr.rs:2:39\n    |\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n-   |                                       ^^^\n-   |                                       |\n-   |                                       cannot infer type for type parameter `S` declared on the associated function `sum`\n-   |                                       help: consider specifying the type argument in the method call: `sum::<S>`\n+   |                                       ^^^ cannot infer type for type parameter `S` declared on the associated function `sum`\n    |\n    = note: type must be known at this point\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     let _ = (vec![1,2,3]).into_iter().sum::<S>() as f64;\n+   |                                          ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "35a09b21995916bfc051e66fe0397810ce66d196", "filename": "src/test/ui/stability-in-private-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-in-private-module.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `thread_info` is private\n   --> $DIR/stability-in-private-module.rs:7:26\n    |\n LL |     let _ = std::thread::thread_info::current_thread();\n-   |                          ^^^^^^^^^^^ this module is private\n+   |                          ^^^^^^^^^^^ private module\n    |\n note: the module `thread_info` is defined here\n   --> $SRC_DIR/libstd/thread/mod.rs:LL:COL"}, {"sha": "569608780def99ee4f066f3a31c38009dc97fa1d", "filename": "src/test/ui/static/static-method-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated function `new` is private\n-  --> $DIR/static-method-privacy.rs:9:13\n+  --> $DIR/static-method-privacy.rs:9:19\n    |\n LL |     let _ = a::S::new();\n-   |             ^^^^^^^^^\n+   |                   ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "d731da79246ee643589b4bc8613ebbf213b7424c", "filename": "src/test/ui/static/static-priv-by-default2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstatic%2Fstatic-priv-by-default2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstatic%2Fstatic-priv-by-default2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-priv-by-default2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: static `private` is private\n   --> $DIR/static-priv-by-default2.rs:15:30\n    |\n LL |     use child::childs_child::private;\n-   |                              ^^^^^^^ this static is private\n+   |                              ^^^^^^^ private static\n    |\n note: the static `private` is defined here\n   --> $DIR/static-priv-by-default2.rs:7:9\n@@ -14,7 +14,7 @@ error[E0603]: static `private` is private\n   --> $DIR/static-priv-by-default2.rs:23:33\n    |\n LL |     use static_priv_by_default::private;\n-   |                                 ^^^^^^^ this static is private\n+   |                                 ^^^^^^^ private static\n    |\n note: the static `private` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:3:1"}, {"sha": "d0afb2ae7af74fecc4f293bea9f58fffe7c831bc", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,15 +2,17 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   |    --- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |        |\n-   |        required by this bound in `bot`\n+   |    --- - required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn bot<T: ?Sized>() -> T { loop {} }\n+   |         ^^^^^^^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-mut-idx.rs:4:5"}, {"sha": "f8b16ec0d01b34a33d9ea7d01aa558d8d8779ae8", "filename": "src/test/ui/structs/struct-field-privacy.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,32 +1,32 @@\n error[E0616]: field `a` of struct `inner::A` is private\n-  --> $DIR/struct-field-privacy.rs:23:5\n+  --> $DIR/struct-field-privacy.rs:23:7\n    |\n LL |     b.a;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `b` of struct `inner::B` is private\n-  --> $DIR/struct-field-privacy.rs:26:5\n+  --> $DIR/struct-field-privacy.rs:26:7\n    |\n LL |     c.b;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `a` of struct `xc::A` is private\n-  --> $DIR/struct-field-privacy.rs:28:5\n+  --> $DIR/struct-field-privacy.rs:28:7\n    |\n LL |     d.a;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `b` of struct `xc::B` is private\n-  --> $DIR/struct-field-privacy.rs:32:5\n+  --> $DIR/struct-field-privacy.rs:32:7\n    |\n LL |     e.b;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `1` of struct `inner::Z` is private\n-  --> $DIR/struct-field-privacy.rs:35:5\n+  --> $DIR/struct-field-privacy.rs:35:7\n    |\n LL |     z.1;\n-   |     ^^^\n+   |       ^ private field\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4e022cef1b2d3f8238eae38e37f579c7747af761", "filename": "src/test/ui/structs/struct-variant-privacy-xc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy-xc.rs:4:33\n    |\n LL | fn f(b: struct_variant_privacy::Bar) {\n-   |                                 ^^^ this enum is private\n+   |                                 ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/auxiliary/struct_variant_privacy.rs:1:1\n@@ -14,7 +14,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy-xc.rs:6:33\n    |\n LL |         struct_variant_privacy::Bar::Baz { a: _a } => {}\n-   |                                 ^^^ this enum is private\n+   |                                 ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/auxiliary/struct_variant_privacy.rs:1:1"}, {"sha": "a6bc381ff6b384fc22edb0d645a42a098ca01afb", "filename": "src/test/ui/structs/struct-variant-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy.rs:7:14\n    |\n LL | fn f(b: foo::Bar) {\n-   |              ^^^ this enum is private\n+   |              ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/struct-variant-privacy.rs:2:5\n@@ -14,7 +14,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy.rs:9:14\n    |\n LL |         foo::Bar::Baz { a: _a } => {}\n-   |              ^^^ this enum is private\n+   |              ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/struct-variant-privacy.rs:2:5"}, {"sha": "3ad2a1414f96986eb56ba990e3d29c34a60bf628", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -5,14 +5,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n+   |                                                                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -21,14 +23,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n+   |                                                                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -37,14 +41,16 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n+   |                                                        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -53,14 +59,16 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<'static>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |            --   ^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<'static>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = foo::<'static>();\n+   |                               ^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "e23f06a3ef590036aeaafa5e63caa5a628eabdcc", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -5,14 +5,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n+   |                                                                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -21,14 +23,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n+   |                                                                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -37,14 +41,16 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n+   |                                                        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -53,14 +59,16 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<ReStatic>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |            --   ^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<ReStatic>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = foo::<'static>();\n+   |                               ^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "638d504d7feab73a82344ababf67a9fcf7316f5c", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,10 +8,12 @@ LL | fn bar(f: impl Future<Output=()>) {}\n    |    ---         ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^\n-   |         |\n-   |         the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n-   |         help: use parentheses to call the function: `foo()`\n+   |         ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |\n+help: use parentheses to call the function\n+   |\n+LL |     bar(foo());\n+   |            ^^\n \n error[E0277]: the trait bound `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]: std::future::Future` is not satisfied\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n@@ -22,10 +24,12 @@ LL | fn bar(f: impl Future<Output=()>) {}\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n-   |         ^^^^^^^^^^^^^\n-   |         |\n-   |         the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n-   |         help: use parentheses to call the closure: `async_closure()`\n+   |         ^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+   |\n+help: use parentheses to call the closure\n+   |\n+LL |     bar(async_closure());\n+   |                      ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ab336b14d29480915dbf8dc644e5404b2fd83f0a", "filename": "src/test/ui/suggestions/const-in-struct-pat.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -9,7 +9,11 @@ LL |     let Thing { foo } = t;\n    |                 |\n    |                 expected struct `std::string::String`, found struct `foo`\n    |                 `foo` is interpreted as a unit struct, not a new binding\n-   |                 help: bind the struct field to a different name instead: `foo: other_foo`\n+   |\n+help: bind the struct field to a different name instead\n+   |\n+LL |     let Thing { foo: other_foo } = t;\n+   |                    ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ed4a0b8487dff01ef0fb8e56fa0b2967d5d83b12", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,10 +8,12 @@ LL | fn bar(f: impl T<O=()>) {}\n    |    ---         ------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^\n-   |         |\n-   |         the trait `T` is not implemented for `fn() -> impl T {foo}`\n-   |         help: use parentheses to call the function: `foo()`\n+   |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |\n+help: use parentheses to call the function\n+   |\n+LL |     bar(foo());\n+   |            ^^\n \n error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n@@ -22,10 +24,12 @@ LL | fn bar(f: impl T<O=()>) {}\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n-   |         ^^^^^^^\n-   |         |\n-   |         the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n-   |         help: use parentheses to call the closure: `closure()`\n+   |         ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |\n+help: use parentheses to call the closure\n+   |\n+LL |     bar(closure());\n+   |                ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b03bea1eddbf08391a6531e223912e3ae95e4c6a", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 96, "deletions": 58, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -19,14 +19,16 @@ LL | fn foo(a: usize, b: usize) -> usize { a }\n    | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n ...\n LL |     let _: usize = foo;\n-   |            -----   ^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `foo(a, b)`\n+   |            -----   ^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {foo}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = foo(a, b);\n+   |                       ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n@@ -35,14 +37,16 @@ LL | struct S(usize, usize);\n    | ----------------------- fn(usize, usize) -> S {S} defined here\n ...\n LL |     let _: S = S;\n-   |            -   ^\n-   |            |   |\n-   |            |   expected struct `S`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple struct: `S(_, _)`\n+   |            -   ^ expected struct `S`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected struct `S`\n              found fn item `fn(usize, usize) -> S {S}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL |     let _: S = S(_, _);\n+   |                 ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n@@ -51,14 +55,16 @@ LL | fn bar() -> usize { 42 }\n    | ----------------- fn() -> usize {bar} defined here\n ...\n LL |     let _: usize = bar;\n-   |            -----   ^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `bar()`\n+   |            -----   ^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn() -> usize {bar}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = bar();\n+   |                       ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:32:16\n@@ -67,14 +73,16 @@ LL | struct V();\n    | ----------- fn() -> V {V} defined here\n ...\n LL |     let _: V = V;\n-   |            -   ^\n-   |            |   |\n-   |            |   expected struct `V`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple struct: `V()`\n+   |            -   ^ expected struct `V`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected struct `V`\n              found fn item `fn() -> V {V}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL |     let _: V = V();\n+   |                 ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:33:20\n@@ -83,14 +91,16 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n ...\n LL |     let _: usize = T::baz;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `T::baz(x, y)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = T::baz(x, y);\n+   |                          ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n@@ -99,14 +109,16 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n ...\n LL |     let _: usize = T::bat;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `T::bat(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = T::bat(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n@@ -115,14 +127,16 @@ LL |     A(usize),\n    |     -------- fn(usize) -> E {E::A} defined here\n ...\n LL |     let _: E = E::A;\n-   |            -   ^^^^\n-   |            |   |\n-   |            |   expected enum `E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `E::A(_)`\n+   |            -   ^^^^ expected enum `E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `E`\n            found fn item `fn(usize) -> E {E::A}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = E::A(_);\n+   |                    ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n@@ -131,14 +145,16 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n ...\n LL |     let _: usize = X::baz;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::baz(x, y)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::baz(x, y);\n+   |                          ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n@@ -147,14 +163,16 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n ...\n LL |     let _: usize = X::bat;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bat(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bat(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n@@ -163,14 +181,16 @@ LL |     fn bax(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n ...\n LL |     let _: usize = X::bax;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bax(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bax(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n@@ -179,14 +199,16 @@ LL |     fn bach(x: usize) -> usize;\n    |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n ...\n LL |     let _: usize = X::bach;\n-   |            -----   ^^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bach(x)`\n+   |            -----   ^^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bach(x);\n+   |                           ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n@@ -195,14 +217,16 @@ LL |     fn ban(&self) -> usize { 42 }\n    |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n ...\n LL |     let _: usize = X::ban;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::ban(_)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::ban(_);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n@@ -211,41 +235,55 @@ LL |     fn bal(&self) -> usize;\n    |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n ...\n LL |     let _: usize = X::bal;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bal(_)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bal(_);\n+   |                          ^^^\n \n error[E0615]: attempted to take value of method `ban` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:43:22\n    |\n LL |     let _: usize = X.ban;\n-   |                      ^^^ help: use parentheses to call the method: `ban()`\n+   |                      ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _: usize = X.ban();\n+   |                         ^^\n \n error[E0615]: attempted to take value of method `bal` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:44:22\n    |\n LL |     let _: usize = X.bal;\n-   |                      ^^^ help: use parentheses to call the method: `bal()`\n+   |                      ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _: usize = X.bal();\n+   |                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n    |                   ----- the found closure\n LL |     let _: usize = closure;\n-   |            -----   ^^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found closure\n-   |            |       help: use parentheses to call this closure: `closure()`\n+   |            -----   ^^^^^^^ expected `usize`, found closure\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found closure `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n+help: use parentheses to call this closure\n+   |\n+LL |     let _: usize = closure();\n+   |                           ^^\n \n error: aborting due to 17 previous errors\n "}, {"sha": "84ba935191b48615dd1bbd38ce97d3800f6b2be1", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -5,13 +5,14 @@ LL | fn foo<X: Trait>(_: X) {}\n    |    ---    ----- required by this bound in `foo`\n ...\n LL |   foo(&s);\n-   |       -^\n-   |       |\n-   |       the trait `Trait` is not implemented for `&S`\n-   |       help: consider changing this borrow's mutability: `&mut`\n+   |       ^^ the trait `Trait` is not implemented for `&S`\n    |\n    = help: the following implementations were found:\n              <&'a mut S as Trait>\n+help: consider changing this borrow's mutability\n+   |\n+LL |   foo(&mut s);\n+   |       ^^^^\n \n error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7"}, {"sha": "04c67ec6a06b6a7b7eb89e5476e751f53aee7bdf", "filename": "src/test/ui/suggestions/method-missing-parentheses.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -8,9 +8,12 @@ error[E0615]: attempted to take value of method `collect` on type `std::vec::Int\n   --> $DIR/method-missing-parentheses.rs:2:32\n    |\n LL |     let _ = vec![].into_iter().collect::<usize>;\n-   |                                ^^^^^^^---------\n-   |                                |\n-   |                                help: use parentheses to call the method: `collect::<usize>()`\n+   |                                ^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>();\n+   |                                                ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fd5c11fcf09049992102ec9a4f31d5750ae6175", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -40,7 +40,7 @@ error[E0624]: associated function `a` is private\n   --> $DIR/trait-item-privacy.rs:72:7\n    |\n LL |     c.a();\n-   |       ^\n+   |       ^ private associated function\n \n error[E0599]: no function or associated item named `a` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:78:8\n@@ -74,10 +74,10 @@ LL | use method::B;\n    |\n \n error[E0624]: associated function `a` is private\n-  --> $DIR/trait-item-privacy.rs:84:5\n+  --> $DIR/trait-item-privacy.rs:84:8\n    |\n LL |     C::a(&S);\n-   |     ^^^^\n+   |        ^ private associated function\n \n error[E0599]: no associated item named `A` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:97:8\n@@ -111,10 +111,10 @@ LL | use assoc_const::B;\n    |\n \n error[E0624]: associated constant `A` is private\n-  --> $DIR/trait-item-privacy.rs:101:5\n+  --> $DIR/trait-item-privacy.rs:101:8\n    |\n LL |     C::A;\n-   |     ^^^^\n+   |        ^ private associated constant\n \n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n@@ -159,13 +159,13 @@ error: associated type `A` is private\n   --> $DIR/trait-item-privacy.rs:119:12\n    |\n LL |     let _: T::A;\n-   |            ^^^^\n+   |            ^^^^ private associated type\n \n error: associated type `A` is private\n   --> $DIR/trait-item-privacy.rs:128:9\n    |\n LL |         A = u8,\n-   |         ^^^^^^\n+   |         ^^^^^^ private associated type\n \n error: aborting due to 15 previous errors\n "}, {"sha": "c33673aea4d795bfe060b54d5b721a3c66eb499a", "filename": "src/test/ui/traits/trait-method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `method` is private\n   --> $DIR/trait-method-private.rs:19:9\n    |\n LL |     foo.method();\n-   |         ^^^^^^\n+   |         ^^^^^^ private associated function\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "fe870ab737cc8fd5d69b7bbb6623d714fc5a5e04", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -11,9 +11,13 @@ error[E0574]: expected struct, variant or union type, found macro `try`\n   --> $DIR/try-block-in-edition2015.rs:4:33\n    |\n LL |     let try_result: Option<_> = try {\n-   |                                 ^^^ help: use `!` to invoke the macro: `try!`\n+   |                                 ^^^\n    |\n    = note: if you want the `try` keyword, you need to be in the 2018 edition\n+help: use `!` to invoke the macro\n+   |\n+LL |     let try_result: Option<_> = try! {\n+   |                                    ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "047728dc1ea4e3d39ea5ab0eda91b075b4de0678", "filename": "src/test/ui/type-inference/or_else-multiple-type-params.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,10 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/or_else-multiple-type-params.rs:7:10\n    |\n LL |         .or_else(|err| {\n-   |          ^^^^^^^\n-   |          |\n-   |          cannot infer type for type parameter `F` declared on the associated function `or_else`\n-   |          help: consider specifying the type arguments in the method call: `or_else::<F, O>`\n+   |          ^^^^^^^ cannot infer type for type parameter `F` declared on the associated function `or_else`\n+   |\n+help: consider specifying the type arguments in the method call\n+   |\n+LL |         .or_else::<F, O>(|err| {\n+   |                 ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b6630ec8942384bdf7ea924e4288079d487535c", "filename": "src/test/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,9 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/sort_by_key.rs:3:9\n    |\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n-   |         ^^^^^^^^^^^                    --- help: consider specifying the type argument in the method call: `sum::<S>`\n-   |         |\n-   |         cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n+   |         ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n+   |\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     lst.sort_by_key(|&(v, _)| v.iter().sum::<S>());\n+   |                                           ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "df7d73d7a7c1d221b47c7e614e96e3be6c348bd1", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -5,12 +5,13 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n    |    ---    ------------ required by this bound in `foo`\n ...\n LL |     foo(42);\n-   |     ^^^\n-   |     |\n-   |     cannot infer type for type parameter `T` declared on the function `foo`\n-   |     help: consider specifying the type argument in the function call: `foo::<T>`\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n    = note: cannot resolve `_: std::convert::Into<std::string::String>`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |     foo::<T>(42);\n+   |        ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71b93e873c22026ceca22d8e30c146afa2b3745c", "filename": "src/test/ui/union/union-suggest-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -17,5 +17,5 @@ fn main() {\n \n     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n                          //~| HELP use parentheses to call the method\n-                         //~| SUGGESTION calculate()\n+                         //~| SUGGESTION ()\n }"}, {"sha": "461db1712064fdcdcb698ba537908e95d42e1169", "filename": "src/test/ui/union/union-suggest-field.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -14,7 +14,12 @@ error[E0615]: attempted to take value of method `calculate` on type `U`\n   --> $DIR/union-suggest-field.rs:18:15\n    |\n LL |     let y = u.calculate;\n-   |               ^^^^^^^^^ help: use parentheses to call the method: `calculate()`\n+   |               ^^^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let y = u.calculate();\n+   |                        ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "083c74ba1e05d7ab575a5151c752d949ab673705", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -7,12 +7,14 @@ LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   |    -- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |       |\n-   |       required by this bound in `f2`\n+   |    -- - required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f2<X: ?Sized>(x: &X) {\n+   |        ^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n@@ -23,12 +25,14 @@ LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   |    -- -   - help: consider relaxing the implicit `Sized` restriction: `+  ?Sized`\n-   |       |\n-   |       required by this bound in `f4`\n+   |    -- - required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f4<X: T +  ?Sized>(x: &X) {\n+   |            ^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8"}, {"sha": "37b4e61c8085eff21382a40efe79ac63fac4290f", "filename": "src/test/ui/use/use-from-trait-xc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -44,7 +44,7 @@ error[E0603]: struct `Foo` is private\n   --> $DIR/use-from-trait-xc.rs:14:24\n    |\n LL | use use_from_trait_xc::Foo::new;\n-   |                        ^^^ this struct is private\n+   |                        ^^^ private struct\n    |\n note: the struct `Foo` is defined here\n   --> $DIR/auxiliary/use-from-trait-xc.rs:9:1\n@@ -56,7 +56,7 @@ error[E0603]: struct `Foo` is private\n   --> $DIR/use-from-trait-xc.rs:17:24\n    |\n LL | use use_from_trait_xc::Foo::C;\n-   |                        ^^^ this struct is private\n+   |                        ^^^ private struct\n    |\n note: the struct `Foo` is defined here\n   --> $DIR/auxiliary/use-from-trait-xc.rs:9:1"}, {"sha": "1b12b3c6fa09a262c7d2ef24cd0888f043900e50", "filename": "src/test/ui/use/use-mod/use-mod-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-3.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/use-mod-3.rs:1:10\n    |\n LL | use foo::bar::{\n-   |          ^^^ this module is private\n+   |          ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/use-mod-3.rs:9:5\n@@ -14,7 +14,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/use-mod-3.rs:4:10\n    |\n LL | use foo::bar::{\n-   |          ^^^ this module is private\n+   |          ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/use-mod-3.rs:9:5"}, {"sha": "8b7e43ccc04e90e4f566ede7d44dbebd68e9da48", "filename": "src/test/ui/xc-private-method.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fxc-private-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fxc-private-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -1,14 +1,14 @@\n error[E0624]: associated function `static_meth_struct` is private\n-  --> $DIR/xc-private-method.rs:6:13\n+  --> $DIR/xc-private-method.rs:6:44\n    |\n LL |     let _ = xc_private_method_lib::Struct::static_meth_struct();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^^^^^^^^^^^^^^^^^^ private associated function\n \n error[E0624]: associated function `static_meth_enum` is private\n-  --> $DIR/xc-private-method.rs:9:13\n+  --> $DIR/xc-private-method.rs:9:42\n    |\n LL |     let _ = xc_private_method_lib::Enum::static_meth_enum();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          ^^^^^^^^^^^^^^^^ private associated function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0ebdb0a06d82b45340ec2ecf3c4c1d9a2f55f37a", "filename": "src/test/ui/xc-private-method2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method2.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,13 +2,13 @@ error[E0624]: associated function `meth_struct` is private\n   --> $DIR/xc-private-method2.rs:6:52\n    |\n LL |     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n-   |                                                    ^^^^^^^^^^^\n+   |                                                    ^^^^^^^^^^^ private associated function\n \n error[E0624]: associated function `meth_enum` is private\n   --> $DIR/xc-private-method2.rs:9:55\n    |\n LL |     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n-   |                                                       ^^^^^^^^^\n+   |                                                       ^^^^^^^^^ private associated function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a97f55de5f8330fcfac88d7fff883f01c2313c84", "filename": "src/test/ui/xcrate/xcrate-private-by-default.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-private-by-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906b39958322c54b76de4f301976e7753777be4e/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-private-by-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-private-by-default.stderr?ref=906b39958322c54b76de4f301976e7753777be4e", "patch": "@@ -2,7 +2,7 @@ error[E0603]: static `j` is private\n   --> $DIR/xcrate-private-by-default.rs:23:29\n    |\n LL |     static_priv_by_default::j;\n-   |                             ^ this static is private\n+   |                             ^ private static\n    |\n note: the static `j` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:47:1\n@@ -14,7 +14,7 @@ error[E0603]: function `k` is private\n   --> $DIR/xcrate-private-by-default.rs:25:29\n    |\n LL |     static_priv_by_default::k;\n-   |                             ^ this function is private\n+   |                             ^ private function\n    |\n note: the function `k` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:48:1\n@@ -26,7 +26,7 @@ error[E0603]: unit struct `l` is private\n   --> $DIR/xcrate-private-by-default.rs:27:29\n    |\n LL |     static_priv_by_default::l;\n-   |                             ^ this unit struct is private\n+   |                             ^ private unit struct\n    |\n note: the unit struct `l` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:49:1\n@@ -38,7 +38,7 @@ error[E0603]: enum `m` is private\n   --> $DIR/xcrate-private-by-default.rs:29:35\n    |\n LL |     foo::<static_priv_by_default::m>();\n-   |                                   ^ this enum is private\n+   |                                   ^ private enum\n    |\n note: the enum `m` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:50:1\n@@ -50,7 +50,7 @@ error[E0603]: type alias `n` is private\n   --> $DIR/xcrate-private-by-default.rs:31:35\n    |\n LL |     foo::<static_priv_by_default::n>();\n-   |                                   ^ this type alias is private\n+   |                                   ^ private type alias\n    |\n note: the type alias `n` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:51:1\n@@ -62,7 +62,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:35:29\n    |\n LL |     static_priv_by_default::foo::a;\n-   |                             ^^^ this module is private\n+   |                             ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -74,7 +74,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:37:29\n    |\n LL |     static_priv_by_default::foo::b;\n-   |                             ^^^ this module is private\n+   |                             ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -86,7 +86,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:39:29\n    |\n LL |     static_priv_by_default::foo::c;\n-   |                             ^^^ this module is private\n+   |                             ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -98,7 +98,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:41:35\n    |\n LL |     foo::<static_priv_by_default::foo::d>();\n-   |                                   ^^^ this module is private\n+   |                                   ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -110,7 +110,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:43:35\n    |\n LL |     foo::<static_priv_by_default::foo::e>();\n-   |                                   ^^^ this module is private\n+   |                                   ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1"}]}