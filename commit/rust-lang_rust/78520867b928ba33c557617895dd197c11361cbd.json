{"sha": "78520867b928ba33c557617895dd197c11361cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NTIwODY3YjkyOGJhMzNjNTU3NjE3ODk1ZGQxOTdjMTEzNjFjYmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-08T19:10:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-09T20:28:25Z"}, "message": "rustc: Add EnumSet tests", "tree": {"sha": "a6f9ee42ba96b9cc9db0982cddfaa7f0ab4a2de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f9ee42ba96b9cc9db0982cddfaa7f0ab4a2de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78520867b928ba33c557617895dd197c11361cbd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78520867b928ba33c557617895dd197c11361cbd", "html_url": "https://github.com/rust-lang/rust/commit/78520867b928ba33c557617895dd197c11361cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78520867b928ba33c557617895dd197c11361cbd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc2ca9d8830a7a34242aa7722f545bc242813af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2ca9d8830a7a34242aa7722f545bc242813af3", "html_url": "https://github.com/rust-lang/rust/commit/dc2ca9d8830a7a34242aa7722f545bc242813af3"}], "stats": {"total": 153, "additions": 149, "deletions": 4}, "files": [{"sha": "859e743b43bfa983fd1faf384cb73269d8771492", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 149, "deletions": 4, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/78520867b928ba33c557617895dd197c11361cbd/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78520867b928ba33c557617895dd197c11361cbd/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=78520867b928ba33c557617895dd197c11361cbd", "patch": "@@ -45,10 +45,6 @@ pub impl<E:CLike> EnumSet<E> {\n         self.bits |= bit(e);\n     }\n \n-    fn plus(&self, e: E) -> EnumSet<E> {\n-        EnumSet {bits: self.bits | bit(e)}\n-    }\n-\n     fn contains_elem(&self, e: E) -> bool {\n         (self.bits & bit(e)) != 0\n     }\n@@ -86,3 +82,152 @@ impl<E:CLike> core::BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n         EnumSet {bits: self.bits & e.bits}\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use core;\n+    use core::iter;\n+    use util::enum_set::*;\n+\n+    #[deriving(Eq)]\n+    enum Foo {\n+        A, B, C\n+    }\n+\n+    impl CLike for Foo {\n+        pub fn to_uint(&self) -> uint {\n+            *self as uint\n+        }\n+\n+        pub fn from_uint(v: uint) -> Foo {\n+            unsafe { cast::transmute(v) }\n+        }\n+    }\n+\n+    #[test]\n+    fn test_empty() {\n+        let e: EnumSet<Foo> = EnumSet::empty();\n+        assert!(e.is_empty());\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+    // intersect\n+\n+    #[test]\n+    fn test_two_empties_do_not_intersect() {\n+        let e1: EnumSet<Foo> = EnumSet::empty();\n+        let e2: EnumSet<Foo> = EnumSet::empty();\n+        assert!(!e1.intersects(e2));\n+    }\n+\n+    #[test]\n+    fn test_empty_does_not_intersect_with_full() {\n+        let e1: EnumSet<Foo> = EnumSet::empty();\n+\n+        let mut e2: EnumSet<Foo> = EnumSet::empty();\n+        e2.add(A);\n+        e2.add(B);\n+        e2.add(C);\n+\n+        assert!(!e1.intersects(e2));\n+    }\n+\n+    #[test]\n+    fn test_disjoint_intersects() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+        e1.add(A);\n+\n+        let mut e2: EnumSet<Foo> = EnumSet::empty();\n+        e2.add(B);\n+\n+        assert!(!e1.intersects(e2));\n+    }\n+\n+    #[test]\n+    fn test_overlapping_intersects() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+        e1.add(A);\n+\n+        let mut e2: EnumSet<Foo> = EnumSet::empty();\n+        e2.add(A);\n+        e2.add(B);\n+\n+        assert!(e1.intersects(e2));\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+    // contains and contains_elem\n+\n+    #[test]\n+    fn test_contains() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+        e1.add(A);\n+\n+        let mut e2: EnumSet<Foo> = EnumSet::empty();\n+        e2.add(A);\n+        e2.add(B);\n+\n+        assert!(!e1.contains(e2));\n+        assert!(e2.contains(e1));\n+    }\n+\n+    #[test]\n+    fn test_contains_elem() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+        e1.add(A);\n+        assert!(e1.contains_elem(A));\n+        assert!(!e1.contains_elem(B));\n+        assert!(!e1.contains_elem(C));\n+\n+        e1.add(A);\n+        e1.add(B);\n+        assert!(e1.contains_elem(A));\n+        assert!(e1.contains_elem(B));\n+        assert!(!e1.contains_elem(C));\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+    // each\n+\n+    #[test]\n+    fn test_each() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+\n+        assert_eq!(~[], iter::to_vec(|f| e1.each(f)))\n+\n+        e1.add(A);\n+        assert_eq!(~[A], iter::to_vec(|f| e1.each(f)))\n+\n+        e1.add(C);\n+        assert_eq!(~[A,C], iter::to_vec(|f| e1.each(f)))\n+\n+        e1.add(C);\n+        assert_eq!(~[A,C], iter::to_vec(|f| e1.each(f)))\n+\n+        e1.add(B);\n+        assert_eq!(~[A,B,C], iter::to_vec(|f| e1.each(f)))\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+    // operators\n+\n+    #[test]\n+    fn test_operators() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+        e1.add(A);\n+        e1.add(C);\n+\n+        let mut e2: EnumSet<Foo> = EnumSet::empty();\n+        e2.add(B);\n+        e2.add(C);\n+\n+        let e_union = e1 | e2;\n+        assert_eq!(~[A,B,C], iter::to_vec(|f| e_union.each(f)))\n+\n+        let e_intersection = e1 & e2;\n+        assert_eq!(~[C], iter::to_vec(|f| e_intersection.each(f)))\n+\n+        let e_subtract = e1 - e2;\n+        assert_eq!(~[A], iter::to_vec(|f| e_subtract.each(f)))\n+    }\n+}"}]}