{"sha": "3e351cc0ba7b182a71e7955ca7231349b8396f9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzUxY2MwYmE3YjE4MmE3MWU3OTU1Y2E3MjMxMzQ5YjgzOTZmOWQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-29T20:27:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-30T14:48:13Z"}, "message": "Add trailing comma when extracting match arm expressions into functions", "tree": {"sha": "ecb3aa902ca0ad4f286ca292d1b433eb0a678c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb3aa902ca0ad4f286ca292d1b433eb0a678c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e351cc0ba7b182a71e7955ca7231349b8396f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e351cc0ba7b182a71e7955ca7231349b8396f9d", "html_url": "https://github.com/rust-lang/rust/commit/3e351cc0ba7b182a71e7955ca7231349b8396f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e351cc0ba7b182a71e7955ca7231349b8396f9d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322513b06c68fab682561aca715eec7c0a1e1563", "url": "https://api.github.com/repos/rust-lang/rust/commits/322513b06c68fab682561aca715eec7c0a1e1563", "html_url": "https://github.com/rust-lang/rust/commit/322513b06c68fab682561aca715eec7c0a1e1563"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "33c439a85011857684f7a169b832e92826461952", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3e351cc0ba7b182a71e7955ca7231349b8396f9d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e351cc0ba7b182a71e7955ca7231349b8396f9d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=3e351cc0ba7b182a71e7955ca7231349b8396f9d", "patch": "@@ -97,6 +97,10 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let params = extracted_function_params(ctx, &body, locals_used.iter().copied());\n \n+            let insert_comma = body\n+                .parent()\n+                .and_then(ast::MatchArm::cast)\n+                .map_or(false, |it| it.comma_token().is_none());\n             let fun = Function {\n                 name: \"fun_name\".to_string(),\n                 self_param,\n@@ -110,7 +114,10 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n             let new_indent = IndentLevel::from_node(&insert_after);\n             let old_indent = fun.body.indent_level();\n \n-            builder.replace(target_range, format_replacement(ctx, &fun, old_indent, has_await));\n+            builder.replace(target_range, make_call(ctx, &fun, old_indent, has_await));\n+            if insert_comma {\n+                builder.insert(target_range.end(), \",\");\n+            }\n \n             let fn_def = format_function(ctx, module, &fun, old_indent, new_indent, has_await);\n             let insert_offset = insert_after.text_range().end();\n@@ -364,6 +371,13 @@ fn try_kind_of_ty(ty: hir::Type, ctx: &AssistContext) -> Option<TryKind> {\n }\n \n impl FunctionBody {\n+    fn parent(&self) -> Option<SyntaxNode> {\n+        match self {\n+            FunctionBody::Expr(expr) => expr.syntax().parent(),\n+            FunctionBody::Span { parent, .. } => Some(parent.syntax().clone()),\n+        }\n+    }\n+\n     fn from_expr(expr: ast::Expr) -> Option<Self> {\n         match expr {\n             ast::Expr::BreakExpr(it) => it.expr().map(Self::Expr),\n@@ -978,7 +992,7 @@ fn node_to_insert_after(body: &FunctionBody, anchor: Anchor) -> Option<SyntaxNod\n     last_ancestor\n }\n \n-fn format_replacement(\n+fn make_call(\n     ctx: &AssistContext,\n     fun: &Function,\n     indent: IndentLevel,\n@@ -3767,6 +3781,56 @@ async fn some_function() {\n             extract_function,\n             r#\"\n fn main() $0{}$0\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_adds_comma_for_match_arm() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn main() {\n+    match 6 {\n+        100 => $0{ 100 }$0\n+        _ => 0,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 6 {\n+        100 => fun_name(),\n+        _ => 0,\n+    }\n+}\n+\n+fn $0fun_name() -> i32 {\n+    100\n+}\n+\"#,\n+        );\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn main() {\n+    match 6 {\n+        100 => $0{ 100 }$0,\n+        _ => 0,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 6 {\n+        100 => fun_name(),\n+        _ => 0,\n+    }\n+}\n+\n+fn $0fun_name() -> i32 {\n+    100\n+}\n \"#,\n         );\n     }"}]}