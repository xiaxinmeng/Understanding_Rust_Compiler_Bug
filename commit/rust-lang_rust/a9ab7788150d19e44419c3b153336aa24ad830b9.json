{"sha": "a9ab7788150d19e44419c3b153336aa24ad830b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YWI3Nzg4MTUwZDE5ZTQ0NDE5YzNiMTUzMzM2YWEyNGFkODMwYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-28T01:30:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-28T01:30:31Z"}, "message": "Auto merge of #38479 - michaelwoerister:extern_mod_ich, r=nikomatsakis\n\nICH: Fix and test foreign mod hashing.\n\nr? @nikomatsakis", "tree": {"sha": "4e1fd9b933f1179d4786ff0a747322e032680df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1fd9b933f1179d4786ff0a747322e032680df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ab7788150d19e44419c3b153336aa24ad830b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ab7788150d19e44419c3b153336aa24ad830b9", "html_url": "https://github.com/rust-lang/rust/commit/a9ab7788150d19e44419c3b153336aa24ad830b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ab7788150d19e44419c3b153336aa24ad830b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314c28b729ae359b99586cc62c486c28e0d44424", "url": "https://api.github.com/repos/rust-lang/rust/commits/314c28b729ae359b99586cc62c486c28e0d44424", "html_url": "https://github.com/rust-lang/rust/commit/314c28b729ae359b99586cc62c486c28e0d44424"}, {"sha": "f0a630b8c3dcb9a0f009015fcf4d90082ca6d384", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a630b8c3dcb9a0f009015fcf4d90082ca6d384", "html_url": "https://github.com/rust-lang/rust/commit/f0a630b8c3dcb9a0f009015fcf4d90082ca6d384"}], "stats": {"total": 321, "additions": 307, "deletions": 14}, "files": [{"sha": "474d7d508c45b2e05a91775a6f1a9d5c25865a1e", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=a9ab7788150d19e44419c3b153336aa24ad830b9", "patch": "@@ -264,6 +264,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_where_predicate(&mut self, predicate: &'v WherePredicate) {\n         walk_where_predicate(self, predicate)\n     }\n+    fn visit_fn_decl(&mut self, fd: &'v FnDecl) {\n+        walk_fn_decl(self, fd)\n+    }\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: ExprId, s: Span, id: NodeId) {\n         walk_fn(self, fk, fd, b, s, id)\n     }\n@@ -531,7 +534,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n         TyBareFn(ref function_declaration) => {\n-            walk_fn_decl(visitor, &function_declaration.decl);\n+            visitor.visit_fn_decl(&function_declaration.decl);\n             walk_list!(visitor, visit_lifetime_def, &function_declaration.lifetimes);\n         }\n         TyPath(ref qpath) => {\n@@ -660,7 +663,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n \n     match foreign_item.node {\n         ForeignItemFn(ref function_declaration, ref generics) => {\n-            walk_fn_decl(visitor, function_declaration);\n+            visitor.visit_fn_decl(function_declaration);\n             visitor.visit_generics(generics)\n         }\n         ForeignItemStatic(ref typ, _) => visitor.visit_ty(typ),\n@@ -764,7 +767,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n                                    _span: Span,\n                                    id: NodeId) {\n     visitor.visit_id(id);\n-    walk_fn_decl(visitor, function_declaration);\n+    visitor.visit_fn_decl(function_declaration);\n     walk_fn_kind(visitor, function_kind);\n     visitor.visit_body(body_id)\n }\n@@ -776,7 +779,7 @@ pub fn walk_fn_with_body<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              _span: Span,\n                                              id: NodeId) {\n     visitor.visit_id(id);\n-    walk_fn_decl(visitor, function_declaration);\n+    visitor.visit_fn_decl(function_declaration);\n     walk_fn_kind(visitor, function_kind);\n     visitor.visit_expr(body)\n }\n@@ -793,7 +796,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         MethodTraitItem(ref sig, None) => {\n             visitor.visit_id(trait_item.id);\n             visitor.visit_generics(&sig.generics);\n-            walk_fn_decl(visitor, &sig.decl);\n+            visitor.visit_fn_decl(&sig.decl);\n         }\n         MethodTraitItem(ref sig, Some(body_id)) => {\n             visitor.visit_fn(FnKind::Method(trait_item.name,"}, {"sha": "74707865dee4d75c25b7a199a42e3a22e2973c43", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=a9ab7788150d19e44419c3b153336aa24ad830b9", "patch": "@@ -238,9 +238,4 @@ impl<'a, 'tcx> Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> {\n         self.calculate_node_id(impl_item.id, |v| v.visit_impl_item(impl_item));\n         visit::walk_impl_item(self, impl_item);\n     }\n-\n-    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n-        self.calculate_node_id(item.id, |v| v.visit_foreign_item(item));\n-        visit::walk_foreign_item(self, item);\n-    }\n }"}, {"sha": "bb61756694fe55dd830969145b5296e18d181f0f", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=a9ab7788150d19e44419c3b153336aa24ad830b9", "patch": "@@ -180,9 +180,10 @@ enum SawAbiComponent<'a> {\n     SawLifetimeDef(usize),\n \n     SawMod,\n-    SawForeignItem,\n+    SawForeignItem(SawForeignItemComponent),\n     SawItem(SawItemComponent),\n     SawTy(SawTyComponent),\n+    SawFnDecl(bool),\n     SawGenerics,\n     SawTraitItem(SawTraitOrImplItemComponent),\n     SawImplItem(SawTraitOrImplItemComponent),\n@@ -363,7 +364,7 @@ enum SawItemComponent {\n     SawItemConst,\n     SawItemFn(Unsafety, Constness, Abi),\n     SawItemMod,\n-    SawItemForeignMod,\n+    SawItemForeignMod(Abi),\n     SawItemTy,\n     SawItemEnum,\n     SawItemStruct,\n@@ -381,7 +382,7 @@ fn saw_item(node: &Item_) -> SawItemComponent {\n         ItemConst(..) =>SawItemConst,\n         ItemFn(_, unsafety, constness, abi, _, _) => SawItemFn(unsafety, constness, abi),\n         ItemMod(..) => SawItemMod,\n-        ItemForeignMod(..) => SawItemForeignMod,\n+        ItemForeignMod(ref fm) => SawItemForeignMod(fm.abi),\n         ItemTy(..) => SawItemTy,\n         ItemEnum(..) => SawItemEnum,\n         ItemStruct(..) => SawItemStruct,\n@@ -392,6 +393,12 @@ fn saw_item(node: &Item_) -> SawItemComponent {\n     }\n }\n \n+#[derive(Hash)]\n+enum SawForeignItemComponent {\n+    Static { mutable: bool },\n+    Fn,\n+}\n+\n #[derive(Hash)]\n enum SawPatComponent {\n     SawPatWild,\n@@ -641,7 +648,17 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n     fn visit_foreign_item(&mut self, i: &'tcx ForeignItem) {\n         debug!(\"visit_foreign_item: st={:?}\", self.st);\n \n-        SawForeignItem.hash(self.st);\n+        match i.node {\n+            ForeignItemFn(..) => {\n+                SawForeignItem(SawForeignItemComponent::Fn)\n+            }\n+            ForeignItemStatic(_, mutable) => {\n+                SawForeignItem(SawForeignItemComponent::Static {\n+                    mutable: mutable\n+                })\n+            }\n+        }.hash(self.st);\n+\n         hash_span!(self, i.span);\n         hash_attrs!(self, &i.attrs);\n         visit::walk_foreign_item(self, i)\n@@ -678,6 +695,12 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n         visit::walk_generics(self, g)\n     }\n \n+    fn visit_fn_decl(&mut self, fd: &'tcx FnDecl) {\n+        debug!(\"visit_fn_decl: st={:?}\", self.st);\n+        SawFnDecl(fd.variadic).hash(self.st);\n+        visit::walk_fn_decl(self, fd)\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'tcx TraitItem) {\n         debug!(\"visit_trait_item: st={:?}\", self.st);\n "}, {"sha": "03e621fedbeb4d49bc3dd5a5af34c874f7dd0874", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "added", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ab7788150d19e44419c3b153336aa24ad830b9/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=a9ab7788150d19e44419c3b153336aa24ad830b9", "patch": "@@ -0,0 +1,272 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for `extern` modules.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![feature(unboxed_closures)]\n+#![feature(link_args)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change function name --------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn change_function_name1(c: i64) -> i32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn change_function_name2(c: i64) -> i32;\n+}\n+\n+\n+\n+// Change parameter name -------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn change_parameter_name(c: i64) -> i32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn change_parameter_name(d: i64) -> i32;\n+}\n+\n+\n+\n+// Change parameter type -------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn change_parameter_type(c: i64) -> i32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn change_parameter_type(c: i32) -> i32;\n+}\n+\n+\n+\n+// Change return type ----------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn change_return_type(c: i32) -> i32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn change_return_type(c: i32) -> i8;\n+}\n+\n+\n+\n+// Add parameter ---------------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn add_parameter(c: i32) -> i32;\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn add_parameter(c: i32, d: i32) -> i32;\n+}\n+\n+\n+\n+// Add return type -------------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn add_return_type(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn add_return_type(c: i32) -> i32;\n+}\n+\n+\n+\n+// Make function variadic ------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn make_function_variadic(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn make_function_variadic(c: i32, ...);\n+}\n+\n+\n+\n+// Change calling convention ---------------------------------------------------\n+#[cfg(cfail1)]\n+extern \"C\" {\n+    pub fn change_calling_convention(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern \"rust-call\" {\n+    pub fn change_calling_convention(c: i32);\n+}\n+\n+\n+\n+// Make function public --------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    fn make_function_public(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn make_function_public(c: i32);\n+}\n+\n+\n+\n+// Add function ----------------------------------------------------------------\n+#[cfg(cfail1)]\n+extern {\n+    pub fn add_function1(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern {\n+    pub fn add_function1(c: i32);\n+    pub fn add_function2();\n+}\n+\n+\n+\n+// Change link-args ------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[link_args = \"-foo -bar\"]\n+extern {\n+    pub fn change_link_args(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[link_args = \"-foo -bar -baz\"]\n+extern {\n+    pub fn change_link_args(c: i32);\n+}\n+\n+\n+\n+// Change link-name ------------------------------------------------------------\n+#[cfg(cfail1)]\n+#[link(name = \"foo\")]\n+extern {\n+    pub fn change_link_name(c: i32);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[link(name = \"bar\")]\n+extern {\n+    pub fn change_link_name(c: i32);\n+}\n+\n+type c_i32 = i32;\n+type c_i64 = i64;\n+\n+// Indirectly change parameter type --------------------------------------------\n+mod indirectly_change_parameter_type {\n+    #[cfg(cfail1)]\n+    use super::c_i32 as c_int;\n+    #[cfg(not(cfail1))]\n+    use super::c_i64 as c_int;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    extern {\n+        pub fn indirectly_change_parameter_type(c: c_int);\n+    }\n+}\n+\n+\n+\n+// Indirectly change return type --------------------------------------------\n+mod indirectly_change_return_type {\n+    #[cfg(cfail1)]\n+    use super::c_i32 as c_int;\n+    #[cfg(not(cfail1))]\n+    use super::c_i64 as c_int;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    extern {\n+        pub fn indirectly_change_return_type() -> c_int;\n+    }\n+}"}]}