{"sha": "63d1a721f187faf007e8540e4d5b6b2e494231eb", "node_id": "C_kwDOAAsO6NoAKDYzZDFhNzIxZjE4N2ZhZjAwN2U4NTQwZTRkNWI2YjJlNDk0MjMxZWI", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-10-23T09:47:20Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-10-24T05:14:10Z"}, "message": "rustdoc: don't mark Box<T> as Iterator, Read, etc\n\nBecause Box<T> has pass-through implementations, rustdoc was giving it the\n\"Notable Traits\" treatment for Iterator, Read, Write, and Future, even when the\ntype of T was unspecified.\n\nPin had the same problem, but just for Future.", "tree": {"sha": "a3d447e73c0ea5550577d8ae5ca2e98351f7f3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d447e73c0ea5550577d8ae5ca2e98351f7f3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63d1a721f187faf007e8540e4d5b6b2e494231eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63d1a721f187faf007e8540e4d5b6b2e494231eb", "html_url": "https://github.com/rust-lang/rust/commit/63d1a721f187faf007e8540e4d5b6b2e494231eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63d1a721f187faf007e8540e4d5b6b2e494231eb/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "html_url": "https://github.com/rust-lang/rust/commit/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "b2fac7228272a0055d30deca512059d853e4568b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63d1a721f187faf007e8540e4d5b6b2e494231eb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d1a721f187faf007e8540e4d5b6b2e494231eb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=63d1a721f187faf007e8540e4d5b6b2e494231eb", "patch": "@@ -1276,6 +1276,15 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n \n     if let Some((did, ty)) = decl.output.as_return().and_then(|t| Some((t.def_id(cx.cache())?, t)))\n     {\n+        // Box has pass-through impls for Read, Write, Iterator, and Future when the\n+        // boxed type implements one of those. We don't want to treat every Box return\n+        // as being notably an Iterator (etc), though, so we exempt it. Pin has the same\n+        // issue, with a pass-through impl for Future.\n+        if Some(did) == cx.tcx().lang_items().owned_box()\n+            || Some(did) == cx.tcx().lang_items().pin_type()\n+        {\n+            return \"\".to_string();\n+        }\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();"}, {"sha": "3fb00c7db84115b3661fd87b6ac4a3e5f9305f7b", "filename": "src/test/rustdoc/doc-notable_trait_box_is_not_an_iterator.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63d1a721f187faf007e8540e4d5b6b2e494231eb/src%2Ftest%2Frustdoc%2Fdoc-notable_trait_box_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d1a721f187faf007e8540e4d5b6b2e494231eb/src%2Ftest%2Frustdoc%2Fdoc-notable_trait_box_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait_box_is_not_an_iterator.rs?ref=63d1a721f187faf007e8540e4d5b6b2e494231eb", "patch": "@@ -0,0 +1,38 @@\n+#![feature(doc_notable_trait)]\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![no_core]\n+#[lang = \"owned_box\"]\n+pub struct Box<T>;\n+\n+impl<T> Box<T> {\n+    pub fn new(x: T) -> Box<T> {\n+        Box\n+    }\n+}\n+\n+#[doc(notable_trait)]\n+pub trait FakeIterator {}\n+\n+impl<I: FakeIterator> FakeIterator for Box<I> {}\n+\n+#[lang = \"pin\"]\n+pub struct Pin<T>;\n+\n+impl<T> Pin<T> {\n+    pub fn new(x: T) -> Pin<T> {\n+        Pin\n+    }\n+}\n+\n+impl<I: FakeIterator> FakeIterator for Pin<I> {}\n+\n+// @!has doc_notable_trait_box_is_not_an_iterator/fn.foo.html '//*' 'Notable'\n+pub fn foo<T>(x: T) -> Box<T> {\n+    Box::new(x)\n+}\n+\n+// @!has doc_notable_trait_box_is_not_an_iterator/fn.bar.html '//*' 'Notable'\n+pub fn bar<T>(x: T) -> Pin<T> {\n+    Pin::new(x)\n+}"}]}