{"sha": "25d4fbe9dae2b875ebfa81a28e10796475def74b", "node_id": "C_kwDOAAsO6NoAKDI1ZDRmYmU5ZGFlMmI4NzVlYmZhODFhMjhlMTA3OTY0NzVkZWY3NGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-10T08:23:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-10T08:23:46Z"}, "message": "Re-try build script building with --keep-going", "tree": {"sha": "2d1c385786ff2fe0c5aef0396a0dd0a978ad88fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1c385786ff2fe0c5aef0396a0dd0a978ad88fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25d4fbe9dae2b875ebfa81a28e10796475def74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25d4fbe9dae2b875ebfa81a28e10796475def74b", "html_url": "https://github.com/rust-lang/rust/commit/25d4fbe9dae2b875ebfa81a28e10796475def74b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25d4fbe9dae2b875ebfa81a28e10796475def74b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "950de7c3c355398a9c15812b74376e252cb176db", "url": "https://api.github.com/repos/rust-lang/rust/commits/950de7c3c355398a9c15812b74376e252cb176db", "html_url": "https://github.com/rust-lang/rust/commit/950de7c3c355398a9c15812b74376e252cb176db"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "84e772d1684a18e8c47bf85d56cd164fd60f416d", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/25d4fbe9dae2b875ebfa81a28e10796475def74b/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d4fbe9dae2b875ebfa81a28e10796475def74b/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=25d4fbe9dae2b875ebfa81a28e10796475def74b", "patch": "@@ -39,7 +39,7 @@ pub(crate) struct BuildScriptOutput {\n }\n \n impl WorkspaceBuildScripts {\n-    fn build_command(config: &CargoConfig, toolchain: &Option<Version>) -> Command {\n+    fn build_command(config: &CargoConfig) -> Command {\n         if let Some([program, args @ ..]) = config.run_build_script_command.as_deref() {\n             let mut cmd = Command::new(program);\n             cmd.args(args);\n@@ -71,26 +71,39 @@ impl WorkspaceBuildScripts {\n             }\n         }\n \n+        cmd\n+    }\n+\n+    pub(crate) fn run(\n+        config: &CargoConfig,\n+        workspace: &CargoWorkspace,\n+        progress: &dyn Fn(String),\n+        toolchain: &Option<Version>,\n+    ) -> io::Result<WorkspaceBuildScripts> {\n         const RUST_1_62: Version = Version::new(1, 62, 0);\n \n-        match toolchain {\n-            Some(v) if v >= &RUST_1_62 => {\n+        match Self::run_(Self::build_command(config), config, workspace, progress) {\n+            Ok(WorkspaceBuildScripts { error: Some(error), .. })\n+                if toolchain.as_ref().map_or(false, |it| *it >= RUST_1_62) =>\n+            {\n+                // building build scripts failed, attempt to build with --keep-going so\n+                // that we potentially get more build data\n+                let mut cmd = Self::build_command(config);\n                 cmd.args(&[\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n+                let mut res = Self::run_(cmd, config, workspace, progress)?;\n+                res.error = Some(error);\n+                Ok(res)\n             }\n-            _ => (),\n+            res => res,\n         }\n-\n-        cmd\n     }\n \n-    pub(crate) fn run(\n+    fn run_(\n+        mut cmd: Command,\n         config: &CargoConfig,\n         workspace: &CargoWorkspace,\n         progress: &dyn Fn(String),\n-        toolchain: &Option<Version>,\n     ) -> io::Result<WorkspaceBuildScripts> {\n-        let mut cmd = Self::build_command(config, toolchain);\n-\n         if config.wrap_rustc_in_build_scripts {\n             // Setup RUSTC_WRAPPER to point to `rust-analyzer` binary itself. We use\n             // that to compile only proc macros and build scripts during the initial"}]}