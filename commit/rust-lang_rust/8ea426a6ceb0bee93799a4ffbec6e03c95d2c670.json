{"sha": "8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTQyNmE2Y2ViMGJlZTkzNzk5YTRmZmJlYzZlMDNjOTVkMmM2NzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-30T20:52:47Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-30T21:33:24Z"}, "message": "Update E0370 to new error format", "tree": {"sha": "857400a254f655b82ff1add5a2f9dae85ba928bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857400a254f655b82ff1add5a2f9dae85ba928bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "html_url": "https://github.com/rust-lang/rust/commit/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d5e81d80d1a52a2bc7233dc570e60cd9ae74b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5e81d80d1a52a2bc7233dc570e60cd9ae74b91", "html_url": "https://github.com/rust-lang/rust/commit/4d5e81d80d1a52a2bc7233dc570e60cd9ae74b91"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "cdd7bef2c7fb92c6325194f76f297044dee47dea", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "patch": "@@ -1164,10 +1164,12 @@ fn convert_enum_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         } else if let Some(disr) = repr_type.disr_incr(tcx, prev_disr) {\n             Some(disr)\n         } else {\n-            span_err!(tcx.sess, v.span, E0370,\n-                      \"enum discriminant overflowed on value after {}; \\\n-                       set explicitly via {} = {} if that is desired outcome\",\n-                      prev_disr.unwrap(), v.node.name, wrapped_disr);\n+            struct_span_err!(tcx.sess, v.span, E0370,\n+                             \"enum discriminant overflowed\")\n+                .span_label(v.span, &format!(\"overflowed on value after {}\", prev_disr.unwrap()))\n+                .note(&format!(\"explicitly set `{} = {}` if that is desired outcome\",\n+                               v.node.name, wrapped_disr))\n+                .emit();\n             None\n         }.unwrap_or(wrapped_disr);\n         prev_disr = Some(disr);"}, {"sha": "213683b5808838f2fdd50d497fa0bbd13fbd4a9d", "filename": "src/test/compile-fail/discrim-overflow-2.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs?ref=8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "patch": "@@ -24,7 +24,9 @@ fn f_i8() {\n     enum A {\n         Ok = i8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 127i8; set explicitly via OhNo = -128i8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 127i8\n+              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n }\n \n@@ -33,7 +35,9 @@ fn f_u8() {\n     enum A {\n         Ok = u8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 255u8; set explicitly via OhNo = 0u8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 255u8\n+              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n }\n \n@@ -42,7 +46,9 @@ fn f_i16() {\n     enum A {\n         Ok = i16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 32767i16\n+              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n }\n \n@@ -51,7 +57,9 @@ fn f_u16() {\n     enum A {\n         Ok = u16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 65535u16\n+              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n }\n \n@@ -60,7 +68,9 @@ fn f_i32() {\n     enum A {\n         Ok = i32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 2147483647i32\n+              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n }\n \n@@ -69,7 +79,9 @@ fn f_u32() {\n     enum A {\n         Ok = u32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 4294967295u32\n+              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n }\n \n@@ -78,7 +90,9 @@ fn f_i64() {\n     enum A {\n         Ok = i64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 9223372036854775807i64\n+              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n }\n \n@@ -87,7 +101,9 @@ fn f_u64() {\n     enum A {\n         Ok = u64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 18446744073709551615u64\n+              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n }\n "}, {"sha": "a3039b8d9573adafb1093d06efc0fb058e4f308c", "filename": "src/test/compile-fail/discrim-overflow.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea426a6ceb0bee93799a4ffbec6e03c95d2c670/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs?ref=8ea426a6ceb0bee93799a4ffbec6e03c95d2c670", "patch": "@@ -22,7 +22,9 @@ fn f_i8() {\n     enum A {\n         Ok = i8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 127i8; set explicitly via OhNo = -128i8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 127i8\n+              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -33,7 +35,9 @@ fn f_u8() {\n     enum A {\n         Ok = u8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 255u8; set explicitly via OhNo = 0u8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 255u8\n+              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -44,7 +48,9 @@ fn f_i16() {\n     enum A {\n         Ok = i16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 32767i16\n+              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -55,7 +61,9 @@ fn f_u16() {\n     enum A {\n         Ok = u16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 65535u16\n+              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -66,7 +74,9 @@ fn f_i32() {\n     enum A {\n         Ok = i32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 2147483647i32\n+              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -77,7 +87,9 @@ fn f_u32() {\n     enum A {\n         Ok = u32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 4294967295u32\n+              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -88,7 +100,9 @@ fn f_i64() {\n     enum A {\n         Ok = i64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 9223372036854775807i64\n+              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -99,7 +113,9 @@ fn f_u64() {\n     enum A {\n         Ok = u64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 18446744073709551615u64\n+              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n \n     let x = A::Ok;"}]}