{"sha": "9a7e26156259560ac546a35dd285abe44728b1f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhN2UyNjE1NjI1OTU2MGFjNTQ2YTM1ZGQyODVhYmU0NDcyOGIxZjU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-07T16:49:41Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-09T16:55:37Z"}, "message": "core: add vec.partition and vec.partitioned", "tree": {"sha": "5d1a368f961288cca6bc31261c6e23957a8c09d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1a368f961288cca6bc31261c6e23957a8c09d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7e26156259560ac546a35dd285abe44728b1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7e26156259560ac546a35dd285abe44728b1f5", "html_url": "https://github.com/rust-lang/rust/commit/9a7e26156259560ac546a35dd285abe44728b1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7e26156259560ac546a35dd285abe44728b1f5/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55787d00905dced9dd5fd9c5b8c92928a8c2eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55787d00905dced9dd5fd9c5b8c92928a8c2eaa", "html_url": "https://github.com/rust-lang/rust/commit/c55787d00905dced9dd5fd9c5b8c92928a8c2eaa"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "ab0b5049f8ea0afd73eadcf32921c753ee00d6ad", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9a7e26156259560ac546a35dd285abe44728b1f5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7e26156259560ac546a35dd285abe44728b1f5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=9a7e26156259560ac546a35dd285abe44728b1f5", "patch": "@@ -405,6 +405,46 @@ pub fn rsplitn<T: Copy>(v: &[T], n: uint, f: fn(t: &T) -> bool) -> ~[~[T]] {\n     result\n }\n \n+/**\n+ * Partitions a vector into two new vectors: those that satisfies the\n+ * predicate, and those that do not.\n+ */\n+pub fn partition<T>(v: ~[T], f: fn(&T) -> bool) -> (~[T], ~[T]) {\n+    let mut lefts  = ~[];\n+    let mut rights = ~[];\n+\n+    do v.consume |_, elt| {\n+        if f(&elt) {\n+            lefts.push(elt);\n+        } else {\n+            rights.push(elt);\n+        }\n+    }\n+\n+    (lefts, rights)\n+}\n+\n+/**\n+ * Partitions a vector into two new vectors: those that satisfies the\n+ * predicate, and those that do not.\n+ */\n+pub pure fn partitioned<T: Copy>(v: &[T], f: fn(&T) -> bool) -> (~[T], ~[T]) {\n+    let mut lefts  = ~[];\n+    let mut rights = ~[];\n+\n+    for each(v) |elt| {\n+        unsafe {\n+            if f(elt) {\n+                lefts.push(*elt);\n+            } else {\n+                rights.push(*elt);\n+            }\n+        }\n+    }\n+\n+    (lefts, rights)\n+}\n+\n // Mutators\n \n /// Removes the first element from a vector and return it\n@@ -1664,7 +1704,6 @@ impl<T> &[T]: ImmutableVector<T> {\n     pure fn filter_map<U: Copy>(&self, f: fn(t: &T) -> Option<U>) -> ~[U] {\n         filter_map(*self, f)\n     }\n-\n }\n \n pub trait ImmutableEqVector<T: Eq> {\n@@ -1714,8 +1753,8 @@ impl<T: Eq> &[T]: ImmutableEqVector<T> {\n \n pub trait ImmutableCopyableVector<T> {\n     pure fn filter(&self, f: fn(t: &T) -> bool) -> ~[T];\n-\n     pure fn rfind(&self, f: fn(t: &T) -> bool) -> Option<T>;\n+    pure fn partitioned(&self, f: fn(&T) -> bool) -> (~[T], ~[T]);\n }\n \n /// Extension methods for vectors\n@@ -1743,6 +1782,15 @@ impl<T: Copy> &[T]: ImmutableCopyableVector<T> {\n     pure fn rfind(&self, f: fn(t: &T) -> bool) -> Option<T> {\n         rfind(*self, f)\n     }\n+\n+    /**\n+     * Partitions the vector into those that satisfies the predicate, and\n+     * those that do not.\n+     */\n+    #[inline]\n+    pure fn partitioned(&self, f: fn(&T) -> bool) -> (~[T], ~[T]) {\n+        partitioned(*self, f)\n+    }\n }\n \n pub trait OwnedVector<T> {\n@@ -1757,6 +1805,7 @@ pub trait OwnedVector<T> {\n     fn truncate(&mut self, newlen: uint);\n     fn retain(&mut self, f: pure fn(t: &T) -> bool);\n     fn consume(self, f: fn(uint, v: T));\n+    fn partition(self, f: pure fn(&T) -> bool) -> (~[T], ~[T]);\n }\n \n impl<T> ~[T]: OwnedVector<T> {\n@@ -1814,6 +1863,15 @@ impl<T> ~[T]: OwnedVector<T> {\n     fn consume(self, f: fn(uint, v: T)) {\n         consume(self, f)\n     }\n+\n+    /**\n+     * Partitions the vector into those that satisfies the predicate, and\n+     * those that do not.\n+     */\n+    #[inline]\n+    fn partition(self, f: fn(&T) -> bool) -> (~[T], ~[T]) {\n+        partition(self, f)\n+    }\n }\n \n pub trait OwnedCopyableVector<T: Copy> {\n@@ -3105,6 +3163,25 @@ mod tests {\n                        ~[~[1, 2, 3, 4], ~[5]];\n     }\n \n+    #[test]\n+    fn test_partition() {\n+        assert (~[]).partition(|x: &int| *x < 3) == (~[], ~[]);\n+        assert (~[1, 2, 3]).partition(|x: &int| *x < 4) == (~[1, 2, 3], ~[]);\n+        assert (~[1, 2, 3]).partition(|x: &int| *x < 2) == (~[1], ~[2, 3]);\n+        assert (~[1, 2, 3]).partition(|x: &int| *x < 0) == (~[], ~[1, 2, 3]);\n+    }\n+\n+    #[test]\n+    fn test_partitioned() {\n+        assert (~[]).partitioned(|x: &int| *x < 3) == (~[], ~[]);\n+        assert (~[1, 2, 3]).partitioned(|x: &int| *x < 4) ==\n+               (~[1, 2, 3], ~[]);\n+        assert (~[1, 2, 3]).partitioned(|x: &int| *x < 2) ==\n+               (~[1], ~[2, 3]);\n+        assert (~[1, 2, 3]).partitioned(|x: &int| *x < 0) ==\n+               (~[], ~[1, 2, 3]);\n+    }\n+\n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]"}]}