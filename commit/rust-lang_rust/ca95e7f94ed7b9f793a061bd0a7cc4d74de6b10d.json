{"sha": "ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTVlN2Y5NGVkN2I5Zjc5M2EwNjFiZDBhN2NjNGQ3NGRlNmIxMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T10:51:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T10:51:32Z"}, "message": "auto merge of #6345 : seanmoon/rust/fix-typos, r=sanxiyn\n\nHi there,\r\n\r\nReally enjoying Rust. Noticed a few typos so I searched around for a few more--here's some fixes.\r\n\r\nRan `make check` and got `summary of 24 test runs: 4868 passed; 0 failed; 330 ignored`.\r\n\r\nThanks!\r\n\r\nSean", "tree": {"sha": "6420f0a5c8a559862c9b8272f9508ee95e3e4164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6420f0a5c8a559862c9b8272f9508ee95e3e4164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "html_url": "https://github.com/rust-lang/rust/commit/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5617916726186290710dade90057683904a5f215", "url": "https://api.github.com/repos/rust-lang/rust/commits/5617916726186290710dade90057683904a5f215", "html_url": "https://github.com/rust-lang/rust/commit/5617916726186290710dade90057683904a5f215"}, {"sha": "bd4ee7c7d2f00e8c41824fac7e5d155dff40c25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4ee7c7d2f00e8c41824fac7e5d155dff40c25f", "html_url": "https://github.com/rust-lang/rust/commit/bd4ee7c7d2f00e8c41824fac7e5d155dff40c25f"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "33f6dd36161a1569502ec7e2c16b5a2f17cab7e4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -764,7 +764,7 @@ fn _arm_exec_compiled_test(config: config, props: TestProps,\n     logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n \n     // adb shell dose not forward stdout and stderr of internal result\n-    // to stdout and stderr seperately but to stdout only\n+    // to stdout and stderr separately but to stdout only\n     let mut newargs_out = ~[];\n     let mut newargs_err = ~[];\n     let subargs = args.args;"}, {"sha": "a3981dd84913ba1593e4c7c828e0f509b36b5539", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -52,7 +52,7 @@ pub fn capacity<T>(v: @[T]) -> uint {\n  * # Arguments\n  *\n  * * size - An initial size of the vector to reserve\n- * * builder - A function that will construct the vector. It recieves\n+ * * builder - A function that will construct the vector. It receives\n  *             as an argument a function that will push an element\n  *             onto the vector being constructed.\n  */\n@@ -70,7 +70,7 @@ pub fn build_sized<A>(size: uint, builder: &fn(push: &fn(v: A))) -> @[A] {\n  *\n  * # Arguments\n  *\n- * * builder - A function that will construct the vector. It recieves\n+ * * builder - A function that will construct the vector. It receives\n  *             as an argument a function that will push an element\n  *             onto the vector being constructed.\n  */\n@@ -87,7 +87,7 @@ pub fn build<A>(builder: &fn(push: &fn(v: A))) -> @[A] {\n  * # Arguments\n  *\n  * * size - An option, maybe containing initial size of the vector to reserve\n- * * builder - A function that will construct the vector. It recieves\n+ * * builder - A function that will construct the vector. It receives\n  *             as an argument a function that will push an element\n  *             onto the vector being constructed.\n  */"}, {"sha": "bb025b0ccb6d5d862dc3ba76f6cf454b5a478d1b", "filename": "src/libcore/rt/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fextensions.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -11,7 +11,7 @@\n //! Utility mixins that apply to all Readers and Writers\n \n // XXX: Not sure how this should be structured\n-// XXX: Iteration should probably be considered seperately\n+// XXX: Iteration should probably be considered separately\n \n pub trait ReaderUtil {\n "}, {"sha": "97628f38a7b81b3b2e85ecc730359855d118f4e8", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -133,7 +133,7 @@ unsafe fn get_newsched_local_map(local: *mut LocalStorage) -> TaskLocalMap {\n \n unsafe fn key_to_key_value<T: 'static>(key: LocalDataKey<T>) -> *libc::c_void {\n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n-    // Use reintepret_cast -- transmute would leak (forget) the closure.\n+    // Use reinterpret_cast -- transmute would leak (forget) the closure.\n     let pair: (*libc::c_void, *libc::c_void) = cast::transmute_copy(&key);\n     pair.first()\n }"}, {"sha": "bf8f5b4ce18a8bafc4a14c656de285e484a006fb", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -219,7 +219,7 @@ pub fn build<A>(builder: &fn(push: &fn(v: A))) -> ~[A] {\n  * # Arguments\n  *\n  * * size - An option, maybe containing initial size of the vector to reserve\n- * * builder - A function that will construct the vector. It recieves\n+ * * builder - A function that will construct the vector. It receives\n  *             as an argument a function that will push an element\n  *             onto the vector being constructed.\n  */"}, {"sha": "038c5e0369b8c3e83df4d8eb35520a8e2ea2b93c", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -87,7 +87,7 @@ pub fn nonzero_llsize_of(cx: @CrateContext, t: TypeRef) -> ValueRef {\n }\n \n // Returns the preferred alignment of the given type for the current target.\n-// The preffered alignment may be larger than the alignment used when\n+// The preferred alignment may be larger than the alignment used when\n // packing the type into structs. This will be used for things like\n // allocations inside a stack frame, which LLVM has a free hand in.\n pub fn llalign_of_pref(cx: @CrateContext, t: TypeRef) -> uint {\n@@ -96,7 +96,7 @@ pub fn llalign_of_pref(cx: @CrateContext, t: TypeRef) -> uint {\n     }\n }\n \n-// Returns the minimum alignment of a type required by the plattform.\n+// Returns the minimum alignment of a type required by the platform.\n // This is the alignment that will be used for struct fields, arrays,\n // and similar ABI-mandated things.\n pub fn llalign_of_min(cx: @CrateContext, t: TypeRef) -> uint {"}, {"sha": "a744751ea917c6d5b846558b3ffa1ccef0dbe990", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -31,7 +31,7 @@ use syntax::print::pprust::expr_to_str;\n use syntax::visit;\n \n // vtable resolution looks for places where trait bounds are\n-// subsituted in and figures out which vtable is used. There is some\n+// substituted in and figures out which vtable is used. There is some\n // extra complication thrown in to support early \"opportunistic\"\n // vtable resolution. This is a hacky mechanism that is invoked while\n // typechecking function calls (after typechecking non-closure"}, {"sha": "fd9fba8c1d753c12d96a604f5e4fe083499b16de", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -20,7 +20,7 @@\n // calling the destructors on them.\n // One subtle point that needs to be addressed is how to handle\n // failures while running the user provided initializer function. It\n-// is important to not run the destructor on uninitalized objects, but\n+// is important to not run the destructor on uninitialized objects, but\n // how to detect them is somewhat subtle. Since alloc() can be invoked\n // recursively, it is not sufficient to simply exclude the most recent\n // object. To solve this without requiring extra space, we use the low"}, {"sha": "b712d6840ea7eb44609ac294833471e65ec532a3", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -15,7 +15,7 @@ or transformed to and from, byte vectors.\n \n The `FlatPort` and `FlatChan` types implement the generic channel and\n port interface for arbitrary types and transport strategies. It can\n-particularly be used to send and recieve serializable types over I/O\n+particularly be used to send and receive serializable types over I/O\n streams.\n \n `FlatPort` and `FlatChan` implement the same comm traits as pipe-based\n@@ -55,7 +55,7 @@ use core::sys::size_of;\n use core::vec;\n \n /**\n-A FlatPort, consisting of a `BytePort` that recieves byte vectors,\n+A FlatPort, consisting of a `BytePort` that receives byte vectors,\n and an `Unflattener` that converts the bytes to a value.\n \n Create using the constructors in the `serial` and `pod` modules.\n@@ -821,7 +821,7 @@ mod test {\n             }\n         }\n \n-        // Reciever task\n+        // Receiver task\n         do task::spawn || {\n             // Wait for a connection\n             let (conn, res_chan) = accept_port.recv();\n@@ -840,7 +840,7 @@ mod test {\n \n             for int::range(0, 10) |i| {\n                 let j = port.recv();\n-                debug!(\"receieved %?\", j);\n+                debug!(\"received %?\", j);\n                 assert!(i == j);\n             }\n "}, {"sha": "f684ebe8a3cf5052ded78bc5e4a1fa78ecc7ea00", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -623,7 +623,7 @@ pub mod groups {\n                 desc_sep\n             };\n \n-            // Normalize desc to contain words seperated by one space character\n+            // Normalize desc to contain words separated by one space character\n             let mut desc_normalized_whitespace = ~\"\";\n             for str::each_word(desc) |word| {\n                 desc_normalized_whitespace.push_str(word);"}, {"sha": "9a0eb6d85dbf115f1631b281e5693f409cf4bc48", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -420,7 +420,7 @@ mod test {\n         if result::is_err(&ga_result) {\n             fail!(~\"got err result from net::ip::get_addr();\")\n         }\n-        // note really sure how to realiably test/assert\n+        // note really sure how to reliably test/assert\n         // this.. mostly just wanting to see it work, atm.\n         let results = result::unwrap(ga_result);\n         debug!(\"test_get_addr: Number of results for %s: %?\","}, {"sha": "9931b667f8f7528c97c133f20daf0d2af675af4c", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -565,7 +565,7 @@ pub mod node {\n      *\n      * # Fields\n      *\n-     * * byte_offset = The number of bytes skippen in `content`\n+     * * byte_offset = The number of bytes skipped in `content`\n      * * byte_len - The number of bytes of `content` to use\n      * * char_len - The number of chars in the leaf.\n      * * content - Contents of the leaf."}, {"sha": "3b527efabd3e448cb4fd7d36a0b7d2da7715c4bf", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -32,7 +32,7 @@ pub mod rustrt {\n }\n \n // The name of a test. By convention this follows the rules for rust\n-// paths; i.e. it should be a series of identifiers seperated by double\n+// paths; i.e. it should be a series of identifiers separated by double\n // colons. This way if some test runner wants to arrange the tests\n // hierarchically it may.\n "}, {"sha": "97df64d526617d9c3a31d19556be1b35708eb4f3", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -227,6 +227,6 @@ mod test {\n             exit_po.recv();\n         };\n         debug!(~\"test_stress_gl_uv_global_loop_high_level_global_timer\"+\n-            ~\" exiting sucessfully!\");\n+            ~\" exiting successfully!\");\n     }\n }"}, {"sha": "2922f403f34a642e437afee38ca106147f9cbee7", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -243,7 +243,7 @@ fn impl_uv_iotask_async(iotask: &IoTask) {\n     exit_po.recv();\n }\n \n-// this fn documents the bear minimum neccesary to roll your own\n+// this fn documents the bear minimum necessary to roll your own\n // high_level_loop\n #[cfg(test)]\n fn spawn_test_loop(exit_ch: ~Chan<()>) -> IoTask {"}, {"sha": "5cccf2c348dbfc5dac009ad13f2ff56f46497625", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -269,7 +269,7 @@ pub struct sockaddr_in {\n }\n \n // unix size: 28 .. FIXME #1645\n-// stuck with 32 becuse of rust padding structs?\n+// stuck with 32 because of rust padding structs?\n #[cfg(target_arch=\"x86_64\")]\n pub struct sockaddr_in6 {\n     a0: *u8, a1: *u8,\n@@ -286,7 +286,7 @@ pub struct sockaddr_in6 {\n }\n \n // unix size: 28 .. FIXME #1645\n-// stuck with 32 becuse of rust padding structs?\n+// stuck with 32 because of rust padding structs?\n pub type addr_in = addr_in_impl::addr_in;\n #[cfg(unix)]\n pub mod addr_in_impl {\n@@ -1377,7 +1377,7 @@ mod test {\n             let tcp_init_result = tcp_init(test_loop as *libc::c_void,\n                                            tcp_handle_ptr);\n             if (tcp_init_result == 0) {\n-                debug!(~\"sucessful tcp_init_result\");\n+                debug!(~\"successful tcp_init_result\");\n \n                 debug!(~\"building addr...\");\n                 let addr = ip4_addr(ip, port);"}, {"sha": "917d11a0d23bf5844cb92a52c45a9bd70b96ef25", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -697,7 +697,7 @@ fn expand_tts(cx: @ext_ctxt,\n     // compiler (which we don't really want to do) and, in any case, only\n     // pushed the problem a very small step further back: an error\n     // resulting from a parse of the resulting quote is still attributed to\n-    // the site the string literal occured, which was in a source file\n+    // the site the string literal occurred, which was in a source file\n     // _other_ than the one the user has control over. For example, an\n     // error in a quote from the protocol compiler, invoked in user code\n     // using proto! for example, will be attributed to the pipec.rs file in"}, {"sha": "c2b58c9fda732f4446e240528572f98de6848534", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -24,7 +24,7 @@\n  */\n static lock_and_signal _log_lock;\n /**\n- * Indicates whether we are outputing to the console.\n+ * Indicates whether we are outputting to the console.\n  * Protected by _log_lock;\n  */\n static bool _log_to_console = true;"}, {"sha": "4281092f83511e73415ace1b8a8975f92dc1765c", "filename": "src/rt/rust_signal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Frt%2Frust_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Frt%2Frust_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_signal.h?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -11,7 +11,7 @@\n #ifndef RUST_SIGNAL_H\n #define RUST_SIGNAL_H\n \n-// Just an abstrict class that reperesents something that can be signalled\n+// Just an abstract class that represents something that can be signalled\n class rust_signal {\n public:\n     virtual void signal() = 0;"}, {"sha": "fcb31b7b7e039b66b45bf5b0954f460d8bee3b7e", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-pretty -- comments are infaithfully preserved\n+// xfail-pretty -- comments are unfaithfully preserved\n \n #[allow(unused_variable)];\n #[allow(dead_assignment)];"}, {"sha": "be2aee5d1b82cbeec2ae7e52778f0cb7e7ea1b3a", "filename": "src/test/compile-fail/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-pretty -- comments are infaithfully preserved\n+// xfail-pretty -- comments are unfaithfully preserved\n \n fn main() {\n     let mut x: Option<int> = None;"}, {"sha": "e329ed4d6710d842586d1d3645b5a6e0d87c1268", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Regresion test for issue #1448 and #1386\n+// Regression test for issue #1448 and #1386\n \n fn main() {\n     debug!(\"%u\", 10i); //~ ERROR mismatched types"}, {"sha": "3a0db4246be62c37dda16ce2ee90abdd7791445c", "filename": "src/test/compile-fail/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Regresion test for issue #4935\n+// Regression test for issue #4935\n \n fn foo(a: uint) {}\n fn main() { foo(5, 6) } //~ ERROR this function takes 1 parameter but 2 parameters were supplied"}, {"sha": "1c668dfc90d4135d1d87dee5765bb463f70ec453", "filename": "src/test/run-fail/too-much-recursion-unwinding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -11,7 +11,7 @@\n // xfail-test leaks\n // error-pattern:ran out of stack\n \n-// Test that the task fails after hiting the recursion limit\n+// Test that the task fails after hitting the recursion limit\n // during unwinding\n \n fn recurse() {"}, {"sha": "cd6226b61c9841a9e62a0f4b08552fcb849f4ad9", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -13,7 +13,7 @@\n \n // xfail-fast This works standalone on windows but not with check-fast.\n // possibly because there is another test that uses this extern fn but gives it\n-// a diferent signature\n+// a different signature\n \n #[deriving(Eq)]\n struct TwoU64s {"}, {"sha": "fb5df6d50e01f88f1812b5732a458893826c1964", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -21,7 +21,7 @@ impl methods for () {\n }\n \n // the position of this function is significant! - if it comes before methods\n-// then it works, if it comes after it then it doesnt!\n+// then it works, if it comes after it then it doesn't!\n fn to_bools(bitv: Storage) -> ~[bool] {\n     vec::from_fn(8, |i| {\n         let w = i / 64;"}, {"sha": "add9ba54aa6aaf58227e8dce3dc181fcabc49328", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=ca95e7f94ed7b9f793a061bd0a7cc4d74de6b10d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Issue #825: Should recheck the loop contition after continuing\n+// Issue #825: Should recheck the loop condition after continuing\n pub fn main() {\n     let mut i = 1;\n     while i > 0 {"}]}