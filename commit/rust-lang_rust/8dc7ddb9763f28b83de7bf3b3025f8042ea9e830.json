{"sha": "8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzdkZGI5NzYzZjI4YjgzZGU3YmYzYjMwMjVmODA0MmVhOWU4MzA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-09T15:00:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-11T15:52:57Z"}, "message": "Persist ThinLTO import data in incr. comp. session directory.", "tree": {"sha": "b320cb3b1eaede7021c3bfc41504608f492dfc78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b320cb3b1eaede7021c3bfc41504608f492dfc78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "html_url": "https://github.com/rust-lang/rust/commit/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "html_url": "https://github.com/rust-lang/rust/commit/9df56ca0eea1a8f5af945df25ce23e276b1d48a7"}], "stats": {"total": 111, "additions": 107, "deletions": 4}, "files": [{"sha": "ef03e76f946822de90eadb6b784ab153d66f0e7d", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "patch": "@@ -27,10 +27,16 @@ use {ModuleCodegen, ModuleLlvm, ModuleKind, ModuleSource};\n use libc;\n \n use std::ffi::{CString, CStr};\n+use std::fs::File;\n+use std::io;\n+use std::mem;\n+use std::path::Path;\n use std::ptr;\n use std::slice;\n use std::sync::Arc;\n \n+pub const THIN_LTO_IMPORTS_INCR_COMP_FILE_NAME: &str = \"thin-lto-imports.bin\";\n+\n pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool {\n     match crate_type {\n         config::CrateTypeExecutable |\n@@ -194,7 +200,7 @@ pub(crate) fn run(cgcx: &CodegenContext,\n         }\n         Lto::Thin |\n         Lto::ThinLocal => {\n-            thin_lto(&diag_handler, modules, upstream_modules, &arr, timeline)\n+            thin_lto(cgcx, &diag_handler, modules, upstream_modules, &arr, timeline)\n         }\n         Lto::No => unreachable!(),\n     }\n@@ -347,7 +353,8 @@ impl Drop for Linker {\n /// calculating the *index* for ThinLTO. This index will then be shared amongst\n /// all of the `LtoModuleCodegen` units returned below and destroyed once\n /// they all go out of scope.\n-fn thin_lto(diag_handler: &Handler,\n+fn thin_lto(cgcx: &CodegenContext,\n+            diag_handler: &Handler,\n             modules: Vec<ModuleCodegen>,\n             serialized_modules: Vec<(SerializedModule, CString)>,\n             symbol_white_list: &[*const libc::c_char],\n@@ -425,6 +432,18 @@ fn thin_lto(diag_handler: &Handler,\n             let msg = format!(\"failed to prepare thin LTO context\");\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n+\n+        // Save the ThinLTO import information for incremental compilation.\n+        if let Some(ref incr_comp_session_dir) = cgcx.incr_comp_session_dir {\n+            let path = incr_comp_session_dir.join(THIN_LTO_IMPORTS_INCR_COMP_FILE_NAME);\n+            let imports = ThinLTOImports::from_thin_lto_data(data);\n+            if let Err(err) = imports.save_to_file(&path) {\n+                let msg = format!(\"Error while writing ThinLTO import data: {}\",\n+                                  err);\n+                return Err(write::llvm_err(&diag_handler, msg));\n+            }\n+        }\n+\n         let data = ThinData(data);\n         info!(\"thin LTO data created\");\n         timeline.record(\"data\");\n@@ -787,6 +806,12 @@ pub struct ThinLTOImports {\n \n impl ThinLTOImports {\n \n+    pub fn new_empty() -> ThinLTOImports {\n+        ThinLTOImports {\n+            imports: FxHashMap(),\n+        }\n+    }\n+\n     /// Load the ThinLTO import map from ThinLTOData.\n     unsafe fn from_thin_lto_data(data: *const llvm::ThinLTOData) -> ThinLTOImports {\n         let raw_data: *const llvm::ThinLTOModuleImports =\n@@ -842,4 +867,58 @@ impl ThinLTOImports {\n             imports\n         }\n     }\n+\n+    pub fn save_to_file(&self, path: &Path) -> io::Result<()> {\n+        use std::io::Write;\n+\n+        let file = File::create(path)?;\n+        let mut writer = io::BufWriter::new(file);\n+\n+        for (importing_module_name, imported_modules) in &self.imports {\n+            writeln!(writer, \"{}\", importing_module_name)?;\n+\n+            for imported_module in imported_modules {\n+                writeln!(writer, \"  {}\", imported_module)?;\n+            }\n+\n+            writeln!(writer)?;\n+        }\n+\n+        Ok(())\n+    }\n+\n+    pub fn load_from_file(path: &Path) -> io::Result<ThinLTOImports> {\n+        use std::io::BufRead;\n+\n+        let mut imports = FxHashMap();\n+        let mut current_module = None;\n+        let mut current_imports = vec![];\n+\n+        let file = File::open(path)?;\n+\n+        for line in io::BufReader::new(file).lines() {\n+            let line = line?;\n+\n+            if line.is_empty() {\n+                let importing_module = current_module\n+                    .take()\n+                    .expect(\"Importing module not set\");\n+\n+                imports.insert(importing_module,\n+                               mem::replace(&mut current_imports, vec![]));\n+            } else if line.starts_with(\" \") {\n+                // This is an imported module\n+                assert_ne!(current_module, None);\n+                current_imports.push(line.trim().to_string());\n+            } else {\n+                // This is the beginning of a new module\n+                assert_eq!(current_module, None);\n+                current_module = Some(line.trim().to_string());\n+            }\n+        }\n+\n+        Ok(ThinLTOImports {\n+            imports\n+        })\n+    }\n }"}, {"sha": "ca4b1fe44ae3c12ecbfaaf4bf33aac96679660ab", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "patch": "@@ -29,7 +29,7 @@ use super::ModuleCodegen;\n use super::ModuleKind;\n \n use abi;\n-use back::link;\n+use back::{link, lto};\n use back::write::{self, OngoingCodegen, create_target_machine};\n use llvm::{ContextRef, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n@@ -1370,6 +1370,27 @@ mod temp_stable_hash_impls {\n     }\n }\n \n+#[allow(unused)]\n+fn load_thin_lto_imports(sess: &Session) -> lto::ThinLTOImports {\n+    let path = rustc_incremental::in_incr_comp_dir_sess(\n+        sess,\n+        lto::THIN_LTO_IMPORTS_INCR_COMP_FILE_NAME\n+    );\n+\n+    if !path.exists() {\n+        return lto::ThinLTOImports::new_empty();\n+    }\n+\n+    match lto::ThinLTOImports::load_from_file(&path) {\n+        Ok(imports) => imports,\n+        Err(e) => {\n+            let msg = format!(\"Error while trying to load ThinLTO import data \\\n+                               for incremental compilation: {}\", e);\n+            sess.fatal(&msg)\n+        }\n+    }\n+}\n+\n pub fn define_custom_section(cx: &CodegenCx, def_id: DefId) {\n     use rustc::mir::interpret::GlobalId;\n \n@@ -1408,3 +1429,4 @@ pub fn define_custom_section(cx: &CodegenCx, def_id: DefId) {\n         );\n     }\n }\n+"}, {"sha": "a1d9f02f458fb9c081974d746cfbcc7017606aad", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "patch": "@@ -89,7 +89,7 @@ mod back {\n     mod command;\n     pub mod linker;\n     pub mod link;\n-    mod lto;\n+    pub mod lto;\n     pub mod symbol_export;\n     pub mod write;\n     mod rpath;"}, {"sha": "cc560ed4580d62ef959554b74920f5a1130937af", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "patch": "@@ -42,6 +42,7 @@ pub use persist::copy_cgu_workproducts_to_incr_comp_cache_dir;\n pub use persist::save_dep_graph;\n pub use persist::save_work_product_index;\n pub use persist::in_incr_comp_dir;\n+pub use persist::in_incr_comp_dir_sess;\n pub use persist::prepare_session_directory;\n pub use persist::finalize_session_directory;\n pub use persist::delete_workproduct_files;"}, {"sha": "17d36ba3fa7f4bbbd2051ae78b26fcce1e62df99", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc7ddb9763f28b83de7bf3b3025f8042ea9e830/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=8dc7ddb9763f28b83de7bf3b3025f8042ea9e830", "patch": "@@ -23,6 +23,7 @@ mod file_format;\n pub use self::fs::finalize_session_directory;\n pub use self::fs::garbage_collect_session_directories;\n pub use self::fs::in_incr_comp_dir;\n+pub use self::fs::in_incr_comp_dir_sess;\n pub use self::fs::prepare_session_directory;\n pub use self::load::dep_graph_tcx_init;\n pub use self::load::load_dep_graph;"}]}