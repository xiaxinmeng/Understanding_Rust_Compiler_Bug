{"sha": "83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjZkMGE5M2Y4MTU5ZmUxOGI0YTljY2ZhZjM5NWEwZmJhYmYwN2M=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T20:57:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T20:57:43Z"}, "message": "Rollup merge of #73728 - oli-obk:const_prop_cleanup, r=wesleywiser\n\nDocument some invariants correctly/more\n\nr? @wesleywiser", "tree": {"sha": "2397c79b928cf316df830bf377fdedd524a7115f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2397c79b928cf316df830bf377fdedd524a7115f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9mFHCRBK7hj4Ov3rIwAAdHIIAHix5VaA6WeXW51L8uHbAIk3\nqMDkRrNGEDwsvr2bLXOXd+tYXcpTQC+oznlrQFdm5ILDaoFTmdfUqHS7BBLblhUV\nMGYORPxF/n948d0bs3GBSJs7+EggTxhWafNi5FJVmI+DAtrbxHtPY7e3Zpks4Mo2\nxJ67Bfw/B+6s1MCCcW2dA35Hb6t/ySfJhofos6QHpaS0RlsKP+5Ckvsd4zalSV+G\nL2TMAB1XQxFRDqh1dibHEKNrdHZKRg0qEMk5FEymx1Wn5CYZKHOujpvERPdhx7dc\nQm35Os+tmQmtSRSeGJbmk0VxcnUyC7pQh1Fl+WAE0/qYi0lxybaieZf6PAhqlo4=\n=amcL\n-----END PGP SIGNATURE-----\n", "payload": "tree 2397c79b928cf316df830bf377fdedd524a7115f\nparent bc10bb02f5a763ffeea906c48f90114e4bfab625\nparent 1a355a21ebbe70ebfa2856dee2becc18d9ab3b13\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593205063 -0700\ncommitter GitHub <noreply@github.com> 1593205063 -0700\n\nRollup merge of #73728 - oli-obk:const_prop_cleanup, r=wesleywiser\n\nDocument some invariants correctly/more\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c", "html_url": "https://github.com/rust-lang/rust/commit/83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc10bb02f5a763ffeea906c48f90114e4bfab625", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc10bb02f5a763ffeea906c48f90114e4bfab625", "html_url": "https://github.com/rust-lang/rust/commit/bc10bb02f5a763ffeea906c48f90114e4bfab625"}, {"sha": "1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "html_url": "https://github.com/rust-lang/rust/commit/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "e1c5a4f5b18852ef01196f73db3abcf9818df95c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=83f6d0a93f8159fe18b4a9ccfaf395a0fbabf07c", "patch": "@@ -350,14 +350,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n-        let op = self.ecx.eval_place_to_op(place, None).ok();\n+        let op = match self.ecx.eval_place_to_op(place, None) {\n+            Ok(op) => op,\n+            Err(e) => {\n+                trace!(\"get_const failed: {}\", e);\n+                return None;\n+            }\n+        };\n \n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n-        match op.map(|ret| self.ecx.try_read_immediate(ret)) {\n-            Some(Ok(Ok(imm))) => Some(imm.into()),\n+        Some(match self.ecx.try_read_immediate(op) {\n+            Ok(Ok(imm)) => imm.into(),\n             _ => op,\n-        }\n+        })\n     }\n \n     /// Remove `local` from the pool of `Locals`. Allows writing to them,\n@@ -872,8 +878,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n                 let can_const_prop = self.can_const_prop[place.local];\n                 if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                    // This will return None for variables that are from other blocks,\n-                    // so it should be okay to propagate from here on down.\n+                    // This will return None if the above `const_prop` invocation only \"wrote\" a\n+                    // type whose creation requires no write. E.g. a generator whose initial state\n+                    // consists solely of uninitialized memory (so it doesn't capture any locals).\n                     if let Some(value) = self.get_const(place) {\n                         if self.should_const_prop(value) {\n                             trace!(\"replacing {:?} with {:?}\", rval, value);"}]}