{"sha": "f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMDJkZTdjOGIyZjU5YmNkYzhmMjdkZmU0MmE5NDcyNWM5MWZkMzY=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-13T19:59:17Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-13T19:59:17Z"}, "message": "Add mul_add", "tree": {"sha": "cea2ddd8fbc42b50ef126ec0705e22870b5e3c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea2ddd8fbc42b50ef126ec0705e22870b5e3c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "html_url": "https://github.com/rust-lang/rust/commit/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e6262ce4ad8efb8d0addd461fdf9d25bea9538", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e6262ce4ad8efb8d0addd461fdf9d25bea9538", "html_url": "https://github.com/rust-lang/rust/commit/74e6262ce4ad8efb8d0addd461fdf9d25bea9538"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "3983beb82ecfa9a2e67f9d516d566aa6da62a12a", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "patch": "@@ -49,6 +49,9 @@ extern \"platform-intrinsic\" {\n     /// fsqrt\n     pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n \n+    /// fma\n+    pub(crate) fn simd_fma<T>(x: T, y: T, z: T) -> T;\n+\n     pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_ne<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_lt<T, U>(x: T, y: T) -> U;"}, {"sha": "4f0888f29f96441cddbd5e0b34c4a4ab60d96216", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "patch": "@@ -36,6 +36,18 @@ macro_rules! impl_float_vector {\n                 unsafe { crate::intrinsics::simd_fabs(self) }\n             }\n \n+            /// Fused multiply-add.  Computes `(self * a) + b` with only one rounding error,\n+            /// yielding a more accurate result than an unfused multiply-add.\n+            ///\n+            /// Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n+            /// architecture has a dedicated `fma` CPU instruction.  However, this is not always\n+            /// true, and will be heavily dependent on designing algorithms with specific target\n+            /// hardware in mind.\n+            #[inline]\n+            pub fn mul_add(self, a: Self, b: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_fma(self, a, b) }\n+            }\n+\n             /// Produces a vector where every lane has the square root value\n             /// of the equivalently-indexed lane in `self`\n             #[inline]"}, {"sha": "4057f33d4470332f5c70e6de556e1806c0fa181d", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "patch": "@@ -435,6 +435,14 @@ macro_rules! impl_float_tests {\n                     )\n                 }\n \n+                fn mul_add<const LANES: usize>() {\n+                    test_helpers::test_ternary_elementwise(\n+                        &Vector::<LANES>::mul_add,\n+                        &Scalar::mul_add,\n+                        &|_, _, _| true,\n+                    )\n+                }\n+\n                 fn sqrt<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n                         &Vector::<LANES>::sqrt,"}, {"sha": "4f2380b8e5ba3aec14c6cb88067d054b4bad2e44", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f102de7c8b2f59bcdc8f27dfe42a94725c91fd36/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=f102de7c8b2f59bcdc8f27dfe42a94725c91fd36", "patch": "@@ -278,6 +278,47 @@ pub fn test_binary_scalar_lhs_elementwise<\n     });\n }\n \n+/// Test a ternary vector function against a ternary scalar function, applied elementwise.\n+#[inline(never)]\n+pub fn test_ternary_elementwise<\n+    Scalar1,\n+    Scalar2,\n+    Scalar3,\n+    ScalarResult,\n+    Vector1,\n+    Vector2,\n+    Vector3,\n+    VectorResult,\n+    const LANES: usize,\n+>(\n+    fv: &dyn Fn(Vector1, Vector2, Vector3) -> VectorResult,\n+    fs: &dyn Fn(Scalar1, Scalar2, Scalar3) -> ScalarResult,\n+    check: &dyn Fn([Scalar1; LANES], [Scalar2; LANES], [Scalar3; LANES]) -> bool,\n+) where\n+    Scalar1: Copy + Default + core::fmt::Debug + DefaultStrategy,\n+    Scalar2: Copy + Default + core::fmt::Debug + DefaultStrategy,\n+    Scalar3: Copy + Default + core::fmt::Debug + DefaultStrategy,\n+    ScalarResult: Copy + Default + biteq::BitEq + core::fmt::Debug + DefaultStrategy,\n+    Vector1: Into<[Scalar1; LANES]> + From<[Scalar1; LANES]> + Copy,\n+    Vector2: Into<[Scalar2; LANES]> + From<[Scalar2; LANES]> + Copy,\n+    Vector3: Into<[Scalar3; LANES]> + From<[Scalar3; LANES]> + Copy,\n+    VectorResult: Into<[ScalarResult; LANES]> + From<[ScalarResult; LANES]> + Copy,\n+{\n+    test_3(&|x: [Scalar1; LANES], y: [Scalar2; LANES], z: [Scalar3; LANES]| {\n+        proptest::prop_assume!(check(x, y, z));\n+        let result_1: [ScalarResult; LANES] = fv(x.into(), y.into(), z.into()).into();\n+        let result_2: [ScalarResult; LANES] = {\n+            let mut result = [ScalarResult::default(); LANES];\n+            for ((i1, (i2, i3)), o) in x.iter().zip(y.iter().zip(z.iter())).zip(result.iter_mut()) {\n+                *o = fs(*i1, *i2, *i3);\n+            }\n+            result\n+        };\n+        crate::prop_assert_biteq!(result_1, result_2);\n+        Ok(())\n+    });\n+}\n+\n /// Expand a const-generic test into separate tests for each possible lane count.\n #[macro_export]\n macro_rules! test_lanes {"}]}