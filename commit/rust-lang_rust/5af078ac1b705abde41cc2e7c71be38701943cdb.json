{"sha": "5af078ac1b705abde41cc2e7c71be38701943cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjA3OGFjMWI3MDVhYmRlNDFjYzJlN2M3MWJlMzg3MDE5NDNjZGI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-16T20:06:21Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-16T20:23:49Z"}, "message": "Add flat_map_option lint", "tree": {"sha": "c7f86deb875c7c091d42afcc3b7319cfc04ea912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f86deb875c7c091d42afcc3b7319cfc04ea912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af078ac1b705abde41cc2e7c71be38701943cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af078ac1b705abde41cc2e7c71be38701943cdb", "html_url": "https://github.com/rust-lang/rust/commit/5af078ac1b705abde41cc2e7c71be38701943cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af078ac1b705abde41cc2e7c71be38701943cdb/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf0f3df1509e8d0312895afbda94cf821b5f4c2", "html_url": "https://github.com/rust-lang/rust/commit/eaf0f3df1509e8d0312895afbda94cf821b5f4c2"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "56cdd356469d492db3e337e08c96fc034d068eb3", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -2216,6 +2216,7 @@ Released 2018-09-13\n [`filter_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_next\n [`find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#find_map\n [`flat_map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#flat_map_identity\n+[`flat_map_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#flat_map_option\n [`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const"}, {"sha": "a7871b7aba7d044db4667cc68037d239b79a5bb5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -770,6 +770,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::FILTER_MAP_NEXT,\n         methods::FILTER_NEXT,\n         methods::FLAT_MAP_IDENTITY,\n+        methods::FLAT_MAP_OPTION,\n         methods::FROM_ITER_INSTEAD_OF_COLLECT,\n         methods::GET_UNWRAP,\n         methods::IMPLICIT_CLONE,\n@@ -1383,6 +1384,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(matches::SINGLE_MATCH_ELSE),\n         LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n         LintId::of(methods::FILTER_MAP_NEXT),\n+        LintId::of(methods::FLAT_MAP_OPTION),\n         LintId::of(methods::IMPLICIT_CLONE),\n         LintId::of(methods::INEFFICIENT_TO_STRING),\n         LintId::of(methods::MAP_FLATTEN),"}, {"sha": "44b4eb2903531db3381b9ddb133dc9b08430e754", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -1509,7 +1509,7 @@ fn opt_parent_let<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<&'a Local<'\n /// Gets all arms that are unbounded `PatRange`s.\n fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>) -> Vec<SpannedRange<Constant>> {\n     arms.iter()\n-        .flat_map(|arm| {\n+        .filter_map(|arm| {\n             if let Arm { pat, guard: None, .. } = *arm {\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n                     let lhs = match lhs {"}, {"sha": "12d560653edf3cd70a1b3486cfc49a9de9c3e63a", "filename": "clippy_lints/src/methods/flat_map_option.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -0,0 +1,34 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::{source_map::Span, sym};\n+\n+use super::FLAT_MAP_OPTION;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, arg: &'tcx hir::Expr<'_>, span: Span) {\n+    if !is_trait_method(cx, expr, sym::Iterator) {\n+        return;\n+    }\n+    let arg_ty = cx.typeck_results().expr_ty_adjusted(arg);\n+    let sig = match arg_ty.kind() {\n+        ty::Closure(_, substs) => substs.as_closure().sig(),\n+        _ if arg_ty.is_fn() => arg_ty.fn_sig(cx.tcx),\n+        _ => return,\n+    };\n+    if !is_type_diagnostic_item(cx, sig.output().skip_binder(), sym::option_type) {\n+        return;\n+    }\n+    span_lint_and_sugg(\n+        cx,\n+        FLAT_MAP_OPTION,\n+        span,\n+        \"used `flat_map` where `filter_map` could be used instead\",\n+        \"try\",\n+        \"filter_map\".into(),\n+        Applicability::MachineApplicable,\n+    )\n+}"}, {"sha": "c2cd3011d14933fc4db6caf29eb2c20a191a5200", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -17,6 +17,7 @@ mod filter_map_identity;\n mod filter_map_next;\n mod filter_next;\n mod flat_map_identity;\n+mod flat_map_option;\n mod from_iter_instead_of_collect;\n mod get_unwrap;\n mod implicit_clone;\n@@ -97,6 +98,29 @@ declare_clippy_lint! {\n     \"used `cloned` where `copied` could be used instead\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usages of `Iterator::flat_map()` where `filter_map()` could be\n+    /// used instead.\n+    ///\n+    /// **Why is this bad?** When applicable, `filter_map()` is more clear since it shows that\n+    /// `Option` is used to produce 0 or 1 items.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let nums: Vec<i32> = [\"1\", \"2\", \"whee!\"].iter().flat_map(|x| x.parse().ok()).collect();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let nums: Vec<i32> = [\"1\", \"2\", \"whee!\"].iter().filter_map(|x| x.parse().ok()).collect();\n+    /// ```\n+    pub FLAT_MAP_OPTION,\n+    pedantic,\n+    \"used `flat_map` where `filter_map` could be used instead\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n@@ -1663,6 +1687,7 @@ impl_lint_pass!(Methods => [\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n     CLONED_INSTEAD_OF_COPIED,\n+    FLAT_MAP_OPTION,\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n@@ -1958,7 +1983,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 unnecessary_filter_map::check(cx, expr, arg);\n                 filter_map_identity::check(cx, expr, arg, span);\n             },\n-            (\"flat_map\", [flm_arg]) => flat_map_identity::check(cx, expr, flm_arg, span),\n+            (\"flat_map\", [arg]) => {\n+                flat_map_identity::check(cx, expr, arg, span);\n+                flat_map_option::check(cx, expr, arg, span);\n+            },\n             (\"flatten\", []) => {\n                 if let Some((\"map\", [recv, map_arg], _)) = method_call!(recv) {\n                     map_flatten::check(cx, expr, recv, map_arg);"}, {"sha": "c0584e1e2269410bd0387197965995ed5f4cd754", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -154,6 +154,6 @@ pub fn is_doc_hidden(attrs: &[ast::Attribute]) -> bool {\n     attrs\n         .iter()\n         .filter(|attr| attr.has_name(sym::doc))\n-        .flat_map(ast::Attribute::meta_item_list)\n+        .filter_map(ast::Attribute::meta_item_list)\n         .any(|l| attr::list_contains_name(&l, sym::hidden))\n }"}, {"sha": "6a34f008995cdfb301e94086129e09adc703571d", "filename": "tests/ui/flat_map_option.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/tests%2Fui%2Fflat_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/tests%2Fui%2Fflat_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_option.fixed?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::flat_map_option)]\n+#![allow(clippy::redundant_closure, clippy::unnecessary_filter_map)]\n+\n+fn main() {\n+    // yay\n+    let c = |x| Some(x);\n+    let _ = [1].iter().filter_map(c);\n+    let _ = [1].iter().filter_map(Some);\n+\n+    // nay\n+    let _ = [1].iter().flat_map(|_| &Some(1));\n+}"}, {"sha": "2479abddbf04e49c167c908bc19c1bf8ca05be44", "filename": "tests/ui/flat_map_option.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/tests%2Fui%2Fflat_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/tests%2Fui%2Fflat_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_option.rs?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::flat_map_option)]\n+#![allow(clippy::redundant_closure, clippy::unnecessary_filter_map)]\n+\n+fn main() {\n+    // yay\n+    let c = |x| Some(x);\n+    let _ = [1].iter().flat_map(c);\n+    let _ = [1].iter().flat_map(Some);\n+\n+    // nay\n+    let _ = [1].iter().flat_map(|_| &Some(1));\n+}"}, {"sha": "a9d8056dee978cb6511ea72c1cd967ed660e44de", "filename": "tests/ui/flat_map_option.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5af078ac1b705abde41cc2e7c71be38701943cdb/tests%2Fui%2Fflat_map_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5af078ac1b705abde41cc2e7c71be38701943cdb/tests%2Fui%2Fflat_map_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_option.stderr?ref=5af078ac1b705abde41cc2e7c71be38701943cdb", "patch": "@@ -0,0 +1,16 @@\n+error: used `flat_map` where `filter_map` could be used instead\n+  --> $DIR/flat_map_option.rs:8:24\n+   |\n+LL |     let _ = [1].iter().flat_map(c);\n+   |                        ^^^^^^^^ help: try: `filter_map`\n+   |\n+   = note: `-D clippy::flat-map-option` implied by `-D warnings`\n+\n+error: used `flat_map` where `filter_map` could be used instead\n+  --> $DIR/flat_map_option.rs:9:24\n+   |\n+LL |     let _ = [1].iter().flat_map(Some);\n+   |                        ^^^^^^^^ help: try: `filter_map`\n+\n+error: aborting due to 2 previous errors\n+"}]}