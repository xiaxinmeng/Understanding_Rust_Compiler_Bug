{"sha": "2474d7d2c44a8684925838abc8ef7729d2997a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NzRkN2QyYzQ0YTg2ODQ5MjU4MzhhYmM4ZWY3NzI5ZDI5OTdhMDU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-30T03:33:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-31T22:05:12Z"}, "message": "Rebasing and review changes", "tree": {"sha": "d0e8b723d3071fd9c7cf55a3b60d216de0a2cb70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0e8b723d3071fd9c7cf55a3b60d216de0a2cb70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2474d7d2c44a8684925838abc8ef7729d2997a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2474d7d2c44a8684925838abc8ef7729d2997a05", "html_url": "https://github.com/rust-lang/rust/commit/2474d7d2c44a8684925838abc8ef7729d2997a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2474d7d2c44a8684925838abc8ef7729d2997a05/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "318472bea9c30415a092db9d417589909b98a083", "url": "https://api.github.com/repos/rust-lang/rust/commits/318472bea9c30415a092db9d417589909b98a083", "html_url": "https://github.com/rust-lang/rust/commit/318472bea9c30415a092db9d417589909b98a083"}], "stats": {"total": 126, "additions": 80, "deletions": 46}, "files": [{"sha": "213f32a1d182c5759724aa98724ef374b35675d9", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=2474d7d2c44a8684925838abc8ef7729d2997a05", "patch": "@@ -327,7 +327,7 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n                 // We don't bother to get encode/decode the trait id, we don't need it.\n                 Method => DlDef(def::DefMethod(did, None, provenance)),\n                 StaticMethod => DlDef(def::DefStaticMethod(did, provenance)),\n-                _ => fail!()\n+                _ => panic!()\n             }\n         }\n         Type | ForeignType => DlDef(def::DefTy(did, false)),\n@@ -931,7 +931,7 @@ pub fn get_methods_if_impl(intr: Rc<IdentInterner>,\n         match family {\n             StaticMethod | Method => {\n                 impl_methods.push(MethodInfo {\n-                    ident: item_name(&*intr, impl_method_doc),\n+                    name: item_name(&*intr, impl_method_doc),\n                     def_id: item_def_id(impl_method_doc, cdata),\n                     vis: item_visibility(impl_method_doc),\n                 });"}, {"sha": "a5d3cc1f12c29cc6118abcf793f91697d988d83b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2474d7d2c44a8684925838abc8ef7729d2997a05", "patch": "@@ -1418,7 +1418,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_parent_sort(rbml_w, 't');\n \n             let trait_item = &ms[i];\n-            let foo = |rbml_w: &mut Encoder| {\n+            let encode_trait_item = |rbml_w: &mut Encoder| {\n                 // If this is a static method, we've already\n                 // encoded this.\n                 if is_nonstatic_method {\n@@ -1431,14 +1431,14 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             match trait_item {\n                 &RequiredMethod(ref m) => {\n                     encode_attributes(rbml_w, m.attrs.as_slice());\n-                    foo(rbml_w);\n+                    encode_trait_item(rbml_w);\n                     encode_item_sort(rbml_w, 'r');\n                     encode_method_argument_names(rbml_w, &*m.decl);\n                 }\n \n                 &ProvidedMethod(ref m) => {\n                     encode_attributes(rbml_w, m.attrs.as_slice());\n-                    foo(rbml_w);\n+                    encode_trait_item(rbml_w);\n                     encode_item_sort(rbml_w, 'p');\n                     encode_inlined_item(ecx, rbml_w, IITraitItemRef(def_id, trait_item));\n                     encode_method_argument_names(rbml_w, &*m.pe_fn_decl());"}, {"sha": "d02222931e5de093ad3ab8cb2b814b3a942bdadd", "filename": "src/test/auxiliary/method_self_arg1.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs?ref=2474d7d2c44a8684925838abc8ef7729d2997a05", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+static mut COUNT: u64 = 1;\n+\n+pub fn get_count() -> u64 { unsafe { COUNT } }\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn foo(self, x: &Foo) {\n+        unsafe { COUNT *= 2; }\n+        // Test internal call.\n+        Foo::bar(&self);\n+        Foo::bar(x);\n+\n+        Foo::baz(self);\n+        Foo::baz(*x);\n+\n+        Foo::qux(box self);\n+        Foo::qux(box *x);\n+    }\n+\n+    pub fn bar(&self) {\n+        unsafe { COUNT *= 3; }\n+    }\n+\n+    pub fn baz(self) {\n+        unsafe { COUNT *= 5; }\n+    }\n+\n+    pub fn qux(self: Box<Foo>) {\n+        unsafe { COUNT *= 7; }\n+    }\n+}"}, {"sha": "99eb665388b26c721ff2cb707ea48a91f517a730", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "renamed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=2474d7d2c44a8684925838abc8ef7729d2997a05", "patch": "@@ -13,36 +13,10 @@\n static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n-pub fn reset_count() { unsafe { COUNT = 1; } }\n \n pub struct Foo;\n \n impl Foo {\n-    pub fn foo(self, x: &Foo) {\n-        unsafe { COUNT *= 2; }\n-        // Test internal call.\n-        Foo::bar(&self);\n-        Foo::bar(x);\n-\n-        Foo::baz(self);\n-        Foo::baz(*x);\n-\n-        Foo::qux(box self);\n-        Foo::qux(box *x);\n-    }\n-\n-    pub fn bar(&self) {\n-        unsafe { COUNT *= 3; }\n-    }\n-\n-    pub fn baz(self) {\n-        unsafe { COUNT *= 5; }\n-    }\n-\n-    pub fn qux(self: Box<Foo>) {\n-        unsafe { COUNT *= 7; }\n-    }\n-\n     pub fn run_trait(self) {\n         unsafe { COUNT *= 17; }\n         // Test internal call.", "previous_filename": "src/test/auxiliary/method_self_arg.rs"}, {"sha": "d4a0d514a7da668c5575cfbcce576d0e5d35a54c", "filename": "src/test/run-pass/method-self-arg-aux1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs?ref=2474d7d2c44a8684925838abc8ef7729d2997a05", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test method calls with self as an argument (cross-crate)\n+\n+// aux-build:method_self_arg1.rs\n+extern crate method_self_arg1;\n+use method_self_arg1::Foo;\n+\n+fn main() {\n+    let x = Foo;\n+    // Test external call.\n+    Foo::bar(&x);\n+    Foo::baz(x);\n+    Foo::qux(box x);\n+\n+    x.foo(&x);\n+\n+    assert!(method_self_arg1::get_count() == 2u64*3*3*3*5*5*5*7*7*7);\n+}"}, {"sha": "b94f1ae6ba64ed313c8e28297eb16265f2c8b782", "filename": "src/test/run-pass/method-self-arg-aux2.rs", "status": "renamed", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2474d7d2c44a8684925838abc8ef7729d2997a05/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs?ref=2474d7d2c44a8684925838abc8ef7729d2997a05", "patch": "@@ -10,23 +10,13 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n-// aux-build:method_self_arg.rs\n-extern crate method_self_arg;\n-use method_self_arg::{Foo, Bar};\n+// aux-build:method_self_arg2.rs\n+extern crate method_self_arg2;\n+use method_self_arg2::{Foo, Bar};\n \n fn main() {\n     let x = Foo;\n     // Test external call.\n-    Foo::bar(&x);\n-    Foo::baz(x);\n-    Foo::qux(box x);\n-\n-    x.foo(&x);\n-\n-    assert!(method_self_arg::get_count() == 2u64*3*3*3*5*5*5*7*7*7);\n-\n-    method_self_arg::reset_count();\n-    // Test external call.\n     Bar::foo1(&x);\n     Bar::foo2(x);\n     Bar::foo3(box x);\n@@ -37,6 +27,5 @@ fn main() {\n \n     x.run_trait();\n \n-    println!(\"{}, {}\", method_self_arg::get_count(), 2u64*2*3*3*5*5*7*7*11*11*13*13*17);\n-    assert!(method_self_arg::get_count() == 2u64*2*3*3*5*5*7*7*11*11*13*13*17);\n+    assert!(method_self_arg2::get_count() == 2u64*2*3*3*5*5*7*7*11*11*13*13*17);\n }", "previous_filename": "src/test/run-pass/method-self-arg-aux.rs"}]}