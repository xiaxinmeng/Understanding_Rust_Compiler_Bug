{"sha": "af4eb266457eb784010da28d80535f9fd38d4d1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNGViMjY2NDU3ZWI3ODQwMTBkYTI4ZDgwNTM1ZjlmZDM4ZDRkMWU=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-12-13T10:16:34Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-12-13T10:16:34Z"}, "message": "Support setting cargo features", "tree": {"sha": "8fb6f839a14985fa5dae695ff074495b87b8dd7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fb6f839a14985fa5dae695ff074495b87b8dd7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af4eb266457eb784010da28d80535f9fd38d4d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl3zZQIACgkQztOS3gxI\nPQBOeBAAt66dyGwzAlL4rZ2pIv8jNmMiUTNWsASARs7bpgV2Ash1Jlw+KWZ1vIFQ\nhYq3qsAAswc87+nI0Uj2Q4z6p9lFBFe4KuwPolOJ6pV1Dg9ivTKjk5EhcYr34yE5\nQNHKoexZosw1n1QZwZ4QSUnaXv3bae9p4HfWcdcgvXPiFm6jFJlfTK2vjOHph1h4\nbDwbt6cWphUWgNLtgLWMP5jIu+F0AEji5uBdHyIi1C7B+nzmmDPFge99MBq0PA30\nOCbJqObPWZBxoua8bXa8G1Xr2BlEeAewgMVyoDKJ63MRQy3G/g+sOSYWBCbCUR6b\n8Qfo9xg69KUtHsQwwHus9v2jDjcFlsR62dQ9z5P+Wv1MyuRVbcNtePprB8/UvDAi\n9WVafE3Fm5E2mo9HdZkQ/WGPbof5jMLnKfcZbftgI3bgUxe0kPRVClJIT4DLelUr\ndCcCb/OUzaGn2AQpO/+9HEpT9Ws5CCGHiPlOr6SZbZgNhC79dQgHvbl1EuhMNW/Z\nxGkGDd6JDnfoRFeit8UjhERIqbQIJHUCyrX3whnoh3nvhljzijIljcC1vdPXG5Bh\nve5ZyBqhmIe2zuCUYYhpYNgwUEHP1w7Nm2aI7qE1LvB1aHcb0eFgZQ3zq6dz6NgJ\nXnd6ZFylg5Fe8QY076zOIcFZKd2XwTTcG8Wii2H21kVpUBZvIUM=\n=RAY8\n-----END PGP SIGNATURE-----", "payload": "tree 8fb6f839a14985fa5dae695ff074495b87b8dd7a\nparent 5eb5e80de99338daceb82c933e366f95f7e1719c\nauthor oxalica <oxalicc@pm.me> 1576232194 +0800\ncommitter oxalica <oxalicc@pm.me> 1576232194 +0800\n\nSupport setting cargo features\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af4eb266457eb784010da28d80535f9fd38d4d1e", "html_url": "https://github.com/rust-lang/rust/commit/af4eb266457eb784010da28d80535f9fd38d4d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af4eb266457eb784010da28d80535f9fd38d4d1e/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb5e80de99338daceb82c933e366f95f7e1719c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb5e80de99338daceb82c933e366f95f7e1719c", "html_url": "https://github.com/rust-lang/rust/commit/5eb5e80de99338daceb82c933e366f95f7e1719c"}], "stats": {"total": 139, "additions": 118, "deletions": 21}, "files": [{"sha": "7744ba85a2402ccfbb63fa45b6bbed466e6f7f30", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -22,7 +22,7 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n \n pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n-    let ws = ProjectWorkspace::discover(root.as_ref())?;\n+    let ws = ProjectWorkspace::discover(root.as_ref(), &Default::default())?;\n     let project_roots = ws.to_roots();\n     let (sender, receiver) = unbounded();\n     let sender = Box::new(move |t| sender.send(t).unwrap());"}, {"sha": "67942aa4147cd1f6bd273d87fe369dfdf04e142b", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -9,6 +9,7 @@\n \n use rustc_hash::FxHashMap;\n \n+use ra_project_model::CargoFeatures;\n use serde::{Deserialize, Deserializer};\n \n /// Client provided initialization options\n@@ -37,6 +38,9 @@ pub struct ServerConfig {\n \n     /// Fine grained feature flags to disable specific features.\n     pub feature_flags: FxHashMap<String, bool>,\n+\n+    /// Cargo feature configurations.\n+    pub cargo_features: CargoFeatures,\n }\n \n impl Default for ServerConfig {\n@@ -49,6 +53,7 @@ impl Default for ServerConfig {\n             max_inlay_hint_length: None,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n+            cargo_features: Default::default(),\n         }\n     }\n }"}, {"sha": "965e7c53c146e0ca17dd64fe0d5f7780a403fc48", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -67,6 +67,7 @@ pub fn main_loop(\n                 let workspace = ra_project_model::ProjectWorkspace::discover_with_sysroot(\n                     ws_root.as_path(),\n                     config.with_sysroot,\n+                    &config.cargo_features,\n                 );\n                 match workspace {\n                     Ok(workspace) => loaded_workspaces.push(workspace),"}, {"sha": "4a0437da3200c7d220be09e2794ca213a8dc13c6", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -6,6 +6,7 @@ use cargo_metadata::{CargoOpt, MetadataCommand};\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_db::Edition;\n use rustc_hash::FxHashMap;\n+use serde::Deserialize;\n \n use crate::Result;\n \n@@ -23,6 +24,20 @@ pub struct CargoWorkspace {\n     pub(crate) workspace_root: PathBuf,\n }\n \n+#[derive(Deserialize, Clone, Debug, PartialEq, Eq, Default)]\n+#[serde(rename_all = \"camelCase\", default)]\n+pub struct CargoFeatures {\n+    /// Do not activate the `default` feature.\n+    pub no_default_features: bool,\n+\n+    /// Activate all available features\n+    pub all_features: bool,\n+\n+    /// List of features to activate.\n+    /// This will be ignored if `cargo_all_features` is true.\n+    pub features: Vec<String>,\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Package(RawId);\n impl_arena_id!(Package);\n@@ -132,9 +147,21 @@ impl Target {\n }\n \n impl CargoWorkspace {\n-    pub fn from_cargo_metadata(cargo_toml: &Path) -> Result<CargoWorkspace> {\n+    pub fn from_cargo_metadata(\n+        cargo_toml: &Path,\n+        cargo_features: &CargoFeatures,\n+    ) -> Result<CargoWorkspace> {\n         let mut meta = MetadataCommand::new();\n-        meta.manifest_path(cargo_toml).features(CargoOpt::AllFeatures);\n+        meta.manifest_path(cargo_toml);\n+        if cargo_features.all_features {\n+            meta.features(CargoOpt::AllFeatures);\n+        } else if cargo_features.no_default_features {\n+            // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n+            // https://github.com/oli-obk/cargo_metadata/issues/79\n+            meta.features(CargoOpt::NoDefaultFeatures);\n+        } else {\n+            meta.features(CargoOpt::SomeFeatures(cargo_features.features.clone()));\n+        }\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }"}, {"sha": "d71b7031a8a70825d77e53a6f9f170248d751e55", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -18,7 +18,7 @@ use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n pub use crate::{\n-    cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n+    cargo_workspace::{CargoFeatures, CargoWorkspace, Package, Target, TargetKind},\n     json_project::JsonProject,\n     sysroot::Sysroot,\n };\n@@ -60,11 +60,15 @@ impl PackageRoot {\n }\n \n impl ProjectWorkspace {\n-    pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n-        ProjectWorkspace::discover_with_sysroot(path, true)\n+    pub fn discover(path: &Path, cargo_features: &CargoFeatures) -> Result<ProjectWorkspace> {\n+        ProjectWorkspace::discover_with_sysroot(path, true, cargo_features)\n     }\n \n-    pub fn discover_with_sysroot(path: &Path, with_sysroot: bool) -> Result<ProjectWorkspace> {\n+    pub fn discover_with_sysroot(\n+        path: &Path,\n+        with_sysroot: bool,\n+        cargo_features: &CargoFeatures,\n+    ) -> Result<ProjectWorkspace> {\n         match find_rust_project_json(path) {\n             Some(json_path) => {\n                 let file = File::open(json_path)?;\n@@ -73,7 +77,7 @@ impl ProjectWorkspace {\n             }\n             None => {\n                 let cargo_toml = find_cargo_toml(path)?;\n-                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml)?;\n+                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)?;\n                 let sysroot =\n                     if with_sysroot { Sysroot::discover(&cargo_toml)? } else { Sysroot::default() };\n                 Ok(ProjectWorkspace::Cargo { cargo, sysroot })"}, {"sha": "8ed95fda7e498c360abd4edec7c415ff4a0e264a", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -278,6 +278,21 @@\n                     \"type\": \"number\",\n                     \"default\": 20,\n                     \"description\": \"Maximum length for inlay hints\"\n+                },\n+                \"rust-analyzer.cargoFeatures.noDefaultFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"description\": \"Do not activate the `default` feature\"\n+                },\n+                \"rust-analyzer.cargoFeatures.allFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"description\": \"Activate all available features\"\n+                },\n+                \"rust-analyzer.cargoFeatures.features\": {\n+                    \"type\": \"array\",\n+                    \"default\": [],\n+                    \"description\": \"List of features to activate\"\n                 }\n             }\n         },"}, {"sha": "6d709f7a8522b651d9eb6dfe76ecd115f418552d", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -15,6 +15,12 @@ export interface CargoWatchOptions {\n     ignore: string[];\n }\n \n+export interface CargoFeatures {\n+    noDefaultFeatures: boolean;\n+    allFeatures: boolean;\n+    features: string[];\n+}\n+\n export class Config {\n     public highlightingOn = true;\n     public rainbowHighlightingOn = false;\n@@ -35,8 +41,14 @@ export class Config {\n         command: '',\n         ignore: [],\n     };\n+    public cargoFeatures: CargoFeatures = {\n+        noDefaultFeatures: false,\n+        allFeatures: false,\n+        features: [],\n+    };\n \n     private prevEnhancedTyping: null | boolean = null;\n+    private prevCargoFeatures: null | CargoFeatures = null;\n \n     constructor() {\n         vscode.workspace.onDidChangeConfiguration(_ =>\n@@ -47,6 +59,8 @@ export class Config {\n \n     public userConfigChanged() {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n+        let requireReloadMessage = null;\n+\n         if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n         }\n@@ -74,19 +88,7 @@ export class Config {\n         }\n \n         if (this.prevEnhancedTyping !== this.enableEnhancedTyping) {\n-            const reloadAction = 'Reload now';\n-            vscode.window\n-                .showInformationMessage(\n-                    'Changing enhanced typing setting requires a reload',\n-                    reloadAction,\n-                )\n-                .then(selectedAction => {\n-                    if (selectedAction === reloadAction) {\n-                        vscode.commands.executeCommand(\n-                            'workbench.action.reloadWindow',\n-                        );\n-                    }\n-                });\n+            requireReloadMessage = 'Changing enhanced typing setting requires a reload';\n             this.prevEnhancedTyping = this.enableEnhancedTyping;\n         }\n \n@@ -153,5 +155,47 @@ export class Config {\n         if (config.has('withSysroot')) {\n             this.withSysroot = config.get('withSysroot') || false;\n         }\n+\n+        if (config.has('cargoFeatures.noDefaultFeatures')) {\n+            this.cargoFeatures.noDefaultFeatures = config.get(\n+                'cargoFeatures.noDefaultFeatures',\n+                false,\n+            );\n+        }\n+        if (config.has('cargoFeatures.allFeatures')) {\n+            this.cargoFeatures.allFeatures = config.get(\n+                'cargoFeatures.allFeatures',\n+                false,\n+            );\n+        }\n+        if (config.has('cargoFeatures.features')) {\n+            this.cargoFeatures.features = config.get(\n+                'cargoFeatures.features',\n+                [],\n+            );\n+        }\n+\n+        if (this.prevCargoFeatures !== null && (\n+            this.cargoFeatures.allFeatures !== this.prevCargoFeatures.allFeatures ||\n+            this.cargoFeatures.noDefaultFeatures !== this.prevCargoFeatures.noDefaultFeatures ||\n+            this.cargoFeatures.features.length !== this.prevCargoFeatures.features.length ||\n+            this.cargoFeatures.features.some((v, i) => v !== this.prevCargoFeatures!.features[i])\n+        )) {\n+            requireReloadMessage = 'Changing cargo features requires a reload';\n+        }\n+        this.prevCargoFeatures = { ...this.cargoFeatures };\n+\n+        if (requireReloadMessage !== null) {\n+            const reloadAction = 'Reload now';\n+            vscode.window\n+                .showInformationMessage(requireReloadMessage, reloadAction)\n+                .then(selectedAction => {\n+                    if (selectedAction === reloadAction) {\n+                        vscode.commands.executeCommand(\n+                            'workbench.action.reloadWindow',\n+                        );\n+                    }\n+                });\n+        }\n     }\n }"}, {"sha": "5ace1d0faeb4c2b794e59276cc249748f84c6e43", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af4eb266457eb784010da28d80535f9fd38d4d1e/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af4eb266457eb784010da28d80535f9fd38d4d1e/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=af4eb266457eb784010da28d80535f9fd38d4d1e", "patch": "@@ -59,6 +59,7 @@ export class Server {\n                 useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags,\n                 withSysroot: Server.config.withSysroot,\n+                cargoFeatures: Server.config.cargoFeatures,\n             },\n             traceOutputChannel,\n         };"}]}