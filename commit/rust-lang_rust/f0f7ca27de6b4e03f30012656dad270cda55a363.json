{"sha": "f0f7ca27de6b4e03f30012656dad270cda55a363", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZjdjYTI3ZGU2YjRlMDNmMzAwMTI2NTZkYWQyNzBjZGE1NWEzNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-23T01:53:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-23T01:53:38Z"}, "message": "Auto merge of #21769 - brooksbp:column-line-macro, r=nick29581\n\nPlease see discussion in #19284 .", "tree": {"sha": "862b2d4252579c51278661075d8d0cf1f4149dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862b2d4252579c51278661075d8d0cf1f4149dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0f7ca27de6b4e03f30012656dad270cda55a363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7ca27de6b4e03f30012656dad270cda55a363", "html_url": "https://github.com/rust-lang/rust/commit/f0f7ca27de6b4e03f30012656dad270cda55a363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7ca27de6b4e03f30012656dad270cda55a363/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67eb38ee4cfd7b28f8498b5b6492da172768dcb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/67eb38ee4cfd7b28f8498b5b6492da172768dcb9", "html_url": "https://github.com/rust-lang/rust/commit/67eb38ee4cfd7b28f8498b5b6492da172768dcb9"}, {"sha": "fc9fa1a563c48cc928c8c5754597ffba6f53a635", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9fa1a563c48cc928c8c5754597ffba6f53a635", "html_url": "https://github.com/rust-lang/rust/commit/fc9fa1a563c48cc928c8c5754597ffba6f53a635"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "92d50821592c62b0aa99e618a30995bb50e9441c", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -15,15 +15,21 @@ macro_rules! panic {\n         panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n+        #[cfg(stage0)]\n         static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());\n+        #[cfg(not(stage0))]\n+        static _MSG_FILE_LINE: (&'static str, &'static str, u32) = ($msg, file!(), line!());\n         ::core::panicking::panic(&_MSG_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // The leading _'s are to avoid dead code warnings if this is\n         // used inside a dead function. Just `#[allow(dead_code)]` is\n         // insufficient, since the user may have\n         // `#[forbid(dead_code)]` and which cannot be overridden.\n+        #[cfg(stage0)]\n         static _FILE_LINE: (&'static str, usize) = (file!(), line!());\n+        #[cfg(not(stage0))]\n+        static _FILE_LINE: (&'static str, u32) = (file!(), line!());\n         ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)\n     });\n }"}, {"sha": "168dcf4978c4634f9e81993a46047ab2778db618", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -34,26 +34,55 @@ use fmt;\n \n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"panic\"]\n-pub fn panic(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n+#[cfg(stage0)]\n+pub fn panic(expr_file_line: &(&'static str, &'static str, usize)) -> ! {\n+    let (expr, file, line) = *expr_file_line;\n+    panic_fmt(format_args!(\"{}\", expr), &(file, line))\n+}\n+#[cold] #[inline(never)] // this is the slow path, always\n+#[lang=\"panic\"]\n+#[cfg(not(stage0))]\n+pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n     let (expr, file, line) = *expr_file_line;\n     panic_fmt(format_args!(\"{}\", expr), &(file, line))\n }\n \n #[cold] #[inline(never)]\n #[lang=\"panic_bounds_check\"]\n-fn panic_bounds_check(file_line: &(&'static str, uint),\n-                     index: uint, len: uint) -> ! {\n+#[cfg(stage0)]\n+fn panic_bounds_check(file_line: &(&'static str, usize),\n+                     index: usize, len: usize) -> ! {\n+    panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n+                           len, index), file_line)\n+}\n+#[cold] #[inline(never)]\n+#[lang=\"panic_bounds_check\"]\n+#[cfg(not(stage0))]\n+fn panic_bounds_check(file_line: &(&'static str, u32),\n+                     index: usize, len: usize) -> ! {\n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n                            len, index), file_line)\n }\n \n #[cold] #[inline(never)]\n-pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n+#[cfg(stage0)]\n+pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, usize)) -> ! {\n+    #[allow(improper_ctypes)]\n+    extern {\n+        #[lang = \"panic_fmt\"]\n+        fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: uint) -> !;\n+    }\n+    let (file, line) = *file_line;\n+    unsafe { panic_impl(fmt, file, line as uint) }\n+}\n+#[cold] #[inline(never)]\n+#[cfg(not(stage0))]\n+pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n     #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n         fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: uint) -> !;\n     }\n     let (file, line) = *file_line;\n-    unsafe { panic_impl(fmt, file, line) }\n+    unsafe { panic_impl(fmt, file, line as uint) }\n }"}, {"sha": "5c008d35cb3ffd7c5ece77706478654aae584c9d", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -342,15 +342,15 @@ pub struct LogRecord<'a> {\n     pub file: &'a str,\n \n     /// The line number of where the LogRecord originated.\n-    pub line: uint,\n+    pub line: u32,\n }\n \n #[doc(hidden)]\n #[derive(Copy)]\n pub struct LogLocation {\n     pub module_path: &'static str,\n     pub file: &'static str,\n-    pub line: uint,\n+    pub line: u32,\n }\n \n /// Tests whether a given module's name is enabled for a particular level of"}, {"sha": "b1d292ebaa8830b7fb58a40caa63794dd424f107", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -50,6 +50,13 @@\n #[macro_export]\n macro_rules! log {\n     ($lvl:expr, $($arg:tt)+) => ({\n+        #[cfg(stage0)]\n+        static LOC: ::log::LogLocation = ::log::LogLocation {\n+            line: line!() as u32,\n+            file: file!(),\n+            module_path: module_path!(),\n+        };\n+        #[cfg(not(stage0))]\n         static LOC: ::log::LogLocation = ::log::LogLocation {\n             line: line!(),\n             file: file!(),"}, {"sha": "e92960ec7cdca9b6968ff52a2a57b5f393786a95", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -774,6 +774,10 @@ pub fn C_i32(ccx: &CrateContext, i: i32) -> ValueRef {\n     C_integral(Type::i32(ccx), i as u64, true)\n }\n \n+pub fn C_u32(ccx: &CrateContext, i: u32) -> ValueRef {\n+    C_integral(Type::i32(ccx), i as u64, false)\n+}\n+\n pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef {\n     C_integral(Type::i64(ccx), i, false)\n }"}, {"sha": "5eebe6a4a05fb5e98ca06b3b15793b5692923924", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -377,7 +377,7 @@ pub fn trans_fail<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let loc = bcx.sess().codemap().lookup_char_pos(call_info.span.lo);\n     let filename = token::intern_and_get_ident(&loc.file.name);\n     let filename = C_str_slice(ccx, filename);\n-    let line = C_uint(ccx, loc.line);\n+    let line = C_u32(ccx, loc.line as u32);\n     let expr_file_line_const = C_struct(ccx, &[v_str, filename, line], false);\n     let expr_file_line = consts::addr_of(ccx, expr_file_line_const,\n                                          \"panic_loc\", call_info.id);\n@@ -406,7 +406,7 @@ pub fn trans_fail_bounds_check<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Invoke the lang item\n     let filename = C_str_slice(ccx,  filename);\n-    let line = C_uint(ccx, loc.line);\n+    let line = C_u32(ccx, loc.line as u32);\n     let file_line_const = C_struct(ccx, &[filename, line], false);\n     let file_line = consts::addr_of(ccx, file_line_const,\n                                     \"panic_bounds_check_loc\", call_info.id);"}, {"sha": "abdcca59c58f31a850d55476b3f0a7a9b8de96dd", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -44,7 +44,7 @@ macro_rules! panic {\n     ($msg:expr) => ({\n         $crate::rt::begin_unwind($msg, {\n             // static requires less code at runtime, more constant data\n-            static _FILE_LINE: (&'static str, usize) = (file!(), line!());\n+            static _FILE_LINE: (&'static str, usize) = (file!(), line!() as usize);\n             &_FILE_LINE\n         })\n     });\n@@ -54,7 +54,7 @@ macro_rules! panic {\n             // used inside a dead function. Just `#[allow(dead_code)]` is\n             // insufficient, since the user may have\n             // `#[forbid(dead_code)]` and which cannot be overridden.\n-            static _FILE_LINE: (&'static str, usize) = (file!(), line!());\n+            static _FILE_LINE: (&'static str, usize) = (file!(), line!() as usize);\n             &_FILE_LINE\n         })\n     });"}, {"sha": "c79b510ae2dde92db1bd0fd2148732a76f1567ca", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -148,6 +148,7 @@ pub trait AstBuilder {\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n     fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr>;\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;\n+    fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr>;\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;\n \n     fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr>;\n@@ -704,6 +705,9 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU8)))\n     }\n+    fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU32)))\n+    }\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitBool(value))\n     }"}, {"sha": "af43f5a150190cc3ac0d4ac5f3e20ecb73a871e8", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -35,7 +35,7 @@ pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n-    base::MacExpr::new(cx.expr_usize(topmost, loc.line))\n+    base::MacExpr::new(cx.expr_u32(topmost, loc.line as u32))\n }\n \n /* column!(): expands to the current column number */\n@@ -45,7 +45,8 @@ pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n-    base::MacExpr::new(cx.expr_usize(topmost, loc.col.to_usize()))\n+\n+    base::MacExpr::new(cx.expr_u32(topmost, loc.col.to_usize() as u32))\n }\n \n /// file!(): expands to the current filename */"}, {"sha": "61d6d3fdd3b717dd08c9753588096038b02033ca", "filename": "src/test/run-pass/syntax-extension-source-utils-files/includeme.fragment", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils-files%2Fincludeme.fragment?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -2,6 +2,6 @@\n \n {\n     assert!(file!().ends_with(\"includeme.fragment\"));\n-    assert!(line!() == 5_usize);\n+    assert!(line!() == 5u32);\n     format!(\"victory robot {}\", line!())\n }"}, {"sha": "ddd8cd8be3d5c00f84287e96521660282eeff7be", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7ca27de6b4e03f30012656dad270cda55a363/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=f0f7ca27de6b4e03f30012656dad270cda55a363", "patch": "@@ -23,7 +23,7 @@ macro_rules! indirect_line { () => ( line!() ) }\n \n pub fn main() {\n     assert_eq!(line!(), 25);\n-    //assert!((column!() == 11));\n+    assert!((column!() == 4u32));\n     assert_eq!(indirect_line!(), 27);\n     assert!((file!().ends_with(\"syntax-extension-source-utils.rs\")));\n     assert_eq!(stringify!((2*3) + 5).to_string(), \"( 2 * 3 ) + 5\".to_string());"}]}