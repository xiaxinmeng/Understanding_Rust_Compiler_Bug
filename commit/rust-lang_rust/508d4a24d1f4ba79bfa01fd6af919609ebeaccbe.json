{"sha": "508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOGQ0YTI0ZDFmNGJhNzliZmEwMWZkNmFmOTE5NjA5ZWJlYWNjYmU=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-13T00:29:54Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-13T00:29:54Z"}, "message": "Remove another Rc from RegionInferenceContext", "tree": {"sha": "53c8b849555da487e44d1a14d234262bad983f4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c8b849555da487e44d1a14d234262bad983f4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "html_url": "https://github.com/rust-lang/rust/commit/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b46271841d75ee8b45b7b4db2ce531a764785fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b46271841d75ee8b45b7b4db2ce531a764785fa", "html_url": "https://github.com/rust-lang/rust/commit/4b46271841d75ee8b45b7b4db2ce531a764785fa"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "089a9b7328eb10a9498486a5a788787d25ca9fe8", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "patch": "@@ -113,7 +113,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// Information about how the universally quantified regions in\n     /// scope on this function relate to one another.\n-    universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n }\n \n /// Each time that `apply_member_constraint` is successful, it appends\n@@ -243,11 +243,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///\n     /// The `outlives_constraints` and `type_tests` are an initial set\n     /// of constraints produced by the MIR type check.\n-    pub(crate) fn new(\n+    pub(in crate::borrow_check) fn new(\n         var_infos: VarInfos,\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n-        universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+        universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n         outlives_constraints: OutlivesConstraintSet,\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<"}, {"sha": "a18004ce1918a59d8ccdbc0db8d8e222146be33c", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "patch": "@@ -15,6 +15,7 @@ use crate::borrow_check::{\n     type_check::constraint_conversion,\n     type_check::{Locations, MirTypeckRegionConstraints},\n     universal_regions::UniversalRegions,\n+    Frozen,\n };\n \n #[derive(Debug)]\n@@ -52,7 +53,7 @@ type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n type NormalizedInputsAndOutput<'tcx> = Vec<Ty<'tcx>>;\n \n crate struct CreateResult<'tcx> {\n-    crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate region_bound_pairs: RegionBoundPairs<'tcx>,\n     crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n }\n@@ -297,7 +298,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n         }\n \n         CreateResult {\n-            universal_region_relations: Rc::new(self.relations),\n+            universal_region_relations: Frozen::freeze(self.relations),\n             region_bound_pairs: self.region_bound_pairs,\n             normalized_inputs_and_output,\n         }"}, {"sha": "f4656673fec62fcc5cc36c8601067a3a6a8ea33d", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "patch": "@@ -55,6 +55,7 @@ use crate::borrow_check::{\n     renumber,\n     type_check::free_region_relations::{CreateResult, UniversalRegionRelations},\n     universal_regions::{DefiningTy, UniversalRegions},\n+    Frozen,\n };\n \n macro_rules! span_mirbug {\n@@ -828,7 +829,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n \n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n-    crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate opaque_type_values: FxHashMap<DefId, ty::ResolvedOpaqueTy<'tcx>>,\n }\n "}]}