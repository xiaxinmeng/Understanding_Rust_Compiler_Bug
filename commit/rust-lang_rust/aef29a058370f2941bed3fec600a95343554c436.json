{"sha": "aef29a058370f2941bed3fec600a95343554c436", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjI5YTA1ODM3MGYyOTQxYmVkM2ZlYzYwMGE5NTM0MzU1NGM0MzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-03T22:43:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-04T09:54:01Z"}, "message": "fix single-use lint", "tree": {"sha": "bec54f7b3523125a1e01c14205b38beffd937394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec54f7b3523125a1e01c14205b38beffd937394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef29a058370f2941bed3fec600a95343554c436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef29a058370f2941bed3fec600a95343554c436", "html_url": "https://github.com/rust-lang/rust/commit/aef29a058370f2941bed3fec600a95343554c436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef29a058370f2941bed3fec600a95343554c436/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b406d0b268977a09bd9faf5266582e97c9a01f88", "url": "https://api.github.com/repos/rust-lang/rust/commits/b406d0b268977a09bd9faf5266582e97c9a01f88", "html_url": "https://github.com/rust-lang/rust/commit/b406d0b268977a09bd9faf5266582e97c9a01f88"}], "stats": {"total": 761, "additions": 612, "deletions": 149}, "files": [{"sha": "eaabc333e5d9b2630f4a253c7b1c29b4ba7303c7", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 150, "deletions": 31, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -257,7 +257,7 @@ struct LifetimeContext<'a, 'tcx: 'a> {\n     /// Cache for cross-crate per-definition object lifetime defaults.\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n \n-    lifetime_uses: DefIdMap<LifetimeUseSet<'tcx>>,\n+    lifetime_uses: &'a mut DefIdMap<LifetimeUseSet<'tcx>>,\n }\n \n #[derive(Debug)]\n@@ -273,6 +273,11 @@ enum Scope<'a> {\n         /// we should use for an early-bound region?\n         next_early_index: u32,\n \n+        /// Flag is set to true if, in this binder, `'_` would be\n+        /// equivalent to a \"single-use region\". This is true on\n+        /// impls, but not other kinds of items.\n+        track_lifetime_uses: bool,\n+\n         /// Whether or not this binder would serve as the parent\n         /// binder for abstract types introduced within. For example:\n         ///\n@@ -433,7 +438,7 @@ fn krate<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> NamedRegionMap {\n             is_in_fn_syntax: false,\n             labels_in_fn: vec![],\n             xcrate_object_lifetime_defaults: DefIdMap(),\n-            lifetime_uses: DefIdMap(),\n+            lifetime_uses: &mut DefIdMap(),\n         };\n         for (_, item) in &krate.items {\n             visitor.visit_item(item);\n@@ -498,6 +503,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemTrait(_, _, ref generics, ..)\n             | hir::ItemTraitAlias(ref generics, ..)\n             | hir::ItemImpl(_, _, _, ref generics, ..) => {\n+                // Impls permit `'_` to be used and it is equivalent to \"some fresh lifetime name\".\n+                // This is not true for other kinds of items.x\n+                let track_lifetime_uses = match item.node {\n+                    hir::ItemImpl(..) => true,\n+                    _ => false,\n+                };\n                 // These kinds of items have only early bound lifetime parameters.\n                 let mut index = if let hir::ItemTrait(..) = item.node {\n                     1 // Self comes before lifetimes\n@@ -513,6 +524,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     lifetimes,\n                     next_early_index,\n                     abstract_type_parent: true,\n+                    track_lifetime_uses,\n                     s: ROOT_SCOPE,\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -540,7 +552,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        debug!(\"visit_ty: ty={:?}\", ty);\n+        debug!(\"visit_ty: id={:?} ty={:?}\", ty.id, ty);\n         match ty.node {\n             hir::TyBareFn(ref c) => {\n                 let next_early_index = self.next_early_index();\n@@ -553,6 +565,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         .collect(),\n                     s: self.scope,\n                     next_early_index,\n+                    track_lifetime_uses: true,\n                     abstract_type_parent: false,\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -674,6 +687,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             lifetimes,\n                             next_early_index,\n                             s: this.scope,\n+                            track_lifetime_uses: true,\n                             abstract_type_parent: false,\n                         };\n                         this.with(scope, |_old_scope, this| {\n@@ -688,6 +702,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         lifetimes,\n                         next_early_index,\n                         s: self.scope,\n+                        track_lifetime_uses: true,\n                         abstract_type_parent: false,\n                     };\n                     self.with(scope, |_old_scope, this| {\n@@ -728,6 +743,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     lifetimes,\n                     next_early_index,\n                     s: self.scope,\n+                    track_lifetime_uses: true,\n                     abstract_type_parent: true,\n                 };\n                 self.with(scope, |_old_scope, this| {\n@@ -774,6 +790,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     lifetimes,\n                     next_early_index,\n                     s: self.scope,\n+                    track_lifetime_uses: true,\n                     abstract_type_parent: true,\n                 };\n                 self.with(scope, |_old_scope, this| {\n@@ -847,6 +864,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 .collect(),\n                             s: self.scope,\n                             next_early_index,\n+                            track_lifetime_uses: true,\n                             abstract_type_parent: false,\n                         };\n                         let result = self.with(scope, |old_scope, this| {\n@@ -913,6 +931,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .collect(),\n                 s: self.scope,\n                 next_early_index,\n+                track_lifetime_uses: true,\n                 abstract_type_parent: false,\n             };\n             self.with(scope, |old_scope, this| {\n@@ -1104,10 +1123,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n                 }\n \n                 Scope::Binder {\n-                    ref lifetimes,\n-                    s,\n-                    next_early_index: _,\n-                    abstract_type_parent: _,\n+                    ref lifetimes, s, ..\n                 } => {\n                     // FIXME (#24278): non-hygienic comparison\n                     if let Some(def) = lifetimes.get(&hir::LifetimeName::Name(label)) {\n@@ -1255,56 +1271,94 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         F: for<'b> FnOnce(ScopeRef, &mut LifetimeContext<'b, 'tcx>),\n     {\n         let LifetimeContext {\n-            tcx, ref mut map, ..\n-        } = *self;\n+            tcx,\n+            map,\n+            lifetime_uses,\n+            ..\n+        } = self;\n         let labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n         let xcrate_object_lifetime_defaults =\n             replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap());\n         let mut this = LifetimeContext {\n-            tcx,\n-            map: *map,\n+            tcx: *tcx,\n+            map: map,\n             scope: &wrap_scope,\n             trait_ref_hack: self.trait_ref_hack,\n             is_in_fn_syntax: self.is_in_fn_syntax,\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,\n-            lifetime_uses: DefIdMap(),\n+            lifetime_uses: lifetime_uses,\n         };\n         debug!(\"entering scope {:?}\", this.scope);\n         f(self.scope, &mut this);\n+        this.check_uses_for_lifetimes_defined_by_scope();\n         debug!(\"exiting scope {:?}\", this.scope);\n         self.labels_in_fn = this.labels_in_fn;\n         self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n+    }\n+\n+    fn check_uses_for_lifetimes_defined_by_scope(&mut self) {\n+        let defined_by = match self.scope {\n+            Scope::Binder { lifetimes, .. } => lifetimes,\n+            _ => {\n+                debug!(\"check_uses_for_lifetimes_defined_by_scope: not in a binder scope\");\n+                return;\n+            }\n+        };\n \n-        for (def_id, lifetimeuseset) in &this.lifetime_uses {\n+        for region in defined_by.values() {\n+            debug!(\n+                \"check_uses_for_lifetimes_defined_by_scope: region = {:?}\",\n+                region\n+            );\n+\n+            let def_id = match region {\n+                Region::EarlyBound(_, def_id, _)\n+                | Region::LateBound(_, def_id, _)\n+                | Region::Free(_, def_id) => def_id,\n+\n+                Region::LateBoundAnon(..) | Region::Static => continue,\n+            };\n+\n+            debug!(\n+                \"check_uses_for_lifetimes_defined_by_scope: def_id = {:?}\",\n+                def_id\n+            );\n+\n+            let lifetimeuseset = self.lifetime_uses.remove(def_id);\n+            debug!(\n+                \"check_uses_for_lifetimes_defined_by_scope: lifetimeuseset = {:?}\",\n+                lifetimeuseset\n+            );\n             match lifetimeuseset {\n-                &LifetimeUseSet::One(_) => {\n-                    let node_id = this.tcx.hir.as_local_node_id(*def_id).unwrap();\n+                Some(LifetimeUseSet::One(_)) => {\n+                    let node_id = self.tcx.hir.as_local_node_id(*def_id).unwrap();\n                     debug!(\"node id first={:?}\", node_id);\n-                    if let hir::map::NodeLifetime(hir_lifetime) = this.tcx.hir.get(node_id) {\n+                    if let hir::map::NodeLifetime(hir_lifetime) = self.tcx.hir.get(node_id) {\n                         let span = hir_lifetime.span;\n                         let id = hir_lifetime.id;\n                         debug!(\n                             \"id ={:?} span = {:?} hir_lifetime = {:?}\",\n                             node_id, span, hir_lifetime\n                         );\n \n-                        this.tcx\n+                        self.tcx\n                             .struct_span_lint_node(\n                                 lint::builtin::SINGLE_USE_LIFETIME,\n                                 id,\n                                 span,\n                                 &format!(\n-                                    \"lifetime name `{}` only used once\",\n+                                    \"lifetime parameter `{}` only used once\",\n                                     hir_lifetime.name.name()\n                                 ),\n                             )\n                             .emit();\n                     }\n                 }\n-                _ => {\n+                Some(LifetimeUseSet::Many) => {\n                     debug!(\"Not one use lifetime\");\n                 }\n+                None => {}\n             }\n         }\n     }\n@@ -1372,6 +1426,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             next_early_index,\n             s: self.scope,\n             abstract_type_parent: true,\n+            track_lifetime_uses: false,\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n@@ -1437,10 +1492,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n \n                 Scope::Binder {\n-                    ref lifetimes,\n-                    s,\n-                    next_early_index: _,\n-                    abstract_type_parent: _,\n+                    ref lifetimes, s, ..\n                 } => {\n                     if let Some(&def) = lifetimes.get(&lifetime_ref.name) {\n                         break Some(def.shifted(late_depth));\n@@ -1631,6 +1683,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         inputs: &'tcx [P<hir::Ty>],\n         output: Option<&'tcx P<hir::Ty>>,\n     ) {\n+        debug!(\"visit_fn_like_elision: enter\");\n         let mut arg_elide = Elide::FreshLateAnon(Cell::new(0));\n         let arg_scope = Scope::Elision {\n             elide: arg_elide.clone(),\n@@ -1653,6 +1706,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             None => return,\n         };\n \n+        debug!(\"visit_fn_like_elision: determine output\");\n+\n         // Figure out if there's a body we can get argument names from,\n         // and whether there's a `self` argument (treated specially).\n         let mut assoc_item_kind = None;\n@@ -1812,11 +1867,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             Elide::Error(arg_lifetimes)\n         };\n \n+        debug!(\"visit_fn_like_elision: elide={:?}\", elide);\n+\n         let scope = Scope::Elision {\n             elide,\n             s: self.scope,\n         };\n         self.with(scope, |_, this| this.visit_ty(output));\n+        debug!(\"visit_fn_like_elision: exit\");\n \n         struct GatherLifetimes<'a> {\n             map: &'a NamedRegionMap,\n@@ -2182,10 +2240,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n \n                 Scope::Binder {\n-                    ref lifetimes,\n-                    s,\n-                    next_early_index: _,\n-                    abstract_type_parent: _,\n+                    ref lifetimes, s, ..\n                 } => {\n                     if let Some(&def) = lifetimes.get(&lifetime.name) {\n                         let node_id = self.tcx.hir.as_local_node_id(def.id().unwrap()).unwrap();\n@@ -2205,6 +2260,50 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    /// Returns true if, in the current scope, replacing `'_` would be\n+    /// equivalent to a single-use lifetime.\n+    fn track_lifetime_uses(&self) -> bool {\n+        let mut scope = self.scope;\n+        loop {\n+            match *scope {\n+                Scope::Root => break false,\n+\n+                // Inside of items, it depends on the kind of item.\n+                Scope::Binder {\n+                    track_lifetime_uses,\n+                    ..\n+                } => break track_lifetime_uses,\n+\n+                // Inside a body, `'_` will use an inference variable,\n+                // should be fine.\n+                Scope::Body { .. } => break true,\n+\n+                // A lifetime only used in a fn argument could as well\n+                // be replaced with `'_`, as that would generate a\n+                // fresh name, too.\n+                Scope::Elision {\n+                    elide: Elide::FreshLateAnon(_),\n+                    ..\n+                } => break true,\n+\n+                // In the return type or other such place, `'_` is not\n+                // going to make a fresh name, so we cannot\n+                // necessarily replace a single-use lifetime with\n+                // `'_`.\n+                Scope::Elision {\n+                    elide: Elide::Exact(_),\n+                    ..\n+                } => break false,\n+                Scope::Elision {\n+                    elide: Elide::Error(_),\n+                    ..\n+                } => break false,\n+\n+                Scope::ObjectLifetimeDefault { s, .. } => scope = s,\n+            }\n+        }\n+    }\n+\n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n         if lifetime_ref.id == ast::DUMMY_NODE_ID {\n             span_bug!(\n@@ -2231,11 +2330,31 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             | Region::LateBound(_, def_id, _)\n             | Region::EarlyBound(_, def_id, _) => {\n                 // A lifetime declared by the user.\n-                if !self.lifetime_uses.contains_key(&def_id) {\n-                    self.lifetime_uses\n-                        .insert(def_id, LifetimeUseSet::One(lifetime_ref));\n+                let def_local_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+                if def_local_id == lifetime_ref.id {\n+                    // This is weird. Because the HIR defines a\n+                    // lifetime *definition* as wrapping a Lifetime,\n+                    // we wind up invoking this method also for the\n+                    // definitions in some cases (notably\n+                    // higher-ranked types). This means that a\n+                    // lifetime with one use (e.g., `for<'a> fn(&'a\n+                    // u32)`) wind up being counted as two uses.  To\n+                    // avoid that, we just ignore the lifetime that\n+                    // corresponds to the definition.\n                 } else {\n-                    self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n+                    let track_lifetime_uses = self.track_lifetime_uses();\n+                    debug!(\n+                        \"insert_lifetime: track_lifetime_uses={}\",\n+                        track_lifetime_uses\n+                    );\n+                    if track_lifetime_uses && !self.lifetime_uses.contains_key(&def_id) {\n+                        debug!(\"insert_lifetime: first use of {:?}\", def_id);\n+                        self.lifetime_uses\n+                            .insert(def_id, LifetimeUseSet::One(lifetime_ref));\n+                    } else {\n+                        debug!(\"insert_lifetime: many uses of {:?}\", def_id);\n+                        self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n+                    }\n                 }\n             }\n         }"}, {"sha": "38d05369fb8453fc36ec2156eb1b97a27ab4c772", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-2.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-2.stderr?ref=b406d0b268977a09bd9faf5266582e97c9a01f88", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime name `'x` only used once\n-  --> $DIR/single_use_lifetimes-2.rs:12:10\n-   |\n-LL | fn deref<'x>() -> &'x u32 { //~ ERROR lifetime name `'x` only used once\n-   |          ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/single_use_lifetimes-2.rs:10:9\n-   |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "49c06aafbe550888bfeec05b86ff4f453c0ef958", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-3.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-3.stderr?ref=b406d0b268977a09bd9faf5266582e97c9a01f88", "patch": "@@ -1,20 +0,0 @@\n-error: lifetime name `'x` only used once\n-  --> $DIR/single_use_lifetimes-3.rs:11:12\n-   |\n-LL | struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n-   |            ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/single_use_lifetimes-3.rs:10:9\n-   |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: lifetime name `'y` only used once\n-  --> $DIR/single_use_lifetimes-3.rs:16:6\n-   |\n-LL | impl<'y> Foo<'y> { //~ ERROR lifetime name `'y` only used once\n-   |      ^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "2df370f5d02219b491ec7597a1f543a31210a835", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-4.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-4.stderr?ref=b406d0b268977a09bd9faf5266582e97c9a01f88", "patch": "@@ -1,20 +0,0 @@\n-error: lifetime name `'x` only used once\n-  --> $DIR/single_use_lifetimes-4.rs:12:12\n-   |\n-LL | struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n-   |            ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/single_use_lifetimes-4.rs:10:9\n-   |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: lifetime name `'x` only used once\n-  --> $DIR/single_use_lifetimes-4.rs:16:10\n-   |\n-LL | enum Bar<'x> { //~ ERROR lifetime name `'x` only used once\n-   |          ^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "eec426e4e63ab6ab2bd6adfc24320374b5522d04", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-5.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes-5.stderr?ref=b406d0b268977a09bd9faf5266582e97c9a01f88", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime name `'x` only used once\n-  --> $DIR/single_use_lifetimes-5.rs:12:11\n-   |\n-LL | trait Foo<'x> { //~ ERROR lifetime name `'x` only used once\n-   |           ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/single_use_lifetimes-5.rs:10:9\n-   |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a97056b6240ec1bf5b77e0ae731eb12586cdf4e8", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.rs?ref=b406d0b268977a09bd9faf5266582e97c9a01f88", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-#![deny(single_use_lifetime)]\n-\n-fn deref<'x>(v: &'x u32) -> u32 { //~ ERROR lifetime name `'x` only used once\n-    *v\n-}\n-\n-fn main() {}"}, {"sha": "15917d3c08562dc618acf92c83b39eff63772175", "filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b406d0b268977a09bd9faf5266582e97c9a01f88/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fsingle_use_lifetimes.stderr?ref=b406d0b268977a09bd9faf5266582e97c9a01f88", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime name `'x` only used once\n-  --> $DIR/single_use_lifetimes.rs:12:10\n-   |\n-LL | fn deref<'x>(v: &'x u32) -> u32 { //~ ERROR lifetime name `'x` only used once\n-   |          ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/single_use_lifetimes.rs:10:9\n-   |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c5d98d260484442f4ac4612024f06cc743c7f3e6", "filename": "src/test/ui/single-use-lifetime/fn-types.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO warn when lifetime name is used only\n+// once in a fn argument.\n+\n+struct Foo {\n+  a: for<'a> fn(&'a u32), //~ ERROR `'a` only used once\n+  b: for<'a> fn(&'a u32, &'a u32), // OK, used twice.\n+  c: for<'a> fn(&'a u32) -> &'a u32, // OK, used twice.\n+  d: for<'a> fn() -> &'a u32, // OK, used only in return type.\n+    //~^ ERROR return type references lifetime `'a`, which is not constrained by the fn input types\n+}\n+\n+fn main() { }"}, {"sha": "bec712b004c3dced67f6183b1b930e3e1b94e211", "filename": "src/test/ui/single-use-lifetime/fn-types.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,21 @@\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/fn-types.rs:19:10\n+   |\n+LL |   a: for<'a> fn(&'a u32), //~ ERROR `'a` only used once\n+   |          ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/fn-types.rs:11:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/fn-types.rs:22:22\n+   |\n+LL |   d: for<'a> fn() -> &'a u32, // OK, used only in return type.\n+   |                      ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0581`."}, {"sha": "9001a8de29a4353f4a2bcd4cd1e6da82c3b6a305", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(in_band_lifetimes)]\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO warn when lifetime name is used only\n+// once in a fn argument, even with in band lifetimes.\n+\n+fn a(x: &'a u32, y: &'b u32) {\n+    //~^ ERROR `'a` only used once\n+    //~| ERROR `'b` only used once\n+}\n+\n+fn main() { }"}, {"sha": "2011359a5112034ea6cb2ff6ca2aa4046079389d", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime parameter `'b` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:19:22\n+   |\n+LL | fn a(x: &'a u32, y: &'b u32) {\n+   |                      ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:12:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:19:10\n+   |\n+LL | fn a(x: &'a u32, y: &'b u32) {\n+   |          ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2a9e80d56c31b045e921e1678eeac03a0b6567e8", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.rs", "status": "renamed", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,10 +7,15 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![deny(single_use_lifetime)]\n-// FIXME(#44752) -- this scenario should not be warned\n-fn deref<'x>() -> &'x u32 { //~ ERROR lifetime name `'x` only used once\n-    22\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO warn when lifetime name is used only\n+// once in a fn argument.\n+\n+fn a<'a>(x: &'a u32) { //~ ERROR `'a` only used once\n }\n \n fn main() { }", "previous_filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-2.rs"}, {"sha": "e9a3570b3fb4dfce568c127cafa989b416bcf52a", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/one-use-in-fn-argument.rs:18:6\n+   |\n+LL | fn a<'a>(x: &'a u32) { //~ ERROR `'a` only used once\n+   |      ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/one-use-in-fn-argument.rs:11:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d024094ae7122416f973cacaecb21cd08c022afe", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-return.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO NOT warn when lifetime name is used only\n+// once in a fn return type -- using `'_` is not legal there,\n+// as it must refer back to an argument.\n+//\n+// (Normally, using `'static` would be preferred, but there are\n+// times when that is not what you want.)\n+//\n+// run-pass\n+\n+fn b<'a>() -> &'a u32 { // OK: used only in return type\n+    &22\n+}\n+\n+fn main() { }"}, {"sha": "9cdad09e33d4e7104d6e362e31ee640e22377a0e", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-impl-header.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO warn for a lifetime used only once in an impl.\n+//\n+// (Actually, until #15872 is fixed, you can't use `'_` here, but\n+// hopefully that will come soon.)\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+    fn inherent_a(&self) {\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "1718f19318819907d0b3dbbc7addf16b4a97cbcf", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-impl-header.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime parameter `'f` only used once\n+  --> $DIR/one-use-in-inherent-impl-header.rs:24:6\n+   |\n+LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+   |      ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/one-use-in-inherent-impl-header.rs:11:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ca078cdb3bbbc475748db2e734b6b0fd87d785b", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO warn for a lifetime used only once in an inherent method.\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+    fn inherent_a<'a>(&self, data: &'a u32) { //~ ERROR `'a` only used once\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "38e90e76f56e2e0c15b58829bd5b91067cd90f25", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/one-use-in-inherent-method-argument.rs:22:19\n+   |\n+LL |     fn inherent_a<'a>(&self, data: &'a u32) { //~ ERROR `'a` only used once\n+   |                   ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/one-use-in-inherent-method-argument.rs:11:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime parameter `'f` only used once\n+  --> $DIR/one-use-in-inherent-method-argument.rs:21:6\n+   |\n+LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+   |      ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7d2ffa379adc48a2d5b8229f57c777460228ec93", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-return.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+// Test that we DO NOT warn for a lifetime used just once in a return type,\n+// where that return type is in an inherent method.\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+    fn inherent_a<'a>(&self) -> &'a u32 { // OK for 'a\n+        &22\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "32fd284949e965a28af8f60c43e4d37f8cf17184", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-return.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime parameter `'f` only used once\n+  --> $DIR/one-use-in-inherent-method-return.rs:22:6\n+   |\n+LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+   |      ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/one-use-in-inherent-method-return.rs:11:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c758d9db07877f464c0d26c876246c6a45151d8", "filename": "src/test/ui/single-use-lifetime/one-use-in-struct.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we do not warn for named lifetimes in structs,\n+// even when they are only used once (since to not use a named\n+// lifetime is illegal!)\n+//\n+// compile-pass\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+enum Bar<'f> {\n+    Data(&'f u32)\n+}\n+\n+trait Baz<'f> { }\n+\n+fn main() { }"}, {"sha": "99e9eaf98ad1f40a14878b5f98901c348ddda7f2", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we DO warn for a lifetime on an impl used only in `&self`\n+// in a trait method.\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+impl<'f> Iterator for Foo<'f> {\n+    type Item = &'f u32;\n+\n+    fn next<'g>(&'g mut self) -> Option<Self::Item> { //~ ERROR `'g` only used once\n+        None\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "e5278671a1afa0fd7eac66df4b35ee9b272b5e04", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime parameter `'g` only used once\n+  --> $DIR/one-use-in-trait-method-argument.rs:25:13\n+   |\n+LL |     fn next<'g>(&'g mut self) -> Option<Self::Item> { //~ ERROR `'g` only used once\n+   |             ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/one-use-in-trait-method-argument.rs:14:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d210be4ba2a509f4b512c3b2b085136c1f9f9b51", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-argument-and-return.rs", "status": "renamed", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,10 +7,18 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// Test that we DO NOT warn when lifetime name is used in\n+// both the argument and return.\n+//\n+// compile-pass\n+\n #![deny(single_use_lifetime)]\n-// Should not issue a warning, as explicit lifetimes are mandatory in this case:\n-trait Foo<'x> { //~ ERROR lifetime name `'x` only used once\n-    fn foo(&self, arg: &'x u32);\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+fn c<'a>(x: &'a u32) -> &'a u32 { // OK: used twice\n+    &22\n }\n \n fn main() { }", "previous_filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-5.rs"}, {"sha": "f43a3e116efe57461e10a6e40698e03fd6ba7a2e", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-arguments.rs", "status": "renamed", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,14 +7,20 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// Test that we DO NOT warn when lifetime name is used multiple\n+// argments, or more than once in a single argument.\n+//\n+// compile-pass\n+\n #![deny(single_use_lifetime)]\n- // Neither should issue a warning, as explicit lifetimes are mandatory in this case\n-struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n-    x: &'x u32\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+fn c<'a>(x: &'a u32, y: &'a u32) { // OK: used twice\n }\n \n-enum Bar<'x> { //~ ERROR lifetime name `'x` only used once\n-    Variant(&'x u32)\n+fn d<'a>(x: (&'a u32, &'a u32)) { // OK: used twice\n }\n \n fn main() { }", "previous_filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-4.rs"}, {"sha": "d224d9fefa10615336e85a4163dcffc2dd7813d1", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-impl-header.rs", "status": "renamed", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,14 +7,22 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// Test that we DO NOT warn for a lifetime used twice in an impl.\n+//\n+// compile-pass\n+\n #![deny(single_use_lifetime)]\n-struct Foo<'x> { //~ ERROR lifetime name `'x` only used once\n-    x: &'x u32 // no warning!\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo<'f> {\n+    data: &'f u32\n }\n \n-// Once #44524 is fixed, this should issue a warning.\n-impl<'y> Foo<'y> { //~ ERROR lifetime name `'y` only used once\n-    fn method() { }\n+impl<'f> Foo<'f> {\n+    fn inherent_a(&self, data: &'f u32) {\n+    }\n }\n \n fn main() { }", "previous_filename": "src/test/ui/in-band-lifetimes/single_use_lifetimes-3.rs"}, {"sha": "7b69a6f0d525076a5f304f909cf4036c4c50e3fc", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-method-argument-and-return.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we DO NOT warn for a lifetime used twice in an impl method and\n+// header.\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+    fn inherent_a<'a>(&self, data: &'a u32) -> &'a u32{\n+      data\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "6fc66611b1ddfb5f53e479f417aa0d6cf8344ca0", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-method-argument-and-return.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime parameter `'f` only used once\n+  --> $DIR/two-uses-in-inherent-method-argument-and-return.rs:22:6\n+   |\n+LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n+   |      ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/two-uses-in-inherent-method-argument-and-return.rs:14:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffba3d8527d0e9ae9d9d5afa447251effec6ba77", "filename": "src/test/ui/single-use-lifetime/two-uses-in-trait-impl.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef29a058370f2941bed3fec600a95343554c436/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs?ref=aef29a058370f2941bed3fec600a95343554c436", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we DO NOT warn for a lifetime on an impl used in both\n+// header and in an associated type.\n+//\n+// compile-pass\n+\n+#![deny(single_use_lifetime)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo<'f> {\n+    data: &'f u32\n+}\n+\n+impl<'f> Iterator for Foo<'f> {\n+    type Item = &'f u32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() { }"}]}