{"sha": "350f72fc671c197573585cc6919fc99b182a1f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MGY3MmZjNjcxYzE5NzU3MzU4NWNjNjkxOWZjOTliMTgyYTFmNmI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-02-23T18:18:14Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-06T03:47:07Z"}, "message": "Make wf checking parallel", "tree": {"sha": "283cc3720c670f5f326576d22ef879269f536fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283cc3720c670f5f326576d22ef879269f536fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/350f72fc671c197573585cc6919fc99b182a1f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/350f72fc671c197573585cc6919fc99b182a1f6b", "html_url": "https://github.com/rust-lang/rust/commit/350f72fc671c197573585cc6919fc99b182a1f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/350f72fc671c197573585cc6919fc99b182a1f6b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140a837fb647c5554102ec28e8713a913224cdbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/140a837fb647c5554102ec28e8713a913224cdbb", "html_url": "https://github.com/rust-lang/rust/commit/140a837fb647c5554102ec28e8713a913224cdbb"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "3d95e29082ebef2bb5bdd62c06ac7f981ad3775d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=350f72fc671c197573585cc6919fc99b182a1f6b", "patch": "@@ -695,26 +695,14 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.hir().krate().visit_all_item_likes(&mut visit);\n-    })\n-}\n-\n-pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n-    tcx.sess.track_errors(|| {\n-        for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n-        }\n+        tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n     })\n }\n \n fn check_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n-    tcx.typeck_item_bodies(LOCAL_CRATE)\n-}\n-\n fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n                                 -> Result<(), ErrorReported>\n {"}, {"sha": "4103b73151be55c60f8320bd579e6dec4c7cf129", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=350f72fc671c197573585cc6919fc99b182a1f6b", "patch": "@@ -14,7 +14,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax_pos::Span;\n use errors::{DiagnosticBuilder, DiagnosticId};\n \n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::itemlikevisit::ParItemLikeVisitor;\n use rustc::hir;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -1015,20 +1015,20 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     }\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n+impl<'a, 'tcx> ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n+    fn visit_item(&self, i: &'tcx hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         let def_id = self.tcx.hir().local_def_id_from_hir_id(i.hir_id);\n         self.tcx.ensure().check_item_well_formed(def_id);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let def_id = self.tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n         self.tcx.ensure().check_trait_item_well_formed(def_id);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         let def_id = self.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n         self.tcx.ensure().check_impl_item_well_formed(def_id);"}, {"sha": "39a2f5d37bd7ab32b596562c0e057b5c0362d9a5", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=350f72fc671c197573585cc6919fc99b182a1f6b", "patch": "@@ -141,9 +141,7 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     for &impl_id in impls {\n         check_impl_overlap(tcx, impl_id);\n     }\n-    use rustc::util::common::time;\n-    time(tcx.sess, \"builtin::check_trait checking\", ||\n-          builtin::check_trait(tcx, def_id));\n+    builtin::check_trait(tcx, def_id);\n }\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "30035094ccd2991ec551ca034fbce9a61e34f400", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=350f72fc671c197573585cc6919fc99b182a1f6b", "patch": "@@ -56,12 +56,6 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,"}, {"sha": "ebb617c23c6ca72ee85d3f84a411d3b8b2928b16", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350f72fc671c197573585cc6919fc99b182a1f6b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=350f72fc671c197573585cc6919fc99b182a1f6b", "patch": "@@ -322,8 +322,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n     tcx.sess.track_errors(|| {\n-        time(tcx.sess, \"type collecting\", ||\n-             collect::collect_item_types(tcx));\n+        time(tcx.sess, \"type collecting\", || {\n+            for &module in tcx.hir().krate().modules.keys() {\n+                tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n+            }\n+        });\n     })?;\n \n     if tcx.features().rustc_attrs {\n@@ -352,9 +355,15 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n     time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx))?;\n \n-    time(tcx.sess, \"item-types checking\", || check::check_item_types(tcx))?;\n+    time(tcx.sess, \"item-types checking\", || {\n+        tcx.sess.track_errors(|| {\n+            for &module in tcx.hir().krate().modules.keys() {\n+                tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+            }\n+        })\n+    })?;\n \n-    time(tcx.sess, \"item-bodies checking\", || check::check_item_bodies(tcx))?;\n+    time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE))?;\n \n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);"}]}