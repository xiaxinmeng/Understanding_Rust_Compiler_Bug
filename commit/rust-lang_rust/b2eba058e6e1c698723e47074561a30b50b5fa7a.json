{"sha": "b2eba058e6e1c698723e47074561a30b50b5fa7a", "node_id": "C_kwDOAAsO6NoAKGIyZWJhMDU4ZTZlMWM2OTg3MjNlNDcwNzQ1NjFhMzBiNTBiNWZhN2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T10:25:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T10:25:13Z"}, "message": "Auto merge of #97121 - pvdrz:do-subdiagnostics-later, r=davidtwco\n\nAvoid double binding of subdiagnostics inside `#[derive(SessionDiagnostic)]`\n\nr? `@davidtwco`", "tree": {"sha": "cbdaf274005b5100ae9e9b6a0bf1ed59674ca392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbdaf274005b5100ae9e9b6a0bf1ed59674ca392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2eba058e6e1c698723e47074561a30b50b5fa7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eba058e6e1c698723e47074561a30b50b5fa7a", "html_url": "https://github.com/rust-lang/rust/commit/b2eba058e6e1c698723e47074561a30b50b5fa7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2eba058e6e1c698723e47074561a30b50b5fa7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d9f3859e0204e764161ee085a360274b5f3e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d9f3859e0204e764161ee085a360274b5f3e9a", "html_url": "https://github.com/rust-lang/rust/commit/43d9f3859e0204e764161ee085a360274b5f3e9a"}, {"sha": "8227e69018279353bd17ee3ca227e22ce6c03783", "url": "https://api.github.com/repos/rust-lang/rust/commits/8227e69018279353bd17ee3ca227e22ce6c03783", "html_url": "https://github.com/rust-lang/rust/commit/8227e69018279353bd17ee3ca227e22ce6c03783"}], "stats": {"total": 175, "additions": 91, "deletions": 84}, "files": [{"sha": "d7daee64d791e7f919e4765163f0fbe0e0457189", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 83, "deletions": 72, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=b2eba058e6e1c698723e47074561a30b50b5fa7a", "patch": "@@ -13,7 +13,7 @@ use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, Type};\n-use synstructure::Structure;\n+use synstructure::{BindingInfo, Structure};\n \n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n pub(crate) struct SessionDiagnosticDerive<'a> {\n@@ -71,55 +71,42 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     }\n                 };\n \n+                // Keep track of which fields are subdiagnostics or have no attributes.\n+                let mut subdiagnostics_or_empty = std::collections::HashSet::new();\n+\n                 // Generates calls to `span_label` and similar functions based on the attributes\n                 // on fields. Code for suggestions uses formatting machinery and the value of\n                 // other fields - because any given field can be referenced multiple times, it\n-                // should be accessed through a borrow. When passing fields to `set_arg` (which\n-                // happens below) for Fluent, we want to move the data, so that has to happen\n-                // in a separate pass over the fields.\n-                let attrs = structure.each(|field_binding| {\n-                    let field = field_binding.ast();\n-                    let result = field.attrs.iter().map(|attr| {\n-                        builder\n-                            .generate_field_attr_code(\n-                                attr,\n-                                FieldInfo {\n-                                    vis: &field.vis,\n-                                    binding: field_binding,\n-                                    ty: &field.ty,\n-                                    span: &field.span(),\n-                                },\n-                            )\n-                            .unwrap_or_else(|v| v.to_compile_error())\n-                    });\n-\n-                    quote! { #(#result);* }\n-                });\n+                // should be accessed through a borrow. When passing fields to `add_subdiagnostic`\n+                // or `set_arg` (which happens below) for Fluent, we want to move the data, so that\n+                // has to happen in a separate pass over the fields.\n+                let attrs = structure\n+                    .clone()\n+                    .filter(|field_binding| {\n+                        let attrs = &field_binding.ast().attrs;\n+\n+                        (!attrs.is_empty()\n+                            && attrs.iter().all(|attr| {\n+                                \"subdiagnostic\"\n+                                    != attr.path.segments.last().unwrap().ident.to_string()\n+                            }))\n+                            || {\n+                                subdiagnostics_or_empty.insert(field_binding.binding.clone());\n+                                false\n+                            }\n+                    })\n+                    .each(|field_binding| builder.generate_field_attrs_code(field_binding));\n \n-                // When generating `set_arg` calls, move data rather than borrow it to avoid\n-                // requiring clones - this must therefore be the last use of each field (for\n-                // example, any formatting machinery that might refer to a field should be\n-                // generated already).\n                 structure.bind_with(|_| synstructure::BindStyle::Move);\n-                let args = structure.each(|field_binding| {\n-                    let field = field_binding.ast();\n-                    // When a field has attributes like `#[label]` or `#[note]` then it doesn't\n-                    // need to be passed as an argument to the diagnostic. But when a field has no\n-                    // attributes then it must be passed as an argument to the diagnostic so that\n-                    // it can be referred to by Fluent messages.\n-                    if field.attrs.is_empty() {\n-                        let diag = &builder.diag;\n-                        let ident = field_binding.ast().ident.as_ref().unwrap();\n-                        quote! {\n-                            #diag.set_arg(\n-                                stringify!(#ident),\n-                                #field_binding\n-                            );\n-                        }\n-                    } else {\n-                        quote! {}\n-                    }\n-                });\n+                // When a field has attributes like `#[label]` or `#[note]` then it doesn't\n+                // need to be passed as an argument to the diagnostic. But when a field has no\n+                // attributes or a `#[subdiagnostic]` attribute then it must be passed as an\n+                // argument to the diagnostic so that it can be referred to by Fluent messages.\n+                let args = structure\n+                    .filter(|field_binding| {\n+                        subdiagnostics_or_empty.contains(&field_binding.binding)\n+                    })\n+                    .each(|field_binding| builder.generate_field_attrs_code(field_binding));\n \n                 let span = ast.span().unwrap();\n                 let (diag, sess) = (&builder.diag, &builder.sess);\n@@ -347,36 +334,60 @@ impl SessionDiagnosticDeriveBuilder {\n         Ok(tokens.drain(..).collect())\n     }\n \n-    fn generate_field_attr_code(\n-        &mut self,\n-        attr: &syn::Attribute,\n-        info: FieldInfo<'_>,\n-    ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n-        let field_binding = &info.binding.binding;\n+    fn generate_field_attrs_code(&mut self, binding_info: &BindingInfo<'_>) -> TokenStream {\n+        let field = binding_info.ast();\n+        let field_binding = &binding_info.binding;\n \n-        let inner_ty = FieldInnerTy::from_type(&info.ty);\n-        let name = attr.path.segments.last().unwrap().ident.to_string();\n-        let (binding, needs_destructure) = match (name.as_str(), &inner_ty) {\n-            // `primary_span` can accept a `Vec<Span>` so don't destructure that.\n-            (\"primary_span\", FieldInnerTy::Vec(_)) => (quote! { #field_binding.clone() }, false),\n-            _ => (quote! { *#field_binding }, true),\n-        };\n-\n-        let generated_code = self.generate_inner_field_code(\n-            attr,\n-            FieldInfo {\n-                vis: info.vis,\n-                binding: info.binding,\n-                ty: inner_ty.inner_type().unwrap_or(&info.ty),\n-                span: info.span,\n-            },\n-            binding,\n-        )?;\n+        let inner_ty = FieldInnerTy::from_type(&field.ty);\n \n-        if needs_destructure {\n-            Ok(inner_ty.with(field_binding, generated_code))\n+        // When generating `set_arg` or `add_subdiagnostic` calls, move data rather than\n+        // borrow it to avoid requiring clones - this must therefore be the last use of\n+        // each field (for example, any formatting machinery that might refer to a field\n+        // should be generated already).\n+        if field.attrs.is_empty() {\n+            let diag = &self.diag;\n+            let ident = field.ident.as_ref().unwrap();\n+            quote! {\n+                #diag.set_arg(\n+                    stringify!(#ident),\n+                    #field_binding\n+                );\n+            }\n         } else {\n-            Ok(generated_code)\n+            field\n+                .attrs\n+                .iter()\n+                .map(move |attr| {\n+                    let name = attr.path.segments.last().unwrap().ident.to_string();\n+                    let (binding, needs_destructure) = match (name.as_str(), &inner_ty) {\n+                        // `primary_span` can accept a `Vec<Span>` so don't destructure that.\n+                        (\"primary_span\", FieldInnerTy::Vec(_)) => {\n+                            (quote! { #field_binding.clone() }, false)\n+                        }\n+                        // `subdiagnostics` are not derefed because they are bound by value.\n+                        (\"subdiagnostic\", _) => (quote! { #field_binding }, true),\n+                        _ => (quote! { *#field_binding }, true),\n+                    };\n+\n+                    let generated_code = self\n+                        .generate_inner_field_code(\n+                            attr,\n+                            FieldInfo {\n+                                binding: binding_info,\n+                                ty: inner_ty.inner_type().unwrap_or(&field.ty),\n+                                span: &field.span(),\n+                            },\n+                            binding,\n+                        )\n+                        .unwrap_or_else(|v| v.to_compile_error());\n+\n+                    if needs_destructure {\n+                        inner_ty.with(field_binding, generated_code)\n+                    } else {\n+                        generated_code\n+                    }\n+                })\n+                .collect()\n         }\n     }\n "}, {"sha": "df01419c82a8eea2cbe1e02b4a2ee7cd20b7dcb0", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=b2eba058e6e1c698723e47074561a30b50b5fa7a", "patch": "@@ -303,7 +303,6 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n         let inner_ty = FieldInnerTy::from_type(&ast.ty);\n         let info = FieldInfo {\n-            vis: &ast.vis,\n             binding: binding,\n             ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n             span: &ast.span(),"}, {"sha": "636bcf1f7b1d930cce6b7b99bf07e50ebf2c2032", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=b2eba058e6e1c698723e47074561a30b50b5fa7a", "patch": "@@ -4,7 +4,7 @@ use proc_macro2::TokenStream;\n use quote::{format_ident, quote, ToTokens};\n use std::collections::BTreeSet;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple, Visibility};\n+use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple};\n use synstructure::BindingInfo;\n \n /// Checks whether the type name of `ty` matches `name`.\n@@ -158,7 +158,6 @@ impl<'ty> FieldInnerTy<'ty> {\n /// Field information passed to the builder. Deliberately omits attrs to discourage the\n /// `generate_*` methods from walking the attributes themselves.\n pub(crate) struct FieldInfo<'a> {\n-    pub(crate) vis: &'a Visibility,\n     pub(crate) binding: &'a BindingInfo<'a>,\n     pub(crate) ty: &'a Type,\n     pub(crate) span: &'a proc_macro2::Span,"}, {"sha": "c9da58aae5c860fb71abf38581b5c24194ef6b70", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2eba058e6e1c698723e47074561a30b50b5fa7a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b2eba058e6e1c698723e47074561a30b50b5fa7a", "patch": "@@ -254,23 +254,23 @@ struct AmbiguousPlus {\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0178\", slug = \"parser-maybe-recover-from-bad-type-plus\")]\n-struct BadTypePlus<'a> {\n+struct BadTypePlus {\n     pub ty: String,\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub sub: BadTypePlusSub<'a>,\n+    pub sub: BadTypePlusSub,\n }\n \n-#[derive(SessionSubdiagnostic, Clone, Copy)]\n-pub enum BadTypePlusSub<'a> {\n+#[derive(SessionSubdiagnostic)]\n+pub enum BadTypePlusSub {\n     #[suggestion(\n         slug = \"parser-add-paren\",\n         code = \"{sum_with_parens}\",\n         applicability = \"machine-applicable\"\n     )]\n     AddParen {\n-        sum_with_parens: &'a str,\n+        sum_with_parens: String,\n         #[primary_span]\n         span: Span,\n     },\n@@ -1289,11 +1289,9 @@ impl<'a> Parser<'a> {\n         let bounds = self.parse_generic_bounds(None)?;\n         let sum_span = ty.span.to(self.prev_token.span);\n \n-        let sum_with_parens: String;\n-\n         let sub = match ty.kind {\n             TyKind::Rptr(ref lifetime, ref mut_ty) => {\n-                sum_with_parens = pprust::to_string(|s| {\n+                let sum_with_parens = pprust::to_string(|s| {\n                     s.s.word(\"&\");\n                     s.print_opt_lifetime(lifetime);\n                     s.print_mutability(mut_ty.mutbl, false);\n@@ -1303,7 +1301,7 @@ impl<'a> Parser<'a> {\n                     s.pclose()\n                 });\n \n-                BadTypePlusSub::AddParen { sum_with_parens: &sum_with_parens, span: sum_span }\n+                BadTypePlusSub::AddParen { sum_with_parens, span: sum_span }\n             }\n             TyKind::Ptr(..) | TyKind::BareFn(..) => BadTypePlusSub::ForgotParen { span: sum_span },\n             _ => BadTypePlusSub::ExpectPath { span: sum_span },"}]}