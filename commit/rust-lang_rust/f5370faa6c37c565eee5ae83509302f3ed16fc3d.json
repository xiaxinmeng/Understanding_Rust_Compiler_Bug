{"sha": "f5370faa6c37c565eee5ae83509302f3ed16fc3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzcwZmFhNmMzN2M1NjVlZWU1YWU4MzUwOTMwMmYzZWQxNmZjM2Q=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-03T18:18:26Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-13T18:05:12Z"}, "message": "Add `CheckLiveDrops` pass", "tree": {"sha": "266fbee969d891433c92c57d719fcde5f7746800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266fbee969d891433c92c57d719fcde5f7746800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5370faa6c37c565eee5ae83509302f3ed16fc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5370faa6c37c565eee5ae83509302f3ed16fc3d", "html_url": "https://github.com/rust-lang/rust/commit/f5370faa6c37c565eee5ae83509302f3ed16fc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5370faa6c37c565eee5ae83509302f3ed16fc3d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77f046c699b8ecd2352246aec8f1a571187918d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77f046c699b8ecd2352246aec8f1a571187918d", "html_url": "https://github.com/rust-lang/rust/commit/a77f046c699b8ecd2352246aec8f1a571187918d"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "e4aa88e3c20a7d611c218c4a74e94cb05b21a891", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5370faa6c37c565eee5ae83509302f3ed16fc3d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5370faa6c37c565eee5ae83509302f3ed16fc3d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f5370faa6c37c565eee5ae83509302f3ed16fc3d", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::ty::{self, TyCtxt};\n pub use self::qualifs::Qualif;\n \n mod ops;\n+pub mod post_drop_elaboration;\n pub mod qualifs;\n mod resolver;\n pub mod validation;"}, {"sha": "226e0e2049ebd62a47818d324586309529c68650", "filename": "src/librustc_mir/transform/check_consts/post_drop_elaboration.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f5370faa6c37c565eee5ae83509302f3ed16fc3d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5370faa6c37c565eee5ae83509302f3ed16fc3d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=f5370faa6c37c565eee5ae83509302f3ed16fc3d", "patch": "@@ -0,0 +1,119 @@\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::{self, BasicBlock, Location};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_span::Span;\n+\n+use super::ops;\n+use super::qualifs::{NeedsDrop, Qualif};\n+use super::validation::Qualifs;\n+use super::ConstCx;\n+\n+/// Returns `true` if we should use the more precise live drop checker that runs after drop\n+/// elaboration.\n+pub fn checking_enabled(tcx: TyCtxt<'tcx>) -> bool {\n+    tcx.features().const_precise_live_drops\n+}\n+\n+/// Look for live drops in a const context.\n+///\n+/// This is separate from the rest of the const checking logic because it must run after drop\n+/// elaboration.\n+pub fn check_live_drops(tcx: TyCtxt<'tcx>, def_id: LocalDefId, body: &mir::Body<'tcx>) {\n+    let const_kind = tcx.hir().body_const_context(def_id);\n+    if const_kind.is_none() {\n+        return;\n+    }\n+\n+    if !checking_enabled(tcx) {\n+        return;\n+    }\n+\n+    let ccx = ConstCx {\n+        body,\n+        tcx,\n+        def_id: def_id.to_def_id(),\n+        const_kind,\n+        param_env: tcx.param_env(def_id),\n+    };\n+\n+    let mut visitor = CheckLiveDrops { ccx: &ccx, qualifs: Qualifs::default() };\n+\n+    visitor.visit_body(body);\n+}\n+\n+struct CheckLiveDrops<'mir, 'tcx> {\n+    ccx: &'mir ConstCx<'mir, 'tcx>,\n+    qualifs: Qualifs<'mir, 'tcx>,\n+}\n+\n+// So we can access `body` and `tcx`.\n+impl std::ops::Deref for CheckLiveDrops<'mir, 'tcx> {\n+    type Target = ConstCx<'mir, 'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.ccx\n+    }\n+}\n+\n+impl CheckLiveDrops<'mir, 'tcx> {\n+    fn check_live_drop(&self, span: Span) {\n+        ops::non_const(self.ccx, ops::LiveDrop, span);\n+    }\n+}\n+\n+impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n+    fn visit_basic_block_data(&mut self, bb: BasicBlock, block: &mir::BasicBlockData<'tcx>) {\n+        trace!(\"visit_basic_block_data: bb={:?} is_cleanup={:?}\", bb, block.is_cleanup);\n+\n+        // Ignore drop terminators in cleanup blocks.\n+        if block.is_cleanup {\n+            return;\n+        }\n+\n+        self.super_basic_block_data(bb, block);\n+    }\n+\n+    fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n+        trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n+\n+        match &terminator.kind {\n+            mir::TerminatorKind::Drop { location: dropped_place, .. } => {\n+                let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n+                if !NeedsDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n+                    return;\n+                }\n+\n+                if dropped_place.is_indirect() {\n+                    self.check_live_drop(terminator.source_info.span);\n+                    return;\n+                }\n+\n+                if self.qualifs.needs_drop(self.ccx, dropped_place.local, location) {\n+                    // Use the span where the dropped local was declared for the error.\n+                    let span = self.body.local_decls[dropped_place.local].source_info.span;\n+                    self.check_live_drop(span);\n+                }\n+            }\n+\n+            mir::TerminatorKind::DropAndReplace { .. } => span_bug!(\n+                terminator.source_info.span,\n+                \"`DropAndReplace` should be removed by drop elaboration\",\n+            ),\n+\n+            mir::TerminatorKind::Abort\n+            | mir::TerminatorKind::Call { .. }\n+            | mir::TerminatorKind::Assert { .. }\n+            | mir::TerminatorKind::FalseEdge { .. }\n+            | mir::TerminatorKind::FalseUnwind { .. }\n+            | mir::TerminatorKind::GeneratorDrop\n+            | mir::TerminatorKind::Goto { .. }\n+            | mir::TerminatorKind::InlineAsm { .. }\n+            | mir::TerminatorKind::Resume\n+            | mir::TerminatorKind::Return\n+            | mir::TerminatorKind::SwitchInt { .. }\n+            | mir::TerminatorKind::Unreachable\n+            | mir::TerminatorKind::Yield { .. } => {}\n+        }\n+    }\n+}"}, {"sha": "428a74bcdcbfba54599dbdf49723e40906ad5160", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5370faa6c37c565eee5ae83509302f3ed16fc3d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5370faa6c37c565eee5ae83509302f3ed16fc3d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f5370faa6c37c565eee5ae83509302f3ed16fc3d", "patch": "@@ -562,6 +562,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             // projections that cannot be `NeedsDrop`.\n             TerminatorKind::Drop { location: dropped_place, .. }\n             | TerminatorKind::DropAndReplace { location: dropped_place, .. } => {\n+                // If we are checking live drops after drop-elaboration, don't emit duplicate\n+                // errors here.\n+                if super::post_drop_elaboration::checking_enabled(self.tcx) {\n+                    return;\n+                }\n+\n                 let mut err_span = self.span;\n \n                 // Check to see if the type of this place can ever have a drop impl. If not, this"}]}