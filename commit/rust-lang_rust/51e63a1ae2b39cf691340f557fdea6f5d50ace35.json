{"sha": "51e63a1ae2b39cf691340f557fdea6f5d50ace35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTYzYTFhZTJiMzljZjY5MTM0MGY1NTdmZGVhNmY1ZDUwYWNlMzU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-02T13:43:58Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-02T13:43:58Z"}, "message": "Rustup PR #802", "tree": {"sha": "d61e3168a4a4dbf6c04458b4ae7174dd8e2629c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d61e3168a4a4dbf6c04458b4ae7174dd8e2629c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e63a1ae2b39cf691340f557fdea6f5d50ace35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e63a1ae2b39cf691340f557fdea6f5d50ace35", "html_url": "https://github.com/rust-lang/rust/commit/51e63a1ae2b39cf691340f557fdea6f5d50ace35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e63a1ae2b39cf691340f557fdea6f5d50ace35/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ab23703a1a6c4ff0e15a3b3e20284f6a9053fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ab23703a1a6c4ff0e15a3b3e20284f6a9053fb", "html_url": "https://github.com/rust-lang/rust/commit/44ab23703a1a6c4ff0e15a3b3e20284f6a9053fb"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "7c893ef207c9fbe2dfe49d18678f32341b5042b4", "filename": "src/types.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51e63a1ae2b39cf691340f557fdea6f5d50ace35/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e63a1ae2b39cf691340f557fdea6f5d50ace35/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=51e63a1ae2b39cf691340f557fdea6f5d50ace35", "patch": "@@ -2,16 +2,13 @@ use reexport::*;\n use rustc::lint::*;\n use rustc::middle::def;\n use rustc::ty;\n-use rustc::middle::const_eval::ConstVal::Integral;\n-use rustc_const_eval;\n use rustc_front::hir::*;\n use rustc_front::intravisit::{FnKind, Visitor, walk_ty};\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::codemap::Span;\n use utils::*;\n \n-\n /// Handles all the linting of funky types\n #[allow(missing_copy_implementations)]\n pub struct TypePass;\n@@ -845,7 +842,7 @@ impl Ord for FullInt {\n \n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(FullInt, FullInt)> {\n-    use rustc::middle::ty::TypeVariants::{TyInt, TyUint};\n+    use rustc::ty::TypeVariants::{TyInt, TyUint};\n     use syntax::ast::UintTy;\n     use syntax::ast::IntTy;\n     use std::*;\n@@ -874,15 +871,17 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n }\n \n fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n-    use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n-    use rustc_const_eval::*;\n+    use rustc::middle::const_val::ConstVal::*;\n+    use rustc_const_eval::EvalHint::ExprTypeChecked;\n+    use rustc_const_eval::eval_const_expr_partial;\n+    use rustc_const_math::ConstInt;\n \n-    match const_eval::eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None) {\n+    match eval_const_expr_partial(cx.tcx, expr, ExprTypeChecked, None) {\n         Ok(val) => {\n             if let Integral(const_int) = val {\n                 Some(match const_int.erase_type() {\n-                    InferSigned(x) => FullInt::S(x as i64),\n-                    Infer(x) => FullInt::U(x as u64),\n+                    ConstInt::InferSigned(x) => FullInt::S(x as i64),\n+                    ConstInt::Infer(x) => FullInt::U(x as u64),\n                     _ => unreachable!(),\n                 })\n             } else {"}]}