{"sha": "d1f046fe895d9b7c5e5480d0128f0d161bedcba8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZjA0NmZlODk1ZDliN2M1ZTU0ODBkMDEyOGYwZDE2MWJlZGNiYTg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-21T04:25:58Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-21T19:01:44Z"}, "message": "Crates and source files", "tree": {"sha": "5b6a96155e99668e679b86242df75aaf02cd7424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6a96155e99668e679b86242df75aaf02cd7424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1f046fe895d9b7c5e5480d0128f0d161bedcba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f046fe895d9b7c5e5480d0128f0d161bedcba8", "html_url": "https://github.com/rust-lang/rust/commit/d1f046fe895d9b7c5e5480d0128f0d161bedcba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1f046fe895d9b7c5e5480d0128f0d161bedcba8/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcc0f3850f08edee0cb2d477d2de56739ef42ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcc0f3850f08edee0cb2d477d2de56739ef42ab", "html_url": "https://github.com/rust-lang/rust/commit/cdcc0f3850f08edee0cb2d477d2de56739ef42ab"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "d41a8dc964095ebb3c270b3c701615f30e482577", "filename": "src/doc/reference/src/crates-and-source-files.md", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d1f046fe895d9b7c5e5480d0128f0d161bedcba8/src%2Fdoc%2Freference%2Fsrc%2Fcrates-and-source-files.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1f046fe895d9b7c5e5480d0128f0d161bedcba8/src%2Fdoc%2Freference%2Fsrc%2Fcrates-and-source-files.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fcrates-and-source-files.md?ref=d1f046fe895d9b7c5e5480d0128f0d161bedcba8", "patch": "@@ -13,24 +13,16 @@ semantic rules\n that have a *dynamic interpretation* govern the behavior of the program at\n run-time.\n \n-[^phase-distinction]: This distinction would also exist in an interpreter.\n-    Static checks like syntactic analysis, type checking, and lints should\n-    happen before the program is executed regardless of when it is executed.\n-\n The compilation model centers on artifacts called _crates_. Each compilation\n processes a single crate in source form, and if successful, produces a single\n crate in binary form: either an executable or some sort of\n library.[^cratesourcefile]\n \n-[^cratesourcefile]: A crate is somewhat analogous to an *assembly* in the\n-    ECMA-335 CLI model, a *library* in the SML/NJ Compilation Manager, a *unit*\n-    in the Owens and Flatt module system, or a *configuration* in Mesa.\n-\n A _crate_ is a unit of compilation and linking, as well as versioning,\n distribution and runtime loading. A crate contains a _tree_ of nested\n-[module](#modules) scopes. The top level of this tree is a module that is\n+[module] scopes. The top level of this tree is a module that is\n anonymous (from the point of view of paths within the module) and any item\n-within a crate has a canonical [module path](#paths) denoting its location\n+within a crate has a canonical [module path] denoting its location\n within the crate's module tree.\n \n The Rust compiler is always invoked with a single source file as input, and\n@@ -42,16 +34,16 @@ A Rust source file describes a module, the name and location of which &mdash;\n in the module tree of the current crate &mdash; are defined from outside the\n source file: either by an explicit `mod_item` in a referencing source file, or\n by the name of the crate itself. Every source file is a module, but not every\n-module needs its own source file: [module definitions](#modules) can be nested\n+module needs its own source file: [module definitions][module] can be nested\n within one file.\n \n Each source file contains a sequence of zero or more `item` definitions, and\n-may optionally begin with any number of [attributes](#items-and-attributes)\n+may optionally begin with any number of [attributes]\n that apply to the containing module, most of which influence the behavior of\n the compiler. The anonymous crate module can have additional attributes that\n apply to the crate as a whole.\n \n-```no_run\n+```rust,no_run\n // Specify the crate name.\n #![crate_name = \"projx\"]\n \n@@ -65,4 +57,17 @@ apply to the crate as a whole.\n \n A crate that contains a `main` function can be compiled to an executable. If a\n `main` function is present, its return type must be `()`\n-(\"[unit](#tuple-types)\") and it must take no arguments.\n+(\"[unit]\") and it must take no arguments.\n+\n+[^phase-distinction]: This distinction would also exist in an interpreter.\n+    Static checks like syntactic analysis, type checking, and lints should\n+    happen before the program is executed regardless of when it is executed.\n+\n+[^cratesourcefile]: A crate is somewhat analogous to an *assembly* in the\n+    ECMA-335 CLI model, a *library* in the SML/NJ Compilation Manager, a *unit*\n+    in the Owens and Flatt module system, or a *configuration* in Mesa.\n+\n+[module]: items.html#modules\n+[module path]: paths.html\n+[attributes]: items-and-attributes.html\n+[unit]: types.html#tuple-types\n\\ No newline at end of file"}]}