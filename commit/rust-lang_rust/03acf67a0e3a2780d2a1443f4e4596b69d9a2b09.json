{"sha": "03acf67a0e3a2780d2a1443f4e4596b69d9a2b09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYWNmNjdhMGUzYTI3ODBkMmExNDQzZjRlNDU5NmI2OWQ5YTJiMDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-07T11:45:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-07T11:45:55Z"}, "message": "Use multiple codegen units", "tree": {"sha": "bb14d50e73d03a2541a3be3c178c7095d09325d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb14d50e73d03a2541a3be3c178c7095d09325d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03acf67a0e3a2780d2a1443f4e4596b69d9a2b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03acf67a0e3a2780d2a1443f4e4596b69d9a2b09", "html_url": "https://github.com/rust-lang/rust/commit/03acf67a0e3a2780d2a1443f4e4596b69d9a2b09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03acf67a0e3a2780d2a1443f4e4596b69d9a2b09/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ea72c2bd8488aa007919dbfb97fde9e13f9020", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ea72c2bd8488aa007919dbfb97fde9e13f9020", "html_url": "https://github.com/rust-lang/rust/commit/36ea72c2bd8488aa007919dbfb97fde9e13f9020"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "29e498db750061fa89c6e5636b8653b524ec207d", "filename": "src/driver.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/03acf67a0e3a2780d2a1443f4e4596b69d9a2b09/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03acf67a0e3a2780d2a1443f4e4596b69d9a2b09/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=03acf67a0e3a2780d2a1443f4e4596b69d9a2b09", "patch": "@@ -72,7 +72,9 @@ fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n         .flatten()\n-        .collect::<FxHashMap<_, (_, _)>>();\n+        .collect::<FxHashMap<_, (_, _)>>()\n+        .into_iter()\n+        .collect::<Vec<(_, (_, _))>>();\n \n     time(tcx.sess, \"codegen mono items\", || {\n         codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n@@ -208,36 +210,35 @@ fn run_aot(\n         };\n \n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n-    let mono_items = cgus\n-        .iter()\n-        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n-        .flatten()\n-        .collect::<FxHashMap<_, (_, _)>>();\n \n-    let mut module = new_module(\"some_file\".to_string());\n+    let modules = time(tcx.sess, \"codegen mono items\", move || {\n+        cgus.iter().map(|cgu| {\n+            let mono_items = cgu.items_in_deterministic_order(tcx);\n \n-    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n-        let debug = DebugContext::new(\n-            tcx,\n-            module.target_config().pointer_type().bytes() as u8,\n-        );\n-        Some(debug)\n-    } else {\n-        None\n-    };\n+            let mut module = new_module(cgu.name().as_str().to_string());\n \n-    time(tcx.sess, \"codegen mono items\", || {\n-        codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n-    });\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n+            let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n+                let debug = DebugContext::new(\n+                    tcx,\n+                    module.target_config().pointer_type().bytes() as u8,\n+                );\n+                Some(debug)\n+            } else {\n+                None\n+            };\n \n-    let modules = vec![emit_module(\n-        tcx,\n-        \"some_file\".to_string(),\n-        ModuleKind::Regular,\n-        module,\n-        debug,\n-    )];\n+            codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n+            crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n+\n+            emit_module(\n+                tcx,\n+                cgu.name().as_str().to_string(),\n+                ModuleKind::Regular,\n+                module,\n+                debug,\n+            )\n+        }).collect::<Vec<_>>()\n+    });\n \n     tcx.sess.abort_if_errors();\n \n@@ -310,12 +311,12 @@ fn codegen_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug_context: Option<&mut DebugContext<'tcx>>,\n-    mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n+    mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n     let mut cx = CodegenCx::new(tcx, module, debug_context);\n \n     tcx.sess.time(\"predefine functions\", || {\n-        for (&mono_item, &(linkage, visibility)) in &mono_items {\n+        for &(mono_item, (linkage, visibility)) in &mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let (name, sig) ="}]}