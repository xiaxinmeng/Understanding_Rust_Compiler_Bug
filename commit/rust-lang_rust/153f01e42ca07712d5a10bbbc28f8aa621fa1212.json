{"sha": "153f01e42ca07712d5a10bbbc28f8aa621fa1212", "node_id": "C_kwDOAAsO6NoAKDE1M2YwMWU0MmNhMDc3MTJkNWExMGJiYmMyOGY4YWE2MjFmYTEyMTI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-08T11:37:25Z"}, "committer": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-08T12:11:15Z"}, "message": "Remove the `infer_static_outlives_requirements` feature", "tree": {"sha": "70e9af3f28381e9f2feb760a31d1a0416697936b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e9af3f28381e9f2feb760a31d1a0416697936b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/153f01e42ca07712d5a10bbbc28f8aa621fa1212", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEClCZYSKPPkQPouAvN5zu/dY+XdcFAmKgkeMACgkQN5zu/dY+\nXdfofg//RL4iFoKLAMCcsF2y+8xZ1leP8I/JOU7HSEedEJ8HZ5TFCC0NvJB7XYMA\nHvSVOg/X8CyLKXdiTgm5JBKypU3h5HfeqA4uKcO/p9XuUWZiYvf4rfYcWPDG5YUJ\nP7TiGKvlOayeGEH3bWx6RPaiKj240xUbwiLSjP7QCvutP3hXJw+BWbAb1qO5ErFy\n9lhIYiFGWVwsA8AMFlwt7RKWb6C4kXTsIwUYThSGB9+WVXnsZVJv1d9uijrakxZz\nm5NOyL0wRRGXqgRco8rSP2IOPIG9TpzrIyO7wDesiG6PWAd0ciAeGVmf8pT7Rctb\nfHb6kPqCpzWShMO0H27rb+9ejq6Kd7KDlIVOkkjpqOaXVjZM9+hDwiZVtryHbvq8\neOJQ8L6izpzctlFPzITGPKOl9qhCUri24OFZZWjdZ0mkrYXAAAV3Ssp3jUG4b4cC\nSrwsta875xIswBQ05cU7faaxpfJb6b9L5MaOskSPpThvPf62zuPr0mA3n48rcCea\nZ35k37NcvcTbCqfz5JzIzzzU8unH2mSCUaqa2kh6Guf1PAMyhWZBmMn3UUOvURQh\nEfoUa81rNlCYJxGPOu11dFLgM0NxT2dQvbGvg/CqB1D8IspngBpOg0dr7IflSqiR\n+h6LFVe3VuXglT03A/2ywoUtqZlIGMSJlzG6pzK9JzrV/bIz+fw=\n=Fsm2\n-----END PGP SIGNATURE-----", "payload": "tree 70e9af3f28381e9f2feb760a31d1a0416697936b\nparent d8f07654e83156de0da1807e2986a79cde04596c\nauthor Yuki Okushi <jtitor@2k36.org> 1654688245 +0900\ncommitter Yuki Okushi <jtitor@2k36.org> 1654690275 +0900\n\nRemove the `infer_static_outlives_requirements` feature\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/153f01e42ca07712d5a10bbbc28f8aa621fa1212", "html_url": "https://github.com/rust-lang/rust/commit/153f01e42ca07712d5a10bbbc28f8aa621fa1212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/153f01e42ca07712d5a10bbbc28f8aa621fa1212/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f07654e83156de0da1807e2986a79cde04596c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f07654e83156de0da1807e2986a79cde04596c", "html_url": "https://github.com/rust-lang/rust/commit/d8f07654e83156de0da1807e2986a79cde04596c"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "306945ce17ac8440883b5e84801ae2394b0bfb01", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=153f01e42ca07712d5a10bbbc28f8aa621fa1212", "patch": "@@ -411,8 +411,6 @@ declare_features! (\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n-    /// Allows inferring `'static` outlives requirements (RFC 2093).\n-    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n     /// Allows associated types in inherent impls.\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n     /// Allow anonymous constants from an inline `const` block"}, {"sha": "f9c34e48b8f697233887f02c5ad6a766b65551d7", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=153f01e42ca07712d5a10bbbc28f8aa621fa1212", "patch": "@@ -109,6 +109,9 @@ declare_features! (\n     /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n     (removed, in_band_lifetimes, \"1.23.0\", Some(44524), None,\n      Some(\"removed due to unsolved ergonomic questions and added lifetime resolution complexity\")),\n+    /// Allows inferring `'static` outlives requirements (RFC 2093).\n+    (removed, infer_static_outlives_requirements, \"1.63.0\", Some(54185), None,\n+     Some(\"removed as it caused some confusion and discussion was inactive for years\")),\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (removed, lazy_normalization_consts, \"1.46.0\", Some(72219), None, Some(\"superseded by `generic_const_exprs`\")),\n     /// Allows using the `#[link_args]` attribute."}, {"sha": "4886ec175fe7ff2fe54a3c75ce2569623ee8ab1f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=153f01e42ca07712d5a10bbbc28f8aa621fa1212", "patch": "@@ -2113,7 +2113,6 @@ impl ExplicitOutlivesRequirements {\n         tcx: TyCtxt<'tcx>,\n         bounds: &hir::GenericBounds<'_>,\n         inferred_outlives: &[ty::Region<'tcx>],\n-        infer_static: bool,\n     ) -> Vec<(usize, Span)> {\n         use rustc_middle::middle::resolve_lifetime::Region;\n \n@@ -2123,9 +2122,6 @@ impl ExplicitOutlivesRequirements {\n             .filter_map(|(i, bound)| {\n                 if let hir::GenericBound::Outlives(lifetime) = bound {\n                     let is_inferred = match tcx.named_region(lifetime.hir_id) {\n-                        Some(Region::Static) if infer_static => {\n-                            inferred_outlives.iter().any(|r| matches!(**r, ty::ReStatic))\n-                        }\n                         Some(Region::EarlyBound(index, ..)) => inferred_outlives.iter().any(|r| {\n                             if let ty::ReEarlyBound(ebr) = **r { ebr.index == index } else { false }\n                         }),\n@@ -2201,7 +2197,6 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         use rustc_middle::middle::resolve_lifetime::Region;\n \n-        let infer_static = cx.tcx.features().infer_static_outlives_requirements;\n         let def_id = item.def_id;\n         if let hir::ItemKind::Struct(_, ref hir_generics)\n         | hir::ItemKind::Enum(_, ref hir_generics)\n@@ -2262,12 +2257,8 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     continue;\n                 }\n \n-                let bound_spans = self.collect_outlives_bound_spans(\n-                    cx.tcx,\n-                    bounds,\n-                    &relevant_lifetimes,\n-                    infer_static,\n-                );\n+                let bound_spans =\n+                    self.collect_outlives_bound_spans(cx.tcx, bounds, &relevant_lifetimes);\n                 bound_count += bound_spans.len();\n \n                 let drop_predicate = bound_spans.len() == bounds.len();"}, {"sha": "14e3048cadc62453499e56c798857e743786a98f", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153f01e42ca07712d5a10bbbc28f8aa621fa1212/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=153f01e42ca07712d5a10bbbc28f8aa621fa1212", "patch": "@@ -21,7 +21,7 @@ pub fn insert_outlives_predicate<'tcx>(\n ) {\n     // If the `'a` region is bound within the field type itself, we\n     // don't want to propagate this constraint to the header.\n-    if !is_free_region(tcx, outlived_region) {\n+    if !is_free_region(outlived_region) {\n         return;\n     }\n \n@@ -119,7 +119,7 @@ pub fn insert_outlives_predicate<'tcx>(\n         }\n \n         GenericArgKind::Lifetime(r) => {\n-            if !is_free_region(tcx, r) {\n+            if !is_free_region(r) {\n                 return;\n             }\n             required_predicates.entry(ty::OutlivesPredicate(kind, outlived_region)).or_insert(span);\n@@ -131,7 +131,7 @@ pub fn insert_outlives_predicate<'tcx>(\n     }\n }\n \n-fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n+fn is_free_region(region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match *region {\n         // These correspond to `T: 'a` relationships:\n@@ -144,13 +144,12 @@ fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n         ty::ReEarlyBound(_) => true,\n \n         // These correspond to `T: 'static` relationships which can be\n-        // rather surprising. We are therefore putting this behind a\n-        // feature flag:\n+        // rather surprising.\n         //\n         //     struct Foo<'a, T> {\n         //         field: &'static T, // this would generate a ReStatic\n         //     }\n-        ty::ReStatic => tcx.sess.features_untracked().infer_static_outlives_requirements,\n+        ty::ReStatic => false,\n \n         // Late-bound regions can appear in `fn` types:\n         //"}]}