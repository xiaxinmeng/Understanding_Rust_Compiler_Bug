{"sha": "ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjhhMWQwYzk2Y2ZhYTNlYzE1MmYzZjJmM2I5MzhhNDM2ZGYxZGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T11:59:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T11:59:49Z"}, "message": "Reduce code duplication", "tree": {"sha": "6c63a377946feb6a4f35029229ec5b00507bbc6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c63a377946feb6a4f35029229ec5b00507bbc6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd", "html_url": "https://github.com/rust-lang/rust/commit/ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7566d7da8ab035a286f82a60b8e2c679158bc56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7566d7da8ab035a286f82a60b8e2c679158bc56c", "html_url": "https://github.com/rust-lang/rust/commit/7566d7da8ab035a286f82a60b8e2c679158bc56c"}], "stats": {"total": 328, "additions": 147, "deletions": 181}, "files": [{"sha": "c1cbfcc2cf6e305e25d9f9c6ebd46746dd544740", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 147, "deletions": 181, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=ea68a1d0c96cfaa3ec152f3f2f3b938a436df1dd", "patch": "@@ -324,10 +324,10 @@ mod tests {\n     ///  * a diagnostic is produced\n     ///  * this diagnostic touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n-    fn check_apply_diagnostic_fix_from_position(ra_fixture: &str, after: &str) {\n-        let after = trim_indent(after);\n+    fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let after = trim_indent(ra_fixture_after);\n \n-        let (analysis, file_position) = analysis_and_position(ra_fixture);\n+        let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n         let diagnostic = analysis.diagnostics(file_position.file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n@@ -348,21 +348,6 @@ mod tests {\n         );\n     }\n \n-    fn check_apply_diagnostic_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, file_id) = single_file(ra_fixture_before);\n-        let before = analysis.file_text(file_id).unwrap();\n-        let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n-        let mut fix = diagnostic.fix.unwrap();\n-        let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n-        let actual = {\n-            let mut actual = before.to_string();\n-            edit.apply(&mut actual);\n-            actual\n-        };\n-        assert_eq_text!(ra_fixture_after, &actual);\n-    }\n-\n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n     fn check_no_diagnostic_for_target_file(ra_fixture: &str) {\n@@ -379,96 +364,99 @@ mod tests {\n \n     #[test]\n     fn test_wrap_return_type() {\n-        let before = r#\"\n-            //- /main.rs\n-            use core::result::Result::{self, Ok, Err};\n+        check_fix(\n+            r#\"\n+//- /main.rs\n+use core::result::Result::{self, Ok, Err};\n \n-            fn div(x: i32, y: i32) -> Result<i32, ()> {\n-                if y == 0 {\n-                    return Err(());\n-                }\n-                x / y<|>\n-            }\n-            //- /core/lib.rs\n-            pub mod result {\n-                pub enum Result<T, E> { Ok(T), Err(E) }\n-            }\n-        \"#;\n-        let after = r#\"\n-            use core::result::Result::{self, Ok, Err};\n+fn div(x: i32, y: i32) -> Result<i32, ()> {\n+    if y == 0 {\n+        return Err(());\n+    }\n+    x / y<|>\n+}\n+//- /core/lib.rs\n+pub mod result {\n+    pub enum Result<T, E> { Ok(T), Err(E) }\n+}\n+\"#,\n+            r#\"\n+use core::result::Result::{self, Ok, Err};\n \n-            fn div(x: i32, y: i32) -> Result<i32, ()> {\n-                if y == 0 {\n-                    return Err(());\n-                }\n-                Ok(x / y)\n-            }\n-        \"#;\n-        check_apply_diagnostic_fix_from_position(before, after);\n+fn div(x: i32, y: i32) -> Result<i32, ()> {\n+    if y == 0 {\n+        return Err(());\n+    }\n+    Ok(x / y)\n+}\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_wrap_return_type_handles_generic_functions() {\n-        let before = r#\"\n+        check_fix(\n+            r#\"\n             //- /main.rs\n-            use core::result::Result::{self, Ok, Err};\n+use core::result::Result::{self, Ok, Err};\n \n-            fn div<T>(x: T) -> Result<T, i32> {\n-                if x == 0 {\n-                    return Err(7);\n-                }\n-                <|>x\n-            }\n-            //- /core/lib.rs\n-            pub mod result {\n-                pub enum Result<T, E> { Ok(T), Err(E) }\n-            }\n-        \"#;\n-        let after = r#\"\n-            use core::result::Result::{self, Ok, Err};\n+fn div<T>(x: T) -> Result<T, i32> {\n+    if x == 0 {\n+        return Err(7);\n+    }\n+    <|>x\n+}\n+//- /core/lib.rs\n+pub mod result {\n+    pub enum Result<T, E> { Ok(T), Err(E) }\n+}\n+\"#,\n+            r#\"\n+use core::result::Result::{self, Ok, Err};\n \n-            fn div<T>(x: T) -> Result<T, i32> {\n-                if x == 0 {\n-                    return Err(7);\n-                }\n-                Ok(x)\n-            }\n-        \"#;\n-        check_apply_diagnostic_fix_from_position(before, after);\n+fn div<T>(x: T) -> Result<T, i32> {\n+    if x == 0 {\n+        return Err(7);\n+    }\n+    Ok(x)\n+}\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_wrap_return_type_handles_type_aliases() {\n-        let before = r#\"\n-            //- /main.rs\n-            use core::result::Result::{self, Ok, Err};\n+        check_fix(\n+            r#\"\n+//- /main.rs\n+use core::result::Result::{self, Ok, Err};\n \n-            type MyResult<T> = Result<T, ()>;\n+type MyResult<T> = Result<T, ()>;\n \n-            fn div(x: i32, y: i32) -> MyResult<i32> {\n-                if y == 0 {\n-                    return Err(());\n-                }\n-                x <|>/ y\n-            }\n-            //- /core/lib.rs\n-            pub mod result {\n-                pub enum Result<T, E> { Ok(T), Err(E) }\n-            }\n-        \"#;\n-        let after = r#\"\n-            use core::result::Result::{self, Ok, Err};\n+fn div(x: i32, y: i32) -> MyResult<i32> {\n+    if y == 0 {\n+        return Err(());\n+    }\n+    x <|>/ y\n+}\n+//- /core/lib.rs\n+pub mod result {\n+    pub enum Result<T, E> { Ok(T), Err(E) }\n+}\n+\"#,\n+            r#\"\n+use core::result::Result::{self, Ok, Err};\n \n-            type MyResult<T> = Result<T, ()>;\n+type MyResult<T> = Result<T, ()>;\n \n-            fn div(x: i32, y: i32) -> MyResult<i32> {\n-                if y == 0 {\n-                    return Err(());\n-                }\n-                Ok(x / y)\n-            }\n-        \"#;\n-        check_apply_diagnostic_fix_from_position(before, after);\n+fn div(x: i32, y: i32) -> MyResult<i32> {\n+    if y == 0 {\n+        return Err(());\n+    }\n+    Ok(x / y)\n+}\n+\"#,\n+        );\n     }\n \n     #[test]\n@@ -516,116 +504,97 @@ mod tests {\n \n     #[test]\n     fn test_fill_struct_fields_empty() {\n-        let before = r\"\n-            struct TestStruct {\n-                one: i32,\n-                two: i64,\n-            }\n+        check_fix(\n+            r#\"\n+struct TestStruct { one: i32, two: i64 }\n \n-            fn test_fn() {\n-                let s = TestStruct{};\n-            }\n-        \";\n-        let after = r\"\n-            struct TestStruct {\n-                one: i32,\n-                two: i64,\n-            }\n+fn test_fn() {\n+    let s = TestStruct {<|>};\n+}\n+\"#,\n+            r#\"\n+struct TestStruct { one: i32, two: i64 }\n \n-            fn test_fn() {\n-                let s = TestStruct{ one: (), two: ()};\n-            }\n-        \";\n-        check_apply_diagnostic_fix(before, after);\n+fn test_fn() {\n+    let s = TestStruct { one: (), two: ()};\n+}\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fill_struct_fields_self() {\n-        let before = r\"\n-            struct TestStruct {\n-                one: i32,\n-            }\n+        check_fix(\n+            r#\"\n+struct TestStruct { one: i32 }\n \n-            impl TestStruct {\n-                fn test_fn() {\n-                    let s = Self {};\n-                }\n-            }\n-        \";\n-        let after = r\"\n-            struct TestStruct {\n-                one: i32,\n-            }\n+impl TestStruct {\n+    fn test_fn() { let s = Self {<|>}; }\n+}\n+\"#,\n+            r#\"\n+struct TestStruct { one: i32 }\n \n-            impl TestStruct {\n-                fn test_fn() {\n-                    let s = Self { one: ()};\n-                }\n-            }\n-        \";\n-        check_apply_diagnostic_fix(before, after);\n+impl TestStruct {\n+    fn test_fn() { let s = Self { one: ()}; }\n+}\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fill_struct_fields_enum() {\n-        let before = r\"\n-            enum Expr {\n-                Bin { lhs: Box<Expr>, rhs: Box<Expr> }\n-            }\n+        check_fix(\n+            r#\"\n+enum Expr {\n+    Bin { lhs: Box<Expr>, rhs: Box<Expr> }\n+}\n \n-            impl Expr {\n-                fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-                    Expr::Bin { }\n-                }\n-            }\n-        \";\n-        let after = r\"\n-            enum Expr {\n-                Bin { lhs: Box<Expr>, rhs: Box<Expr> }\n-            }\n+impl Expr {\n+    fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n+        Expr::Bin {<|> }\n+    }\n+}\n+\"#,\n+            r#\"\n+enum Expr {\n+    Bin { lhs: Box<Expr>, rhs: Box<Expr> }\n+}\n \n-            impl Expr {\n-                fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-                    Expr::Bin { lhs: (), rhs: () }\n-                }\n-            }\n-        \";\n-        check_apply_diagnostic_fix(before, after);\n+impl Expr {\n+    fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n+        Expr::Bin { lhs: (), rhs: () }\n+    }\n+}\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fill_struct_fields_partial() {\n-        let before = r\"\n-            struct TestStruct {\n-                one: i32,\n-                two: i64,\n-            }\n+        check_fix(\n+            r#\"\n+struct TestStruct { one: i32, two: i64 }\n \n-            fn test_fn() {\n-                let s = TestStruct{ two: 2 };\n-            }\n-        \";\n-        let after = r\"\n-            struct TestStruct {\n-                one: i32,\n-                two: i64,\n-            }\n+fn test_fn() {\n+    let s = TestStruct{ two: 2<|> };\n+}\n+\"#,\n+            r\"\n+struct TestStruct { one: i32, two: i64 }\n \n-            fn test_fn() {\n-                let s = TestStruct{ two: 2, one: () };\n-            }\n-        \";\n-        check_apply_diagnostic_fix(before, after);\n+fn test_fn() {\n+    let s = TestStruct{ two: 2, one: () };\n+}\n+\",\n+        );\n     }\n \n     #[test]\n     fn test_fill_struct_fields_no_diagnostic() {\n         check_no_diagnostic(\n             r\"\n-            struct TestStruct {\n-                one: i32,\n-                two: i64,\n-            }\n+            struct TestStruct { one: i32, two: i64 }\n \n             fn test_fn() {\n                 let one = 1;\n@@ -639,10 +608,7 @@ mod tests {\n     fn test_fill_struct_fields_no_diagnostic_on_spread() {\n         check_no_diagnostic(\n             r\"\n-            struct TestStruct {\n-                one: i32,\n-                two: i64,\n-            }\n+            struct TestStruct { one: i32, two: i64 }\n \n             fn test_fn() {\n                 let one = 1;\n@@ -855,10 +821,10 @@ fn main() {\n \n     #[test]\n     fn test_add_field_from_usage() {\n-        check_apply_diagnostic_fix(\n+        check_fix(\n             r\"\n fn main() {\n-    Foo { bar: 3, baz: false};\n+    Foo { bar: 3, baz<|>: false};\n }\n struct Foo {\n     bar: i32"}]}