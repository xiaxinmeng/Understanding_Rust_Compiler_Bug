{"sha": "bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODE2YTJmZTA4YzZkNDBlYTM1NjMwNmVmNGM3NTBkMzY2N2RjM2Q=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2018-04-09T18:46:54Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2018-04-20T19:43:34Z"}, "message": "Fix revision support for UI tests.\n\nFixes #48878", "tree": {"sha": "9c54c0d4b2088021c0e7fad838634168540acfde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c54c0d4b2088021c0e7fad838634168540acfde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "html_url": "https://github.com/rust-lang/rust/commit/bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4", "html_url": "https://github.com/rust-lang/rust/commit/05dc5e7d9566115416f6d0b84cc1c71bcf2c8cf4"}], "stats": {"total": 139, "additions": 68, "deletions": 71}, "files": [{"sha": "4fc11daaa3afa0de5758d8c046f433467e571299", "filename": "src/test/ui/update-references.sh", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "patch": "@@ -31,24 +31,17 @@ MYDIR=$(dirname $0)\n BUILD_DIR=\"$1\"\n shift\n \n+shopt -s nullglob\n+\n while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDERR_NLL_NAME=\"${1/%.rs/.nll.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    for EXT in \"stderr\" \"stdout\"; do\n+        for OUT_NAME in $BUILD_DIR/${1%.rs}.*$EXT; do\n+            OUT_BASE=`basename \"$OUT_NAME\"`\n+            if ! (diff $OUT_NAME $MYDIR/$OUT_BASE >& /dev/null); then\n+                echo updating $MYDIR/$OUT_BASE\n+                cp $OUT_NAME $MYDIR\n+            fi\n+        done\n+    done\n     shift\n-    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDOUT_NAME\n-        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n-    fi\n-    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDERR_NAME\n-        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n-    fi\n-    if [ -f $BUILD_DIR/$STDERR_NLL_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDERR_NLL_NAME\n-        cp $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME\n-    fi\n done"}, {"sha": "4d1fca8207b9ac0ce5eb811c32978d59728ca2ed", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "patch": "@@ -26,7 +26,7 @@ use std::collections::VecDeque;\n use std::collections::HashMap;\n use std::collections::HashSet;\n use std::env;\n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::fs::{self, create_dir_all, File};\n use std::fmt;\n use std::io::prelude::*;\n@@ -72,6 +72,26 @@ impl Mismatch {\n     }\n }\n \n+trait PathBufExt {\n+    /// Append an extension to the path, even if it already has one.\n+    fn with_extra_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf;\n+}\n+\n+impl PathBufExt for PathBuf {\n+    fn with_extra_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {\n+        if extension.as_ref().len() == 0 {\n+            self.clone()\n+        } else {\n+            let mut fname = self.file_name().unwrap().to_os_string();\n+            if !extension.as_ref().to_str().unwrap().starts_with(\".\") {\n+                fname.push(\".\");\n+            }\n+            fname.push(extension);\n+            self.with_file_name(fname)\n+        }\n+    }\n+}\n+\n // Produces a diff between the expected output and actual output.\n pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n     let mut line_number = 1;\n@@ -1725,20 +1745,14 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn make_exe_name(&self) -> PathBuf {\n-        let mut f = self.output_base_name();\n+        let mut f = self.output_base_name_stage();\n         // FIXME: This is using the host architecture exe suffix, not target!\n         if self.config.target.contains(\"emscripten\") {\n-            let mut fname = f.file_name().unwrap().to_os_string();\n-            fname.push(\".js\");\n-            f.set_file_name(&fname);\n+            f = f.with_extra_extension(\"js\");\n         } else if self.config.target.contains(\"wasm32\") {\n-            let mut fname = f.file_name().unwrap().to_os_string();\n-            fname.push(\".wasm\");\n-            f.set_file_name(&fname);\n+            f = f.with_extra_extension(\"wasm\");\n         } else if !env::consts::EXE_SUFFIX.is_empty() {\n-            let mut fname = f.file_name().unwrap().to_os_string();\n-            fname.push(env::consts::EXE_SUFFIX);\n-            f.set_file_name(&fname);\n+            f = f.with_extra_extension(env::consts::EXE_SUFFIX);\n         }\n         f\n     }\n@@ -1846,25 +1860,26 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn aux_output_dir_name(&self) -> PathBuf {\n-        let f = self.output_base_name();\n-        let mut fname = f.file_name().unwrap().to_os_string();\n-        fname.push(&format!(\"{}.aux\", self.config.mode.disambiguator()));\n-        f.with_file_name(&fname)\n+        self.output_base_name_stage()\n+            .with_extra_extension(self.config.mode.disambiguator())\n+            .with_extra_extension(\".aux\")\n     }\n \n     fn output_testname(&self, filepath: &Path) -> PathBuf {\n         PathBuf::from(filepath.file_stem().unwrap())\n     }\n \n-    /// Given a test path like `compile-fail/foo/bar.rs` Returns a name like\n-    ///\n-    ///     <output>/foo/bar-stage1\n+    /// Given a test path like `compile-fail/foo/bar.rs` returns a name like\n+    /// `/path/to/build/<triple>/test/compile-fail/foo/bar`.\n     fn output_base_name(&self) -> PathBuf {\n         let dir = self.config.build_base.join(&self.testpaths.relative_dir);\n \n         // Note: The directory `dir` is created during `collect_tests_from_dir`\n         dir.join(&self.output_testname(&self.testpaths.file))\n-            .with_extension(&self.config.stage_id)\n+    }\n+\n+    fn output_base_name_stage(&self) -> PathBuf {\n+        self.output_base_name().with_extension(&self.config.stage_id)\n     }\n \n     fn maybe_dump_to_stdout(&self, out: &str, err: &str) {\n@@ -1989,7 +2004,7 @@ impl<'test> TestCx<'test> {\n     fn run_rustdoc_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let out_dir = self.output_base_name();\n+        let out_dir = self.output_base_name_stage();\n         let _ = fs::remove_dir_all(&out_dir);\n         create_dir_all(&out_dir).unwrap();\n \n@@ -2391,7 +2406,7 @@ impl<'test> TestCx<'test> {\n             .unwrap();\n         let src_root = cwd.join(&src_root);\n \n-        let tmpdir = cwd.join(self.output_base_name());\n+        let tmpdir = cwd.join(self.output_base_name_stage());\n         if tmpdir.exists() {\n             self.aggressive_rm_rf(&tmpdir).unwrap();\n         }\n@@ -2816,7 +2831,6 @@ impl<'test> TestCx<'test> {\n                                             self.revision,\n                                             &self.config.compare_mode,\n                                             kind);\n-\n         if !path.exists() && self.config.compare_mode.is_some() {\n             // fallback!\n             path = expected_output_path(&self.testpaths, self.revision, &None, kind);\n@@ -2880,10 +2894,12 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let expected_output = self.expected_output_path(kind);\n-        // #50113: output is abspath; only want filename component.\n-        let expected_output = expected_output.file_name().expect(\"output path requires file name\");\n-        let output_file = self.output_base_name().with_file_name(&expected_output);\n+        let mode = self.config.compare_mode.as_ref().map_or(\"\", |m| m.to_str());\n+        let output_file = self.output_base_name()\n+            .with_extra_extension(self.revision.unwrap_or(\"\"))\n+            .with_extra_extension(mode)\n+            .with_extra_extension(kind);\n+\n         match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n             Ok(()) => {}\n             Err(e) => self.fatal(&format!("}, {"sha": "351005ff4b816b3038f4e6d99980f6320dd5d152", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf816a2fe08c6d40ea356306ef4c750d3667dc3d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=bf816a2fe08c6d40ea356306ef4c750d3667dc3d", "patch": "@@ -12,38 +12,26 @@\n \n use std::path::Path;\n \n-// See rust-lang/rust#48879: In addition to the mapping from `foo.rs`\n-// to `foo.stderr`/`foo.stdout`, we also can optionally have\n-// `foo.$mode.stderr`, where $mode is one of the strings on this list,\n-// as an alternative to use when running under that mode.\n-static COMPARE_MODE_NAMES: [&'static str; 1] = [\"nll\"];\n-\n pub fn check(path: &Path, bad: &mut bool) {\n     super::walk_many(&[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n                      &mut |_| false,\n                      &mut |file_path| {\n         if let Some(ext) = file_path.extension() {\n-            if (ext == \"stderr\" || ext == \"stdout\") && !file_path.with_extension(\"rs\").exists() {\n-\n-                // rust-lang/rust#48879: this fn used to be beautful\n-                // because Path API special-cases replacing\n-                // extensions. That works great for \".stderr\" but not\n-                // so well for \".nll.stderr\". To support the latter,\n-                // we explicitly search backwards for mode's starting\n-                // point and build corresponding source name.\n-                let filename = file_path.file_name().expect(\"need filename\")\n-                    .to_str().expect(\"need UTF-8 filename\");\n-                let found_matching_prefix = COMPARE_MODE_NAMES.iter().any(|mode| {\n-                    if let Some(r_idx) = filename.rfind(&format!(\".{}\", mode)) {\n-                        let source_name = format!(\"{}.rs\", &filename[0..r_idx]);\n-                        let source_path = file_path.with_file_name(source_name);\n-                        source_path.exists()\n-                    } else {\n-                        false\n-                    }\n-                });\n-\n-                if !found_matching_prefix {\n+            if ext == \"stderr\" || ext == \"stdout\" {\n+                // Test output filenames have the format:\n+                // $testname.stderr\n+                // $testname.$mode.stderr\n+                // $testname.$revision.stderr\n+                // $testname.$revision.$mode.stderr\n+                //\n+                // For now, just make sure that there is a corresponding\n+                // $testname.rs file.\n+                let testname = file_path.file_name().unwrap()\n+                                        .to_str().unwrap()\n+                                        .splitn(2, '.').next().unwrap();\n+                if !file_path.with_file_name(testname)\n+                             .with_extension(\"rs\")\n+                             .exists() {\n                     println!(\"Stray file with UI testing output: {:?}\", file_path);\n                     *bad = true;\n                 }"}]}