{"sha": "125c196bca6f144c5f6a97b725b715dd0964c3d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNWMxOTZiY2E2ZjE0NGM1ZjZhOTdiNzI1YjcxNWRkMDk2NGMzZDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T12:29:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T12:29:24Z"}, "message": "Rollup merge of #73054 - RalfJung:dont-panic, r=Mark-Simulacrum\n\nmemory access sanity checks: abort instead of panic\n\nSuggested by @Mark-Simulacrum, this should help reduce the performance impact of these checks.", "tree": {"sha": "eb381b65ce8a97b9916df9b18778f966fb644a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb381b65ce8a97b9916df9b18778f966fb644a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125c196bca6f144c5f6a97b725b715dd0964c3d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7K+kCRBK7hj4Ov3rIwAAdHIIAH6hbslvOL34kwaKz7eY2PCE\nc+b+yb7d7kHFxWtqgr31WcLiZey4YaJsVMW/vcGl8xMXjUXOlIU8Vn9qr1JREYfV\nafO/ExCFqmikGgXWFV1B/l7ffwxC6/WjWe9vx0+se95dWFDbHP6bnXxlAh7CCkol\n+MMcR+um+iH0nOzYCzLx4afhy2BBo5qyRiN7Gi1Whhqt/S7ggHfHX07Kg/zp2ZUk\n2k/LRCBTeR8U9kOYdZX8Uf2CuzvwoIjAV/PdkyDXstvKFUh9QMAjzmIJzqHqlA0I\nLwMJKmlH17CwaQzKZq+IKC26g36AZSsEyTuLXBVrJTMBKzEydOtakNPXM4tjJEI=\n=LvAt\n-----END PGP SIGNATURE-----\n", "payload": "tree eb381b65ce8a97b9916df9b18778f966fb644a74\nparent 0851036ae30efa58b47258ad3b718d6ef66dc706\nparent 81c7ebd54418fe2f91be10b7371c7a3f5cca3771\nauthor Ralf Jung <post@ralfj.de> 1592569764 +0200\ncommitter GitHub <noreply@github.com> 1592569764 +0200\n\nRollup merge of #73054 - RalfJung:dont-panic, r=Mark-Simulacrum\n\nmemory access sanity checks: abort instead of panic\n\nSuggested by @Mark-Simulacrum, this should help reduce the performance impact of these checks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125c196bca6f144c5f6a97b725b715dd0964c3d5", "html_url": "https://github.com/rust-lang/rust/commit/125c196bca6f144c5f6a97b725b715dd0964c3d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125c196bca6f144c5f6a97b725b715dd0964c3d5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0851036ae30efa58b47258ad3b718d6ef66dc706", "url": "https://api.github.com/repos/rust-lang/rust/commits/0851036ae30efa58b47258ad3b718d6ef66dc706", "html_url": "https://github.com/rust-lang/rust/commit/0851036ae30efa58b47258ad3b718d6ef66dc706"}, {"sha": "81c7ebd54418fe2f91be10b7371c7a3f5cca3771", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c7ebd54418fe2f91be10b7371c7a3f5cca3771", "html_url": "https://github.com/rust-lang/rust/commit/81c7ebd54418fe2f91be10b7371c7a3f5cca3771"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "9061145a695f8ba1280a48ce850f7f0163380e99", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=125c196bca6f144c5f6a97b725b715dd0964c3d5", "patch": "@@ -2064,9 +2064,14 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    debug_assert!(is_aligned_and_not_null(src), \"attempt to copy from unaligned or null pointer\");\n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to copy to unaligned or null pointer\");\n-    debug_assert!(is_nonoverlapping(src, dst, count), \"attempt to copy to overlapping memory\");\n+    if cfg!(debug_assertions)\n+        && !(is_aligned_and_not_null(src)\n+            && is_aligned_and_not_null(dst)\n+            && is_nonoverlapping(src, dst, count))\n+    {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }\n     copy_nonoverlapping(src, dst, count)\n }\n \n@@ -2129,8 +2134,10 @@ pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    debug_assert!(is_aligned_and_not_null(src), \"attempt to copy from unaligned or null pointer\");\n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to copy to unaligned or null pointer\");\n+    if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }\n     copy(src, dst, count)\n }\n "}, {"sha": "ca2b0c85ec12172e72fdca0680e1d4cb1337e918", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=125c196bca6f144c5f6a97b725b715dd0964c3d5", "patch": "@@ -70,7 +70,7 @@\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::hash;\n-use crate::intrinsics::{self, is_aligned_and_not_null, is_nonoverlapping};\n+use crate::intrinsics::{self, abort, is_aligned_and_not_null, is_nonoverlapping};\n use crate::mem::{self, MaybeUninit};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -420,9 +420,14 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n #[inline]\n #[stable(feature = \"swap_nonoverlapping\", since = \"1.27.0\")]\n pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n-    debug_assert!(is_aligned_and_not_null(x), \"attempt to swap unaligned or null pointer\");\n-    debug_assert!(is_aligned_and_not_null(y), \"attempt to swap unaligned or null pointer\");\n-    debug_assert!(is_nonoverlapping(x, y, count), \"attempt to swap overlapping memory\");\n+    if cfg!(debug_assertions)\n+        && !(is_aligned_and_not_null(x)\n+            && is_aligned_and_not_null(y)\n+            && is_nonoverlapping(x, y, count))\n+    {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }\n \n     let x = x as *mut u8;\n     let y = y as *mut u8;\n@@ -838,7 +843,10 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n+    if cfg!(debug_assertions) && !is_aligned_and_not_null(dst) {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n@@ -1003,7 +1011,10 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n pub unsafe fn read_volatile<T>(src: *const T) -> T {\n-    debug_assert!(is_aligned_and_not_null(src), \"attempt to read from unaligned or null pointer\");\n+    if cfg!(debug_assertions) && !is_aligned_and_not_null(src) {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }\n     intrinsics::volatile_load(src)\n }\n \n@@ -1072,7 +1083,10 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n+    if cfg!(debug_assertions) && !is_aligned_and_not_null(dst) {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }\n     intrinsics::volatile_store(dst, src);\n }\n "}, {"sha": "15bfe421e9d35911d8e1f4ad05e3187e4fb644bd", "filename": "src/test/codegen/vec-clear.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-clear.rs?ref=125c196bca6f144c5f6a97b725b715dd0964c3d5", "patch": "@@ -1,4 +1,3 @@\n-// ignore-debug: the debug assertions get in the way\n // compile-flags: -O\n \n #![crate_type = \"lib\"]"}, {"sha": "9143fad23408749b278aef4eb428397195a4db1d", "filename": "src/test/codegen/vec-optimizes-away.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125c196bca6f144c5f6a97b725b715dd0964c3d5/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs?ref=125c196bca6f144c5f6a97b725b715dd0964c3d5", "patch": "@@ -1,4 +1,3 @@\n-//\n // ignore-debug: the debug assertions get in the way\n // no-system-llvm\n // compile-flags: -O"}]}