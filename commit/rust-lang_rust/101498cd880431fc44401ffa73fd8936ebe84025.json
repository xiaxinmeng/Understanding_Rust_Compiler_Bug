{"sha": "101498cd880431fc44401ffa73fd8936ebe84025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMTQ5OGNkODgwNDMxZmM0NDQwMWZmYTczZmQ4OTM2ZWJlODQwMjU=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2015-02-25T10:11:23Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2015-02-26T05:48:09Z"}, "message": "Tweak VecDeque's IterMut implementation\n\nSo it is symmetric to its `Iter` implementation. Also kills an FIXME.", "tree": {"sha": "e829a42c9e07c4e806e3510fe3e7996a354ac2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e829a42c9e07c4e806e3510fe3e7996a354ac2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101498cd880431fc44401ffa73fd8936ebe84025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101498cd880431fc44401ffa73fd8936ebe84025", "html_url": "https://github.com/rust-lang/rust/commit/101498cd880431fc44401ffa73fd8936ebe84025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101498cd880431fc44401ffa73fd8936ebe84025/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610d1695d1e0f1bb4e59449d8ba70409b1dc610c", "url": "https://api.github.com/repos/rust-lang/rust/commits/610d1695d1e0f1bb4e59449d8ba70409b1dc610c", "html_url": "https://github.com/rust-lang/rust/commit/610d1695d1e0f1bb4e59449d8ba70409b1dc610c"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "4a2f7e378f7f83d265722dfca1b757d1a88fdb6b", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/101498cd880431fc44401ffa73fd8936ebe84025/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101498cd880431fc44401ffa73fd8936ebe84025/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=101498cd880431fc44401ffa73fd8936ebe84025", "patch": "@@ -24,7 +24,6 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n use core::iter::{self, repeat, FromIterator, IntoIterator, RandomAccessIterator};\n-use core::marker;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops::{Index, IndexMut};\n@@ -545,9 +544,7 @@ impl<T> VecDeque<T> {\n         IterMut {\n             tail: self.tail,\n             head: self.head,\n-            cap: self.cap,\n-            ptr: *self.ptr,\n-            marker: marker::PhantomData,\n+            ring: unsafe { self.buffer_as_mut_slice() },\n         }\n     }\n \n@@ -1515,17 +1512,12 @@ impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n     }\n }\n \n-// FIXME This was implemented differently from Iter because of a problem\n-//       with returning the mutable reference. I couldn't find a way to\n-//       make the lifetime checker happy so, but there should be a way.\n /// `VecDeque` mutable iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T:'a> {\n-    ptr: *mut T,\n+    ring: &'a mut [T],\n     tail: usize,\n     head: usize,\n-    cap: usize,\n-    marker: marker::PhantomData<&'a mut T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1538,16 +1530,17 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n             return None;\n         }\n         let tail = self.tail;\n-        self.tail = wrap_index(self.tail + 1, self.cap);\n+        self.tail = wrap_index(self.tail + 1, self.ring.len());\n \n         unsafe {\n-            Some(&mut *self.ptr.offset(tail as isize))\n+            let elem = self.ring.get_unchecked_mut(tail);\n+            Some(&mut *(elem as *mut _))\n         }\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let len = count(self.tail, self.head, self.cap);\n+        let len = count(self.tail, self.head, self.ring.len());\n         (len, Some(len))\n     }\n }\n@@ -1559,10 +1552,11 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n         if self.tail == self.head {\n             return None;\n         }\n-        self.head = wrap_index(self.head - 1, self.cap);\n+        self.head = wrap_index(self.head - 1, self.ring.len());\n \n         unsafe {\n-            Some(&mut *self.ptr.offset(self.head as isize))\n+            let elem = self.ring.get_unchecked_mut(self.head);\n+            Some(&mut *(elem as *mut _))\n         }\n     }\n }"}]}