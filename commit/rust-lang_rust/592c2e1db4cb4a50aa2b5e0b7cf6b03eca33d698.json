{"sha": "592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MmMyZTFkYjRjYjRhNTBhYTJiNWUwYjdjZjZiMDNlY2EzM2Q2OTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T23:56:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T23:56:40Z"}, "message": "test: Remove export from the tests, language, and libraries. rs=deexporting", "tree": {"sha": "1f6c8776c84c0b8698be31c2c2542cf4565a65cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6c8776c84c0b8698be31c2c2542cf4565a65cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "html_url": "https://github.com/rust-lang/rust/commit/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "html_url": "https://github.com/rust-lang/rust/commit/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e"}], "stats": {"total": 760, "additions": 232, "deletions": 528}, "files": [{"sha": "847b6d5b2bbae0dfa8c97cdf8cbed466addaf257", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,9 +10,9 @@\n \n #[link(name = \"crate_method_reexport_grrrrrrr2\")];\n \n-use name_pool::add;\n+pub use name_pool::add;\n \n-mod name_pool {\n+pub mod name_pool {\n     pub type name_pool = ();\n \n     pub trait add {\n@@ -26,7 +26,7 @@ mod name_pool {\n }\n \n pub mod rust {\n-    use name_pool::add;\n+    pub use name_pool::add;\n \n     pub type rt = @();\n "}, {"sha": "0d00dec676088783b241c6a194b0761a772ae908", "filename": "src/test/run-pass/alt-path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Falt-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Falt-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-path.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,8 +11,7 @@\n \n \n mod m1 {\n-    #[legacy_exports];\n-    enum foo { foo1, foo2, }\n+    pub enum foo { foo1, foo2, }\n }\n \n fn bar(x: m1::foo) { match x { m1::foo1 => { } m1::foo2 => { } } }"}, {"sha": "072a0ebb0a7089401429f3b1b4db4fba82a64e50", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,9 +11,8 @@\n // error-pattern:expected item\n \n mod m {\n-    #[legacy_exports];\n-  #[foo = \"bar\"]\n-  extern mod std;\n+    #[foo = \"bar\"]\n+    extern mod std;\n }\n \n fn main() {"}, {"sha": "04dc555e40441e32bcd709f77c39a4e31e2c188e", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -82,9 +82,8 @@ fn test_ptr() {\n #[abi = \"cdecl\"]\n #[nolink]\n extern mod test {\n-    #[legacy_exports];\n-    fn rust_get_sched_id() -> libc::intptr_t;\n-    fn get_task_id() -> libc::intptr_t;\n+    pub fn rust_get_sched_id() -> libc::intptr_t;\n+    pub fn get_task_id() -> libc::intptr_t;\n }\n \n struct p {"}, {"sha": "5d435fa646adf252d5830b6eb7f57ffab3fc0ac3", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,8 +10,7 @@\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n-    fn get_task_id() -> libc::intptr_t;\n+    pub fn get_task_id() -> libc::intptr_t;\n }\n \n fn main() {"}, {"sha": "aec0054a3c310ddfa4f0b4b49d58e1e372b2cf19", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,9 +13,8 @@ extern mod std;\n #[abi = \"cdecl\"]\n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn atol(x: *u8) -> int;\n-    fn atoll(x: *u8) -> i64;\n+    pub fn atol(x: *u8) -> int;\n+    pub fn atoll(x: *u8) -> i64;\n }\n \n fn atol(s: ~str) -> int {"}, {"sha": "def739c1002d44092155d0aea21f24c3f8259568", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,12 +11,10 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_borrow_lib.rs\n \n-#[legacy_exports];\n-\n extern mod cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n-fn main() {\n+pub fn main() {\n     let p = @22u;\n     let r = foo(p);\n     debug!(\"r=%u\", r);"}, {"sha": "bb74065270943776408243ad2a562d886fddbf92", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,10 +14,8 @@\n // This test makes sure we can do cross-crate inlining on functions\n // that use capture clauses.\n \n-#[legacy_exports];\n-\n extern mod cci_capture_clause;\n \n-fn main() {\n+pub fn main() {\n     cci_capture_clause::foo(()).recv()\n }"}, {"sha": "26bfd1ad4dc1f1605863e36613dd672d21df0d4a", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,13 +11,10 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_nested_lib.rs\n \n-#[legacy_modes];\n-#[legacy_exports];\n-\n extern mod cci_nested_lib;\n use cci_nested_lib::*;\n \n-fn main() {\n+pub fn main() {\n     let lst = new_int_alist();\n     alist_add(lst, 22, ~\"hi\");\n     alist_add(lst, 44, ~\"ho\");"}, {"sha": "f0adaca82422fcc03872deab77e167a6f137d28f", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,12 +11,10 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_no_inline_lib.rs\n \n-#[legacy_exports];\n-\n extern mod cci_no_inline_lib;\n use cci_no_inline_lib::iter;\n \n-fn main() {\n+pub fn main() {\n     // Check that a cross-crate call function not marked as inline\n     // does not, in fact, get inlined.  Also, perhaps more\n     // importantly, checks that our scheme of using"}, {"sha": "184d27883292071be1e326e82777e3c04e236d38", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -16,24 +16,21 @@\n use kitty::*;\n \n mod kitty {\n-    #[legacy_exports];\n-  export cat;\n-  struct cat {\n-    meows: uint,\n-    name: ~str,\n-  }\n+    pub struct cat {\n+        meows: uint,\n+        name: ~str,\n+    }\n \n-  impl cat {\n-    fn get_name() -> ~str { copy self.name }\n-  }\n+    pub impl cat {\n+        fn get_name() -> ~str { copy self.name }\n+    }\n \n-    fn cat(in_name: ~str) -> cat {\n+    pub fn cat(in_name: ~str) -> cat {\n         cat {\n             name: in_name,\n             meows: 0u\n         }\n     }\n-\n }\n \n fn main() {"}, {"sha": "404a58e1a4b29b88ef639cb9959d2e1ec4d5be9e", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -22,15 +22,13 @@ const b: bool = true;\n #[cfg(bogus)]\n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n     // This symbol doesn't exist and would be a link error if this\n     // module was translated\n-    fn bogus();\n+    pub fn bogus();\n }\n \n #[abi = \"cdecl\"]\n-extern mod rustrt {\n-    #[legacy_exports]; }\n+extern mod rustrt {}\n \n #[cfg(bogus)]\n type t = int;\n@@ -66,21 +64,18 @@ fn r(i:int) -> r {\n \n #[cfg(bogus)]\n mod m {\n-    #[legacy_exports];\n     // This needs to parse but would fail in typeck. Since it's not in\n     // the current config it should not be typechecked.\n-    fn bogus() { return 0; }\n+    pub fn bogus() { return 0; }\n }\n \n mod m {\n-    #[legacy_exports];\n-\n     // Submodules have slightly different code paths than the top-level\n     // module, so let's make sure this jazz works here as well\n     #[cfg(bogus)]\n-    fn f() { }\n+    pub fn f() { }\n \n-    fn f() { }\n+    pub fn f() { }\n }\n \n // Since the bogus configuration isn't defined main will just be\n@@ -111,23 +106,19 @@ fn test_in_fn_ctxt() {\n }\n \n mod test_foreign_items {\n-    #[legacy_exports];\n     #[abi = \"cdecl\"]\n-    extern mod rustrt {\n-        #[legacy_exports];\n+    pub extern mod rustrt {\n         #[cfg(bogus)]\n-        fn rust_getcwd() -> ~str;\n-        fn rust_getcwd() -> ~str;\n+        pub fn rust_getcwd() -> ~str;\n+        pub fn rust_getcwd() -> ~str;\n     }\n }\n \n mod test_use_statements {\n-    #[legacy_exports];\n     #[cfg(bogus)]\n     use flippity_foo;\n \n-    extern mod rustrt {\n-        #[legacy_exports];\n+    pub extern mod rustrt {\n         #[cfg(bogus)]\n         use flippity_foo;\n     }"}, {"sha": "407c8792d886ee731f36af00c5b2c0c614c99e4f", "filename": "src/test/run-pass/crateresolve2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,21 +14,18 @@\n // aux-build:crateresolve2-3.rs\n \n mod a {\n-    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.1\");\n-    fn f() { assert crateresolve2::f() == 10; }\n+    pub fn f() { assert crateresolve2::f() == 10; }\n }\n \n mod b {\n-    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.2\");\n-    fn f() { assert crateresolve2::f() == 20; }\n+    pub fn f() { assert crateresolve2::f() == 20; }\n }\n \n mod c {\n-    #[legacy_exports];\n     extern mod crateresolve2(vers = \"0.3\");\n-    fn f() { assert crateresolve2::f() == 30; }\n+    pub fn f() { assert crateresolve2::f() == 30; }\n }\n \n fn main() {"}, {"sha": "e92febf96379accc4fb973dade5a726797e768cb", "filename": "src/test/run-pass/crateresolve3.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -16,15 +16,13 @@\n // as long as no name collision on invoked functions.\n \n mod a {\n-    #[legacy_exports];\n     extern mod crateresolve3(vers = \"0.1\");\n-    fn f() { assert crateresolve3::f() == 10; }\n+    pub fn f() { assert crateresolve3::f() == 10; }\n }\n \n mod b {\n-    #[legacy_exports];\n     extern mod crateresolve3(vers = \"0.2\");\n-    fn f() { assert crateresolve3::g() == 20; }\n+    pub fn f() { assert crateresolve3::g() == 20; }\n }\n \n fn main() {"}, {"sha": "4e664c41aa33daa09b9d2671e8a2d4e8451d3ad1", "filename": "src/test/run-pass/crateresolve4.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,21 +14,17 @@\n // aux-build:crateresolve4b-1.rs\n // aux-build:crateresolve4b-2.rs\n \n-#[legacy_exports];\n-\n-mod a {\n-    #[legacy_exports];\n+pub mod a {\n     extern mod crateresolve4b(vers = \"0.1\");\n-    fn f() { assert crateresolve4b::f() == 20; }\n+    pub fn f() { assert crateresolve4b::f() == 20; }\n }\n \n-mod b {\n-    #[legacy_exports];\n+pub mod b {\n     extern mod crateresolve4b(vers = \"0.2\");\n-    fn f() { assert crateresolve4b::g() == 10; }\n+    pub fn f() { assert crateresolve4b::g() == 10; }\n }\n \n-fn main() {\n+pub fn main() {\n     a::f();\n     b::f();\n }"}, {"sha": "cc7793fdf28950e17586e32bc6164d713bc0c7a6", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,13 +12,9 @@\n // sort of ADT.\n \n mod foo {\n-    #[legacy_exports];\n-    export t;\n-    export f;\n+    pub enum t { t1, }\n \n-    enum t { t1, }\n-\n-    fn f() -> t { return t1; }\n+    pub fn f() -> t { return t1; }\n }\n \n fn main() { let v: foo::t = foo::f(); }"}, {"sha": "33a54b85ea84edddf53d1950536e6883d120c884", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -16,13 +16,11 @@\n // Modified to not use export since it's going away. --pcw\n \n mod foo {\n-    #[legacy_exports];\n     use foo::bar::*;\n-    mod bar {\n-        #[legacy_exports];\n-        const a : int = 10;\n+    pub mod bar {\n+        pub const a : int = 10;\n     }\n-    fn zum() {\n+    pub fn zum() {\n         let b = a;\n     }\n }"}, {"sha": "4c0287843fc05a322787fa7a2a4b60da5e08a5a6", "filename": "src/test/run-pass/export-glob.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -1,29 +0,0 @@\n-// xfail-fast\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that a glob-export functions as an explicit\n-// named export when referenced from outside its scope.\n-\n-// Modified to not use export since it's going away. --pcw\n-\n-mod foo {\n-    #[legacy_exports];\n-    use foo::bar::*;\n-    export a;\n-    export bar;\n-    mod bar {\n-        #[legacy_exports];\n-        const a : int = 10;\n-    }\n-}\n-\n-fn main() { let v = foo::a; }"}, {"sha": "d19f7c0d31c88b9bbb51d94429c9c963a9ca2b2c", "filename": "src/test/run-pass/export-multi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-multi.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,11 +14,8 @@ use m::f;\n use m::g;\n \n mod m {\n-    #[legacy_exports];\n-    export f, g;\n-\n-    fn f() { }\n-    fn g() { }\n+    pub fn f() { }\n+    pub fn g() { }\n }\n \n fn main() { f(); g(); m::f(); m::g(); }"}, {"sha": "67f8191ae585f0df5f08574f40bd481a07660dac", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -9,9 +9,6 @@\n // except according to those terms.\n \n \n-export foo;\n-export main;\n-\n enum list_cell<T> { cons(@list_cell<T>), nil }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "06b513c4ad936702acd32f7ed7e47277405abd19", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Export the enum variants, without the enum\n-\n mod foo {\n-    #[legacy_exports];\n-    export t1;\n-    enum t { t1, }\n+    pub enum t { t1, }\n }\n \n fn main() { let v = foo::t1; }"}, {"sha": "1119bfde2fc55fc8c7321b30da0e89ad88e10b94", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,10 +12,6 @@\n // that are not exported, allowing for a sort of poor-man's ADT\n \n mod foo {\n-    #[legacy_exports];\n-    export f;\n-    export g;\n-\n     // not exported\n     enum t { t1, t2, }\n \n@@ -26,9 +22,9 @@ mod foo {\n         pure fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n     }\n \n-    fn f() -> t { return t1; }\n+    pub fn f() -> t { return t1; }\n \n-    fn g(v: t) { assert (v == t1); }\n+    pub fn g(v: t) { assert (v == t1); }\n }\n \n fn main() { foo::g(foo::f()); }"}, {"sha": "35e3ff60243cd11c48ee9637c53db9cb126f9887", "filename": "src/test/run-pass/expr-scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexpr-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fexpr-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-scope.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,7 +11,5 @@\n // Regression test for issue #762\n // xfail-fast\n \n-#[legacy_exports];\n-\n-fn f() { }\n+pub fn f() { }\n fn main() { return ::f(); }"}, {"sha": "da09dd02be351248dc34d43969ca4451f72ad44c", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "52753e2549f22055d86842cf7e0eba91dc27674e", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "1db40fbcc2148ee1db2d0dc1220eceb8ca80f961", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,9 +13,8 @@\n // directions\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "2c92202992d3d955c79cc7cb2babb55c96a63c80", "filename": "src/test/run-pass/extern-call.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "bd6d597c74c04a91234e326fde610113b818559c", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,9 +12,8 @@\n // while holding onto C stacks\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "1ec8f8ab8a3ef02a60e11d0f3f0bff441e7e64b8", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "b06afbfe55e4b9f17025e7837e963cfaf7af8059", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,15 +14,13 @@\n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern mod rustrt1 {\n-    #[legacy_exports];\n-    fn last_os_error() -> ~str;\n+    pub fn last_os_error() -> ~str;\n }\n \n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n extern mod rustrt2 {\n-    #[legacy_exports];\n-    fn last_os_error() -> ~str;\n+    pub fn last_os_error() -> ~str;\n }\n \n fn main() {"}, {"sha": "ffadd4bd41beffde15227cf982c02856c60fa8b4", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,9 +14,8 @@ extern mod std;\n #[nolink]\n #[abi = \"cdecl\"]\n extern mod libc {\n-    #[legacy_exports];\n     #[link_name = \"strlen\"]\n-    fn my_strlen(str: *u8) -> uint;\n+    pub fn my_strlen(str: *u8) -> uint;\n }\n \n fn strlen(str: ~str) -> uint {"}, {"sha": "b2935ba9f10482eb1867e90436c7038ce1a60e6e", "filename": "src/test/run-pass/foreign-lib-path.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -16,10 +16,9 @@\n // wouthout providing a -L argument to the compiler, and that\n // will also be found successfully at runtime.\n extern mod WHATGOESHERE {\n-    #[legacy_exports];\n-    fn IDONTKNOW() -> u32;\n+    pub fn IDONTKNOW() -> u32;\n }\n \n fn main() {\n     assert IDONTKNOW() == 0x_BAD_DOOD_u32;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f05d40ad1d681869be327da632d1b70db978629b", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,8 +10,7 @@\n \n #[nolink]\n extern mod foo {\n-    #[legacy_exports];\n-    const errno: int;\n+    pub const errno: int;\n }\n \n fn main() {"}, {"sha": "1782778e5d7a592b0d44ea8d87542b040339abd4", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,8 +11,7 @@\n // ABI is cdecl by default\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn get_task_id() -> libc::intptr_t;\n+    pub fn get_task_id() -> libc::intptr_t;\n }\n \n fn main() {"}, {"sha": "3adc983a0628732b923c428ca695650faf3a02f1", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -15,8 +15,7 @@ enum void { }\n \n #[nolink]\n extern mod bindgen {\n-    #[legacy_exports];\n-    fn printf(++v: void);\n+    pub fn printf(++v: void);\n }\n \n fn main() { }"}, {"sha": "9a5d747521b79484dc47b60d856f798edb018bac", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,25 +10,21 @@\n \n #[abi = \"cdecl\"]\n #[nolink]\n-extern mod bar {\n-    #[legacy_exports]; }\n+extern mod bar {}\n \n #[abi = \"cdecl\"]\n #[nolink]\n-extern mod zed {\n-    #[legacy_exports]; }\n+extern mod zed {}\n \n #[abi = \"cdecl\"]\n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn write(fd: int, buf: *u8,\n-             count: ::core::libc::size_t) -> ::core::libc::ssize_t;\n+    pub fn write(fd: int, buf: *u8,\n+                 count: ::core::libc::size_t) -> ::core::libc::ssize_t;\n }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-extern mod baz {\n-    #[legacy_exports]; }\n+extern mod baz {}\n \n fn main() { }"}, {"sha": "2316ca61a3ce0226654cc40d448127ead28ed3b4", "filename": "src/test/run-pass/generic-fn-twice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,8 +13,7 @@\n \n // -*- rust -*-\n mod foomod {\n-    #[legacy_exports];\n-    fn foo<T>() { }\n+    pub fn foo<T>() { }\n }\n \n fn main() { foomod::foo::<int>(); foomod::foo::<int>(); }"}, {"sha": "0da95be3106ae975b484e03221fa5fc7484279a4", "filename": "src/test/run-pass/global-scope.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglobal-scope.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,14 +10,11 @@\n \n // xfail-fast\n \n-#[legacy_exports];\n+pub fn f() -> int { return 1; }\n \n-fn f() -> int { return 1; }\n-\n-mod foo {\n-    #[legacy_exports];\n-    fn f() -> int { return 2; }\n-    fn g() { assert (f() == 2); assert (::f() == 1); }\n+pub mod foo {\n+    pub fn f() -> int { return 2; }\n+    pub fn g() { assert (f() == 2); assert (::f() == 1); }\n }\n \n fn main() { return foo::g(); }"}, {"sha": "11affd7f9e68085ae5cdd5ed9dff74cc38950ecf", "filename": "src/test/run-pass/import-from-foreign.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,17 +11,13 @@\n // except according to those terms.\n \n mod spam {\n-    #[legacy_exports];\n-    fn ham() { }\n-    fn eggs() { }\n+    pub fn ham() { }\n+    pub fn eggs() { }\n }\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n-    use spam::{ham, eggs};\n-    export ham;\n-    export eggs;\n+    pub use spam::{ham, eggs};\n }\n \n fn main() { rustrt::ham(); rustrt::eggs(); }"}, {"sha": "7b739fa9d66e6b7192f84c9a0009bfab8c3b9a01", "filename": "src/test/run-pass/import-from.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,9 +13,8 @@\n use spam::{ham, eggs};\n \n mod spam {\n-    #[legacy_exports];\n-    fn ham() { }\n-    fn eggs() { }\n+    pub fn ham() { }\n+    pub fn eggs() { }\n }\n \n fn main() { ham(); eggs(); }"}, {"sha": "6e3d995ed4104f8e8de57e5b37eb33c573adedbb", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,30 +14,20 @@ use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n \n mod module_of_many_things {\n-    #[legacy_exports];\n-    export f1;\n-    export f2;\n-    export f4;\n-    fn f1() { debug!(\"f1\"); }\n-    fn f2() { debug!(\"f2\"); }\n+    pub fn f1() { debug!(\"f1\"); }\n+    pub fn f2() { debug!(\"f2\"); }\n     fn f3() { debug!(\"f3\"); }\n-    fn f4() { debug!(\"f4\"); }\n+    pub fn f4() { debug!(\"f4\"); }\n }\n \n mod dug {\n-    #[legacy_exports];\n-    mod too {\n-        #[legacy_exports];\n-        mod greedily {\n-            #[legacy_exports];\n-            mod and {\n-                #[legacy_exports];\n-                mod too {\n-                    #[legacy_exports];\n-                    mod deep {\n-                        #[legacy_exports];\n-                        fn nameless_fear() { debug!(\"Boo!\"); }\n-                        fn also_redstone() { debug!(\"Whatever.\"); }\n+    pub mod too {\n+        pub mod greedily {\n+            pub mod and {\n+                pub mod too {\n+                    pub mod deep {\n+                        pub fn nameless_fear() { debug!(\"Boo!\"); }\n+                        pub fn also_redstone() { debug!(\"Whatever.\"); }\n                     }\n                 }\n             }"}, {"sha": "32770f39c0ec55bdc3b10b64362e831cd4fd52c7", "filename": "src/test/run-pass/import-glob-1.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -1,60 +0,0 @@\n-// xfail-fast\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use a1::b1::word_traveler;\n-\n-mod a1 {\n-    #[legacy_exports];\n-    //\n-    mod b1 {\n-        #[legacy_exports];\n-        //\n-        use a2::b1::*;\n-        //         = move\\\n-        export word_traveler; //           |\n-    }\n-    //           |\n-    mod b2 {\n-        #[legacy_exports];\n-        //           |\n-        use a2::b2::*;\n-        // = move\\  -\\   |\n-        export word_traveler; //   |   |   |\n-    } //   |   |   |\n-}\n-//   |   |   |\n-//   |   |   |\n-mod a2 {\n-    #[legacy_exports];\n-    //   |   |   |\n-    #[abi = \"cdecl\"]\n-    #[nolink]\n-    extern mod b1 {\n-        #[legacy_exports];\n-        //   |   |   |\n-        use a1::b2::*;\n-        //   | = move/  -/\n-        export word_traveler; //   |\n-    }\n-    //   |\n-    mod b2 {\n-        #[legacy_exports];\n-        //   |\n-        fn word_traveler() { //   |\n-            debug!(\"ahoy!\"); //  -/\n-        } //\n-    } //\n-}\n-//\n-\n-\n-fn main() { word_traveler(); }"}, {"sha": "d04212155a869ab1a946fe78c65d4f7c778d5157", "filename": "src/test/run-pass/import-trailing-comma.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,11 +13,9 @@\n use foo::bar::{baz, quux,};\n \n mod foo {\n-    #[legacy_exports];\n-    mod bar {\n-        #[legacy_exports];\n-        fn baz() { }\n-        fn quux() { }\n+    pub mod bar {\n+        pub fn baz() { }\n+        pub fn quux() { }\n     }\n }\n "}, {"sha": "2379cca3111bdc27512e0dd14bff3ce7f8d534e1", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,15 +11,13 @@\n // except according to those terms.\n \n mod foo {\n-    #[legacy_exports];\n-    fn x(y: int) { log(debug, y); }\n+    pub fn x(y: int) { log(debug, y); }\n }\n \n mod bar {\n-    #[legacy_exports];\n     use foo::x;\n     use z = foo::x;\n-    fn thing() { x(10); z(10); }\n+    pub fn thing() { x(10); z(10); }\n }\n \n fn main() { bar::thing(); }"}, {"sha": "37c11b81b4aa9663e042d24124fdfd0af44c933b", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,8 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    #[legacy_exports];\n-    fn bar() { debug!(\"bar\"); }\n+    pub fn bar() { debug!(\"bar\"); }\n }\n \n fn main() { bar(); }"}, {"sha": "757034d4b414575bd303571668c1f95f2a9c3c35", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -15,10 +15,8 @@ use baz::zed;\n use zed::bar;\n \n mod baz {\n-    #[legacy_exports];\n-    mod zed {\n-        #[legacy_exports];\n-        fn bar() { debug!(\"bar2\"); }\n+    pub mod zed {\n+        pub fn bar() { debug!(\"bar2\"); }\n     }\n }\n "}, {"sha": "4ea180a1e257798774fc274c859ee6168def6fa2", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,8 +14,7 @@\n use zed::bar;\n \n mod zed {\n-    #[legacy_exports];\n-    fn bar() { debug!(\"bar\"); }\n+    pub fn bar() { debug!(\"bar\"); }\n }\n \n fn main() { let zed = 42; bar(); }"}, {"sha": "ab94fea097195c380bab3773db7ec4a7ff592ec9", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,13 +12,9 @@\n \n use foo::bar;\n mod foo {\n-    #[legacy_exports];\n-    use foo::zed::bar;\n-    export bar;\n-    export zed;\n-    mod zed {\n-        #[legacy_exports];\n-        fn bar() { debug!(\"foo\"); }\n+    pub use foo::zed::bar;\n+    pub mod zed {\n+        pub fn bar() { debug!(\"foo\"); }\n     }\n }\n "}, {"sha": "2a789969bcbb12d619deedbc3405e0d623c60e2f", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,15 +13,11 @@\n use foo::zed;\n use bar::baz;\n mod foo {\n-    #[legacy_exports];\n-    mod zed {\n-        #[legacy_exports];\n-        fn baz() { debug!(\"baz\"); }\n+    pub mod zed {\n+        pub fn baz() { debug!(\"baz\"); }\n     }\n }\n mod bar {\n-    #[legacy_exports];\n-    use zed::baz;\n-    export baz;\n+    pub use zed::baz;\n }\n fn main() { baz(); }"}, {"sha": "91b0943a8338f8bbdeda08c1684e7cad632ad100", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,20 +13,14 @@\n use foo::zed;\n use bar::baz;\n mod foo {\n-    #[legacy_exports];\n-    mod zed {\n-        #[legacy_exports];\n-        fn baz() { debug!(\"baz\"); }\n+    pub mod zed {\n+        pub fn baz() { debug!(\"baz\"); }\n     }\n }\n mod bar {\n-    #[legacy_exports];\n-    use zed::baz;\n-    export baz;\n-    mod foo {\n-        #[legacy_exports];\n-        mod zed {\n-            #[legacy_exports]; }\n+    pub use zed::baz;\n+    pub mod foo {\n+        pub mod zed {}\n     }\n }\n fn main() { baz(); }"}, {"sha": "4572f59aeea256b9796d3d2cc3bbc28b34a5aaa4", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -15,8 +15,7 @@ use foo::x;\n use z = foo::x;\n \n mod foo {\n-    #[legacy_exports];\n-    fn x(y: int) { log(debug, y); }\n+    pub fn x(y: int) { log(debug, y); }\n }\n \n fn main() { x(10); z(10); }"}, {"sha": "1754eddb2cabfe8c072e2b145397283e41f6b1b1", "filename": "src/test/run-pass/inner-module.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Finner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Finner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-module.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,12 +13,10 @@\n \n // -*- rust -*-\n mod inner {\n-    #[legacy_exports];\n-    mod inner2 {\n-        #[legacy_exports];\n-        fn hello() { debug!(\"hello, modular world\"); }\n+    pub mod inner2 {\n+        pub fn hello() { debug!(\"hello, modular world\"); }\n     }\n-    fn hello() { inner2::hello(); }\n+    pub fn hello() { inner2::hello(); }\n }\n \n fn main() { inner::hello(); inner::inner2::hello(); }"}, {"sha": "9bd33df6b173c8ba29c0f7d1c4e418434e38e906", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,9 +12,8 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n-    fn pref_align_of<T>() -> uint;\n-    fn min_align_of<T>() -> uint;\n+    pub fn pref_align_of<T>() -> uint;\n+    pub fn min_align_of<T>() -> uint;\n }\n \n #[cfg(target_os = \"linux\")]"}, {"sha": "bee9e1dd1dda4daf43a7c9fca890fd8309dd3406", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,22 +10,21 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n-    fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n-    fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n-    fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n-\n-    fn atomic_xchg(dst: &mut int, src: int) -> int;\n-    fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n+    pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+    pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n+    pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n+\n+    pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n     \n-    fn atomic_xadd(dst: &mut int, src: int) -> int;\n-    fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xadd(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n     \n-    fn atomic_xsub(dst: &mut int, src: int) -> int;\n-    fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xsub(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n+    pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n }\n \n fn main() {"}, {"sha": "603f3d7dc818805068e860bb83404da46e8d9e7f", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,8 +12,7 @@\n #[legacy_modes];\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n-    fn frame_address(f: &once fn(*u8));\n+    pub fn frame_address(f: &once fn(*u8));\n }\n \n fn main() {"}, {"sha": "bc330902b760f7ce6cc0ca36cb2b3cb3b54f1e6c", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,8 +11,7 @@\n #[link(name = \"get_task_id\")];\n \n extern mod rustrt {\n-    #[legacy_exports];\n-      fn get_task_id() -> libc::intptr_t;\n+    pub fn get_task_id() -> libc::intptr_t;\n }\n \n fn main() { }"}, {"sha": "72fc38e9a0f8a7de5f164b0ce7932d4c3caeb237", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,20 +10,16 @@\n \n // xfail-test\n mod a {\n-    #[legacy_exports];\n-    type rust_task = uint;\n-    extern mod rustrt {\n-        #[legacy_exports];\n-        fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+    pub type rust_task = uint;\n+    pub extern mod rustrt {\n+        pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     }\n }\n \n mod b {\n-    #[legacy_exports];\n-    type rust_task = bool;\n-    extern mod rustrt {\n-        #[legacy_exports];\n-        fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n+    pub type rust_task = bool;\n+    pub extern mod rustrt {\n+        pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     }\n }\n "}, {"sha": "482d2665b2bde0c0ed8eb2b8491f1cfc5cc6c7e0", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -75,14 +75,13 @@ fn read_board_grid<rdr: &static io::Reader>(+in: rdr) -> ~[~[square]] {\n }\n \n mod test {\n-    #[legacy_exports];\n     #[test]\n-    fn trivial_to_str() {\n+    pub fn trivial_to_str() {\n         assert lambda.to_str() == \"\\\\\"\n     }\n \n     #[test]\n-    fn read_simple_board() {\n+    pub fn read_simple_board() {\n         let s = include_str!(\"./maps/contest1.map\");\n         io::with_str_reader(s, read_board_grid)\n     }"}, {"sha": "d949516a257a3bfed8d57db19dfe3702d6d1c0ad", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 18, "deletions": 51, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -25,60 +25,48 @@\n // These are are attributes of the following mod\n #[attr1 = \"val\"]\n #[attr2 = \"val\"]\n-mod test_first_item_in_file_mod {\n-    #[legacy_exports]; }\n+mod test_first_item_in_file_mod {}\n \n mod test_single_attr_outer {\n-    #[legacy_exports];\n-\n     #[attr = \"val\"]\n-    const x: int = 10;\n+    pub const x: int = 10;\n \n     #[attr = \"val\"]\n-    fn f() { }\n+    pub fn f() { }\n \n     #[attr = \"val\"]\n-    mod mod1 {\n-        #[legacy_exports]; }\n+    pub mod mod1 {}\n \n     #[attr = \"val\"]\n     #[abi = \"cdecl\"]\n-    extern mod rustrt {\n-        #[legacy_exports]; }\n+    pub extern mod rustrt {}\n }\n \n mod test_multi_attr_outer {\n-    #[legacy_exports];\n-\n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    const x: int = 10;\n+    pub const x: int = 10;\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    fn f() { }\n+    pub fn f() { }\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    mod mod1 {\n-        #[legacy_exports]; }\n+    pub mod mod1 {}\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n     #[abi = \"cdecl\"]\n-    extern mod rustrt {\n-        #[legacy_exports]; }\n+    pub extern mod rustrt {}\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n     type t = {x: int};\n }\n \n mod test_stmt_single_attr_outer {\n-    #[legacy_exports];\n-\n-    fn f() {\n-\n+    pub fn f() {\n         #[attr = \"val\"]\n         const x: int = 10;\n \n@@ -87,21 +75,17 @@ mod test_stmt_single_attr_outer {\n \n         #[attr = \"val\"]\n         mod mod1 {\n-            #[legacy_exports];\n         }\n \n         #[attr = \"val\"]\n         #[abi = \"cdecl\"]\n         extern mod rustrt {\n-            #[legacy_exports];\n         }\n     }\n }\n \n mod test_stmt_multi_attr_outer {\n-    #[legacy_exports];\n-\n-    fn f() {\n+    pub fn f() {\n \n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n@@ -115,34 +99,26 @@ mod test_stmt_multi_attr_outer {\n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n         mod mod1 {\n-            #[legacy_exports];\n         }\n \n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n         #[abi = \"cdecl\"]\n         extern mod rustrt {\n-            #[legacy_exports];\n         }\n         */\n     }\n }\n \n mod test_attr_inner {\n-    #[legacy_exports];\n-\n-    mod m {\n-        #[legacy_exports];\n+    pub mod m {\n         // This is an attribute of mod m\n         #[attr = \"val\"];\n     }\n }\n \n mod test_attr_inner_then_outer {\n-    #[legacy_exports];\n-\n-    mod m {\n-        #[legacy_exports];\n+    pub mod m {\n         // This is an attribute of mod m\n         #[attr = \"val\"];\n         // This is an attribute of fn f\n@@ -152,9 +128,7 @@ mod test_attr_inner_then_outer {\n }\n \n mod test_attr_inner_then_outer_multi {\n-    #[legacy_exports];\n-    mod m {\n-        #[legacy_exports];\n+    pub mod m {\n         // This is an attribute of mod m\n         #[attr1 = \"val\"];\n         #[attr2 = \"val\"];\n@@ -166,31 +140,26 @@ mod test_attr_inner_then_outer_multi {\n }\n \n mod test_distinguish_syntax_ext {\n-    #[legacy_exports];\n-\n     extern mod std;\n \n-    fn f() {\n+    pub fn f() {\n         fmt!(\"test%s\", ~\"s\");\n         #[attr = \"val\"]\n         fn g() { }\n     }\n }\n \n mod test_other_forms {\n-    #[legacy_exports];\n     #[attr]\n     #[attr(word)]\n     #[attr(attr(word))]\n     #[attr(key1 = \"val\", key2 = \"val\", attr)]\n-    fn f() { }\n+    pub fn f() { }\n }\n \n mod test_foreign_items {\n-    #[legacy_exports];\n     #[abi = \"cdecl\"]\n-    extern mod rustrt {\n-        #[legacy_exports];\n+    pub extern mod rustrt {\n         #[attr];\n \n         #[attr]\n@@ -199,7 +168,6 @@ mod test_foreign_items {\n }\n \n mod test_literals {\n-    #[legacy_exports];\n     #[str = \"s\"];\n     #[char = 'c'];\n     #[int = 100];\n@@ -209,8 +177,7 @@ mod test_literals {\n     #[mach_float = 1.0f32];\n     #[nil = ()];\n     #[bool = true];\n-    mod m {\n-        #[legacy_exports]; }\n+    mod m {}\n }\n \n fn test_fn_inner() {"}, {"sha": "fd3ba938b1c2d64c8eff269730656c30ccdd0af3", "filename": "src/test/run-pass/item-name-overload.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fitem-name-overload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fitem-name-overload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-name-overload.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,13 +13,11 @@\n \n // -*- rust -*-\n mod foo {\n-    #[legacy_exports];\n-    fn baz() { }\n+    pub fn baz() { }\n }\n \n mod bar {\n-    #[legacy_exports];\n-    fn baz() { }\n+    pub fn baz() { }\n }\n \n fn main() { }"}, {"sha": "7a8c3cdaa399d96b6215dc32cfa7b5a2774648ca", "filename": "src/test/run-pass/keyword-changes-2012-07-31.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -16,11 +16,10 @@ fn main() {\n }\n \n mod foo {\n-    #[legacy_exports];\n }\n \n fn bar() -> int {\n     match 0 {\n       _ => { 0 }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "79b431732281b9904cd580783dd59934c0f349c2", "filename": "src/test/run-pass/mod-inside-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmod-inside-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmod-inside-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-inside-fn.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,13 +10,12 @@\n \n fn f() -> int {\n     mod m {\n-        #[legacy_exports];\n-        fn g() -> int { 720 }\n+        pub fn g() -> int { 720 }\n     }\n \n     m::g()\n }\n \n fn main() {\n     assert f() == 720;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "fdb1d01727a96d20948f051acb6e812f019f3c36", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -17,9 +17,8 @@\n // begin failing.\n \n mod m {\n-    #[legacy_exports];\n     use core::vec;\n-    fn f() -> ~[int] { vec::from_elem(1u, 0) }\n+    pub fn f() -> ~[int] { vec::from_elem(1u, 0) }\n }\n \n fn main() { let x = m::f(); }"}, {"sha": "609d7d57011746b34302153f4a115c6e3ff3a187", "filename": "src/test/run-pass/morestack-address.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack-address.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,8 +11,7 @@\n #[nolink]\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n-    fn morestack_addr() -> *();\n+    pub fn morestack_addr() -> *();\n }\n \n fn main() {"}, {"sha": "352fe3e129def88e32d54181007fee63209aa680", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,15 +12,14 @@\n // external symbols as close to the red zone as possible.\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn debug_get_stk_seg() -> *u8;\n+    pub fn debug_get_stk_seg() -> *u8;\n \n-    fn rust_get_sched_id() -> libc::intptr_t;\n-    fn last_os_error() -> ~str;\n-    fn rust_getcwd() -> ~str;\n-    fn get_task_id() -> libc::intptr_t;\n-    fn rust_sched_threads();\n-    fn rust_get_task();\n+    pub fn rust_get_sched_id() -> libc::intptr_t;\n+    pub fn last_os_error() -> ~str;\n+    pub fn rust_getcwd() -> ~str;\n+    pub fn get_task_id() -> libc::intptr_t;\n+    pub fn rust_sched_threads();\n+    pub fn rust_get_task();\n }\n \n fn calllink01() { unsafe { rustrt::rust_get_sched_id(); } }"}, {"sha": "40f4b2339e558bf6f4d2d5be15a369fe6a074533", "filename": "src/test/run-pass/nil-decl-in-foreign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,7 +11,6 @@\n // Issue #901\n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn printf(x: ());\n+    pub fn printf(x: ());\n }\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "9f600e106b3ecd1af8f342b6004c46757b05239b", "filename": "src/test/run-pass/path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,8 +11,7 @@\n \n \n mod foo {\n-    #[legacy_exports];\n-    fn bar(offset: uint) { }\n+    pub fn bar(offset: uint) { }\n }\n \n fn main() { foo::bar(0u); }"}, {"sha": "15538648363e911ed93baeb92efa8eab3b41ab08", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,9 +12,8 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n-    fn pref_align_of<T>() -> uint;\n-    fn min_align_of<T>() -> uint;\n+    pub fn pref_align_of<T>() -> uint;\n+    pub fn min_align_of<T>() -> uint;\n }\n \n // This is the type with the questionable alignment\n@@ -32,16 +31,14 @@ struct Outer {\n \n #[cfg(target_arch = \"x86\")]\n mod m {\n-    #[legacy_exports];\n-    fn align() -> uint { 4u }\n-    fn size() -> uint { 8u }\n+    pub fn align() -> uint { 4u }\n+    pub fn size() -> uint { 8u }\n }\n \n #[cfg(target_arch = \"x86_64\")]\n mod m {\n-    #[legacy_exports];\n-    fn align() -> uint { 4u }\n-    fn size() -> uint { 8u }\n+    pub fn align() -> uint { 4u }\n+    pub fn size() -> uint { 8u }\n }\n \n fn main() {"}, {"sha": "30978deb3746399c5f812937654b5ff8906fe54f", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -12,9 +12,8 @@\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n-    #[legacy_exports];\n-    fn pref_align_of<T>() -> uint;\n-    fn min_align_of<T>() -> uint;\n+    pub fn pref_align_of<T>() -> uint;\n+    pub fn min_align_of<T>() -> uint;\n }\n \n // This is the type with the questionable alignment\n@@ -34,30 +33,25 @@ struct Outer {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod m {\n-    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n-    mod m {\n-        #[legacy_exports];\n-        fn align() -> uint { 4u }\n-        fn size() -> uint { 12u }\n+    pub mod m {\n+        pub fn align() -> uint { 4u }\n+        pub fn size() -> uint { 12u }\n     }\n \n     #[cfg(target_arch = \"x86_64\")]\n     mod m {\n-        #[legacy_exports];\n-        fn align() -> uint { 8u }\n-        fn size() -> uint { 16u }\n+        pub fn align() -> uint { 8u }\n+        pub fn size() -> uint { 16u }\n     }\n }\n \n #[cfg(target_os = \"win32\")]\n mod m {\n-    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n-    mod m {\n-        #[legacy_exports];\n-        fn align() -> uint { 8u }\n-        fn size() -> uint { 16u }\n+    pub mod m {\n+        pub fn align() -> uint { 8u }\n+        pub fn size() -> uint { 16u }\n     }\n }\n "}, {"sha": "6922156f5ef9c39950a0153b5ec5ee679322415d", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -19,11 +19,10 @@ type task = *libc::c_void;\n type closure = *libc::c_void;\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    fn rust_get_sched_id() -> sched_id;\n-    fn rust_new_task_in_sched(id: sched_id) -> task_id;\n-    fn start_task(id: task_id, f: closure);\n+    pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n+    pub fn rust_get_sched_id() -> sched_id;\n+    pub fn rust_new_task_in_sched(id: sched_id) -> task_id;\n+    pub fn start_task(id: task_id, f: closure);\n }\n \n fn main() {"}, {"sha": "22562d65e3758db5cf352043edbb769a89b4494c", "filename": "src/test/run-pass/self-shadowing-import.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,20 +11,16 @@\n // except according to those terms.\n \n mod a {\n-    #[legacy_exports];\n-    mod b {\n-        #[legacy_exports];\n-        mod a {\n-            #[legacy_exports];\n-            fn foo() -> int { return 1; }\n+    pub mod b {\n+        pub mod a {\n+            pub fn foo() -> int { return 1; }\n         }\n     }\n }\n \n mod c {\n-    #[legacy_exports];\n     use a::b::a;\n-    fn bar() { assert (a::foo() == 1); }\n+    pub fn bar() { assert (a::foo() == 1); }\n }\n \n fn main() { c::bar(); }"}, {"sha": "ca42742a576c5e39a6cfd21b4972a4257b99ee2b", "filename": "src/test/run-pass/static-method-xcrate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-fast\n // aux-build:static-methods-crate.rs\n-#[legacy_exports];\n \n extern mod static_methods_crate;\n use static_methods_crate::read;"}, {"sha": "078551815016814adee58a36cb643367c7f89097", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,9 +13,8 @@ struct Floats { a: f64, b: u8, c: f64 }\n \n #[nolink]\n extern mod rustrt {\n-    #[legacy_exports];\n-    fn debug_abi_1(++q: Quad) -> Quad;\n-    fn debug_abi_2(++f: Floats) -> Floats;\n+    pub fn debug_abi_1(++q: Quad) -> Quad;\n+    pub fn debug_abi_2(++f: Floats) -> Floats;\n }\n \n fn test1() {"}, {"sha": "af1b20eb49da03ae861934629da0099b4d1092c8", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -10,18 +10,15 @@\n \n // This test is brittle!\n // xfail-pretty - the pretty tests lose path information, breaking include!\n-#[legacy_exports];\n \n-mod m1 {\n-    #[legacy_exports];\n-    mod m2 {\n-        #[legacy_exports];\n-        fn where_am_i() -> ~str { (module_path!()).to_owned() }\n+pub mod m1 {\n+    pub mod m2 {\n+        pub fn where_am_i() -> ~str { (module_path!()).to_owned() }\n     }\n }\n \n fn main() {\n-    assert(line!() == 24);\n+    assert(line!() == 21);\n     assert(col!() == 11);\n     assert(file!().to_owned().ends_with(~\"syntax-extension-source-utils.rs\"));\n     assert(stringify!((2*3) + 5).to_owned() == ~\"( 2 * 3 ) + 5\");"}, {"sha": "124afc4364fd7dd08d50b7f9bb7adde5efbda25b", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,21 +13,10 @@\n use alder::*;\n \n mod alder {\n-    #[legacy_exports];\n-  export burnside;\n-  export couch;\n-  export everett;\n-  export flanders;\n-  export irving;\n-  export johnson;\n-  export kearney;\n-  export marshall;\n-\n-  enum burnside { couch, davis }\n-  enum everett { flanders, glisan, hoyt }\n-  enum irving { johnson, kearney, lovejoy }\n-  enum marshall { northrup, overton }\n-\n+    pub enum burnside { couch, davis }\n+    pub enum everett { flanders, glisan, hoyt }\n+    pub enum irving { johnson, kearney, lovejoy }\n+    pub enum marshall { northrup, overton }\n }\n \n fn main() {"}, {"sha": "bb7b9aa46eb3e9de75198d2668a403dde3f27445", "filename": "src/test/run-pass/type-in-nested-module.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Ftype-in-nested-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Ftype-in-nested-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-in-nested-module.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,12 +11,10 @@\n \n \n mod a {\n-    #[legacy_exports];\n-    mod b {\n-        #[legacy_exports];\n-        type t = int;\n+    pub mod b {\n+        pub type t = int;\n \n-        fn foo() { let x: t = 10; }\n+        pub fn foo() { let x: t = 10; }\n     }\n }\n "}, {"sha": "70c21c6ac4f2cbc842d6a21a68bf33e66ab39f09", "filename": "src/test/run-pass/use-import-export.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fuse-import-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fuse-import-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-import-export.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -11,13 +11,11 @@\n \n \n mod foo {\n-    #[legacy_exports];\n-    fn x() -> int { return 1; }\n+    pub fn x() -> int { return 1; }\n }\n \n mod bar {\n-    #[legacy_exports];\n-    fn y() -> int { return 1; }\n+    pub fn y() -> int { return 1; }\n }\n \n fn main() { foo::x(); bar::y(); }"}, {"sha": "bd273e64b1a0c13392bdb49c2f78ed33af86b8e3", "filename": "src/test/run-pass/use-mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-mod.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -13,10 +13,8 @@\n use mod a::b;\n \n mod a {\n-    #[legacy_exports];\n-    mod b {\n-        #[legacy_exports];\n-        fn f() {}\n+    pub mod b {\n+        pub fn f() {}\n     }\n }\n "}, {"sha": "5f57e1c1475d31c9d41fb7c1aa5269fdfb456da4", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -19,9 +19,8 @@ extern mod bar(name = \"core\", vers = \"0.6\");\n use core::str;\n use x = zed::str;\n mod baz {\n-    #[legacy_exports];\n-    use bar::str;\n-    use x = core::str;\n+    pub use bar::str;\n+    pub use x = core::str;\n }\n \n fn main() { }"}, {"sha": "91617fb1c6d75cf0ccf7f369fe0a3a8f30c48b12", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -14,9 +14,8 @@\n \n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn malloc(size: int) -> *u8;\n+    pub fn malloc(size: int) -> *u8;\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "88d5d659169bd14f17e55d44d04ab9074dfe8a33", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=592c2e1db4cb4a50aa2b5e0b7cf6b03eca33d698", "patch": "@@ -17,10 +17,10 @@ type BOOL = u8;\n #[cfg(target_os = \"win32\")]\n #[abi = \"stdcall\"]\n extern mod kernel32 {\n-    #[legacy_exports];\n-       fn GetProcessHeap() -> HANDLE;\n-       fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n-       fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n+    pub fn GetProcessHeap() -> HANDLE;\n+    pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)\n+                  -> LPVOID;\n+    pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n }\n \n "}]}