{"sha": "15dbe652ffa260fda162be3fa8e7aa075884c412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZGJlNjUyZmZhMjYwZmRhMTYyYmUzZmE4ZTdhYTA3NTg4NGM0MTI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-03T23:03:05Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-03T23:03:05Z"}, "message": "Split out debuginfo from type info in MIR GeneratorLayout", "tree": {"sha": "290288e68dad20465fb2f3737d1368c31e458c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290288e68dad20465fb2f3737d1368c31e458c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15dbe652ffa260fda162be3fa8e7aa075884c412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15dbe652ffa260fda162be3fa8e7aa075884c412", "html_url": "https://github.com/rust-lang/rust/commit/15dbe652ffa260fda162be3fa8e7aa075884c412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15dbe652ffa260fda162be3fa8e7aa075884c412/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c2f2475a0adc2bf025a7a845fee61ff1468350", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c2f2475a0adc2bf025a7a845fee61ff1468350", "html_url": "https://github.com/rust-lang/rust/commit/f7c2f2475a0adc2bf025a7a845fee61ff1468350"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "9c71e694f4c7974669a8ed4c9681cc1c233b7ad1", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=15dbe652ffa260fda162be3fa8e7aa075884c412", "patch": "@@ -2994,10 +2994,29 @@ pub struct UnsafetyCheckResult {\n     pub unsafe_blocks: Lrc<[(hir::HirId, bool)]>,\n }\n \n+newtype_index! {\n+    pub struct GeneratorField {\n+        derive [HashStable]\n+        DEBUG_FORMAT = \"_{}\",\n+    }\n+}\n+\n /// The layout of generator state\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GeneratorLayout<'tcx> {\n-    pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, LocalDecl<'tcx>>>,\n+    /// The type of every local stored inside the generator.\n+    pub field_tys: IndexVec<GeneratorField, Ty<'tcx>>,\n+\n+    /// Which of the above fields are in each variant. Note that one field may\n+    /// be stored in multiple variants.\n+    pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorField>>,\n+\n+    /// Names and scopes of all the stored generator locals.\n+    /// NOTE(tmandry) This is *strictly* a temporary hack for codegen\n+    /// debuginfo generation, and will be removed at some point.\n+    /// Do **NOT** use it for anything else, local information should not be\n+    /// in the MIR, please rely on local crate HIR or other side-channels.\n+    pub __local_debuginfo_codegen_only_do_not_use: IndexVec<GeneratorField, LocalDecl<'tcx>>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n@@ -3186,7 +3205,9 @@ BraceStructTypeFoldableImpl! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for GeneratorLayout<'tcx> {\n-        variant_fields\n+        field_tys,\n+        variant_fields,\n+        __local_debuginfo_codegen_only_do_not_use,\n     }\n }\n \n@@ -3561,6 +3582,15 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for GeneratorField {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _: &mut F) -> Self {\n+        *self\n+    }\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n+        false\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         Constant {"}, {"sha": "a41209496bd2728f545d981b1be9f04c09e5682b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=15dbe652ffa260fda162be3fa8e7aa075884c412", "patch": "@@ -483,7 +483,7 @@ impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     #[inline]\n     pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n-        let num_variants = self.state_tys(def_id, tcx).count();\n+        let num_variants = tcx.generator_layout(def_id).variant_fields.len();\n         (VariantIdx::new(0)..VariantIdx::new(num_variants))\n     }\n \n@@ -541,9 +541,12 @@ impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     pub fn state_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n         impl Iterator<Item=impl Iterator<Item=Ty<'tcx>> + Captures<'gcx> + 'a>\n     {\n-        tcx.generator_layout(def_id)\n-            .variant_fields.iter()\n-            .map(move |v| v.iter().map(move |d| d.ty.subst(tcx, self.substs)))\n+        let layout = tcx.generator_layout(def_id);\n+        layout.variant_fields.iter().map(move |variant| {\n+            variant.iter().map(move |field| {\n+                layout.field_tys[*field].subst(tcx, self.substs)\n+            })\n+        })\n     }\n \n     /// This is the types of the fields of a generator which are not stored in a"}, {"sha": "5b18e821982bd315d9a3e26225a7cdacda631a66", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=15dbe652ffa260fda162be3fa8e7aa075884c412", "patch": "@@ -1597,8 +1597,9 @@ impl<'tcx> VariantInfo<'tcx> {\n             VariantInfo::Adt(variant) if variant.ctor_kind != CtorKind::Fn =>\n                 Some(variant.fields[i].ident.to_string()),\n             VariantInfo::Generator(_, generator_layout, variant_index) => {\n-                let variant_decls = &generator_layout.variant_fields[*variant_index];\n-                variant_decls[i.into()].name.map(|name| name.to_string())\n+                let field = generator_layout.variant_fields[*variant_index][i.into()];\n+                let decl = &generator_layout.__local_debuginfo_codegen_only_do_not_use[field];\n+                decl.name.map(|name| name.to_string())\n             }\n             _ => None,\n         };"}, {"sha": "fcf099235aa14f2ac4c00316de6fe018b7ca0533", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=15dbe652ffa260fda162be3fa8e7aa075884c412", "patch": "@@ -663,12 +663,14 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                     generator_layout.variant_fields.iter()\n                         .zip(state_tys)\n                         .enumerate()\n-                        .flat_map(move |(variant_idx, (decls, tys))| {\n+                        .flat_map(move |(variant_idx, (fields, tys))| {\n                             let variant_idx = Some(VariantIdx::from(variant_idx));\n-                            decls.iter()\n+                            fields.iter()\n                                 .zip(tys)\n                                 .enumerate()\n-                                .filter_map(move |(i, (decl, ty))| {\n+                                .filter_map(move |(i, (field, ty))| {\n+                                    let decl = &generator_layout.\n+                                        __local_debuginfo_codegen_only_do_not_use[*field];\n                                     if let Some(name) = decl.name {\n                                         let ty = fx.monomorphize(&ty);\n                                         let (var_scope, var_span) = fx.debug_loc(mir::SourceInfo {"}, {"sha": "77bf789d2dd16c933f6b5d5704e9e0c6a45961c9", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dbe652ffa260fda162be3fa8e7aa075884c412/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=15dbe652ffa260fda162be3fa8e7aa075884c412", "patch": "@@ -555,15 +555,22 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Create a map from local indices to generator struct indices.\n     // We also create a vector of the LocalDecls of these locals.\n-    let (remap, vars) = live_decls.enumerate().map(|(idx, (local, var))| {\n-        ((local, (var.ty, variant_index, idx)), var)\n-    }).unzip();\n+    let mut remap = FxHashMap::default();\n+    let mut decls = IndexVec::new();\n+    for (idx, (local, var)) in live_decls.enumerate() {\n+        remap.insert(local, (var.ty, variant_index, idx));\n+        decls.push(var);\n+    }\n+    let field_tys = decls.iter().map(|field| field.ty).collect::<IndexVec<GeneratorField, _>>();\n \n     // Put every var in each variant, for now.\n+    let all_vars = (0..field_tys.len()).map(GeneratorField::from).collect();\n     let empty_variants = iter::repeat(IndexVec::new()).take(3);\n-    let state_variants = iter::repeat(vars).take(suspending_blocks.count());\n+    let state_variants = iter::repeat(all_vars).take(suspending_blocks.count());\n     let layout = GeneratorLayout {\n-        variant_fields: empty_variants.chain(state_variants).collect()\n+        field_tys,\n+        variant_fields: empty_variants.chain(state_variants).collect(),\n+        __local_debuginfo_codegen_only_do_not_use: decls,\n     };\n \n     (remap, layout, storage_liveness)"}]}