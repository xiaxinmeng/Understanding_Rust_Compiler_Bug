{"sha": "cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiY2FiY2FhYzhkMDZjNWM3ZjY4ZTc5NGI0ZTNjZWI0MTI1M2I4YzE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-08-14T17:45:44Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-08-18T17:56:29Z"}, "message": "Added feature gate.", "tree": {"sha": "c430666a75228b57ee80080fcc94cf084a91d2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c430666a75228b57ee80080fcc94cf084a91d2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "html_url": "https://github.com/rust-lang/rust/commit/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79009ed728f73b92d5e53b4212844e2dbc51ac5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79009ed728f73b92d5e53b4212844e2dbc51ac5f", "html_url": "https://github.com/rust-lang/rust/commit/79009ed728f73b92d5e53b4212844e2dbc51ac5f"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "c1dc3041d7d178cd6cd708477c5cb1c4d06cf6bd", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "patch": "@@ -775,7 +775,8 @@ The `Self` keyword was used outside an impl, trait, or type definition.\n Erroneous code example:\n \n ```compile_fail,E0411\n-<Self>::foo; // error: use of `Self` outside of an impl, trait, or type definition\n+<Self>::foo; // error: use of `Self` outside of an impl, trait, or type\n+             // definition\n ```\n \n The `Self` keyword represents the current type, which explains why it can only"}, {"sha": "faf129eb8365a271f31c3acb4035f4e9616c332e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "patch": "@@ -2204,9 +2204,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             ItemKind::Union(_, ref generics) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n                     let item_def_id = this.definitions.local_def_id(item.id);\n-                    this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+                    if this.session.features_untracked().self_in_typedefs {\n+                        this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+                            visit::walk_item(this, item);\n+                        });\n+                    } else {\n                         visit::walk_item(this, item);\n-                    });\n+                    }\n                 });\n             }\n \n@@ -2977,7 +2981,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);\n                 err.code(DiagnosticId::Error(\"E0411\".into()));\n-                err.span_label(span, \"`Self` is only available in traits, impls, and type definitions\");\n+                let available_in = if this.session.features_untracked().self_in_typedefs {\n+                    \"impls, traits, and type definitions\"\n+                } else {\n+                    \"traits and impls\"\n+                };\n+                err.span_label(span, format!(\"`Self` is only available in {}\", available_in));\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {"}, {"sha": "0626442aa42f3aea3971cb87a4fda9b1eac10e54", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "patch": "@@ -138,7 +138,7 @@ declare_features! (\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n     (active, trace_macros, \"1.0.0\", Some(29598), None),\n \n-    // rustc internal, for now:\n+    // rustc internal, for now\n     (active, intrinsics, \"1.0.0\", None, None),\n     (active, lang_items, \"1.0.0\", None, None),\n     (active, format_args_nl, \"1.29.0\", None, None),\n@@ -168,6 +168,7 @@ declare_features! (\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n     // Allows use of #[staged_api]\n+    //\n     // rustc internal\n     (active, staged_api, \"1.0.0\", None, None),\n \n@@ -245,24 +246,25 @@ declare_features! (\n     // Allows associated type defaults\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n-    // allow `repr(simd)`, and importing the various simd intrinsics\n+    // Allows `repr(simd)`, and importing the various simd intrinsics\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n-    // allow `extern \"platform-intrinsic\" { ... }`\n+    // Allows `extern \"platform-intrinsic\" { ... }`\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n-    // allow `#[unwind(..)]`\n+    // Allows `#[unwind(..)]`\n     // rustc internal for rust runtime\n     (active, unwind_attributes, \"1.4.0\", None, None),\n \n-    // allow the use of `#[naked]` on functions.\n+    // Allows the use of `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n-    // allow `#[no_debug]`\n+    // Allows `#[no_debug]`\n     (active, no_debug, \"1.5.0\", Some(29721), None),\n \n-    // allow `#[omit_gdb_pretty_printer_section]`\n-    // rustc internal.\n+    // Allows `#[omit_gdb_pretty_printer_section]`\n+    //\n+    // rustc internal\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n     // Allows cfg(target_vendor = \"...\").\n@@ -292,10 +294,10 @@ declare_features! (\n     // The `!` type. Does not imply exhaustive_patterns (below) any more.\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n-    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    // Allows exhaustive pattern matching on types that contain uninhabited types\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n-    // Allows all literals in attribute lists and values of key-value pairs.\n+    // Allows all literals in attribute lists and values of key-value pairs\n     (active, attr_literals, \"1.13.0\", Some(34981), None),\n \n     // Allows untagged unions `union U { ... }`\n@@ -334,6 +336,7 @@ declare_features! (\n     (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n     // Used to identify crates that contain the profiler runtime\n+    //\n     // rustc internal\n     (active, profiler_runtime, \"1.18.0\", None, None),\n \n@@ -391,7 +394,7 @@ declare_features! (\n     // extern types\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n \n-    // Allow trait methods with arbitrary self types\n+    // Allows trait methods with arbitrary self types\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n     // `crate` in paths\n@@ -400,7 +403,7 @@ declare_features! (\n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n-    // generic associated types (RFC 1598)\n+    // Generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // Resolve absolute paths as paths from other crates\n@@ -475,7 +478,7 @@ declare_features! (\n     // Scoped lints\n     (active, tool_lints, \"1.28.0\", Some(44690), None),\n \n-    // allow irrefutable patterns in if-let and while-let statements (RFC 2086)\n+    // Allows irrefutable patterns in if-let and while-let statements (RFC 2086)\n     (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n \n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n@@ -505,11 +508,14 @@ declare_features! (\n     // impl Debug for Foo<'_>\n     (active, impl_header_lifetime_elision, \"1.30.0\", Some(15872), Some(Edition::Edition2018)),\n \n-    // Support for arbitrary delimited token streams in non-macro attributes.\n+    // Support for arbitrary delimited token streams in non-macro attributes\n     (active, unrestricted_attribute_tokens, \"1.30.0\", Some(44690), None),\n \n-    // Allows `use x::y;` to resolve through `self::x`, not just `::x`.\n+    // Allows `use x::y;` to resolve through `self::x`, not just `::x`\n     (active, uniform_paths, \"1.30.0\", Some(53130), None),\n+\n+    // Allows `Self` in type definitions\n+    (active, self_in_typedefs, \"1.30.0\", Some(49303), None),\n );\n \n declare_features! ("}, {"sha": "4b476a0a645b1541900a37d9536985c75ceb5e98", "filename": "src/test/ui/feature-gates/feature-gate-self-in-typedefs.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.rs?ref=cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum StackList<'a, T: 'a> {\n+    Nil,\n+    Cons(T, &'a Self)\n+    //~^ ERROR cannot find type `Self` in this scope\n+    //~| `Self` is only available in traits and impls\n+}\n+\n+fn main() {}"}, {"sha": "c3f9abd90a7f1bffdb2d1e9a2a0b7b54df07a47a", "filename": "src/test/ui/feature-gates/feature-gate-self-in-typedefs.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.stderr?ref=cbcabcaac8d06c5c7f68e794b4e3ceb41253b8c1", "patch": "@@ -0,0 +1,9 @@\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/feature-gate-self-in-typedefs.rs:13:17\n+   |\n+LL |     Cons(T, &'a Self)\n+   |                 ^^^^ `Self` is only available in traits and impls\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0411`."}]}