{"sha": "0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "node_id": "C_kwDOAAsO6NoAKDBmZjJmNTgzMzBhNTkwZmNjOTY3Yjg5MDczMWQyZWJlZGY2ZWNiMGM", "commit": {"author": {"name": "ohno418", "email": "yutaro.ono.418@gmail.com", "date": "2022-04-01T02:28:28Z"}, "committer": {"name": "ohno418", "email": "yutaro.ono.418@gmail.com", "date": "2022-04-05T02:31:11Z"}, "message": "Suggest only when Rhs for PartialEq and PartialOrd is the same type as self", "tree": {"sha": "20cc2e36bfff877796a8eef8a8e3207859e8f525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cc2e36bfff877796a8eef8a8e3207859e8f525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "html_url": "https://github.com/rust-lang/rust/commit/0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff2f58330a590fcc967b890731d2ebedf6ecb0c/comments", "author": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d2a00058b4b3d4a04712309cc4cc371a8fb8653", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2a00058b4b3d4a04712309cc4cc371a8fb8653", "html_url": "https://github.com/rust-lang/rust/commit/0d2a00058b4b3d4a04712309cc4cc371a8fb8653"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "64fb352ac45614da3cbd628533a7b3e89a3ab8cf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0ff2f58330a590fcc967b890731d2ebedf6ecb0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff2f58330a590fcc967b890731d2ebedf6ecb0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0ff2f58330a590fcc967b890731d2ebedf6ecb0c", "patch": "@@ -2593,35 +2593,37 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_derive(&self, err: &mut Diagnostic, trait_pred: ty::PolyTraitPredicate<'tcx>) {\n-        if let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) {\n-            let adt = match trait_pred.skip_binder().self_ty().ty_adt_def() {\n-                Some(adt) if adt.did().is_local() => adt,\n-                _ => return,\n-            };\n-            let can_derive = match diagnostic_name {\n-                sym::Default => !adt.is_enum(),\n-                sym::Eq\n-                | sym::PartialEq\n-                | sym::Ord\n-                | sym::PartialOrd\n-                | sym::Clone\n-                | sym::Copy\n-                | sym::Hash\n-                | sym::Debug => true,\n-                _ => false,\n-            };\n-            if can_derive {\n-                err.span_suggestion_verbose(\n-                    self.tcx.def_span(adt.did()).shrink_to_lo(),\n-                    &format!(\n-                        \"consider annotating `{}` with `#[derive({})]`\",\n-                        trait_pred.skip_binder().self_ty().to_string(),\n-                        diagnostic_name.to_string(),\n-                    ),\n-                    format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n+        let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) else {\n+            return;\n+        };\n+        let Some(self_ty) = trait_pred.self_ty().no_bound_vars() else {\n+            return;\n+        };\n+\n+        let adt = match self_ty.ty_adt_def() {\n+            Some(adt) if adt.did().is_local() => adt,\n+            _ => return,\n+        };\n+        let can_derive = match diagnostic_name {\n+            sym::Default => !adt.is_enum(),\n+            sym::PartialEq | sym::PartialOrd => {\n+                let rhs_ty = trait_pred.skip_binder().trait_ref.substs.type_at(1);\n+                self_ty == rhs_ty\n+            }\n+            sym::Eq | sym::Ord | sym::Clone | sym::Copy | sym::Hash | sym::Debug => true,\n+            _ => false,\n+        };\n+        if can_derive {\n+            err.span_suggestion_verbose(\n+                self.tcx.def_span(adt.did()).shrink_to_lo(),\n+                &format!(\n+                    \"consider annotating `{}` with `#[derive({})]`\",\n+                    trait_pred.skip_binder().self_ty().to_string(),\n+                    diagnostic_name.to_string(),\n+                ),\n+                format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),\n+                Applicability::MaybeIncorrect,\n+            );\n         }\n     }\n }"}]}